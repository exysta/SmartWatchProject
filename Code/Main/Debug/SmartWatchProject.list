
SmartWatchProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069fc  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08006b84  08006b84  00007b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dcc  08006dcc  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006dcc  08006dcc  00007dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dd4  08006dd4  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dd4  08006dd4  00007dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006dd8  08006dd8  00007dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006ddc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000848  2000000c  08006de8  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000854  08006de8  00008854  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001589a  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b4  00000000  00000000  0001d8d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00020c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d43  00000000  00000000  00021dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002825d  00000000  00000000  00022b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173eb  00000000  00000000  0004ad70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eed34  00000000  00000000  0006215b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150e8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004708  00000000  00000000  00150ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001555dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006b6c 	.word	0x08006b6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006b6c 	.word	0x08006b6c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b988 	b.w	8000cdc <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	468e      	mov	lr, r1
 80009ec:	4604      	mov	r4, r0
 80009ee:	4688      	mov	r8, r1
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d14a      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4617      	mov	r7, r2
 80009f8:	d962      	bls.n	8000ac0 <__udivmoddi4+0xdc>
 80009fa:	fab2 f682 	clz	r6, r2
 80009fe:	b14e      	cbz	r6, 8000a14 <__udivmoddi4+0x30>
 8000a00:	f1c6 0320 	rsb	r3, r6, #32
 8000a04:	fa01 f806 	lsl.w	r8, r1, r6
 8000a08:	fa20 f303 	lsr.w	r3, r0, r3
 8000a0c:	40b7      	lsls	r7, r6
 8000a0e:	ea43 0808 	orr.w	r8, r3, r8
 8000a12:	40b4      	lsls	r4, r6
 8000a14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a18:	fa1f fc87 	uxth.w	ip, r7
 8000a1c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a20:	0c23      	lsrs	r3, r4, #16
 8000a22:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a2a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d909      	bls.n	8000a46 <__udivmoddi4+0x62>
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a38:	f080 80ea 	bcs.w	8000c10 <__udivmoddi4+0x22c>
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	f240 80e7 	bls.w	8000c10 <__udivmoddi4+0x22c>
 8000a42:	3902      	subs	r1, #2
 8000a44:	443b      	add	r3, r7
 8000a46:	1a9a      	subs	r2, r3, r2
 8000a48:	b2a3      	uxth	r3, r4
 8000a4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a56:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a5a:	459c      	cmp	ip, r3
 8000a5c:	d909      	bls.n	8000a72 <__udivmoddi4+0x8e>
 8000a5e:	18fb      	adds	r3, r7, r3
 8000a60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a64:	f080 80d6 	bcs.w	8000c14 <__udivmoddi4+0x230>
 8000a68:	459c      	cmp	ip, r3
 8000a6a:	f240 80d3 	bls.w	8000c14 <__udivmoddi4+0x230>
 8000a6e:	443b      	add	r3, r7
 8000a70:	3802      	subs	r0, #2
 8000a72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a76:	eba3 030c 	sub.w	r3, r3, ip
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	b11d      	cbz	r5, 8000a86 <__udivmoddi4+0xa2>
 8000a7e:	40f3      	lsrs	r3, r6
 8000a80:	2200      	movs	r2, #0
 8000a82:	e9c5 3200 	strd	r3, r2, [r5]
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d905      	bls.n	8000a9a <__udivmoddi4+0xb6>
 8000a8e:	b10d      	cbz	r5, 8000a94 <__udivmoddi4+0xb0>
 8000a90:	e9c5 0100 	strd	r0, r1, [r5]
 8000a94:	2100      	movs	r1, #0
 8000a96:	4608      	mov	r0, r1
 8000a98:	e7f5      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000a9a:	fab3 f183 	clz	r1, r3
 8000a9e:	2900      	cmp	r1, #0
 8000aa0:	d146      	bne.n	8000b30 <__udivmoddi4+0x14c>
 8000aa2:	4573      	cmp	r3, lr
 8000aa4:	d302      	bcc.n	8000aac <__udivmoddi4+0xc8>
 8000aa6:	4282      	cmp	r2, r0
 8000aa8:	f200 8105 	bhi.w	8000cb6 <__udivmoddi4+0x2d2>
 8000aac:	1a84      	subs	r4, r0, r2
 8000aae:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	4690      	mov	r8, r2
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d0e5      	beq.n	8000a86 <__udivmoddi4+0xa2>
 8000aba:	e9c5 4800 	strd	r4, r8, [r5]
 8000abe:	e7e2      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	f000 8090 	beq.w	8000be6 <__udivmoddi4+0x202>
 8000ac6:	fab2 f682 	clz	r6, r2
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	f040 80a4 	bne.w	8000c18 <__udivmoddi4+0x234>
 8000ad0:	1a8a      	subs	r2, r1, r2
 8000ad2:	0c03      	lsrs	r3, r0, #16
 8000ad4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad8:	b280      	uxth	r0, r0
 8000ada:	b2bc      	uxth	r4, r7
 8000adc:	2101      	movs	r1, #1
 8000ade:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ae2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ae6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aea:	fb04 f20c 	mul.w	r2, r4, ip
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d907      	bls.n	8000b02 <__udivmoddi4+0x11e>
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000af8:	d202      	bcs.n	8000b00 <__udivmoddi4+0x11c>
 8000afa:	429a      	cmp	r2, r3
 8000afc:	f200 80e0 	bhi.w	8000cc0 <__udivmoddi4+0x2dc>
 8000b00:	46c4      	mov	ip, r8
 8000b02:	1a9b      	subs	r3, r3, r2
 8000b04:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b08:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b0c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b10:	fb02 f404 	mul.w	r4, r2, r4
 8000b14:	429c      	cmp	r4, r3
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0x144>
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x142>
 8000b20:	429c      	cmp	r4, r3
 8000b22:	f200 80ca 	bhi.w	8000cba <__udivmoddi4+0x2d6>
 8000b26:	4602      	mov	r2, r0
 8000b28:	1b1b      	subs	r3, r3, r4
 8000b2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b2e:	e7a5      	b.n	8000a7c <__udivmoddi4+0x98>
 8000b30:	f1c1 0620 	rsb	r6, r1, #32
 8000b34:	408b      	lsls	r3, r1
 8000b36:	fa22 f706 	lsr.w	r7, r2, r6
 8000b3a:	431f      	orrs	r7, r3
 8000b3c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b40:	fa20 f306 	lsr.w	r3, r0, r6
 8000b44:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b4c:	4323      	orrs	r3, r4
 8000b4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b52:	fa1f fc87 	uxth.w	ip, r7
 8000b56:	fbbe f0f9 	udiv	r0, lr, r9
 8000b5a:	0c1c      	lsrs	r4, r3, #16
 8000b5c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b64:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b68:	45a6      	cmp	lr, r4
 8000b6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b6e:	d909      	bls.n	8000b84 <__udivmoddi4+0x1a0>
 8000b70:	193c      	adds	r4, r7, r4
 8000b72:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b76:	f080 809c 	bcs.w	8000cb2 <__udivmoddi4+0x2ce>
 8000b7a:	45a6      	cmp	lr, r4
 8000b7c:	f240 8099 	bls.w	8000cb2 <__udivmoddi4+0x2ce>
 8000b80:	3802      	subs	r0, #2
 8000b82:	443c      	add	r4, r7
 8000b84:	eba4 040e 	sub.w	r4, r4, lr
 8000b88:	fa1f fe83 	uxth.w	lr, r3
 8000b8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b90:	fb09 4413 	mls	r4, r9, r3, r4
 8000b94:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b98:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b9c:	45a4      	cmp	ip, r4
 8000b9e:	d908      	bls.n	8000bb2 <__udivmoddi4+0x1ce>
 8000ba0:	193c      	adds	r4, r7, r4
 8000ba2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ba6:	f080 8082 	bcs.w	8000cae <__udivmoddi4+0x2ca>
 8000baa:	45a4      	cmp	ip, r4
 8000bac:	d97f      	bls.n	8000cae <__udivmoddi4+0x2ca>
 8000bae:	3b02      	subs	r3, #2
 8000bb0:	443c      	add	r4, r7
 8000bb2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bb6:	eba4 040c 	sub.w	r4, r4, ip
 8000bba:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bbe:	4564      	cmp	r4, ip
 8000bc0:	4673      	mov	r3, lr
 8000bc2:	46e1      	mov	r9, ip
 8000bc4:	d362      	bcc.n	8000c8c <__udivmoddi4+0x2a8>
 8000bc6:	d05f      	beq.n	8000c88 <__udivmoddi4+0x2a4>
 8000bc8:	b15d      	cbz	r5, 8000be2 <__udivmoddi4+0x1fe>
 8000bca:	ebb8 0203 	subs.w	r2, r8, r3
 8000bce:	eb64 0409 	sbc.w	r4, r4, r9
 8000bd2:	fa04 f606 	lsl.w	r6, r4, r6
 8000bd6:	fa22 f301 	lsr.w	r3, r2, r1
 8000bda:	431e      	orrs	r6, r3
 8000bdc:	40cc      	lsrs	r4, r1
 8000bde:	e9c5 6400 	strd	r6, r4, [r5]
 8000be2:	2100      	movs	r1, #0
 8000be4:	e74f      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000be6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bea:	0c01      	lsrs	r1, r0, #16
 8000bec:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000bf0:	b280      	uxth	r0, r0
 8000bf2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bf6:	463b      	mov	r3, r7
 8000bf8:	4638      	mov	r0, r7
 8000bfa:	463c      	mov	r4, r7
 8000bfc:	46b8      	mov	r8, r7
 8000bfe:	46be      	mov	lr, r7
 8000c00:	2620      	movs	r6, #32
 8000c02:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c06:	eba2 0208 	sub.w	r2, r2, r8
 8000c0a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c0e:	e766      	b.n	8000ade <__udivmoddi4+0xfa>
 8000c10:	4601      	mov	r1, r0
 8000c12:	e718      	b.n	8000a46 <__udivmoddi4+0x62>
 8000c14:	4610      	mov	r0, r2
 8000c16:	e72c      	b.n	8000a72 <__udivmoddi4+0x8e>
 8000c18:	f1c6 0220 	rsb	r2, r6, #32
 8000c1c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c20:	40b7      	lsls	r7, r6
 8000c22:	40b1      	lsls	r1, r6
 8000c24:	fa20 f202 	lsr.w	r2, r0, r2
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c32:	b2bc      	uxth	r4, r7
 8000c34:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c38:	0c11      	lsrs	r1, r2, #16
 8000c3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3e:	fb08 f904 	mul.w	r9, r8, r4
 8000c42:	40b0      	lsls	r0, r6
 8000c44:	4589      	cmp	r9, r1
 8000c46:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c4a:	b280      	uxth	r0, r0
 8000c4c:	d93e      	bls.n	8000ccc <__udivmoddi4+0x2e8>
 8000c4e:	1879      	adds	r1, r7, r1
 8000c50:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c54:	d201      	bcs.n	8000c5a <__udivmoddi4+0x276>
 8000c56:	4589      	cmp	r9, r1
 8000c58:	d81f      	bhi.n	8000c9a <__udivmoddi4+0x2b6>
 8000c5a:	eba1 0109 	sub.w	r1, r1, r9
 8000c5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c62:	fb09 f804 	mul.w	r8, r9, r4
 8000c66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c6a:	b292      	uxth	r2, r2
 8000c6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c70:	4542      	cmp	r2, r8
 8000c72:	d229      	bcs.n	8000cc8 <__udivmoddi4+0x2e4>
 8000c74:	18ba      	adds	r2, r7, r2
 8000c76:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c7a:	d2c4      	bcs.n	8000c06 <__udivmoddi4+0x222>
 8000c7c:	4542      	cmp	r2, r8
 8000c7e:	d2c2      	bcs.n	8000c06 <__udivmoddi4+0x222>
 8000c80:	f1a9 0102 	sub.w	r1, r9, #2
 8000c84:	443a      	add	r2, r7
 8000c86:	e7be      	b.n	8000c06 <__udivmoddi4+0x222>
 8000c88:	45f0      	cmp	r8, lr
 8000c8a:	d29d      	bcs.n	8000bc8 <__udivmoddi4+0x1e4>
 8000c8c:	ebbe 0302 	subs.w	r3, lr, r2
 8000c90:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c94:	3801      	subs	r0, #1
 8000c96:	46e1      	mov	r9, ip
 8000c98:	e796      	b.n	8000bc8 <__udivmoddi4+0x1e4>
 8000c9a:	eba7 0909 	sub.w	r9, r7, r9
 8000c9e:	4449      	add	r1, r9
 8000ca0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ca4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ca8:	fb09 f804 	mul.w	r8, r9, r4
 8000cac:	e7db      	b.n	8000c66 <__udivmoddi4+0x282>
 8000cae:	4673      	mov	r3, lr
 8000cb0:	e77f      	b.n	8000bb2 <__udivmoddi4+0x1ce>
 8000cb2:	4650      	mov	r0, sl
 8000cb4:	e766      	b.n	8000b84 <__udivmoddi4+0x1a0>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e6fd      	b.n	8000ab6 <__udivmoddi4+0xd2>
 8000cba:	443b      	add	r3, r7
 8000cbc:	3a02      	subs	r2, #2
 8000cbe:	e733      	b.n	8000b28 <__udivmoddi4+0x144>
 8000cc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cc4:	443b      	add	r3, r7
 8000cc6:	e71c      	b.n	8000b02 <__udivmoddi4+0x11e>
 8000cc8:	4649      	mov	r1, r9
 8000cca:	e79c      	b.n	8000c06 <__udivmoddi4+0x222>
 8000ccc:	eba1 0109 	sub.w	r1, r1, r9
 8000cd0:	46c4      	mov	ip, r8
 8000cd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cd6:	fb09 f804 	mul.w	r8, r9, r4
 8000cda:	e7c4      	b.n	8000c66 <__udivmoddi4+0x282>

08000cdc <__aeabi_idiv0>:
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ce6:	4b22      	ldr	r3, [pc, #136]	@ (8000d70 <MX_DMA_Init+0x90>)
 8000ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cea:	4a21      	ldr	r2, [pc, #132]	@ (8000d70 <MX_DMA_Init+0x90>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d70 <MX_DMA_Init+0x90>)
 8000cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d70 <MX_DMA_Init+0x90>)
 8000d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d02:	4a1b      	ldr	r2, [pc, #108]	@ (8000d70 <MX_DMA_Init+0x90>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d0a:	4b19      	ldr	r3, [pc, #100]	@ (8000d70 <MX_DMA_Init+0x90>)
 8000d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	200c      	movs	r0, #12
 8000d1c:	f001 f90f 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d20:	200c      	movs	r0, #12
 8000d22:	f001 f928 	bl	8001f76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	200d      	movs	r0, #13
 8000d2c:	f001 f907 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d30:	200d      	movs	r0, #13
 8000d32:	f001 f920 	bl	8001f76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	200e      	movs	r0, #14
 8000d3c:	f001 f8ff 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d40:	200e      	movs	r0, #14
 8000d42:	f001 f918 	bl	8001f76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f001 f8f7 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d50:	200f      	movs	r0, #15
 8000d52:	f001 f910 	bl	8001f76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2045      	movs	r0, #69	@ 0x45
 8000d5c:	f001 f8ef 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8000d60:	2045      	movs	r0, #69	@ 0x45
 8000d62:	f001 f908 	bl	8001f76 <HAL_NVIC_EnableIRQ>

}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40021000 	.word	0x40021000

08000d74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	4b62      	ldr	r3, [pc, #392]	@ (8000f14 <MX_GPIO_Init+0x1a0>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	4a61      	ldr	r2, [pc, #388]	@ (8000f14 <MX_GPIO_Init+0x1a0>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d96:	4b5f      	ldr	r3, [pc, #380]	@ (8000f14 <MX_GPIO_Init+0x1a0>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b5c      	ldr	r3, [pc, #368]	@ (8000f14 <MX_GPIO_Init+0x1a0>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	4a5b      	ldr	r2, [pc, #364]	@ (8000f14 <MX_GPIO_Init+0x1a0>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dae:	4b59      	ldr	r3, [pc, #356]	@ (8000f14 <MX_GPIO_Init+0x1a0>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	4b56      	ldr	r3, [pc, #344]	@ (8000f14 <MX_GPIO_Init+0x1a0>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbe:	4a55      	ldr	r2, [pc, #340]	@ (8000f14 <MX_GPIO_Init+0x1a0>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc6:	4b53      	ldr	r3, [pc, #332]	@ (8000f14 <MX_GPIO_Init+0x1a0>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_MAX30102_Pin|ST7789_DC_Pin|ST7789_CS_Pin|ST7789_BLK_Pin
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 61b9 	mov.w	r1, #1480	@ 0x5c8
 8000dd8:	484f      	ldr	r0, [pc, #316]	@ (8000f18 <MX_GPIO_Init+0x1a4>)
 8000dda:	f001 fd13 	bl	8002804 <HAL_GPIO_WritePin>
                          |BLE_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_SWD_Pin|LED_ERROR_Pin|LED_STATUS_Pin|LED_BLE_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f640 0164 	movw	r1, #2148	@ 0x864
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de8:	f001 fd0c 	bl	8002804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GPS_Pin|LED_LCD_Pin|LED_BMP280_Pin|LED_MPUS6500_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f240 1107 	movw	r1, #263	@ 0x107
 8000df2:	484a      	ldr	r0, [pc, #296]	@ (8000f1c <MX_GPIO_Init+0x1a8>)
 8000df4:	f001 fd06 	bl	8002804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dfe:	4847      	ldr	r0, [pc, #284]	@ (8000f1c <MX_GPIO_Init+0x1a8>)
 8000e00:	f001 fd00 	bl	8002804 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MAX30102_INT_Pin BUTTON_NEXT_Pin */
  GPIO_InitStruct.Pin = MAX30102_INT_Pin|BUTTON_NEXT_Pin;
 8000e04:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8000e08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4619      	mov	r1, r3
 8000e1a:	483f      	ldr	r0, [pc, #252]	@ (8000f18 <MX_GPIO_Init+0x1a4>)
 8000e1c:	f001 fb48 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_MAX30102_Pin ST7789_CS_Pin ST7789_BLK_Pin BLE_EN_Pin */
  GPIO_InitStruct.Pin = LED_MAX30102_Pin|ST7789_CS_Pin|ST7789_BLK_Pin|BLE_EN_Pin;
 8000e20:	f44f 63b1 	mov.w	r3, #1416	@ 0x588
 8000e24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	4619      	mov	r1, r3
 8000e38:	4837      	ldr	r0, [pc, #220]	@ (8000f18 <MX_GPIO_Init+0x1a4>)
 8000e3a:	f001 fb39 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SWD_Pin LED_ERROR_Pin LED_STATUS_Pin LED_BLE_Pin */
  GPIO_InitStruct.Pin = LED_SWD_Pin|LED_ERROR_Pin|LED_STATUS_Pin|LED_BLE_Pin;
 8000e3e:	f640 0364 	movw	r3, #2148	@ 0x864
 8000e42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5a:	f001 fb29 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GPS_Pin LED_LCD_Pin LED_BMP280_Pin ST7789_RST_Pin
                           LED_MPUS6500_Pin */
  GPIO_InitStruct.Pin = LED_GPS_Pin|LED_LCD_Pin|LED_BMP280_Pin|ST7789_RST_Pin
 8000e5e:	f241 1307 	movw	r3, #4359	@ 0x1107
 8000e62:	60fb      	str	r3, [r7, #12]
                          |LED_MPUS6500_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	4619      	mov	r1, r3
 8000e76:	4829      	ldr	r0, [pc, #164]	@ (8000f1c <MX_GPIO_Init+0x1a8>)
 8000e78:	f001 fb1a 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin;
 8000e7c:	2340      	movs	r3, #64	@ 0x40
 8000e7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ST7789_DC_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	4821      	ldr	r0, [pc, #132]	@ (8000f18 <MX_GPIO_Init+0x1a4>)
 8000e94:	f001 fb0c 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_BACK_Pin */
  GPIO_InitStruct.Pin = BUTTON_BACK_Pin;
 8000e98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_BACK_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	4619      	mov	r1, r3
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb2:	f001 fafd 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STATE_Pin */
  GPIO_InitStruct.Pin = BLE_STATE_Pin;
 8000eb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000eba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLE_STATE_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4813      	ldr	r0, [pc, #76]	@ (8000f18 <MX_GPIO_Init+0x1a4>)
 8000ecc:	f001 faf0 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6500_INT_Pin */
  GPIO_InitStruct.Pin = MPU6500_INT_Pin;
 8000ed0:	2320      	movs	r3, #32
 8000ed2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MPU6500_INT_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480d      	ldr	r0, [pc, #52]	@ (8000f1c <MX_GPIO_Init+0x1a8>)
 8000ee6:	f001 fae3 	bl	80024b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	2008      	movs	r0, #8
 8000ef0:	f001 f825 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ef4:	2008      	movs	r0, #8
 8000ef6:	f001 f83e 	bl	8001f76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	2017      	movs	r0, #23
 8000f00:	f001 f81d 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f04:	2017      	movs	r0, #23
 8000f06:	f001 f836 	bl	8001f76 <HAL_NVIC_EnableIRQ>

}
 8000f0a:	bf00      	nop
 8000f0c:	3720      	adds	r7, #32
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000
 8000f18:	48000800 	.word	0x48000800
 8000f1c:	48000400 	.word	0x48000400

08000f20 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	@ (8000f94 <MX_I2C1_Init+0x74>)
 8000f26:	4a1c      	ldr	r2, [pc, #112]	@ (8000f98 <MX_I2C1_Init+0x78>)
 8000f28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <MX_I2C1_Init+0x74>)
 8000f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f9c <MX_I2C1_Init+0x7c>)
 8000f2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f30:	4b18      	ldr	r3, [pc, #96]	@ (8000f94 <MX_I2C1_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f36:	4b17      	ldr	r3, [pc, #92]	@ (8000f94 <MX_I2C1_Init+0x74>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <MX_I2C1_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f42:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <MX_I2C1_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <MX_I2C1_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <MX_I2C1_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <MX_I2C1_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f5a:	480e      	ldr	r0, [pc, #56]	@ (8000f94 <MX_I2C1_Init+0x74>)
 8000f5c:	f001 fc82 	bl	8002864 <HAL_I2C_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f66:	f000 fa7b 	bl	8001460 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4809      	ldr	r0, [pc, #36]	@ (8000f94 <MX_I2C1_Init+0x74>)
 8000f6e:	f001 fd14 	bl	800299a <HAL_I2CEx_ConfigAnalogFilter>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f78:	f000 fa72 	bl	8001460 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <MX_I2C1_Init+0x74>)
 8000f80:	f001 fd56 	bl	8002a30 <HAL_I2CEx_ConfigDigitalFilter>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f8a:	f000 fa69 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000028 	.word	0x20000028
 8000f98:	40005400 	.word	0x40005400
 8000f9c:	10d19ce4 	.word	0x10d19ce4

08000fa0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <MX_I2C2_Init+0x74>)
 8000fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8001018 <MX_I2C2_Init+0x78>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <MX_I2C2_Init+0x74>)
 8000fac:	4a1b      	ldr	r2, [pc, #108]	@ (800101c <MX_I2C2_Init+0x7c>)
 8000fae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <MX_I2C2_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <MX_I2C2_Init+0x74>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <MX_I2C2_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <MX_I2C2_Init+0x74>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <MX_I2C2_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fce:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_I2C2_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <MX_I2C2_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fda:	480e      	ldr	r0, [pc, #56]	@ (8001014 <MX_I2C2_Init+0x74>)
 8000fdc:	f001 fc42 	bl	8002864 <HAL_I2C_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000fe6:	f000 fa3b 	bl	8001460 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fea:	2100      	movs	r1, #0
 8000fec:	4809      	ldr	r0, [pc, #36]	@ (8001014 <MX_I2C2_Init+0x74>)
 8000fee:	f001 fcd4 	bl	800299a <HAL_I2CEx_ConfigAnalogFilter>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ff8:	f000 fa32 	bl	8001460 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4805      	ldr	r0, [pc, #20]	@ (8001014 <MX_I2C2_Init+0x74>)
 8001000:	f001 fd16 	bl	8002a30 <HAL_I2CEx_ConfigDigitalFilter>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800100a:	f000 fa29 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000007c 	.word	0x2000007c
 8001018:	40005800 	.word	0x40005800
 800101c:	10d19ce4 	.word	0x10d19ce4

08001020 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001024:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <MX_I2C3_Init+0x74>)
 8001026:	4a1c      	ldr	r2, [pc, #112]	@ (8001098 <MX_I2C3_Init+0x78>)
 8001028:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 800102a:	4b1a      	ldr	r3, [pc, #104]	@ (8001094 <MX_I2C3_Init+0x74>)
 800102c:	4a1b      	ldr	r2, [pc, #108]	@ (800109c <MX_I2C3_Init+0x7c>)
 800102e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001030:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <MX_I2C3_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001036:	4b17      	ldr	r3, [pc, #92]	@ (8001094 <MX_I2C3_Init+0x74>)
 8001038:	2201      	movs	r2, #1
 800103a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800103c:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <MX_I2C3_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001042:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <MX_I2C3_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <MX_I2C3_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104e:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <MX_I2C3_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <MX_I2C3_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800105a:	480e      	ldr	r0, [pc, #56]	@ (8001094 <MX_I2C3_Init+0x74>)
 800105c:	f001 fc02 	bl	8002864 <HAL_I2C_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001066:	f000 f9fb 	bl	8001460 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800106a:	2100      	movs	r1, #0
 800106c:	4809      	ldr	r0, [pc, #36]	@ (8001094 <MX_I2C3_Init+0x74>)
 800106e:	f001 fc94 	bl	800299a <HAL_I2CEx_ConfigAnalogFilter>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001078:	f000 f9f2 	bl	8001460 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800107c:	2100      	movs	r1, #0
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <MX_I2C3_Init+0x74>)
 8001080:	f001 fcd6 	bl	8002a30 <HAL_I2CEx_ConfigDigitalFilter>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800108a:	f000 f9e9 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200000d0 	.word	0x200000d0
 8001098:	40005c00 	.word	0x40005c00
 800109c:	10d19ce4 	.word	0x10d19ce4

080010a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0b0      	sub	sp, #192	@ 0xc0
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010bc:	2288      	movs	r2, #136	@ 0x88
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f005 fd19 	bl	8006af8 <memset>
  if(i2cHandle->Instance==I2C1)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a63      	ldr	r2, [pc, #396]	@ (8001258 <HAL_I2C_MspInit+0x1b8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d13b      	bne.n	8001148 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010d0:	2340      	movs	r3, #64	@ 0x40
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 fb57 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010e8:	f000 f9ba 	bl	8001460 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b5b      	ldr	r3, [pc, #364]	@ (800125c <HAL_I2C_MspInit+0x1bc>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f0:	4a5a      	ldr	r2, [pc, #360]	@ (800125c <HAL_I2C_MspInit+0x1bc>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f8:	4b58      	ldr	r3, [pc, #352]	@ (800125c <HAL_I2C_MspInit+0x1bc>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	623b      	str	r3, [r7, #32]
 8001102:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU6500_SCL_Pin|MPU6500_SDA_Pin;
 8001104:	23c0      	movs	r3, #192	@ 0xc0
 8001106:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110a:	2312      	movs	r3, #18
 800110c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800111c:	2304      	movs	r3, #4
 800111e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001122:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001126:	4619      	mov	r1, r3
 8001128:	484d      	ldr	r0, [pc, #308]	@ (8001260 <HAL_I2C_MspInit+0x1c0>)
 800112a:	f001 f9c1 	bl	80024b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800112e:	4b4b      	ldr	r3, [pc, #300]	@ (800125c <HAL_I2C_MspInit+0x1bc>)
 8001130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001132:	4a4a      	ldr	r2, [pc, #296]	@ (800125c <HAL_I2C_MspInit+0x1bc>)
 8001134:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001138:	6593      	str	r3, [r2, #88]	@ 0x58
 800113a:	4b48      	ldr	r3, [pc, #288]	@ (800125c <HAL_I2C_MspInit+0x1bc>)
 800113c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001146:	e082      	b.n	800124e <HAL_I2C_MspInit+0x1ae>
  else if(i2cHandle->Instance==I2C2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a45      	ldr	r2, [pc, #276]	@ (8001264 <HAL_I2C_MspInit+0x1c4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d13c      	bne.n	80011cc <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001152:	2380      	movs	r3, #128	@ 0x80
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001156:	2300      	movs	r3, #0
 8001158:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800115a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800115e:	4618      	mov	r0, r3
 8001160:	f002 fb16 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_I2C_MspInit+0xce>
      Error_Handler();
 800116a:	f000 f979 	bl	8001460 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	4b3b      	ldr	r3, [pc, #236]	@ (800125c <HAL_I2C_MspInit+0x1bc>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	4a3a      	ldr	r2, [pc, #232]	@ (800125c <HAL_I2C_MspInit+0x1bc>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117a:	4b38      	ldr	r3, [pc, #224]	@ (800125c <HAL_I2C_MspInit+0x1bc>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = BMP280_SCL_Pin|BMP280_SDA_Pin;
 8001186:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800118a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118e:	2312      	movs	r3, #18
 8001190:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011a0:	2304      	movs	r3, #4
 80011a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80011aa:	4619      	mov	r1, r3
 80011ac:	482c      	ldr	r0, [pc, #176]	@ (8001260 <HAL_I2C_MspInit+0x1c0>)
 80011ae:	f001 f97f 	bl	80024b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011b2:	4b2a      	ldr	r3, [pc, #168]	@ (800125c <HAL_I2C_MspInit+0x1bc>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b6:	4a29      	ldr	r2, [pc, #164]	@ (800125c <HAL_I2C_MspInit+0x1bc>)
 80011b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011be:	4b27      	ldr	r3, [pc, #156]	@ (800125c <HAL_I2C_MspInit+0x1bc>)
 80011c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	697b      	ldr	r3, [r7, #20]
}
 80011ca:	e040      	b.n	800124e <HAL_I2C_MspInit+0x1ae>
  else if(i2cHandle->Instance==I2C3)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a25      	ldr	r2, [pc, #148]	@ (8001268 <HAL_I2C_MspInit+0x1c8>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d13b      	bne.n	800124e <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80011d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80011dc:	2300      	movs	r3, #0
 80011de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e4:	4618      	mov	r0, r3
 80011e6:	f002 fad3 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 80011f0:	f000 f936 	bl	8001460 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f4:	4b19      	ldr	r3, [pc, #100]	@ (800125c <HAL_I2C_MspInit+0x1bc>)
 80011f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f8:	4a18      	ldr	r2, [pc, #96]	@ (800125c <HAL_I2C_MspInit+0x1bc>)
 80011fa:	f043 0304 	orr.w	r3, r3, #4
 80011fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001200:	4b16      	ldr	r3, [pc, #88]	@ (800125c <HAL_I2C_MspInit+0x1bc>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MAX30102_SCL_Pin|MAX30102_SDA_Pin;
 800120c:	2303      	movs	r3, #3
 800120e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001212:	2312      	movs	r3, #18
 8001214:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001224:	2304      	movs	r3, #4
 8001226:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800122e:	4619      	mov	r1, r3
 8001230:	480e      	ldr	r0, [pc, #56]	@ (800126c <HAL_I2C_MspInit+0x1cc>)
 8001232:	f001 f93d 	bl	80024b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <HAL_I2C_MspInit+0x1bc>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123a:	4a08      	ldr	r2, [pc, #32]	@ (800125c <HAL_I2C_MspInit+0x1bc>)
 800123c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001240:	6593      	str	r3, [r2, #88]	@ 0x58
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_I2C_MspInit+0x1bc>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001246:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
}
 800124e:	bf00      	nop
 8001250:	37c0      	adds	r7, #192	@ 0xc0
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40005400 	.word	0x40005400
 800125c:	40021000 	.word	0x40021000
 8001260:	48000400 	.word	0x48000400
 8001264:	40005800 	.word	0x40005800
 8001268:	40005c00 	.word	0x40005c00
 800126c:	48000800 	.word	0x48000800

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001276:	f000 fcee 	bl	8001c56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127a:	f000 f849 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127e:	f7ff fd79 	bl	8000d74 <MX_GPIO_Init>
  MX_DMA_Init();
 8001282:	f7ff fd2d 	bl	8000ce0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001286:	f7ff fe4b 	bl	8000f20 <MX_I2C1_Init>
  MX_I2C2_Init();
 800128a:	f7ff fe89 	bl	8000fa0 <MX_I2C2_Init>
  MX_I2C3_Init();
 800128e:	f7ff fec7 	bl	8001020 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 8001292:	f000 fad3 	bl	800183c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001296:	f000 f8e9 	bl	800146c <MX_SPI2_Init>
  MX_UART4_Init();
 800129a:	f000 fa6b 	bl	8001774 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800129e:	f000 fa99 	bl	80017d4 <MX_USART1_UART_Init>
#ifdef BME280
  Sensor_BMP280_init();
#endif

#ifdef GPS_TEST
	GNSS_Init(&GNSS_Handle, &GNSS_UART);
 80012a2:	4919      	ldr	r1, [pc, #100]	@ (8001308 <main+0x98>)
 80012a4:	4819      	ldr	r0, [pc, #100]	@ (800130c <main+0x9c>)
 80012a6:	f004 fffd 	bl	80062a4 <GNSS_Init>
	HAL_Delay(1000);
 80012aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012ae:	f000 fd47 	bl	8001d40 <HAL_Delay>
	GNSS_LoadConfig(&GNSS_Handle);
 80012b2:	4816      	ldr	r0, [pc, #88]	@ (800130c <main+0x9c>)
 80012b4:	f005 fbe6 	bl	8006a84 <GNSS_LoadConfig>
	uint32_t Timer = HAL_GetTick();
 80012b8:	f000 fd36 	bl	8001d28 <HAL_GetTick>
 80012bc:	6078      	str	r0, [r7, #4]
	  	Sensor_BMP280_read_data();
		HAL_Delay(500);
#endif

#ifdef GPS_TEST
		if ((HAL_GetTick() - Timer) > 1000) {
 80012be:	f000 fd33 	bl	8001d28 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012cc:	d9f7      	bls.n	80012be <main+0x4e>
			GNSS_GetUniqID(&GNSS_Handle);
 80012ce:	480f      	ldr	r0, [pc, #60]	@ (800130c <main+0x9c>)
 80012d0:	f005 f898 	bl	8006404 <GNSS_GetUniqID>
			GNSS_ParseBuffer(&GNSS_Handle);
 80012d4:	480d      	ldr	r0, [pc, #52]	@ (800130c <main+0x9c>)
 80012d6:	f005 f82e 	bl	8006336 <GNSS_ParseBuffer>
			HAL_Delay(250);
 80012da:	20fa      	movs	r0, #250	@ 0xfa
 80012dc:	f000 fd30 	bl	8001d40 <HAL_Delay>
			GNSS_GetPVTData(&GNSS_Handle);
 80012e0:	480a      	ldr	r0, [pc, #40]	@ (800130c <main+0x9c>)
 80012e2:	f005 f8a9 	bl	8006438 <GNSS_GetPVTData>
			GNSS_ParseBuffer(&GNSS_Handle);
 80012e6:	4809      	ldr	r0, [pc, #36]	@ (800130c <main+0x9c>)
 80012e8:	f005 f825 	bl	8006336 <GNSS_ParseBuffer>
			HAL_Delay(250);
 80012ec:	20fa      	movs	r0, #250	@ 0xfa
 80012ee:	f000 fd27 	bl	8001d40 <HAL_Delay>
			GNSS_SetMode(&GNSS_Handle,Wirst);
 80012f2:	2108      	movs	r1, #8
 80012f4:	4805      	ldr	r0, [pc, #20]	@ (800130c <main+0x9c>)
 80012f6:	f005 f8db 	bl	80064b0 <GNSS_SetMode>
			HAL_Delay(250);
 80012fa:	20fa      	movs	r0, #250	@ 0xfa
 80012fc:	f000 fd20 	bl	8001d40 <HAL_Delay>
//			printf("Unique ID: %04X %04X %04X %04X %04X \n\r",
//					GNSS_Handle.uniqueID[0], GNSS_Handle.uniqueID[1],
//					GNSS_Handle.uniqueID[2], GNSS_Handle.uniqueID[3],
//					GNSS_Handle.uniqueID[4], GNSS_Handle.uniqueID[5]);
//			printf("--------------------------------------\r\n" );
			Timer = HAL_GetTick();
 8001300:	f000 fd12 	bl	8001d28 <HAL_GetTick>
 8001304:	6078      	str	r0, [r7, #4]
		if ((HAL_GetTick() - Timer) > 1000) {
 8001306:	e7da      	b.n	80012be <main+0x4e>
 8001308:	2000059c 	.word	0x2000059c
 800130c:	20000124 	.word	0x20000124

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b096      	sub	sp, #88	@ 0x58
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2244      	movs	r2, #68	@ 0x44
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f005 fbea 	bl	8006af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001324:	463b      	mov	r3, r7
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001332:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001336:	f001 fbd5 	bl	8002ae4 <HAL_PWREx_ControlVoltageScaling>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001340:	f000 f88e 	bl	8001460 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001344:	2310      	movs	r3, #16
 8001346:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001348:	2301      	movs	r3, #1
 800134a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001350:	2360      	movs	r3, #96	@ 0x60
 8001352:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001354:	2302      	movs	r3, #2
 8001356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001358:	2301      	movs	r3, #1
 800135a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800135c:	2301      	movs	r3, #1
 800135e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001360:	2328      	movs	r3, #40	@ 0x28
 8001362:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001364:	2307      	movs	r3, #7
 8001366:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001368:	2302      	movs	r3, #2
 800136a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800136c:	2302      	movs	r3, #2
 800136e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4618      	mov	r0, r3
 8001376:	f001 fc0b 	bl	8002b90 <HAL_RCC_OscConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001380:	f000 f86e 	bl	8001460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001384:	230f      	movs	r3, #15
 8001386:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001388:	2303      	movs	r3, #3
 800138a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	2104      	movs	r1, #4
 800139c:	4618      	mov	r0, r3
 800139e:	f001 ffd3 	bl	8003348 <HAL_RCC_ClockConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013a8:	f000 f85a 	bl	8001460 <Error_Handler>
  }
}
 80013ac:	bf00      	nop
 80013ae:	3758      	adds	r7, #88	@ 0x58
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
// This callback is called when idle line is detected or buffer is full
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	807b      	strh	r3, [r7, #2]
	//for BLE
    if (huart == &BLE_UART)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a16      	ldr	r2, [pc, #88]	@ (800141c <HAL_UARTEx_RxEventCallback+0x68>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d125      	bne.n	8001414 <HAL_UARTEx_RxEventCallback+0x60>
    {
        // Copy the data from DMA buffer to message buffer
        memcpy(messageBuffer, rxBuffer, Size);
 80013c8:	887b      	ldrh	r3, [r7, #2]
 80013ca:	461a      	mov	r2, r3
 80013cc:	4914      	ldr	r1, [pc, #80]	@ (8001420 <HAL_UARTEx_RxEventCallback+0x6c>)
 80013ce:	4815      	ldr	r0, [pc, #84]	@ (8001424 <HAL_UARTEx_RxEventCallback+0x70>)
 80013d0:	f005 fbbe 	bl	8006b50 <memcpy>

        // Null-terminate the string
        messageBuffer[Size] = '\0';
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	4a13      	ldr	r2, [pc, #76]	@ (8001424 <HAL_UARTEx_RxEventCallback+0x70>)
 80013d8:	2100      	movs	r1, #0
 80013da:	54d1      	strb	r1, [r2, r3]

        // Set flag for main loop
        messageReady = 1;
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <HAL_UARTEx_RxEventCallback+0x74>)
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]

        HAL_UART_AbortReceive(huart);  // Stop DMA
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f003 f96a 	bl	80046bc <HAL_UART_AbortReceive>
        memset(rxBuffer, 0, sizeof(rxBuffer));  // Reset buffer
 80013e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013ec:	2100      	movs	r1, #0
 80013ee:	480c      	ldr	r0, [pc, #48]	@ (8001420 <HAL_UARTEx_RxEventCallback+0x6c>)
 80013f0:	f005 fb82 	bl	8006af8 <memset>

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 80013f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013f8:	4909      	ldr	r1, [pc, #36]	@ (8001420 <HAL_UARTEx_RxEventCallback+0x6c>)
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f004 fefe 	bl	80061fc <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0204 	bic.w	r2, r2, #4
 8001412:	601a      	str	r2, [r3, #0]
    }
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000514 	.word	0x20000514
 8001420:	20000754 	.word	0x20000754
 8001424:	200001d4 	.word	0x200001d4
 8001428:	200002d4 	.word	0x200002d4

0800142c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BUTTON_BACK_Pin)
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800143c:	d009      	beq.n	8001452 <HAL_GPIO_EXTI_Callback+0x26>
    {

    }
    else if (GPIO_Pin == BUTTON_NEXT_Pin)
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001444:	d005      	beq.n	8001452 <HAL_GPIO_EXTI_Callback+0x26>
    {

    }
    else if (GPIO_Pin == MAX30102_INT_Pin)
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	2b04      	cmp	r3, #4
 800144a:	d102      	bne.n	8001452 <HAL_GPIO_EXTI_Callback+0x26>
    {
    	max30102_on_interrupt(&max30102);
 800144c:	4803      	ldr	r0, [pc, #12]	@ (800145c <HAL_GPIO_EXTI_Callback+0x30>)
 800144e:	f005 fb45 	bl	8006adc <max30102_on_interrupt>
    }
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200002d8 	.word	0x200002d8

08001460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <Error_Handler+0x8>

0800146c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001470:	4b1b      	ldr	r3, [pc, #108]	@ (80014e0 <MX_SPI2_Init+0x74>)
 8001472:	4a1c      	ldr	r2, [pc, #112]	@ (80014e4 <MX_SPI2_Init+0x78>)
 8001474:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001476:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <MX_SPI2_Init+0x74>)
 8001478:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800147c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800147e:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <MX_SPI2_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001484:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <MX_SPI2_Init+0x74>)
 8001486:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800148a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800148c:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <MX_SPI2_Init+0x74>)
 800148e:	2202      	movs	r2, #2
 8001490:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001492:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <MX_SPI2_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001498:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <MX_SPI2_Init+0x74>)
 800149a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800149e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <MX_SPI2_Init+0x74>)
 80014a2:	2218      	movs	r2, #24
 80014a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <MX_SPI2_Init+0x74>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_SPI2_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <MX_SPI2_Init+0x74>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_SPI2_Init+0x74>)
 80014ba:	2207      	movs	r2, #7
 80014bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014be:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <MX_SPI2_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014c4:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_SPI2_Init+0x74>)
 80014c6:	2208      	movs	r2, #8
 80014c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014ca:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <MX_SPI2_Init+0x74>)
 80014cc:	f002 fe1c 	bl	8004108 <HAL_SPI_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80014d6:	f7ff ffc3 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200003e0 	.word	0x200003e0
 80014e4:	40003800 	.word	0x40003800

080014e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a30      	ldr	r2, [pc, #192]	@ (80015c8 <HAL_SPI_MspInit+0xe0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d159      	bne.n	80015be <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800150a:	4b30      	ldr	r3, [pc, #192]	@ (80015cc <HAL_SPI_MspInit+0xe4>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150e:	4a2f      	ldr	r2, [pc, #188]	@ (80015cc <HAL_SPI_MspInit+0xe4>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001514:	6593      	str	r3, [r2, #88]	@ 0x58
 8001516:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <HAL_SPI_MspInit+0xe4>)
 8001518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	4b2a      	ldr	r3, [pc, #168]	@ (80015cc <HAL_SPI_MspInit+0xe4>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	4a29      	ldr	r2, [pc, #164]	@ (80015cc <HAL_SPI_MspInit+0xe4>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152e:	4b27      	ldr	r3, [pc, #156]	@ (80015cc <HAL_SPI_MspInit+0xe4>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ST7789_SCK_Pin|ST7789_MISO_Pin|ST7789_MOSI_Pin;
 800153a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800153e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800154c:	2305      	movs	r3, #5
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	481e      	ldr	r0, [pc, #120]	@ (80015d0 <HAL_SPI_MspInit+0xe8>)
 8001558:	f000 ffaa 	bl	80024b0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800155c:	4b1d      	ldr	r3, [pc, #116]	@ (80015d4 <HAL_SPI_MspInit+0xec>)
 800155e:	4a1e      	ldr	r2, [pc, #120]	@ (80015d8 <HAL_SPI_MspInit+0xf0>)
 8001560:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001562:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <HAL_SPI_MspInit+0xec>)
 8001564:	2201      	movs	r2, #1
 8001566:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001568:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <HAL_SPI_MspInit+0xec>)
 800156a:	2210      	movs	r2, #16
 800156c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800156e:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <HAL_SPI_MspInit+0xec>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001574:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <HAL_SPI_MspInit+0xec>)
 8001576:	2280      	movs	r2, #128	@ 0x80
 8001578:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800157a:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <HAL_SPI_MspInit+0xec>)
 800157c:	2200      	movs	r2, #0
 800157e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001580:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <HAL_SPI_MspInit+0xec>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001586:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <HAL_SPI_MspInit+0xec>)
 8001588:	2200      	movs	r2, #0
 800158a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <HAL_SPI_MspInit+0xec>)
 800158e:	2200      	movs	r2, #0
 8001590:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001592:	4810      	ldr	r0, [pc, #64]	@ (80015d4 <HAL_SPI_MspInit+0xec>)
 8001594:	f000 fd0a 	bl	8001fac <HAL_DMA_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800159e:	f7ff ff5f 	bl	8001460 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a0b      	ldr	r2, [pc, #44]	@ (80015d4 <HAL_SPI_MspInit+0xec>)
 80015a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80015a8:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <HAL_SPI_MspInit+0xec>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	2024      	movs	r0, #36	@ 0x24
 80015b4:	f000 fcc3 	bl	8001f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80015b8:	2024      	movs	r0, #36	@ 0x24
 80015ba:	f000 fcdc 	bl	8001f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80015be:	bf00      	nop
 80015c0:	3728      	adds	r7, #40	@ 0x28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40003800 	.word	0x40003800
 80015cc:	40021000 	.word	0x40021000
 80015d0:	48000400 	.word	0x48000400
 80015d4:	20000444 	.word	0x20000444
 80015d8:	40020058 	.word	0x40020058

080015dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <HAL_MspInit+0x44>)
 80015e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001620 <HAL_MspInit+0x44>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80015ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <HAL_MspInit+0x44>)
 80015f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <HAL_MspInit+0x44>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fe:	4a08      	ldr	r2, [pc, #32]	@ (8001620 <HAL_MspInit+0x44>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001604:	6593      	str	r3, [r2, #88]	@ 0x58
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_MspInit+0x44>)
 8001608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <NMI_Handler+0x4>

0800162c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <MemManage_Handler+0x4>

0800163c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <UsageFault_Handler+0x4>

0800164c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167a:	f000 fb41 	bl	8001d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}

08001682 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAX30102_INT_Pin);
 8001686:	2004      	movs	r0, #4
 8001688:	f001 f8d4 	bl	8002834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001694:	4802      	ldr	r0, [pc, #8]	@ (80016a0 <DMA1_Channel2_IRQHandler+0x10>)
 8001696:	f000 fe20 	bl	80022da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200006fc 	.word	0x200006fc

080016a4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80016a8:	4802      	ldr	r0, [pc, #8]	@ (80016b4 <DMA1_Channel3_IRQHandler+0x10>)
 80016aa:	f000 fe16 	bl	80022da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200006b4 	.word	0x200006b4

080016b8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80016bc:	4802      	ldr	r0, [pc, #8]	@ (80016c8 <DMA1_Channel4_IRQHandler+0x10>)
 80016be:	f000 fe0c 	bl	80022da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000066c 	.word	0x2000066c

080016cc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80016d0:	4802      	ldr	r0, [pc, #8]	@ (80016dc <DMA1_Channel5_IRQHandler+0x10>)
 80016d2:	f000 fe02 	bl	80022da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000444 	.word	0x20000444

080016e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU6500_INT_Pin);
 80016e4:	2020      	movs	r0, #32
 80016e6:	f001 f8a5 	bl	8002834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_BACK_Pin);
 80016ea:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80016ee:	f001 f8a1 	bl	8002834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_NEXT_Pin);
 80016f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016f6:	f001 f89d 	bl	8002834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001704:	4802      	ldr	r0, [pc, #8]	@ (8001710 <SPI2_IRQHandler+0x10>)
 8001706:	f002 fda3 	bl	8004250 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200003e0 	.word	0x200003e0

08001714 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001718:	4802      	ldr	r0, [pc, #8]	@ (8001724 <USART1_IRQHandler+0x10>)
 800171a:	f003 f881 	bl	8004820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000514 	.word	0x20000514

08001728 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800172c:	4802      	ldr	r0, [pc, #8]	@ (8001738 <USART3_IRQHandler+0x10>)
 800172e:	f003 f877 	bl	8004820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000059c 	.word	0x2000059c

0800173c <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <DMA2_Channel7_IRQHandler+0x10>)
 8001742:	f000 fdca 	bl	80022da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000624 	.word	0x20000624

08001750 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	@ (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001778:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <MX_UART4_Init+0x58>)
 800177a:	4a15      	ldr	r2, [pc, #84]	@ (80017d0 <MX_UART4_Init+0x5c>)
 800177c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800177e:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <MX_UART4_Init+0x58>)
 8001780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001784:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <MX_UART4_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <MX_UART4_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <MX_UART4_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <MX_UART4_Init+0x58>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <MX_UART4_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <MX_UART4_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <MX_UART4_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <MX_UART4_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	@ (80017cc <MX_UART4_Init+0x58>)
 80017b8:	f002 fe69 	bl	800448e <HAL_UART_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80017c2:	f7ff fe4d 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000048c 	.word	0x2000048c
 80017d0:	40004c00 	.word	0x40004c00

080017d4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017d8:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <MX_USART1_UART_Init+0x60>)
 80017da:	4a17      	ldr	r2, [pc, #92]	@ (8001838 <MX_USART1_UART_Init+0x64>)
 80017dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <MX_USART1_UART_Init+0x60>)
 80017e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017e6:	4b13      	ldr	r3, [pc, #76]	@ (8001834 <MX_USART1_UART_Init+0x60>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ec:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <MX_USART1_UART_Init+0x60>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017f2:	4b10      	ldr	r3, [pc, #64]	@ (8001834 <MX_USART1_UART_Init+0x60>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <MX_USART1_UART_Init+0x60>)
 80017fa:	220c      	movs	r2, #12
 80017fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001834 <MX_USART1_UART_Init+0x60>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <MX_USART1_UART_Init+0x60>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <MX_USART1_UART_Init+0x60>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001810:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <MX_USART1_UART_Init+0x60>)
 8001812:	2208      	movs	r2, #8
 8001814:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001816:	4b07      	ldr	r3, [pc, #28]	@ (8001834 <MX_USART1_UART_Init+0x60>)
 8001818:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800181c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800181e:	4805      	ldr	r0, [pc, #20]	@ (8001834 <MX_USART1_UART_Init+0x60>)
 8001820:	f002 fe35 	bl	800448e <HAL_UART_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800182a:	f7ff fe19 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000514 	.word	0x20000514
 8001838:	40013800 	.word	0x40013800

0800183c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001840:	4b16      	ldr	r3, [pc, #88]	@ (800189c <MX_USART3_UART_Init+0x60>)
 8001842:	4a17      	ldr	r2, [pc, #92]	@ (80018a0 <MX_USART3_UART_Init+0x64>)
 8001844:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <MX_USART3_UART_Init+0x60>)
 8001848:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800184c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b13      	ldr	r3, [pc, #76]	@ (800189c <MX_USART3_UART_Init+0x60>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b11      	ldr	r3, [pc, #68]	@ (800189c <MX_USART3_UART_Init+0x60>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <MX_USART3_UART_Init+0x60>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <MX_USART3_UART_Init+0x60>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <MX_USART3_UART_Init+0x60>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <MX_USART3_UART_Init+0x60>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001872:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <MX_USART3_UART_Init+0x60>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001878:	4b08      	ldr	r3, [pc, #32]	@ (800189c <MX_USART3_UART_Init+0x60>)
 800187a:	2208      	movs	r2, #8
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800187e:	4b07      	ldr	r3, [pc, #28]	@ (800189c <MX_USART3_UART_Init+0x60>)
 8001880:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001884:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001886:	4805      	ldr	r0, [pc, #20]	@ (800189c <MX_USART3_UART_Init+0x60>)
 8001888:	f002 fe01 	bl	800448e <HAL_UART_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8001892:	f7ff fde5 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000059c 	.word	0x2000059c
 80018a0:	40004800 	.word	0x40004800

080018a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b0b0      	sub	sp, #192	@ 0xc0
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c0:	2288      	movs	r2, #136	@ 0x88
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f005 f917 	bl	8006af8 <memset>
  if(uartHandle->Instance==UART4)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a6f      	ldr	r2, [pc, #444]	@ (8001a8c <HAL_UART_MspInit+0x1e8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d13c      	bne.n	800194e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80018d4:	2308      	movs	r3, #8
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80018d8:	2300      	movs	r3, #0
 80018da:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 ff55 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018ec:	f7ff fdb8 	bl	8001460 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80018f0:	4b67      	ldr	r3, [pc, #412]	@ (8001a90 <HAL_UART_MspInit+0x1ec>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f4:	4a66      	ldr	r2, [pc, #408]	@ (8001a90 <HAL_UART_MspInit+0x1ec>)
 80018f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80018fc:	4b64      	ldr	r3, [pc, #400]	@ (8001a90 <HAL_UART_MspInit+0x1ec>)
 80018fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001900:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001904:	623b      	str	r3, [r7, #32]
 8001906:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	4b61      	ldr	r3, [pc, #388]	@ (8001a90 <HAL_UART_MspInit+0x1ec>)
 800190a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190c:	4a60      	ldr	r2, [pc, #384]	@ (8001a90 <HAL_UART_MspInit+0x1ec>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001914:	4b5e      	ldr	r3, [pc, #376]	@ (8001a90 <HAL_UART_MspInit+0x1ec>)
 8001916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001920:	2303      	movs	r3, #3
 8001922:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001932:	2303      	movs	r3, #3
 8001934:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001938:	2308      	movs	r3, #8
 800193a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001942:	4619      	mov	r1, r3
 8001944:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001948:	f000 fdb2 	bl	80024b0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800194c:	e147      	b.n	8001bde <HAL_UART_MspInit+0x33a>
  else if(uartHandle->Instance==USART1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a50      	ldr	r2, [pc, #320]	@ (8001a94 <HAL_UART_MspInit+0x1f0>)
 8001954:	4293      	cmp	r3, r2
 8001956:	f040 80a7 	bne.w	8001aa8 <HAL_UART_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800195a:	2301      	movs	r3, #1
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800195e:	2300      	movs	r3, #0
 8001960:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001966:	4618      	mov	r0, r3
 8001968:	f001 ff12 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001972:	f7ff fd75 	bl	8001460 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001976:	4b46      	ldr	r3, [pc, #280]	@ (8001a90 <HAL_UART_MspInit+0x1ec>)
 8001978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197a:	4a45      	ldr	r2, [pc, #276]	@ (8001a90 <HAL_UART_MspInit+0x1ec>)
 800197c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001980:	6613      	str	r3, [r2, #96]	@ 0x60
 8001982:	4b43      	ldr	r3, [pc, #268]	@ (8001a90 <HAL_UART_MspInit+0x1ec>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	4b40      	ldr	r3, [pc, #256]	@ (8001a90 <HAL_UART_MspInit+0x1ec>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001992:	4a3f      	ldr	r2, [pc, #252]	@ (8001a90 <HAL_UART_MspInit+0x1ec>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800199a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a90 <HAL_UART_MspInit+0x1ec>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BLE_TX_Pin|BLE_RX_Pin;
 80019a6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019c0:	2307      	movs	r3, #7
 80019c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80019ca:	4619      	mov	r1, r3
 80019cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d0:	f000 fd6e 	bl	80024b0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Channel7;
 80019d4:	4b30      	ldr	r3, [pc, #192]	@ (8001a98 <HAL_UART_MspInit+0x1f4>)
 80019d6:	4a31      	ldr	r2, [pc, #196]	@ (8001a9c <HAL_UART_MspInit+0x1f8>)
 80019d8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80019da:	4b2f      	ldr	r3, [pc, #188]	@ (8001a98 <HAL_UART_MspInit+0x1f4>)
 80019dc:	2202      	movs	r2, #2
 80019de:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a98 <HAL_UART_MspInit+0x1f4>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a98 <HAL_UART_MspInit+0x1f4>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001a98 <HAL_UART_MspInit+0x1f4>)
 80019ee:	2280      	movs	r2, #128	@ 0x80
 80019f0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019f2:	4b29      	ldr	r3, [pc, #164]	@ (8001a98 <HAL_UART_MspInit+0x1f4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019f8:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <HAL_UART_MspInit+0x1f4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80019fe:	4b26      	ldr	r3, [pc, #152]	@ (8001a98 <HAL_UART_MspInit+0x1f4>)
 8001a00:	2220      	movs	r2, #32
 8001a02:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a04:	4b24      	ldr	r3, [pc, #144]	@ (8001a98 <HAL_UART_MspInit+0x1f4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a0a:	4823      	ldr	r0, [pc, #140]	@ (8001a98 <HAL_UART_MspInit+0x1f4>)
 8001a0c:	f000 face 	bl	8001fac <HAL_DMA_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_UART_MspInit+0x176>
      Error_Handler();
 8001a16:	f7ff fd23 	bl	8001460 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001a98 <HAL_UART_MspInit+0x1f4>)
 8001a1e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001a20:	4a1d      	ldr	r2, [pc, #116]	@ (8001a98 <HAL_UART_MspInit+0x1f4>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001a26:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa0 <HAL_UART_MspInit+0x1fc>)
 8001a28:	4a1e      	ldr	r2, [pc, #120]	@ (8001aa4 <HAL_UART_MspInit+0x200>)
 8001a2a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa0 <HAL_UART_MspInit+0x1fc>)
 8001a2e:	2202      	movs	r2, #2
 8001a30:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a32:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa0 <HAL_UART_MspInit+0x1fc>)
 8001a34:	2210      	movs	r2, #16
 8001a36:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a38:	4b19      	ldr	r3, [pc, #100]	@ (8001aa0 <HAL_UART_MspInit+0x1fc>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a3e:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <HAL_UART_MspInit+0x1fc>)
 8001a40:	2280      	movs	r2, #128	@ 0x80
 8001a42:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a44:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <HAL_UART_MspInit+0x1fc>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <HAL_UART_MspInit+0x1fc>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001a50:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <HAL_UART_MspInit+0x1fc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a56:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <HAL_UART_MspInit+0x1fc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001a5c:	4810      	ldr	r0, [pc, #64]	@ (8001aa0 <HAL_UART_MspInit+0x1fc>)
 8001a5e:	f000 faa5 	bl	8001fac <HAL_DMA_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_UART_MspInit+0x1c8>
      Error_Handler();
 8001a68:	f7ff fcfa 	bl	8001460 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001aa0 <HAL_UART_MspInit+0x1fc>)
 8001a70:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a72:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa0 <HAL_UART_MspInit+0x1fc>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2025      	movs	r0, #37	@ 0x25
 8001a7e:	f000 fa5e 	bl	8001f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a82:	2025      	movs	r0, #37	@ 0x25
 8001a84:	f000 fa77 	bl	8001f76 <HAL_NVIC_EnableIRQ>
}
 8001a88:	e0a9      	b.n	8001bde <HAL_UART_MspInit+0x33a>
 8001a8a:	bf00      	nop
 8001a8c:	40004c00 	.word	0x40004c00
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40013800 	.word	0x40013800
 8001a98:	20000624 	.word	0x20000624
 8001a9c:	40020480 	.word	0x40020480
 8001aa0:	2000066c 	.word	0x2000066c
 8001aa4:	40020044 	.word	0x40020044
  else if(uartHandle->Instance==USART3)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a4e      	ldr	r2, [pc, #312]	@ (8001be8 <HAL_UART_MspInit+0x344>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	f040 8095 	bne.w	8001bde <HAL_UART_MspInit+0x33a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f001 fe65 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 8001acc:	f7ff fcc8 	bl	8001460 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ad0:	4b46      	ldr	r3, [pc, #280]	@ (8001bec <HAL_UART_MspInit+0x348>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad4:	4a45      	ldr	r2, [pc, #276]	@ (8001bec <HAL_UART_MspInit+0x348>)
 8001ad6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ada:	6593      	str	r3, [r2, #88]	@ 0x58
 8001adc:	4b43      	ldr	r3, [pc, #268]	@ (8001bec <HAL_UART_MspInit+0x348>)
 8001ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae8:	4b40      	ldr	r3, [pc, #256]	@ (8001bec <HAL_UART_MspInit+0x348>)
 8001aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aec:	4a3f      	ldr	r2, [pc, #252]	@ (8001bec <HAL_UART_MspInit+0x348>)
 8001aee:	f043 0304 	orr.w	r3, r3, #4
 8001af2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af4:	4b3d      	ldr	r3, [pc, #244]	@ (8001bec <HAL_UART_MspInit+0x348>)
 8001af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001b00:	2330      	movs	r3, #48	@ 0x30
 8001b02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b12:	2303      	movs	r3, #3
 8001b14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b18:	2307      	movs	r3, #7
 8001b1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b22:	4619      	mov	r1, r3
 8001b24:	4832      	ldr	r0, [pc, #200]	@ (8001bf0 <HAL_UART_MspInit+0x34c>)
 8001b26:	f000 fcc3 	bl	80024b0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001b2a:	4b32      	ldr	r3, [pc, #200]	@ (8001bf4 <HAL_UART_MspInit+0x350>)
 8001b2c:	4a32      	ldr	r2, [pc, #200]	@ (8001bf8 <HAL_UART_MspInit+0x354>)
 8001b2e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 8001b30:	4b30      	ldr	r3, [pc, #192]	@ (8001bf4 <HAL_UART_MspInit+0x350>)
 8001b32:	2202      	movs	r2, #2
 8001b34:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b36:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf4 <HAL_UART_MspInit+0x350>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf4 <HAL_UART_MspInit+0x350>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b42:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <HAL_UART_MspInit+0x350>)
 8001b44:	2280      	movs	r2, #128	@ 0x80
 8001b46:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b48:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf4 <HAL_UART_MspInit+0x350>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b4e:	4b29      	ldr	r3, [pc, #164]	@ (8001bf4 <HAL_UART_MspInit+0x350>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001b54:	4b27      	ldr	r3, [pc, #156]	@ (8001bf4 <HAL_UART_MspInit+0x350>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b5a:	4b26      	ldr	r3, [pc, #152]	@ (8001bf4 <HAL_UART_MspInit+0x350>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001b60:	4824      	ldr	r0, [pc, #144]	@ (8001bf4 <HAL_UART_MspInit+0x350>)
 8001b62:	f000 fa23 	bl	8001fac <HAL_DMA_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_UART_MspInit+0x2cc>
      Error_Handler();
 8001b6c:	f7ff fc78 	bl	8001460 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a20      	ldr	r2, [pc, #128]	@ (8001bf4 <HAL_UART_MspInit+0x350>)
 8001b74:	675a      	str	r2, [r3, #116]	@ 0x74
 8001b76:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf4 <HAL_UART_MspInit+0x350>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bfc <HAL_UART_MspInit+0x358>)
 8001b7e:	4a20      	ldr	r2, [pc, #128]	@ (8001c00 <HAL_UART_MspInit+0x35c>)
 8001b80:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 8001b82:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <HAL_UART_MspInit+0x358>)
 8001b84:	2202      	movs	r2, #2
 8001b86:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b88:	4b1c      	ldr	r3, [pc, #112]	@ (8001bfc <HAL_UART_MspInit+0x358>)
 8001b8a:	2210      	movs	r2, #16
 8001b8c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <HAL_UART_MspInit+0x358>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b94:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <HAL_UART_MspInit+0x358>)
 8001b96:	2280      	movs	r2, #128	@ 0x80
 8001b98:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b9a:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <HAL_UART_MspInit+0x358>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ba0:	4b16      	ldr	r3, [pc, #88]	@ (8001bfc <HAL_UART_MspInit+0x358>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001ba6:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <HAL_UART_MspInit+0x358>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bac:	4b13      	ldr	r3, [pc, #76]	@ (8001bfc <HAL_UART_MspInit+0x358>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001bb2:	4812      	ldr	r0, [pc, #72]	@ (8001bfc <HAL_UART_MspInit+0x358>)
 8001bb4:	f000 f9fa 	bl	8001fac <HAL_DMA_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_UART_MspInit+0x31e>
      Error_Handler();
 8001bbe:	f7ff fc4f 	bl	8001460 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bfc <HAL_UART_MspInit+0x358>)
 8001bc6:	671a      	str	r2, [r3, #112]	@ 0x70
 8001bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8001bfc <HAL_UART_MspInit+0x358>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2027      	movs	r0, #39	@ 0x27
 8001bd4:	f000 f9b3 	bl	8001f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001bd8:	2027      	movs	r0, #39	@ 0x27
 8001bda:	f000 f9cc 	bl	8001f76 <HAL_NVIC_EnableIRQ>
}
 8001bde:	bf00      	nop
 8001be0:	37c0      	adds	r7, #192	@ 0xc0
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40004800 	.word	0x40004800
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	48000800 	.word	0x48000800
 8001bf4:	200006b4 	.word	0x200006b4
 8001bf8:	40020030 	.word	0x40020030
 8001bfc:	200006fc 	.word	0x200006fc
 8001c00:	4002001c 	.word	0x4002001c

08001c04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c08:	f7ff fda2 	bl	8001750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c0c:	480c      	ldr	r0, [pc, #48]	@ (8001c40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c0e:	490d      	ldr	r1, [pc, #52]	@ (8001c44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c10:	4a0d      	ldr	r2, [pc, #52]	@ (8001c48 <LoopForever+0xe>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c14:	e002      	b.n	8001c1c <LoopCopyDataInit>

08001c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1a:	3304      	adds	r3, #4

08001c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c20:	d3f9      	bcc.n	8001c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c22:	4a0a      	ldr	r2, [pc, #40]	@ (8001c4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c24:	4c0a      	ldr	r4, [pc, #40]	@ (8001c50 <LoopForever+0x16>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c28:	e001      	b.n	8001c2e <LoopFillZerobss>

08001c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c2c:	3204      	adds	r2, #4

08001c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c30:	d3fb      	bcc.n	8001c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c32:	f004 ff69 	bl	8006b08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c36:	f7ff fb1b 	bl	8001270 <main>

08001c3a <LoopForever>:

LoopForever:
    b LoopForever
 8001c3a:	e7fe      	b.n	8001c3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c48:	08006ddc 	.word	0x08006ddc
  ldr r2, =_sbss
 8001c4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c50:	20000854 	.word	0x20000854

08001c54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c54:	e7fe      	b.n	8001c54 <ADC1_2_IRQHandler>

08001c56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c60:	2003      	movs	r0, #3
 8001c62:	f000 f961 	bl	8001f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c66:	200f      	movs	r0, #15
 8001c68:	f000 f80e 	bl	8001c88 <HAL_InitTick>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	71fb      	strb	r3, [r7, #7]
 8001c76:	e001      	b.n	8001c7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c78:	f7ff fcb0 	bl	80015dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c94:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <HAL_InitTick+0x6c>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d023      	beq.n	8001ce4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c9c:	4b16      	ldr	r3, [pc, #88]	@ (8001cf8 <HAL_InitTick+0x70>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <HAL_InitTick+0x6c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f96d 	bl	8001f92 <HAL_SYSTICK_Config>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10f      	bne.n	8001cde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b0f      	cmp	r3, #15
 8001cc2:	d809      	bhi.n	8001cd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	f000 f937 	bl	8001f3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <HAL_InitTick+0x74>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e007      	b.n	8001ce8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
 8001cdc:	e004      	b.n	8001ce8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
 8001ce2:	e001      	b.n	8001ce8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000008 	.word	0x20000008
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000004 	.word	0x20000004

08001d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d04:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_IncTick+0x20>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_IncTick+0x24>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <HAL_IncTick+0x24>)
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000008 	.word	0x20000008
 8001d24:	20000744 	.word	0x20000744

08001d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	@ (8001d3c <HAL_GetTick+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000744 	.word	0x20000744

08001d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff ffee 	bl	8001d28 <HAL_GetTick>
 8001d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d005      	beq.n	8001d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <HAL_Delay+0x44>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d66:	bf00      	nop
 8001d68:	f7ff ffde 	bl	8001d28 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d8f7      	bhi.n	8001d68 <HAL_Delay+0x28>
  {
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000008 	.word	0x20000008

08001d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d98:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001da4:	4013      	ands	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dba:	4a04      	ldr	r2, [pc, #16]	@ (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	60d3      	str	r3, [r2, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd4:	4b04      	ldr	r3, [pc, #16]	@ (8001de8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f003 0307 	and.w	r3, r3, #7
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db0b      	blt.n	8001e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4907      	ldr	r1, [pc, #28]	@ (8001e24 <__NVIC_EnableIRQ+0x38>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000e100 	.word	0xe000e100

08001e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	db0a      	blt.n	8001e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	490c      	ldr	r1, [pc, #48]	@ (8001e74 <__NVIC_SetPriority+0x4c>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	0112      	lsls	r2, r2, #4
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e50:	e00a      	b.n	8001e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4908      	ldr	r1, [pc, #32]	@ (8001e78 <__NVIC_SetPriority+0x50>)
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	3b04      	subs	r3, #4
 8001e60:	0112      	lsls	r2, r2, #4
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	440b      	add	r3, r1
 8001e66:	761a      	strb	r2, [r3, #24]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000e100 	.word	0xe000e100
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	@ 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f1c3 0307 	rsb	r3, r3, #7
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	bf28      	it	cs
 8001e9a:	2304      	movcs	r3, #4
 8001e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d902      	bls.n	8001eac <NVIC_EncodePriority+0x30>
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3b03      	subs	r3, #3
 8001eaa:	e000      	b.n	8001eae <NVIC_EncodePriority+0x32>
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	43d9      	mvns	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	4313      	orrs	r3, r2
         );
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3724      	adds	r7, #36	@ 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ef4:	d301      	bcc.n	8001efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00f      	b.n	8001f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efa:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <SysTick_Config+0x40>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f02:	210f      	movs	r1, #15
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	f7ff ff8e 	bl	8001e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f0c:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <SysTick_Config+0x40>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f12:	4b04      	ldr	r3, [pc, #16]	@ (8001f24 <SysTick_Config+0x40>)
 8001f14:	2207      	movs	r2, #7
 8001f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	e000e010 	.word	0xe000e010

08001f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ff29 	bl	8001d88 <__NVIC_SetPriorityGrouping>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f50:	f7ff ff3e 	bl	8001dd0 <__NVIC_GetPriorityGrouping>
 8001f54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	6978      	ldr	r0, [r7, #20]
 8001f5c:	f7ff ff8e 	bl	8001e7c <NVIC_EncodePriority>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff5d 	bl	8001e28 <__NVIC_SetPriority>
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff31 	bl	8001dec <__NVIC_EnableIRQ>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffa2 	bl	8001ee4 <SysTick_Config>
 8001fa0:	4603      	mov	r3, r0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e098      	b.n	80020f0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b4d      	ldr	r3, [pc, #308]	@ (80020fc <HAL_DMA_Init+0x150>)
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d80f      	bhi.n	8001fea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b4b      	ldr	r3, [pc, #300]	@ (8002100 <HAL_DMA_Init+0x154>)
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a4b      	ldr	r2, [pc, #300]	@ (8002104 <HAL_DMA_Init+0x158>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	091b      	lsrs	r3, r3, #4
 8001fdc:	009a      	lsls	r2, r3, #2
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a48      	ldr	r2, [pc, #288]	@ (8002108 <HAL_DMA_Init+0x15c>)
 8001fe6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fe8:	e00e      	b.n	8002008 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b46      	ldr	r3, [pc, #280]	@ (800210c <HAL_DMA_Init+0x160>)
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4a43      	ldr	r2, [pc, #268]	@ (8002104 <HAL_DMA_Init+0x158>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	009a      	lsls	r2, r3, #2
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a42      	ldr	r2, [pc, #264]	@ (8002110 <HAL_DMA_Init+0x164>)
 8002006:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800201e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002022:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800202c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002062:	d039      	beq.n	80020d8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	4a27      	ldr	r2, [pc, #156]	@ (8002108 <HAL_DMA_Init+0x15c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d11a      	bne.n	80020a4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800206e:	4b29      	ldr	r3, [pc, #164]	@ (8002114 <HAL_DMA_Init+0x168>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	f003 031c 	and.w	r3, r3, #28
 800207a:	210f      	movs	r1, #15
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	4924      	ldr	r1, [pc, #144]	@ (8002114 <HAL_DMA_Init+0x168>)
 8002084:	4013      	ands	r3, r2
 8002086:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002088:	4b22      	ldr	r3, [pc, #136]	@ (8002114 <HAL_DMA_Init+0x168>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6859      	ldr	r1, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002094:	f003 031c 	and.w	r3, r3, #28
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	491d      	ldr	r1, [pc, #116]	@ (8002114 <HAL_DMA_Init+0x168>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
 80020a2:	e019      	b.n	80020d8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002118 <HAL_DMA_Init+0x16c>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ac:	f003 031c 	and.w	r3, r3, #28
 80020b0:	210f      	movs	r1, #15
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	4917      	ldr	r1, [pc, #92]	@ (8002118 <HAL_DMA_Init+0x16c>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020be:	4b16      	ldr	r3, [pc, #88]	@ (8002118 <HAL_DMA_Init+0x16c>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6859      	ldr	r1, [r3, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ca:	f003 031c 	and.w	r3, r3, #28
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	4911      	ldr	r1, [pc, #68]	@ (8002118 <HAL_DMA_Init+0x16c>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40020407 	.word	0x40020407
 8002100:	bffdfff8 	.word	0xbffdfff8
 8002104:	cccccccd 	.word	0xcccccccd
 8002108:	40020000 	.word	0x40020000
 800210c:	bffdfbf8 	.word	0xbffdfbf8
 8002110:	40020400 	.word	0x40020400
 8002114:	400200a8 	.word	0x400200a8
 8002118:	400204a8 	.word	0x400204a8

0800211c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_DMA_Start_IT+0x20>
 8002138:	2302      	movs	r3, #2
 800213a:	e04b      	b.n	80021d4 <HAL_DMA_Start_IT+0xb8>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b01      	cmp	r3, #1
 800214e:	d13a      	bne.n	80021c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0201 	bic.w	r2, r2, #1
 800216c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f96b 	bl	8002450 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	2b00      	cmp	r3, #0
 8002180:	d008      	beq.n	8002194 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 020e 	orr.w	r2, r2, #14
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e00f      	b.n	80021b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0204 	bic.w	r2, r2, #4
 80021a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 020a 	orr.w	r2, r2, #10
 80021b2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e005      	b.n	80021d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80021ce:	2302      	movs	r3, #2
 80021d0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d008      	beq.n	8002206 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2204      	movs	r2, #4
 80021f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e022      	b.n	800224c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 020e 	bic.w	r2, r2, #14
 8002214:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0201 	bic.w	r2, r2, #1
 8002224:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	f003 021c 	and.w	r2, r3, #28
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	2101      	movs	r1, #1
 8002234:	fa01 f202 	lsl.w	r2, r1, r2
 8002238:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800224a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d005      	beq.n	800227c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2204      	movs	r2, #4
 8002274:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	e029      	b.n	80022d0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 020e 	bic.w	r2, r2, #14
 800228a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a0:	f003 021c 	and.w	r2, r3, #28
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a8:	2101      	movs	r1, #1
 80022aa:	fa01 f202 	lsl.w	r2, r1, r2
 80022ae:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	4798      	blx	r3
    }
  }
  return status;
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	f003 031c 	and.w	r3, r3, #28
 80022fa:	2204      	movs	r2, #4
 80022fc:	409a      	lsls	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4013      	ands	r3, r2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d026      	beq.n	8002354 <HAL_DMA_IRQHandler+0x7a>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d021      	beq.n	8002354 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b00      	cmp	r3, #0
 800231c:	d107      	bne.n	800232e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0204 	bic.w	r2, r2, #4
 800232c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	f003 021c 	and.w	r2, r3, #28
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	2104      	movs	r1, #4
 800233c:	fa01 f202 	lsl.w	r2, r1, r2
 8002340:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	2b00      	cmp	r3, #0
 8002348:	d071      	beq.n	800242e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002352:	e06c      	b.n	800242e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002358:	f003 031c 	and.w	r3, r3, #28
 800235c:	2202      	movs	r2, #2
 800235e:	409a      	lsls	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d02e      	beq.n	80023c6 <HAL_DMA_IRQHandler+0xec>
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d029      	beq.n	80023c6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0320 	and.w	r3, r3, #32
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10b      	bne.n	8002398 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 020a 	bic.w	r2, r2, #10
 800238e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239c:	f003 021c 	and.w	r2, r3, #28
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	2102      	movs	r1, #2
 80023a6:	fa01 f202 	lsl.w	r2, r1, r2
 80023aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d038      	beq.n	800242e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80023c4:	e033      	b.n	800242e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	f003 031c 	and.w	r3, r3, #28
 80023ce:	2208      	movs	r2, #8
 80023d0:	409a      	lsls	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d02a      	beq.n	8002430 <HAL_DMA_IRQHandler+0x156>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d025      	beq.n	8002430 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 020e 	bic.w	r2, r2, #14
 80023f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f8:	f003 021c 	and.w	r2, r3, #28
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	2101      	movs	r1, #1
 8002402:	fa01 f202 	lsl.w	r2, r1, r2
 8002406:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002422:	2b00      	cmp	r3, #0
 8002424:	d004      	beq.n	8002430 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800242e:	bf00      	nop
 8002430:	bf00      	nop
}
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002462:	f003 021c 	and.w	r2, r3, #28
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246a:	2101      	movs	r1, #1
 800246c:	fa01 f202 	lsl.w	r2, r1, r2
 8002470:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b10      	cmp	r3, #16
 8002480:	d108      	bne.n	8002494 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002492:	e007      	b.n	80024a4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	60da      	str	r2, [r3, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024be:	e17f      	b.n	80027c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2101      	movs	r1, #1
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	fa01 f303 	lsl.w	r3, r1, r3
 80024cc:	4013      	ands	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 8171 	beq.w	80027ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d005      	beq.n	80024f0 <HAL_GPIO_Init+0x40>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d130      	bne.n	8002552 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002526:	2201      	movs	r2, #1
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	091b      	lsrs	r3, r3, #4
 800253c:	f003 0201 	and.w	r2, r3, #1
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b03      	cmp	r3, #3
 800255c:	d118      	bne.n	8002590 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002562:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002564:	2201      	movs	r2, #1
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	08db      	lsrs	r3, r3, #3
 800257a:	f003 0201 	and.w	r2, r3, #1
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b03      	cmp	r3, #3
 800259a:	d017      	beq.n	80025cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d123      	bne.n	8002620 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	08da      	lsrs	r2, r3, #3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3208      	adds	r2, #8
 80025e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	220f      	movs	r2, #15
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	08da      	lsrs	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3208      	adds	r2, #8
 800261a:	6939      	ldr	r1, [r7, #16]
 800261c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2203      	movs	r2, #3
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0203 	and.w	r2, r3, #3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80ac 	beq.w	80027ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	4b5f      	ldr	r3, [pc, #380]	@ (80027e0 <HAL_GPIO_Init+0x330>)
 8002664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002666:	4a5e      	ldr	r2, [pc, #376]	@ (80027e0 <HAL_GPIO_Init+0x330>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6613      	str	r3, [r2, #96]	@ 0x60
 800266e:	4b5c      	ldr	r3, [pc, #368]	@ (80027e0 <HAL_GPIO_Init+0x330>)
 8002670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800267a:	4a5a      	ldr	r2, [pc, #360]	@ (80027e4 <HAL_GPIO_Init+0x334>)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	089b      	lsrs	r3, r3, #2
 8002680:	3302      	adds	r3, #2
 8002682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002686:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	220f      	movs	r2, #15
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80026a4:	d025      	beq.n	80026f2 <HAL_GPIO_Init+0x242>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4f      	ldr	r2, [pc, #316]	@ (80027e8 <HAL_GPIO_Init+0x338>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d01f      	beq.n	80026ee <HAL_GPIO_Init+0x23e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4e      	ldr	r2, [pc, #312]	@ (80027ec <HAL_GPIO_Init+0x33c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d019      	beq.n	80026ea <HAL_GPIO_Init+0x23a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4d      	ldr	r2, [pc, #308]	@ (80027f0 <HAL_GPIO_Init+0x340>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d013      	beq.n	80026e6 <HAL_GPIO_Init+0x236>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4c      	ldr	r2, [pc, #304]	@ (80027f4 <HAL_GPIO_Init+0x344>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00d      	beq.n	80026e2 <HAL_GPIO_Init+0x232>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a4b      	ldr	r2, [pc, #300]	@ (80027f8 <HAL_GPIO_Init+0x348>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d007      	beq.n	80026de <HAL_GPIO_Init+0x22e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4a      	ldr	r2, [pc, #296]	@ (80027fc <HAL_GPIO_Init+0x34c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d101      	bne.n	80026da <HAL_GPIO_Init+0x22a>
 80026d6:	2306      	movs	r3, #6
 80026d8:	e00c      	b.n	80026f4 <HAL_GPIO_Init+0x244>
 80026da:	2307      	movs	r3, #7
 80026dc:	e00a      	b.n	80026f4 <HAL_GPIO_Init+0x244>
 80026de:	2305      	movs	r3, #5
 80026e0:	e008      	b.n	80026f4 <HAL_GPIO_Init+0x244>
 80026e2:	2304      	movs	r3, #4
 80026e4:	e006      	b.n	80026f4 <HAL_GPIO_Init+0x244>
 80026e6:	2303      	movs	r3, #3
 80026e8:	e004      	b.n	80026f4 <HAL_GPIO_Init+0x244>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e002      	b.n	80026f4 <HAL_GPIO_Init+0x244>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_GPIO_Init+0x244>
 80026f2:	2300      	movs	r3, #0
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	f002 0203 	and.w	r2, r2, #3
 80026fa:	0092      	lsls	r2, r2, #2
 80026fc:	4093      	lsls	r3, r2
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002704:	4937      	ldr	r1, [pc, #220]	@ (80027e4 <HAL_GPIO_Init+0x334>)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	089b      	lsrs	r3, r3, #2
 800270a:	3302      	adds	r3, #2
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002712:	4b3b      	ldr	r3, [pc, #236]	@ (8002800 <HAL_GPIO_Init+0x350>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	43db      	mvns	r3, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002736:	4a32      	ldr	r2, [pc, #200]	@ (8002800 <HAL_GPIO_Init+0x350>)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800273c:	4b30      	ldr	r3, [pc, #192]	@ (8002800 <HAL_GPIO_Init+0x350>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	43db      	mvns	r3, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002760:	4a27      	ldr	r2, [pc, #156]	@ (8002800 <HAL_GPIO_Init+0x350>)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002766:	4b26      	ldr	r3, [pc, #152]	@ (8002800 <HAL_GPIO_Init+0x350>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	43db      	mvns	r3, r3
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4013      	ands	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800278a:	4a1d      	ldr	r2, [pc, #116]	@ (8002800 <HAL_GPIO_Init+0x350>)
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002790:	4b1b      	ldr	r3, [pc, #108]	@ (8002800 <HAL_GPIO_Init+0x350>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	43db      	mvns	r3, r3
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027b4:	4a12      	ldr	r2, [pc, #72]	@ (8002800 <HAL_GPIO_Init+0x350>)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	3301      	adds	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f47f ae78 	bne.w	80024c0 <HAL_GPIO_Init+0x10>
  }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40010000 	.word	0x40010000
 80027e8:	48000400 	.word	0x48000400
 80027ec:	48000800 	.word	0x48000800
 80027f0:	48000c00 	.word	0x48000c00
 80027f4:	48001000 	.word	0x48001000
 80027f8:	48001400 	.word	0x48001400
 80027fc:	48001800 	.word	0x48001800
 8002800:	40010400 	.word	0x40010400

08002804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	807b      	strh	r3, [r7, #2]
 8002810:	4613      	mov	r3, r2
 8002812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002814:	787b      	ldrb	r3, [r7, #1]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800281a:	887a      	ldrh	r2, [r7, #2]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002820:	e002      	b.n	8002828 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800283e:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	88fb      	ldrh	r3, [r7, #6]
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d006      	beq.n	8002858 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800284a:	4a05      	ldr	r2, [pc, #20]	@ (8002860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fdea 	bl	800142c <HAL_GPIO_EXTI_Callback>
  }
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40010400 	.word	0x40010400

08002864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e08d      	b.n	8002992 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fe fc08 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2224      	movs	r2, #36	@ 0x24
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0201 	bic.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d107      	bne.n	80028de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	e006      	b.n	80028ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80028ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d108      	bne.n	8002906 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002902:	605a      	str	r2, [r3, #4]
 8002904:	e007      	b.n	8002916 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002914:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002924:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002928:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002938:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69d9      	ldr	r1, [r3, #28]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1a      	ldr	r2, [r3, #32]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d138      	bne.n	8002a22 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e032      	b.n	8002a24 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2224      	movs	r2, #36	@ 0x24
 80029ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0201 	bic.w	r2, r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80029ec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6819      	ldr	r1, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2220      	movs	r2, #32
 8002a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e000      	b.n	8002a24 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a22:	2302      	movs	r3, #2
  }
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b20      	cmp	r3, #32
 8002a44:	d139      	bne.n	8002aba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e033      	b.n	8002abc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2224      	movs	r2, #36	@ 0x24
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a82:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e000      	b.n	8002abc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002aba:	2302      	movs	r3, #2
  }
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002acc:	4b04      	ldr	r3, [pc, #16]	@ (8002ae0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40007000 	.word	0x40007000

08002ae4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002af2:	d130      	bne.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af4:	4b23      	ldr	r3, [pc, #140]	@ (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002afc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b00:	d038      	beq.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b02:	4b20      	ldr	r3, [pc, #128]	@ (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b12:	4b1d      	ldr	r3, [pc, #116]	@ (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2232      	movs	r2, #50	@ 0x32
 8002b18:	fb02 f303 	mul.w	r3, r2, r3
 8002b1c:	4a1b      	ldr	r2, [pc, #108]	@ (8002b8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	0c9b      	lsrs	r3, r3, #18
 8002b24:	3301      	adds	r3, #1
 8002b26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b28:	e002      	b.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b30:	4b14      	ldr	r3, [pc, #80]	@ (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3c:	d102      	bne.n	8002b44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f2      	bne.n	8002b2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b44:	4b0f      	ldr	r3, [pc, #60]	@ (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b50:	d110      	bne.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e00f      	b.n	8002b76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b56:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b62:	d007      	beq.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b64:	4b07      	ldr	r3, [pc, #28]	@ (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b6c:	4a05      	ldr	r2, [pc, #20]	@ (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40007000 	.word	0x40007000
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	431bde83 	.word	0x431bde83

08002b90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e3ca      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba2:	4b97      	ldr	r3, [pc, #604]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bac:	4b94      	ldr	r3, [pc, #592]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 80e4 	beq.w	8002d8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <HAL_RCC_OscConfig+0x4a>
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b0c      	cmp	r3, #12
 8002bce:	f040 808b 	bne.w	8002ce8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	f040 8087 	bne.w	8002ce8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bda:	4b89      	ldr	r3, [pc, #548]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x62>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e3a2      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1a      	ldr	r2, [r3, #32]
 8002bf6:	4b82      	ldr	r3, [pc, #520]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d004      	beq.n	8002c0c <HAL_RCC_OscConfig+0x7c>
 8002c02:	4b7f      	ldr	r3, [pc, #508]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c0a:	e005      	b.n	8002c18 <HAL_RCC_OscConfig+0x88>
 8002c0c:	4b7c      	ldr	r3, [pc, #496]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d223      	bcs.n	8002c64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fd55 	bl	80036d0 <RCC_SetFlashLatencyFromMSIRange>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e383      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c30:	4b73      	ldr	r3, [pc, #460]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a72      	ldr	r2, [pc, #456]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c36:	f043 0308 	orr.w	r3, r3, #8
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b70      	ldr	r3, [pc, #448]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	496d      	ldr	r1, [pc, #436]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c4e:	4b6c      	ldr	r3, [pc, #432]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	4968      	ldr	r1, [pc, #416]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	604b      	str	r3, [r1, #4]
 8002c62:	e025      	b.n	8002cb0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c64:	4b66      	ldr	r3, [pc, #408]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a65      	ldr	r2, [pc, #404]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c6a:	f043 0308 	orr.w	r3, r3, #8
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b63      	ldr	r3, [pc, #396]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4960      	ldr	r1, [pc, #384]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c82:	4b5f      	ldr	r3, [pc, #380]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	495b      	ldr	r1, [pc, #364]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fd15 	bl	80036d0 <RCC_SetFlashLatencyFromMSIRange>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e343      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cb0:	f000 fc4a 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b52      	ldr	r3, [pc, #328]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	4950      	ldr	r1, [pc, #320]	@ (8002e04 <HAL_RCC_OscConfig+0x274>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ccc:	4a4e      	ldr	r2, [pc, #312]	@ (8002e08 <HAL_RCC_OscConfig+0x278>)
 8002cce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cd0:	4b4e      	ldr	r3, [pc, #312]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe ffd7 	bl	8001c88 <HAL_InitTick>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d052      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	e327      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d032      	beq.n	8002d56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cf0:	4b43      	ldr	r3, [pc, #268]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a42      	ldr	r2, [pc, #264]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cfc:	f7ff f814 	bl	8001d28 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d04:	f7ff f810 	bl	8001d28 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e310      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d16:	4b3a      	ldr	r3, [pc, #232]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d22:	4b37      	ldr	r3, [pc, #220]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a36      	ldr	r2, [pc, #216]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d28:	f043 0308 	orr.w	r3, r3, #8
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b34      	ldr	r3, [pc, #208]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	4931      	ldr	r1, [pc, #196]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d40:	4b2f      	ldr	r3, [pc, #188]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	492c      	ldr	r1, [pc, #176]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
 8002d54:	e01a      	b.n	8002d8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d56:	4b2a      	ldr	r3, [pc, #168]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a29      	ldr	r2, [pc, #164]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d62:	f7fe ffe1 	bl	8001d28 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d6a:	f7fe ffdd 	bl	8001d28 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e2dd      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d7c:	4b20      	ldr	r3, [pc, #128]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f0      	bne.n	8002d6a <HAL_RCC_OscConfig+0x1da>
 8002d88:	e000      	b.n	8002d8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d074      	beq.n	8002e82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d005      	beq.n	8002daa <HAL_RCC_OscConfig+0x21a>
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d10e      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d10b      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002daa:	4b15      	ldr	r3, [pc, #84]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d064      	beq.n	8002e80 <HAL_RCC_OscConfig+0x2f0>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d160      	bne.n	8002e80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e2ba      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dca:	d106      	bne.n	8002dda <HAL_RCC_OscConfig+0x24a>
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0b      	ldr	r2, [pc, #44]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	e026      	b.n	8002e28 <HAL_RCC_OscConfig+0x298>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002de2:	d115      	bne.n	8002e10 <HAL_RCC_OscConfig+0x280>
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a05      	ldr	r2, [pc, #20]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002dea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	4b03      	ldr	r3, [pc, #12]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a02      	ldr	r2, [pc, #8]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	e014      	b.n	8002e28 <HAL_RCC_OscConfig+0x298>
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	08006b84 	.word	0x08006b84
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	20000004 	.word	0x20000004
 8002e10:	4ba0      	ldr	r3, [pc, #640]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a9f      	ldr	r2, [pc, #636]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b9d      	ldr	r3, [pc, #628]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a9c      	ldr	r2, [pc, #624]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7fe ff7a 	bl	8001d28 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e38:	f7fe ff76 	bl	8001d28 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	@ 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e276      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e4a:	4b92      	ldr	r3, [pc, #584]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x2a8>
 8002e56:	e014      	b.n	8002e82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe ff66 	bl	8001d28 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e60:	f7fe ff62 	bl	8001d28 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	@ 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e262      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e72:	4b88      	ldr	r3, [pc, #544]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x2d0>
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d060      	beq.n	8002f50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x310>
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b0c      	cmp	r3, #12
 8002e98:	d119      	bne.n	8002ece <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d116      	bne.n	8002ece <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea0:	4b7c      	ldr	r3, [pc, #496]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x328>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e23f      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb8:	4b76      	ldr	r3, [pc, #472]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	061b      	lsls	r3, r3, #24
 8002ec6:	4973      	ldr	r1, [pc, #460]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ecc:	e040      	b.n	8002f50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d023      	beq.n	8002f1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed6:	4b6f      	ldr	r3, [pc, #444]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a6e      	ldr	r2, [pc, #440]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002edc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7fe ff21 	bl	8001d28 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eea:	f7fe ff1d 	bl	8001d28 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e21d      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002efc:	4b65      	ldr	r3, [pc, #404]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f08:	4b62      	ldr	r3, [pc, #392]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	495f      	ldr	r1, [pc, #380]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
 8002f1c:	e018      	b.n	8002f50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1e:	4b5d      	ldr	r3, [pc, #372]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a5c      	ldr	r2, [pc, #368]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2a:	f7fe fefd 	bl	8001d28 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f32:	f7fe fef9 	bl	8001d28 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e1f9      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f44:	4b53      	ldr	r3, [pc, #332]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f0      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d03c      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01c      	beq.n	8002f9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f64:	4b4b      	ldr	r3, [pc, #300]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f6a:	4a4a      	ldr	r2, [pc, #296]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f74:	f7fe fed8 	bl	8001d28 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f7c:	f7fe fed4 	bl	8001d28 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e1d4      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f8e:	4b41      	ldr	r3, [pc, #260]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0ef      	beq.n	8002f7c <HAL_RCC_OscConfig+0x3ec>
 8002f9c:	e01b      	b.n	8002fd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fa4:	4a3b      	ldr	r2, [pc, #236]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002fa6:	f023 0301 	bic.w	r3, r3, #1
 8002faa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fae:	f7fe febb 	bl	8001d28 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb6:	f7fe feb7 	bl	8001d28 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e1b7      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fc8:	4b32      	ldr	r3, [pc, #200]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1ef      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80a6 	beq.w	8003130 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10d      	bne.n	8003010 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff4:	4b27      	ldr	r3, [pc, #156]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff8:	4a26      	ldr	r2, [pc, #152]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ffe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003000:	4b24      	ldr	r3, [pc, #144]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300c:	2301      	movs	r3, #1
 800300e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003010:	4b21      	ldr	r3, [pc, #132]	@ (8003098 <HAL_RCC_OscConfig+0x508>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d118      	bne.n	800304e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800301c:	4b1e      	ldr	r3, [pc, #120]	@ (8003098 <HAL_RCC_OscConfig+0x508>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1d      	ldr	r2, [pc, #116]	@ (8003098 <HAL_RCC_OscConfig+0x508>)
 8003022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003026:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003028:	f7fe fe7e 	bl	8001d28 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003030:	f7fe fe7a 	bl	8001d28 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e17a      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003042:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <HAL_RCC_OscConfig+0x508>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d108      	bne.n	8003068 <HAL_RCC_OscConfig+0x4d8>
 8003056:	4b0f      	ldr	r3, [pc, #60]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305c:	4a0d      	ldr	r2, [pc, #52]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003066:	e029      	b.n	80030bc <HAL_RCC_OscConfig+0x52c>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b05      	cmp	r3, #5
 800306e:	d115      	bne.n	800309c <HAL_RCC_OscConfig+0x50c>
 8003070:	4b08      	ldr	r3, [pc, #32]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003076:	4a07      	ldr	r2, [pc, #28]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8003078:	f043 0304 	orr.w	r3, r3, #4
 800307c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003080:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003086:	4a03      	ldr	r2, [pc, #12]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003090:	e014      	b.n	80030bc <HAL_RCC_OscConfig+0x52c>
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	40007000 	.word	0x40007000
 800309c:	4b9c      	ldr	r3, [pc, #624]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a2:	4a9b      	ldr	r2, [pc, #620]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030ac:	4b98      	ldr	r3, [pc, #608]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b2:	4a97      	ldr	r2, [pc, #604]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80030b4:	f023 0304 	bic.w	r3, r3, #4
 80030b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d016      	beq.n	80030f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c4:	f7fe fe30 	bl	8001d28 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030cc:	f7fe fe2c 	bl	8001d28 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e12a      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e2:	4b8b      	ldr	r3, [pc, #556]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0ed      	beq.n	80030cc <HAL_RCC_OscConfig+0x53c>
 80030f0:	e015      	b.n	800311e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f2:	f7fe fe19 	bl	8001d28 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030f8:	e00a      	b.n	8003110 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fa:	f7fe fe15 	bl	8001d28 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003108:	4293      	cmp	r3, r2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e113      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003110:	4b7f      	ldr	r3, [pc, #508]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1ed      	bne.n	80030fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800311e:	7ffb      	ldrb	r3, [r7, #31]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d105      	bne.n	8003130 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003124:	4b7a      	ldr	r3, [pc, #488]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003128:	4a79      	ldr	r2, [pc, #484]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 800312a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800312e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80fe 	beq.w	8003336 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313e:	2b02      	cmp	r3, #2
 8003140:	f040 80d0 	bne.w	80032e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003144:	4b72      	ldr	r3, [pc, #456]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f003 0203 	and.w	r2, r3, #3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	429a      	cmp	r2, r3
 8003156:	d130      	bne.n	80031ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	3b01      	subs	r3, #1
 8003164:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d127      	bne.n	80031ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003174:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003176:	429a      	cmp	r2, r3
 8003178:	d11f      	bne.n	80031ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003184:	2a07      	cmp	r2, #7
 8003186:	bf14      	ite	ne
 8003188:	2201      	movne	r2, #1
 800318a:	2200      	moveq	r2, #0
 800318c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800318e:	4293      	cmp	r3, r2
 8003190:	d113      	bne.n	80031ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319c:	085b      	lsrs	r3, r3, #1
 800319e:	3b01      	subs	r3, #1
 80031a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d109      	bne.n	80031ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	3b01      	subs	r3, #1
 80031b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d06e      	beq.n	8003298 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	d069      	beq.n	8003294 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031c0:	4b53      	ldr	r3, [pc, #332]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d105      	bne.n	80031d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031cc:	4b50      	ldr	r3, [pc, #320]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0ad      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031dc:	4b4c      	ldr	r3, [pc, #304]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80031e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031e8:	f7fe fd9e 	bl	8001d28 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fe fd9a 	bl	8001d28 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e09a      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003202:	4b43      	ldr	r3, [pc, #268]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800320e:	4b40      	ldr	r3, [pc, #256]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	4b40      	ldr	r3, [pc, #256]	@ (8003314 <HAL_RCC_OscConfig+0x784>)
 8003214:	4013      	ands	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800321e:	3a01      	subs	r2, #1
 8003220:	0112      	lsls	r2, r2, #4
 8003222:	4311      	orrs	r1, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003228:	0212      	lsls	r2, r2, #8
 800322a:	4311      	orrs	r1, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003230:	0852      	lsrs	r2, r2, #1
 8003232:	3a01      	subs	r2, #1
 8003234:	0552      	lsls	r2, r2, #21
 8003236:	4311      	orrs	r1, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800323c:	0852      	lsrs	r2, r2, #1
 800323e:	3a01      	subs	r2, #1
 8003240:	0652      	lsls	r2, r2, #25
 8003242:	4311      	orrs	r1, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003248:	0912      	lsrs	r2, r2, #4
 800324a:	0452      	lsls	r2, r2, #17
 800324c:	430a      	orrs	r2, r1
 800324e:	4930      	ldr	r1, [pc, #192]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003250:	4313      	orrs	r3, r2
 8003252:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003254:	4b2e      	ldr	r3, [pc, #184]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a2d      	ldr	r2, [pc, #180]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 800325a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800325e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003260:	4b2b      	ldr	r3, [pc, #172]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4a2a      	ldr	r2, [pc, #168]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003266:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800326a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800326c:	f7fe fd5c 	bl	8001d28 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003274:	f7fe fd58 	bl	8001d28 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e058      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003286:	4b22      	ldr	r3, [pc, #136]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003292:	e050      	b.n	8003336 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e04f      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003298:	4b1d      	ldr	r3, [pc, #116]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d148      	bne.n	8003336 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a19      	ldr	r2, [pc, #100]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80032aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032b0:	4b17      	ldr	r3, [pc, #92]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4a16      	ldr	r2, [pc, #88]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80032b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032bc:	f7fe fd34 	bl	8001d28 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fe fd30 	bl	8001d28 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e030      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x734>
 80032e2:	e028      	b.n	8003336 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	d023      	beq.n	8003332 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b09      	ldr	r3, [pc, #36]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a08      	ldr	r2, [pc, #32]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80032f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f6:	f7fe fd17 	bl	8001d28 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032fc:	e00c      	b.n	8003318 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fe:	f7fe fd13 	bl	8001d28 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d905      	bls.n	8003318 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e013      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
 8003310:	40021000 	.word	0x40021000
 8003314:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003318:	4b09      	ldr	r3, [pc, #36]	@ (8003340 <HAL_RCC_OscConfig+0x7b0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ec      	bne.n	80032fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003324:	4b06      	ldr	r3, [pc, #24]	@ (8003340 <HAL_RCC_OscConfig+0x7b0>)
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	4905      	ldr	r1, [pc, #20]	@ (8003340 <HAL_RCC_OscConfig+0x7b0>)
 800332a:	4b06      	ldr	r3, [pc, #24]	@ (8003344 <HAL_RCC_OscConfig+0x7b4>)
 800332c:	4013      	ands	r3, r2
 800332e:	60cb      	str	r3, [r1, #12]
 8003330:	e001      	b.n	8003336 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3720      	adds	r7, #32
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021000 	.word	0x40021000
 8003344:	feeefffc 	.word	0xfeeefffc

08003348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0e7      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800335c:	4b75      	ldr	r3, [pc, #468]	@ (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d910      	bls.n	800338c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336a:	4b72      	ldr	r3, [pc, #456]	@ (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f023 0207 	bic.w	r2, r3, #7
 8003372:	4970      	ldr	r1, [pc, #448]	@ (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337a:	4b6e      	ldr	r3, [pc, #440]	@ (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0cf      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d010      	beq.n	80033ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	4b66      	ldr	r3, [pc, #408]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d908      	bls.n	80033ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a8:	4b63      	ldr	r3, [pc, #396]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4960      	ldr	r1, [pc, #384]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d04c      	beq.n	8003460 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d121      	bne.n	800341e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0a6      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033e6:	4b54      	ldr	r3, [pc, #336]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d115      	bne.n	800341e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e09a      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033fe:	4b4e      	ldr	r3, [pc, #312]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e08e      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800340e:	4b4a      	ldr	r3, [pc, #296]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e086      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800341e:	4b46      	ldr	r3, [pc, #280]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f023 0203 	bic.w	r2, r3, #3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4943      	ldr	r1, [pc, #268]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 800342c:	4313      	orrs	r3, r2
 800342e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003430:	f7fe fc7a 	bl	8001d28 <HAL_GetTick>
 8003434:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	e00a      	b.n	800344e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003438:	f7fe fc76 	bl	8001d28 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e06e      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	4b3a      	ldr	r3, [pc, #232]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 020c 	and.w	r2, r3, #12
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	429a      	cmp	r2, r3
 800345e:	d1eb      	bne.n	8003438 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d010      	beq.n	800348e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	4b31      	ldr	r3, [pc, #196]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003478:	429a      	cmp	r2, r3
 800347a:	d208      	bcs.n	800348e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800347c:	4b2e      	ldr	r3, [pc, #184]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	492b      	ldr	r1, [pc, #172]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800348e:	4b29      	ldr	r3, [pc, #164]	@ (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d210      	bcs.n	80034be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349c:	4b25      	ldr	r3, [pc, #148]	@ (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 0207 	bic.w	r2, r3, #7
 80034a4:	4923      	ldr	r1, [pc, #140]	@ (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ac:	4b21      	ldr	r3, [pc, #132]	@ (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d001      	beq.n	80034be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e036      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	4918      	ldr	r1, [pc, #96]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034e8:	4b13      	ldr	r3, [pc, #76]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4910      	ldr	r1, [pc, #64]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034fc:	f000 f824 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8003500:	4602      	mov	r2, r0
 8003502:	4b0d      	ldr	r3, [pc, #52]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	490b      	ldr	r1, [pc, #44]	@ (800353c <HAL_RCC_ClockConfig+0x1f4>)
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
 8003518:	4a09      	ldr	r2, [pc, #36]	@ (8003540 <HAL_RCC_ClockConfig+0x1f8>)
 800351a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800351c:	4b09      	ldr	r3, [pc, #36]	@ (8003544 <HAL_RCC_ClockConfig+0x1fc>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fe fbb1 	bl	8001c88 <HAL_InitTick>
 8003526:	4603      	mov	r3, r0
 8003528:	72fb      	strb	r3, [r7, #11]

  return status;
 800352a:	7afb      	ldrb	r3, [r7, #11]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40022000 	.word	0x40022000
 8003538:	40021000 	.word	0x40021000
 800353c:	08006b84 	.word	0x08006b84
 8003540:	20000000 	.word	0x20000000
 8003544:	20000004 	.word	0x20000004

08003548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003548:	b480      	push	{r7}
 800354a:	b089      	sub	sp, #36	@ 0x24
 800354c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	2300      	movs	r3, #0
 8003554:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003556:	4b3e      	ldr	r3, [pc, #248]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003560:	4b3b      	ldr	r3, [pc, #236]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_RCC_GetSysClockFreq+0x34>
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b0c      	cmp	r3, #12
 8003574:	d121      	bne.n	80035ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d11e      	bne.n	80035ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800357c:	4b34      	ldr	r3, [pc, #208]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d107      	bne.n	8003598 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003588:	4b31      	ldr	r3, [pc, #196]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 800358a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800358e:	0a1b      	lsrs	r3, r3, #8
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	e005      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003598:	4b2d      	ldr	r3, [pc, #180]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10d      	bne.n	80035d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035b8:	e00a      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d102      	bne.n	80035c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035c0:	4b25      	ldr	r3, [pc, #148]	@ (8003658 <HAL_RCC_GetSysClockFreq+0x110>)
 80035c2:	61bb      	str	r3, [r7, #24]
 80035c4:	e004      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035cc:	4b23      	ldr	r3, [pc, #140]	@ (800365c <HAL_RCC_GetSysClockFreq+0x114>)
 80035ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b0c      	cmp	r3, #12
 80035d4:	d134      	bne.n	8003640 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d003      	beq.n	80035ee <HAL_RCC_GetSysClockFreq+0xa6>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d003      	beq.n	80035f4 <HAL_RCC_GetSysClockFreq+0xac>
 80035ec:	e005      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003658 <HAL_RCC_GetSysClockFreq+0x110>)
 80035f0:	617b      	str	r3, [r7, #20]
      break;
 80035f2:	e005      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035f4:	4b19      	ldr	r3, [pc, #100]	@ (800365c <HAL_RCC_GetSysClockFreq+0x114>)
 80035f6:	617b      	str	r3, [r7, #20]
      break;
 80035f8:	e002      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	617b      	str	r3, [r7, #20]
      break;
 80035fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003600:	4b13      	ldr	r3, [pc, #76]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	3301      	adds	r3, #1
 800360c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800360e:	4b10      	ldr	r3, [pc, #64]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	fb03 f202 	mul.w	r2, r3, r2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	fbb2 f3f3 	udiv	r3, r2, r3
 8003624:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003626:	4b0a      	ldr	r3, [pc, #40]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	0e5b      	lsrs	r3, r3, #25
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	3301      	adds	r3, #1
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003640:	69bb      	ldr	r3, [r7, #24]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3724      	adds	r7, #36	@ 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000
 8003654:	08006b9c 	.word	0x08006b9c
 8003658:	00f42400 	.word	0x00f42400
 800365c:	007a1200 	.word	0x007a1200

08003660 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003664:	4b03      	ldr	r3, [pc, #12]	@ (8003674 <HAL_RCC_GetHCLKFreq+0x14>)
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000000 	.word	0x20000000

08003678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800367c:	f7ff fff0 	bl	8003660 <HAL_RCC_GetHCLKFreq>
 8003680:	4602      	mov	r2, r0
 8003682:	4b06      	ldr	r3, [pc, #24]	@ (800369c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	4904      	ldr	r1, [pc, #16]	@ (80036a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800368e:	5ccb      	ldrb	r3, [r1, r3]
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	08006b94 	.word	0x08006b94

080036a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036a8:	f7ff ffda 	bl	8003660 <HAL_RCC_GetHCLKFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	0adb      	lsrs	r3, r3, #11
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	4904      	ldr	r1, [pc, #16]	@ (80036cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	08006b94 	.word	0x08006b94

080036d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036d8:	2300      	movs	r3, #0
 80036da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036e8:	f7ff f9ee 	bl	8002ac8 <HAL_PWREx_GetVoltageRange>
 80036ec:	6178      	str	r0, [r7, #20]
 80036ee:	e014      	b.n	800371a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036f0:	4b25      	ldr	r3, [pc, #148]	@ (8003788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f4:	4a24      	ldr	r2, [pc, #144]	@ (8003788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80036fc:	4b22      	ldr	r3, [pc, #136]	@ (8003788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003708:	f7ff f9de 	bl	8002ac8 <HAL_PWREx_GetVoltageRange>
 800370c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800370e:	4b1e      	ldr	r3, [pc, #120]	@ (8003788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	4a1d      	ldr	r2, [pc, #116]	@ (8003788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003714:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003718:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003720:	d10b      	bne.n	800373a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b80      	cmp	r3, #128	@ 0x80
 8003726:	d919      	bls.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2ba0      	cmp	r3, #160	@ 0xa0
 800372c:	d902      	bls.n	8003734 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800372e:	2302      	movs	r3, #2
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	e013      	b.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003734:	2301      	movs	r3, #1
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	e010      	b.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b80      	cmp	r3, #128	@ 0x80
 800373e:	d902      	bls.n	8003746 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003740:	2303      	movs	r3, #3
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	e00a      	b.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b80      	cmp	r3, #128	@ 0x80
 800374a:	d102      	bne.n	8003752 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800374c:	2302      	movs	r3, #2
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	e004      	b.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b70      	cmp	r3, #112	@ 0x70
 8003756:	d101      	bne.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003758:	2301      	movs	r3, #1
 800375a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800375c:	4b0b      	ldr	r3, [pc, #44]	@ (800378c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f023 0207 	bic.w	r2, r3, #7
 8003764:	4909      	ldr	r1, [pc, #36]	@ (800378c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800376c:	4b07      	ldr	r3, [pc, #28]	@ (800378c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	429a      	cmp	r2, r3
 8003778:	d001      	beq.n	800377e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40021000 	.word	0x40021000
 800378c:	40022000 	.word	0x40022000

08003790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003798:	2300      	movs	r3, #0
 800379a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800379c:	2300      	movs	r3, #0
 800379e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d041      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80037b4:	d02a      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80037ba:	d824      	bhi.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037c0:	d008      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037c6:	d81e      	bhi.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037d0:	d010      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037d2:	e018      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037d4:	4b86      	ldr	r3, [pc, #536]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4a85      	ldr	r2, [pc, #532]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037e0:	e015      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3304      	adds	r3, #4
 80037e6:	2100      	movs	r1, #0
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fabb 	bl	8003d64 <RCCEx_PLLSAI1_Config>
 80037ee:	4603      	mov	r3, r0
 80037f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037f2:	e00c      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3320      	adds	r3, #32
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fba6 	bl	8003f4c <RCCEx_PLLSAI2_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003804:	e003      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	74fb      	strb	r3, [r7, #19]
      break;
 800380a:	e000      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800380c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800380e:	7cfb      	ldrb	r3, [r7, #19]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10b      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003814:	4b76      	ldr	r3, [pc, #472]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003822:	4973      	ldr	r1, [pc, #460]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800382a:	e001      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382c:	7cfb      	ldrb	r3, [r7, #19]
 800382e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d041      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003840:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003844:	d02a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003846:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800384a:	d824      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800384c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003850:	d008      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003852:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003856:	d81e      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800385c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003860:	d010      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003862:	e018      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003864:	4b62      	ldr	r3, [pc, #392]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4a61      	ldr	r2, [pc, #388]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800386e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003870:	e015      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3304      	adds	r3, #4
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fa73 	bl	8003d64 <RCCEx_PLLSAI1_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003882:	e00c      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3320      	adds	r3, #32
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fb5e 	bl	8003f4c <RCCEx_PLLSAI2_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003894:	e003      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	74fb      	strb	r3, [r7, #19]
      break;
 800389a:	e000      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800389c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800389e:	7cfb      	ldrb	r3, [r7, #19]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10b      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038a4:	4b52      	ldr	r3, [pc, #328]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038b2:	494f      	ldr	r1, [pc, #316]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80038ba:	e001      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038bc:	7cfb      	ldrb	r3, [r7, #19]
 80038be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80a0 	beq.w	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ce:	2300      	movs	r3, #0
 80038d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038d2:	4b47      	ldr	r3, [pc, #284]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80038e2:	2300      	movs	r3, #0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00d      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e8:	4b41      	ldr	r3, [pc, #260]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ec:	4a40      	ldr	r2, [pc, #256]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80038f4:	4b3e      	ldr	r3, [pc, #248]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003900:	2301      	movs	r3, #1
 8003902:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003904:	4b3b      	ldr	r3, [pc, #236]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a3a      	ldr	r2, [pc, #232]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800390a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800390e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003910:	f7fe fa0a 	bl	8001d28 <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003916:	e009      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003918:	f7fe fa06 	bl	8001d28 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d902      	bls.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	74fb      	strb	r3, [r7, #19]
        break;
 800392a:	e005      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800392c:	4b31      	ldr	r3, [pc, #196]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0ef      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003938:	7cfb      	ldrb	r3, [r7, #19]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d15c      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800393e:	4b2c      	ldr	r3, [pc, #176]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003944:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003948:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01f      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	429a      	cmp	r2, r3
 800395a:	d019      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800395c:	4b24      	ldr	r3, [pc, #144]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003962:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003966:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003968:	4b21      	ldr	r3, [pc, #132]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800396e:	4a20      	ldr	r2, [pc, #128]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003978:	4b1d      	ldr	r3, [pc, #116]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800397e:	4a1c      	ldr	r2, [pc, #112]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003980:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003984:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003988:	4a19      	ldr	r2, [pc, #100]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d016      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7fe f9c5 	bl	8001d28 <HAL_GetTick>
 800399e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039a0:	e00b      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a2:	f7fe f9c1 	bl	8001d28 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d902      	bls.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	74fb      	strb	r3, [r7, #19]
            break;
 80039b8:	e006      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ba:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ec      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80039c8:	7cfb      	ldrb	r3, [r7, #19]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ce:	4b08      	ldr	r3, [pc, #32]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039de:	4904      	ldr	r1, [pc, #16]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80039e6:	e009      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039e8:	7cfb      	ldrb	r3, [r7, #19]
 80039ea:	74bb      	strb	r3, [r7, #18]
 80039ec:	e006      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
 80039f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f8:	7cfb      	ldrb	r3, [r7, #19]
 80039fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039fc:	7c7b      	ldrb	r3, [r7, #17]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d105      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a02:	4b9e      	ldr	r3, [pc, #632]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a06:	4a9d      	ldr	r2, [pc, #628]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a0c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a1a:	4b98      	ldr	r3, [pc, #608]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a20:	f023 0203 	bic.w	r2, r3, #3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a28:	4994      	ldr	r1, [pc, #592]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a3c:	4b8f      	ldr	r3, [pc, #572]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a42:	f023 020c 	bic.w	r2, r3, #12
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4a:	498c      	ldr	r1, [pc, #560]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a5e:	4b87      	ldr	r3, [pc, #540]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a64:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	4983      	ldr	r1, [pc, #524]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a80:	4b7e      	ldr	r3, [pc, #504]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	497b      	ldr	r1, [pc, #492]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003aa2:	4b76      	ldr	r3, [pc, #472]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ab0:	4972      	ldr	r1, [pc, #456]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ac4:	4b6d      	ldr	r3, [pc, #436]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad2:	496a      	ldr	r1, [pc, #424]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ae6:	4b65      	ldr	r3, [pc, #404]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af4:	4961      	ldr	r1, [pc, #388]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b08:	4b5c      	ldr	r3, [pc, #368]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b16:	4959      	ldr	r1, [pc, #356]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b2a:	4b54      	ldr	r3, [pc, #336]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b30:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b38:	4950      	ldr	r1, [pc, #320]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b4c:	4b4b      	ldr	r3, [pc, #300]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b52:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5a:	4948      	ldr	r1, [pc, #288]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b6e:	4b43      	ldr	r3, [pc, #268]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7c:	493f      	ldr	r1, [pc, #252]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d028      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b90:	4b3a      	ldr	r3, [pc, #232]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b9e:	4937      	ldr	r1, [pc, #220]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003baa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bae:	d106      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bb0:	4b32      	ldr	r3, [pc, #200]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4a31      	ldr	r2, [pc, #196]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bba:	60d3      	str	r3, [r2, #12]
 8003bbc:	e011      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003bc6:	d10c      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	2101      	movs	r1, #1
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 f8c8 	bl	8003d64 <RCCEx_PLLSAI1_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bd8:	7cfb      	ldrb	r3, [r7, #19]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003bde:	7cfb      	ldrb	r3, [r7, #19]
 8003be0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d028      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bee:	4b23      	ldr	r3, [pc, #140]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfc:	491f      	ldr	r1, [pc, #124]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c0c:	d106      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	4a1a      	ldr	r2, [pc, #104]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c18:	60d3      	str	r3, [r2, #12]
 8003c1a:	e011      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c24:	d10c      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 f899 	bl	8003d64 <RCCEx_PLLSAI1_Config>
 8003c32:	4603      	mov	r3, r0
 8003c34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c36:	7cfb      	ldrb	r3, [r7, #19]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d02b      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c5a:	4908      	ldr	r1, [pc, #32]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c6a:	d109      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c6c:	4b03      	ldr	r3, [pc, #12]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a02      	ldr	r2, [pc, #8]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c76:	60d3      	str	r3, [r2, #12]
 8003c78:	e014      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c7a:	bf00      	nop
 8003c7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2101      	movs	r1, #1
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 f867 	bl	8003d64 <RCCEx_PLLSAI1_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c9a:	7cfb      	ldrb	r3, [r7, #19]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ca0:	7cfb      	ldrb	r3, [r7, #19]
 8003ca2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d02f      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cbe:	4928      	ldr	r1, [pc, #160]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cce:	d10d      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	2102      	movs	r1, #2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f844 	bl	8003d64 <RCCEx_PLLSAI1_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ce0:	7cfb      	ldrb	r3, [r7, #19]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d014      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ce6:	7cfb      	ldrb	r3, [r7, #19]
 8003ce8:	74bb      	strb	r3, [r7, #18]
 8003cea:	e011      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cf4:	d10c      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3320      	adds	r3, #32
 8003cfa:	2102      	movs	r1, #2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 f925 	bl	8003f4c <RCCEx_PLLSAI2_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d06:	7cfb      	ldrb	r3, [r7, #19]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d0c:	7cfb      	ldrb	r3, [r7, #19]
 8003d0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d1c:	4b10      	ldr	r3, [pc, #64]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d22:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d2a:	490d      	ldr	r1, [pc, #52]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00b      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d3e:	4b08      	ldr	r3, [pc, #32]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d44:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d4e:	4904      	ldr	r1, [pc, #16]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d56:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40021000 	.word	0x40021000

08003d64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d72:	4b75      	ldr	r3, [pc, #468]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d018      	beq.n	8003db0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d7e:	4b72      	ldr	r3, [pc, #456]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0203 	and.w	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d10d      	bne.n	8003daa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
       ||
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d96:	4b6c      	ldr	r3, [pc, #432]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	091b      	lsrs	r3, r3, #4
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
       ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d047      	beq.n	8003e3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
 8003dae:	e044      	b.n	8003e3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d018      	beq.n	8003dea <RCCEx_PLLSAI1_Config+0x86>
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d825      	bhi.n	8003e08 <RCCEx_PLLSAI1_Config+0xa4>
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d002      	beq.n	8003dc6 <RCCEx_PLLSAI1_Config+0x62>
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d009      	beq.n	8003dd8 <RCCEx_PLLSAI1_Config+0x74>
 8003dc4:	e020      	b.n	8003e08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dc6:	4b60      	ldr	r3, [pc, #384]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d11d      	bne.n	8003e0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dd6:	e01a      	b.n	8003e0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dd8:	4b5b      	ldr	r3, [pc, #364]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d116      	bne.n	8003e12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de8:	e013      	b.n	8003e12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dea:	4b57      	ldr	r3, [pc, #348]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10f      	bne.n	8003e16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003df6:	4b54      	ldr	r3, [pc, #336]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e06:	e006      	b.n	8003e16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e0c:	e004      	b.n	8003e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e0e:	bf00      	nop
 8003e10:	e002      	b.n	8003e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e12:	bf00      	nop
 8003e14:	e000      	b.n	8003e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e16:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10d      	bne.n	8003e3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6819      	ldr	r1, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	430b      	orrs	r3, r1
 8003e34:	4944      	ldr	r1, [pc, #272]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d17d      	bne.n	8003f3c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e40:	4b41      	ldr	r3, [pc, #260]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a40      	ldr	r2, [pc, #256]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e4c:	f7fd ff6c 	bl	8001d28 <HAL_GetTick>
 8003e50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e52:	e009      	b.n	8003e68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e54:	f7fd ff68 	bl	8001d28 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d902      	bls.n	8003e68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	73fb      	strb	r3, [r7, #15]
        break;
 8003e66:	e005      	b.n	8003e74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e68:	4b37      	ldr	r3, [pc, #220]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1ef      	bne.n	8003e54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d160      	bne.n	8003f3c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d111      	bne.n	8003ea4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e80:	4b31      	ldr	r3, [pc, #196]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6892      	ldr	r2, [r2, #8]
 8003e90:	0211      	lsls	r1, r2, #8
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68d2      	ldr	r2, [r2, #12]
 8003e96:	0912      	lsrs	r2, r2, #4
 8003e98:	0452      	lsls	r2, r2, #17
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	492a      	ldr	r1, [pc, #168]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	610b      	str	r3, [r1, #16]
 8003ea2:	e027      	b.n	8003ef4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d112      	bne.n	8003ed0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eaa:	4b27      	ldr	r3, [pc, #156]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003eb2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6892      	ldr	r2, [r2, #8]
 8003eba:	0211      	lsls	r1, r2, #8
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6912      	ldr	r2, [r2, #16]
 8003ec0:	0852      	lsrs	r2, r2, #1
 8003ec2:	3a01      	subs	r2, #1
 8003ec4:	0552      	lsls	r2, r2, #21
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	491f      	ldr	r1, [pc, #124]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	610b      	str	r3, [r1, #16]
 8003ece:	e011      	b.n	8003ef4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ed8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6892      	ldr	r2, [r2, #8]
 8003ee0:	0211      	lsls	r1, r2, #8
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6952      	ldr	r2, [r2, #20]
 8003ee6:	0852      	lsrs	r2, r2, #1
 8003ee8:	3a01      	subs	r2, #1
 8003eea:	0652      	lsls	r2, r2, #25
 8003eec:	430a      	orrs	r2, r1
 8003eee:	4916      	ldr	r1, [pc, #88]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ef4:	4b14      	ldr	r3, [pc, #80]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a13      	ldr	r2, [pc, #76]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003efa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003efe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f00:	f7fd ff12 	bl	8001d28 <HAL_GetTick>
 8003f04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f06:	e009      	b.n	8003f1c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f08:	f7fd ff0e 	bl	8001d28 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d902      	bls.n	8003f1c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	73fb      	strb	r3, [r7, #15]
          break;
 8003f1a:	e005      	b.n	8003f28 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0ef      	beq.n	8003f08 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f2e:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	4904      	ldr	r1, [pc, #16]	@ (8003f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40021000 	.word	0x40021000

08003f4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f5a:	4b6a      	ldr	r3, [pc, #424]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d018      	beq.n	8003f98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f66:	4b67      	ldr	r3, [pc, #412]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f003 0203 	and.w	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d10d      	bne.n	8003f92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
       ||
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f7e:	4b61      	ldr	r3, [pc, #388]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	091b      	lsrs	r3, r3, #4
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
       ||
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d047      	beq.n	8004022 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	73fb      	strb	r3, [r7, #15]
 8003f96:	e044      	b.n	8004022 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	d018      	beq.n	8003fd2 <RCCEx_PLLSAI2_Config+0x86>
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d825      	bhi.n	8003ff0 <RCCEx_PLLSAI2_Config+0xa4>
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d002      	beq.n	8003fae <RCCEx_PLLSAI2_Config+0x62>
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d009      	beq.n	8003fc0 <RCCEx_PLLSAI2_Config+0x74>
 8003fac:	e020      	b.n	8003ff0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fae:	4b55      	ldr	r3, [pc, #340]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d11d      	bne.n	8003ff6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fbe:	e01a      	b.n	8003ff6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fc0:	4b50      	ldr	r3, [pc, #320]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d116      	bne.n	8003ffa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd0:	e013      	b.n	8003ffa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fd2:	4b4c      	ldr	r3, [pc, #304]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10f      	bne.n	8003ffe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fde:	4b49      	ldr	r3, [pc, #292]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d109      	bne.n	8003ffe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fee:	e006      	b.n	8003ffe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ff4:	e004      	b.n	8004000 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ff6:	bf00      	nop
 8003ff8:	e002      	b.n	8004000 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ffa:	bf00      	nop
 8003ffc:	e000      	b.n	8004000 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ffe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10d      	bne.n	8004022 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004006:	4b3f      	ldr	r3, [pc, #252]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6819      	ldr	r1, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	3b01      	subs	r3, #1
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	430b      	orrs	r3, r1
 800401c:	4939      	ldr	r1, [pc, #228]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800401e:	4313      	orrs	r3, r2
 8004020:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d167      	bne.n	80040f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004028:	4b36      	ldr	r3, [pc, #216]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a35      	ldr	r2, [pc, #212]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800402e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004034:	f7fd fe78 	bl	8001d28 <HAL_GetTick>
 8004038:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800403a:	e009      	b.n	8004050 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800403c:	f7fd fe74 	bl	8001d28 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d902      	bls.n	8004050 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	73fb      	strb	r3, [r7, #15]
        break;
 800404e:	e005      	b.n	800405c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004050:	4b2c      	ldr	r3, [pc, #176]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1ef      	bne.n	800403c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d14a      	bne.n	80040f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d111      	bne.n	800408c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004068:	4b26      	ldr	r3, [pc, #152]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6892      	ldr	r2, [r2, #8]
 8004078:	0211      	lsls	r1, r2, #8
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68d2      	ldr	r2, [r2, #12]
 800407e:	0912      	lsrs	r2, r2, #4
 8004080:	0452      	lsls	r2, r2, #17
 8004082:	430a      	orrs	r2, r1
 8004084:	491f      	ldr	r1, [pc, #124]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004086:	4313      	orrs	r3, r2
 8004088:	614b      	str	r3, [r1, #20]
 800408a:	e011      	b.n	80040b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800408c:	4b1d      	ldr	r3, [pc, #116]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004094:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6892      	ldr	r2, [r2, #8]
 800409c:	0211      	lsls	r1, r2, #8
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6912      	ldr	r2, [r2, #16]
 80040a2:	0852      	lsrs	r2, r2, #1
 80040a4:	3a01      	subs	r2, #1
 80040a6:	0652      	lsls	r2, r2, #25
 80040a8:	430a      	orrs	r2, r1
 80040aa:	4916      	ldr	r1, [pc, #88]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040b0:	4b14      	ldr	r3, [pc, #80]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a13      	ldr	r2, [pc, #76]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040bc:	f7fd fe34 	bl	8001d28 <HAL_GetTick>
 80040c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040c2:	e009      	b.n	80040d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040c4:	f7fd fe30 	bl	8001d28 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d902      	bls.n	80040d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	73fb      	strb	r3, [r7, #15]
          break;
 80040d6:	e005      	b.n	80040e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0ef      	beq.n	80040c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80040ea:	4b06      	ldr	r3, [pc, #24]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	4904      	ldr	r1, [pc, #16]	@ (8004104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000

08004108 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e095      	b.n	8004246 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411e:	2b00      	cmp	r3, #0
 8004120:	d108      	bne.n	8004134 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800412a:	d009      	beq.n	8004140 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	61da      	str	r2, [r3, #28]
 8004132:	e005      	b.n	8004140 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fd f9c4 	bl	80014e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004176:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004180:	d902      	bls.n	8004188 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	e002      	b.n	800418e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004188:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800418c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004196:	d007      	beq.n	80041a8 <HAL_SPI_Init+0xa0>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041a0:	d002      	beq.n	80041a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ea:	ea42 0103 	orr.w	r1, r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	0c1b      	lsrs	r3, r3, #16
 8004204:	f003 0204 	and.w	r2, r3, #4
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004224:	ea42 0103 	orr.w	r1, r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	099b      	lsrs	r3, r3, #6
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10f      	bne.n	8004294 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	099b      	lsrs	r3, r3, #6
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d004      	beq.n	8004294 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	4798      	blx	r3
    return;
 8004292:	e0d7      	b.n	8004444 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00a      	beq.n	80042b6 <HAL_SPI_IRQHandler+0x66>
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	09db      	lsrs	r3, r3, #7
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d004      	beq.n	80042b6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	4798      	blx	r3
    return;
 80042b4:	e0c6      	b.n	8004444 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10c      	bne.n	80042dc <HAL_SPI_IRQHandler+0x8c>
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	099b      	lsrs	r3, r3, #6
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	0a1b      	lsrs	r3, r3, #8
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 80b4 	beq.w	8004444 <HAL_SPI_IRQHandler+0x1f4>
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80ad 	beq.w	8004444 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	099b      	lsrs	r3, r3, #6
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d023      	beq.n	800433e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d011      	beq.n	8004326 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004306:	f043 0204 	orr.w	r2, r3, #4
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	e00b      	b.n	800433e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004326:	2300      	movs	r3, #0
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	693b      	ldr	r3, [r7, #16]
        return;
 800433c:	e082      	b.n	8004444 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d014      	beq.n	8004374 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800434e:	f043 0201 	orr.w	r2, r3, #1
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	0a1b      	lsrs	r3, r3, #8
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00c      	beq.n	800439a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004384:	f043 0208 	orr.w	r2, r3, #8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800438c:	2300      	movs	r3, #0
 800438e:	60bb      	str	r3, [r7, #8]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d04f      	beq.n	8004442 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80043b0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <HAL_SPI_IRQHandler+0x17e>
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d034      	beq.n	8004438 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0203 	bic.w	r2, r2, #3
 80043dc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d011      	beq.n	800440a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ea:	4a18      	ldr	r2, [pc, #96]	@ (800444c <HAL_SPI_IRQHandler+0x1fc>)
 80043ec:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fd ff30 	bl	8002258 <HAL_DMA_Abort_IT>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d005      	beq.n	800440a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004402:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440e:	2b00      	cmp	r3, #0
 8004410:	d016      	beq.n	8004440 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004416:	4a0d      	ldr	r2, [pc, #52]	@ (800444c <HAL_SPI_IRQHandler+0x1fc>)
 8004418:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441e:	4618      	mov	r0, r3
 8004420:	f7fd ff1a 	bl	8002258 <HAL_DMA_Abort_IT>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800442e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004436:	e003      	b.n	8004440 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f809 	bl	8004450 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800443e:	e000      	b.n	8004442 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004440:	bf00      	nop
    return;
 8004442:	bf00      	nop
  }
}
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	08004465 	.word	0x08004465

08004450 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004470:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f7ff ffe5 	bl	8004450 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004486:	bf00      	nop
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e040      	b.n	8004522 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d106      	bne.n	80044b6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7fd f9f7 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2224      	movs	r2, #36	@ 0x24
 80044ba:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0201 	bic.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 ff93 	bl	8005400 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fcd8 	bl	8004e90 <UART_SetConfig>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e01b      	b.n	8004522 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004508:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f042 0201 	orr.w	r2, r2, #1
 8004518:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f001 f812 	bl	8005544 <UART_CheckIdleState>
 8004520:	4603      	mov	r3, r0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	@ 0x28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	4613      	mov	r3, r2
 8004538:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004540:	2b20      	cmp	r3, #32
 8004542:	d137      	bne.n	80045b4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_UART_Receive_IT+0x24>
 800454a:	88fb      	ldrh	r3, [r7, #6]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e030      	b.n	80045b6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a18      	ldr	r2, [pc, #96]	@ (80045c0 <HAL_UART_Receive_IT+0x94>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d01f      	beq.n	80045a4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d018      	beq.n	80045a4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	613b      	str	r3, [r7, #16]
   return(result);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004586:	627b      	str	r3, [r7, #36]	@ 0x24
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	461a      	mov	r2, r3
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	623b      	str	r3, [r7, #32]
 8004592:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	69f9      	ldr	r1, [r7, #28]
 8004596:	6a3a      	ldr	r2, [r7, #32]
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	61bb      	str	r3, [r7, #24]
   return(result);
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e6      	bne.n	8004572 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045a4:	88fb      	ldrh	r3, [r7, #6]
 80045a6:	461a      	mov	r2, r3
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f001 f8e0 	bl	8005770 <UART_Start_Receive_IT>
 80045b0:	4603      	mov	r3, r0
 80045b2:	e000      	b.n	80045b6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045b4:	2302      	movs	r3, #2
  }
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3728      	adds	r7, #40	@ 0x28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40008000 	.word	0x40008000

080045c4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	@ 0x28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	4613      	mov	r3, r2
 80045d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d165      	bne.n	80046a6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <HAL_UART_Transmit_DMA+0x22>
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e05e      	b.n	80046a8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	88fa      	ldrh	r2, [r7, #6]
 80045f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	88fa      	ldrh	r2, [r7, #6]
 80045fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2221      	movs	r2, #33	@ 0x21
 800460c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004612:	2b00      	cmp	r3, #0
 8004614:	d027      	beq.n	8004666 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461a:	4a25      	ldr	r2, [pc, #148]	@ (80046b0 <HAL_UART_Transmit_DMA+0xec>)
 800461c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004622:	4a24      	ldr	r2, [pc, #144]	@ (80046b4 <HAL_UART_Transmit_DMA+0xf0>)
 8004624:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462a:	4a23      	ldr	r2, [pc, #140]	@ (80046b8 <HAL_UART_Transmit_DMA+0xf4>)
 800462c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004632:	2200      	movs	r2, #0
 8004634:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800463e:	4619      	mov	r1, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3328      	adds	r3, #40	@ 0x28
 8004646:	461a      	mov	r2, r3
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	f7fd fd67 	bl	800211c <HAL_DMA_Start_IT>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2210      	movs	r2, #16
 8004658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e020      	b.n	80046a8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2240      	movs	r2, #64	@ 0x40
 800466c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3308      	adds	r3, #8
 8004674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	613b      	str	r3, [r7, #16]
   return(result);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004684:	627b      	str	r3, [r7, #36]	@ 0x24
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3308      	adds	r3, #8
 800468c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800468e:	623a      	str	r2, [r7, #32]
 8004690:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004692:	69f9      	ldr	r1, [r7, #28]
 8004694:	6a3a      	ldr	r2, [r7, #32]
 8004696:	e841 2300 	strex	r3, r2, [r1]
 800469a:	61bb      	str	r3, [r7, #24]
   return(result);
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1e5      	bne.n	800466e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e000      	b.n	80046a8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80046a6:	2302      	movs	r3, #2
  }
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3728      	adds	r7, #40	@ 0x28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	08005b51 	.word	0x08005b51
 80046b4:	08005beb 	.word	0x08005beb
 80046b8:	08005d71 	.word	0x08005d71

080046bc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b09a      	sub	sp, #104	@ 0x68
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
#else
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80046d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80046e4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80046e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80046f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e6      	bne.n	80046c4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3308      	adds	r3, #8
 80046fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	663b      	str	r3, [r7, #96]	@ 0x60
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3308      	adds	r3, #8
 8004714:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004716:	643a      	str	r2, [r7, #64]	@ 0x40
 8004718:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800471c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800471e:	e841 2300 	strex	r3, r2, [r1]
 8004722:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e5      	bne.n	80046f6 <HAL_UART_AbortReceive+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800472e:	2b01      	cmp	r3, #1
 8004730:	d118      	bne.n	8004764 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	f023 0310 	bic.w	r3, r3, #16
 8004746:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004752:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004756:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004758:	e841 2300 	strex	r3, r2, [r1]
 800475c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e6      	bne.n	8004732 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476e:	2b40      	cmp	r3, #64	@ 0x40
 8004770:	d137      	bne.n	80047e2 <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3308      	adds	r3, #8
 8004778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	60bb      	str	r3, [r7, #8]
   return(result);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004788:	65bb      	str	r3, [r7, #88]	@ 0x58
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3308      	adds	r3, #8
 8004790:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004792:	61ba      	str	r2, [r7, #24]
 8004794:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004796:	6979      	ldr	r1, [r7, #20]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	e841 2300 	strex	r3, r2, [r1]
 800479e:	613b      	str	r3, [r7, #16]
   return(result);
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1e5      	bne.n	8004772 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d019      	beq.n	80047e2 <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047b2:	2200      	movs	r2, #0
 80047b4:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fd fd0e 	bl	80021dc <HAL_DMA_Abort>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00d      	beq.n	80047e2 <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fd fe34 	bl	8002438 <HAL_DMA_GetError>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d105      	bne.n	80047e2 <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2210      	movs	r2, #16
 80047da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e019      	b.n	8004816 <HAL_UART_AbortReceive+0x15a>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	220f      	movs	r2, #15
 80047f0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	8b1b      	ldrh	r3, [r3, #24]
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0208 	orr.w	r2, r2, #8
 8004802:	b292      	uxth	r2, r2
 8004804:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3768      	adds	r7, #104	@ 0x68
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b0ba      	sub	sp, #232	@ 0xe8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004846:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800484a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800484e:	4013      	ands	r3, r2
 8004850:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d115      	bne.n	8004888 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800485c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00f      	beq.n	8004888 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b00      	cmp	r3, #0
 8004872:	d009      	beq.n	8004888 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 82ca 	beq.w	8004e12 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	4798      	blx	r3
      }
      return;
 8004886:	e2c4      	b.n	8004e12 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004888:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8117 	beq.w	8004ac0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800489e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80048a2:	4b85      	ldr	r3, [pc, #532]	@ (8004ab8 <HAL_UART_IRQHandler+0x298>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 810a 	beq.w	8004ac0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d011      	beq.n	80048dc <HAL_UART_IRQHandler+0xbc>
 80048b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00b      	beq.n	80048dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2201      	movs	r2, #1
 80048ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048d2:	f043 0201 	orr.w	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d011      	beq.n	800490c <HAL_UART_IRQHandler+0xec>
 80048e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00b      	beq.n	800490c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2202      	movs	r2, #2
 80048fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004902:	f043 0204 	orr.w	r2, r3, #4
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800490c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d011      	beq.n	800493c <HAL_UART_IRQHandler+0x11c>
 8004918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00b      	beq.n	800493c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2204      	movs	r2, #4
 800492a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004932:	f043 0202 	orr.w	r2, r3, #2
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800493c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b00      	cmp	r3, #0
 8004946:	d017      	beq.n	8004978 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800494c:	f003 0320 	and.w	r3, r3, #32
 8004950:	2b00      	cmp	r3, #0
 8004952:	d105      	bne.n	8004960 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004958:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00b      	beq.n	8004978 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2208      	movs	r2, #8
 8004966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800496e:	f043 0208 	orr.w	r2, r3, #8
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800497c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004980:	2b00      	cmp	r3, #0
 8004982:	d012      	beq.n	80049aa <HAL_UART_IRQHandler+0x18a>
 8004984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004988:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00c      	beq.n	80049aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049a0:	f043 0220 	orr.w	r2, r3, #32
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 8230 	beq.w	8004e16 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80049b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00d      	beq.n	80049de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f2:	2b40      	cmp	r3, #64	@ 0x40
 80049f4:	d005      	beq.n	8004a02 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d04f      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f001 f840 	bl	8005a88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a12:	2b40      	cmp	r3, #64	@ 0x40
 8004a14:	d141      	bne.n	8004a9a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3308      	adds	r3, #8
 8004a1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a52:	e841 2300 	strex	r3, r2, [r1]
 8004a56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1d9      	bne.n	8004a16 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d013      	beq.n	8004a92 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a6e:	4a13      	ldr	r2, [pc, #76]	@ (8004abc <HAL_UART_IRQHandler+0x29c>)
 8004a70:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fd fbee 	bl	8002258 <HAL_DMA_Abort_IT>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d017      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a90:	e00f      	b.n	8004ab2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f9f2 	bl	8004e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a98:	e00b      	b.n	8004ab2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f9ee 	bl	8004e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa0:	e007      	b.n	8004ab2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f9ea 	bl	8004e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004ab0:	e1b1      	b.n	8004e16 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab2:	bf00      	nop
    return;
 8004ab4:	e1af      	b.n	8004e16 <HAL_UART_IRQHandler+0x5f6>
 8004ab6:	bf00      	nop
 8004ab8:	04000120 	.word	0x04000120
 8004abc:	08005def 	.word	0x08005def

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	f040 816a 	bne.w	8004d9e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8163 	beq.w	8004d9e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 815c 	beq.w	8004d9e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2210      	movs	r2, #16
 8004aec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af8:	2b40      	cmp	r3, #64	@ 0x40
 8004afa:	f040 80d4 	bne.w	8004ca6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 80ad 	beq.w	8004c6e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	f080 80a5 	bcs.w	8004c6e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f040 8086 	bne.w	8004c4c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b6e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b72:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1da      	bne.n	8004b40 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3308      	adds	r3, #8
 8004b90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b94:	e853 3f00 	ldrex	r3, [r3]
 8004b98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3308      	adds	r3, #8
 8004baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004bae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004bb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004bb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004bc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e1      	bne.n	8004b8a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3308      	adds	r3, #8
 8004bcc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004bd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3308      	adds	r3, #8
 8004be6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004bea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004bf0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004bf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e3      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c1c:	f023 0310 	bic.w	r3, r3, #16
 8004c20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e4      	bne.n	8004c0c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fd fac8 	bl	80021dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fc fba4 	bl	80013b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004c6c:	e0d5      	b.n	8004e1a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	f040 80ce 	bne.w	8004e1a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0320 	and.w	r3, r3, #32
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	f040 80c5 	bne.w	8004e1a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fc fb88 	bl	80013b4 <HAL_UARTEx_RxEventCallback>
      return;
 8004ca4:	e0b9      	b.n	8004e1a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 80ab 	beq.w	8004e1e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 80a6 	beq.w	8004e1e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cf6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e4      	bne.n	8004cd2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3308      	adds	r3, #8
 8004d0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	623b      	str	r3, [r7, #32]
   return(result);
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	f023 0301 	bic.w	r3, r3, #1
 8004d1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3308      	adds	r3, #8
 8004d28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d2c:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e3      	bne.n	8004d08 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f023 0310 	bic.w	r3, r3, #16
 8004d68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d76:	61fb      	str	r3, [r7, #28]
 8004d78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	69b9      	ldr	r1, [r7, #24]
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	617b      	str	r3, [r7, #20]
   return(result);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e4      	bne.n	8004d54 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d94:	4619      	mov	r1, r3
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fc fb0c 	bl	80013b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d9c:	e03f      	b.n	8004e1e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00e      	beq.n	8004dc8 <HAL_UART_IRQHandler+0x5a8>
 8004daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d008      	beq.n	8004dc8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004dbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f001 fa11 	bl	80061e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dc6:	e02d      	b.n	8004e24 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00e      	beq.n	8004df2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01c      	beq.n	8004e22 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	4798      	blx	r3
    }
    return;
 8004df0:	e017      	b.n	8004e22 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d012      	beq.n	8004e24 <HAL_UART_IRQHandler+0x604>
 8004dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00c      	beq.n	8004e24 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f001 f805 	bl	8005e1a <UART_EndTransmit_IT>
    return;
 8004e10:	e008      	b.n	8004e24 <HAL_UART_IRQHandler+0x604>
      return;
 8004e12:	bf00      	nop
 8004e14:	e006      	b.n	8004e24 <HAL_UART_IRQHandler+0x604>
    return;
 8004e16:	bf00      	nop
 8004e18:	e004      	b.n	8004e24 <HAL_UART_IRQHandler+0x604>
      return;
 8004e1a:	bf00      	nop
 8004e1c:	e002      	b.n	8004e24 <HAL_UART_IRQHandler+0x604>
      return;
 8004e1e:	bf00      	nop
 8004e20:	e000      	b.n	8004e24 <HAL_UART_IRQHandler+0x604>
    return;
 8004e22:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004e24:	37e8      	adds	r7, #232	@ 0xe8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop

08004e2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e94:	b08a      	sub	sp, #40	@ 0x28
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4ba4      	ldr	r3, [pc, #656]	@ (8005150 <UART_SetConfig+0x2c0>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a99      	ldr	r2, [pc, #612]	@ (8005154 <UART_SetConfig+0x2c4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a90      	ldr	r2, [pc, #576]	@ (8005158 <UART_SetConfig+0x2c8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d126      	bne.n	8004f68 <UART_SetConfig+0xd8>
 8004f1a:	4b90      	ldr	r3, [pc, #576]	@ (800515c <UART_SetConfig+0x2cc>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d81b      	bhi.n	8004f60 <UART_SetConfig+0xd0>
 8004f28:	a201      	add	r2, pc, #4	@ (adr r2, 8004f30 <UART_SetConfig+0xa0>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f41 	.word	0x08004f41
 8004f34:	08004f51 	.word	0x08004f51
 8004f38:	08004f49 	.word	0x08004f49
 8004f3c:	08004f59 	.word	0x08004f59
 8004f40:	2301      	movs	r3, #1
 8004f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f46:	e116      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4e:	e112      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004f50:	2304      	movs	r3, #4
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f56:	e10e      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004f58:	2308      	movs	r3, #8
 8004f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f5e:	e10a      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004f60:	2310      	movs	r3, #16
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f66:	e106      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a7c      	ldr	r2, [pc, #496]	@ (8005160 <UART_SetConfig+0x2d0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d138      	bne.n	8004fe4 <UART_SetConfig+0x154>
 8004f72:	4b7a      	ldr	r3, [pc, #488]	@ (800515c <UART_SetConfig+0x2cc>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f78:	f003 030c 	and.w	r3, r3, #12
 8004f7c:	2b0c      	cmp	r3, #12
 8004f7e:	d82d      	bhi.n	8004fdc <UART_SetConfig+0x14c>
 8004f80:	a201      	add	r2, pc, #4	@ (adr r2, 8004f88 <UART_SetConfig+0xf8>)
 8004f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f86:	bf00      	nop
 8004f88:	08004fbd 	.word	0x08004fbd
 8004f8c:	08004fdd 	.word	0x08004fdd
 8004f90:	08004fdd 	.word	0x08004fdd
 8004f94:	08004fdd 	.word	0x08004fdd
 8004f98:	08004fcd 	.word	0x08004fcd
 8004f9c:	08004fdd 	.word	0x08004fdd
 8004fa0:	08004fdd 	.word	0x08004fdd
 8004fa4:	08004fdd 	.word	0x08004fdd
 8004fa8:	08004fc5 	.word	0x08004fc5
 8004fac:	08004fdd 	.word	0x08004fdd
 8004fb0:	08004fdd 	.word	0x08004fdd
 8004fb4:	08004fdd 	.word	0x08004fdd
 8004fb8:	08004fd5 	.word	0x08004fd5
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc2:	e0d8      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fca:	e0d4      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004fcc:	2304      	movs	r3, #4
 8004fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd2:	e0d0      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004fd4:	2308      	movs	r3, #8
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fda:	e0cc      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004fdc:	2310      	movs	r3, #16
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe2:	e0c8      	b.n	8005176 <UART_SetConfig+0x2e6>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a5e      	ldr	r2, [pc, #376]	@ (8005164 <UART_SetConfig+0x2d4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d125      	bne.n	800503a <UART_SetConfig+0x1aa>
 8004fee:	4b5b      	ldr	r3, [pc, #364]	@ (800515c <UART_SetConfig+0x2cc>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ff8:	2b30      	cmp	r3, #48	@ 0x30
 8004ffa:	d016      	beq.n	800502a <UART_SetConfig+0x19a>
 8004ffc:	2b30      	cmp	r3, #48	@ 0x30
 8004ffe:	d818      	bhi.n	8005032 <UART_SetConfig+0x1a2>
 8005000:	2b20      	cmp	r3, #32
 8005002:	d00a      	beq.n	800501a <UART_SetConfig+0x18a>
 8005004:	2b20      	cmp	r3, #32
 8005006:	d814      	bhi.n	8005032 <UART_SetConfig+0x1a2>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <UART_SetConfig+0x182>
 800500c:	2b10      	cmp	r3, #16
 800500e:	d008      	beq.n	8005022 <UART_SetConfig+0x192>
 8005010:	e00f      	b.n	8005032 <UART_SetConfig+0x1a2>
 8005012:	2300      	movs	r3, #0
 8005014:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005018:	e0ad      	b.n	8005176 <UART_SetConfig+0x2e6>
 800501a:	2302      	movs	r3, #2
 800501c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005020:	e0a9      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005022:	2304      	movs	r3, #4
 8005024:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005028:	e0a5      	b.n	8005176 <UART_SetConfig+0x2e6>
 800502a:	2308      	movs	r3, #8
 800502c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005030:	e0a1      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005032:	2310      	movs	r3, #16
 8005034:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005038:	e09d      	b.n	8005176 <UART_SetConfig+0x2e6>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a4a      	ldr	r2, [pc, #296]	@ (8005168 <UART_SetConfig+0x2d8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d125      	bne.n	8005090 <UART_SetConfig+0x200>
 8005044:	4b45      	ldr	r3, [pc, #276]	@ (800515c <UART_SetConfig+0x2cc>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800504e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005050:	d016      	beq.n	8005080 <UART_SetConfig+0x1f0>
 8005052:	2bc0      	cmp	r3, #192	@ 0xc0
 8005054:	d818      	bhi.n	8005088 <UART_SetConfig+0x1f8>
 8005056:	2b80      	cmp	r3, #128	@ 0x80
 8005058:	d00a      	beq.n	8005070 <UART_SetConfig+0x1e0>
 800505a:	2b80      	cmp	r3, #128	@ 0x80
 800505c:	d814      	bhi.n	8005088 <UART_SetConfig+0x1f8>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <UART_SetConfig+0x1d8>
 8005062:	2b40      	cmp	r3, #64	@ 0x40
 8005064:	d008      	beq.n	8005078 <UART_SetConfig+0x1e8>
 8005066:	e00f      	b.n	8005088 <UART_SetConfig+0x1f8>
 8005068:	2300      	movs	r3, #0
 800506a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800506e:	e082      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005070:	2302      	movs	r3, #2
 8005072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005076:	e07e      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005078:	2304      	movs	r3, #4
 800507a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507e:	e07a      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005080:	2308      	movs	r3, #8
 8005082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005086:	e076      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005088:	2310      	movs	r3, #16
 800508a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508e:	e072      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a35      	ldr	r2, [pc, #212]	@ (800516c <UART_SetConfig+0x2dc>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d12a      	bne.n	80050f0 <UART_SetConfig+0x260>
 800509a:	4b30      	ldr	r3, [pc, #192]	@ (800515c <UART_SetConfig+0x2cc>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050a8:	d01a      	beq.n	80050e0 <UART_SetConfig+0x250>
 80050aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050ae:	d81b      	bhi.n	80050e8 <UART_SetConfig+0x258>
 80050b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050b4:	d00c      	beq.n	80050d0 <UART_SetConfig+0x240>
 80050b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050ba:	d815      	bhi.n	80050e8 <UART_SetConfig+0x258>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <UART_SetConfig+0x238>
 80050c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050c4:	d008      	beq.n	80050d8 <UART_SetConfig+0x248>
 80050c6:	e00f      	b.n	80050e8 <UART_SetConfig+0x258>
 80050c8:	2300      	movs	r3, #0
 80050ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ce:	e052      	b.n	8005176 <UART_SetConfig+0x2e6>
 80050d0:	2302      	movs	r3, #2
 80050d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050d6:	e04e      	b.n	8005176 <UART_SetConfig+0x2e6>
 80050d8:	2304      	movs	r3, #4
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050de:	e04a      	b.n	8005176 <UART_SetConfig+0x2e6>
 80050e0:	2308      	movs	r3, #8
 80050e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050e6:	e046      	b.n	8005176 <UART_SetConfig+0x2e6>
 80050e8:	2310      	movs	r3, #16
 80050ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ee:	e042      	b.n	8005176 <UART_SetConfig+0x2e6>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a17      	ldr	r2, [pc, #92]	@ (8005154 <UART_SetConfig+0x2c4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d13a      	bne.n	8005170 <UART_SetConfig+0x2e0>
 80050fa:	4b18      	ldr	r3, [pc, #96]	@ (800515c <UART_SetConfig+0x2cc>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005100:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005104:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005108:	d01a      	beq.n	8005140 <UART_SetConfig+0x2b0>
 800510a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800510e:	d81b      	bhi.n	8005148 <UART_SetConfig+0x2b8>
 8005110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005114:	d00c      	beq.n	8005130 <UART_SetConfig+0x2a0>
 8005116:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800511a:	d815      	bhi.n	8005148 <UART_SetConfig+0x2b8>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <UART_SetConfig+0x298>
 8005120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005124:	d008      	beq.n	8005138 <UART_SetConfig+0x2a8>
 8005126:	e00f      	b.n	8005148 <UART_SetConfig+0x2b8>
 8005128:	2300      	movs	r3, #0
 800512a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800512e:	e022      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005130:	2302      	movs	r3, #2
 8005132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005136:	e01e      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005138:	2304      	movs	r3, #4
 800513a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800513e:	e01a      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005140:	2308      	movs	r3, #8
 8005142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005146:	e016      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005148:	2310      	movs	r3, #16
 800514a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800514e:	e012      	b.n	8005176 <UART_SetConfig+0x2e6>
 8005150:	efff69f3 	.word	0xefff69f3
 8005154:	40008000 	.word	0x40008000
 8005158:	40013800 	.word	0x40013800
 800515c:	40021000 	.word	0x40021000
 8005160:	40004400 	.word	0x40004400
 8005164:	40004800 	.word	0x40004800
 8005168:	40004c00 	.word	0x40004c00
 800516c:	40005000 	.word	0x40005000
 8005170:	2310      	movs	r3, #16
 8005172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a9f      	ldr	r2, [pc, #636]	@ (80053f8 <UART_SetConfig+0x568>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d17a      	bne.n	8005276 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005180:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005184:	2b08      	cmp	r3, #8
 8005186:	d824      	bhi.n	80051d2 <UART_SetConfig+0x342>
 8005188:	a201      	add	r2, pc, #4	@ (adr r2, 8005190 <UART_SetConfig+0x300>)
 800518a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518e:	bf00      	nop
 8005190:	080051b5 	.word	0x080051b5
 8005194:	080051d3 	.word	0x080051d3
 8005198:	080051bd 	.word	0x080051bd
 800519c:	080051d3 	.word	0x080051d3
 80051a0:	080051c3 	.word	0x080051c3
 80051a4:	080051d3 	.word	0x080051d3
 80051a8:	080051d3 	.word	0x080051d3
 80051ac:	080051d3 	.word	0x080051d3
 80051b0:	080051cb 	.word	0x080051cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b4:	f7fe fa60 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 80051b8:	61f8      	str	r0, [r7, #28]
        break;
 80051ba:	e010      	b.n	80051de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051bc:	4b8f      	ldr	r3, [pc, #572]	@ (80053fc <UART_SetConfig+0x56c>)
 80051be:	61fb      	str	r3, [r7, #28]
        break;
 80051c0:	e00d      	b.n	80051de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051c2:	f7fe f9c1 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 80051c6:	61f8      	str	r0, [r7, #28]
        break;
 80051c8:	e009      	b.n	80051de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051ce:	61fb      	str	r3, [r7, #28]
        break;
 80051d0:	e005      	b.n	80051de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 80fb 	beq.w	80053dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	4413      	add	r3, r2
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d305      	bcc.n	8005202 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d903      	bls.n	800520a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005208:	e0e8      	b.n	80053dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	2200      	movs	r2, #0
 800520e:	461c      	mov	r4, r3
 8005210:	4615      	mov	r5, r2
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	022b      	lsls	r3, r5, #8
 800521c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005220:	0222      	lsls	r2, r4, #8
 8005222:	68f9      	ldr	r1, [r7, #12]
 8005224:	6849      	ldr	r1, [r1, #4]
 8005226:	0849      	lsrs	r1, r1, #1
 8005228:	2000      	movs	r0, #0
 800522a:	4688      	mov	r8, r1
 800522c:	4681      	mov	r9, r0
 800522e:	eb12 0a08 	adds.w	sl, r2, r8
 8005232:	eb43 0b09 	adc.w	fp, r3, r9
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	603b      	str	r3, [r7, #0]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005244:	4650      	mov	r0, sl
 8005246:	4659      	mov	r1, fp
 8005248:	f7fb fbb4 	bl	80009b4 <__aeabi_uldivmod>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4613      	mov	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800525a:	d308      	bcc.n	800526e <UART_SetConfig+0x3de>
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005262:	d204      	bcs.n	800526e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	60da      	str	r2, [r3, #12]
 800526c:	e0b6      	b.n	80053dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005274:	e0b2      	b.n	80053dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800527e:	d15e      	bne.n	800533e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005280:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005284:	2b08      	cmp	r3, #8
 8005286:	d828      	bhi.n	80052da <UART_SetConfig+0x44a>
 8005288:	a201      	add	r2, pc, #4	@ (adr r2, 8005290 <UART_SetConfig+0x400>)
 800528a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528e:	bf00      	nop
 8005290:	080052b5 	.word	0x080052b5
 8005294:	080052bd 	.word	0x080052bd
 8005298:	080052c5 	.word	0x080052c5
 800529c:	080052db 	.word	0x080052db
 80052a0:	080052cb 	.word	0x080052cb
 80052a4:	080052db 	.word	0x080052db
 80052a8:	080052db 	.word	0x080052db
 80052ac:	080052db 	.word	0x080052db
 80052b0:	080052d3 	.word	0x080052d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b4:	f7fe f9e0 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 80052b8:	61f8      	str	r0, [r7, #28]
        break;
 80052ba:	e014      	b.n	80052e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052bc:	f7fe f9f2 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 80052c0:	61f8      	str	r0, [r7, #28]
        break;
 80052c2:	e010      	b.n	80052e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c4:	4b4d      	ldr	r3, [pc, #308]	@ (80053fc <UART_SetConfig+0x56c>)
 80052c6:	61fb      	str	r3, [r7, #28]
        break;
 80052c8:	e00d      	b.n	80052e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ca:	f7fe f93d 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 80052ce:	61f8      	str	r0, [r7, #28]
        break;
 80052d0:	e009      	b.n	80052e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052d6:	61fb      	str	r3, [r7, #28]
        break;
 80052d8:	e005      	b.n	80052e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d077      	beq.n	80053dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	005a      	lsls	r2, r3, #1
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	085b      	lsrs	r3, r3, #1
 80052f6:	441a      	add	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005300:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b0f      	cmp	r3, #15
 8005306:	d916      	bls.n	8005336 <UART_SetConfig+0x4a6>
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800530e:	d212      	bcs.n	8005336 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	b29b      	uxth	r3, r3
 8005314:	f023 030f 	bic.w	r3, r3, #15
 8005318:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	085b      	lsrs	r3, r3, #1
 800531e:	b29b      	uxth	r3, r3
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	b29a      	uxth	r2, r3
 8005326:	8afb      	ldrh	r3, [r7, #22]
 8005328:	4313      	orrs	r3, r2
 800532a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	8afa      	ldrh	r2, [r7, #22]
 8005332:	60da      	str	r2, [r3, #12]
 8005334:	e052      	b.n	80053dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800533c:	e04e      	b.n	80053dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800533e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005342:	2b08      	cmp	r3, #8
 8005344:	d827      	bhi.n	8005396 <UART_SetConfig+0x506>
 8005346:	a201      	add	r2, pc, #4	@ (adr r2, 800534c <UART_SetConfig+0x4bc>)
 8005348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534c:	08005371 	.word	0x08005371
 8005350:	08005379 	.word	0x08005379
 8005354:	08005381 	.word	0x08005381
 8005358:	08005397 	.word	0x08005397
 800535c:	08005387 	.word	0x08005387
 8005360:	08005397 	.word	0x08005397
 8005364:	08005397 	.word	0x08005397
 8005368:	08005397 	.word	0x08005397
 800536c:	0800538f 	.word	0x0800538f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005370:	f7fe f982 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 8005374:	61f8      	str	r0, [r7, #28]
        break;
 8005376:	e014      	b.n	80053a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005378:	f7fe f994 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 800537c:	61f8      	str	r0, [r7, #28]
        break;
 800537e:	e010      	b.n	80053a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005380:	4b1e      	ldr	r3, [pc, #120]	@ (80053fc <UART_SetConfig+0x56c>)
 8005382:	61fb      	str	r3, [r7, #28]
        break;
 8005384:	e00d      	b.n	80053a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005386:	f7fe f8df 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 800538a:	61f8      	str	r0, [r7, #28]
        break;
 800538c:	e009      	b.n	80053a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800538e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005392:	61fb      	str	r3, [r7, #28]
        break;
 8005394:	e005      	b.n	80053a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80053a0:	bf00      	nop
    }

    if (pclk != 0U)
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d019      	beq.n	80053dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	085a      	lsrs	r2, r3, #1
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	441a      	add	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	2b0f      	cmp	r3, #15
 80053c0:	d909      	bls.n	80053d6 <UART_SetConfig+0x546>
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053c8:	d205      	bcs.n	80053d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60da      	str	r2, [r3, #12]
 80053d4:	e002      	b.n	80053dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3728      	adds	r7, #40	@ 0x28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053f6:	bf00      	nop
 80053f8:	40008000 	.word	0x40008000
 80053fc:	00f42400 	.word	0x00f42400

08005400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01a      	beq.n	8005516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054fe:	d10a      	bne.n	8005516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]
  }
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b098      	sub	sp, #96	@ 0x60
 8005548:	af02      	add	r7, sp, #8
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005554:	f7fc fbe8 	bl	8001d28 <HAL_GetTick>
 8005558:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b08      	cmp	r3, #8
 8005566:	d12e      	bne.n	80055c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005568:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005570:	2200      	movs	r2, #0
 8005572:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f88c 	bl	8005694 <UART_WaitOnFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d021      	beq.n	80055c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558a:	e853 3f00 	ldrex	r3, [r3]
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005592:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005596:	653b      	str	r3, [r7, #80]	@ 0x50
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	461a      	mov	r2, r3
 800559e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80055a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055a8:	e841 2300 	strex	r3, r2, [r1]
 80055ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1e6      	bne.n	8005582 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e062      	b.n	800568c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d149      	bne.n	8005668 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055dc:	2200      	movs	r2, #0
 80055de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f856 	bl	8005694 <UART_WaitOnFlagUntilTimeout>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d03c      	beq.n	8005668 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	623b      	str	r3, [r7, #32]
   return(result);
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800560c:	633b      	str	r3, [r7, #48]	@ 0x30
 800560e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800561a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e6      	bne.n	80055ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3308      	adds	r3, #8
 8005626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0301 	bic.w	r3, r3, #1
 8005636:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3308      	adds	r3, #8
 800563e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005640:	61fa      	str	r2, [r7, #28]
 8005642:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	69b9      	ldr	r1, [r7, #24]
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	617b      	str	r3, [r7, #20]
   return(result);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e5      	bne.n	8005620 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e011      	b.n	800568c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3758      	adds	r7, #88	@ 0x58
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	4613      	mov	r3, r2
 80056a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a4:	e04f      	b.n	8005746 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ac:	d04b      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ae:	f7fc fb3b 	bl	8001d28 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d302      	bcc.n	80056c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e04e      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0304 	and.w	r3, r3, #4
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d037      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b80      	cmp	r3, #128	@ 0x80
 80056da:	d034      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b40      	cmp	r3, #64	@ 0x40
 80056e0:	d031      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f003 0308 	and.w	r3, r3, #8
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d110      	bne.n	8005712 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2208      	movs	r2, #8
 80056f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f9c5 	bl	8005a88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2208      	movs	r2, #8
 8005702:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e029      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800571c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005720:	d111      	bne.n	8005746 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800572a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f9ab 	bl	8005a88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e00f      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4013      	ands	r3, r2
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	429a      	cmp	r2, r3
 8005754:	bf0c      	ite	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	2300      	movne	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	429a      	cmp	r2, r3
 8005762:	d0a0      	beq.n	80056a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005770:	b480      	push	{r7}
 8005772:	b097      	sub	sp, #92	@ 0x5c
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	4613      	mov	r3, r2
 800577c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	88fa      	ldrh	r2, [r7, #6]
 8005788:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	88fa      	ldrh	r2, [r7, #6]
 8005790:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057a2:	d10e      	bne.n	80057c2 <UART_Start_Receive_IT+0x52>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <UART_Start_Receive_IT+0x48>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80057b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80057b6:	e02d      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	22ff      	movs	r2, #255	@ 0xff
 80057bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80057c0:	e028      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10d      	bne.n	80057e6 <UART_Start_Receive_IT+0x76>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d104      	bne.n	80057dc <UART_Start_Receive_IT+0x6c>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	22ff      	movs	r2, #255	@ 0xff
 80057d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80057da:	e01b      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	227f      	movs	r2, #127	@ 0x7f
 80057e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80057e4:	e016      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057ee:	d10d      	bne.n	800580c <UART_Start_Receive_IT+0x9c>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d104      	bne.n	8005802 <UART_Start_Receive_IT+0x92>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	227f      	movs	r2, #127	@ 0x7f
 80057fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005800:	e008      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	223f      	movs	r2, #63	@ 0x3f
 8005806:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800580a:	e003      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2222      	movs	r2, #34	@ 0x22
 8005820:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3308      	adds	r3, #8
 800582a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005836:	f043 0301 	orr.w	r3, r3, #1
 800583a:	657b      	str	r3, [r7, #84]	@ 0x54
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3308      	adds	r3, #8
 8005842:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005844:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005846:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800584a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e5      	bne.n	8005824 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005860:	d107      	bne.n	8005872 <UART_Start_Receive_IT+0x102>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d103      	bne.n	8005872 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4a21      	ldr	r2, [pc, #132]	@ (80058f4 <UART_Start_Receive_IT+0x184>)
 800586e:	669a      	str	r2, [r3, #104]	@ 0x68
 8005870:	e002      	b.n	8005878 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4a20      	ldr	r2, [pc, #128]	@ (80058f8 <UART_Start_Receive_IT+0x188>)
 8005876:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d019      	beq.n	80058b4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005888:	e853 3f00 	ldrex	r3, [r3]
 800588c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005890:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005894:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800589e:	637b      	str	r3, [r7, #52]	@ 0x34
 80058a0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80058a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80058ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e6      	bne.n	8005880 <UART_Start_Receive_IT+0x110>
 80058b2:	e018      	b.n	80058e6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	613b      	str	r3, [r7, #16]
   return(result);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f043 0320 	orr.w	r3, r3, #32
 80058c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058d2:	623b      	str	r3, [r7, #32]
 80058d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	69f9      	ldr	r1, [r7, #28]
 80058d8:	6a3a      	ldr	r2, [r7, #32]
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	61bb      	str	r3, [r7, #24]
   return(result);
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e6      	bne.n	80058b4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	375c      	adds	r7, #92	@ 0x5c
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	0800602d 	.word	0x0800602d
 80058f8:	08005e71 	.word	0x08005e71

080058fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b096      	sub	sp, #88	@ 0x58
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	4613      	mov	r3, r2
 8005908:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	88fa      	ldrh	r2, [r7, #6]
 8005914:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2222      	movs	r2, #34	@ 0x22
 8005924:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800592c:	2b00      	cmp	r3, #0
 800592e:	d028      	beq.n	8005982 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005934:	4a3e      	ldr	r2, [pc, #248]	@ (8005a30 <UART_Start_Receive_DMA+0x134>)
 8005936:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800593c:	4a3d      	ldr	r2, [pc, #244]	@ (8005a34 <UART_Start_Receive_DMA+0x138>)
 800593e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005944:	4a3c      	ldr	r2, [pc, #240]	@ (8005a38 <UART_Start_Receive_DMA+0x13c>)
 8005946:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800594c:	2200      	movs	r2, #0
 800594e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3324      	adds	r3, #36	@ 0x24
 800595a:	4619      	mov	r1, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005960:	461a      	mov	r2, r3
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	f7fc fbda 	bl	800211c <HAL_DMA_Start_IT>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2210      	movs	r2, #16
 8005972:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2220      	movs	r2, #32
 800597a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e051      	b.n	8005a26 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d018      	beq.n	80059bc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005992:	e853 3f00 	ldrex	r3, [r3]
 8005996:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800599e:	657b      	str	r3, [r7, #84]	@ 0x54
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059aa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80059ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059b0:	e841 2300 	strex	r3, r2, [r1]
 80059b4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80059b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e6      	bne.n	800598a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3308      	adds	r3, #8
 80059c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3308      	adds	r3, #8
 80059da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80059dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80059de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80059ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e5      	bne.n	80059bc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3308      	adds	r3, #8
 80059f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a10:	623a      	str	r2, [r7, #32]
 8005a12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	69f9      	ldr	r1, [r7, #28]
 8005a16:	6a3a      	ldr	r2, [r7, #32]
 8005a18:	e841 2300 	strex	r3, r2, [r1]
 8005a1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1e5      	bne.n	80059f0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3758      	adds	r7, #88	@ 0x58
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	08005c07 	.word	0x08005c07
 8005a34:	08005d33 	.word	0x08005d33
 8005a38:	08005d71 	.word	0x08005d71

08005a3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b089      	sub	sp, #36	@ 0x24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	61bb      	str	r3, [r7, #24]
 8005a64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a66:	6979      	ldr	r1, [r7, #20]
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1e6      	bne.n	8005a44 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005a7c:	bf00      	nop
 8005a7e:	3724      	adds	r7, #36	@ 0x24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b095      	sub	sp, #84	@ 0x54
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a98:	e853 3f00 	ldrex	r3, [r3]
 8005a9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aae:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ab0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ab4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ab6:	e841 2300 	strex	r3, r2, [r1]
 8005aba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1e6      	bne.n	8005a90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	e853 3f00 	ldrex	r3, [r3]
 8005ad0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	f023 0301 	bic.w	r3, r3, #1
 8005ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3308      	adds	r3, #8
 8005ae0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ae2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ae8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e5      	bne.n	8005ac2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d118      	bne.n	8005b30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f023 0310 	bic.w	r3, r3, #16
 8005b12:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b1c:	61bb      	str	r3, [r7, #24]
 8005b1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	6979      	ldr	r1, [r7, #20]
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	613b      	str	r3, [r7, #16]
   return(result);
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e6      	bne.n	8005afe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b44:	bf00      	nop
 8005b46:	3754      	adds	r7, #84	@ 0x54
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b090      	sub	sp, #64	@ 0x40
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0320 	and.w	r3, r3, #32
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d137      	bne.n	8005bdc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3308      	adds	r3, #8
 8005b7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7e:	e853 3f00 	ldrex	r3, [r3]
 8005b82:	623b      	str	r3, [r7, #32]
   return(result);
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3308      	adds	r3, #8
 8005b92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b94:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b9c:	e841 2300 	strex	r3, r2, [r1]
 8005ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e5      	bne.n	8005b74 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc6:	61fb      	str	r3, [r7, #28]
 8005bc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	69b9      	ldr	r1, [r7, #24]
 8005bcc:	69fa      	ldr	r2, [r7, #28]
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	617b      	str	r3, [r7, #20]
   return(result);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e6      	bne.n	8005ba8 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bda:	e002      	b.n	8005be2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005bdc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005bde:	f7ff f925 	bl	8004e2c <HAL_UART_TxCpltCallback>
}
 8005be2:	bf00      	nop
 8005be4:	3740      	adds	r7, #64	@ 0x40
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f7ff f921 	bl	8004e40 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bfe:	bf00      	nop
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b09c      	sub	sp, #112	@ 0x70
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c12:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d171      	bne.n	8005d06 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005c22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c24:	2200      	movs	r2, #0
 8005c26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c4a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c50:	e841 2300 	strex	r3, r2, [r1]
 8005c54:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1e6      	bne.n	8005c2a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3308      	adds	r3, #8
 8005c62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c66:	e853 3f00 	ldrex	r3, [r3]
 8005c6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6e:	f023 0301 	bic.w	r3, r3, #1
 8005c72:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	3308      	adds	r3, #8
 8005c7a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005c7c:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c7e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c84:	e841 2300 	strex	r3, r2, [r1]
 8005c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e5      	bne.n	8005c5c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3308      	adds	r3, #8
 8005c96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	e853 3f00 	ldrex	r3, [r3]
 8005c9e:	623b      	str	r3, [r7, #32]
   return(result);
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ca6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3308      	adds	r3, #8
 8005cae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005cb0:	633a      	str	r2, [r7, #48]	@ 0x30
 8005cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cb8:	e841 2300 	strex	r3, r2, [r1]
 8005cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e5      	bne.n	8005c90 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ccc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d118      	bne.n	8005d06 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	e853 3f00 	ldrex	r3, [r3]
 8005ce0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f023 0310 	bic.w	r3, r3, #16
 8005ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cf2:	61fb      	str	r3, [r7, #28]
 8005cf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf6:	69b9      	ldr	r1, [r7, #24]
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	617b      	str	r3, [r7, #20]
   return(result);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1e6      	bne.n	8005cd4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d08:	2200      	movs	r2, #0
 8005d0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d107      	bne.n	8005d24 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005d1e:	f7fb fb49 	bl	80013b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d22:	e002      	b.n	8005d2a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005d24:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005d26:	f7ff f895 	bl	8004e54 <HAL_UART_RxCpltCallback>
}
 8005d2a:	bf00      	nop
 8005d2c:	3770      	adds	r7, #112	@ 0x70
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d109      	bne.n	8005d62 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	4619      	mov	r1, r3
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f7fb fb2a 	bl	80013b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d60:	e002      	b.n	8005d68 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f7ff f880 	bl	8004e68 <HAL_UART_RxHalfCpltCallback>
}
 8005d68:	bf00      	nop
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d82:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d96:	2b80      	cmp	r3, #128	@ 0x80
 8005d98:	d109      	bne.n	8005dae <UART_DMAError+0x3e>
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b21      	cmp	r3, #33	@ 0x21
 8005d9e:	d106      	bne.n	8005dae <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8005da8:	6978      	ldr	r0, [r7, #20]
 8005daa:	f7ff fe47 	bl	8005a3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db8:	2b40      	cmp	r3, #64	@ 0x40
 8005dba:	d109      	bne.n	8005dd0 <UART_DMAError+0x60>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b22      	cmp	r3, #34	@ 0x22
 8005dc0:	d106      	bne.n	8005dd0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005dca:	6978      	ldr	r0, [r7, #20]
 8005dcc:	f7ff fe5c 	bl	8005a88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dd6:	f043 0210 	orr.w	r2, r3, #16
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005de0:	6978      	ldr	r0, [r7, #20]
 8005de2:	f7ff f84b 	bl	8004e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005de6:	bf00      	nop
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7ff f835 	bl	8004e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e12:	bf00      	nop
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b088      	sub	sp, #32
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	e853 3f00 	ldrex	r3, [r3]
 8005e2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e36:	61fb      	str	r3, [r7, #28]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	61bb      	str	r3, [r7, #24]
 8005e42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e44:	6979      	ldr	r1, [r7, #20]
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	e841 2300 	strex	r3, r2, [r1]
 8005e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1e6      	bne.n	8005e22 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2220      	movs	r2, #32
 8005e58:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7fe ffe3 	bl	8004e2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e66:	bf00      	nop
 8005e68:	3720      	adds	r7, #32
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b09c      	sub	sp, #112	@ 0x70
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e7e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e88:	2b22      	cmp	r3, #34	@ 0x22
 8005e8a:	f040 80be 	bne.w	800600a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005e94:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e98:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005e9c:	b2d9      	uxtb	r1, r3
 8005e9e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea8:	400a      	ands	r2, r1
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f040 80a3 	bne.w	800601e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ede:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ee0:	e853 3f00 	ldrex	r3, [r3]
 8005ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ee6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ee8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005eec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ef6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ef8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005efc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005efe:	e841 2300 	strex	r3, r2, [r1]
 8005f02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1e6      	bne.n	8005ed8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3308      	adds	r3, #8
 8005f10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f1c:	f023 0301 	bic.w	r3, r3, #1
 8005f20:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3308      	adds	r3, #8
 8005f28:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005f2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f32:	e841 2300 	strex	r3, r2, [r1]
 8005f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1e5      	bne.n	8005f0a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a34      	ldr	r2, [pc, #208]	@ (8006028 <UART_RxISR_8BIT+0x1b8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d01f      	beq.n	8005f9c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d018      	beq.n	8005f9c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f72:	e853 3f00 	ldrex	r3, [r3]
 8005f76:	623b      	str	r3, [r7, #32]
   return(result);
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f88:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e6      	bne.n	8005f6a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d12e      	bne.n	8006002 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	e853 3f00 	ldrex	r3, [r3]
 8005fb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 0310 	bic.w	r3, r3, #16
 8005fbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fc8:	61fb      	str	r3, [r7, #28]
 8005fca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fcc:	69b9      	ldr	r1, [r7, #24]
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	e841 2300 	strex	r3, r2, [r1]
 8005fd4:	617b      	str	r3, [r7, #20]
   return(result);
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1e6      	bne.n	8005faa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	f003 0310 	and.w	r3, r3, #16
 8005fe6:	2b10      	cmp	r3, #16
 8005fe8:	d103      	bne.n	8005ff2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2210      	movs	r2, #16
 8005ff0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fb f9da 	bl	80013b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006000:	e00d      	b.n	800601e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fe ff26 	bl	8004e54 <HAL_UART_RxCpltCallback>
}
 8006008:	e009      	b.n	800601e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	8b1b      	ldrh	r3, [r3, #24]
 8006010:	b29a      	uxth	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0208 	orr.w	r2, r2, #8
 800601a:	b292      	uxth	r2, r2
 800601c:	831a      	strh	r2, [r3, #24]
}
 800601e:	bf00      	nop
 8006020:	3770      	adds	r7, #112	@ 0x70
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	40008000 	.word	0x40008000

0800602c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b09c      	sub	sp, #112	@ 0x70
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800603a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006044:	2b22      	cmp	r3, #34	@ 0x22
 8006046:	f040 80be 	bne.w	80061c6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006050:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006058:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800605a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800605e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006062:	4013      	ands	r3, r2
 8006064:	b29a      	uxth	r2, r3
 8006066:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006068:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800606e:	1c9a      	adds	r2, r3, #2
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800608c:	b29b      	uxth	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	f040 80a3 	bne.w	80061da <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80060a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80060b4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80060b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80060c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e6      	bne.n	8006094 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3308      	adds	r3, #8
 80060cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d8:	f023 0301 	bic.w	r3, r3, #1
 80060dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3308      	adds	r3, #8
 80060e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80060e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80060e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060ee:	e841 2300 	strex	r3, r2, [r1]
 80060f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1e5      	bne.n	80060c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2220      	movs	r2, #32
 80060fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a34      	ldr	r2, [pc, #208]	@ (80061e4 <UART_RxISR_16BIT+0x1b8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d01f      	beq.n	8006158 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d018      	beq.n	8006158 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	e853 3f00 	ldrex	r3, [r3]
 8006132:	61fb      	str	r3, [r7, #28]
   return(result);
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800613a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006146:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006148:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800614a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800614c:	e841 2300 	strex	r3, r2, [r1]
 8006150:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e6      	bne.n	8006126 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800615c:	2b01      	cmp	r3, #1
 800615e:	d12e      	bne.n	80061be <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	e853 3f00 	ldrex	r3, [r3]
 8006172:	60bb      	str	r3, [r7, #8]
   return(result);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f023 0310 	bic.w	r3, r3, #16
 800617a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006184:	61bb      	str	r3, [r7, #24]
 8006186:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	6979      	ldr	r1, [r7, #20]
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	e841 2300 	strex	r3, r2, [r1]
 8006190:	613b      	str	r3, [r7, #16]
   return(result);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e6      	bne.n	8006166 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	f003 0310 	and.w	r3, r3, #16
 80061a2:	2b10      	cmp	r3, #16
 80061a4:	d103      	bne.n	80061ae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2210      	movs	r2, #16
 80061ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80061b4:	4619      	mov	r1, r3
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fb f8fc 	bl	80013b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061bc:	e00d      	b.n	80061da <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fe fe48 	bl	8004e54 <HAL_UART_RxCpltCallback>
}
 80061c4:	e009      	b.n	80061da <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	8b1b      	ldrh	r3, [r3, #24]
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0208 	orr.w	r2, r2, #8
 80061d6:	b292      	uxth	r2, r2
 80061d8:	831a      	strh	r2, [r3, #24]
}
 80061da:	bf00      	nop
 80061dc:	3770      	adds	r7, #112	@ 0x70
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	40008000 	.word	0x40008000

080061e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08c      	sub	sp, #48	@ 0x30
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	4613      	mov	r3, r2
 8006208:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006210:	2b20      	cmp	r3, #32
 8006212:	d142      	bne.n	800629a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800621a:	88fb      	ldrh	r3, [r7, #6]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e03b      	b.n	800629c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006230:	88fb      	ldrh	r3, [r7, #6]
 8006232:	461a      	mov	r2, r3
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f7ff fb60 	bl	80058fc <UART_Start_Receive_DMA>
 800623c:	4603      	mov	r3, r0
 800623e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006242:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006246:	2b00      	cmp	r3, #0
 8006248:	d124      	bne.n	8006294 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800624e:	2b01      	cmp	r3, #1
 8006250:	d11d      	bne.n	800628e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2210      	movs	r2, #16
 8006258:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	e853 3f00 	ldrex	r3, [r3]
 8006266:	617b      	str	r3, [r7, #20]
   return(result);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f043 0310 	orr.w	r3, r3, #16
 800626e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	461a      	mov	r2, r3
 8006276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006278:	627b      	str	r3, [r7, #36]	@ 0x24
 800627a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627c:	6a39      	ldr	r1, [r7, #32]
 800627e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006280:	e841 2300 	strex	r3, r2, [r1]
 8006284:	61fb      	str	r3, [r7, #28]
   return(result);
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e6      	bne.n	800625a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800628c:	e002      	b.n	8006294 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006294:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006298:	e000      	b.n	800629c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800629a:	2302      	movs	r3, #2
  }
}
 800629c:	4618      	mov	r0, r3
 800629e:	3730      	adds	r7, #48	@ 0x30
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param huart Pointer to uart handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, UART_HandleTypeDef *huart) {
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
	GNSS->huart = huart;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	601a      	str	r2, [r3, #0]
	GNSS->year = 0;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = 0;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = 0;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = 0;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = 0;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = 0;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	GNSS->fixType = 0;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
	GNSS->lon = 0;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	679a      	str	r2, [r3, #120]	@ 0x78
	GNSS->lat = 0;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	GNSS->height = 0;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	GNSS->hMSL = 0;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	GNSS->hAcc = 0;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	GNSS->vAcc = 0;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	GNSS->gSpeed = 0;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	GNSS->headMot = 0;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <GNSS_ParseBuffer>:

/*!
 * Searching for a header in data buffer and matching class and message ID to buffer data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseBuffer(GNSS_StateHandle *GNSS) {
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]

	for (int var = 0; var <= 100; ++var) {
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
 8006342:	e057      	b.n	80063f4 <GNSS_ParseBuffer+0xbe>
		if (GNSS->uartWorkingBuffer[var] == 0xB5
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4413      	add	r3, r2
 800634a:	3308      	adds	r3, #8
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2bb5      	cmp	r3, #181	@ 0xb5
 8006350:	d14d      	bne.n	80063ee <GNSS_ParseBuffer+0xb8>
				&& GNSS->uartWorkingBuffer[var + 1] == 0x62) {
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3301      	adds	r3, #1
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	4413      	add	r3, r2
 800635a:	7a1b      	ldrb	r3, [r3, #8]
 800635c:	2b62      	cmp	r3, #98	@ 0x62
 800635e:	d146      	bne.n	80063ee <GNSS_ParseBuffer+0xb8>
			if (GNSS->uartWorkingBuffer[var + 2] == 0x27
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	3302      	adds	r3, #2
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	4413      	add	r3, r2
 8006368:	7a1b      	ldrb	r3, [r3, #8]
 800636a:	2b27      	cmp	r3, #39	@ 0x27
 800636c:	d10a      	bne.n	8006384 <GNSS_ParseBuffer+0x4e>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x03) { //Look at: 32.19.1.1 u-blox 8 Receiver description
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3303      	adds	r3, #3
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	4413      	add	r3, r2
 8006376:	7a1b      	ldrb	r3, [r3, #8]
 8006378:	2b03      	cmp	r3, #3
 800637a:	d103      	bne.n	8006384 <GNSS_ParseBuffer+0x4e>
				GNSS_ParseUniqID(GNSS);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f875 	bl	800646c <GNSS_ParseUniqID>
 8006382:	e034      	b.n	80063ee <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3302      	adds	r3, #2
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	4413      	add	r3, r2
 800638c:	7a1b      	ldrb	r3, [r3, #8]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d10a      	bne.n	80063a8 <GNSS_ParseBuffer+0x72>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x21) { //Look at: 32.17.14.1 u-blox 8 Receiver description
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3303      	adds	r3, #3
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	4413      	add	r3, r2
 800639a:	7a1b      	ldrb	r3, [r3, #8]
 800639c:	2b21      	cmp	r3, #33	@ 0x21
 800639e:	d103      	bne.n	80063a8 <GNSS_ParseBuffer+0x72>
				GNSS_ParseNavigatorData(GNSS);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fa7d 	bl	80068a0 <GNSS_ParseNavigatorData>
 80063a6:	e022      	b.n	80063ee <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3302      	adds	r3, #2
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	4413      	add	r3, r2
 80063b0:	7a1b      	ldrb	r3, [r3, #8]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d10a      	bne.n	80063cc <GNSS_ParseBuffer+0x96>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x07) { //ook at: 32.17.30.1 u-blox 8 Receiver description
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	3303      	adds	r3, #3
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	4413      	add	r3, r2
 80063be:	7a1b      	ldrb	r3, [r3, #8]
 80063c0:	2b07      	cmp	r3, #7
 80063c2:	d103      	bne.n	80063cc <GNSS_ParseBuffer+0x96>
				GNSS_ParsePVTData(GNSS);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f907 	bl	80065d8 <GNSS_ParsePVTData>
 80063ca:	e010      	b.n	80063ee <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3302      	adds	r3, #2
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	4413      	add	r3, r2
 80063d4:	7a1b      	ldrb	r3, [r3, #8]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d109      	bne.n	80063ee <GNSS_ParseBuffer+0xb8>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x02) { // Look at: 32.17.15.1 u-blox 8 Receiver description
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	3303      	adds	r3, #3
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	4413      	add	r3, r2
 80063e2:	7a1b      	ldrb	r3, [r3, #8]
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d102      	bne.n	80063ee <GNSS_ParseBuffer+0xb8>
				GNSS_ParsePOSLLHData(GNSS);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fa8f 	bl	800690c <GNSS_ParsePOSLLHData>
	for (int var = 0; var <= 100; ++var) {
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3301      	adds	r3, #1
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b64      	cmp	r3, #100	@ 0x64
 80063f8:	dda4      	ble.n	8006344 <GNSS_ParseBuffer+0xe>
			}
		}
	}
}
 80063fa:	bf00      	nop
 80063fc:	bf00      	nop
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <GNSS_GetUniqID>:

/*!
 * Make request for unique chip ID data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetUniqID(GNSS_StateHandle *GNSS) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, getDeviceID,
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2208      	movs	r2, #8
 8006412:	4907      	ldr	r1, [pc, #28]	@ (8006430 <GNSS_GetUniqID+0x2c>)
 8006414:	4618      	mov	r0, r3
 8006416:	f7fe f8d5 	bl	80045c4 <HAL_UART_Transmit_DMA>
			sizeof(getDeviceID) / sizeof(uint8_t));
	HAL_UART_Receive_IT(GNSS->huart, GNSS_Handle.uartWorkingBuffer, 17);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2211      	movs	r2, #17
 8006420:	4904      	ldr	r1, [pc, #16]	@ (8006434 <GNSS_GetUniqID+0x30>)
 8006422:	4618      	mov	r0, r3
 8006424:	f7fe f882 	bl	800452c <HAL_UART_Receive_IT>
}
 8006428:	bf00      	nop
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	08006c30 	.word	0x08006c30
 8006434:	2000012c 	.word	0x2000012c

08006438 <GNSS_GetPVTData>:

/*!
 * Make request for navigation position velocity time solution data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetPVTData(GNSS_StateHandle *GNSS) {
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, getPVTData,
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2208      	movs	r2, #8
 8006446:	4907      	ldr	r1, [pc, #28]	@ (8006464 <GNSS_GetPVTData+0x2c>)
 8006448:	4618      	mov	r0, r3
 800644a:	f7fe f8bb 	bl	80045c4 <HAL_UART_Transmit_DMA>
			sizeof(getPVTData) / sizeof(uint8_t));
	HAL_UART_Receive_IT(GNSS->huart, GNSS_Handle.uartWorkingBuffer, 100);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2264      	movs	r2, #100	@ 0x64
 8006454:	4904      	ldr	r1, [pc, #16]	@ (8006468 <GNSS_GetPVTData+0x30>)
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe f868 	bl	800452c <HAL_UART_Receive_IT>
}
 800645c:	bf00      	nop
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	08006c38 	.word	0x08006c38
 8006468:	2000012c 	.word	0x2000012c

0800646c <GNSS_ParseUniqID>:
/*!
 * Parse data to unique chip ID standard.
 * Look at: 32.19.1.1 u-blox 8 Receiver description
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseUniqID(GNSS_StateHandle *GNSS) {
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 5; ++var) {
 8006474:	2300      	movs	r3, #0
 8006476:	60fb      	str	r3, [r7, #12]
 8006478:	e00d      	b.n	8006496 <GNSS_ParseUniqID+0x2a>
		GNSS->uniqueID[var] = GNSS_Handle.uartWorkingBuffer[10 + var];
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	330a      	adds	r3, #10
 800647e:	4a0b      	ldr	r2, [pc, #44]	@ (80064ac <GNSS_ParseUniqID+0x40>)
 8006480:	4413      	add	r3, r2
 8006482:	7a19      	ldrb	r1, [r3, #8]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	4413      	add	r3, r2
 800648a:	3304      	adds	r3, #4
 800648c:	460a      	mov	r2, r1
 800648e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 5; ++var) {
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	3301      	adds	r3, #1
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b04      	cmp	r3, #4
 800649a:	ddee      	ble.n	800647a <GNSS_ParseUniqID+0xe>
	}
}
 800649c:	bf00      	nop
 800649e:	bf00      	nop
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	20000124 	.word	0x20000124

080064b0 <GNSS_SetMode>:

/*!
 * Changing the GNSS mode.
 * Look at: 32.10.19 u-blox 8 Receiver description
 */
void GNSS_SetMode(GNSS_StateHandle *GNSS, short gnssMode) {
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	460b      	mov	r3, r1
 80064ba:	807b      	strh	r3, [r7, #2]
	if (gnssMode == 0) {
 80064bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d107      	bne.n	80064d4 <GNSS_SetMode+0x24>
		HAL_UART_Transmit_DMA(GNSS->huart, setPortableMode,sizeof(setPortableMode) / sizeof(uint8_t));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	222c      	movs	r2, #44	@ 0x2c
 80064ca:	493a      	ldr	r1, [pc, #232]	@ (80065b4 <GNSS_SetMode+0x104>)
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fe f879 	bl	80045c4 <HAL_UART_Transmit_DMA>
	} else if (gnssMode == 8) {
		HAL_UART_Transmit_DMA(GNSS->huart, setWirstMode,sizeof(setWirstMode) / sizeof(uint8_t));
	} else if (gnssMode == 9) {
		HAL_UART_Transmit_DMA(GNSS->huart, setBikeMode,sizeof(setBikeMode) / sizeof(uint8_t));
	}
}
 80064d2:	e06a      	b.n	80065aa <GNSS_SetMode+0xfa>
	} else if (gnssMode == 1) {
 80064d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d107      	bne.n	80064ec <GNSS_SetMode+0x3c>
		HAL_UART_Transmit_DMA(GNSS->huart, setStationaryMode,sizeof(setStationaryMode) / sizeof(uint8_t));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	222c      	movs	r2, #44	@ 0x2c
 80064e2:	4935      	ldr	r1, [pc, #212]	@ (80065b8 <GNSS_SetMode+0x108>)
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fe f86d 	bl	80045c4 <HAL_UART_Transmit_DMA>
}
 80064ea:	e05e      	b.n	80065aa <GNSS_SetMode+0xfa>
	} else if (gnssMode == 2) {
 80064ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d107      	bne.n	8006504 <GNSS_SetMode+0x54>
		HAL_UART_Transmit_DMA(GNSS->huart, setPedestrianMode,sizeof(setPedestrianMode) / sizeof(uint8_t));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	222c      	movs	r2, #44	@ 0x2c
 80064fa:	4930      	ldr	r1, [pc, #192]	@ (80065bc <GNSS_SetMode+0x10c>)
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fe f861 	bl	80045c4 <HAL_UART_Transmit_DMA>
}
 8006502:	e052      	b.n	80065aa <GNSS_SetMode+0xfa>
	} else if (gnssMode == 3) {
 8006504:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006508:	2b03      	cmp	r3, #3
 800650a:	d107      	bne.n	800651c <GNSS_SetMode+0x6c>
		HAL_UART_Transmit_DMA(GNSS->huart, setAutomotiveMode,sizeof(setAutomotiveMode) / sizeof(uint8_t));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	222c      	movs	r2, #44	@ 0x2c
 8006512:	492b      	ldr	r1, [pc, #172]	@ (80065c0 <GNSS_SetMode+0x110>)
 8006514:	4618      	mov	r0, r3
 8006516:	f7fe f855 	bl	80045c4 <HAL_UART_Transmit_DMA>
}
 800651a:	e046      	b.n	80065aa <GNSS_SetMode+0xfa>
	} else if (gnssMode == 4) {
 800651c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006520:	2b04      	cmp	r3, #4
 8006522:	d107      	bne.n	8006534 <GNSS_SetMode+0x84>
		HAL_UART_Transmit_DMA(GNSS->huart, setAutomotiveMode,sizeof(setAutomotiveMode) / sizeof(uint8_t));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	222c      	movs	r2, #44	@ 0x2c
 800652a:	4925      	ldr	r1, [pc, #148]	@ (80065c0 <GNSS_SetMode+0x110>)
 800652c:	4618      	mov	r0, r3
 800652e:	f7fe f849 	bl	80045c4 <HAL_UART_Transmit_DMA>
}
 8006532:	e03a      	b.n	80065aa <GNSS_SetMode+0xfa>
	} else if (gnssMode == 5) {
 8006534:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006538:	2b05      	cmp	r3, #5
 800653a:	d107      	bne.n	800654c <GNSS_SetMode+0x9c>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone1GMode,sizeof(setAirbone1GMode) / sizeof(uint8_t));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	222c      	movs	r2, #44	@ 0x2c
 8006542:	4920      	ldr	r1, [pc, #128]	@ (80065c4 <GNSS_SetMode+0x114>)
 8006544:	4618      	mov	r0, r3
 8006546:	f7fe f83d 	bl	80045c4 <HAL_UART_Transmit_DMA>
}
 800654a:	e02e      	b.n	80065aa <GNSS_SetMode+0xfa>
	} else if (gnssMode == 6) {
 800654c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006550:	2b06      	cmp	r3, #6
 8006552:	d107      	bne.n	8006564 <GNSS_SetMode+0xb4>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone2GMode,sizeof(setAirbone2GMode) / sizeof(uint8_t));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	222c      	movs	r2, #44	@ 0x2c
 800655a:	491b      	ldr	r1, [pc, #108]	@ (80065c8 <GNSS_SetMode+0x118>)
 800655c:	4618      	mov	r0, r3
 800655e:	f7fe f831 	bl	80045c4 <HAL_UART_Transmit_DMA>
}
 8006562:	e022      	b.n	80065aa <GNSS_SetMode+0xfa>
	} else if (gnssMode == 7) {
 8006564:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006568:	2b07      	cmp	r3, #7
 800656a:	d107      	bne.n	800657c <GNSS_SetMode+0xcc>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone4GMode,sizeof(setAirbone4GMode) / sizeof(uint8_t));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	222c      	movs	r2, #44	@ 0x2c
 8006572:	4916      	ldr	r1, [pc, #88]	@ (80065cc <GNSS_SetMode+0x11c>)
 8006574:	4618      	mov	r0, r3
 8006576:	f7fe f825 	bl	80045c4 <HAL_UART_Transmit_DMA>
}
 800657a:	e016      	b.n	80065aa <GNSS_SetMode+0xfa>
	} else if (gnssMode == 8) {
 800657c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006580:	2b08      	cmp	r3, #8
 8006582:	d107      	bne.n	8006594 <GNSS_SetMode+0xe4>
		HAL_UART_Transmit_DMA(GNSS->huart, setWirstMode,sizeof(setWirstMode) / sizeof(uint8_t));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	222c      	movs	r2, #44	@ 0x2c
 800658a:	4911      	ldr	r1, [pc, #68]	@ (80065d0 <GNSS_SetMode+0x120>)
 800658c:	4618      	mov	r0, r3
 800658e:	f7fe f819 	bl	80045c4 <HAL_UART_Transmit_DMA>
}
 8006592:	e00a      	b.n	80065aa <GNSS_SetMode+0xfa>
	} else if (gnssMode == 9) {
 8006594:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006598:	2b09      	cmp	r3, #9
 800659a:	d106      	bne.n	80065aa <GNSS_SetMode+0xfa>
		HAL_UART_Transmit_DMA(GNSS->huart, setBikeMode,sizeof(setBikeMode) / sizeof(uint8_t));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	222c      	movs	r2, #44	@ 0x2c
 80065a2:	490c      	ldr	r1, [pc, #48]	@ (80065d4 <GNSS_SetMode+0x124>)
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fe f80d 	bl	80045c4 <HAL_UART_Transmit_DMA>
}
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	08006c40 	.word	0x08006c40
 80065b8:	08006c6c 	.word	0x08006c6c
 80065bc:	08006c98 	.word	0x08006c98
 80065c0:	08006cc4 	.word	0x08006cc4
 80065c4:	08006cf0 	.word	0x08006cf0
 80065c8:	08006d1c 	.word	0x08006d1c
 80065cc:	08006d48 	.word	0x08006d48
 80065d0:	08006d74 	.word	0x08006d74
 80065d4:	08006da0 	.word	0x08006da0

080065d8 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08a      	sub	sp, #40	@ 0x28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS_Handle.uartWorkingBuffer[10];
 80065e0:	4b92      	ldr	r3, [pc, #584]	@ (800682c <GNSS_ParsePVTData+0x254>)
 80065e2:	7c9a      	ldrb	r2, [r3, #18]
 80065e4:	4b92      	ldr	r3, [pc, #584]	@ (8006830 <GNSS_ParsePVTData+0x258>)
 80065e6:	701a      	strb	r2, [r3, #0]
	GNSS->yearBytes[0]=GNSS_Handle.uartWorkingBuffer[10];
 80065e8:	4b90      	ldr	r3, [pc, #576]	@ (800682c <GNSS_ParsePVTData+0x254>)
 80065ea:	7c9a      	ldrb	r2, [r3, #18]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	uShort.bytes[1] = GNSS_Handle.uartWorkingBuffer[11];
 80065f2:	4b8e      	ldr	r3, [pc, #568]	@ (800682c <GNSS_ParsePVTData+0x254>)
 80065f4:	7cda      	ldrb	r2, [r3, #19]
 80065f6:	4b8e      	ldr	r3, [pc, #568]	@ (8006830 <GNSS_ParsePVTData+0x258>)
 80065f8:	705a      	strb	r2, [r3, #1]
	GNSS->yearBytes[1]=GNSS_Handle.uartWorkingBuffer[11];
 80065fa:	4b8c      	ldr	r3, [pc, #560]	@ (800682c <GNSS_ParsePVTData+0x254>)
 80065fc:	7cda      	ldrb	r2, [r3, #19]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	GNSS->year = uShort.uShort;
 8006604:	4b8a      	ldr	r3, [pc, #552]	@ (8006830 <GNSS_ParsePVTData+0x258>)
 8006606:	881a      	ldrh	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = GNSS_Handle.uartWorkingBuffer[12];
 800660e:	4b87      	ldr	r3, [pc, #540]	@ (800682c <GNSS_ParsePVTData+0x254>)
 8006610:	7d1a      	ldrb	r2, [r3, #20]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = GNSS_Handle.uartWorkingBuffer[13];
 8006618:	4b84      	ldr	r3, [pc, #528]	@ (800682c <GNSS_ParsePVTData+0x254>)
 800661a:	7d5a      	ldrb	r2, [r3, #21]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = GNSS_Handle.uartWorkingBuffer[14];
 8006622:	4b82      	ldr	r3, [pc, #520]	@ (800682c <GNSS_ParsePVTData+0x254>)
 8006624:	7d9a      	ldrb	r2, [r3, #22]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = GNSS_Handle.uartWorkingBuffer[15];
 800662c:	4b7f      	ldr	r3, [pc, #508]	@ (800682c <GNSS_ParsePVTData+0x254>)
 800662e:	7dda      	ldrb	r2, [r3, #23]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = GNSS_Handle.uartWorkingBuffer[16];
 8006636:	4b7d      	ldr	r3, [pc, #500]	@ (800682c <GNSS_ParsePVTData+0x254>)
 8006638:	7e1a      	ldrb	r2, [r3, #24]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	GNSS->fixType = GNSS_Handle.uartWorkingBuffer[26];
 8006640:	4b7a      	ldr	r3, [pc, #488]	@ (800682c <GNSS_ParsePVTData+0x254>)
 8006642:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77

	for (int var = 0; var < 4; ++var) {
 800664c:	2300      	movs	r3, #0
 800664e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006650:	e017      	b.n	8006682 <GNSS_ParsePVTData+0xaa>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 30];
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	331e      	adds	r3, #30
 8006656:	4a75      	ldr	r2, [pc, #468]	@ (800682c <GNSS_ParsePVTData+0x254>)
 8006658:	4413      	add	r3, r2
 800665a:	7a19      	ldrb	r1, [r3, #8]
 800665c:	4a75      	ldr	r2, [pc, #468]	@ (8006834 <GNSS_ParsePVTData+0x25c>)
 800665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006660:	4413      	add	r3, r2
 8006662:	460a      	mov	r2, r1
 8006664:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= GNSS_Handle.uartWorkingBuffer[var + 30];
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	331e      	adds	r3, #30
 800666a:	4a70      	ldr	r2, [pc, #448]	@ (800682c <GNSS_ParsePVTData+0x254>)
 800666c:	4413      	add	r3, r2
 800666e:	7a19      	ldrb	r1, [r3, #8]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006674:	4413      	add	r3, r2
 8006676:	337c      	adds	r3, #124	@ 0x7c
 8006678:	460a      	mov	r2, r1
 800667a:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800667c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667e:	3301      	adds	r3, #1
 8006680:	627b      	str	r3, [r7, #36]	@ 0x24
 8006682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006684:	2b03      	cmp	r3, #3
 8006686:	dde4      	ble.n	8006652 <GNSS_ParsePVTData+0x7a>
	}
	GNSS->lon = iLong.iLong;
 8006688:	4b6a      	ldr	r3, [pc, #424]	@ (8006834 <GNSS_ParsePVTData+0x25c>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	679a      	str	r2, [r3, #120]	@ 0x78
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 8006690:	4b68      	ldr	r3, [pc, #416]	@ (8006834 <GNSS_ParsePVTData+0x25c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	ee07 3a90 	vmov	s15, r3
 8006698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800669c:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8006838 <GNSS_ParsePVTData+0x260>
 80066a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
	for (int var = 0; var < 4; ++var) {
 80066aa:	2300      	movs	r3, #0
 80066ac:	623b      	str	r3, [r7, #32]
 80066ae:	e017      	b.n	80066e0 <GNSS_ParsePVTData+0x108>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 34];
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	3322      	adds	r3, #34	@ 0x22
 80066b4:	4a5d      	ldr	r2, [pc, #372]	@ (800682c <GNSS_ParsePVTData+0x254>)
 80066b6:	4413      	add	r3, r2
 80066b8:	7a19      	ldrb	r1, [r3, #8]
 80066ba:	4a5e      	ldr	r2, [pc, #376]	@ (8006834 <GNSS_ParsePVTData+0x25c>)
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	4413      	add	r3, r2
 80066c0:	460a      	mov	r2, r1
 80066c2:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]=GNSS_Handle.uartWorkingBuffer[var + 34];
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	3322      	adds	r3, #34	@ 0x22
 80066c8:	4a58      	ldr	r2, [pc, #352]	@ (800682c <GNSS_ParsePVTData+0x254>)
 80066ca:	4413      	add	r3, r2
 80066cc:	7a19      	ldrb	r1, [r3, #8]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	4413      	add	r3, r2
 80066d4:	3384      	adds	r3, #132	@ 0x84
 80066d6:	460a      	mov	r2, r1
 80066d8:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	3301      	adds	r3, #1
 80066de:	623b      	str	r3, [r7, #32]
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	dde4      	ble.n	80066b0 <GNSS_ParsePVTData+0xd8>
	}
	GNSS->lat = iLong.iLong;
 80066e6:	4b53      	ldr	r3, [pc, #332]	@ (8006834 <GNSS_ParsePVTData+0x25c>)
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 80066f0:	4b50      	ldr	r3, [pc, #320]	@ (8006834 <GNSS_ParsePVTData+0x25c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	ee07 3a90 	vmov	s15, r3
 80066f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066fc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006838 <GNSS_ParsePVTData+0x260>
 8006700:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
	for (int var = 0; var < 4; ++var) {
 800670a:	2300      	movs	r3, #0
 800670c:	61fb      	str	r3, [r7, #28]
 800670e:	e00c      	b.n	800672a <GNSS_ParsePVTData+0x152>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 38];
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	3326      	adds	r3, #38	@ 0x26
 8006714:	4a45      	ldr	r2, [pc, #276]	@ (800682c <GNSS_ParsePVTData+0x254>)
 8006716:	4413      	add	r3, r2
 8006718:	7a19      	ldrb	r1, [r3, #8]
 800671a:	4a46      	ldr	r2, [pc, #280]	@ (8006834 <GNSS_ParsePVTData+0x25c>)
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	4413      	add	r3, r2
 8006720:	460a      	mov	r2, r1
 8006722:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	3301      	adds	r3, #1
 8006728:	61fb      	str	r3, [r7, #28]
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	2b03      	cmp	r3, #3
 800672e:	ddef      	ble.n	8006710 <GNSS_ParsePVTData+0x138>
	}
	GNSS->height = iLong.iLong;
 8006730:	4b40      	ldr	r3, [pc, #256]	@ (8006834 <GNSS_ParsePVTData+0x25c>)
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

	for (int var = 0; var < 4; ++var) {
 800673a:	2300      	movs	r3, #0
 800673c:	61bb      	str	r3, [r7, #24]
 800673e:	e017      	b.n	8006770 <GNSS_ParsePVTData+0x198>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 42];
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	332a      	adds	r3, #42	@ 0x2a
 8006744:	4a39      	ldr	r2, [pc, #228]	@ (800682c <GNSS_ParsePVTData+0x254>)
 8006746:	4413      	add	r3, r2
 8006748:	7a19      	ldrb	r1, [r3, #8]
 800674a:	4a3a      	ldr	r2, [pc, #232]	@ (8006834 <GNSS_ParsePVTData+0x25c>)
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	4413      	add	r3, r2
 8006750:	460a      	mov	r2, r1
 8006752:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = GNSS_Handle.uartWorkingBuffer[var + 42];
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	332a      	adds	r3, #42	@ 0x2a
 8006758:	4a34      	ldr	r2, [pc, #208]	@ (800682c <GNSS_ParsePVTData+0x254>)
 800675a:	4413      	add	r3, r2
 800675c:	7a19      	ldrb	r1, [r3, #8]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	4413      	add	r3, r2
 8006764:	3398      	adds	r3, #152	@ 0x98
 8006766:	460a      	mov	r2, r1
 8006768:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	3301      	adds	r3, #1
 800676e:	61bb      	str	r3, [r7, #24]
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2b03      	cmp	r3, #3
 8006774:	dde4      	ble.n	8006740 <GNSS_ParsePVTData+0x168>
	}
	GNSS->hMSL = iLong.iLong;
 8006776:	4b2f      	ldr	r3, [pc, #188]	@ (8006834 <GNSS_ParsePVTData+0x25c>)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	for (int var = 0; var < 4; ++var) {
 8006780:	2300      	movs	r3, #0
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	e00c      	b.n	80067a0 <GNSS_ParsePVTData+0x1c8>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 46];
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	332e      	adds	r3, #46	@ 0x2e
 800678a:	4a28      	ldr	r2, [pc, #160]	@ (800682c <GNSS_ParsePVTData+0x254>)
 800678c:	4413      	add	r3, r2
 800678e:	7a19      	ldrb	r1, [r3, #8]
 8006790:	4a2a      	ldr	r2, [pc, #168]	@ (800683c <GNSS_ParsePVTData+0x264>)
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	4413      	add	r3, r2
 8006796:	460a      	mov	r2, r1
 8006798:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	3301      	adds	r3, #1
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	ddef      	ble.n	8006786 <GNSS_ParsePVTData+0x1ae>
	}
	GNSS->hAcc = uLong.uLong;
 80067a6:	4b25      	ldr	r3, [pc, #148]	@ (800683c <GNSS_ParsePVTData+0x264>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	for (int var = 0; var < 4; ++var) {
 80067b0:	2300      	movs	r3, #0
 80067b2:	613b      	str	r3, [r7, #16]
 80067b4:	e00c      	b.n	80067d0 <GNSS_ParsePVTData+0x1f8>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 50];
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	3332      	adds	r3, #50	@ 0x32
 80067ba:	4a1c      	ldr	r2, [pc, #112]	@ (800682c <GNSS_ParsePVTData+0x254>)
 80067bc:	4413      	add	r3, r2
 80067be:	7a19      	ldrb	r1, [r3, #8]
 80067c0:	4a1e      	ldr	r2, [pc, #120]	@ (800683c <GNSS_ParsePVTData+0x264>)
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	4413      	add	r3, r2
 80067c6:	460a      	mov	r2, r1
 80067c8:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	3301      	adds	r3, #1
 80067ce:	613b      	str	r3, [r7, #16]
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	ddef      	ble.n	80067b6 <GNSS_ParsePVTData+0x1de>
	}
	GNSS->vAcc = uLong.uLong;
 80067d6:	4b19      	ldr	r3, [pc, #100]	@ (800683c <GNSS_ParsePVTData+0x264>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

	for (int var = 0; var < 4; ++var) {
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]
 80067e4:	e017      	b.n	8006816 <GNSS_ParsePVTData+0x23e>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 66];
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3342      	adds	r3, #66	@ 0x42
 80067ea:	4a10      	ldr	r2, [pc, #64]	@ (800682c <GNSS_ParsePVTData+0x254>)
 80067ec:	4413      	add	r3, r2
 80067ee:	7a19      	ldrb	r1, [r3, #8]
 80067f0:	4a10      	ldr	r2, [pc, #64]	@ (8006834 <GNSS_ParsePVTData+0x25c>)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	4413      	add	r3, r2
 80067f6:	460a      	mov	r2, r1
 80067f8:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = GNSS_Handle.uartWorkingBuffer[var + 66];
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3342      	adds	r3, #66	@ 0x42
 80067fe:	4a0b      	ldr	r2, [pc, #44]	@ (800682c <GNSS_ParsePVTData+0x254>)
 8006800:	4413      	add	r3, r2
 8006802:	7a19      	ldrb	r1, [r3, #8]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4413      	add	r3, r2
 800680a:	33a8      	adds	r3, #168	@ 0xa8
 800680c:	460a      	mov	r2, r1
 800680e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3301      	adds	r3, #1
 8006814:	60fb      	str	r3, [r7, #12]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b03      	cmp	r3, #3
 800681a:	dde4      	ble.n	80067e6 <GNSS_ParsePVTData+0x20e>
	}
	GNSS->gSpeed = iLong.iLong;
 800681c:	4b05      	ldr	r3, [pc, #20]	@ (8006834 <GNSS_ParsePVTData+0x25c>)
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	for (int var = 0; var < 4; ++var) {
 8006826:	2300      	movs	r3, #0
 8006828:	60bb      	str	r3, [r7, #8]
 800682a:	e016      	b.n	800685a <GNSS_ParsePVTData+0x282>
 800682c:	20000124 	.word	0x20000124
 8006830:	20000748 	.word	0x20000748
 8006834:	20000750 	.word	0x20000750
 8006838:	4b189680 	.word	0x4b189680
 800683c:	2000074c 	.word	0x2000074c
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 70];
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	3346      	adds	r3, #70	@ 0x46
 8006844:	4a14      	ldr	r2, [pc, #80]	@ (8006898 <GNSS_ParsePVTData+0x2c0>)
 8006846:	4413      	add	r3, r2
 8006848:	7a19      	ldrb	r1, [r3, #8]
 800684a:	4a14      	ldr	r2, [pc, #80]	@ (800689c <GNSS_ParsePVTData+0x2c4>)
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	4413      	add	r3, r2
 8006850:	460a      	mov	r2, r1
 8006852:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	3301      	adds	r3, #1
 8006858:	60bb      	str	r3, [r7, #8]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b03      	cmp	r3, #3
 800685e:	ddef      	ble.n	8006840 <GNSS_ParsePVTData+0x268>
	}
	GNSS->headMot = iLong.iLong * 1e-5; // todo I'm not sure this good options.
 8006860:	4b0e      	ldr	r3, [pc, #56]	@ (800689c <GNSS_ParsePVTData+0x2c4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4618      	mov	r0, r3
 8006866:	f7f9 fe01 	bl	800046c <__aeabi_i2d>
 800686a:	a309      	add	r3, pc, #36	@ (adr r3, 8006890 <GNSS_ParsePVTData+0x2b8>)
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	f7f9 fe66 	bl	8000540 <__aeabi_dmul>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4610      	mov	r0, r2
 800687a:	4619      	mov	r1, r3
 800687c:	f7fa f872 	bl	8000964 <__aeabi_d2iz>
 8006880:	4602      	mov	r2, r0
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
 8006888:	bf00      	nop
 800688a:	3728      	adds	r7, #40	@ 0x28
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	88e368f1 	.word	0x88e368f1
 8006894:	3ee4f8b5 	.word	0x3ee4f8b5
 8006898:	20000124 	.word	0x20000124
 800689c:	20000750 	.word	0x20000750

080068a0 <GNSS_ParseNavigatorData>:
/*!
 * Parse data to UTC time solution standard.
 * Look at: 32.17.30.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseNavigatorData(GNSS_StateHandle *GNSS) {
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS_Handle.uartWorkingBuffer[18];
 80068a8:	4b16      	ldr	r3, [pc, #88]	@ (8006904 <GNSS_ParseNavigatorData+0x64>)
 80068aa:	7e9a      	ldrb	r2, [r3, #26]
 80068ac:	4b16      	ldr	r3, [pc, #88]	@ (8006908 <GNSS_ParseNavigatorData+0x68>)
 80068ae:	701a      	strb	r2, [r3, #0]
	uShort.bytes[1] = GNSS_Handle.uartWorkingBuffer[19];
 80068b0:	4b14      	ldr	r3, [pc, #80]	@ (8006904 <GNSS_ParseNavigatorData+0x64>)
 80068b2:	7eda      	ldrb	r2, [r3, #27]
 80068b4:	4b14      	ldr	r3, [pc, #80]	@ (8006908 <GNSS_ParseNavigatorData+0x68>)
 80068b6:	705a      	strb	r2, [r3, #1]
	GNSS->year = uShort.uShort;
 80068b8:	4b13      	ldr	r3, [pc, #76]	@ (8006908 <GNSS_ParseNavigatorData+0x68>)
 80068ba:	881a      	ldrh	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = GNSS_Handle.uartWorkingBuffer[20];
 80068c2:	4b10      	ldr	r3, [pc, #64]	@ (8006904 <GNSS_ParseNavigatorData+0x64>)
 80068c4:	7f1a      	ldrb	r2, [r3, #28]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = GNSS_Handle.uartWorkingBuffer[21];
 80068cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006904 <GNSS_ParseNavigatorData+0x64>)
 80068ce:	7f5a      	ldrb	r2, [r3, #29]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = GNSS_Handle.uartWorkingBuffer[22];
 80068d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006904 <GNSS_ParseNavigatorData+0x64>)
 80068d8:	7f9a      	ldrb	r2, [r3, #30]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = GNSS_Handle.uartWorkingBuffer[23];
 80068e0:	4b08      	ldr	r3, [pc, #32]	@ (8006904 <GNSS_ParseNavigatorData+0x64>)
 80068e2:	7fda      	ldrb	r2, [r3, #31]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = GNSS_Handle.uartWorkingBuffer[24];
 80068ea:	4b06      	ldr	r3, [pc, #24]	@ (8006904 <GNSS_ParseNavigatorData+0x64>)
 80068ec:	f893 2020 	ldrb.w	r2, [r3, #32]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	20000124 	.word	0x20000124
 8006908:	20000748 	.word	0x20000748

0800690c <GNSS_ParsePOSLLHData>:
/*!
 * Parse data to geodetic position solution standard.
 * Look at: 32.17.14.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePOSLLHData(GNSS_StateHandle *GNSS) {
 800690c:	b480      	push	{r7}
 800690e:	b089      	sub	sp, #36	@ 0x24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 4; ++var) {
 8006914:	2300      	movs	r3, #0
 8006916:	61fb      	str	r3, [r7, #28]
 8006918:	e00c      	b.n	8006934 <GNSS_ParsePOSLLHData+0x28>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 10];
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	330a      	adds	r3, #10
 800691e:	4a55      	ldr	r2, [pc, #340]	@ (8006a74 <GNSS_ParsePOSLLHData+0x168>)
 8006920:	4413      	add	r3, r2
 8006922:	7a19      	ldrb	r1, [r3, #8]
 8006924:	4a54      	ldr	r2, [pc, #336]	@ (8006a78 <GNSS_ParsePOSLLHData+0x16c>)
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	460a      	mov	r2, r1
 800692c:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	3301      	adds	r3, #1
 8006932:	61fb      	str	r3, [r7, #28]
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	2b03      	cmp	r3, #3
 8006938:	ddef      	ble.n	800691a <GNSS_ParsePOSLLHData+0xe>
	}
	GNSS->lon = iLong.iLong;
 800693a:	4b4f      	ldr	r3, [pc, #316]	@ (8006a78 <GNSS_ParsePOSLLHData+0x16c>)
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	679a      	str	r2, [r3, #120]	@ 0x78
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 8006942:	4b4d      	ldr	r3, [pc, #308]	@ (8006a78 <GNSS_ParsePOSLLHData+0x16c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	ee07 3a90 	vmov	s15, r3
 800694a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800694e:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8006a7c <GNSS_ParsePOSLLHData+0x170>
 8006952:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88

	for (int var = 0; var < 4; ++var) {
 800695c:	2300      	movs	r3, #0
 800695e:	61bb      	str	r3, [r7, #24]
 8006960:	e00c      	b.n	800697c <GNSS_ParsePOSLLHData+0x70>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 14];
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	330e      	adds	r3, #14
 8006966:	4a43      	ldr	r2, [pc, #268]	@ (8006a74 <GNSS_ParsePOSLLHData+0x168>)
 8006968:	4413      	add	r3, r2
 800696a:	7a19      	ldrb	r1, [r3, #8]
 800696c:	4a42      	ldr	r2, [pc, #264]	@ (8006a78 <GNSS_ParsePOSLLHData+0x16c>)
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	4413      	add	r3, r2
 8006972:	460a      	mov	r2, r1
 8006974:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	3301      	adds	r3, #1
 800697a:	61bb      	str	r3, [r7, #24]
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	2b03      	cmp	r3, #3
 8006980:	ddef      	ble.n	8006962 <GNSS_ParsePOSLLHData+0x56>
	}
	GNSS->lat = iLong.iLong;
 8006982:	4b3d      	ldr	r3, [pc, #244]	@ (8006a78 <GNSS_ParsePOSLLHData+0x16c>)
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 800698c:	4b3a      	ldr	r3, [pc, #232]	@ (8006a78 <GNSS_ParsePOSLLHData+0x16c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	ee07 3a90 	vmov	s15, r3
 8006994:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006998:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006a7c <GNSS_ParsePOSLLHData+0x170>
 800699c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c

	for (int var = 0; var < 4; ++var) {
 80069a6:	2300      	movs	r3, #0
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	e00c      	b.n	80069c6 <GNSS_ParsePOSLLHData+0xba>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 18];
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	3312      	adds	r3, #18
 80069b0:	4a30      	ldr	r2, [pc, #192]	@ (8006a74 <GNSS_ParsePOSLLHData+0x168>)
 80069b2:	4413      	add	r3, r2
 80069b4:	7a19      	ldrb	r1, [r3, #8]
 80069b6:	4a30      	ldr	r2, [pc, #192]	@ (8006a78 <GNSS_ParsePOSLLHData+0x16c>)
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	4413      	add	r3, r2
 80069bc:	460a      	mov	r2, r1
 80069be:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	3301      	adds	r3, #1
 80069c4:	617b      	str	r3, [r7, #20]
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	ddef      	ble.n	80069ac <GNSS_ParsePOSLLHData+0xa0>
	}
	GNSS->height = iLong.iLong;
 80069cc:	4b2a      	ldr	r3, [pc, #168]	@ (8006a78 <GNSS_ParsePOSLLHData+0x16c>)
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

	for (int var = 0; var < 4; ++var) {
 80069d6:	2300      	movs	r3, #0
 80069d8:	613b      	str	r3, [r7, #16]
 80069da:	e00c      	b.n	80069f6 <GNSS_ParsePOSLLHData+0xea>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 22];
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	3316      	adds	r3, #22
 80069e0:	4a24      	ldr	r2, [pc, #144]	@ (8006a74 <GNSS_ParsePOSLLHData+0x168>)
 80069e2:	4413      	add	r3, r2
 80069e4:	7a19      	ldrb	r1, [r3, #8]
 80069e6:	4a24      	ldr	r2, [pc, #144]	@ (8006a78 <GNSS_ParsePOSLLHData+0x16c>)
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	4413      	add	r3, r2
 80069ec:	460a      	mov	r2, r1
 80069ee:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	3301      	adds	r3, #1
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	ddef      	ble.n	80069dc <GNSS_ParsePOSLLHData+0xd0>
	}
	GNSS->hMSL = iLong.iLong;
 80069fc:	4b1e      	ldr	r3, [pc, #120]	@ (8006a78 <GNSS_ParsePOSLLHData+0x16c>)
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	for (int var = 0; var < 4; ++var) {
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	e00c      	b.n	8006a26 <GNSS_ParsePOSLLHData+0x11a>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 26];
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	331a      	adds	r3, #26
 8006a10:	4a18      	ldr	r2, [pc, #96]	@ (8006a74 <GNSS_ParsePOSLLHData+0x168>)
 8006a12:	4413      	add	r3, r2
 8006a14:	7a19      	ldrb	r1, [r3, #8]
 8006a16:	4a1a      	ldr	r2, [pc, #104]	@ (8006a80 <GNSS_ParsePOSLLHData+0x174>)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	460a      	mov	r2, r1
 8006a1e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3301      	adds	r3, #1
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	ddef      	ble.n	8006a0c <GNSS_ParsePOSLLHData+0x100>
	}
	GNSS->hAcc = uLong.uLong;
 8006a2c:	4b14      	ldr	r3, [pc, #80]	@ (8006a80 <GNSS_ParsePOSLLHData+0x174>)
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	for (int var = 0; var < 4; ++var) {
 8006a36:	2300      	movs	r3, #0
 8006a38:	60bb      	str	r3, [r7, #8]
 8006a3a:	e00c      	b.n	8006a56 <GNSS_ParsePOSLLHData+0x14a>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 30];
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	331e      	adds	r3, #30
 8006a40:	4a0c      	ldr	r2, [pc, #48]	@ (8006a74 <GNSS_ParsePOSLLHData+0x168>)
 8006a42:	4413      	add	r3, r2
 8006a44:	7a19      	ldrb	r1, [r3, #8]
 8006a46:	4a0e      	ldr	r2, [pc, #56]	@ (8006a80 <GNSS_ParsePOSLLHData+0x174>)
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	460a      	mov	r2, r1
 8006a4e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	3301      	adds	r3, #1
 8006a54:	60bb      	str	r3, [r7, #8]
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	ddef      	ble.n	8006a3c <GNSS_ParsePOSLLHData+0x130>
	}
	GNSS->vAcc = uLong.uLong;
 8006a5c:	4b08      	ldr	r3, [pc, #32]	@ (8006a80 <GNSS_ParsePOSLLHData+0x174>)
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 8006a66:	bf00      	nop
 8006a68:	3724      	adds	r7, #36	@ 0x24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	20000124 	.word	0x20000124
 8006a78:	20000750 	.word	0x20000750
 8006a7c:	4b189680 	.word	0x4b189680
 8006a80:	2000074c 	.word	0x2000074c

08006a84 <GNSS_LoadConfig>:

/*!
 *  Sends the basic configuration: Activation of the UBX standard, change of NMEA version to 4.10 and turn on of the Galileo system.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_LoadConfig(GNSS_StateHandle *GNSS) {
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, configUBX,
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	221c      	movs	r2, #28
 8006a92:	490f      	ldr	r1, [pc, #60]	@ (8006ad0 <GNSS_LoadConfig+0x4c>)
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fd fd95 	bl	80045c4 <HAL_UART_Transmit_DMA>
			sizeof(configUBX) / sizeof(uint8_t));
	HAL_Delay(250);
 8006a9a:	20fa      	movs	r0, #250	@ 0xfa
 8006a9c:	f7fb f950 	bl	8001d40 <HAL_Delay>
	HAL_UART_Transmit_DMA(GNSS->huart, setNMEA410,
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	221c      	movs	r2, #28
 8006aa6:	490b      	ldr	r1, [pc, #44]	@ (8006ad4 <GNSS_LoadConfig+0x50>)
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fd fd8b 	bl	80045c4 <HAL_UART_Transmit_DMA>
			sizeof(setNMEA410) / sizeof(uint8_t));
	HAL_Delay(250);
 8006aae:	20fa      	movs	r0, #250	@ 0xfa
 8006ab0:	f7fb f946 	bl	8001d40 <HAL_Delay>
	HAL_UART_Transmit_DMA(GNSS->huart, setGNSS,
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	222c      	movs	r2, #44	@ 0x2c
 8006aba:	4907      	ldr	r1, [pc, #28]	@ (8006ad8 <GNSS_LoadConfig+0x54>)
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fd fd81 	bl	80045c4 <HAL_UART_Transmit_DMA>
			sizeof(setGNSS) / sizeof(uint8_t));
	HAL_Delay(250);
 8006ac2:	20fa      	movs	r0, #250	@ 0xfa
 8006ac4:	f7fb f93c 	bl	8001d40 <HAL_Delay>
}
 8006ac8:	bf00      	nop
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	08006bcc 	.word	0x08006bcc
 8006ad4:	08006be8 	.word	0x08006be8
 8006ad8:	08006c04 	.word	0x08006c04

08006adc <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <memset>:
 8006af8:	4402      	add	r2, r0
 8006afa:	4603      	mov	r3, r0
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d100      	bne.n	8006b02 <memset+0xa>
 8006b00:	4770      	bx	lr
 8006b02:	f803 1b01 	strb.w	r1, [r3], #1
 8006b06:	e7f9      	b.n	8006afc <memset+0x4>

08006b08 <__libc_init_array>:
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	4d0d      	ldr	r5, [pc, #52]	@ (8006b40 <__libc_init_array+0x38>)
 8006b0c:	4c0d      	ldr	r4, [pc, #52]	@ (8006b44 <__libc_init_array+0x3c>)
 8006b0e:	1b64      	subs	r4, r4, r5
 8006b10:	10a4      	asrs	r4, r4, #2
 8006b12:	2600      	movs	r6, #0
 8006b14:	42a6      	cmp	r6, r4
 8006b16:	d109      	bne.n	8006b2c <__libc_init_array+0x24>
 8006b18:	4d0b      	ldr	r5, [pc, #44]	@ (8006b48 <__libc_init_array+0x40>)
 8006b1a:	4c0c      	ldr	r4, [pc, #48]	@ (8006b4c <__libc_init_array+0x44>)
 8006b1c:	f000 f826 	bl	8006b6c <_init>
 8006b20:	1b64      	subs	r4, r4, r5
 8006b22:	10a4      	asrs	r4, r4, #2
 8006b24:	2600      	movs	r6, #0
 8006b26:	42a6      	cmp	r6, r4
 8006b28:	d105      	bne.n	8006b36 <__libc_init_array+0x2e>
 8006b2a:	bd70      	pop	{r4, r5, r6, pc}
 8006b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b30:	4798      	blx	r3
 8006b32:	3601      	adds	r6, #1
 8006b34:	e7ee      	b.n	8006b14 <__libc_init_array+0xc>
 8006b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b3a:	4798      	blx	r3
 8006b3c:	3601      	adds	r6, #1
 8006b3e:	e7f2      	b.n	8006b26 <__libc_init_array+0x1e>
 8006b40:	08006dd4 	.word	0x08006dd4
 8006b44:	08006dd4 	.word	0x08006dd4
 8006b48:	08006dd4 	.word	0x08006dd4
 8006b4c:	08006dd8 	.word	0x08006dd8

08006b50 <memcpy>:
 8006b50:	440a      	add	r2, r1
 8006b52:	4291      	cmp	r1, r2
 8006b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b58:	d100      	bne.n	8006b5c <memcpy+0xc>
 8006b5a:	4770      	bx	lr
 8006b5c:	b510      	push	{r4, lr}
 8006b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b66:	4291      	cmp	r1, r2
 8006b68:	d1f9      	bne.n	8006b5e <memcpy+0xe>
 8006b6a:	bd10      	pop	{r4, pc}

08006b6c <_init>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	bf00      	nop
 8006b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b72:	bc08      	pop	{r3}
 8006b74:	469e      	mov	lr, r3
 8006b76:	4770      	bx	lr

08006b78 <_fini>:
 8006b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7a:	bf00      	nop
 8006b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b7e:	bc08      	pop	{r3}
 8006b80:	469e      	mov	lr, r3
 8006b82:	4770      	bx	lr
