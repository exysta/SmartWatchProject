
SmartWatchProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bb0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08007d40  08007d40  00008d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e04  08007e04  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007e04  08007e04  00008e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e0c  08007e0c  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e0c  08007e0c  00008e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e10  08007e10  00008e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007e14  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008dc  20000068  08007e7c  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000944  08007e7c  00009944  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f2f  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003390  00000000  00000000  0001dfc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00021358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d69  00000000  00000000  000224d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029012  00000000  00000000  00023241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017531  00000000  00000000  0004c253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0bcd  00000000  00000000  00063784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154351  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc4  00000000  00000000  00154394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  00159358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d28 	.word	0x08007d28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08007d28 	.word	0x08007d28

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b988 	b.w	8000d74 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	468e      	mov	lr, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	4688      	mov	r8, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4617      	mov	r7, r2
 8000a90:	d962      	bls.n	8000b58 <__udivmoddi4+0xdc>
 8000a92:	fab2 f682 	clz	r6, r2
 8000a96:	b14e      	cbz	r6, 8000aac <__udivmoddi4+0x30>
 8000a98:	f1c6 0320 	rsb	r3, r6, #32
 8000a9c:	fa01 f806 	lsl.w	r8, r1, r6
 8000aa0:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa4:	40b7      	lsls	r7, r6
 8000aa6:	ea43 0808 	orr.w	r8, r3, r8
 8000aaa:	40b4      	lsls	r4, r6
 8000aac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab0:	fa1f fc87 	uxth.w	ip, r7
 8000ab4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab8:	0c23      	lsrs	r3, r4, #16
 8000aba:	fb0e 8811 	mls	r8, lr, r1, r8
 8000abe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d909      	bls.n	8000ade <__udivmoddi4+0x62>
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ad0:	f080 80ea 	bcs.w	8000ca8 <__udivmoddi4+0x22c>
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	f240 80e7 	bls.w	8000ca8 <__udivmoddi4+0x22c>
 8000ada:	3902      	subs	r1, #2
 8000adc:	443b      	add	r3, r7
 8000ade:	1a9a      	subs	r2, r3, r2
 8000ae0:	b2a3      	uxth	r3, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aee:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af2:	459c      	cmp	ip, r3
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0x8e>
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afc:	f080 80d6 	bcs.w	8000cac <__udivmoddi4+0x230>
 8000b00:	459c      	cmp	ip, r3
 8000b02:	f240 80d3 	bls.w	8000cac <__udivmoddi4+0x230>
 8000b06:	443b      	add	r3, r7
 8000b08:	3802      	subs	r0, #2
 8000b0a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b0e:	eba3 030c 	sub.w	r3, r3, ip
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11d      	cbz	r5, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40f3      	lsrs	r3, r6
 8000b18:	2200      	movs	r2, #0
 8000b1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d905      	bls.n	8000b32 <__udivmoddi4+0xb6>
 8000b26:	b10d      	cbz	r5, 8000b2c <__udivmoddi4+0xb0>
 8000b28:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e7f5      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b32:	fab3 f183 	clz	r1, r3
 8000b36:	2900      	cmp	r1, #0
 8000b38:	d146      	bne.n	8000bc8 <__udivmoddi4+0x14c>
 8000b3a:	4573      	cmp	r3, lr
 8000b3c:	d302      	bcc.n	8000b44 <__udivmoddi4+0xc8>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	f200 8105 	bhi.w	8000d4e <__udivmoddi4+0x2d2>
 8000b44:	1a84      	subs	r4, r0, r2
 8000b46:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	4690      	mov	r8, r2
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d0e5      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b52:	e9c5 4800 	strd	r4, r8, [r5]
 8000b56:	e7e2      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	f000 8090 	beq.w	8000c7e <__udivmoddi4+0x202>
 8000b5e:	fab2 f682 	clz	r6, r2
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	f040 80a4 	bne.w	8000cb0 <__udivmoddi4+0x234>
 8000b68:	1a8a      	subs	r2, r1, r2
 8000b6a:	0c03      	lsrs	r3, r0, #16
 8000b6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b70:	b280      	uxth	r0, r0
 8000b72:	b2bc      	uxth	r4, r7
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b7a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b82:	fb04 f20c 	mul.w	r2, r4, ip
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d907      	bls.n	8000b9a <__udivmoddi4+0x11e>
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x11c>
 8000b92:	429a      	cmp	r2, r3
 8000b94:	f200 80e0 	bhi.w	8000d58 <__udivmoddi4+0x2dc>
 8000b98:	46c4      	mov	ip, r8
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ba0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ba4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba8:	fb02 f404 	mul.w	r4, r2, r4
 8000bac:	429c      	cmp	r4, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x144>
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x142>
 8000bb8:	429c      	cmp	r4, r3
 8000bba:	f200 80ca 	bhi.w	8000d52 <__udivmoddi4+0x2d6>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	1b1b      	subs	r3, r3, r4
 8000bc2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bc6:	e7a5      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bc8:	f1c1 0620 	rsb	r6, r1, #32
 8000bcc:	408b      	lsls	r3, r1
 8000bce:	fa22 f706 	lsr.w	r7, r2, r6
 8000bd2:	431f      	orrs	r7, r3
 8000bd4:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bdc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000be0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000be4:	4323      	orrs	r3, r4
 8000be6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bea:	fa1f fc87 	uxth.w	ip, r7
 8000bee:	fbbe f0f9 	udiv	r0, lr, r9
 8000bf2:	0c1c      	lsrs	r4, r3, #16
 8000bf4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bfc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	fa02 f201 	lsl.w	r2, r2, r1
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x1a0>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c0e:	f080 809c 	bcs.w	8000d4a <__udivmoddi4+0x2ce>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f240 8099 	bls.w	8000d4a <__udivmoddi4+0x2ce>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	eba4 040e 	sub.w	r4, r4, lr
 8000c20:	fa1f fe83 	uxth.w	lr, r3
 8000c24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c28:	fb09 4413 	mls	r4, r9, r3, r4
 8000c2c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c30:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c34:	45a4      	cmp	ip, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x1ce>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c3e:	f080 8082 	bcs.w	8000d46 <__udivmoddi4+0x2ca>
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d97f      	bls.n	8000d46 <__udivmoddi4+0x2ca>
 8000c46:	3b02      	subs	r3, #2
 8000c48:	443c      	add	r4, r7
 8000c4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c4e:	eba4 040c 	sub.w	r4, r4, ip
 8000c52:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c56:	4564      	cmp	r4, ip
 8000c58:	4673      	mov	r3, lr
 8000c5a:	46e1      	mov	r9, ip
 8000c5c:	d362      	bcc.n	8000d24 <__udivmoddi4+0x2a8>
 8000c5e:	d05f      	beq.n	8000d20 <__udivmoddi4+0x2a4>
 8000c60:	b15d      	cbz	r5, 8000c7a <__udivmoddi4+0x1fe>
 8000c62:	ebb8 0203 	subs.w	r2, r8, r3
 8000c66:	eb64 0409 	sbc.w	r4, r4, r9
 8000c6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c6e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c72:	431e      	orrs	r6, r3
 8000c74:	40cc      	lsrs	r4, r1
 8000c76:	e9c5 6400 	strd	r6, r4, [r5]
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	e74f      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000c7e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c82:	0c01      	lsrs	r1, r0, #16
 8000c84:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4638      	mov	r0, r7
 8000c92:	463c      	mov	r4, r7
 8000c94:	46b8      	mov	r8, r7
 8000c96:	46be      	mov	lr, r7
 8000c98:	2620      	movs	r6, #32
 8000c9a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c9e:	eba2 0208 	sub.w	r2, r2, r8
 8000ca2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ca6:	e766      	b.n	8000b76 <__udivmoddi4+0xfa>
 8000ca8:	4601      	mov	r1, r0
 8000caa:	e718      	b.n	8000ade <__udivmoddi4+0x62>
 8000cac:	4610      	mov	r0, r2
 8000cae:	e72c      	b.n	8000b0a <__udivmoddi4+0x8e>
 8000cb0:	f1c6 0220 	rsb	r2, r6, #32
 8000cb4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb8:	40b7      	lsls	r7, r6
 8000cba:	40b1      	lsls	r1, r6
 8000cbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cca:	b2bc      	uxth	r4, r7
 8000ccc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb08 f904 	mul.w	r9, r8, r4
 8000cda:	40b0      	lsls	r0, r6
 8000cdc:	4589      	cmp	r9, r1
 8000cde:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ce2:	b280      	uxth	r0, r0
 8000ce4:	d93e      	bls.n	8000d64 <__udivmoddi4+0x2e8>
 8000ce6:	1879      	adds	r1, r7, r1
 8000ce8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cec:	d201      	bcs.n	8000cf2 <__udivmoddi4+0x276>
 8000cee:	4589      	cmp	r9, r1
 8000cf0:	d81f      	bhi.n	8000d32 <__udivmoddi4+0x2b6>
 8000cf2:	eba1 0109 	sub.w	r1, r1, r9
 8000cf6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cfa:	fb09 f804 	mul.w	r8, r9, r4
 8000cfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d02:	b292      	uxth	r2, r2
 8000d04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d08:	4542      	cmp	r2, r8
 8000d0a:	d229      	bcs.n	8000d60 <__udivmoddi4+0x2e4>
 8000d0c:	18ba      	adds	r2, r7, r2
 8000d0e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d12:	d2c4      	bcs.n	8000c9e <__udivmoddi4+0x222>
 8000d14:	4542      	cmp	r2, r8
 8000d16:	d2c2      	bcs.n	8000c9e <__udivmoddi4+0x222>
 8000d18:	f1a9 0102 	sub.w	r1, r9, #2
 8000d1c:	443a      	add	r2, r7
 8000d1e:	e7be      	b.n	8000c9e <__udivmoddi4+0x222>
 8000d20:	45f0      	cmp	r8, lr
 8000d22:	d29d      	bcs.n	8000c60 <__udivmoddi4+0x1e4>
 8000d24:	ebbe 0302 	subs.w	r3, lr, r2
 8000d28:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	46e1      	mov	r9, ip
 8000d30:	e796      	b.n	8000c60 <__udivmoddi4+0x1e4>
 8000d32:	eba7 0909 	sub.w	r9, r7, r9
 8000d36:	4449      	add	r1, r9
 8000d38:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d3c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d40:	fb09 f804 	mul.w	r8, r9, r4
 8000d44:	e7db      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d46:	4673      	mov	r3, lr
 8000d48:	e77f      	b.n	8000c4a <__udivmoddi4+0x1ce>
 8000d4a:	4650      	mov	r0, sl
 8000d4c:	e766      	b.n	8000c1c <__udivmoddi4+0x1a0>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e6fd      	b.n	8000b4e <__udivmoddi4+0xd2>
 8000d52:	443b      	add	r3, r7
 8000d54:	3a02      	subs	r2, #2
 8000d56:	e733      	b.n	8000bc0 <__udivmoddi4+0x144>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	443b      	add	r3, r7
 8000d5e:	e71c      	b.n	8000b9a <__udivmoddi4+0x11e>
 8000d60:	4649      	mov	r1, r9
 8000d62:	e79c      	b.n	8000c9e <__udivmoddi4+0x222>
 8000d64:	eba1 0109 	sub.w	r1, r1, r9
 8000d68:	46c4      	mov	ip, r8
 8000d6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d6e:	fb09 f804 	mul.w	r8, r9, r4
 8000d72:	e7c4      	b.n	8000cfe <__udivmoddi4+0x282>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d7e:	4b22      	ldr	r3, [pc, #136]	@ (8000e08 <MX_DMA_Init+0x90>)
 8000d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d82:	4a21      	ldr	r2, [pc, #132]	@ (8000e08 <MX_DMA_Init+0x90>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <MX_DMA_Init+0x90>)
 8000d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d96:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <MX_DMA_Init+0x90>)
 8000d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000e08 <MX_DMA_Init+0x90>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <MX_DMA_Init+0x90>)
 8000da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	200c      	movs	r0, #12
 8000db4:	f001 fa05 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000db8:	200c      	movs	r0, #12
 8000dba:	f001 fa1e 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	200d      	movs	r0, #13
 8000dc4:	f001 f9fd 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000dc8:	200d      	movs	r0, #13
 8000dca:	f001 fa16 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	200e      	movs	r0, #14
 8000dd4:	f001 f9f5 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000dd8:	200e      	movs	r0, #14
 8000dda:	f001 fa0e 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	200f      	movs	r0, #15
 8000de4:	f001 f9ed 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000de8:	200f      	movs	r0, #15
 8000dea:	f001 fa06 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2045      	movs	r0, #69	@ 0x45
 8000df4:	f001 f9e5 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8000df8:	2045      	movs	r0, #69	@ 0x45
 8000dfa:	f001 f9fe 	bl	80021fa <HAL_NVIC_EnableIRQ>

}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000

08000e0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	4b58      	ldr	r3, [pc, #352]	@ (8000f84 <MX_GPIO_Init+0x178>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	4a57      	ldr	r2, [pc, #348]	@ (8000f84 <MX_GPIO_Init+0x178>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e2e:	4b55      	ldr	r3, [pc, #340]	@ (8000f84 <MX_GPIO_Init+0x178>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b52      	ldr	r3, [pc, #328]	@ (8000f84 <MX_GPIO_Init+0x178>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	4a51      	ldr	r2, [pc, #324]	@ (8000f84 <MX_GPIO_Init+0x178>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e46:	4b4f      	ldr	r3, [pc, #316]	@ (8000f84 <MX_GPIO_Init+0x178>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b4c      	ldr	r3, [pc, #304]	@ (8000f84 <MX_GPIO_Init+0x178>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	4a4b      	ldr	r2, [pc, #300]	@ (8000f84 <MX_GPIO_Init+0x178>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5e:	4b49      	ldr	r3, [pc, #292]	@ (8000f84 <MX_GPIO_Init+0x178>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_MAX30102_Pin|ST7789_DC_Pin|ST7789_CS_Pin|ST7789_BLK_Pin
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 61b9 	mov.w	r1, #1480	@ 0x5c8
 8000e70:	4845      	ldr	r0, [pc, #276]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000e72:	f001 fe09 	bl	8002a88 <HAL_GPIO_WritePin>
                          |BLE_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_SWD_Pin|LED_ERROR_Pin|LED_STATUS_Pin|LED_BLE_Pin, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f640 0164 	movw	r1, #2148	@ 0x864
 8000e7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e80:	f001 fe02 	bl	8002a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GPS_Pin|LED_LCD_Pin|LED_BMP280_Pin|ST7789_RST_Pin
 8000e84:	2200      	movs	r2, #0
 8000e86:	f241 1107 	movw	r1, #4359	@ 0x1107
 8000e8a:	4840      	ldr	r0, [pc, #256]	@ (8000f8c <MX_GPIO_Init+0x180>)
 8000e8c:	f001 fdfc 	bl	8002a88 <HAL_GPIO_WritePin>
                          |LED_MPUS6500_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MAX30102_INT_Pin BUTTON_NEXT_Pin */
  GPIO_InitStruct.Pin = MAX30102_INT_Pin|BUTTON_NEXT_Pin;
 8000e90:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8000e94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4838      	ldr	r0, [pc, #224]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000ea8:	f001 fc44 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_MAX30102_Pin ST7789_DC_Pin ST7789_CS_Pin ST7789_BLK_Pin
                           BLE_EN_Pin */
  GPIO_InitStruct.Pin = LED_MAX30102_Pin|ST7789_DC_Pin|ST7789_CS_Pin|ST7789_BLK_Pin
 8000eac:	f44f 63b9 	mov.w	r3, #1480	@ 0x5c8
 8000eb0:	60fb      	str	r3, [r7, #12]
                          |BLE_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4830      	ldr	r0, [pc, #192]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000ec6:	f001 fc35 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SWD_Pin LED_ERROR_Pin LED_STATUS_Pin LED_BLE_Pin */
  GPIO_InitStruct.Pin = LED_SWD_Pin|LED_ERROR_Pin|LED_STATUS_Pin|LED_BLE_Pin;
 8000eca:	f640 0364 	movw	r3, #2148	@ 0x864
 8000ece:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee6:	f001 fc25 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GPS_Pin LED_LCD_Pin LED_BMP280_Pin ST7789_RST_Pin
                           LED_MPUS6500_Pin */
  GPIO_InitStruct.Pin = LED_GPS_Pin|LED_LCD_Pin|LED_BMP280_Pin|ST7789_RST_Pin
 8000eea:	f241 1307 	movw	r3, #4359	@ 0x1107
 8000eee:	60fb      	str	r3, [r7, #12]
                          |LED_MPUS6500_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	4619      	mov	r1, r3
 8000f02:	4822      	ldr	r0, [pc, #136]	@ (8000f8c <MX_GPIO_Init+0x180>)
 8000f04:	f001 fc16 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_BACK_Pin */
  GPIO_InitStruct.Pin = BUTTON_BACK_Pin;
 8000f08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_BACK_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f22:	f001 fc07 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STATE_Pin */
  GPIO_InitStruct.Pin = BLE_STATE_Pin;
 8000f26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLE_STATE_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4813      	ldr	r0, [pc, #76]	@ (8000f88 <MX_GPIO_Init+0x17c>)
 8000f3c:	f001 fbfa 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6500_INT_Pin */
  GPIO_InitStruct.Pin = MPU6500_INT_Pin;
 8000f40:	2320      	movs	r3, #32
 8000f42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f44:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MPU6500_INT_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	4619      	mov	r1, r3
 8000f54:	480d      	ldr	r0, [pc, #52]	@ (8000f8c <MX_GPIO_Init+0x180>)
 8000f56:	f001 fbed 	bl	8002734 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2008      	movs	r0, #8
 8000f60:	f001 f92f 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f64:	2008      	movs	r0, #8
 8000f66:	f001 f948 	bl	80021fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2017      	movs	r0, #23
 8000f70:	f001 f927 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f74:	2017      	movs	r0, #23
 8000f76:	f001 f940 	bl	80021fa <HAL_NVIC_EnableIRQ>

}
 8000f7a:	bf00      	nop
 8000f7c:	3720      	adds	r7, #32
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000
 8000f88:	48000800 	.word	0x48000800
 8000f8c:	48000400 	.word	0x48000400

08000f90 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000f96:	4a1c      	ldr	r2, [pc, #112]	@ (8001008 <MX_I2C1_Init+0x78>)
 8000f98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800100c <MX_I2C1_Init+0x7c>)
 8000f9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fac:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fca:	480e      	ldr	r0, [pc, #56]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000fcc:	f001 fd8c 	bl	8002ae8 <HAL_I2C_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fd6:	f000 fafb 	bl	80015d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4809      	ldr	r0, [pc, #36]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000fde:	f002 fbcb 	bl	8003778 <HAL_I2CEx_ConfigAnalogFilter>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fe8:	f000 faf2 	bl	80015d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fec:	2100      	movs	r1, #0
 8000fee:	4805      	ldr	r0, [pc, #20]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000ff0:	f002 fc0d 	bl	800380e <HAL_I2CEx_ConfigDigitalFilter>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ffa:	f000 fae9 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000084 	.word	0x20000084
 8001008:	40005400 	.word	0x40005400
 800100c:	10d19ce4 	.word	0x10d19ce4

08001010 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001014:	4b1b      	ldr	r3, [pc, #108]	@ (8001084 <MX_I2C2_Init+0x74>)
 8001016:	4a1c      	ldr	r2, [pc, #112]	@ (8001088 <MX_I2C2_Init+0x78>)
 8001018:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800101a:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <MX_I2C2_Init+0x74>)
 800101c:	4a1b      	ldr	r2, [pc, #108]	@ (800108c <MX_I2C2_Init+0x7c>)
 800101e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001020:	4b18      	ldr	r3, [pc, #96]	@ (8001084 <MX_I2C2_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001026:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <MX_I2C2_Init+0x74>)
 8001028:	2201      	movs	r2, #1
 800102a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800102c:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <MX_I2C2_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001032:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <MX_I2C2_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <MX_I2C2_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <MX_I2C2_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001044:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <MX_I2C2_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800104a:	480e      	ldr	r0, [pc, #56]	@ (8001084 <MX_I2C2_Init+0x74>)
 800104c:	f001 fd4c 	bl	8002ae8 <HAL_I2C_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001056:	f000 fabb 	bl	80015d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800105a:	2100      	movs	r1, #0
 800105c:	4809      	ldr	r0, [pc, #36]	@ (8001084 <MX_I2C2_Init+0x74>)
 800105e:	f002 fb8b 	bl	8003778 <HAL_I2CEx_ConfigAnalogFilter>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001068:	f000 fab2 	bl	80015d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800106c:	2100      	movs	r1, #0
 800106e:	4805      	ldr	r0, [pc, #20]	@ (8001084 <MX_I2C2_Init+0x74>)
 8001070:	f002 fbcd 	bl	800380e <HAL_I2CEx_ConfigDigitalFilter>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800107a:	f000 faa9 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200000d8 	.word	0x200000d8
 8001088:	40005800 	.word	0x40005800
 800108c:	10d19ce4 	.word	0x10d19ce4

08001090 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001094:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <MX_I2C3_Init+0x74>)
 8001096:	4a1c      	ldr	r2, [pc, #112]	@ (8001108 <MX_I2C3_Init+0x78>)
 8001098:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 800109a:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <MX_I2C3_Init+0x74>)
 800109c:	4a1b      	ldr	r2, [pc, #108]	@ (800110c <MX_I2C3_Init+0x7c>)
 800109e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80010a0:	4b18      	ldr	r3, [pc, #96]	@ (8001104 <MX_I2C3_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a6:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <MX_I2C3_Init+0x74>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ac:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <MX_I2C3_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <MX_I2C3_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <MX_I2C3_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_I2C3_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <MX_I2C3_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010ca:	480e      	ldr	r0, [pc, #56]	@ (8001104 <MX_I2C3_Init+0x74>)
 80010cc:	f001 fd0c 	bl	8002ae8 <HAL_I2C_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80010d6:	f000 fa7b 	bl	80015d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010da:	2100      	movs	r1, #0
 80010dc:	4809      	ldr	r0, [pc, #36]	@ (8001104 <MX_I2C3_Init+0x74>)
 80010de:	f002 fb4b 	bl	8003778 <HAL_I2CEx_ConfigAnalogFilter>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80010e8:	f000 fa72 	bl	80015d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80010ec:	2100      	movs	r1, #0
 80010ee:	4805      	ldr	r0, [pc, #20]	@ (8001104 <MX_I2C3_Init+0x74>)
 80010f0:	f002 fb8d 	bl	800380e <HAL_I2CEx_ConfigDigitalFilter>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80010fa:	f000 fa69 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000012c 	.word	0x2000012c
 8001108:	40005c00 	.word	0x40005c00
 800110c:	10d19ce4 	.word	0x10d19ce4

08001110 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0b0      	sub	sp, #192	@ 0xc0
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001128:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800112c:	2288      	movs	r2, #136	@ 0x88
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f006 f917 	bl	8007364 <memset>
  if(i2cHandle->Instance==I2C1)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a63      	ldr	r2, [pc, #396]	@ (80012c8 <HAL_I2C_MspInit+0x1b8>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d13b      	bne.n	80011b8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001140:	2340      	movs	r3, #64	@ 0x40
 8001142:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001144:	2300      	movs	r3, #0
 8001146:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001148:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800114c:	4618      	mov	r0, r3
 800114e:	f003 fa0f 	bl	8004570 <HAL_RCCEx_PeriphCLKConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001158:	f000 fa3a 	bl	80015d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115c:	4b5b      	ldr	r3, [pc, #364]	@ (80012cc <HAL_I2C_MspInit+0x1bc>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001160:	4a5a      	ldr	r2, [pc, #360]	@ (80012cc <HAL_I2C_MspInit+0x1bc>)
 8001162:	f043 0302 	orr.w	r3, r3, #2
 8001166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001168:	4b58      	ldr	r3, [pc, #352]	@ (80012cc <HAL_I2C_MspInit+0x1bc>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	623b      	str	r3, [r7, #32]
 8001172:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU6500_SCL_Pin|MPU6500_SDA_Pin;
 8001174:	23c0      	movs	r3, #192	@ 0xc0
 8001176:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800117a:	2312      	movs	r3, #18
 800117c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800118c:	2304      	movs	r3, #4
 800118e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001192:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001196:	4619      	mov	r1, r3
 8001198:	484d      	ldr	r0, [pc, #308]	@ (80012d0 <HAL_I2C_MspInit+0x1c0>)
 800119a:	f001 facb 	bl	8002734 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800119e:	4b4b      	ldr	r3, [pc, #300]	@ (80012cc <HAL_I2C_MspInit+0x1bc>)
 80011a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a2:	4a4a      	ldr	r2, [pc, #296]	@ (80012cc <HAL_I2C_MspInit+0x1bc>)
 80011a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011aa:	4b48      	ldr	r3, [pc, #288]	@ (80012cc <HAL_I2C_MspInit+0x1bc>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80011b6:	e082      	b.n	80012be <HAL_I2C_MspInit+0x1ae>
  else if(i2cHandle->Instance==I2C2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a45      	ldr	r2, [pc, #276]	@ (80012d4 <HAL_I2C_MspInit+0x1c4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d13c      	bne.n	800123c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011c2:	2380      	movs	r3, #128	@ 0x80
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 f9ce 	bl	8004570 <HAL_RCCEx_PeriphCLKConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_I2C_MspInit+0xce>
      Error_Handler();
 80011da:	f000 f9f9 	bl	80015d0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	4b3b      	ldr	r3, [pc, #236]	@ (80012cc <HAL_I2C_MspInit+0x1bc>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e2:	4a3a      	ldr	r2, [pc, #232]	@ (80012cc <HAL_I2C_MspInit+0x1bc>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ea:	4b38      	ldr	r3, [pc, #224]	@ (80012cc <HAL_I2C_MspInit+0x1bc>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	61bb      	str	r3, [r7, #24]
 80011f4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = BMP280_SCL_Pin|BMP280_SDA_Pin;
 80011f6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011fe:	2312      	movs	r3, #18
 8001200:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001210:	2304      	movs	r3, #4
 8001212:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800121a:	4619      	mov	r1, r3
 800121c:	482c      	ldr	r0, [pc, #176]	@ (80012d0 <HAL_I2C_MspInit+0x1c0>)
 800121e:	f001 fa89 	bl	8002734 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001222:	4b2a      	ldr	r3, [pc, #168]	@ (80012cc <HAL_I2C_MspInit+0x1bc>)
 8001224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001226:	4a29      	ldr	r2, [pc, #164]	@ (80012cc <HAL_I2C_MspInit+0x1bc>)
 8001228:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800122c:	6593      	str	r3, [r2, #88]	@ 0x58
 800122e:	4b27      	ldr	r3, [pc, #156]	@ (80012cc <HAL_I2C_MspInit+0x1bc>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697b      	ldr	r3, [r7, #20]
}
 800123a:	e040      	b.n	80012be <HAL_I2C_MspInit+0x1ae>
  else if(i2cHandle->Instance==I2C3)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a25      	ldr	r2, [pc, #148]	@ (80012d8 <HAL_I2C_MspInit+0x1c8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d13b      	bne.n	80012be <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001246:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800124c:	2300      	movs	r3, #0
 800124e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001250:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001254:	4618      	mov	r0, r3
 8001256:	f003 f98b 	bl	8004570 <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8001260:	f000 f9b6 	bl	80015d0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001264:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <HAL_I2C_MspInit+0x1bc>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001268:	4a18      	ldr	r2, [pc, #96]	@ (80012cc <HAL_I2C_MspInit+0x1bc>)
 800126a:	f043 0304 	orr.w	r3, r3, #4
 800126e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001270:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <HAL_I2C_MspInit+0x1bc>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MAX30102_SCL_Pin|MAX30102_SDA_Pin;
 800127c:	2303      	movs	r3, #3
 800127e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001282:	2312      	movs	r3, #18
 8001284:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001294:	2304      	movs	r3, #4
 8001296:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800129e:	4619      	mov	r1, r3
 80012a0:	480e      	ldr	r0, [pc, #56]	@ (80012dc <HAL_I2C_MspInit+0x1cc>)
 80012a2:	f001 fa47 	bl	8002734 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012a6:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <HAL_I2C_MspInit+0x1bc>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012aa:	4a08      	ldr	r2, [pc, #32]	@ (80012cc <HAL_I2C_MspInit+0x1bc>)
 80012ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <HAL_I2C_MspInit+0x1bc>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
}
 80012be:	bf00      	nop
 80012c0:	37c0      	adds	r7, #192	@ 0xc0
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40005400 	.word	0x40005400
 80012cc:	40021000 	.word	0x40021000
 80012d0:	48000400 	.word	0x48000400
 80012d4:	40005800 	.word	0x40005800
 80012d8:	40005c00 	.word	0x40005c00
 80012dc:	48000800 	.word	0x48000800

080012e0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&STLINK_UART, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80012e8:	1d39      	adds	r1, r7, #4
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	2201      	movs	r2, #1
 80012f0:	4803      	ldr	r0, [pc, #12]	@ (8001300 <__io_putchar+0x20>)
 80012f2:	f003 feea 	bl	80050ca <HAL_UART_Transmit>
	return chr;
 80012f6:	687b      	ldr	r3, [r7, #4]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000043c 	.word	0x2000043c

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
int main(void)
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001310:	f000 fde3 	bl	8001eda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001314:	f000 f8b4 	bl	8001480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001318:	f7ff fd78 	bl	8000e0c <MX_GPIO_Init>
  MX_DMA_Init();
 800131c:	f7ff fd2c 	bl	8000d78 <MX_DMA_Init>
  MX_I2C1_Init();
 8001320:	f7ff fe36 	bl	8000f90 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001324:	f7ff fe74 	bl	8001010 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001328:	f7ff feb2 	bl	8001090 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 800132c:	f000 fbcc 	bl	8001ac8 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001330:	f000 f954 	bl	80015dc <MX_SPI2_Init>
  MX_UART4_Init();
 8001334:	f000 fb68 	bl	8001a08 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001338:	f000 fb96 	bl	8001a68 <MX_USART1_UART_Init>
	        HAL_Delay(5);  // give time for UART to flush
	    }
	    return HAL_OK;
	}
//	HAL_StatusTypeDef test = MAX30102_TestConnection();
	  Scan_I2C_Bus();
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	469c      	mov	ip, r3
 8001340:	f000 f864 	bl	800140c <Scan_I2C_Bus.0>
	  // Initiation
	  max30102_init(&max30102, &MAX30102_I2C);
 8001344:	492d      	ldr	r1, [pc, #180]	@ (80013fc <main+0xf8>)
 8001346:	482e      	ldr	r0, [pc, #184]	@ (8001400 <main+0xfc>)
 8001348:	f005 fa5f 	bl	800680a <max30102_init>
	  max30102_reset(&max30102);
 800134c:	482c      	ldr	r0, [pc, #176]	@ (8001400 <main+0xfc>)
 800134e:	f005 fad3 	bl	80068f8 <max30102_reset>
	  max30102_clear_fifo(&max30102);
 8001352:	482b      	ldr	r0, [pc, #172]	@ (8001400 <main+0xfc>)
 8001354:	f005 fca4 	bl	8006ca0 <max30102_clear_fifo>
	  max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 8001358:	2307      	movs	r3, #7
 800135a:	2201      	movs	r2, #1
 800135c:	2103      	movs	r1, #3
 800135e:	4828      	ldr	r0, [pc, #160]	@ (8001400 <main+0xfc>)
 8001360:	f005 fc62 	bl	8006c28 <max30102_set_fifo_config>

	  // Sensor settings
	  max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 8001364:	2101      	movs	r1, #1
 8001366:	4826      	ldr	r0, [pc, #152]	@ (8001400 <main+0xfc>)
 8001368:	f005 fbc4 	bl	8006af4 <max30102_set_led_pulse_width>
	  max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 800136c:	2100      	movs	r1, #0
 800136e:	4824      	ldr	r0, [pc, #144]	@ (8001400 <main+0xfc>)
 8001370:	f005 fbe3 	bl	8006b3a <max30102_set_adc_resolution>
	  max30102_set_sampling_rate(&max30102, max30102_sr_800);
 8001374:	2104      	movs	r1, #4
 8001376:	4822      	ldr	r0, [pc, #136]	@ (8001400 <main+0xfc>)
 8001378:	f005 fb97 	bl	8006aaa <max30102_set_sampling_rate>
	  max30102_set_led_current_1(&max30102, 6.2);
 800137c:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8001404 <main+0x100>
 8001380:	481f      	ldr	r0, [pc, #124]	@ (8001400 <main+0xfc>)
 8001382:	f005 fc01 	bl	8006b88 <max30102_set_led_current_1>
	  max30102_set_led_current_2(&max30102, 6.2);
 8001386:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8001404 <main+0x100>
 800138a:	481d      	ldr	r0, [pc, #116]	@ (8001400 <main+0xfc>)
 800138c:	f005 fc24 	bl	8006bd8 <max30102_set_led_current_2>

	  // Enter SpO2 mode
	  max30102_set_mode(&max30102, max30102_spo2);
 8001390:	2103      	movs	r1, #3
 8001392:	481b      	ldr	r0, [pc, #108]	@ (8001400 <main+0xfc>)
 8001394:	f005 fb63 	bl	8006a5e <max30102_set_mode>
	  max30102_set_a_full(&max30102, 1);
 8001398:	2101      	movs	r1, #1
 800139a:	4819      	ldr	r0, [pc, #100]	@ (8001400 <main+0xfc>)
 800139c:	f005 fabd 	bl	800691a <max30102_set_a_full>

	  // Initiate 1 temperature measurement
	  max30102_set_die_temp_en(&max30102, 1);
 80013a0:	2101      	movs	r1, #1
 80013a2:	4817      	ldr	r0, [pc, #92]	@ (8001400 <main+0xfc>)
 80013a4:	f005 fafa 	bl	800699c <max30102_set_die_temp_en>
	  max30102_set_die_temp_rdy(&max30102, 1);
 80013a8:	2101      	movs	r1, #1
 80013aa:	4815      	ldr	r0, [pc, #84]	@ (8001400 <main+0xfc>)
 80013ac:	f005 fade 	bl	800696c <max30102_set_die_temp_rdy>

	  uint8_t en_reg[2] = {0};
 80013b0:	2300      	movs	r3, #0
 80013b2:	803b      	strh	r3, [r7, #0]
	  max30102_read(&max30102, 0x00, en_reg, 1);
 80013b4:	463a      	mov	r2, r7
 80013b6:	2301      	movs	r3, #1
 80013b8:	2100      	movs	r1, #0
 80013ba:	4811      	ldr	r0, [pc, #68]	@ (8001400 <main+0xfc>)
 80013bc:	f005 fa77 	bl	80068ae <max30102_read>

	//Enter measurement mode:
	// Enter SpO2 mode
	max30102_set_mode(&max30102, max30102_spo2);
 80013c0:	2103      	movs	r1, #3
 80013c2:	480f      	ldr	r0, [pc, #60]	@ (8001400 <main+0xfc>)
 80013c4:	f005 fb4b 	bl	8006a5e <max30102_set_mode>

	//Enable the required interrupts:
	// Enable FIFO_A_FULL interrupt
	max30102_set_a_full(&max30102, 1);
 80013c8:	2101      	movs	r1, #1
 80013ca:	480d      	ldr	r0, [pc, #52]	@ (8001400 <main+0xfc>)
 80013cc:	f005 faa5 	bl	800691a <max30102_set_a_full>
	// Enable die temperature measurement
	max30102_set_die_temp_en(&max30102, 1);
 80013d0:	2101      	movs	r1, #1
 80013d2:	480b      	ldr	r0, [pc, #44]	@ (8001400 <main+0xfc>)
 80013d4:	f005 fae2 	bl	800699c <max30102_set_die_temp_en>
	// Enable DIE_TEMP_RDY interrupt
	max30102_set_die_temp_rdy(&max30102, 1);
 80013d8:	2101      	movs	r1, #1
 80013da:	4809      	ldr	r0, [pc, #36]	@ (8001400 <main+0xfc>)
 80013dc:	f005 fac6 	bl	800696c <max30102_set_die_temp_rdy>
	printf("test\r\n");
 80013e0:	4809      	ldr	r0, [pc, #36]	@ (8001408 <main+0x104>)
 80013e2:	f005 fedf 	bl	80071a4 <puts>
		//Display_EnvironnementData(30,70,&SmartWatchData_handle);
#endif

#ifdef MAX30102_I2C
	    // If interrupt flag is active
	    if (max30102_has_interrupt(&max30102))
 80013e6:	4806      	ldr	r0, [pc, #24]	@ (8001400 <main+0xfc>)
 80013e8:	f005 fafe 	bl	80069e8 <max30102_has_interrupt>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f9      	beq.n	80013e6 <main+0xe2>
	      // Run interrupt handler to read FIFO
	      max30102_interrupt_handler(&max30102);
 80013f2:	4803      	ldr	r0, [pc, #12]	@ (8001400 <main+0xfc>)
 80013f4:	f005 fb05 	bl	8006a02 <max30102_interrupt_handler>
	    if (max30102_has_interrupt(&max30102))
 80013f8:	e7f5      	b.n	80013e6 <main+0xe2>
 80013fa:	bf00      	nop
 80013fc:	2000012c 	.word	0x2000012c
 8001400:	20000284 	.word	0x20000284
 8001404:	40c66666 	.word	0x40c66666
 8001408:	08007d40 	.word	0x08007d40

0800140c <Scan_I2C_Bus.0>:
	{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	f8c7 c004 	str.w	ip, [r7, #4]
	    for (uint16_t addr = 1; addr < 128; addr++)
 8001416:	2301      	movs	r3, #1
 8001418:	81fb      	strh	r3, [r7, #14]
 800141a:	e022      	b.n	8001462 <Scan_I2C_Bus.0+0x56>
	        status = HAL_I2C_IsDeviceReady(&MAX30102_I2C,
 800141c:	89fb      	ldrh	r3, [r7, #14]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	b299      	uxth	r1, r3
 8001422:	2364      	movs	r3, #100	@ 0x64
 8001424:	2203      	movs	r2, #3
 8001426:	4813      	ldr	r0, [pc, #76]	@ (8001474 <Scan_I2C_Bus.0+0x68>)
 8001428:	f001 fe08 	bl	800303c <HAL_I2C_IsDeviceReady>
 800142c:	4603      	mov	r3, r0
 800142e:	737b      	strb	r3, [r7, #13]
	        if (status == HAL_OK)
 8001430:	7b7b      	ldrb	r3, [r7, #13]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d105      	bne.n	8001442 <Scan_I2C_Bus.0+0x36>
	            printf("I2C: device ACK at 0x%02X\r\n", addr);
 8001436:	89fb      	ldrh	r3, [r7, #14]
 8001438:	4619      	mov	r1, r3
 800143a:	480f      	ldr	r0, [pc, #60]	@ (8001478 <Scan_I2C_Bus.0+0x6c>)
 800143c:	f005 fe4a 	bl	80070d4 <iprintf>
 8001440:	e009      	b.n	8001456 <Scan_I2C_Bus.0+0x4a>
	            err = HAL_I2C_GetError(&MAX30102_I2C);
 8001442:	480c      	ldr	r0, [pc, #48]	@ (8001474 <Scan_I2C_Bus.0+0x68>)
 8001444:	f001 fee6 	bl	8003214 <HAL_I2C_GetError>
 8001448:	60b8      	str	r0, [r7, #8]
	            printf("I2C: 0x%02X no ACK (err=0x%lX)\r\n", addr, err);
 800144a:	89fb      	ldrh	r3, [r7, #14]
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	4619      	mov	r1, r3
 8001450:	480a      	ldr	r0, [pc, #40]	@ (800147c <Scan_I2C_Bus.0+0x70>)
 8001452:	f005 fe3f 	bl	80070d4 <iprintf>
	        HAL_Delay(5);  // give time for UART to flush
 8001456:	2005      	movs	r0, #5
 8001458:	f000 fdb4 	bl	8001fc4 <HAL_Delay>
	    for (uint16_t addr = 1; addr < 128; addr++)
 800145c:	89fb      	ldrh	r3, [r7, #14]
 800145e:	3301      	adds	r3, #1
 8001460:	81fb      	strh	r3, [r7, #14]
 8001462:	89fb      	ldrh	r3, [r7, #14]
 8001464:	2b7f      	cmp	r3, #127	@ 0x7f
 8001466:	d9d9      	bls.n	800141c <Scan_I2C_Bus.0+0x10>
	    return HAL_OK;
 8001468:	2300      	movs	r3, #0
	}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000012c 	.word	0x2000012c
 8001478:	08007d48 	.word	0x08007d48
 800147c:	08007d64 	.word	0x08007d64

08001480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b096      	sub	sp, #88	@ 0x58
 8001484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	2244      	movs	r2, #68	@ 0x44
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f005 ff68 	bl	8007364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014a6:	f002 fa0d 	bl	80038c4 <HAL_PWREx_ControlVoltageScaling>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014b0:	f000 f88e 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014b4:	2310      	movs	r3, #16
 80014b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014c0:	2360      	movs	r3, #96	@ 0x60
 80014c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c4:	2302      	movs	r3, #2
 80014c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014c8:	2301      	movs	r3, #1
 80014ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80014d0:	2328      	movs	r3, #40	@ 0x28
 80014d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014d4:	2307      	movs	r3, #7
 80014d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014d8:	2302      	movs	r3, #2
 80014da:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014dc:	2302      	movs	r3, #2
 80014de:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4618      	mov	r0, r3
 80014e6:	f002 fa43 	bl	8003970 <HAL_RCC_OscConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80014f0:	f000 f86e 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f4:	230f      	movs	r3, #15
 80014f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f8:	2303      	movs	r3, #3
 80014fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001508:	463b      	mov	r3, r7
 800150a:	2104      	movs	r1, #4
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fe0b 	bl	8004128 <HAL_RCC_ClockConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001518:	f000 f85a 	bl	80015d0 <Error_Handler>
  }
}
 800151c:	bf00      	nop
 800151e:	3758      	adds	r7, #88	@ 0x58
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
// This callback is called when idle line is detected or buffer is full
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
	//for BLE
    if (huart == &BLE_UART)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a16      	ldr	r2, [pc, #88]	@ (800158c <HAL_UARTEx_RxEventCallback+0x68>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d125      	bne.n	8001584 <HAL_UARTEx_RxEventCallback+0x60>
    {
        // Copy the data from DMA buffer to message buffer
        memcpy(messageBuffer, rxBuffer, Size);
 8001538:	887b      	ldrh	r3, [r7, #2]
 800153a:	461a      	mov	r2, r3
 800153c:	4914      	ldr	r1, [pc, #80]	@ (8001590 <HAL_UARTEx_RxEventCallback+0x6c>)
 800153e:	4815      	ldr	r0, [pc, #84]	@ (8001594 <HAL_UARTEx_RxEventCallback+0x70>)
 8001540:	f005 ff9b 	bl	800747a <memcpy>

        // Null-terminate the string
        messageBuffer[Size] = '\0';
 8001544:	887b      	ldrh	r3, [r7, #2]
 8001546:	4a13      	ldr	r2, [pc, #76]	@ (8001594 <HAL_UARTEx_RxEventCallback+0x70>)
 8001548:	2100      	movs	r1, #0
 800154a:	54d1      	strb	r1, [r2, r3]

        // Set flag for main loop
        messageReady = 1;
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <HAL_UARTEx_RxEventCallback+0x74>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]

        HAL_UART_AbortReceive(huart);  // Stop DMA
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f003 fe42 	bl	80051dc <HAL_UART_AbortReceive>
        memset(rxBuffer, 0, sizeof(rxBuffer));  // Reset buffer
 8001558:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800155c:	2100      	movs	r1, #0
 800155e:	480c      	ldr	r0, [pc, #48]	@ (8001590 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001560:	f005 ff00 	bl	8007364 <memset>

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 8001564:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001568:	4909      	ldr	r1, [pc, #36]	@ (8001590 <HAL_UARTEx_RxEventCallback+0x6c>)
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f005 f8ee 	bl	800674c <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0204 	bic.w	r2, r2, #4
 8001582:	601a      	str	r2, [r3, #0]
    }
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200004c4 	.word	0x200004c4
 8001590:	200006f8 	.word	0x200006f8
 8001594:	20000180 	.word	0x20000180
 8001598:	20000280 	.word	0x20000280

0800159c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BUTTON_BACK_Pin)
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015ac:	d009      	beq.n	80015c2 <HAL_GPIO_EXTI_Callback+0x26>
    {

    }
    else if (GPIO_Pin == BUTTON_NEXT_Pin)
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015b4:	d005      	beq.n	80015c2 <HAL_GPIO_EXTI_Callback+0x26>
    {

    }
    else if (GPIO_Pin == MAX30102_INT_Pin)
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d102      	bne.n	80015c2 <HAL_GPIO_EXTI_Callback+0x26>
    {
    	max30102_on_interrupt(&max30102);
 80015bc:	4803      	ldr	r0, [pc, #12]	@ (80015cc <HAL_GPIO_EXTI_Callback+0x30>)
 80015be:	f005 fa05 	bl	80069cc <max30102_on_interrupt>
    }
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000284 	.word	0x20000284

080015d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <Error_Handler+0x8>

080015dc <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <MX_SPI2_Init+0x74>)
 80015e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <MX_SPI2_Init+0x78>)
 80015e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <MX_SPI2_Init+0x74>)
 80015e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015ee:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <MX_SPI2_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f4:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <MX_SPI2_Init+0x74>)
 80015f6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015fc:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <MX_SPI2_Init+0x74>)
 80015fe:	2202      	movs	r2, #2
 8001600:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001602:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <MX_SPI2_Init+0x74>)
 8001604:	2201      	movs	r2, #1
 8001606:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <MX_SPI2_Init+0x74>)
 800160a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800160e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001610:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <MX_SPI2_Init+0x74>)
 8001612:	2220      	movs	r2, #32
 8001614:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001616:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <MX_SPI2_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800161c:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <MX_SPI2_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <MX_SPI2_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001628:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <MX_SPI2_Init+0x74>)
 800162a:	2207      	movs	r2, #7
 800162c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800162e:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <MX_SPI2_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <MX_SPI2_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	@ (8001650 <MX_SPI2_Init+0x74>)
 800163c:	f003 fc54 	bl	8004ee8 <HAL_SPI_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001646:	f7ff ffc3 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000038c 	.word	0x2000038c
 8001654:	40003800 	.word	0x40003800

08001658 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	@ 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a2c      	ldr	r2, [pc, #176]	@ (8001728 <HAL_SPI_MspInit+0xd0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d151      	bne.n	800171e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800167a:	4b2c      	ldr	r3, [pc, #176]	@ (800172c <HAL_SPI_MspInit+0xd4>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167e:	4a2b      	ldr	r2, [pc, #172]	@ (800172c <HAL_SPI_MspInit+0xd4>)
 8001680:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001684:	6593      	str	r3, [r2, #88]	@ 0x58
 8001686:	4b29      	ldr	r3, [pc, #164]	@ (800172c <HAL_SPI_MspInit+0xd4>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	4b26      	ldr	r3, [pc, #152]	@ (800172c <HAL_SPI_MspInit+0xd4>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	4a25      	ldr	r2, [pc, #148]	@ (800172c <HAL_SPI_MspInit+0xd4>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169e:	4b23      	ldr	r3, [pc, #140]	@ (800172c <HAL_SPI_MspInit+0xd4>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ST7789_SCK_Pin|ST7789_MISO_Pin|ST7789_MOSI_Pin;
 80016aa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b8:	2303      	movs	r3, #3
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016bc:	2305      	movs	r3, #5
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	481a      	ldr	r0, [pc, #104]	@ (8001730 <HAL_SPI_MspInit+0xd8>)
 80016c8:	f001 f834 	bl	8002734 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80016cc:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <HAL_SPI_MspInit+0xdc>)
 80016ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001738 <HAL_SPI_MspInit+0xe0>)
 80016d0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80016d2:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <HAL_SPI_MspInit+0xdc>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016d8:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <HAL_SPI_MspInit+0xdc>)
 80016da:	2210      	movs	r2, #16
 80016dc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <HAL_SPI_MspInit+0xdc>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016e4:	4b13      	ldr	r3, [pc, #76]	@ (8001734 <HAL_SPI_MspInit+0xdc>)
 80016e6:	2280      	movs	r2, #128	@ 0x80
 80016e8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ea:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_SPI_MspInit+0xdc>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016f0:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <HAL_SPI_MspInit+0xdc>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80016f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <HAL_SPI_MspInit+0xdc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001734 <HAL_SPI_MspInit+0xdc>)
 80016fe:	2200      	movs	r2, #0
 8001700:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001702:	480c      	ldr	r0, [pc, #48]	@ (8001734 <HAL_SPI_MspInit+0xdc>)
 8001704:	f000 fd94 	bl	8002230 <HAL_DMA_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800170e:	f7ff ff5f 	bl	80015d0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a07      	ldr	r2, [pc, #28]	@ (8001734 <HAL_SPI_MspInit+0xdc>)
 8001716:	655a      	str	r2, [r3, #84]	@ 0x54
 8001718:	4a06      	ldr	r2, [pc, #24]	@ (8001734 <HAL_SPI_MspInit+0xdc>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800171e:	bf00      	nop
 8001720:	3728      	adds	r7, #40	@ 0x28
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40003800 	.word	0x40003800
 800172c:	40021000 	.word	0x40021000
 8001730:	48000400 	.word	0x48000400
 8001734:	200003f0 	.word	0x200003f0
 8001738:	40020058 	.word	0x40020058

0800173c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <HAL_MspInit+0x44>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001746:	4a0e      	ldr	r2, [pc, #56]	@ (8001780 <HAL_MspInit+0x44>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6613      	str	r3, [r2, #96]	@ 0x60
 800174e:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <HAL_MspInit+0x44>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <HAL_MspInit+0x44>)
 800175c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175e:	4a08      	ldr	r2, [pc, #32]	@ (8001780 <HAL_MspInit+0x44>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001764:	6593      	str	r3, [r2, #88]	@ 0x58
 8001766:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_MspInit+0x44>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <NMI_Handler+0x4>

0800178c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <HardFault_Handler+0x4>

08001794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <MemManage_Handler+0x4>

0800179c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <UsageFault_Handler+0x4>

080017ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017da:	f000 fbd3 	bl	8001f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAX30102_INT_Pin);
 80017e6:	2004      	movs	r0, #4
 80017e8:	f001 f966 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <DMA1_Channel2_IRQHandler+0x10>)
 80017f6:	f000 feb2 	bl	800255e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200006ac 	.word	0x200006ac

08001804 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <DMA1_Channel3_IRQHandler+0x10>)
 800180a:	f000 fea8 	bl	800255e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000664 	.word	0x20000664

08001818 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <DMA1_Channel4_IRQHandler+0x10>)
 800181e:	f000 fe9e 	bl	800255e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000061c 	.word	0x2000061c

0800182c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <DMA1_Channel5_IRQHandler+0x10>)
 8001832:	f000 fe94 	bl	800255e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200003f0 	.word	0x200003f0

08001840 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU6500_INT_Pin);
 8001844:	2020      	movs	r0, #32
 8001846:	f001 f937 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_BACK_Pin);
 800184a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800184e:	f001 f933 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_NEXT_Pin);
 8001852:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001856:	f001 f92f 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001864:	4802      	ldr	r0, [pc, #8]	@ (8001870 <USART1_IRQHandler+0x10>)
 8001866:	f003 fd6b 	bl	8005340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200004c4 	.word	0x200004c4

08001874 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001878:	4802      	ldr	r0, [pc, #8]	@ (8001884 <USART3_IRQHandler+0x10>)
 800187a:	f003 fd61 	bl	8005340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	2000054c 	.word	0x2000054c

08001888 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800188c:	4802      	ldr	r0, [pc, #8]	@ (8001898 <DMA2_Channel7_IRQHandler+0x10>)
 800188e:	f000 fe66 	bl	800255e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200005d4 	.word	0x200005d4

0800189c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	e00a      	b.n	80018c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ae:	f3af 8000 	nop.w
 80018b2:	4601      	mov	r1, r0
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	60ba      	str	r2, [r7, #8]
 80018ba:	b2ca      	uxtb	r2, r1
 80018bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	3301      	adds	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	dbf0      	blt.n	80018ae <_read+0x12>
  }

  return len;
 80018cc:	687b      	ldr	r3, [r7, #4]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e009      	b.n	80018fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	60ba      	str	r2, [r7, #8]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fcf5 	bl	80012e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	dbf1      	blt.n	80018e8 <_write+0x12>
  }
  return len;
 8001904:	687b      	ldr	r3, [r7, #4]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <_close>:

int _close(int file)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001936:	605a      	str	r2, [r3, #4]
  return 0;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <_isatty>:

int _isatty(int file)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001980:	4a14      	ldr	r2, [pc, #80]	@ (80019d4 <_sbrk+0x5c>)
 8001982:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <_sbrk+0x60>)
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800198c:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <_sbrk+0x64>)
 8001996:	4a12      	ldr	r2, [pc, #72]	@ (80019e0 <_sbrk+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199a:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d207      	bcs.n	80019b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a8:	f005 fd3a 	bl	8007420 <__errno>
 80019ac:	4603      	mov	r3, r0
 80019ae:	220c      	movs	r2, #12
 80019b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	e009      	b.n	80019cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019be:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a05      	ldr	r2, [pc, #20]	@ (80019dc <_sbrk+0x64>)
 80019c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20018000 	.word	0x20018000
 80019d8:	00000400 	.word	0x00000400
 80019dc:	20000438 	.word	0x20000438
 80019e0:	20000948 	.word	0x20000948

080019e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <SystemInit+0x20>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ee:	4a05      	ldr	r2, [pc, #20]	@ (8001a04 <SystemInit+0x20>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <MX_UART4_Init+0x58>)
 8001a0e:	4a15      	ldr	r2, [pc, #84]	@ (8001a64 <MX_UART4_Init+0x5c>)
 8001a10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <MX_UART4_Init+0x58>)
 8001a14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a18:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <MX_UART4_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <MX_UART4_Init+0x58>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <MX_UART4_Init+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <MX_UART4_Init+0x58>)
 8001a2e:	220c      	movs	r2, #12
 8001a30:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a32:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <MX_UART4_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a38:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <MX_UART4_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a3e:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <MX_UART4_Init+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <MX_UART4_Init+0x58>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a4a:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <MX_UART4_Init+0x58>)
 8001a4c:	f003 faef 	bl	800502e <HAL_UART_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001a56:	f7ff fdbb 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000043c 	.word	0x2000043c
 8001a64:	40004c00 	.word	0x40004c00

08001a68 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001a6e:	4a15      	ldr	r2, [pc, #84]	@ (8001ac4 <MX_USART1_UART_Init+0x5c>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a72:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001a74:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aaa:	4805      	ldr	r0, [pc, #20]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001aac:	f003 fabf 	bl	800502e <HAL_UART_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001ab6:	f7ff fd8b 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200004c4 	.word	0x200004c4
 8001ac4:	40013800 	.word	0x40013800

08001ac8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001acc:	4b14      	ldr	r3, [pc, #80]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001ace:	4a15      	ldr	r2, [pc, #84]	@ (8001b24 <MX_USART3_UART_Init+0x5c>)
 8001ad0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001ad2:	4b13      	ldr	r3, [pc, #76]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001ad4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ad8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ada:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001aee:	220c      	movs	r2, #12
 8001af0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af8:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001afe:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b0a:	4805      	ldr	r0, [pc, #20]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001b0c:	f003 fa8f 	bl	800502e <HAL_UART_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b16:	f7ff fd5b 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000054c 	.word	0x2000054c
 8001b24:	40004800 	.word	0x40004800

08001b28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b0b0      	sub	sp, #192	@ 0xc0
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b44:	2288      	movs	r2, #136	@ 0x88
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f005 fc0b 	bl	8007364 <memset>
  if(uartHandle->Instance==UART4)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a6f      	ldr	r2, [pc, #444]	@ (8001d10 <HAL_UART_MspInit+0x1e8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d13c      	bne.n	8001bd2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 fd03 	bl	8004570 <HAL_RCCEx_PeriphCLKConfig>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b70:	f7ff fd2e 	bl	80015d0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b74:	4b67      	ldr	r3, [pc, #412]	@ (8001d14 <HAL_UART_MspInit+0x1ec>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b78:	4a66      	ldr	r2, [pc, #408]	@ (8001d14 <HAL_UART_MspInit+0x1ec>)
 8001b7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b80:	4b64      	ldr	r3, [pc, #400]	@ (8001d14 <HAL_UART_MspInit+0x1ec>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b88:	623b      	str	r3, [r7, #32]
 8001b8a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8c:	4b61      	ldr	r3, [pc, #388]	@ (8001d14 <HAL_UART_MspInit+0x1ec>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b90:	4a60      	ldr	r2, [pc, #384]	@ (8001d14 <HAL_UART_MspInit+0x1ec>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b98:	4b5e      	ldr	r3, [pc, #376]	@ (8001d14 <HAL_UART_MspInit+0x1ec>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001bbc:	2308      	movs	r3, #8
 8001bbe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bcc:	f000 fdb2 	bl	8002734 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001bd0:	e147      	b.n	8001e62 <HAL_UART_MspInit+0x33a>
  else if(uartHandle->Instance==USART1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a50      	ldr	r2, [pc, #320]	@ (8001d18 <HAL_UART_MspInit+0x1f0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	f040 80a7 	bne.w	8001d2c <HAL_UART_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bde:	2301      	movs	r3, #1
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001be2:	2300      	movs	r3, #0
 8001be4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fcc0 	bl	8004570 <HAL_RCCEx_PeriphCLKConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001bf6:	f7ff fceb 	bl	80015d0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bfa:	4b46      	ldr	r3, [pc, #280]	@ (8001d14 <HAL_UART_MspInit+0x1ec>)
 8001bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bfe:	4a45      	ldr	r2, [pc, #276]	@ (8001d14 <HAL_UART_MspInit+0x1ec>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c04:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c06:	4b43      	ldr	r3, [pc, #268]	@ (8001d14 <HAL_UART_MspInit+0x1ec>)
 8001c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	4b40      	ldr	r3, [pc, #256]	@ (8001d14 <HAL_UART_MspInit+0x1ec>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c16:	4a3f      	ldr	r2, [pc, #252]	@ (8001d14 <HAL_UART_MspInit+0x1ec>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d14 <HAL_UART_MspInit+0x1ec>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BLE_TX_Pin|BLE_RX_Pin;
 8001c2a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c44:	2307      	movs	r3, #7
 8001c46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c54:	f000 fd6e 	bl	8002734 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Channel7;
 8001c58:	4b30      	ldr	r3, [pc, #192]	@ (8001d1c <HAL_UART_MspInit+0x1f4>)
 8001c5a:	4a31      	ldr	r2, [pc, #196]	@ (8001d20 <HAL_UART_MspInit+0x1f8>)
 8001c5c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d1c <HAL_UART_MspInit+0x1f4>)
 8001c60:	2202      	movs	r2, #2
 8001c62:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c64:	4b2d      	ldr	r3, [pc, #180]	@ (8001d1c <HAL_UART_MspInit+0x1f4>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d1c <HAL_UART_MspInit+0x1f4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c70:	4b2a      	ldr	r3, [pc, #168]	@ (8001d1c <HAL_UART_MspInit+0x1f4>)
 8001c72:	2280      	movs	r2, #128	@ 0x80
 8001c74:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c76:	4b29      	ldr	r3, [pc, #164]	@ (8001d1c <HAL_UART_MspInit+0x1f4>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c7c:	4b27      	ldr	r3, [pc, #156]	@ (8001d1c <HAL_UART_MspInit+0x1f4>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001c82:	4b26      	ldr	r3, [pc, #152]	@ (8001d1c <HAL_UART_MspInit+0x1f4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c88:	4b24      	ldr	r3, [pc, #144]	@ (8001d1c <HAL_UART_MspInit+0x1f4>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c8e:	4823      	ldr	r0, [pc, #140]	@ (8001d1c <HAL_UART_MspInit+0x1f4>)
 8001c90:	f000 face 	bl	8002230 <HAL_DMA_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_UART_MspInit+0x176>
      Error_Handler();
 8001c9a:	f7ff fc99 	bl	80015d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8001d1c <HAL_UART_MspInit+0x1f4>)
 8001ca2:	675a      	str	r2, [r3, #116]	@ 0x74
 8001ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d1c <HAL_UART_MspInit+0x1f4>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001caa:	4b1e      	ldr	r3, [pc, #120]	@ (8001d24 <HAL_UART_MspInit+0x1fc>)
 8001cac:	4a1e      	ldr	r2, [pc, #120]	@ (8001d28 <HAL_UART_MspInit+0x200>)
 8001cae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d24 <HAL_UART_MspInit+0x1fc>)
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <HAL_UART_MspInit+0x1fc>)
 8001cb8:	2210      	movs	r2, #16
 8001cba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cbc:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <HAL_UART_MspInit+0x1fc>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cc2:	4b18      	ldr	r3, [pc, #96]	@ (8001d24 <HAL_UART_MspInit+0x1fc>)
 8001cc4:	2280      	movs	r2, #128	@ 0x80
 8001cc6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cc8:	4b16      	ldr	r3, [pc, #88]	@ (8001d24 <HAL_UART_MspInit+0x1fc>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cce:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <HAL_UART_MspInit+0x1fc>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001cd4:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <HAL_UART_MspInit+0x1fc>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cda:	4b12      	ldr	r3, [pc, #72]	@ (8001d24 <HAL_UART_MspInit+0x1fc>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001ce0:	4810      	ldr	r0, [pc, #64]	@ (8001d24 <HAL_UART_MspInit+0x1fc>)
 8001ce2:	f000 faa5 	bl	8002230 <HAL_DMA_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_UART_MspInit+0x1c8>
      Error_Handler();
 8001cec:	f7ff fc70 	bl	80015d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8001d24 <HAL_UART_MspInit+0x1fc>)
 8001cf4:	671a      	str	r2, [r3, #112]	@ 0x70
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	@ (8001d24 <HAL_UART_MspInit+0x1fc>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2025      	movs	r0, #37	@ 0x25
 8001d02:	f000 fa5e 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d06:	2025      	movs	r0, #37	@ 0x25
 8001d08:	f000 fa77 	bl	80021fa <HAL_NVIC_EnableIRQ>
}
 8001d0c:	e0a9      	b.n	8001e62 <HAL_UART_MspInit+0x33a>
 8001d0e:	bf00      	nop
 8001d10:	40004c00 	.word	0x40004c00
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40013800 	.word	0x40013800
 8001d1c:	200005d4 	.word	0x200005d4
 8001d20:	40020480 	.word	0x40020480
 8001d24:	2000061c 	.word	0x2000061c
 8001d28:	40020044 	.word	0x40020044
  else if(uartHandle->Instance==USART3)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a4e      	ldr	r2, [pc, #312]	@ (8001e6c <HAL_UART_MspInit+0x344>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	f040 8095 	bne.w	8001e62 <HAL_UART_MspInit+0x33a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d38:	2304      	movs	r3, #4
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 fc13 	bl	8004570 <HAL_RCCEx_PeriphCLKConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 8001d50:	f7ff fc3e 	bl	80015d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d54:	4b46      	ldr	r3, [pc, #280]	@ (8001e70 <HAL_UART_MspInit+0x348>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d58:	4a45      	ldr	r2, [pc, #276]	@ (8001e70 <HAL_UART_MspInit+0x348>)
 8001d5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d60:	4b43      	ldr	r3, [pc, #268]	@ (8001e70 <HAL_UART_MspInit+0x348>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6c:	4b40      	ldr	r3, [pc, #256]	@ (8001e70 <HAL_UART_MspInit+0x348>)
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d70:	4a3f      	ldr	r2, [pc, #252]	@ (8001e70 <HAL_UART_MspInit+0x348>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d78:	4b3d      	ldr	r3, [pc, #244]	@ (8001e70 <HAL_UART_MspInit+0x348>)
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001d84:	2330      	movs	r3, #48	@ 0x30
 8001d86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d96:	2303      	movs	r3, #3
 8001d98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d9c:	2307      	movs	r3, #7
 8001d9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001da6:	4619      	mov	r1, r3
 8001da8:	4832      	ldr	r0, [pc, #200]	@ (8001e74 <HAL_UART_MspInit+0x34c>)
 8001daa:	f000 fcc3 	bl	8002734 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001dae:	4b32      	ldr	r3, [pc, #200]	@ (8001e78 <HAL_UART_MspInit+0x350>)
 8001db0:	4a32      	ldr	r2, [pc, #200]	@ (8001e7c <HAL_UART_MspInit+0x354>)
 8001db2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 8001db4:	4b30      	ldr	r3, [pc, #192]	@ (8001e78 <HAL_UART_MspInit+0x350>)
 8001db6:	2202      	movs	r2, #2
 8001db8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dba:	4b2f      	ldr	r3, [pc, #188]	@ (8001e78 <HAL_UART_MspInit+0x350>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e78 <HAL_UART_MspInit+0x350>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dc6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e78 <HAL_UART_MspInit+0x350>)
 8001dc8:	2280      	movs	r2, #128	@ 0x80
 8001dca:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e78 <HAL_UART_MspInit+0x350>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dd2:	4b29      	ldr	r3, [pc, #164]	@ (8001e78 <HAL_UART_MspInit+0x350>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001dd8:	4b27      	ldr	r3, [pc, #156]	@ (8001e78 <HAL_UART_MspInit+0x350>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dde:	4b26      	ldr	r3, [pc, #152]	@ (8001e78 <HAL_UART_MspInit+0x350>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001de4:	4824      	ldr	r0, [pc, #144]	@ (8001e78 <HAL_UART_MspInit+0x350>)
 8001de6:	f000 fa23 	bl	8002230 <HAL_DMA_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_UART_MspInit+0x2cc>
      Error_Handler();
 8001df0:	f7ff fbee 	bl	80015d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a20      	ldr	r2, [pc, #128]	@ (8001e78 <HAL_UART_MspInit+0x350>)
 8001df8:	675a      	str	r2, [r3, #116]	@ 0x74
 8001dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8001e78 <HAL_UART_MspInit+0x350>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001e00:	4b1f      	ldr	r3, [pc, #124]	@ (8001e80 <HAL_UART_MspInit+0x358>)
 8001e02:	4a20      	ldr	r2, [pc, #128]	@ (8001e84 <HAL_UART_MspInit+0x35c>)
 8001e04:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 8001e06:	4b1e      	ldr	r3, [pc, #120]	@ (8001e80 <HAL_UART_MspInit+0x358>)
 8001e08:	2202      	movs	r2, #2
 8001e0a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e80 <HAL_UART_MspInit+0x358>)
 8001e0e:	2210      	movs	r2, #16
 8001e10:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e12:	4b1b      	ldr	r3, [pc, #108]	@ (8001e80 <HAL_UART_MspInit+0x358>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e18:	4b19      	ldr	r3, [pc, #100]	@ (8001e80 <HAL_UART_MspInit+0x358>)
 8001e1a:	2280      	movs	r2, #128	@ 0x80
 8001e1c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e1e:	4b18      	ldr	r3, [pc, #96]	@ (8001e80 <HAL_UART_MspInit+0x358>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e24:	4b16      	ldr	r3, [pc, #88]	@ (8001e80 <HAL_UART_MspInit+0x358>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001e2a:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <HAL_UART_MspInit+0x358>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e30:	4b13      	ldr	r3, [pc, #76]	@ (8001e80 <HAL_UART_MspInit+0x358>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001e36:	4812      	ldr	r0, [pc, #72]	@ (8001e80 <HAL_UART_MspInit+0x358>)
 8001e38:	f000 f9fa 	bl	8002230 <HAL_DMA_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_UART_MspInit+0x31e>
      Error_Handler();
 8001e42:	f7ff fbc5 	bl	80015d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a0d      	ldr	r2, [pc, #52]	@ (8001e80 <HAL_UART_MspInit+0x358>)
 8001e4a:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e80 <HAL_UART_MspInit+0x358>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	2027      	movs	r0, #39	@ 0x27
 8001e58:	f000 f9b3 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e5c:	2027      	movs	r0, #39	@ 0x27
 8001e5e:	f000 f9cc 	bl	80021fa <HAL_NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	37c0      	adds	r7, #192	@ 0xc0
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40004800 	.word	0x40004800
 8001e70:	40021000 	.word	0x40021000
 8001e74:	48000800 	.word	0x48000800
 8001e78:	20000664 	.word	0x20000664
 8001e7c:	40020030 	.word	0x40020030
 8001e80:	200006ac 	.word	0x200006ac
 8001e84:	4002001c 	.word	0x4002001c

08001e88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ec0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e8c:	f7ff fdaa 	bl	80019e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e90:	480c      	ldr	r0, [pc, #48]	@ (8001ec4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e92:	490d      	ldr	r1, [pc, #52]	@ (8001ec8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e94:	4a0d      	ldr	r2, [pc, #52]	@ (8001ecc <LoopForever+0xe>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e98:	e002      	b.n	8001ea0 <LoopCopyDataInit>

08001e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9e:	3304      	adds	r3, #4

08001ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea4:	d3f9      	bcc.n	8001e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ed4 <LoopForever+0x16>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eac:	e001      	b.n	8001eb2 <LoopFillZerobss>

08001eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb0:	3204      	adds	r2, #4

08001eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb4:	d3fb      	bcc.n	8001eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eb6:	f005 fab9 	bl	800742c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eba:	f7ff fa23 	bl	8001304 <main>

08001ebe <LoopForever>:

LoopForever:
    b LoopForever
 8001ebe:	e7fe      	b.n	8001ebe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001ecc:	08007e14 	.word	0x08007e14
  ldr r2, =_sbss
 8001ed0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001ed4:	20000944 	.word	0x20000944

08001ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <ADC1_2_IRQHandler>

08001eda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	f000 f961 	bl	80021ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eea:	200f      	movs	r0, #15
 8001eec:	f000 f80e 	bl	8001f0c <HAL_InitTick>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	71fb      	strb	r3, [r7, #7]
 8001efa:	e001      	b.n	8001f00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001efc:	f7ff fc1e 	bl	800173c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f00:	79fb      	ldrb	r3, [r7, #7]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f18:	4b17      	ldr	r3, [pc, #92]	@ (8001f78 <HAL_InitTick+0x6c>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d023      	beq.n	8001f68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f20:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <HAL_InitTick+0x70>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <HAL_InitTick+0x6c>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f96d 	bl	8002216 <HAL_SYSTICK_Config>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10f      	bne.n	8001f62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b0f      	cmp	r3, #15
 8001f46:	d809      	bhi.n	8001f5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	f000 f937 	bl	80021c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f54:	4a0a      	ldr	r2, [pc, #40]	@ (8001f80 <HAL_InitTick+0x74>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e007      	b.n	8001f6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	e004      	b.n	8001f6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	73fb      	strb	r3, [r7, #15]
 8001f66:	e001      	b.n	8001f6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000004 	.word	0x20000004

08001f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_IncTick+0x20>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <HAL_IncTick+0x24>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	4a04      	ldr	r2, [pc, #16]	@ (8001fa8 <HAL_IncTick+0x24>)
 8001f96:	6013      	str	r3, [r2, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000008 	.word	0x20000008
 8001fa8:	200006f4 	.word	0x200006f4

08001fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	@ (8001fc0 <HAL_GetTick+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	200006f4 	.word	0x200006f4

08001fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fcc:	f7ff ffee 	bl	8001fac <HAL_GetTick>
 8001fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fdc:	d005      	beq.n	8001fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fde:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <HAL_Delay+0x44>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fea:	bf00      	nop
 8001fec:	f7ff ffde 	bl	8001fac <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d8f7      	bhi.n	8001fec <HAL_Delay+0x28>
  {
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000008 	.word	0x20000008

0800200c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002028:	4013      	ands	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002034:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800203c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203e:	4a04      	ldr	r2, [pc, #16]	@ (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	60d3      	str	r3, [r2, #12]
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002058:	4b04      	ldr	r3, [pc, #16]	@ (800206c <__NVIC_GetPriorityGrouping+0x18>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	f003 0307 	and.w	r3, r3, #7
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	2b00      	cmp	r3, #0
 8002080:	db0b      	blt.n	800209a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	f003 021f 	and.w	r2, r3, #31
 8002088:	4907      	ldr	r1, [pc, #28]	@ (80020a8 <__NVIC_EnableIRQ+0x38>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	2001      	movs	r0, #1
 8002092:	fa00 f202 	lsl.w	r2, r0, r2
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000e100 	.word	0xe000e100

080020ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db0a      	blt.n	80020d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	490c      	ldr	r1, [pc, #48]	@ (80020f8 <__NVIC_SetPriority+0x4c>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d4:	e00a      	b.n	80020ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4908      	ldr	r1, [pc, #32]	@ (80020fc <__NVIC_SetPriority+0x50>)
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	3b04      	subs	r3, #4
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	761a      	strb	r2, [r3, #24]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000e100 	.word	0xe000e100
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	@ 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f1c3 0307 	rsb	r3, r3, #7
 800211a:	2b04      	cmp	r3, #4
 800211c:	bf28      	it	cs
 800211e:	2304      	movcs	r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3304      	adds	r3, #4
 8002126:	2b06      	cmp	r3, #6
 8002128:	d902      	bls.n	8002130 <NVIC_EncodePriority+0x30>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3b03      	subs	r3, #3
 800212e:	e000      	b.n	8002132 <NVIC_EncodePriority+0x32>
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43d9      	mvns	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	4313      	orrs	r3, r2
         );
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	@ 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002178:	d301      	bcc.n	800217e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217a:	2301      	movs	r3, #1
 800217c:	e00f      	b.n	800219e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217e:	4a0a      	ldr	r2, [pc, #40]	@ (80021a8 <SysTick_Config+0x40>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002186:	210f      	movs	r1, #15
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f7ff ff8e 	bl	80020ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002190:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <SysTick_Config+0x40>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002196:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <SysTick_Config+0x40>)
 8002198:	2207      	movs	r2, #7
 800219a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	e000e010 	.word	0xe000e010

080021ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff29 	bl	800200c <__NVIC_SetPriorityGrouping>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021d4:	f7ff ff3e 	bl	8002054 <__NVIC_GetPriorityGrouping>
 80021d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	6978      	ldr	r0, [r7, #20]
 80021e0:	f7ff ff8e 	bl	8002100 <NVIC_EncodePriority>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff5d 	bl	80020ac <__NVIC_SetPriority>
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff31 	bl	8002070 <__NVIC_EnableIRQ>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff ffa2 	bl	8002168 <SysTick_Config>
 8002224:	4603      	mov	r3, r0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e098      	b.n	8002374 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	4b4d      	ldr	r3, [pc, #308]	@ (8002380 <HAL_DMA_Init+0x150>)
 800224a:	429a      	cmp	r2, r3
 800224c:	d80f      	bhi.n	800226e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	4b4b      	ldr	r3, [pc, #300]	@ (8002384 <HAL_DMA_Init+0x154>)
 8002256:	4413      	add	r3, r2
 8002258:	4a4b      	ldr	r2, [pc, #300]	@ (8002388 <HAL_DMA_Init+0x158>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	009a      	lsls	r2, r3, #2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a48      	ldr	r2, [pc, #288]	@ (800238c <HAL_DMA_Init+0x15c>)
 800226a:	641a      	str	r2, [r3, #64]	@ 0x40
 800226c:	e00e      	b.n	800228c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	4b46      	ldr	r3, [pc, #280]	@ (8002390 <HAL_DMA_Init+0x160>)
 8002276:	4413      	add	r3, r2
 8002278:	4a43      	ldr	r2, [pc, #268]	@ (8002388 <HAL_DMA_Init+0x158>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	009a      	lsls	r2, r3, #2
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a42      	ldr	r2, [pc, #264]	@ (8002394 <HAL_DMA_Init+0x164>)
 800228a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80022a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80022b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022e6:	d039      	beq.n	800235c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ec:	4a27      	ldr	r2, [pc, #156]	@ (800238c <HAL_DMA_Init+0x15c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d11a      	bne.n	8002328 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022f2:	4b29      	ldr	r3, [pc, #164]	@ (8002398 <HAL_DMA_Init+0x168>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	f003 031c 	and.w	r3, r3, #28
 80022fe:	210f      	movs	r1, #15
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	4924      	ldr	r1, [pc, #144]	@ (8002398 <HAL_DMA_Init+0x168>)
 8002308:	4013      	ands	r3, r2
 800230a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800230c:	4b22      	ldr	r3, [pc, #136]	@ (8002398 <HAL_DMA_Init+0x168>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002318:	f003 031c 	and.w	r3, r3, #28
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	491d      	ldr	r1, [pc, #116]	@ (8002398 <HAL_DMA_Init+0x168>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
 8002326:	e019      	b.n	800235c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002328:	4b1c      	ldr	r3, [pc, #112]	@ (800239c <HAL_DMA_Init+0x16c>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002330:	f003 031c 	and.w	r3, r3, #28
 8002334:	210f      	movs	r1, #15
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	4917      	ldr	r1, [pc, #92]	@ (800239c <HAL_DMA_Init+0x16c>)
 800233e:	4013      	ands	r3, r2
 8002340:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002342:	4b16      	ldr	r3, [pc, #88]	@ (800239c <HAL_DMA_Init+0x16c>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6859      	ldr	r1, [r3, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234e:	f003 031c 	and.w	r3, r3, #28
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	4911      	ldr	r1, [pc, #68]	@ (800239c <HAL_DMA_Init+0x16c>)
 8002358:	4313      	orrs	r3, r2
 800235a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	40020407 	.word	0x40020407
 8002384:	bffdfff8 	.word	0xbffdfff8
 8002388:	cccccccd 	.word	0xcccccccd
 800238c:	40020000 	.word	0x40020000
 8002390:	bffdfbf8 	.word	0xbffdfbf8
 8002394:	40020400 	.word	0x40020400
 8002398:	400200a8 	.word	0x400200a8
 800239c:	400204a8 	.word	0x400204a8

080023a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_DMA_Start_IT+0x20>
 80023bc:	2302      	movs	r3, #2
 80023be:	e04b      	b.n	8002458 <HAL_DMA_Start_IT+0xb8>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d13a      	bne.n	800244a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0201 	bic.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	68b9      	ldr	r1, [r7, #8]
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 f96b 	bl	80026d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	2b00      	cmp	r3, #0
 8002404:	d008      	beq.n	8002418 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 020e 	orr.w	r2, r2, #14
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	e00f      	b.n	8002438 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0204 	bic.w	r2, r2, #4
 8002426:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 020a 	orr.w	r2, r2, #10
 8002436:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	e005      	b.n	8002456 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002452:	2302      	movs	r3, #2
 8002454:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002456:	7dfb      	ldrb	r3, [r7, #23]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d008      	beq.n	800248a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2204      	movs	r2, #4
 800247c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e022      	b.n	80024d0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 020e 	bic.w	r2, r2, #14
 8002498:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0201 	bic.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ae:	f003 021c 	and.w	r2, r3, #28
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	2101      	movs	r1, #1
 80024b8:	fa01 f202 	lsl.w	r2, r1, r2
 80024bc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d005      	beq.n	8002500 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2204      	movs	r2, #4
 80024f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	e029      	b.n	8002554 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 020e 	bic.w	r2, r2, #14
 800250e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0201 	bic.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002524:	f003 021c 	and.w	r2, r3, #28
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	2101      	movs	r1, #1
 800252e:	fa01 f202 	lsl.w	r2, r1, r2
 8002532:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	4798      	blx	r3
    }
  }
  return status;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b084      	sub	sp, #16
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	f003 031c 	and.w	r3, r3, #28
 800257e:	2204      	movs	r2, #4
 8002580:	409a      	lsls	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d026      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x7a>
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d021      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d107      	bne.n	80025b2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0204 	bic.w	r2, r2, #4
 80025b0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	f003 021c 	and.w	r2, r3, #28
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	2104      	movs	r1, #4
 80025c0:	fa01 f202 	lsl.w	r2, r1, r2
 80025c4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d071      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80025d6:	e06c      	b.n	80026b2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025dc:	f003 031c 	and.w	r3, r3, #28
 80025e0:	2202      	movs	r2, #2
 80025e2:	409a      	lsls	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d02e      	beq.n	800264a <HAL_DMA_IRQHandler+0xec>
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d029      	beq.n	800264a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10b      	bne.n	800261c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 020a 	bic.w	r2, r2, #10
 8002612:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002620:	f003 021c 	and.w	r2, r3, #28
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	2102      	movs	r1, #2
 800262a:	fa01 f202 	lsl.w	r2, r1, r2
 800262e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263c:	2b00      	cmp	r3, #0
 800263e:	d038      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002648:	e033      	b.n	80026b2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264e:	f003 031c 	and.w	r3, r3, #28
 8002652:	2208      	movs	r2, #8
 8002654:	409a      	lsls	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4013      	ands	r3, r2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d02a      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x156>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d025      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 020e 	bic.w	r2, r2, #14
 8002676:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267c:	f003 021c 	and.w	r2, r3, #28
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	2101      	movs	r1, #1
 8002686:	fa01 f202 	lsl.w	r2, r1, r2
 800268a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d004      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80026b2:	bf00      	nop
 80026b4:	bf00      	nop
}
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e6:	f003 021c 	and.w	r2, r3, #28
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	2101      	movs	r1, #1
 80026f0:	fa01 f202 	lsl.w	r2, r1, r2
 80026f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b10      	cmp	r3, #16
 8002704:	d108      	bne.n	8002718 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002716:	e007      	b.n	8002728 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	60da      	str	r2, [r3, #12]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002734:	b480      	push	{r7}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002742:	e17f      	b.n	8002a44 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	2101      	movs	r1, #1
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	4013      	ands	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 8171 	beq.w	8002a3e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b01      	cmp	r3, #1
 8002766:	d005      	beq.n	8002774 <HAL_GPIO_Init+0x40>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d130      	bne.n	80027d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027aa:	2201      	movs	r2, #1
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4013      	ands	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	091b      	lsrs	r3, r3, #4
 80027c0:	f003 0201 	and.w	r2, r3, #1
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d118      	bne.n	8002814 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80027e8:	2201      	movs	r2, #1
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	08db      	lsrs	r3, r3, #3
 80027fe:	f003 0201 	and.w	r2, r3, #1
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b03      	cmp	r3, #3
 800281e:	d017      	beq.n	8002850 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2203      	movs	r2, #3
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d123      	bne.n	80028a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	08da      	lsrs	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3208      	adds	r2, #8
 8002864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002868:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	220f      	movs	r2, #15
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	08da      	lsrs	r2, r3, #3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3208      	adds	r2, #8
 800289e:	6939      	ldr	r1, [r7, #16]
 80028a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	2203      	movs	r2, #3
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0203 	and.w	r2, r3, #3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80ac 	beq.w	8002a3e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e6:	4b5f      	ldr	r3, [pc, #380]	@ (8002a64 <HAL_GPIO_Init+0x330>)
 80028e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ea:	4a5e      	ldr	r2, [pc, #376]	@ (8002a64 <HAL_GPIO_Init+0x330>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80028f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002a64 <HAL_GPIO_Init+0x330>)
 80028f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028fe:	4a5a      	ldr	r2, [pc, #360]	@ (8002a68 <HAL_GPIO_Init+0x334>)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	089b      	lsrs	r3, r3, #2
 8002904:	3302      	adds	r3, #2
 8002906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	220f      	movs	r2, #15
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4013      	ands	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002928:	d025      	beq.n	8002976 <HAL_GPIO_Init+0x242>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a4f      	ldr	r2, [pc, #316]	@ (8002a6c <HAL_GPIO_Init+0x338>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d01f      	beq.n	8002972 <HAL_GPIO_Init+0x23e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4e      	ldr	r2, [pc, #312]	@ (8002a70 <HAL_GPIO_Init+0x33c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d019      	beq.n	800296e <HAL_GPIO_Init+0x23a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a4d      	ldr	r2, [pc, #308]	@ (8002a74 <HAL_GPIO_Init+0x340>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d013      	beq.n	800296a <HAL_GPIO_Init+0x236>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a4c      	ldr	r2, [pc, #304]	@ (8002a78 <HAL_GPIO_Init+0x344>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00d      	beq.n	8002966 <HAL_GPIO_Init+0x232>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a7c <HAL_GPIO_Init+0x348>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d007      	beq.n	8002962 <HAL_GPIO_Init+0x22e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a4a      	ldr	r2, [pc, #296]	@ (8002a80 <HAL_GPIO_Init+0x34c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d101      	bne.n	800295e <HAL_GPIO_Init+0x22a>
 800295a:	2306      	movs	r3, #6
 800295c:	e00c      	b.n	8002978 <HAL_GPIO_Init+0x244>
 800295e:	2307      	movs	r3, #7
 8002960:	e00a      	b.n	8002978 <HAL_GPIO_Init+0x244>
 8002962:	2305      	movs	r3, #5
 8002964:	e008      	b.n	8002978 <HAL_GPIO_Init+0x244>
 8002966:	2304      	movs	r3, #4
 8002968:	e006      	b.n	8002978 <HAL_GPIO_Init+0x244>
 800296a:	2303      	movs	r3, #3
 800296c:	e004      	b.n	8002978 <HAL_GPIO_Init+0x244>
 800296e:	2302      	movs	r3, #2
 8002970:	e002      	b.n	8002978 <HAL_GPIO_Init+0x244>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_GPIO_Init+0x244>
 8002976:	2300      	movs	r3, #0
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	f002 0203 	and.w	r2, r2, #3
 800297e:	0092      	lsls	r2, r2, #2
 8002980:	4093      	lsls	r3, r2
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002988:	4937      	ldr	r1, [pc, #220]	@ (8002a68 <HAL_GPIO_Init+0x334>)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	3302      	adds	r3, #2
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002996:	4b3b      	ldr	r3, [pc, #236]	@ (8002a84 <HAL_GPIO_Init+0x350>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	43db      	mvns	r3, r3
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029ba:	4a32      	ldr	r2, [pc, #200]	@ (8002a84 <HAL_GPIO_Init+0x350>)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029c0:	4b30      	ldr	r3, [pc, #192]	@ (8002a84 <HAL_GPIO_Init+0x350>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029e4:	4a27      	ldr	r2, [pc, #156]	@ (8002a84 <HAL_GPIO_Init+0x350>)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029ea:	4b26      	ldr	r3, [pc, #152]	@ (8002a84 <HAL_GPIO_Init+0x350>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a84 <HAL_GPIO_Init+0x350>)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a14:	4b1b      	ldr	r3, [pc, #108]	@ (8002a84 <HAL_GPIO_Init+0x350>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a38:	4a12      	ldr	r2, [pc, #72]	@ (8002a84 <HAL_GPIO_Init+0x350>)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	3301      	adds	r3, #1
 8002a42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f47f ae78 	bne.w	8002744 <HAL_GPIO_Init+0x10>
  }
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40010000 	.word	0x40010000
 8002a6c:	48000400 	.word	0x48000400
 8002a70:	48000800 	.word	0x48000800
 8002a74:	48000c00 	.word	0x48000c00
 8002a78:	48001000 	.word	0x48001000
 8002a7c:	48001400 	.word	0x48001400
 8002a80:	48001800 	.word	0x48001800
 8002a84:	40010400 	.word	0x40010400

08002a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	807b      	strh	r3, [r7, #2]
 8002a94:	4613      	mov	r3, r2
 8002a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a98:	787b      	ldrb	r3, [r7, #1]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a9e:	887a      	ldrh	r2, [r7, #2]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002aa4:	e002      	b.n	8002aac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ac2:	4b08      	ldr	r3, [pc, #32]	@ (8002ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac4:	695a      	ldr	r2, [r3, #20]
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d006      	beq.n	8002adc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ace:	4a05      	ldr	r2, [pc, #20]	@ (8002ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fd60 	bl	800159c <HAL_GPIO_EXTI_Callback>
  }
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40010400 	.word	0x40010400

08002ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e08d      	b.n	8002c16 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe fafe 	bl	8001110 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2224      	movs	r2, #36	@ 0x24
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d107      	bne.n	8002b62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	e006      	b.n	8002b70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d108      	bne.n	8002b8a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	e007      	b.n	8002b9a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ba8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69d9      	ldr	r1, [r3, #28]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1a      	ldr	r2, [r3, #32]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	817b      	strh	r3, [r7, #10]
 8002c30:	4613      	mov	r3, r2
 8002c32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	f040 80fd 	bne.w	8002e3c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_I2C_Master_Transmit+0x30>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e0f6      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x21e>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c58:	f7ff f9a8 	bl	8001fac <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	2319      	movs	r3, #25
 8002c64:	2201      	movs	r2, #1
 8002c66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 fb02 	bl	8003274 <I2C_WaitOnFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e0e1      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2221      	movs	r2, #33	@ 0x21
 8002c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2210      	movs	r2, #16
 8002c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	893a      	ldrh	r2, [r7, #8]
 8002c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2bff      	cmp	r3, #255	@ 0xff
 8002caa:	d906      	bls.n	8002cba <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	22ff      	movs	r2, #255	@ 0xff
 8002cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002cb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	e007      	b.n	8002cca <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002cc4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cc8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d024      	beq.n	8002d1c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	781a      	ldrb	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	8979      	ldrh	r1, [r7, #10]
 8002d0e:	4b4e      	ldr	r3, [pc, #312]	@ (8002e48 <HAL_I2C_Master_Transmit+0x228>)
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 fcfd 	bl	8003714 <I2C_TransferConfig>
 8002d1a:	e066      	b.n	8002dea <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	8979      	ldrh	r1, [r7, #10]
 8002d24:	4b48      	ldr	r3, [pc, #288]	@ (8002e48 <HAL_I2C_Master_Transmit+0x228>)
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 fcf2 	bl	8003714 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002d30:	e05b      	b.n	8002dea <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	6a39      	ldr	r1, [r7, #32]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 faf5 	bl	8003326 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e07b      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d034      	beq.n	8002dea <HAL_I2C_Master_Transmit+0x1ca>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d130      	bne.n	8002dea <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2180      	movs	r1, #128	@ 0x80
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fa6e 	bl	8003274 <I2C_WaitOnFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e04d      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2bff      	cmp	r3, #255	@ 0xff
 8002daa:	d90e      	bls.n	8002dca <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	22ff      	movs	r2, #255	@ 0xff
 8002db0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	8979      	ldrh	r1, [r7, #10]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 fca6 	bl	8003714 <I2C_TransferConfig>
 8002dc8:	e00f      	b.n	8002dea <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	8979      	ldrh	r1, [r7, #10]
 8002ddc:	2300      	movs	r3, #0
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 fc95 	bl	8003714 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d19e      	bne.n	8002d32 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	6a39      	ldr	r1, [r7, #32]
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 fadb 	bl	80033b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e01a      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e4c <HAL_I2C_Master_Transmit+0x22c>)
 8002e1c:	400b      	ands	r3, r1
 8002e1e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e000      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	80002000 	.word	0x80002000
 8002e4c:	fe00e800 	.word	0xfe00e800

08002e50 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	817b      	strh	r3, [r7, #10]
 8002e60:	4613      	mov	r3, r2
 8002e62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	f040 80db 	bne.w	8003028 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_I2C_Master_Receive+0x30>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e0d4      	b.n	800302a <HAL_I2C_Master_Receive+0x1da>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e88:	f7ff f890 	bl	8001fac <HAL_GetTick>
 8002e8c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	2319      	movs	r3, #25
 8002e94:	2201      	movs	r2, #1
 8002e96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f9ea 	bl	8003274 <I2C_WaitOnFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e0bf      	b.n	800302a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2222      	movs	r2, #34	@ 0x22
 8002eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	893a      	ldrh	r2, [r7, #8]
 8002eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2bff      	cmp	r3, #255	@ 0xff
 8002eda:	d90e      	bls.n	8002efa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	8979      	ldrh	r1, [r7, #10]
 8002eea:	4b52      	ldr	r3, [pc, #328]	@ (8003034 <HAL_I2C_Master_Receive+0x1e4>)
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fc0e 	bl	8003714 <I2C_TransferConfig>
 8002ef8:	e06d      	b.n	8002fd6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	8979      	ldrh	r1, [r7, #10]
 8002f0c:	4b49      	ldr	r3, [pc, #292]	@ (8003034 <HAL_I2C_Master_Receive+0x1e4>)
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 fbfd 	bl	8003714 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002f1a:	e05c      	b.n	8002fd6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	6a39      	ldr	r1, [r7, #32]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fa8b 	bl	800343c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e07c      	b.n	800302a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d034      	beq.n	8002fd6 <HAL_I2C_Master_Receive+0x186>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d130      	bne.n	8002fd6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2180      	movs	r1, #128	@ 0x80
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f978 	bl	8003274 <I2C_WaitOnFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e04d      	b.n	800302a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2bff      	cmp	r3, #255	@ 0xff
 8002f96:	d90e      	bls.n	8002fb6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	22ff      	movs	r2, #255	@ 0xff
 8002f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	8979      	ldrh	r1, [r7, #10]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 fbb0 	bl	8003714 <I2C_TransferConfig>
 8002fb4:	e00f      	b.n	8002fd6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	8979      	ldrh	r1, [r7, #10]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fb9f 	bl	8003714 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d19d      	bne.n	8002f1c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	6a39      	ldr	r1, [r7, #32]
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f9e5 	bl	80033b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e01a      	b.n	800302a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6859      	ldr	r1, [r3, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4b0c      	ldr	r3, [pc, #48]	@ (8003038 <HAL_I2C_Master_Receive+0x1e8>)
 8003008:	400b      	ands	r3, r1
 800300a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	e000      	b.n	800302a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003028:	2302      	movs	r3, #2
  }
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	80002400 	.word	0x80002400
 8003038:	fe00e800 	.word	0xfe00e800

0800303c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	@ 0x28
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	460b      	mov	r3, r1
 800304a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b20      	cmp	r3, #32
 800305a:	f040 80d6 	bne.w	800320a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003068:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800306c:	d101      	bne.n	8003072 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800306e:	2302      	movs	r3, #2
 8003070:	e0cc      	b.n	800320c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_I2C_IsDeviceReady+0x44>
 800307c:	2302      	movs	r3, #2
 800307e:	e0c5      	b.n	800320c <HAL_I2C_IsDeviceReady+0x1d0>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2224      	movs	r2, #36	@ 0x24
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d107      	bne.n	80030ae <HAL_I2C_IsDeviceReady+0x72>
 800309e:	897b      	ldrh	r3, [r7, #10]
 80030a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030ac:	e006      	b.n	80030bc <HAL_I2C_IsDeviceReady+0x80>
 80030ae:	897b      	ldrh	r3, [r7, #10]
 80030b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030b8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80030c2:	f7fe ff73 	bl	8001fac <HAL_GetTick>
 80030c6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	bf0c      	ite	eq
 80030ec:	2301      	moveq	r3, #1
 80030ee:	2300      	movne	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80030f4:	e034      	b.n	8003160 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d01a      	beq.n	8003134 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030fe:	f7fe ff55 	bl	8001fac <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d302      	bcc.n	8003114 <HAL_I2C_IsDeviceReady+0xd8>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10f      	bne.n	8003134 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e06b      	b.n	800320c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b20      	cmp	r3, #32
 8003140:	bf0c      	ite	eq
 8003142:	2301      	moveq	r3, #1
 8003144:	2300      	movne	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b10      	cmp	r3, #16
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003160:	7ffb      	ldrb	r3, [r7, #31]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d102      	bne.n	800316c <HAL_I2C_IsDeviceReady+0x130>
 8003166:	7fbb      	ldrb	r3, [r7, #30]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0c4      	beq.n	80030f6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b10      	cmp	r3, #16
 8003178:	d01a      	beq.n	80031b0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2200      	movs	r2, #0
 8003182:	2120      	movs	r1, #32
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f875 	bl	8003274 <I2C_WaitOnFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e03b      	b.n	800320c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2220      	movs	r2, #32
 800319a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e02d      	b.n	800320c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2200      	movs	r2, #0
 80031b8:	2120      	movs	r1, #32
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f85a 	bl	8003274 <I2C_WaitOnFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e020      	b.n	800320c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2210      	movs	r2, #16
 80031d0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2220      	movs	r2, #32
 80031d8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	3301      	adds	r3, #1
 80031de:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	f63f af56 	bhi.w	8003096 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f6:	f043 0220 	orr.w	r2, r3, #32
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800320a:	2302      	movs	r3, #2
  }
}
 800320c:	4618      	mov	r0, r3
 800320e:	3720      	adds	r7, #32
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003220:	4618      	mov	r0, r3
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b02      	cmp	r3, #2
 8003240:	d103      	bne.n	800324a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2200      	movs	r2, #0
 8003248:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d007      	beq.n	8003268 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	619a      	str	r2, [r3, #24]
  }
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003284:	e03b      	b.n	80032fe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	6839      	ldr	r1, [r7, #0]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f962 	bl	8003554 <I2C_IsErrorOccurred>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e041      	b.n	800331e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d02d      	beq.n	80032fe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a2:	f7fe fe83 	bl	8001fac <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d302      	bcc.n	80032b8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d122      	bne.n	80032fe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	4013      	ands	r3, r2
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	bf0c      	ite	eq
 80032c8:	2301      	moveq	r3, #1
 80032ca:	2300      	movne	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d113      	bne.n	80032fe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e00f      	b.n	800331e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	699a      	ldr	r2, [r3, #24]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4013      	ands	r3, r2
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	429a      	cmp	r2, r3
 800330c:	bf0c      	ite	eq
 800330e:	2301      	moveq	r3, #1
 8003310:	2300      	movne	r3, #0
 8003312:	b2db      	uxtb	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	429a      	cmp	r2, r3
 800331a:	d0b4      	beq.n	8003286 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003332:	e033      	b.n	800339c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f90b 	bl	8003554 <I2C_IsErrorOccurred>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e031      	b.n	80033ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334e:	d025      	beq.n	800339c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003350:	f7fe fe2c 	bl	8001fac <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	429a      	cmp	r2, r3
 800335e:	d302      	bcc.n	8003366 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d11a      	bne.n	800339c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b02      	cmp	r3, #2
 8003372:	d013      	beq.n	800339c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003378:	f043 0220 	orr.w	r2, r3, #32
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e007      	b.n	80033ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d1c4      	bne.n	8003334 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033c0:	e02f      	b.n	8003422 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f8c4 	bl	8003554 <I2C_IsErrorOccurred>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e02d      	b.n	8003432 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d6:	f7fe fde9 	bl	8001fac <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d302      	bcc.n	80033ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d11a      	bne.n	8003422 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d013      	beq.n	8003422 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fe:	f043 0220 	orr.w	r2, r3, #32
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e007      	b.n	8003432 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b20      	cmp	r3, #32
 800342e:	d1c8      	bne.n	80033c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800344c:	e071      	b.n	8003532 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f87e 	bl	8003554 <I2C_IsErrorOccurred>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b20      	cmp	r3, #32
 800346e:	d13b      	bne.n	80034e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003470:	7dfb      	ldrb	r3, [r7, #23]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d138      	bne.n	80034e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b04      	cmp	r3, #4
 8003482:	d105      	bne.n	8003490 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b10      	cmp	r3, #16
 800349c:	d121      	bne.n	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2210      	movs	r2, #16
 80034a4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2204      	movs	r2, #4
 80034aa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2220      	movs	r2, #32
 80034b2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6859      	ldr	r1, [r3, #4]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4b24      	ldr	r3, [pc, #144]	@ (8003550 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80034c0:	400b      	ands	r3, r1
 80034c2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	75fb      	strb	r3, [r7, #23]
 80034e0:	e002      	b.n	80034e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80034e8:	f7fe fd60 	bl	8001fac <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d302      	bcc.n	80034fe <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d119      	bne.n	8003532 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d116      	bne.n	8003532 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b04      	cmp	r3, #4
 8003510:	d00f      	beq.n	8003532 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003516:	f043 0220 	orr.w	r2, r3, #32
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b04      	cmp	r3, #4
 800353e:	d002      	beq.n	8003546 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003540:	7dfb      	ldrb	r3, [r7, #23]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d083      	beq.n	800344e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003546:	7dfb      	ldrb	r3, [r7, #23]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	fe00e800 	.word	0xfe00e800

08003554 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	@ 0x28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	d068      	beq.n	8003652 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2210      	movs	r2, #16
 8003586:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003588:	e049      	b.n	800361e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d045      	beq.n	800361e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003592:	f7fe fd0b 	bl	8001fac <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d302      	bcc.n	80035a8 <I2C_IsErrorOccurred+0x54>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d13a      	bne.n	800361e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035ca:	d121      	bne.n	8003610 <I2C_IsErrorOccurred+0xbc>
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035d2:	d01d      	beq.n	8003610 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d01a      	beq.n	8003610 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035ea:	f7fe fcdf 	bl	8001fac <HAL_GetTick>
 80035ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f0:	e00e      	b.n	8003610 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035f2:	f7fe fcdb 	bl	8001fac <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b19      	cmp	r3, #25
 80035fe:	d907      	bls.n	8003610 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	f043 0320 	orr.w	r3, r3, #32
 8003606:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800360e:	e006      	b.n	800361e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b20      	cmp	r3, #32
 800361c:	d1e9      	bne.n	80035f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b20      	cmp	r3, #32
 800362a:	d003      	beq.n	8003634 <I2C_IsErrorOccurred+0xe0>
 800362c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0aa      	beq.n	800358a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003638:	2b00      	cmp	r3, #0
 800363a:	d103      	bne.n	8003644 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2220      	movs	r2, #32
 8003642:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	f043 0304 	orr.w	r3, r3, #4
 800364a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00b      	beq.n	800367c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003674:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00b      	beq.n	800369e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	f043 0308 	orr.w	r3, r3, #8
 800368c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003696:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00b      	beq.n	80036c0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	f043 0302 	orr.w	r3, r3, #2
 80036ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80036c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01c      	beq.n	8003702 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f7ff fdaf 	bl	800322c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003710 <I2C_IsErrorOccurred+0x1bc>)
 80036da:	400b      	ands	r3, r1
 80036dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003702:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003706:	4618      	mov	r0, r3
 8003708:	3728      	adds	r7, #40	@ 0x28
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	fe00e800 	.word	0xfe00e800

08003714 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	607b      	str	r3, [r7, #4]
 800371e:	460b      	mov	r3, r1
 8003720:	817b      	strh	r3, [r7, #10]
 8003722:	4613      	mov	r3, r2
 8003724:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003726:	897b      	ldrh	r3, [r7, #10]
 8003728:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800372c:	7a7b      	ldrb	r3, [r7, #9]
 800372e:	041b      	lsls	r3, r3, #16
 8003730:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003734:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	4313      	orrs	r3, r2
 800373e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003742:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	0d5b      	lsrs	r3, r3, #21
 800374e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003752:	4b08      	ldr	r3, [pc, #32]	@ (8003774 <I2C_TransferConfig+0x60>)
 8003754:	430b      	orrs	r3, r1
 8003756:	43db      	mvns	r3, r3
 8003758:	ea02 0103 	and.w	r1, r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003766:	bf00      	nop
 8003768:	371c      	adds	r7, #28
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	03ff63ff 	.word	0x03ff63ff

08003778 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b20      	cmp	r3, #32
 800378c:	d138      	bne.n	8003800 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003798:	2302      	movs	r3, #2
 800379a:	e032      	b.n	8003802 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2224      	movs	r2, #36	@ 0x24
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6819      	ldr	r1, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e000      	b.n	8003802 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003800:	2302      	movs	r3, #2
  }
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b20      	cmp	r3, #32
 8003822:	d139      	bne.n	8003898 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800382e:	2302      	movs	r3, #2
 8003830:	e033      	b.n	800389a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2224      	movs	r2, #36	@ 0x24
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0201 	bic.w	r2, r2, #1
 8003850:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003860:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	021b      	lsls	r3, r3, #8
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	e000      	b.n	800389a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003898:	2302      	movs	r3, #2
  }
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038ac:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40007000 	.word	0x40007000

080038c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038d2:	d130      	bne.n	8003936 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038d4:	4b23      	ldr	r3, [pc, #140]	@ (8003964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038e0:	d038      	beq.n	8003954 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038e2:	4b20      	ldr	r3, [pc, #128]	@ (8003964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003968 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2232      	movs	r2, #50	@ 0x32
 80038f8:	fb02 f303 	mul.w	r3, r2, r3
 80038fc:	4a1b      	ldr	r2, [pc, #108]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	0c9b      	lsrs	r3, r3, #18
 8003904:	3301      	adds	r3, #1
 8003906:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003908:	e002      	b.n	8003910 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	3b01      	subs	r3, #1
 800390e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003910:	4b14      	ldr	r3, [pc, #80]	@ (8003964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800391c:	d102      	bne.n	8003924 <HAL_PWREx_ControlVoltageScaling+0x60>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f2      	bne.n	800390a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003924:	4b0f      	ldr	r3, [pc, #60]	@ (8003964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800392c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003930:	d110      	bne.n	8003954 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e00f      	b.n	8003956 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003936:	4b0b      	ldr	r3, [pc, #44]	@ (8003964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800393e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003942:	d007      	beq.n	8003954 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003944:	4b07      	ldr	r3, [pc, #28]	@ (8003964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800394c:	4a05      	ldr	r2, [pc, #20]	@ (8003964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800394e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003952:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40007000 	.word	0x40007000
 8003968:	20000000 	.word	0x20000000
 800396c:	431bde83 	.word	0x431bde83

08003970 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e3ca      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003982:	4b97      	ldr	r3, [pc, #604]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800398c:	4b94      	ldr	r3, [pc, #592]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0310 	and.w	r3, r3, #16
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 80e4 	beq.w	8003b6c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <HAL_RCC_OscConfig+0x4a>
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	f040 808b 	bne.w	8003ac8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	f040 8087 	bne.w	8003ac8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039ba:	4b89      	ldr	r3, [pc, #548]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_RCC_OscConfig+0x62>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e3a2      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1a      	ldr	r2, [r3, #32]
 80039d6:	4b82      	ldr	r3, [pc, #520]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d004      	beq.n	80039ec <HAL_RCC_OscConfig+0x7c>
 80039e2:	4b7f      	ldr	r3, [pc, #508]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ea:	e005      	b.n	80039f8 <HAL_RCC_OscConfig+0x88>
 80039ec:	4b7c      	ldr	r3, [pc, #496]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 80039ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d223      	bcs.n	8003a44 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fd55 	bl	80044b0 <RCC_SetFlashLatencyFromMSIRange>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e383      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a10:	4b73      	ldr	r3, [pc, #460]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a72      	ldr	r2, [pc, #456]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003a16:	f043 0308 	orr.w	r3, r3, #8
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	4b70      	ldr	r3, [pc, #448]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	496d      	ldr	r1, [pc, #436]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a2e:	4b6c      	ldr	r3, [pc, #432]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	4968      	ldr	r1, [pc, #416]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
 8003a42:	e025      	b.n	8003a90 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a44:	4b66      	ldr	r3, [pc, #408]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a65      	ldr	r2, [pc, #404]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003a4a:	f043 0308 	orr.w	r3, r3, #8
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	4b63      	ldr	r3, [pc, #396]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4960      	ldr	r1, [pc, #384]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a62:	4b5f      	ldr	r3, [pc, #380]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	495b      	ldr	r1, [pc, #364]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d109      	bne.n	8003a90 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 fd15 	bl	80044b0 <RCC_SetFlashLatencyFromMSIRange>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e343      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a90:	f000 fc4a 	bl	8004328 <HAL_RCC_GetSysClockFreq>
 8003a94:	4602      	mov	r2, r0
 8003a96:	4b52      	ldr	r3, [pc, #328]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	4950      	ldr	r1, [pc, #320]	@ (8003be4 <HAL_RCC_OscConfig+0x274>)
 8003aa2:	5ccb      	ldrb	r3, [r1, r3]
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8003aac:	4a4e      	ldr	r2, [pc, #312]	@ (8003be8 <HAL_RCC_OscConfig+0x278>)
 8003aae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ab0:	4b4e      	ldr	r3, [pc, #312]	@ (8003bec <HAL_RCC_OscConfig+0x27c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe fa29 	bl	8001f0c <HAL_InitTick>
 8003aba:	4603      	mov	r3, r0
 8003abc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d052      	beq.n	8003b6a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	e327      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d032      	beq.n	8003b36 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ad0:	4b43      	ldr	r3, [pc, #268]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a42      	ldr	r2, [pc, #264]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003adc:	f7fe fa66 	bl	8001fac <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ae4:	f7fe fa62 	bl	8001fac <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e310      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003af6:	4b3a      	ldr	r3, [pc, #232]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b02:	4b37      	ldr	r3, [pc, #220]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a36      	ldr	r2, [pc, #216]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003b08:	f043 0308 	orr.w	r3, r3, #8
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	4b34      	ldr	r3, [pc, #208]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	4931      	ldr	r1, [pc, #196]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b20:	4b2f      	ldr	r3, [pc, #188]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	492c      	ldr	r1, [pc, #176]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]
 8003b34:	e01a      	b.n	8003b6c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b36:	4b2a      	ldr	r3, [pc, #168]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a29      	ldr	r2, [pc, #164]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b42:	f7fe fa33 	bl	8001fac <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b4a:	f7fe fa2f 	bl	8001fac <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e2dd      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b5c:	4b20      	ldr	r3, [pc, #128]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f0      	bne.n	8003b4a <HAL_RCC_OscConfig+0x1da>
 8003b68:	e000      	b.n	8003b6c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b6a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d074      	beq.n	8003c62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d005      	beq.n	8003b8a <HAL_RCC_OscConfig+0x21a>
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2b0c      	cmp	r3, #12
 8003b82:	d10e      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d10b      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b8a:	4b15      	ldr	r3, [pc, #84]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d064      	beq.n	8003c60 <HAL_RCC_OscConfig+0x2f0>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d160      	bne.n	8003c60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e2ba      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003baa:	d106      	bne.n	8003bba <HAL_RCC_OscConfig+0x24a>
 8003bac:	4b0c      	ldr	r3, [pc, #48]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003bb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	e026      	b.n	8003c08 <HAL_RCC_OscConfig+0x298>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bc2:	d115      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x280>
 8003bc4:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a05      	ldr	r2, [pc, #20]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003bca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	4b03      	ldr	r3, [pc, #12]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a02      	ldr	r2, [pc, #8]	@ (8003be0 <HAL_RCC_OscConfig+0x270>)
 8003bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	e014      	b.n	8003c08 <HAL_RCC_OscConfig+0x298>
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000
 8003be4:	08007d88 	.word	0x08007d88
 8003be8:	20000000 	.word	0x20000000
 8003bec:	20000004 	.word	0x20000004
 8003bf0:	4ba0      	ldr	r3, [pc, #640]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a9f      	ldr	r2, [pc, #636]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003bf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	4b9d      	ldr	r3, [pc, #628]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a9c      	ldr	r2, [pc, #624]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003c02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d013      	beq.n	8003c38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fe f9cc 	bl	8001fac <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c18:	f7fe f9c8 	bl	8001fac <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	@ 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e276      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c2a:	4b92      	ldr	r3, [pc, #584]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x2a8>
 8003c36:	e014      	b.n	8003c62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fe f9b8 	bl	8001fac <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c40:	f7fe f9b4 	bl	8001fac <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b64      	cmp	r3, #100	@ 0x64
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e262      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c52:	4b88      	ldr	r3, [pc, #544]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x2d0>
 8003c5e:	e000      	b.n	8003c62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d060      	beq.n	8003d30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d005      	beq.n	8003c80 <HAL_RCC_OscConfig+0x310>
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2b0c      	cmp	r3, #12
 8003c78:	d119      	bne.n	8003cae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d116      	bne.n	8003cae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c80:	4b7c      	ldr	r3, [pc, #496]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_RCC_OscConfig+0x328>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e23f      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c98:	4b76      	ldr	r3, [pc, #472]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	061b      	lsls	r3, r3, #24
 8003ca6:	4973      	ldr	r1, [pc, #460]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cac:	e040      	b.n	8003d30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d023      	beq.n	8003cfe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb6:	4b6f      	ldr	r3, [pc, #444]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a6e      	ldr	r2, [pc, #440]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc2:	f7fe f973 	bl	8001fac <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cca:	f7fe f96f 	bl	8001fac <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e21d      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cdc:	4b65      	ldr	r3, [pc, #404]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f0      	beq.n	8003cca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce8:	4b62      	ldr	r3, [pc, #392]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	061b      	lsls	r3, r3, #24
 8003cf6:	495f      	ldr	r1, [pc, #380]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]
 8003cfc:	e018      	b.n	8003d30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a5c      	ldr	r2, [pc, #368]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fe f94f 	bl	8001fac <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d12:	f7fe f94b 	bl	8001fac <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e1f9      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d24:	4b53      	ldr	r3, [pc, #332]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1f0      	bne.n	8003d12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d03c      	beq.n	8003db6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d01c      	beq.n	8003d7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d44:	4b4b      	ldr	r3, [pc, #300]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d4a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d54:	f7fe f92a 	bl	8001fac <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d5c:	f7fe f926 	bl	8001fac <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e1d4      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d6e:	4b41      	ldr	r3, [pc, #260]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0ef      	beq.n	8003d5c <HAL_RCC_OscConfig+0x3ec>
 8003d7c:	e01b      	b.n	8003db6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d84:	4a3b      	ldr	r2, [pc, #236]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8e:	f7fe f90d 	bl	8001fac <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d96:	f7fe f909 	bl	8001fac <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e1b7      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003da8:	4b32      	ldr	r3, [pc, #200]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1ef      	bne.n	8003d96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 80a6 	beq.w	8003f10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10d      	bne.n	8003df0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd4:	4b27      	ldr	r3, [pc, #156]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd8:	4a26      	ldr	r2, [pc, #152]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dde:	6593      	str	r3, [r2, #88]	@ 0x58
 8003de0:	4b24      	ldr	r3, [pc, #144]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dec:	2301      	movs	r3, #1
 8003dee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df0:	4b21      	ldr	r3, [pc, #132]	@ (8003e78 <HAL_RCC_OscConfig+0x508>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d118      	bne.n	8003e2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8003e78 <HAL_RCC_OscConfig+0x508>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1d      	ldr	r2, [pc, #116]	@ (8003e78 <HAL_RCC_OscConfig+0x508>)
 8003e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e08:	f7fe f8d0 	bl	8001fac <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e10:	f7fe f8cc 	bl	8001fac <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e17a      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e22:	4b15      	ldr	r3, [pc, #84]	@ (8003e78 <HAL_RCC_OscConfig+0x508>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d108      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4d8>
 8003e36:	4b0f      	ldr	r3, [pc, #60]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003e3e:	f043 0301 	orr.w	r3, r3, #1
 8003e42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e46:	e029      	b.n	8003e9c <HAL_RCC_OscConfig+0x52c>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b05      	cmp	r3, #5
 8003e4e:	d115      	bne.n	8003e7c <HAL_RCC_OscConfig+0x50c>
 8003e50:	4b08      	ldr	r3, [pc, #32]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e56:	4a07      	ldr	r2, [pc, #28]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003e58:	f043 0304 	orr.w	r3, r3, #4
 8003e5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e60:	4b04      	ldr	r3, [pc, #16]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e66:	4a03      	ldr	r2, [pc, #12]	@ (8003e74 <HAL_RCC_OscConfig+0x504>)
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e70:	e014      	b.n	8003e9c <HAL_RCC_OscConfig+0x52c>
 8003e72:	bf00      	nop
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40007000 	.word	0x40007000
 8003e7c:	4b9c      	ldr	r3, [pc, #624]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e82:	4a9b      	ldr	r2, [pc, #620]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e8c:	4b98      	ldr	r3, [pc, #608]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e92:	4a97      	ldr	r2, [pc, #604]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8003e94:	f023 0304 	bic.w	r3, r3, #4
 8003e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d016      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea4:	f7fe f882 	bl	8001fac <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eac:	f7fe f87e 	bl	8001fac <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e12a      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec2:	4b8b      	ldr	r3, [pc, #556]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8003ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0ed      	beq.n	8003eac <HAL_RCC_OscConfig+0x53c>
 8003ed0:	e015      	b.n	8003efe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed2:	f7fe f86b 	bl	8001fac <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ed8:	e00a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eda:	f7fe f867 	bl	8001fac <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e113      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ef0:	4b7f      	ldr	r3, [pc, #508]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1ed      	bne.n	8003eda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003efe:	7ffb      	ldrb	r3, [r7, #31]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d105      	bne.n	8003f10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f04:	4b7a      	ldr	r3, [pc, #488]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8003f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f08:	4a79      	ldr	r2, [pc, #484]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8003f0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f0e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 80fe 	beq.w	8004116 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	f040 80d0 	bne.w	80040c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f24:	4b72      	ldr	r3, [pc, #456]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f003 0203 	and.w	r2, r3, #3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d130      	bne.n	8003f9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f42:	3b01      	subs	r3, #1
 8003f44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d127      	bne.n	8003f9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d11f      	bne.n	8003f9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f64:	2a07      	cmp	r2, #7
 8003f66:	bf14      	ite	ne
 8003f68:	2201      	movne	r2, #1
 8003f6a:	2200      	moveq	r2, #0
 8003f6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d113      	bne.n	8003f9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7c:	085b      	lsrs	r3, r3, #1
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d109      	bne.n	8003f9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	085b      	lsrs	r3, r3, #1
 8003f92:	3b01      	subs	r3, #1
 8003f94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d06e      	beq.n	8004078 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b0c      	cmp	r3, #12
 8003f9e:	d069      	beq.n	8004074 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fa0:	4b53      	ldr	r3, [pc, #332]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d105      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fac:	4b50      	ldr	r3, [pc, #320]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0ad      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fbc:	4b4c      	ldr	r3, [pc, #304]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a4b      	ldr	r2, [pc, #300]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8003fc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fc6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fc8:	f7fd fff0 	bl	8001fac <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fd ffec 	bl	8001fac <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e09a      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fe2:	4b43      	ldr	r3, [pc, #268]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fee:	4b40      	ldr	r3, [pc, #256]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	4b40      	ldr	r3, [pc, #256]	@ (80040f4 <HAL_RCC_OscConfig+0x784>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ffe:	3a01      	subs	r2, #1
 8004000:	0112      	lsls	r2, r2, #4
 8004002:	4311      	orrs	r1, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004008:	0212      	lsls	r2, r2, #8
 800400a:	4311      	orrs	r1, r2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004010:	0852      	lsrs	r2, r2, #1
 8004012:	3a01      	subs	r2, #1
 8004014:	0552      	lsls	r2, r2, #21
 8004016:	4311      	orrs	r1, r2
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800401c:	0852      	lsrs	r2, r2, #1
 800401e:	3a01      	subs	r2, #1
 8004020:	0652      	lsls	r2, r2, #25
 8004022:	4311      	orrs	r1, r2
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004028:	0912      	lsrs	r2, r2, #4
 800402a:	0452      	lsls	r2, r2, #17
 800402c:	430a      	orrs	r2, r1
 800402e:	4930      	ldr	r1, [pc, #192]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8004030:	4313      	orrs	r3, r2
 8004032:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004034:	4b2e      	ldr	r3, [pc, #184]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a2d      	ldr	r2, [pc, #180]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 800403a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800403e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004040:	4b2b      	ldr	r3, [pc, #172]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4a2a      	ldr	r2, [pc, #168]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8004046:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800404a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800404c:	f7fd ffae 	bl	8001fac <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004054:	f7fd ffaa 	bl	8001fac <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e058      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004066:	4b22      	ldr	r3, [pc, #136]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004072:	e050      	b.n	8004116 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e04f      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004078:	4b1d      	ldr	r3, [pc, #116]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d148      	bne.n	8004116 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004084:	4b1a      	ldr	r3, [pc, #104]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a19      	ldr	r2, [pc, #100]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 800408a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800408e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004090:	4b17      	ldr	r3, [pc, #92]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	4a16      	ldr	r2, [pc, #88]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 8004096:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800409a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800409c:	f7fd ff86 	bl	8001fac <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a4:	f7fd ff82 	bl	8001fac <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e030      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b6:	4b0e      	ldr	r3, [pc, #56]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x734>
 80040c2:	e028      	b.n	8004116 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b0c      	cmp	r3, #12
 80040c8:	d023      	beq.n	8004112 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ca:	4b09      	ldr	r3, [pc, #36]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a08      	ldr	r2, [pc, #32]	@ (80040f0 <HAL_RCC_OscConfig+0x780>)
 80040d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d6:	f7fd ff69 	bl	8001fac <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040dc:	e00c      	b.n	80040f8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040de:	f7fd ff65 	bl	8001fac <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d905      	bls.n	80040f8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e013      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
 80040f0:	40021000 	.word	0x40021000
 80040f4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f8:	4b09      	ldr	r3, [pc, #36]	@ (8004120 <HAL_RCC_OscConfig+0x7b0>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1ec      	bne.n	80040de <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004104:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <HAL_RCC_OscConfig+0x7b0>)
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	4905      	ldr	r1, [pc, #20]	@ (8004120 <HAL_RCC_OscConfig+0x7b0>)
 800410a:	4b06      	ldr	r3, [pc, #24]	@ (8004124 <HAL_RCC_OscConfig+0x7b4>)
 800410c:	4013      	ands	r3, r2
 800410e:	60cb      	str	r3, [r1, #12]
 8004110:	e001      	b.n	8004116 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3720      	adds	r7, #32
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000
 8004124:	feeefffc 	.word	0xfeeefffc

08004128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0e7      	b.n	800430c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800413c:	4b75      	ldr	r3, [pc, #468]	@ (8004314 <HAL_RCC_ClockConfig+0x1ec>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d910      	bls.n	800416c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4b72      	ldr	r3, [pc, #456]	@ (8004314 <HAL_RCC_ClockConfig+0x1ec>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f023 0207 	bic.w	r2, r3, #7
 8004152:	4970      	ldr	r1, [pc, #448]	@ (8004314 <HAL_RCC_ClockConfig+0x1ec>)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	4313      	orrs	r3, r2
 8004158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415a:	4b6e      	ldr	r3, [pc, #440]	@ (8004314 <HAL_RCC_ClockConfig+0x1ec>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d001      	beq.n	800416c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0cf      	b.n	800430c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d010      	beq.n	800419a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	4b66      	ldr	r3, [pc, #408]	@ (8004318 <HAL_RCC_ClockConfig+0x1f0>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004184:	429a      	cmp	r2, r3
 8004186:	d908      	bls.n	800419a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004188:	4b63      	ldr	r3, [pc, #396]	@ (8004318 <HAL_RCC_ClockConfig+0x1f0>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	4960      	ldr	r1, [pc, #384]	@ (8004318 <HAL_RCC_ClockConfig+0x1f0>)
 8004196:	4313      	orrs	r3, r2
 8004198:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d04c      	beq.n	8004240 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d107      	bne.n	80041be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ae:	4b5a      	ldr	r3, [pc, #360]	@ (8004318 <HAL_RCC_ClockConfig+0x1f0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d121      	bne.n	80041fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e0a6      	b.n	800430c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041c6:	4b54      	ldr	r3, [pc, #336]	@ (8004318 <HAL_RCC_ClockConfig+0x1f0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d115      	bne.n	80041fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e09a      	b.n	800430c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041de:	4b4e      	ldr	r3, [pc, #312]	@ (8004318 <HAL_RCC_ClockConfig+0x1f0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e08e      	b.n	800430c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004318 <HAL_RCC_ClockConfig+0x1f0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e086      	b.n	800430c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041fe:	4b46      	ldr	r3, [pc, #280]	@ (8004318 <HAL_RCC_ClockConfig+0x1f0>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f023 0203 	bic.w	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4943      	ldr	r1, [pc, #268]	@ (8004318 <HAL_RCC_ClockConfig+0x1f0>)
 800420c:	4313      	orrs	r3, r2
 800420e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004210:	f7fd fecc 	bl	8001fac <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	e00a      	b.n	800422e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004218:	f7fd fec8 	bl	8001fac <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e06e      	b.n	800430c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422e:	4b3a      	ldr	r3, [pc, #232]	@ (8004318 <HAL_RCC_ClockConfig+0x1f0>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 020c 	and.w	r2, r3, #12
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	429a      	cmp	r2, r3
 800423e:	d1eb      	bne.n	8004218 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d010      	beq.n	800426e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	4b31      	ldr	r3, [pc, #196]	@ (8004318 <HAL_RCC_ClockConfig+0x1f0>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004258:	429a      	cmp	r2, r3
 800425a:	d208      	bcs.n	800426e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800425c:	4b2e      	ldr	r3, [pc, #184]	@ (8004318 <HAL_RCC_ClockConfig+0x1f0>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	492b      	ldr	r1, [pc, #172]	@ (8004318 <HAL_RCC_ClockConfig+0x1f0>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800426e:	4b29      	ldr	r3, [pc, #164]	@ (8004314 <HAL_RCC_ClockConfig+0x1ec>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d210      	bcs.n	800429e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427c:	4b25      	ldr	r3, [pc, #148]	@ (8004314 <HAL_RCC_ClockConfig+0x1ec>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f023 0207 	bic.w	r2, r3, #7
 8004284:	4923      	ldr	r1, [pc, #140]	@ (8004314 <HAL_RCC_ClockConfig+0x1ec>)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	4313      	orrs	r3, r2
 800428a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800428c:	4b21      	ldr	r3, [pc, #132]	@ (8004314 <HAL_RCC_ClockConfig+0x1ec>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d001      	beq.n	800429e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e036      	b.n	800430c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d008      	beq.n	80042bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004318 <HAL_RCC_ClockConfig+0x1f0>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	4918      	ldr	r1, [pc, #96]	@ (8004318 <HAL_RCC_ClockConfig+0x1f0>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042c8:	4b13      	ldr	r3, [pc, #76]	@ (8004318 <HAL_RCC_ClockConfig+0x1f0>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	4910      	ldr	r1, [pc, #64]	@ (8004318 <HAL_RCC_ClockConfig+0x1f0>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042dc:	f000 f824 	bl	8004328 <HAL_RCC_GetSysClockFreq>
 80042e0:	4602      	mov	r2, r0
 80042e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <HAL_RCC_ClockConfig+0x1f0>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	091b      	lsrs	r3, r3, #4
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	490b      	ldr	r1, [pc, #44]	@ (800431c <HAL_RCC_ClockConfig+0x1f4>)
 80042ee:	5ccb      	ldrb	r3, [r1, r3]
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	fa22 f303 	lsr.w	r3, r2, r3
 80042f8:	4a09      	ldr	r2, [pc, #36]	@ (8004320 <HAL_RCC_ClockConfig+0x1f8>)
 80042fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042fc:	4b09      	ldr	r3, [pc, #36]	@ (8004324 <HAL_RCC_ClockConfig+0x1fc>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7fd fe03 	bl	8001f0c <HAL_InitTick>
 8004306:	4603      	mov	r3, r0
 8004308:	72fb      	strb	r3, [r7, #11]

  return status;
 800430a:	7afb      	ldrb	r3, [r7, #11]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40022000 	.word	0x40022000
 8004318:	40021000 	.word	0x40021000
 800431c:	08007d88 	.word	0x08007d88
 8004320:	20000000 	.word	0x20000000
 8004324:	20000004 	.word	0x20000004

08004328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004328:	b480      	push	{r7}
 800432a:	b089      	sub	sp, #36	@ 0x24
 800432c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	2300      	movs	r3, #0
 8004334:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004336:	4b3e      	ldr	r3, [pc, #248]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x108>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004340:	4b3b      	ldr	r3, [pc, #236]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x108>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0303 	and.w	r3, r3, #3
 8004348:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_RCC_GetSysClockFreq+0x34>
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	2b0c      	cmp	r3, #12
 8004354:	d121      	bne.n	800439a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d11e      	bne.n	800439a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800435c:	4b34      	ldr	r3, [pc, #208]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x108>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d107      	bne.n	8004378 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004368:	4b31      	ldr	r3, [pc, #196]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x108>)
 800436a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800436e:	0a1b      	lsrs	r3, r3, #8
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	e005      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004378:	4b2d      	ldr	r3, [pc, #180]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x108>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	091b      	lsrs	r3, r3, #4
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004384:	4a2b      	ldr	r2, [pc, #172]	@ (8004434 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800438c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10d      	bne.n	80043b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004398:	e00a      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b04      	cmp	r3, #4
 800439e:	d102      	bne.n	80043a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043a0:	4b25      	ldr	r3, [pc, #148]	@ (8004438 <HAL_RCC_GetSysClockFreq+0x110>)
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	e004      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d101      	bne.n	80043b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043ac:	4b23      	ldr	r3, [pc, #140]	@ (800443c <HAL_RCC_GetSysClockFreq+0x114>)
 80043ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2b0c      	cmp	r3, #12
 80043b4:	d134      	bne.n	8004420 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d003      	beq.n	80043ce <HAL_RCC_GetSysClockFreq+0xa6>
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d003      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0xac>
 80043cc:	e005      	b.n	80043da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004438 <HAL_RCC_GetSysClockFreq+0x110>)
 80043d0:	617b      	str	r3, [r7, #20]
      break;
 80043d2:	e005      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043d4:	4b19      	ldr	r3, [pc, #100]	@ (800443c <HAL_RCC_GetSysClockFreq+0x114>)
 80043d6:	617b      	str	r3, [r7, #20]
      break;
 80043d8:	e002      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	617b      	str	r3, [r7, #20]
      break;
 80043de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043e0:	4b13      	ldr	r3, [pc, #76]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	3301      	adds	r3, #1
 80043ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043ee:	4b10      	ldr	r3, [pc, #64]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	0a1b      	lsrs	r3, r3, #8
 80043f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	fb03 f202 	mul.w	r2, r3, r2
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004406:	4b0a      	ldr	r3, [pc, #40]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x108>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	0e5b      	lsrs	r3, r3, #25
 800440c:	f003 0303 	and.w	r3, r3, #3
 8004410:	3301      	adds	r3, #1
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	fbb2 f3f3 	udiv	r3, r2, r3
 800441e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004420:	69bb      	ldr	r3, [r7, #24]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3724      	adds	r7, #36	@ 0x24
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000
 8004434:	08007da0 	.word	0x08007da0
 8004438:	00f42400 	.word	0x00f42400
 800443c:	007a1200 	.word	0x007a1200

08004440 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004444:	4b03      	ldr	r3, [pc, #12]	@ (8004454 <HAL_RCC_GetHCLKFreq+0x14>)
 8004446:	681b      	ldr	r3, [r3, #0]
}
 8004448:	4618      	mov	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	20000000 	.word	0x20000000

08004458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800445c:	f7ff fff0 	bl	8004440 <HAL_RCC_GetHCLKFreq>
 8004460:	4602      	mov	r2, r0
 8004462:	4b06      	ldr	r3, [pc, #24]	@ (800447c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	0a1b      	lsrs	r3, r3, #8
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	4904      	ldr	r1, [pc, #16]	@ (8004480 <HAL_RCC_GetPCLK1Freq+0x28>)
 800446e:	5ccb      	ldrb	r3, [r1, r3]
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40021000 	.word	0x40021000
 8004480:	08007d98 	.word	0x08007d98

08004484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004488:	f7ff ffda 	bl	8004440 <HAL_RCC_GetHCLKFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b06      	ldr	r3, [pc, #24]	@ (80044a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	0adb      	lsrs	r3, r3, #11
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	4904      	ldr	r1, [pc, #16]	@ (80044ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40021000 	.word	0x40021000
 80044ac:	08007d98 	.word	0x08007d98

080044b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044b8:	2300      	movs	r3, #0
 80044ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044c8:	f7ff f9ee 	bl	80038a8 <HAL_PWREx_GetVoltageRange>
 80044cc:	6178      	str	r0, [r7, #20]
 80044ce:	e014      	b.n	80044fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044d0:	4b25      	ldr	r3, [pc, #148]	@ (8004568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d4:	4a24      	ldr	r2, [pc, #144]	@ (8004568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044da:	6593      	str	r3, [r2, #88]	@ 0x58
 80044dc:	4b22      	ldr	r3, [pc, #136]	@ (8004568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044e8:	f7ff f9de 	bl	80038a8 <HAL_PWREx_GetVoltageRange>
 80044ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004500:	d10b      	bne.n	800451a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b80      	cmp	r3, #128	@ 0x80
 8004506:	d919      	bls.n	800453c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2ba0      	cmp	r3, #160	@ 0xa0
 800450c:	d902      	bls.n	8004514 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800450e:	2302      	movs	r3, #2
 8004510:	613b      	str	r3, [r7, #16]
 8004512:	e013      	b.n	800453c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004514:	2301      	movs	r3, #1
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	e010      	b.n	800453c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b80      	cmp	r3, #128	@ 0x80
 800451e:	d902      	bls.n	8004526 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004520:	2303      	movs	r3, #3
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	e00a      	b.n	800453c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b80      	cmp	r3, #128	@ 0x80
 800452a:	d102      	bne.n	8004532 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800452c:	2302      	movs	r3, #2
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	e004      	b.n	800453c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b70      	cmp	r3, #112	@ 0x70
 8004536:	d101      	bne.n	800453c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004538:	2301      	movs	r3, #1
 800453a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800453c:	4b0b      	ldr	r3, [pc, #44]	@ (800456c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f023 0207 	bic.w	r2, r3, #7
 8004544:	4909      	ldr	r1, [pc, #36]	@ (800456c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800454c:	4b07      	ldr	r3, [pc, #28]	@ (800456c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	429a      	cmp	r2, r3
 8004558:	d001      	beq.n	800455e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40021000 	.word	0x40021000
 800456c:	40022000 	.word	0x40022000

08004570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004578:	2300      	movs	r3, #0
 800457a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800457c:	2300      	movs	r3, #0
 800457e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004588:	2b00      	cmp	r3, #0
 800458a:	d041      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004590:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004594:	d02a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004596:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800459a:	d824      	bhi.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800459c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045a0:	d008      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045a6:	d81e      	bhi.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045b0:	d010      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045b2:	e018      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045b4:	4b86      	ldr	r3, [pc, #536]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a85      	ldr	r2, [pc, #532]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045c0:	e015      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3304      	adds	r3, #4
 80045c6:	2100      	movs	r1, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fabb 	bl	8004b44 <RCCEx_PLLSAI1_Config>
 80045ce:	4603      	mov	r3, r0
 80045d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045d2:	e00c      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3320      	adds	r3, #32
 80045d8:	2100      	movs	r1, #0
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fba6 	bl	8004d2c <RCCEx_PLLSAI2_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045e4:	e003      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	74fb      	strb	r3, [r7, #19]
      break;
 80045ea:	e000      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80045ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ee:	7cfb      	ldrb	r3, [r7, #19]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10b      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045f4:	4b76      	ldr	r3, [pc, #472]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004602:	4973      	ldr	r1, [pc, #460]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800460a:	e001      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460c:	7cfb      	ldrb	r3, [r7, #19]
 800460e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d041      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004620:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004624:	d02a      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004626:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800462a:	d824      	bhi.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800462c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004630:	d008      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004632:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004636:	d81e      	bhi.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800463c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004640:	d010      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004642:	e018      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004644:	4b62      	ldr	r3, [pc, #392]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4a61      	ldr	r2, [pc, #388]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800464e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004650:	e015      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3304      	adds	r3, #4
 8004656:	2100      	movs	r1, #0
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fa73 	bl	8004b44 <RCCEx_PLLSAI1_Config>
 800465e:	4603      	mov	r3, r0
 8004660:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004662:	e00c      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3320      	adds	r3, #32
 8004668:	2100      	movs	r1, #0
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fb5e 	bl	8004d2c <RCCEx_PLLSAI2_Config>
 8004670:	4603      	mov	r3, r0
 8004672:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004674:	e003      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	74fb      	strb	r3, [r7, #19]
      break;
 800467a:	e000      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800467c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800467e:	7cfb      	ldrb	r3, [r7, #19]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10b      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004684:	4b52      	ldr	r3, [pc, #328]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004692:	494f      	ldr	r1, [pc, #316]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800469a:	e001      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469c:	7cfb      	ldrb	r3, [r7, #19]
 800469e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80a0 	beq.w	80047ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ae:	2300      	movs	r3, #0
 80046b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046b2:	4b47      	ldr	r3, [pc, #284]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00d      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c8:	4b41      	ldr	r3, [pc, #260]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046cc:	4a40      	ldr	r2, [pc, #256]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80046d4:	4b3e      	ldr	r3, [pc, #248]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046e0:	2301      	movs	r3, #1
 80046e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e4:	4b3b      	ldr	r3, [pc, #236]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a3a      	ldr	r2, [pc, #232]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046f0:	f7fd fc5c 	bl	8001fac <HAL_GetTick>
 80046f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046f6:	e009      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f8:	f7fd fc58 	bl	8001fac <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d902      	bls.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	74fb      	strb	r3, [r7, #19]
        break;
 800470a:	e005      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800470c:	4b31      	ldr	r3, [pc, #196]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0ef      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004718:	7cfb      	ldrb	r3, [r7, #19]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d15c      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800471e:	4b2c      	ldr	r3, [pc, #176]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004724:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004728:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01f      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	429a      	cmp	r2, r3
 800473a:	d019      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800473c:	4b24      	ldr	r3, [pc, #144]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004742:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004746:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004748:	4b21      	ldr	r3, [pc, #132]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474e:	4a20      	ldr	r2, [pc, #128]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004758:	4b1d      	ldr	r3, [pc, #116]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475e:	4a1c      	ldr	r2, [pc, #112]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004760:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004768:	4a19      	ldr	r2, [pc, #100]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d016      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477a:	f7fd fc17 	bl	8001fac <HAL_GetTick>
 800477e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004780:	e00b      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004782:	f7fd fc13 	bl	8001fac <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004790:	4293      	cmp	r3, r2
 8004792:	d902      	bls.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	74fb      	strb	r3, [r7, #19]
            break;
 8004798:	e006      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800479a:	4b0d      	ldr	r3, [pc, #52]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0ec      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80047a8:	7cfb      	ldrb	r3, [r7, #19]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10c      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ae:	4b08      	ldr	r3, [pc, #32]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047be:	4904      	ldr	r1, [pc, #16]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047c6:	e009      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047c8:	7cfb      	ldrb	r3, [r7, #19]
 80047ca:	74bb      	strb	r3, [r7, #18]
 80047cc:	e006      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d8:	7cfb      	ldrb	r3, [r7, #19]
 80047da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047dc:	7c7b      	ldrb	r3, [r7, #17]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d105      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e2:	4b9e      	ldr	r3, [pc, #632]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e6:	4a9d      	ldr	r2, [pc, #628]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047fa:	4b98      	ldr	r3, [pc, #608]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004800:	f023 0203 	bic.w	r2, r3, #3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004808:	4994      	ldr	r1, [pc, #592]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800481c:	4b8f      	ldr	r3, [pc, #572]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004822:	f023 020c 	bic.w	r2, r3, #12
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482a:	498c      	ldr	r1, [pc, #560]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800483e:	4b87      	ldr	r3, [pc, #540]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004844:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484c:	4983      	ldr	r1, [pc, #524]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004860:	4b7e      	ldr	r3, [pc, #504]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004866:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486e:	497b      	ldr	r1, [pc, #492]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004882:	4b76      	ldr	r3, [pc, #472]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004888:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004890:	4972      	ldr	r1, [pc, #456]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048a4:	4b6d      	ldr	r3, [pc, #436]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b2:	496a      	ldr	r1, [pc, #424]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048c6:	4b65      	ldr	r3, [pc, #404]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d4:	4961      	ldr	r1, [pc, #388]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048e8:	4b5c      	ldr	r3, [pc, #368]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f6:	4959      	ldr	r1, [pc, #356]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800490a:	4b54      	ldr	r3, [pc, #336]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004910:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004918:	4950      	ldr	r1, [pc, #320]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800492c:	4b4b      	ldr	r3, [pc, #300]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004932:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493a:	4948      	ldr	r1, [pc, #288]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800494e:	4b43      	ldr	r3, [pc, #268]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004954:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495c:	493f      	ldr	r1, [pc, #252]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d028      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004970:	4b3a      	ldr	r3, [pc, #232]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004976:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800497e:	4937      	ldr	r1, [pc, #220]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800498a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800498e:	d106      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004990:	4b32      	ldr	r3, [pc, #200]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4a31      	ldr	r2, [pc, #196]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800499a:	60d3      	str	r3, [r2, #12]
 800499c:	e011      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049a6:	d10c      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3304      	adds	r3, #4
 80049ac:	2101      	movs	r1, #1
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 f8c8 	bl	8004b44 <RCCEx_PLLSAI1_Config>
 80049b4:	4603      	mov	r3, r0
 80049b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049b8:	7cfb      	ldrb	r3, [r7, #19]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80049be:	7cfb      	ldrb	r3, [r7, #19]
 80049c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d028      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049ce:	4b23      	ldr	r3, [pc, #140]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049dc:	491f      	ldr	r1, [pc, #124]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ec:	d106      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ee:	4b1b      	ldr	r3, [pc, #108]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	4a1a      	ldr	r2, [pc, #104]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049f8:	60d3      	str	r3, [r2, #12]
 80049fa:	e011      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 f899 	bl	8004b44 <RCCEx_PLLSAI1_Config>
 8004a12:	4603      	mov	r3, r0
 8004a14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a16:	7cfb      	ldrb	r3, [r7, #19]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a1c:	7cfb      	ldrb	r3, [r7, #19]
 8004a1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d02b      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a3a:	4908      	ldr	r1, [pc, #32]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a4a:	d109      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a4c:	4b03      	ldr	r3, [pc, #12]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	4a02      	ldr	r2, [pc, #8]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a56:	60d3      	str	r3, [r2, #12]
 8004a58:	e014      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a5a:	bf00      	nop
 8004a5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a68:	d10c      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	2101      	movs	r1, #1
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 f867 	bl	8004b44 <RCCEx_PLLSAI1_Config>
 8004a76:	4603      	mov	r3, r0
 8004a78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a7a:	7cfb      	ldrb	r3, [r7, #19]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a80:	7cfb      	ldrb	r3, [r7, #19]
 8004a82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d02f      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a90:	4b2b      	ldr	r3, [pc, #172]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a96:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a9e:	4928      	ldr	r1, [pc, #160]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004aaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004aae:	d10d      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	2102      	movs	r1, #2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 f844 	bl	8004b44 <RCCEx_PLLSAI1_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ac0:	7cfb      	ldrb	r3, [r7, #19]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d014      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ac6:	7cfb      	ldrb	r3, [r7, #19]
 8004ac8:	74bb      	strb	r3, [r7, #18]
 8004aca:	e011      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ad0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ad4:	d10c      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3320      	adds	r3, #32
 8004ada:	2102      	movs	r1, #2
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 f925 	bl	8004d2c <RCCEx_PLLSAI2_Config>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ae6:	7cfb      	ldrb	r3, [r7, #19]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004aec:	7cfb      	ldrb	r3, [r7, #19]
 8004aee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004afc:	4b10      	ldr	r3, [pc, #64]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b02:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b0a:	490d      	ldr	r1, [pc, #52]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00b      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b1e:	4b08      	ldr	r3, [pc, #32]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b2e:	4904      	ldr	r1, [pc, #16]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b36:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40021000 	.word	0x40021000

08004b44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b52:	4b75      	ldr	r3, [pc, #468]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d018      	beq.n	8004b90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b5e:	4b72      	ldr	r3, [pc, #456]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f003 0203 	and.w	r2, r3, #3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d10d      	bne.n	8004b8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
       ||
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b76:	4b6c      	ldr	r3, [pc, #432]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	091b      	lsrs	r3, r3, #4
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
       ||
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d047      	beq.n	8004c1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	73fb      	strb	r3, [r7, #15]
 8004b8e:	e044      	b.n	8004c1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d018      	beq.n	8004bca <RCCEx_PLLSAI1_Config+0x86>
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d825      	bhi.n	8004be8 <RCCEx_PLLSAI1_Config+0xa4>
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d002      	beq.n	8004ba6 <RCCEx_PLLSAI1_Config+0x62>
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d009      	beq.n	8004bb8 <RCCEx_PLLSAI1_Config+0x74>
 8004ba4:	e020      	b.n	8004be8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ba6:	4b60      	ldr	r3, [pc, #384]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d11d      	bne.n	8004bee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bb6:	e01a      	b.n	8004bee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bb8:	4b5b      	ldr	r3, [pc, #364]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d116      	bne.n	8004bf2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bc8:	e013      	b.n	8004bf2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bca:	4b57      	ldr	r3, [pc, #348]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10f      	bne.n	8004bf6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bd6:	4b54      	ldr	r3, [pc, #336]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d109      	bne.n	8004bf6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004be6:	e006      	b.n	8004bf6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
      break;
 8004bec:	e004      	b.n	8004bf8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bee:	bf00      	nop
 8004bf0:	e002      	b.n	8004bf8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bf2:	bf00      	nop
 8004bf4:	e000      	b.n	8004bf8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bf6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10d      	bne.n	8004c1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6819      	ldr	r1, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	430b      	orrs	r3, r1
 8004c14:	4944      	ldr	r1, [pc, #272]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d17d      	bne.n	8004d1c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c20:	4b41      	ldr	r3, [pc, #260]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a40      	ldr	r2, [pc, #256]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c2c:	f7fd f9be 	bl	8001fac <HAL_GetTick>
 8004c30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c32:	e009      	b.n	8004c48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c34:	f7fd f9ba 	bl	8001fac <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d902      	bls.n	8004c48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	73fb      	strb	r3, [r7, #15]
        break;
 8004c46:	e005      	b.n	8004c54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c48:	4b37      	ldr	r3, [pc, #220]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1ef      	bne.n	8004c34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d160      	bne.n	8004d1c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d111      	bne.n	8004c84 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c60:	4b31      	ldr	r3, [pc, #196]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004c68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6892      	ldr	r2, [r2, #8]
 8004c70:	0211      	lsls	r1, r2, #8
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	68d2      	ldr	r2, [r2, #12]
 8004c76:	0912      	lsrs	r2, r2, #4
 8004c78:	0452      	lsls	r2, r2, #17
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	492a      	ldr	r1, [pc, #168]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	610b      	str	r3, [r1, #16]
 8004c82:	e027      	b.n	8004cd4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d112      	bne.n	8004cb0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c8a:	4b27      	ldr	r3, [pc, #156]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004c92:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6892      	ldr	r2, [r2, #8]
 8004c9a:	0211      	lsls	r1, r2, #8
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6912      	ldr	r2, [r2, #16]
 8004ca0:	0852      	lsrs	r2, r2, #1
 8004ca2:	3a01      	subs	r2, #1
 8004ca4:	0552      	lsls	r2, r2, #21
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	491f      	ldr	r1, [pc, #124]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	610b      	str	r3, [r1, #16]
 8004cae:	e011      	b.n	8004cd4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004cb8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6892      	ldr	r2, [r2, #8]
 8004cc0:	0211      	lsls	r1, r2, #8
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6952      	ldr	r2, [r2, #20]
 8004cc6:	0852      	lsrs	r2, r2, #1
 8004cc8:	3a01      	subs	r2, #1
 8004cca:	0652      	lsls	r2, r2, #25
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	4916      	ldr	r1, [pc, #88]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004cd4:	4b14      	ldr	r3, [pc, #80]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a13      	ldr	r2, [pc, #76]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce0:	f7fd f964 	bl	8001fac <HAL_GetTick>
 8004ce4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ce6:	e009      	b.n	8004cfc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ce8:	f7fd f960 	bl	8001fac <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d902      	bls.n	8004cfc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	73fb      	strb	r3, [r7, #15]
          break;
 8004cfa:	e005      	b.n	8004d08 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0ef      	beq.n	8004ce8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d0e:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d10:	691a      	ldr	r2, [r3, #16]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	4904      	ldr	r1, [pc, #16]	@ (8004d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40021000 	.word	0x40021000

08004d2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d018      	beq.n	8004d78 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d46:	4b67      	ldr	r3, [pc, #412]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0203 	and.w	r2, r3, #3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d10d      	bne.n	8004d72 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
       ||
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d009      	beq.n	8004d72 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d5e:	4b61      	ldr	r3, [pc, #388]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	091b      	lsrs	r3, r3, #4
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d047      	beq.n	8004e02 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	73fb      	strb	r3, [r7, #15]
 8004d76:	e044      	b.n	8004e02 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d018      	beq.n	8004db2 <RCCEx_PLLSAI2_Config+0x86>
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d825      	bhi.n	8004dd0 <RCCEx_PLLSAI2_Config+0xa4>
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d002      	beq.n	8004d8e <RCCEx_PLLSAI2_Config+0x62>
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d009      	beq.n	8004da0 <RCCEx_PLLSAI2_Config+0x74>
 8004d8c:	e020      	b.n	8004dd0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d8e:	4b55      	ldr	r3, [pc, #340]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d11d      	bne.n	8004dd6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d9e:	e01a      	b.n	8004dd6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004da0:	4b50      	ldr	r3, [pc, #320]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d116      	bne.n	8004dda <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004db0:	e013      	b.n	8004dda <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004db2:	4b4c      	ldr	r3, [pc, #304]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10f      	bne.n	8004dde <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dbe:	4b49      	ldr	r3, [pc, #292]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dce:	e006      	b.n	8004dde <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd4:	e004      	b.n	8004de0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004dd6:	bf00      	nop
 8004dd8:	e002      	b.n	8004de0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004dda:	bf00      	nop
 8004ddc:	e000      	b.n	8004de0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004dde:	bf00      	nop
    }

    if(status == HAL_OK)
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10d      	bne.n	8004e02 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004de6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6819      	ldr	r1, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	4939      	ldr	r1, [pc, #228]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d167      	bne.n	8004ed8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e08:	4b36      	ldr	r3, [pc, #216]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a35      	ldr	r2, [pc, #212]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e14:	f7fd f8ca 	bl	8001fac <HAL_GetTick>
 8004e18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e1a:	e009      	b.n	8004e30 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e1c:	f7fd f8c6 	bl	8001fac <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d902      	bls.n	8004e30 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e2e:	e005      	b.n	8004e3c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e30:	4b2c      	ldr	r3, [pc, #176]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1ef      	bne.n	8004e1c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d14a      	bne.n	8004ed8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d111      	bne.n	8004e6c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e48:	4b26      	ldr	r3, [pc, #152]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004e50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6892      	ldr	r2, [r2, #8]
 8004e58:	0211      	lsls	r1, r2, #8
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	68d2      	ldr	r2, [r2, #12]
 8004e5e:	0912      	lsrs	r2, r2, #4
 8004e60:	0452      	lsls	r2, r2, #17
 8004e62:	430a      	orrs	r2, r1
 8004e64:	491f      	ldr	r1, [pc, #124]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	614b      	str	r3, [r1, #20]
 8004e6a:	e011      	b.n	8004e90 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e74:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6892      	ldr	r2, [r2, #8]
 8004e7c:	0211      	lsls	r1, r2, #8
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6912      	ldr	r2, [r2, #16]
 8004e82:	0852      	lsrs	r2, r2, #1
 8004e84:	3a01      	subs	r2, #1
 8004e86:	0652      	lsls	r2, r2, #25
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	4916      	ldr	r1, [pc, #88]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e90:	4b14      	ldr	r3, [pc, #80]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a13      	ldr	r2, [pc, #76]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9c:	f7fd f886 	bl	8001fac <HAL_GetTick>
 8004ea0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ea2:	e009      	b.n	8004eb8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ea4:	f7fd f882 	bl	8001fac <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d902      	bls.n	8004eb8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	73fb      	strb	r3, [r7, #15]
          break;
 8004eb6:	e005      	b.n	8004ec4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0ef      	beq.n	8004ea4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d106      	bne.n	8004ed8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004eca:	4b06      	ldr	r3, [pc, #24]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ecc:	695a      	ldr	r2, [r3, #20]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	4904      	ldr	r1, [pc, #16]	@ (8004ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40021000 	.word	0x40021000

08004ee8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e095      	b.n	8005026 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d108      	bne.n	8004f14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f0a:	d009      	beq.n	8004f20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	61da      	str	r2, [r3, #28]
 8004f12:	e005      	b.n	8004f20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fc fb8c 	bl	8001658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f60:	d902      	bls.n	8004f68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	e002      	b.n	8004f6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004f76:	d007      	beq.n	8004f88 <HAL_SPI_Init+0xa0>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f80:	d002      	beq.n	8004f88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fca:	ea42 0103 	orr.w	r1, r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	0c1b      	lsrs	r3, r3, #16
 8004fe4:	f003 0204 	and.w	r2, r3, #4
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005004:	ea42 0103 	orr.w	r1, r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b082      	sub	sp, #8
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e040      	b.n	80050c2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d106      	bne.n	8005056 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7fc fd69 	bl	8001b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2224      	movs	r2, #36	@ 0x24
 800505a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0201 	bic.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 ff49 	bl	8005f0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fc8e 	bl	800599c <UART_SetConfig>
 8005080:	4603      	mov	r3, r0
 8005082:	2b01      	cmp	r3, #1
 8005084:	d101      	bne.n	800508a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e01b      	b.n	80050c2 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005098:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0201 	orr.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 ffc8 	bl	8006050 <UART_CheckIdleState>
 80050c0:	4603      	mov	r3, r0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b08a      	sub	sp, #40	@ 0x28
 80050ce:	af02      	add	r7, sp, #8
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	603b      	str	r3, [r7, #0]
 80050d6:	4613      	mov	r3, r2
 80050d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d177      	bne.n	80051d2 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <HAL_UART_Transmit+0x24>
 80050e8:	88fb      	ldrh	r3, [r7, #6]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e070      	b.n	80051d4 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2221      	movs	r2, #33	@ 0x21
 80050fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005100:	f7fc ff54 	bl	8001fac <HAL_GetTick>
 8005104:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	88fa      	ldrh	r2, [r7, #6]
 800510a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	88fa      	ldrh	r2, [r7, #6]
 8005112:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800511e:	d108      	bne.n	8005132 <HAL_UART_Transmit+0x68>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d104      	bne.n	8005132 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005128:	2300      	movs	r3, #0
 800512a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	61bb      	str	r3, [r7, #24]
 8005130:	e003      	b.n	800513a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005136:	2300      	movs	r3, #0
 8005138:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800513a:	e02f      	b.n	800519c <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	2200      	movs	r2, #0
 8005144:	2180      	movs	r1, #128	@ 0x80
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f001 f82a 	bl	80061a0 <UART_WaitOnFlagUntilTimeout>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d004      	beq.n	800515c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2220      	movs	r2, #32
 8005156:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e03b      	b.n	80051d4 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10b      	bne.n	800517a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	881a      	ldrh	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800516e:	b292      	uxth	r2, r2
 8005170:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	3302      	adds	r3, #2
 8005176:	61bb      	str	r3, [r7, #24]
 8005178:	e007      	b.n	800518a <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	781a      	ldrb	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	3301      	adds	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1c9      	bne.n	800513c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2200      	movs	r2, #0
 80051b0:	2140      	movs	r1, #64	@ 0x40
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 fff4 	bl	80061a0 <UART_WaitOnFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d004      	beq.n	80051c8 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2220      	movs	r2, #32
 80051c2:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e005      	b.n	80051d4 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e000      	b.n	80051d4 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80051d2:	2302      	movs	r3, #2
  }
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3720      	adds	r7, #32
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b09a      	sub	sp, #104	@ 0x68
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
#else
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051ec:	e853 3f00 	ldrex	r3, [r3]
 80051f0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80051f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005202:	657b      	str	r3, [r7, #84]	@ 0x54
 8005204:	653a      	str	r2, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005206:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005208:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e6      	bne.n	80051e4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3308      	adds	r3, #8
 800521c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005228:	f023 0301 	bic.w	r3, r3, #1
 800522c:	663b      	str	r3, [r7, #96]	@ 0x60
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3308      	adds	r3, #8
 8005234:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005236:	643a      	str	r2, [r7, #64]	@ 0x40
 8005238:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800523c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e5      	bne.n	8005216 <HAL_UART_AbortReceive+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800524e:	2b01      	cmp	r3, #1
 8005250:	d118      	bne.n	8005284 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f023 0310 	bic.w	r3, r3, #16
 8005266:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	461a      	mov	r2, r3
 800526e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005272:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e6      	bne.n	8005252 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528e:	2b40      	cmp	r3, #64	@ 0x40
 8005290:	d137      	bne.n	8005302 <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3308      	adds	r3, #8
 8005298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3308      	adds	r3, #8
 80052b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052b2:	61ba      	str	r2, [r7, #24]
 80052b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6979      	ldr	r1, [r7, #20]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	613b      	str	r3, [r7, #16]
   return(result);
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e5      	bne.n	8005292 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d019      	beq.n	8005302 <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052d2:	2200      	movs	r2, #0
 80052d4:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fd f8c0 	bl	8002460 <HAL_DMA_Abort>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00d      	beq.n	8005302 <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fd f9e6 	bl	80026bc <HAL_DMA_GetError>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b20      	cmp	r3, #32
 80052f4:	d105      	bne.n	8005302 <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2210      	movs	r2, #16
 80052fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e019      	b.n	8005336 <HAL_UART_AbortReceive+0x15a>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	220f      	movs	r2, #15
 8005310:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	8b1b      	ldrh	r3, [r3, #24]
 8005318:	b29a      	uxth	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0208 	orr.w	r2, r2, #8
 8005322:	b292      	uxth	r2, r2
 8005324:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3768      	adds	r7, #104	@ 0x68
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b0ba      	sub	sp, #232	@ 0xe8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005366:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800536a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800536e:	4013      	ands	r3, r2
 8005370:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d115      	bne.n	80053a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800537c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00f      	beq.n	80053a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	d009      	beq.n	80053a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 82ca 	beq.w	8005932 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	4798      	blx	r3
      }
      return;
 80053a6:	e2c4      	b.n	8005932 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80053a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8117 	beq.w	80055e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80053b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80053c2:	4b85      	ldr	r3, [pc, #532]	@ (80055d8 <HAL_UART_IRQHandler+0x298>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 810a 	beq.w	80055e0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d011      	beq.n	80053fc <HAL_UART_IRQHandler+0xbc>
 80053d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00b      	beq.n	80053fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2201      	movs	r2, #1
 80053ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053f2:	f043 0201 	orr.w	r2, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d011      	beq.n	800542c <HAL_UART_IRQHandler+0xec>
 8005408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00b      	beq.n	800542c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2202      	movs	r2, #2
 800541a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005422:	f043 0204 	orr.w	r2, r3, #4
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800542c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d011      	beq.n	800545c <HAL_UART_IRQHandler+0x11c>
 8005438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00b      	beq.n	800545c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2204      	movs	r2, #4
 800544a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005452:	f043 0202 	orr.w	r2, r3, #2
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800545c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d017      	beq.n	8005498 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d105      	bne.n	8005480 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005478:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00b      	beq.n	8005498 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2208      	movs	r2, #8
 8005486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800548e:	f043 0208 	orr.w	r2, r3, #8
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800549c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d012      	beq.n	80054ca <HAL_UART_IRQHandler+0x18a>
 80054a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00c      	beq.n	80054ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054c0:	f043 0220 	orr.w	r2, r3, #32
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8230 	beq.w	8005936 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80054d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00d      	beq.n	80054fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005504:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005512:	2b40      	cmp	r3, #64	@ 0x40
 8005514:	d005      	beq.n	8005522 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800551a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800551e:	2b00      	cmp	r3, #0
 8005520:	d04f      	beq.n	80055c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 ff70 	bl	8006408 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005532:	2b40      	cmp	r3, #64	@ 0x40
 8005534:	d141      	bne.n	80055ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3308      	adds	r3, #8
 800553c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800554c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3308      	adds	r3, #8
 800555e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005562:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005566:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800556e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800557a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1d9      	bne.n	8005536 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005586:	2b00      	cmp	r3, #0
 8005588:	d013      	beq.n	80055b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800558e:	4a13      	ldr	r2, [pc, #76]	@ (80055dc <HAL_UART_IRQHandler+0x29c>)
 8005590:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005596:	4618      	mov	r0, r3
 8005598:	f7fc ffa0 	bl	80024dc <HAL_DMA_Abort_IT>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d017      	beq.n	80055d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80055ac:	4610      	mov	r0, r2
 80055ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b0:	e00f      	b.n	80055d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f9e8 	bl	8005988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b8:	e00b      	b.n	80055d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f9e4 	bl	8005988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c0:	e007      	b.n	80055d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f9e0 	bl	8005988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80055d0:	e1b1      	b.n	8005936 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d2:	bf00      	nop
    return;
 80055d4:	e1af      	b.n	8005936 <HAL_UART_IRQHandler+0x5f6>
 80055d6:	bf00      	nop
 80055d8:	04000120 	.word	0x04000120
 80055dc:	080066b9 	.word	0x080066b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	f040 816a 	bne.w	80058be <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 8163 	beq.w	80058be <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055fc:	f003 0310 	and.w	r3, r3, #16
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 815c 	beq.w	80058be <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2210      	movs	r2, #16
 800560c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005618:	2b40      	cmp	r3, #64	@ 0x40
 800561a:	f040 80d4 	bne.w	80057c6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800562a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 80ad 	beq.w	800578e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800563a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800563e:	429a      	cmp	r2, r3
 8005640:	f080 80a5 	bcs.w	800578e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800564a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b00      	cmp	r3, #0
 800565c:	f040 8086 	bne.w	800576c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005674:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800567c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	461a      	mov	r2, r3
 8005686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800568a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800568e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005696:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1da      	bne.n	8005660 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3308      	adds	r3, #8
 80056b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056bc:	f023 0301 	bic.w	r3, r3, #1
 80056c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3308      	adds	r3, #8
 80056ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e1      	bne.n	80056aa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3308      	adds	r3, #8
 80056ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3308      	adds	r3, #8
 8005706:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800570a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800570c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005710:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e3      	bne.n	80056e6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2220      	movs	r2, #32
 8005722:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800573a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800573c:	f023 0310 	bic.w	r3, r3, #16
 8005740:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800574e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005750:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005754:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800575c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e4      	bne.n	800572c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005766:	4618      	mov	r0, r3
 8005768:	f7fc fe7a 	bl	8002460 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800577e:	b29b      	uxth	r3, r3
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	b29b      	uxth	r3, r3
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fb fecc 	bl	8001524 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800578c:	e0d5      	b.n	800593a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005794:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005798:	429a      	cmp	r2, r3
 800579a:	f040 80ce 	bne.w	800593a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	f040 80c5 	bne.w	800593a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057bc:	4619      	mov	r1, r3
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7fb feb0 	bl	8001524 <HAL_UARTEx_RxEventCallback>
      return;
 80057c4:	e0b9      	b.n	800593a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 80ab 	beq.w	800593e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80057e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 80a6 	beq.w	800593e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fa:	e853 3f00 	ldrex	r3, [r3]
 80057fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005806:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	461a      	mov	r2, r3
 8005810:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005814:	647b      	str	r3, [r7, #68]	@ 0x44
 8005816:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005818:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800581a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800581c:	e841 2300 	strex	r3, r2, [r1]
 8005820:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1e4      	bne.n	80057f2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3308      	adds	r3, #8
 800582e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	623b      	str	r3, [r7, #32]
   return(result);
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	f023 0301 	bic.w	r3, r3, #1
 800583e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3308      	adds	r3, #8
 8005848:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800584c:	633a      	str	r2, [r7, #48]	@ 0x30
 800584e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800585a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e3      	bne.n	8005828 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2220      	movs	r2, #32
 8005864:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	60fb      	str	r3, [r7, #12]
   return(result);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f023 0310 	bic.w	r3, r3, #16
 8005888:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	461a      	mov	r2, r3
 8005892:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	69b9      	ldr	r1, [r7, #24]
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	617b      	str	r3, [r7, #20]
   return(result);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e4      	bne.n	8005874 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2202      	movs	r2, #2
 80058ae:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058b4:	4619      	mov	r1, r3
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fb fe34 	bl	8001524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058bc:	e03f      	b.n	800593e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00e      	beq.n	80058e8 <HAL_UART_IRQHandler+0x5a8>
 80058ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d008      	beq.n	80058e8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80058de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 ff29 	bl	8006738 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058e6:	e02d      	b.n	8005944 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80058e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00e      	beq.n	8005912 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80058f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d008      	beq.n	8005912 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01c      	beq.n	8005942 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	4798      	blx	r3
    }
    return;
 8005910:	e017      	b.n	8005942 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d012      	beq.n	8005944 <HAL_UART_IRQHandler+0x604>
 800591e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00c      	beq.n	8005944 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 feda 	bl	80066e4 <UART_EndTransmit_IT>
    return;
 8005930:	e008      	b.n	8005944 <HAL_UART_IRQHandler+0x604>
      return;
 8005932:	bf00      	nop
 8005934:	e006      	b.n	8005944 <HAL_UART_IRQHandler+0x604>
    return;
 8005936:	bf00      	nop
 8005938:	e004      	b.n	8005944 <HAL_UART_IRQHandler+0x604>
      return;
 800593a:	bf00      	nop
 800593c:	e002      	b.n	8005944 <HAL_UART_IRQHandler+0x604>
      return;
 800593e:	bf00      	nop
 8005940:	e000      	b.n	8005944 <HAL_UART_IRQHandler+0x604>
    return;
 8005942:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005944:	37e8      	adds	r7, #232	@ 0xe8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop

0800594c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800599c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059a0:	b08a      	sub	sp, #40	@ 0x28
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	431a      	orrs	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	431a      	orrs	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	4ba4      	ldr	r3, [pc, #656]	@ (8005c5c <UART_SetConfig+0x2c0>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	6812      	ldr	r2, [r2, #0]
 80059d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059d4:	430b      	orrs	r3, r1
 80059d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a99      	ldr	r2, [pc, #612]	@ (8005c60 <UART_SetConfig+0x2c4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d004      	beq.n	8005a08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a04:	4313      	orrs	r3, r2
 8005a06:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a90      	ldr	r2, [pc, #576]	@ (8005c64 <UART_SetConfig+0x2c8>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d126      	bne.n	8005a74 <UART_SetConfig+0xd8>
 8005a26:	4b90      	ldr	r3, [pc, #576]	@ (8005c68 <UART_SetConfig+0x2cc>)
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a2c:	f003 0303 	and.w	r3, r3, #3
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d81b      	bhi.n	8005a6c <UART_SetConfig+0xd0>
 8005a34:	a201      	add	r2, pc, #4	@ (adr r2, 8005a3c <UART_SetConfig+0xa0>)
 8005a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3a:	bf00      	nop
 8005a3c:	08005a4d 	.word	0x08005a4d
 8005a40:	08005a5d 	.word	0x08005a5d
 8005a44:	08005a55 	.word	0x08005a55
 8005a48:	08005a65 	.word	0x08005a65
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a52:	e116      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005a54:	2302      	movs	r3, #2
 8005a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a5a:	e112      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005a5c:	2304      	movs	r3, #4
 8005a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a62:	e10e      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005a64:	2308      	movs	r3, #8
 8005a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a6a:	e10a      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005a6c:	2310      	movs	r3, #16
 8005a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a72:	e106      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a7c      	ldr	r2, [pc, #496]	@ (8005c6c <UART_SetConfig+0x2d0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d138      	bne.n	8005af0 <UART_SetConfig+0x154>
 8005a7e:	4b7a      	ldr	r3, [pc, #488]	@ (8005c68 <UART_SetConfig+0x2cc>)
 8005a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a84:	f003 030c 	and.w	r3, r3, #12
 8005a88:	2b0c      	cmp	r3, #12
 8005a8a:	d82d      	bhi.n	8005ae8 <UART_SetConfig+0x14c>
 8005a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a94 <UART_SetConfig+0xf8>)
 8005a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a92:	bf00      	nop
 8005a94:	08005ac9 	.word	0x08005ac9
 8005a98:	08005ae9 	.word	0x08005ae9
 8005a9c:	08005ae9 	.word	0x08005ae9
 8005aa0:	08005ae9 	.word	0x08005ae9
 8005aa4:	08005ad9 	.word	0x08005ad9
 8005aa8:	08005ae9 	.word	0x08005ae9
 8005aac:	08005ae9 	.word	0x08005ae9
 8005ab0:	08005ae9 	.word	0x08005ae9
 8005ab4:	08005ad1 	.word	0x08005ad1
 8005ab8:	08005ae9 	.word	0x08005ae9
 8005abc:	08005ae9 	.word	0x08005ae9
 8005ac0:	08005ae9 	.word	0x08005ae9
 8005ac4:	08005ae1 	.word	0x08005ae1
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ace:	e0d8      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ad6:	e0d4      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005ad8:	2304      	movs	r3, #4
 8005ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ade:	e0d0      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005ae0:	2308      	movs	r3, #8
 8005ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ae6:	e0cc      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005ae8:	2310      	movs	r3, #16
 8005aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aee:	e0c8      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a5e      	ldr	r2, [pc, #376]	@ (8005c70 <UART_SetConfig+0x2d4>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d125      	bne.n	8005b46 <UART_SetConfig+0x1aa>
 8005afa:	4b5b      	ldr	r3, [pc, #364]	@ (8005c68 <UART_SetConfig+0x2cc>)
 8005afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b00:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b04:	2b30      	cmp	r3, #48	@ 0x30
 8005b06:	d016      	beq.n	8005b36 <UART_SetConfig+0x19a>
 8005b08:	2b30      	cmp	r3, #48	@ 0x30
 8005b0a:	d818      	bhi.n	8005b3e <UART_SetConfig+0x1a2>
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d00a      	beq.n	8005b26 <UART_SetConfig+0x18a>
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	d814      	bhi.n	8005b3e <UART_SetConfig+0x1a2>
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <UART_SetConfig+0x182>
 8005b18:	2b10      	cmp	r3, #16
 8005b1a:	d008      	beq.n	8005b2e <UART_SetConfig+0x192>
 8005b1c:	e00f      	b.n	8005b3e <UART_SetConfig+0x1a2>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b24:	e0ad      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005b26:	2302      	movs	r3, #2
 8005b28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b2c:	e0a9      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005b2e:	2304      	movs	r3, #4
 8005b30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b34:	e0a5      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005b36:	2308      	movs	r3, #8
 8005b38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b3c:	e0a1      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005b3e:	2310      	movs	r3, #16
 8005b40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b44:	e09d      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a4a      	ldr	r2, [pc, #296]	@ (8005c74 <UART_SetConfig+0x2d8>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d125      	bne.n	8005b9c <UART_SetConfig+0x200>
 8005b50:	4b45      	ldr	r3, [pc, #276]	@ (8005c68 <UART_SetConfig+0x2cc>)
 8005b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b5c:	d016      	beq.n	8005b8c <UART_SetConfig+0x1f0>
 8005b5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b60:	d818      	bhi.n	8005b94 <UART_SetConfig+0x1f8>
 8005b62:	2b80      	cmp	r3, #128	@ 0x80
 8005b64:	d00a      	beq.n	8005b7c <UART_SetConfig+0x1e0>
 8005b66:	2b80      	cmp	r3, #128	@ 0x80
 8005b68:	d814      	bhi.n	8005b94 <UART_SetConfig+0x1f8>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <UART_SetConfig+0x1d8>
 8005b6e:	2b40      	cmp	r3, #64	@ 0x40
 8005b70:	d008      	beq.n	8005b84 <UART_SetConfig+0x1e8>
 8005b72:	e00f      	b.n	8005b94 <UART_SetConfig+0x1f8>
 8005b74:	2300      	movs	r3, #0
 8005b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b7a:	e082      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b82:	e07e      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005b84:	2304      	movs	r3, #4
 8005b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b8a:	e07a      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005b8c:	2308      	movs	r3, #8
 8005b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b92:	e076      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005b94:	2310      	movs	r3, #16
 8005b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b9a:	e072      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a35      	ldr	r2, [pc, #212]	@ (8005c78 <UART_SetConfig+0x2dc>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d12a      	bne.n	8005bfc <UART_SetConfig+0x260>
 8005ba6:	4b30      	ldr	r3, [pc, #192]	@ (8005c68 <UART_SetConfig+0x2cc>)
 8005ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bb4:	d01a      	beq.n	8005bec <UART_SetConfig+0x250>
 8005bb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bba:	d81b      	bhi.n	8005bf4 <UART_SetConfig+0x258>
 8005bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bc0:	d00c      	beq.n	8005bdc <UART_SetConfig+0x240>
 8005bc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bc6:	d815      	bhi.n	8005bf4 <UART_SetConfig+0x258>
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <UART_SetConfig+0x238>
 8005bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bd0:	d008      	beq.n	8005be4 <UART_SetConfig+0x248>
 8005bd2:	e00f      	b.n	8005bf4 <UART_SetConfig+0x258>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bda:	e052      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005be2:	e04e      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005be4:	2304      	movs	r3, #4
 8005be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bea:	e04a      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005bec:	2308      	movs	r3, #8
 8005bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bf2:	e046      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bfa:	e042      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a17      	ldr	r2, [pc, #92]	@ (8005c60 <UART_SetConfig+0x2c4>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d13a      	bne.n	8005c7c <UART_SetConfig+0x2e0>
 8005c06:	4b18      	ldr	r3, [pc, #96]	@ (8005c68 <UART_SetConfig+0x2cc>)
 8005c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c14:	d01a      	beq.n	8005c4c <UART_SetConfig+0x2b0>
 8005c16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c1a:	d81b      	bhi.n	8005c54 <UART_SetConfig+0x2b8>
 8005c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c20:	d00c      	beq.n	8005c3c <UART_SetConfig+0x2a0>
 8005c22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c26:	d815      	bhi.n	8005c54 <UART_SetConfig+0x2b8>
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <UART_SetConfig+0x298>
 8005c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c30:	d008      	beq.n	8005c44 <UART_SetConfig+0x2a8>
 8005c32:	e00f      	b.n	8005c54 <UART_SetConfig+0x2b8>
 8005c34:	2300      	movs	r3, #0
 8005c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c3a:	e022      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c42:	e01e      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005c44:	2304      	movs	r3, #4
 8005c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c4a:	e01a      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005c4c:	2308      	movs	r3, #8
 8005c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c52:	e016      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005c54:	2310      	movs	r3, #16
 8005c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c5a:	e012      	b.n	8005c82 <UART_SetConfig+0x2e6>
 8005c5c:	efff69f3 	.word	0xefff69f3
 8005c60:	40008000 	.word	0x40008000
 8005c64:	40013800 	.word	0x40013800
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	40004400 	.word	0x40004400
 8005c70:	40004800 	.word	0x40004800
 8005c74:	40004c00 	.word	0x40004c00
 8005c78:	40005000 	.word	0x40005000
 8005c7c:	2310      	movs	r3, #16
 8005c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a9f      	ldr	r2, [pc, #636]	@ (8005f04 <UART_SetConfig+0x568>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d17a      	bne.n	8005d82 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d824      	bhi.n	8005cde <UART_SetConfig+0x342>
 8005c94:	a201      	add	r2, pc, #4	@ (adr r2, 8005c9c <UART_SetConfig+0x300>)
 8005c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9a:	bf00      	nop
 8005c9c:	08005cc1 	.word	0x08005cc1
 8005ca0:	08005cdf 	.word	0x08005cdf
 8005ca4:	08005cc9 	.word	0x08005cc9
 8005ca8:	08005cdf 	.word	0x08005cdf
 8005cac:	08005ccf 	.word	0x08005ccf
 8005cb0:	08005cdf 	.word	0x08005cdf
 8005cb4:	08005cdf 	.word	0x08005cdf
 8005cb8:	08005cdf 	.word	0x08005cdf
 8005cbc:	08005cd7 	.word	0x08005cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc0:	f7fe fbca 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 8005cc4:	61f8      	str	r0, [r7, #28]
        break;
 8005cc6:	e010      	b.n	8005cea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cc8:	4b8f      	ldr	r3, [pc, #572]	@ (8005f08 <UART_SetConfig+0x56c>)
 8005cca:	61fb      	str	r3, [r7, #28]
        break;
 8005ccc:	e00d      	b.n	8005cea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cce:	f7fe fb2b 	bl	8004328 <HAL_RCC_GetSysClockFreq>
 8005cd2:	61f8      	str	r0, [r7, #28]
        break;
 8005cd4:	e009      	b.n	8005cea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cda:	61fb      	str	r3, [r7, #28]
        break;
 8005cdc:	e005      	b.n	8005cea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ce8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 80fb 	beq.w	8005ee8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	4413      	add	r3, r2
 8005cfc:	69fa      	ldr	r2, [r7, #28]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d305      	bcc.n	8005d0e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d903      	bls.n	8005d16 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d14:	e0e8      	b.n	8005ee8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	461c      	mov	r4, r3
 8005d1c:	4615      	mov	r5, r2
 8005d1e:	f04f 0200 	mov.w	r2, #0
 8005d22:	f04f 0300 	mov.w	r3, #0
 8005d26:	022b      	lsls	r3, r5, #8
 8005d28:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d2c:	0222      	lsls	r2, r4, #8
 8005d2e:	68f9      	ldr	r1, [r7, #12]
 8005d30:	6849      	ldr	r1, [r1, #4]
 8005d32:	0849      	lsrs	r1, r1, #1
 8005d34:	2000      	movs	r0, #0
 8005d36:	4688      	mov	r8, r1
 8005d38:	4681      	mov	r9, r0
 8005d3a:	eb12 0a08 	adds.w	sl, r2, r8
 8005d3e:	eb43 0b09 	adc.w	fp, r3, r9
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	603b      	str	r3, [r7, #0]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d50:	4650      	mov	r0, sl
 8005d52:	4659      	mov	r1, fp
 8005d54:	f7fa fe7a 	bl	8000a4c <__aeabi_uldivmod>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d66:	d308      	bcc.n	8005d7a <UART_SetConfig+0x3de>
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d6e:	d204      	bcs.n	8005d7a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	60da      	str	r2, [r3, #12]
 8005d78:	e0b6      	b.n	8005ee8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d80:	e0b2      	b.n	8005ee8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d8a:	d15e      	bne.n	8005e4a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005d8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d828      	bhi.n	8005de6 <UART_SetConfig+0x44a>
 8005d94:	a201      	add	r2, pc, #4	@ (adr r2, 8005d9c <UART_SetConfig+0x400>)
 8005d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9a:	bf00      	nop
 8005d9c:	08005dc1 	.word	0x08005dc1
 8005da0:	08005dc9 	.word	0x08005dc9
 8005da4:	08005dd1 	.word	0x08005dd1
 8005da8:	08005de7 	.word	0x08005de7
 8005dac:	08005dd7 	.word	0x08005dd7
 8005db0:	08005de7 	.word	0x08005de7
 8005db4:	08005de7 	.word	0x08005de7
 8005db8:	08005de7 	.word	0x08005de7
 8005dbc:	08005ddf 	.word	0x08005ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dc0:	f7fe fb4a 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 8005dc4:	61f8      	str	r0, [r7, #28]
        break;
 8005dc6:	e014      	b.n	8005df2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dc8:	f7fe fb5c 	bl	8004484 <HAL_RCC_GetPCLK2Freq>
 8005dcc:	61f8      	str	r0, [r7, #28]
        break;
 8005dce:	e010      	b.n	8005df2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dd0:	4b4d      	ldr	r3, [pc, #308]	@ (8005f08 <UART_SetConfig+0x56c>)
 8005dd2:	61fb      	str	r3, [r7, #28]
        break;
 8005dd4:	e00d      	b.n	8005df2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dd6:	f7fe faa7 	bl	8004328 <HAL_RCC_GetSysClockFreq>
 8005dda:	61f8      	str	r0, [r7, #28]
        break;
 8005ddc:	e009      	b.n	8005df2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005de2:	61fb      	str	r3, [r7, #28]
        break;
 8005de4:	e005      	b.n	8005df2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005df0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d077      	beq.n	8005ee8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	005a      	lsls	r2, r3, #1
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	085b      	lsrs	r3, r3, #1
 8005e02:	441a      	add	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b0f      	cmp	r3, #15
 8005e12:	d916      	bls.n	8005e42 <UART_SetConfig+0x4a6>
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e1a:	d212      	bcs.n	8005e42 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	f023 030f 	bic.w	r3, r3, #15
 8005e24:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	085b      	lsrs	r3, r3, #1
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	8afb      	ldrh	r3, [r7, #22]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	8afa      	ldrh	r2, [r7, #22]
 8005e3e:	60da      	str	r2, [r3, #12]
 8005e40:	e052      	b.n	8005ee8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e48:	e04e      	b.n	8005ee8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d827      	bhi.n	8005ea2 <UART_SetConfig+0x506>
 8005e52:	a201      	add	r2, pc, #4	@ (adr r2, 8005e58 <UART_SetConfig+0x4bc>)
 8005e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e58:	08005e7d 	.word	0x08005e7d
 8005e5c:	08005e85 	.word	0x08005e85
 8005e60:	08005e8d 	.word	0x08005e8d
 8005e64:	08005ea3 	.word	0x08005ea3
 8005e68:	08005e93 	.word	0x08005e93
 8005e6c:	08005ea3 	.word	0x08005ea3
 8005e70:	08005ea3 	.word	0x08005ea3
 8005e74:	08005ea3 	.word	0x08005ea3
 8005e78:	08005e9b 	.word	0x08005e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e7c:	f7fe faec 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 8005e80:	61f8      	str	r0, [r7, #28]
        break;
 8005e82:	e014      	b.n	8005eae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e84:	f7fe fafe 	bl	8004484 <HAL_RCC_GetPCLK2Freq>
 8005e88:	61f8      	str	r0, [r7, #28]
        break;
 8005e8a:	e010      	b.n	8005eae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8005f08 <UART_SetConfig+0x56c>)
 8005e8e:	61fb      	str	r3, [r7, #28]
        break;
 8005e90:	e00d      	b.n	8005eae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e92:	f7fe fa49 	bl	8004328 <HAL_RCC_GetSysClockFreq>
 8005e96:	61f8      	str	r0, [r7, #28]
        break;
 8005e98:	e009      	b.n	8005eae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e9e:	61fb      	str	r3, [r7, #28]
        break;
 8005ea0:	e005      	b.n	8005eae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005eac:	bf00      	nop
    }

    if (pclk != 0U)
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d019      	beq.n	8005ee8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	085a      	lsrs	r2, r3, #1
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	441a      	add	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	2b0f      	cmp	r3, #15
 8005ecc:	d909      	bls.n	8005ee2 <UART_SetConfig+0x546>
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ed4:	d205      	bcs.n	8005ee2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60da      	str	r2, [r3, #12]
 8005ee0:	e002      	b.n	8005ee8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005ef4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3728      	adds	r7, #40	@ 0x28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f02:	bf00      	nop
 8005f04:	40008000 	.word	0x40008000
 8005f08:	00f42400 	.word	0x00f42400

08005f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00a      	beq.n	8005f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa0:	f003 0310 	and.w	r3, r3, #16
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01a      	beq.n	8006022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006006:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800600a:	d10a      	bne.n	8006022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	605a      	str	r2, [r3, #4]
  }
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b098      	sub	sp, #96	@ 0x60
 8006054:	af02      	add	r7, sp, #8
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006060:	f7fb ffa4 	bl	8001fac <HAL_GetTick>
 8006064:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b08      	cmp	r3, #8
 8006072:	d12e      	bne.n	80060d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006074:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800607c:	2200      	movs	r2, #0
 800607e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f88c 	bl	80061a0 <UART_WaitOnFlagUntilTimeout>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d021      	beq.n	80060d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006096:	e853 3f00 	ldrex	r3, [r3]
 800609a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800609c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800609e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80060ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060b4:	e841 2300 	strex	r3, r2, [r1]
 80060b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1e6      	bne.n	800608e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e062      	b.n	8006198 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b04      	cmp	r3, #4
 80060de:	d149      	bne.n	8006174 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e8:	2200      	movs	r2, #0
 80060ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f856 	bl	80061a0 <UART_WaitOnFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d03c      	beq.n	8006174 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006102:	e853 3f00 	ldrex	r3, [r3]
 8006106:	623b      	str	r3, [r7, #32]
   return(result);
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800610e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006118:	633b      	str	r3, [r7, #48]	@ 0x30
 800611a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800611e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006120:	e841 2300 	strex	r3, r2, [r1]
 8006124:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1e6      	bne.n	80060fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3308      	adds	r3, #8
 8006132:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	60fb      	str	r3, [r7, #12]
   return(result);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0301 	bic.w	r3, r3, #1
 8006142:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3308      	adds	r3, #8
 800614a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800614c:	61fa      	str	r2, [r7, #28]
 800614e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006150:	69b9      	ldr	r1, [r7, #24]
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	e841 2300 	strex	r3, r2, [r1]
 8006158:	617b      	str	r3, [r7, #20]
   return(result);
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1e5      	bne.n	800612c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2220      	movs	r2, #32
 8006164:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e011      	b.n	8006198 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2220      	movs	r2, #32
 8006178:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2220      	movs	r2, #32
 800617e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3758      	adds	r7, #88	@ 0x58
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	603b      	str	r3, [r7, #0]
 80061ac:	4613      	mov	r3, r2
 80061ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b0:	e04f      	b.n	8006252 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b8:	d04b      	beq.n	8006252 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ba:	f7fb fef7 	bl	8001fac <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d302      	bcc.n	80061d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e04e      	b.n	8006272 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d037      	beq.n	8006252 <UART_WaitOnFlagUntilTimeout+0xb2>
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b80      	cmp	r3, #128	@ 0x80
 80061e6:	d034      	beq.n	8006252 <UART_WaitOnFlagUntilTimeout+0xb2>
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b40      	cmp	r3, #64	@ 0x40
 80061ec:	d031      	beq.n	8006252 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	f003 0308 	and.w	r3, r3, #8
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d110      	bne.n	800621e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2208      	movs	r2, #8
 8006202:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 f8ff 	bl	8006408 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2208      	movs	r2, #8
 800620e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e029      	b.n	8006272 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006228:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800622c:	d111      	bne.n	8006252 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006236:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 f8e5 	bl	8006408 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2220      	movs	r2, #32
 8006242:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e00f      	b.n	8006272 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4013      	ands	r3, r2
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	429a      	cmp	r2, r3
 8006260:	bf0c      	ite	eq
 8006262:	2301      	moveq	r3, #1
 8006264:	2300      	movne	r3, #0
 8006266:	b2db      	uxtb	r3, r3
 8006268:	461a      	mov	r2, r3
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	429a      	cmp	r2, r3
 800626e:	d0a0      	beq.n	80061b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b096      	sub	sp, #88	@ 0x58
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	4613      	mov	r3, r2
 8006288:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	88fa      	ldrh	r2, [r7, #6]
 8006294:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2222      	movs	r2, #34	@ 0x22
 80062a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d028      	beq.n	8006302 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062b4:	4a3e      	ldr	r2, [pc, #248]	@ (80063b0 <UART_Start_Receive_DMA+0x134>)
 80062b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062bc:	4a3d      	ldr	r2, [pc, #244]	@ (80063b4 <UART_Start_Receive_DMA+0x138>)
 80062be:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062c4:	4a3c      	ldr	r2, [pc, #240]	@ (80063b8 <UART_Start_Receive_DMA+0x13c>)
 80062c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062cc:	2200      	movs	r2, #0
 80062ce:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3324      	adds	r3, #36	@ 0x24
 80062da:	4619      	mov	r1, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e0:	461a      	mov	r2, r3
 80062e2:	88fb      	ldrh	r3, [r7, #6]
 80062e4:	f7fc f85c 	bl	80023a0 <HAL_DMA_Start_IT>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d009      	beq.n	8006302 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2210      	movs	r2, #16
 80062f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e051      	b.n	80063a6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d018      	beq.n	800633c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800631e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	461a      	mov	r2, r3
 8006326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006328:	64bb      	str	r3, [r7, #72]	@ 0x48
 800632a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800632e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e6      	bne.n	800630a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3308      	adds	r3, #8
 8006342:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006346:	e853 3f00 	ldrex	r3, [r3]
 800634a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800634c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634e:	f043 0301 	orr.w	r3, r3, #1
 8006352:	653b      	str	r3, [r7, #80]	@ 0x50
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3308      	adds	r3, #8
 800635a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800635c:	637a      	str	r2, [r7, #52]	@ 0x34
 800635e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006360:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006362:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006364:	e841 2300 	strex	r3, r2, [r1]
 8006368:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800636a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1e5      	bne.n	800633c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3308      	adds	r3, #8
 8006376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	613b      	str	r3, [r7, #16]
   return(result);
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006386:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3308      	adds	r3, #8
 800638e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006390:	623a      	str	r2, [r7, #32]
 8006392:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006394:	69f9      	ldr	r1, [r7, #28]
 8006396:	6a3a      	ldr	r2, [r7, #32]
 8006398:	e841 2300 	strex	r3, r2, [r1]
 800639c:	61bb      	str	r3, [r7, #24]
   return(result);
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1e5      	bne.n	8006370 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3758      	adds	r7, #88	@ 0x58
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	080064d1 	.word	0x080064d1
 80063b4:	080065fd 	.word	0x080065fd
 80063b8:	0800663b 	.word	0x0800663b

080063bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80063bc:	b480      	push	{r7}
 80063be:	b089      	sub	sp, #36	@ 0x24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	e853 3f00 	ldrex	r3, [r3]
 80063d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80063d8:	61fb      	str	r3, [r7, #28]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	61bb      	str	r3, [r7, #24]
 80063e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e6:	6979      	ldr	r1, [r7, #20]
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	e841 2300 	strex	r3, r2, [r1]
 80063ee:	613b      	str	r3, [r7, #16]
   return(result);
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1e6      	bne.n	80063c4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2220      	movs	r2, #32
 80063fa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80063fc:	bf00      	nop
 80063fe:	3724      	adds	r7, #36	@ 0x24
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006408:	b480      	push	{r7}
 800640a:	b095      	sub	sp, #84	@ 0x54
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006418:	e853 3f00 	ldrex	r3, [r3]
 800641c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800641e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006420:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006424:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800642e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006430:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006432:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006434:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800643c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e6      	bne.n	8006410 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3308      	adds	r3, #8
 8006448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	e853 3f00 	ldrex	r3, [r3]
 8006450:	61fb      	str	r3, [r7, #28]
   return(result);
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	f023 0301 	bic.w	r3, r3, #1
 8006458:	64bb      	str	r3, [r7, #72]	@ 0x48
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3308      	adds	r3, #8
 8006460:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006462:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006464:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800646a:	e841 2300 	strex	r3, r2, [r1]
 800646e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1e5      	bne.n	8006442 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800647a:	2b01      	cmp	r3, #1
 800647c:	d118      	bne.n	80064b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	e853 3f00 	ldrex	r3, [r3]
 800648a:	60bb      	str	r3, [r7, #8]
   return(result);
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f023 0310 	bic.w	r3, r3, #16
 8006492:	647b      	str	r3, [r7, #68]	@ 0x44
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	461a      	mov	r2, r3
 800649a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800649c:	61bb      	str	r3, [r7, #24]
 800649e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a0:	6979      	ldr	r1, [r7, #20]
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	e841 2300 	strex	r3, r2, [r1]
 80064a8:	613b      	str	r3, [r7, #16]
   return(result);
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1e6      	bne.n	800647e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80064c4:	bf00      	nop
 80064c6:	3754      	adds	r7, #84	@ 0x54
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b09c      	sub	sp, #112	@ 0x70
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064dc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0320 	and.w	r3, r3, #32
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d171      	bne.n	80065d0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80064ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006508:	66bb      	str	r3, [r7, #104]	@ 0x68
 800650a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006512:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006514:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006518:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e6      	bne.n	80064f4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3308      	adds	r3, #8
 800652c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	667b      	str	r3, [r7, #100]	@ 0x64
 800653e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3308      	adds	r3, #8
 8006544:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006546:	647a      	str	r2, [r7, #68]	@ 0x44
 8006548:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800654c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e5      	bne.n	8006526 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800655a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3308      	adds	r3, #8
 8006560:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	623b      	str	r3, [r7, #32]
   return(result);
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006570:	663b      	str	r3, [r7, #96]	@ 0x60
 8006572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3308      	adds	r3, #8
 8006578:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800657a:	633a      	str	r2, [r7, #48]	@ 0x30
 800657c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e5      	bne.n	800655a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800658e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006590:	2220      	movs	r2, #32
 8006592:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800659a:	2b01      	cmp	r3, #1
 800659c:	d118      	bne.n	80065d0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800659e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 0310 	bic.w	r3, r3, #16
 80065b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	461a      	mov	r2, r3
 80065ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065bc:	61fb      	str	r3, [r7, #28]
 80065be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	69b9      	ldr	r1, [r7, #24]
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	617b      	str	r3, [r7, #20]
   return(result);
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e6      	bne.n	800659e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065d2:	2200      	movs	r2, #0
 80065d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d107      	bne.n	80065ee <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80065e4:	4619      	mov	r1, r3
 80065e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80065e8:	f7fa ff9c 	bl	8001524 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065ec:	e002      	b.n	80065f4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80065ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80065f0:	f7ff f9b6 	bl	8005960 <HAL_UART_RxCpltCallback>
}
 80065f4:	bf00      	nop
 80065f6:	3770      	adds	r7, #112	@ 0x70
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006608:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2201      	movs	r2, #1
 800660e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006614:	2b01      	cmp	r3, #1
 8006616:	d109      	bne.n	800662c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800661e:	085b      	lsrs	r3, r3, #1
 8006620:	b29b      	uxth	r3, r3
 8006622:	4619      	mov	r1, r3
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f7fa ff7d 	bl	8001524 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800662a:	e002      	b.n	8006632 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f7ff f9a1 	bl	8005974 <HAL_UART_RxHalfCpltCallback>
}
 8006632:	bf00      	nop
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b086      	sub	sp, #24
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006646:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800664c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006654:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006660:	2b80      	cmp	r3, #128	@ 0x80
 8006662:	d109      	bne.n	8006678 <UART_DMAError+0x3e>
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	2b21      	cmp	r3, #33	@ 0x21
 8006668:	d106      	bne.n	8006678 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2200      	movs	r2, #0
 800666e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8006672:	6978      	ldr	r0, [r7, #20]
 8006674:	f7ff fea2 	bl	80063bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006682:	2b40      	cmp	r3, #64	@ 0x40
 8006684:	d109      	bne.n	800669a <UART_DMAError+0x60>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b22      	cmp	r3, #34	@ 0x22
 800668a:	d106      	bne.n	800669a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2200      	movs	r2, #0
 8006690:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8006694:	6978      	ldr	r0, [r7, #20]
 8006696:	f7ff feb7 	bl	8006408 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066a0:	f043 0210 	orr.w	r2, r3, #16
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066aa:	6978      	ldr	r0, [r7, #20]
 80066ac:	f7ff f96c 	bl	8005988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066b0:	bf00      	nop
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f7ff f956 	bl	8005988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066dc:	bf00      	nop
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006700:	61fb      	str	r3, [r7, #28]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	61bb      	str	r3, [r7, #24]
 800670c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670e:	6979      	ldr	r1, [r7, #20]
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	e841 2300 	strex	r3, r2, [r1]
 8006716:	613b      	str	r3, [r7, #16]
   return(result);
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e6      	bne.n	80066ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2220      	movs	r2, #32
 8006722:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7ff f90e 	bl	800594c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006730:	bf00      	nop
 8006732:	3720      	adds	r7, #32
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b08c      	sub	sp, #48	@ 0x30
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	4613      	mov	r3, r2
 8006758:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006760:	2b20      	cmp	r3, #32
 8006762:	d142      	bne.n	80067ea <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800676a:	88fb      	ldrh	r3, [r7, #6]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e03b      	b.n	80067ec <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2201      	movs	r2, #1
 8006778:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006780:	88fb      	ldrh	r3, [r7, #6]
 8006782:	461a      	mov	r2, r3
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f7ff fd78 	bl	800627c <UART_Start_Receive_DMA>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006792:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006796:	2b00      	cmp	r3, #0
 8006798:	d124      	bne.n	80067e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d11d      	bne.n	80067de <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2210      	movs	r2, #16
 80067a8:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	617b      	str	r3, [r7, #20]
   return(result);
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f043 0310 	orr.w	r3, r3, #16
 80067be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	461a      	mov	r2, r3
 80067c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ca:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	6a39      	ldr	r1, [r7, #32]
 80067ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e6      	bne.n	80067aa <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80067dc:	e002      	b.n	80067e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80067e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80067e8:	e000      	b.n	80067ec <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80067ea:	2302      	movs	r3, #2
  }
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3730      	adds	r7, #48	@ 0x30
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <max30102_plot>:
 * @note Override this in your main.c if you do not use printf() for printing.
 * @param ir_sample
 * @param red_sample
 */
__weak void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
    UNUSED(ir_sample);
    UNUSED(red_sample);
}
 80067fe:	bf00      	nop
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	3304      	adds	r3, #4
 8006826:	2280      	movs	r2, #128	@ 0x80
 8006828:	2100      	movs	r1, #0
 800682a:	4618      	mov	r0, r3
 800682c:	f000 fd9a 	bl	8007364 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	3384      	adds	r3, #132	@ 0x84
 8006834:	2280      	movs	r2, #128	@ 0x80
 8006836:	2100      	movs	r1, #0
 8006838:	4618      	mov	r0, r3
 800683a:	f000 fd93 	bl	8007364 <memset>
}
 800683e:	bf00      	nop
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b088      	sub	sp, #32
 800684a:	af02      	add	r7, sp, #8
 800684c:	60f8      	str	r0, [r7, #12]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	461a      	mov	r2, r3
 8006852:	460b      	mov	r3, r1
 8006854:	72fb      	strb	r3, [r7, #11]
 8006856:	4613      	mov	r3, r2
 8006858:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 800685a:	893b      	ldrh	r3, [r7, #8]
 800685c:	3301      	adds	r3, #1
 800685e:	4618      	mov	r0, r3
 8006860:	f000 fab8 	bl	8006dd4 <malloc>
 8006864:	4603      	mov	r3, r0
 8006866:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	7afa      	ldrb	r2, [r7, #11]
 800686c:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d009      	beq.n	8006888 <max30102_write+0x42>
 8006874:	893b      	ldrh	r3, [r7, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d006      	beq.n	8006888 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	3301      	adds	r3, #1
 800687e:	893a      	ldrh	r2, [r7, #8]
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fdf9 	bl	800747a <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6818      	ldr	r0, [r3, #0]
 800688c:	893b      	ldrh	r3, [r7, #8]
 800688e:	3301      	adds	r3, #1
 8006890:	b29b      	uxth	r3, r3
 8006892:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006896:	9200      	str	r2, [sp, #0]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	21ae      	movs	r1, #174	@ 0xae
 800689c:	f7fc f9c0 	bl	8002c20 <HAL_I2C_Master_Transmit>
    free(payload);
 80068a0:	6978      	ldr	r0, [r7, #20]
 80068a2:	f000 fa9f 	bl	8006de4 <free>
}
 80068a6:	bf00      	nop
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b088      	sub	sp, #32
 80068b2:	af02      	add	r7, sp, #8
 80068b4:	60f8      	str	r0, [r7, #12]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	461a      	mov	r2, r3
 80068ba:	460b      	mov	r3, r1
 80068bc:	72fb      	strb	r3, [r7, #11]
 80068be:	4613      	mov	r3, r2
 80068c0:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 80068c2:	7afb      	ldrb	r3, [r7, #11]
 80068c4:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	f107 0217 	add.w	r2, r7, #23
 80068ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	2301      	movs	r3, #1
 80068d6:	21ae      	movs	r1, #174	@ 0xae
 80068d8:	f7fc f9a2 	bl	8002c20 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	893b      	ldrh	r3, [r7, #8]
 80068e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80068e6:	9200      	str	r2, [sp, #0]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	21ae      	movs	r1, #174	@ 0xae
 80068ec:	f7fc fab0 	bl	8002e50 <HAL_I2C_Master_Receive>
}
 80068f0:	bf00      	nop
 80068f2:	3718      	adds	r7, #24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8006900:	2340      	movs	r3, #64	@ 0x40
 8006902:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 8006904:	f107 020f 	add.w	r2, r7, #15
 8006908:	2301      	movs	r3, #1
 800690a:	2109      	movs	r1, #9
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff ff9a 	bl	8006846 <max30102_write>
}
 8006912:	bf00      	nop
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b084      	sub	sp, #16
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	460b      	mov	r3, r1
 8006924:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8006926:	2300      	movs	r3, #0
 8006928:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800692a:	f107 020f 	add.w	r2, r7, #15
 800692e:	2301      	movs	r3, #1
 8006930:	2102      	movs	r1, #2
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7ff ffbb 	bl	80068ae <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8006938:	7bfb      	ldrb	r3, [r7, #15]
 800693a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800693e:	b2db      	uxtb	r3, r3
 8006940:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8006942:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006946:	01db      	lsls	r3, r3, #7
 8006948:	b25a      	sxtb	r2, r3
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	b25b      	sxtb	r3, r3
 800694e:	4313      	orrs	r3, r2
 8006950:	b25b      	sxtb	r3, r3
 8006952:	b2db      	uxtb	r3, r3
 8006954:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8006956:	f107 020f 	add.w	r2, r7, #15
 800695a:	2301      	movs	r3, #1
 800695c:	2102      	movs	r1, #2
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7ff ff71 	bl	8006846 <max30102_write>
}
 8006964:	bf00      	nop
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	460b      	mov	r3, r1
 8006976:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 8006978:	78fb      	ldrb	r3, [r7, #3]
 800697a:	005b      	lsls	r3, r3, #1
 800697c:	b2db      	uxtb	r3, r3
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	b2db      	uxtb	r3, r3
 8006984:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 8006986:	f107 020f 	add.w	r2, r7, #15
 800698a:	2301      	movs	r3, #1
 800698c:	2103      	movs	r1, #3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7ff ff59 	bl	8006846 <max30102_write>
}
 8006994:	bf00      	nop
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 80069b6:	f107 020f 	add.w	r2, r7, #15
 80069ba:	2301      	movs	r3, #1
 80069bc:	2121      	movs	r1, #33	@ 0x21
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7ff ff41 	bl	8006846 <max30102_write>
}
 80069c4:	bf00      	nop
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <max30102_has_interrupt>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30102_has_interrupt(max30102_t *obj)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 8006a0e:	f107 020c 	add.w	r2, r7, #12
 8006a12:	2302      	movs	r3, #2
 8006a14:	2100      	movs	r1, #0
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7ff ff49 	bl	80068ae <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 8006a1c:	7b3b      	ldrb	r3, [r7, #12]
 8006a1e:	09db      	lsrs	r3, r3, #7
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f957 	bl	8006cde <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 8006a30:	7b7b      	ldrb	r3, [r7, #13]
 8006a32:	085b      	lsrs	r3, r3, #1
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d007      	beq.n	8006a4e <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 8006a3e:	f107 020a 	add.w	r2, r7, #10
 8006a42:	f107 030b 	add.w	r3, r7, #11
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f9ad 	bl	8006da8 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 8006a56:	bf00      	nop
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	460b      	mov	r3, r1
 8006a68:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8006a6a:	f107 020f 	add.w	r2, r7, #15
 8006a6e:	2301      	movs	r3, #1
 8006a70:	2109      	movs	r1, #9
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff ff1b 	bl	80068ae <max30102_read>
    config = (config & 0xf8) | mode;
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
 8006a7a:	b25b      	sxtb	r3, r3
 8006a7c:	f023 0307 	bic.w	r3, r3, #7
 8006a80:	b25a      	sxtb	r2, r3
 8006a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	b25b      	sxtb	r3, r3
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 8006a8e:	f107 020f 	add.w	r2, r7, #15
 8006a92:	2301      	movs	r3, #1
 8006a94:	2109      	movs	r1, #9
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7ff fed5 	bl	8006846 <max30102_write>
    max30102_clear_fifo(obj);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f8ff 	bl	8006ca0 <max30102_clear_fifo>
}
 8006aa2:	bf00      	nop
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8006ab6:	f107 020f 	add.w	r2, r7, #15
 8006aba:	2301      	movs	r3, #1
 8006abc:	210a      	movs	r1, #10
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7ff fef5 	bl	80068ae <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	b25b      	sxtb	r3, r3
 8006ac8:	f003 0363 	and.w	r3, r3, #99	@ 0x63
 8006acc:	b25a      	sxtb	r2, r3
 8006ace:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	b25b      	sxtb	r3, r3
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	b25b      	sxtb	r3, r3
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8006ade:	f107 020f 	add.w	r2, r7, #15
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	210a      	movs	r1, #10
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff fead 	bl	8006846 <max30102_write>
}
 8006aec:	bf00      	nop
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8006b00:	f107 020f 	add.w	r2, r7, #15
 8006b04:	2301      	movs	r3, #1
 8006b06:	210a      	movs	r1, #10
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff fed0 	bl	80068ae <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
 8006b10:	b25b      	sxtb	r3, r3
 8006b12:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8006b16:	b25a      	sxtb	r2, r3
 8006b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	b25b      	sxtb	r3, r3
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8006b24:	f107 020f 	add.w	r2, r7, #15
 8006b28:	2301      	movs	r3, #1
 8006b2a:	210a      	movs	r1, #10
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff fe8a 	bl	8006846 <max30102_write>
}
 8006b32:	bf00      	nop
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	460b      	mov	r3, r1
 8006b44:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8006b46:	f107 020f 	add.w	r2, r7, #15
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	210a      	movs	r1, #10
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7ff fead 	bl	80068ae <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	b25b      	sxtb	r3, r3
 8006b58:	f003 031f 	and.w	r3, r3, #31
 8006b5c:	b25a      	sxtb	r2, r3
 8006b5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b62:	015b      	lsls	r3, r3, #5
 8006b64:	b25b      	sxtb	r3, r3
 8006b66:	4313      	orrs	r3, r2
 8006b68:	b25b      	sxtb	r3, r3
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8006b6e:	f107 020f 	add.w	r2, r7, #15
 8006b72:	2301      	movs	r3, #1
 8006b74:	210a      	movs	r1, #10
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff fe65 	bl	8006846 <max30102_write>
}
 8006b7c:	bf00      	nop
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	0000      	movs	r0, r0
	...

08006b88 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 8006b94:	6838      	ldr	r0, [r7, #0]
 8006b96:	f7f9 fccf 	bl	8000538 <__aeabi_f2d>
 8006b9a:	a30d      	add	r3, pc, #52	@ (adr r3, 8006bd0 <max30102_set_led_current_1+0x48>)
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	f7f9 fe4c 	bl	800083c <__aeabi_ddiv>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4610      	mov	r0, r2
 8006baa:	4619      	mov	r1, r3
 8006bac:	f7f9 ff2e 	bl	8000a0c <__aeabi_d2uiz>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 8006bb6:	f107 020f 	add.w	r2, r7, #15
 8006bba:	2301      	movs	r3, #1
 8006bbc:	210c      	movs	r1, #12
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7ff fe41 	bl	8006846 <max30102_write>
}
 8006bc4:	bf00      	nop
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	f3af 8000 	nop.w
 8006bd0:	9999999a 	.word	0x9999999a
 8006bd4:	3fc99999 	.word	0x3fc99999

08006bd8 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 8006be4:	6838      	ldr	r0, [r7, #0]
 8006be6:	f7f9 fca7 	bl	8000538 <__aeabi_f2d>
 8006bea:	a30d      	add	r3, pc, #52	@ (adr r3, 8006c20 <max30102_set_led_current_2+0x48>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f7f9 fe24 	bl	800083c <__aeabi_ddiv>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	f7f9 ff06 	bl	8000a0c <__aeabi_d2uiz>
 8006c00:	4603      	mov	r3, r0
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 8006c06:	f107 020f 	add.w	r2, r7, #15
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	210d      	movs	r1, #13
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff fe19 	bl	8006846 <max30102_write>
}
 8006c14:	bf00      	nop
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	f3af 8000 	nop.w
 8006c20:	9999999a 	.word	0x9999999a
 8006c24:	3fc99999 	.word	0x3fc99999

08006c28 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	4608      	mov	r0, r1
 8006c32:	4611      	mov	r1, r2
 8006c34:	461a      	mov	r2, r3
 8006c36:	4603      	mov	r3, r0
 8006c38:	70fb      	strb	r3, [r7, #3]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	70bb      	strb	r3, [r7, #2]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 8006c42:	2300      	movs	r3, #0
 8006c44:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 8006c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c4a:	015b      	lsls	r3, r3, #5
 8006c4c:	b25a      	sxtb	r2, r3
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	b25b      	sxtb	r3, r3
 8006c52:	4313      	orrs	r3, r2
 8006c54:	b25b      	sxtb	r3, r3
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8006c5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	b25b      	sxtb	r3, r3
 8006c62:	f003 0310 	and.w	r3, r3, #16
 8006c66:	b25a      	sxtb	r2, r3
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	b25b      	sxtb	r3, r3
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	b25b      	sxtb	r3, r3
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8006c74:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8006c78:	f003 030f 	and.w	r3, r3, #15
 8006c7c:	b25a      	sxtb	r2, r3
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	b25b      	sxtb	r3, r3
 8006c82:	4313      	orrs	r3, r2
 8006c84:	b25b      	sxtb	r3, r3
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 8006c8a:	f107 020f 	add.w	r2, r7, #15
 8006c8e:	2301      	movs	r3, #1
 8006c90:	2108      	movs	r1, #8
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7ff fdd7 	bl	8006846 <max30102_write>
}
 8006c98:	bf00      	nop
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8006cac:	f107 020f 	add.w	r2, r7, #15
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	2104      	movs	r1, #4
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff fdc6 	bl	8006846 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 8006cba:	f107 020f 	add.w	r2, r7, #15
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	2106      	movs	r1, #6
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff fdbf 	bl	8006846 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8006cc8:	f107 020f 	add.w	r2, r7, #15
 8006ccc:	2303      	movs	r3, #3
 8006cce:	2105      	movs	r1, #5
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff fdb8 	bl	8006846 <max30102_write>
}
 8006cd6:	bf00      	nop
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b088      	sub	sp, #32
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	74fb      	strb	r3, [r7, #19]
 8006cea:	2300      	movs	r3, #0
 8006cec:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 8006cee:	f107 0213 	add.w	r2, r7, #19
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	2104      	movs	r1, #4
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff fdd9 	bl	80068ae <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8006cfc:	f107 0212 	add.w	r2, r7, #18
 8006d00:	2301      	movs	r3, #1
 8006d02:	2106      	movs	r1, #6
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7ff fdd2 	bl	80068ae <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 8006d0a:	7cfa      	ldrb	r2, [r7, #19]
 8006d0c:	7cbb      	ldrb	r3, [r7, #18]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8006d14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	dc03      	bgt.n	8006d24 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8006d1c:	7ffb      	ldrb	r3, [r7, #31]
 8006d1e:	3320      	adds	r3, #32
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8006d24:	2300      	movs	r3, #0
 8006d26:	77bb      	strb	r3, [r7, #30]
 8006d28:	e033      	b.n	8006d92 <max30102_read_fifo+0xb4>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 8006d2a:	f107 020c 	add.w	r2, r7, #12
 8006d2e:	2306      	movs	r3, #6
 8006d30:	2107      	movs	r1, #7
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7ff fdbb 	bl	80068ae <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8006d38:	7b3b      	ldrb	r3, [r7, #12]
 8006d3a:	041a      	lsls	r2, r3, #16
 8006d3c:	7b7b      	ldrb	r3, [r7, #13]
 8006d3e:	021b      	lsls	r3, r3, #8
 8006d40:	4313      	orrs	r3, r2
 8006d42:	7bba      	ldrb	r2, [r7, #14]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8006d4a:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
 8006d4e:	041a      	lsls	r2, r3, #16
 8006d50:	7c3b      	ldrb	r3, [r7, #16]
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	4313      	orrs	r3, r2
 8006d56:	7c7a      	ldrb	r2, [r7, #17]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8006d5e:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 8006d60:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 8006d6e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	3320      	adds	r3, #32
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 8006d7e:	6979      	ldr	r1, [r7, #20]
 8006d80:	69b8      	ldr	r0, [r7, #24]
 8006d82:	f7ff fd37 	bl	80067f4 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 8006d86:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	77bb      	strb	r3, [r7, #30]
 8006d92:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8006d96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	dbc5      	blt.n	8006d2a <max30102_read_fifo+0x4c>
    }
}
 8006d9e:	bf00      	nop
 8006da0:	bf00      	nop
 8006da2:	3720      	adds	r7, #32
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 8006db4:	2301      	movs	r3, #1
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	211f      	movs	r1, #31
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f7ff fd77 	bl	80068ae <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	2120      	movs	r1, #32
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f7ff fd71 	bl	80068ae <max30102_read>
}
 8006dcc:	bf00      	nop
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <malloc>:
 8006dd4:	4b02      	ldr	r3, [pc, #8]	@ (8006de0 <malloc+0xc>)
 8006dd6:	4601      	mov	r1, r0
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	f000 b82d 	b.w	8006e38 <_malloc_r>
 8006dde:	bf00      	nop
 8006de0:	20000018 	.word	0x20000018

08006de4 <free>:
 8006de4:	4b02      	ldr	r3, [pc, #8]	@ (8006df0 <free+0xc>)
 8006de6:	4601      	mov	r1, r0
 8006de8:	6818      	ldr	r0, [r3, #0]
 8006dea:	f000 bb55 	b.w	8007498 <_free_r>
 8006dee:	bf00      	nop
 8006df0:	20000018 	.word	0x20000018

08006df4 <sbrk_aligned>:
 8006df4:	b570      	push	{r4, r5, r6, lr}
 8006df6:	4e0f      	ldr	r6, [pc, #60]	@ (8006e34 <sbrk_aligned+0x40>)
 8006df8:	460c      	mov	r4, r1
 8006dfa:	6831      	ldr	r1, [r6, #0]
 8006dfc:	4605      	mov	r5, r0
 8006dfe:	b911      	cbnz	r1, 8006e06 <sbrk_aligned+0x12>
 8006e00:	f000 faec 	bl	80073dc <_sbrk_r>
 8006e04:	6030      	str	r0, [r6, #0]
 8006e06:	4621      	mov	r1, r4
 8006e08:	4628      	mov	r0, r5
 8006e0a:	f000 fae7 	bl	80073dc <_sbrk_r>
 8006e0e:	1c43      	adds	r3, r0, #1
 8006e10:	d103      	bne.n	8006e1a <sbrk_aligned+0x26>
 8006e12:	f04f 34ff 	mov.w	r4, #4294967295
 8006e16:	4620      	mov	r0, r4
 8006e18:	bd70      	pop	{r4, r5, r6, pc}
 8006e1a:	1cc4      	adds	r4, r0, #3
 8006e1c:	f024 0403 	bic.w	r4, r4, #3
 8006e20:	42a0      	cmp	r0, r4
 8006e22:	d0f8      	beq.n	8006e16 <sbrk_aligned+0x22>
 8006e24:	1a21      	subs	r1, r4, r0
 8006e26:	4628      	mov	r0, r5
 8006e28:	f000 fad8 	bl	80073dc <_sbrk_r>
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	d1f2      	bne.n	8006e16 <sbrk_aligned+0x22>
 8006e30:	e7ef      	b.n	8006e12 <sbrk_aligned+0x1e>
 8006e32:	bf00      	nop
 8006e34:	200007f8 	.word	0x200007f8

08006e38 <_malloc_r>:
 8006e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e3c:	1ccd      	adds	r5, r1, #3
 8006e3e:	f025 0503 	bic.w	r5, r5, #3
 8006e42:	3508      	adds	r5, #8
 8006e44:	2d0c      	cmp	r5, #12
 8006e46:	bf38      	it	cc
 8006e48:	250c      	movcc	r5, #12
 8006e4a:	2d00      	cmp	r5, #0
 8006e4c:	4606      	mov	r6, r0
 8006e4e:	db01      	blt.n	8006e54 <_malloc_r+0x1c>
 8006e50:	42a9      	cmp	r1, r5
 8006e52:	d904      	bls.n	8006e5e <_malloc_r+0x26>
 8006e54:	230c      	movs	r3, #12
 8006e56:	6033      	str	r3, [r6, #0]
 8006e58:	2000      	movs	r0, #0
 8006e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f34 <_malloc_r+0xfc>
 8006e62:	f000 f869 	bl	8006f38 <__malloc_lock>
 8006e66:	f8d8 3000 	ldr.w	r3, [r8]
 8006e6a:	461c      	mov	r4, r3
 8006e6c:	bb44      	cbnz	r4, 8006ec0 <_malloc_r+0x88>
 8006e6e:	4629      	mov	r1, r5
 8006e70:	4630      	mov	r0, r6
 8006e72:	f7ff ffbf 	bl	8006df4 <sbrk_aligned>
 8006e76:	1c43      	adds	r3, r0, #1
 8006e78:	4604      	mov	r4, r0
 8006e7a:	d158      	bne.n	8006f2e <_malloc_r+0xf6>
 8006e7c:	f8d8 4000 	ldr.w	r4, [r8]
 8006e80:	4627      	mov	r7, r4
 8006e82:	2f00      	cmp	r7, #0
 8006e84:	d143      	bne.n	8006f0e <_malloc_r+0xd6>
 8006e86:	2c00      	cmp	r4, #0
 8006e88:	d04b      	beq.n	8006f22 <_malloc_r+0xea>
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	4639      	mov	r1, r7
 8006e8e:	4630      	mov	r0, r6
 8006e90:	eb04 0903 	add.w	r9, r4, r3
 8006e94:	f000 faa2 	bl	80073dc <_sbrk_r>
 8006e98:	4581      	cmp	r9, r0
 8006e9a:	d142      	bne.n	8006f22 <_malloc_r+0xea>
 8006e9c:	6821      	ldr	r1, [r4, #0]
 8006e9e:	1a6d      	subs	r5, r5, r1
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f7ff ffa6 	bl	8006df4 <sbrk_aligned>
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	d03a      	beq.n	8006f22 <_malloc_r+0xea>
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	442b      	add	r3, r5
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	bb62      	cbnz	r2, 8006f14 <_malloc_r+0xdc>
 8006eba:	f8c8 7000 	str.w	r7, [r8]
 8006ebe:	e00f      	b.n	8006ee0 <_malloc_r+0xa8>
 8006ec0:	6822      	ldr	r2, [r4, #0]
 8006ec2:	1b52      	subs	r2, r2, r5
 8006ec4:	d420      	bmi.n	8006f08 <_malloc_r+0xd0>
 8006ec6:	2a0b      	cmp	r2, #11
 8006ec8:	d917      	bls.n	8006efa <_malloc_r+0xc2>
 8006eca:	1961      	adds	r1, r4, r5
 8006ecc:	42a3      	cmp	r3, r4
 8006ece:	6025      	str	r5, [r4, #0]
 8006ed0:	bf18      	it	ne
 8006ed2:	6059      	strne	r1, [r3, #4]
 8006ed4:	6863      	ldr	r3, [r4, #4]
 8006ed6:	bf08      	it	eq
 8006ed8:	f8c8 1000 	streq.w	r1, [r8]
 8006edc:	5162      	str	r2, [r4, r5]
 8006ede:	604b      	str	r3, [r1, #4]
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	f000 f82f 	bl	8006f44 <__malloc_unlock>
 8006ee6:	f104 000b 	add.w	r0, r4, #11
 8006eea:	1d23      	adds	r3, r4, #4
 8006eec:	f020 0007 	bic.w	r0, r0, #7
 8006ef0:	1ac2      	subs	r2, r0, r3
 8006ef2:	bf1c      	itt	ne
 8006ef4:	1a1b      	subne	r3, r3, r0
 8006ef6:	50a3      	strne	r3, [r4, r2]
 8006ef8:	e7af      	b.n	8006e5a <_malloc_r+0x22>
 8006efa:	6862      	ldr	r2, [r4, #4]
 8006efc:	42a3      	cmp	r3, r4
 8006efe:	bf0c      	ite	eq
 8006f00:	f8c8 2000 	streq.w	r2, [r8]
 8006f04:	605a      	strne	r2, [r3, #4]
 8006f06:	e7eb      	b.n	8006ee0 <_malloc_r+0xa8>
 8006f08:	4623      	mov	r3, r4
 8006f0a:	6864      	ldr	r4, [r4, #4]
 8006f0c:	e7ae      	b.n	8006e6c <_malloc_r+0x34>
 8006f0e:	463c      	mov	r4, r7
 8006f10:	687f      	ldr	r7, [r7, #4]
 8006f12:	e7b6      	b.n	8006e82 <_malloc_r+0x4a>
 8006f14:	461a      	mov	r2, r3
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	42a3      	cmp	r3, r4
 8006f1a:	d1fb      	bne.n	8006f14 <_malloc_r+0xdc>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	6053      	str	r3, [r2, #4]
 8006f20:	e7de      	b.n	8006ee0 <_malloc_r+0xa8>
 8006f22:	230c      	movs	r3, #12
 8006f24:	6033      	str	r3, [r6, #0]
 8006f26:	4630      	mov	r0, r6
 8006f28:	f000 f80c 	bl	8006f44 <__malloc_unlock>
 8006f2c:	e794      	b.n	8006e58 <_malloc_r+0x20>
 8006f2e:	6005      	str	r5, [r0, #0]
 8006f30:	e7d6      	b.n	8006ee0 <_malloc_r+0xa8>
 8006f32:	bf00      	nop
 8006f34:	200007fc 	.word	0x200007fc

08006f38 <__malloc_lock>:
 8006f38:	4801      	ldr	r0, [pc, #4]	@ (8006f40 <__malloc_lock+0x8>)
 8006f3a:	f000 ba9c 	b.w	8007476 <__retarget_lock_acquire_recursive>
 8006f3e:	bf00      	nop
 8006f40:	20000940 	.word	0x20000940

08006f44 <__malloc_unlock>:
 8006f44:	4801      	ldr	r0, [pc, #4]	@ (8006f4c <__malloc_unlock+0x8>)
 8006f46:	f000 ba97 	b.w	8007478 <__retarget_lock_release_recursive>
 8006f4a:	bf00      	nop
 8006f4c:	20000940 	.word	0x20000940

08006f50 <std>:
 8006f50:	2300      	movs	r3, #0
 8006f52:	b510      	push	{r4, lr}
 8006f54:	4604      	mov	r4, r0
 8006f56:	e9c0 3300 	strd	r3, r3, [r0]
 8006f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f5e:	6083      	str	r3, [r0, #8]
 8006f60:	8181      	strh	r1, [r0, #12]
 8006f62:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f64:	81c2      	strh	r2, [r0, #14]
 8006f66:	6183      	str	r3, [r0, #24]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	2208      	movs	r2, #8
 8006f6c:	305c      	adds	r0, #92	@ 0x5c
 8006f6e:	f000 f9f9 	bl	8007364 <memset>
 8006f72:	4b0d      	ldr	r3, [pc, #52]	@ (8006fa8 <std+0x58>)
 8006f74:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f76:	4b0d      	ldr	r3, [pc, #52]	@ (8006fac <std+0x5c>)
 8006f78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb0 <std+0x60>)
 8006f7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb4 <std+0x64>)
 8006f80:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f82:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb8 <std+0x68>)
 8006f84:	6224      	str	r4, [r4, #32]
 8006f86:	429c      	cmp	r4, r3
 8006f88:	d006      	beq.n	8006f98 <std+0x48>
 8006f8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f8e:	4294      	cmp	r4, r2
 8006f90:	d002      	beq.n	8006f98 <std+0x48>
 8006f92:	33d0      	adds	r3, #208	@ 0xd0
 8006f94:	429c      	cmp	r4, r3
 8006f96:	d105      	bne.n	8006fa4 <std+0x54>
 8006f98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa0:	f000 ba68 	b.w	8007474 <__retarget_lock_init_recursive>
 8006fa4:	bd10      	pop	{r4, pc}
 8006fa6:	bf00      	nop
 8006fa8:	080071b5 	.word	0x080071b5
 8006fac:	080071d7 	.word	0x080071d7
 8006fb0:	0800720f 	.word	0x0800720f
 8006fb4:	08007233 	.word	0x08007233
 8006fb8:	20000800 	.word	0x20000800

08006fbc <stdio_exit_handler>:
 8006fbc:	4a02      	ldr	r2, [pc, #8]	@ (8006fc8 <stdio_exit_handler+0xc>)
 8006fbe:	4903      	ldr	r1, [pc, #12]	@ (8006fcc <stdio_exit_handler+0x10>)
 8006fc0:	4803      	ldr	r0, [pc, #12]	@ (8006fd0 <stdio_exit_handler+0x14>)
 8006fc2:	f000 b869 	b.w	8007098 <_fwalk_sglue>
 8006fc6:	bf00      	nop
 8006fc8:	2000000c 	.word	0x2000000c
 8006fcc:	08007bd1 	.word	0x08007bd1
 8006fd0:	2000001c 	.word	0x2000001c

08006fd4 <cleanup_stdio>:
 8006fd4:	6841      	ldr	r1, [r0, #4]
 8006fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8007008 <cleanup_stdio+0x34>)
 8006fd8:	4299      	cmp	r1, r3
 8006fda:	b510      	push	{r4, lr}
 8006fdc:	4604      	mov	r4, r0
 8006fde:	d001      	beq.n	8006fe4 <cleanup_stdio+0x10>
 8006fe0:	f000 fdf6 	bl	8007bd0 <_fflush_r>
 8006fe4:	68a1      	ldr	r1, [r4, #8]
 8006fe6:	4b09      	ldr	r3, [pc, #36]	@ (800700c <cleanup_stdio+0x38>)
 8006fe8:	4299      	cmp	r1, r3
 8006fea:	d002      	beq.n	8006ff2 <cleanup_stdio+0x1e>
 8006fec:	4620      	mov	r0, r4
 8006fee:	f000 fdef 	bl	8007bd0 <_fflush_r>
 8006ff2:	68e1      	ldr	r1, [r4, #12]
 8006ff4:	4b06      	ldr	r3, [pc, #24]	@ (8007010 <cleanup_stdio+0x3c>)
 8006ff6:	4299      	cmp	r1, r3
 8006ff8:	d004      	beq.n	8007004 <cleanup_stdio+0x30>
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007000:	f000 bde6 	b.w	8007bd0 <_fflush_r>
 8007004:	bd10      	pop	{r4, pc}
 8007006:	bf00      	nop
 8007008:	20000800 	.word	0x20000800
 800700c:	20000868 	.word	0x20000868
 8007010:	200008d0 	.word	0x200008d0

08007014 <global_stdio_init.part.0>:
 8007014:	b510      	push	{r4, lr}
 8007016:	4b0b      	ldr	r3, [pc, #44]	@ (8007044 <global_stdio_init.part.0+0x30>)
 8007018:	4c0b      	ldr	r4, [pc, #44]	@ (8007048 <global_stdio_init.part.0+0x34>)
 800701a:	4a0c      	ldr	r2, [pc, #48]	@ (800704c <global_stdio_init.part.0+0x38>)
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	4620      	mov	r0, r4
 8007020:	2200      	movs	r2, #0
 8007022:	2104      	movs	r1, #4
 8007024:	f7ff ff94 	bl	8006f50 <std>
 8007028:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800702c:	2201      	movs	r2, #1
 800702e:	2109      	movs	r1, #9
 8007030:	f7ff ff8e 	bl	8006f50 <std>
 8007034:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007038:	2202      	movs	r2, #2
 800703a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800703e:	2112      	movs	r1, #18
 8007040:	f7ff bf86 	b.w	8006f50 <std>
 8007044:	20000938 	.word	0x20000938
 8007048:	20000800 	.word	0x20000800
 800704c:	08006fbd 	.word	0x08006fbd

08007050 <__sfp_lock_acquire>:
 8007050:	4801      	ldr	r0, [pc, #4]	@ (8007058 <__sfp_lock_acquire+0x8>)
 8007052:	f000 ba10 	b.w	8007476 <__retarget_lock_acquire_recursive>
 8007056:	bf00      	nop
 8007058:	20000941 	.word	0x20000941

0800705c <__sfp_lock_release>:
 800705c:	4801      	ldr	r0, [pc, #4]	@ (8007064 <__sfp_lock_release+0x8>)
 800705e:	f000 ba0b 	b.w	8007478 <__retarget_lock_release_recursive>
 8007062:	bf00      	nop
 8007064:	20000941 	.word	0x20000941

08007068 <__sinit>:
 8007068:	b510      	push	{r4, lr}
 800706a:	4604      	mov	r4, r0
 800706c:	f7ff fff0 	bl	8007050 <__sfp_lock_acquire>
 8007070:	6a23      	ldr	r3, [r4, #32]
 8007072:	b11b      	cbz	r3, 800707c <__sinit+0x14>
 8007074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007078:	f7ff bff0 	b.w	800705c <__sfp_lock_release>
 800707c:	4b04      	ldr	r3, [pc, #16]	@ (8007090 <__sinit+0x28>)
 800707e:	6223      	str	r3, [r4, #32]
 8007080:	4b04      	ldr	r3, [pc, #16]	@ (8007094 <__sinit+0x2c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1f5      	bne.n	8007074 <__sinit+0xc>
 8007088:	f7ff ffc4 	bl	8007014 <global_stdio_init.part.0>
 800708c:	e7f2      	b.n	8007074 <__sinit+0xc>
 800708e:	bf00      	nop
 8007090:	08006fd5 	.word	0x08006fd5
 8007094:	20000938 	.word	0x20000938

08007098 <_fwalk_sglue>:
 8007098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800709c:	4607      	mov	r7, r0
 800709e:	4688      	mov	r8, r1
 80070a0:	4614      	mov	r4, r2
 80070a2:	2600      	movs	r6, #0
 80070a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070a8:	f1b9 0901 	subs.w	r9, r9, #1
 80070ac:	d505      	bpl.n	80070ba <_fwalk_sglue+0x22>
 80070ae:	6824      	ldr	r4, [r4, #0]
 80070b0:	2c00      	cmp	r4, #0
 80070b2:	d1f7      	bne.n	80070a4 <_fwalk_sglue+0xc>
 80070b4:	4630      	mov	r0, r6
 80070b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070ba:	89ab      	ldrh	r3, [r5, #12]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d907      	bls.n	80070d0 <_fwalk_sglue+0x38>
 80070c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070c4:	3301      	adds	r3, #1
 80070c6:	d003      	beq.n	80070d0 <_fwalk_sglue+0x38>
 80070c8:	4629      	mov	r1, r5
 80070ca:	4638      	mov	r0, r7
 80070cc:	47c0      	blx	r8
 80070ce:	4306      	orrs	r6, r0
 80070d0:	3568      	adds	r5, #104	@ 0x68
 80070d2:	e7e9      	b.n	80070a8 <_fwalk_sglue+0x10>

080070d4 <iprintf>:
 80070d4:	b40f      	push	{r0, r1, r2, r3}
 80070d6:	b507      	push	{r0, r1, r2, lr}
 80070d8:	4906      	ldr	r1, [pc, #24]	@ (80070f4 <iprintf+0x20>)
 80070da:	ab04      	add	r3, sp, #16
 80070dc:	6808      	ldr	r0, [r1, #0]
 80070de:	f853 2b04 	ldr.w	r2, [r3], #4
 80070e2:	6881      	ldr	r1, [r0, #8]
 80070e4:	9301      	str	r3, [sp, #4]
 80070e6:	f000 fa4b 	bl	8007580 <_vfiprintf_r>
 80070ea:	b003      	add	sp, #12
 80070ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80070f0:	b004      	add	sp, #16
 80070f2:	4770      	bx	lr
 80070f4:	20000018 	.word	0x20000018

080070f8 <_puts_r>:
 80070f8:	6a03      	ldr	r3, [r0, #32]
 80070fa:	b570      	push	{r4, r5, r6, lr}
 80070fc:	6884      	ldr	r4, [r0, #8]
 80070fe:	4605      	mov	r5, r0
 8007100:	460e      	mov	r6, r1
 8007102:	b90b      	cbnz	r3, 8007108 <_puts_r+0x10>
 8007104:	f7ff ffb0 	bl	8007068 <__sinit>
 8007108:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800710a:	07db      	lsls	r3, r3, #31
 800710c:	d405      	bmi.n	800711a <_puts_r+0x22>
 800710e:	89a3      	ldrh	r3, [r4, #12]
 8007110:	0598      	lsls	r0, r3, #22
 8007112:	d402      	bmi.n	800711a <_puts_r+0x22>
 8007114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007116:	f000 f9ae 	bl	8007476 <__retarget_lock_acquire_recursive>
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	0719      	lsls	r1, r3, #28
 800711e:	d502      	bpl.n	8007126 <_puts_r+0x2e>
 8007120:	6923      	ldr	r3, [r4, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d135      	bne.n	8007192 <_puts_r+0x9a>
 8007126:	4621      	mov	r1, r4
 8007128:	4628      	mov	r0, r5
 800712a:	f000 f8c5 	bl	80072b8 <__swsetup_r>
 800712e:	b380      	cbz	r0, 8007192 <_puts_r+0x9a>
 8007130:	f04f 35ff 	mov.w	r5, #4294967295
 8007134:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007136:	07da      	lsls	r2, r3, #31
 8007138:	d405      	bmi.n	8007146 <_puts_r+0x4e>
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	059b      	lsls	r3, r3, #22
 800713e:	d402      	bmi.n	8007146 <_puts_r+0x4e>
 8007140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007142:	f000 f999 	bl	8007478 <__retarget_lock_release_recursive>
 8007146:	4628      	mov	r0, r5
 8007148:	bd70      	pop	{r4, r5, r6, pc}
 800714a:	2b00      	cmp	r3, #0
 800714c:	da04      	bge.n	8007158 <_puts_r+0x60>
 800714e:	69a2      	ldr	r2, [r4, #24]
 8007150:	429a      	cmp	r2, r3
 8007152:	dc17      	bgt.n	8007184 <_puts_r+0x8c>
 8007154:	290a      	cmp	r1, #10
 8007156:	d015      	beq.n	8007184 <_puts_r+0x8c>
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	6022      	str	r2, [r4, #0]
 800715e:	7019      	strb	r1, [r3, #0]
 8007160:	68a3      	ldr	r3, [r4, #8]
 8007162:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007166:	3b01      	subs	r3, #1
 8007168:	60a3      	str	r3, [r4, #8]
 800716a:	2900      	cmp	r1, #0
 800716c:	d1ed      	bne.n	800714a <_puts_r+0x52>
 800716e:	2b00      	cmp	r3, #0
 8007170:	da11      	bge.n	8007196 <_puts_r+0x9e>
 8007172:	4622      	mov	r2, r4
 8007174:	210a      	movs	r1, #10
 8007176:	4628      	mov	r0, r5
 8007178:	f000 f85f 	bl	800723a <__swbuf_r>
 800717c:	3001      	adds	r0, #1
 800717e:	d0d7      	beq.n	8007130 <_puts_r+0x38>
 8007180:	250a      	movs	r5, #10
 8007182:	e7d7      	b.n	8007134 <_puts_r+0x3c>
 8007184:	4622      	mov	r2, r4
 8007186:	4628      	mov	r0, r5
 8007188:	f000 f857 	bl	800723a <__swbuf_r>
 800718c:	3001      	adds	r0, #1
 800718e:	d1e7      	bne.n	8007160 <_puts_r+0x68>
 8007190:	e7ce      	b.n	8007130 <_puts_r+0x38>
 8007192:	3e01      	subs	r6, #1
 8007194:	e7e4      	b.n	8007160 <_puts_r+0x68>
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	6022      	str	r2, [r4, #0]
 800719c:	220a      	movs	r2, #10
 800719e:	701a      	strb	r2, [r3, #0]
 80071a0:	e7ee      	b.n	8007180 <_puts_r+0x88>
	...

080071a4 <puts>:
 80071a4:	4b02      	ldr	r3, [pc, #8]	@ (80071b0 <puts+0xc>)
 80071a6:	4601      	mov	r1, r0
 80071a8:	6818      	ldr	r0, [r3, #0]
 80071aa:	f7ff bfa5 	b.w	80070f8 <_puts_r>
 80071ae:	bf00      	nop
 80071b0:	20000018 	.word	0x20000018

080071b4 <__sread>:
 80071b4:	b510      	push	{r4, lr}
 80071b6:	460c      	mov	r4, r1
 80071b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071bc:	f000 f8fc 	bl	80073b8 <_read_r>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	bfab      	itete	ge
 80071c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80071c6:	89a3      	ldrhlt	r3, [r4, #12]
 80071c8:	181b      	addge	r3, r3, r0
 80071ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80071ce:	bfac      	ite	ge
 80071d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80071d2:	81a3      	strhlt	r3, [r4, #12]
 80071d4:	bd10      	pop	{r4, pc}

080071d6 <__swrite>:
 80071d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071da:	461f      	mov	r7, r3
 80071dc:	898b      	ldrh	r3, [r1, #12]
 80071de:	05db      	lsls	r3, r3, #23
 80071e0:	4605      	mov	r5, r0
 80071e2:	460c      	mov	r4, r1
 80071e4:	4616      	mov	r6, r2
 80071e6:	d505      	bpl.n	80071f4 <__swrite+0x1e>
 80071e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ec:	2302      	movs	r3, #2
 80071ee:	2200      	movs	r2, #0
 80071f0:	f000 f8d0 	bl	8007394 <_lseek_r>
 80071f4:	89a3      	ldrh	r3, [r4, #12]
 80071f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071fe:	81a3      	strh	r3, [r4, #12]
 8007200:	4632      	mov	r2, r6
 8007202:	463b      	mov	r3, r7
 8007204:	4628      	mov	r0, r5
 8007206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800720a:	f000 b8f7 	b.w	80073fc <_write_r>

0800720e <__sseek>:
 800720e:	b510      	push	{r4, lr}
 8007210:	460c      	mov	r4, r1
 8007212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007216:	f000 f8bd 	bl	8007394 <_lseek_r>
 800721a:	1c43      	adds	r3, r0, #1
 800721c:	89a3      	ldrh	r3, [r4, #12]
 800721e:	bf15      	itete	ne
 8007220:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007222:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007226:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800722a:	81a3      	strheq	r3, [r4, #12]
 800722c:	bf18      	it	ne
 800722e:	81a3      	strhne	r3, [r4, #12]
 8007230:	bd10      	pop	{r4, pc}

08007232 <__sclose>:
 8007232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007236:	f000 b89d 	b.w	8007374 <_close_r>

0800723a <__swbuf_r>:
 800723a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723c:	460e      	mov	r6, r1
 800723e:	4614      	mov	r4, r2
 8007240:	4605      	mov	r5, r0
 8007242:	b118      	cbz	r0, 800724c <__swbuf_r+0x12>
 8007244:	6a03      	ldr	r3, [r0, #32]
 8007246:	b90b      	cbnz	r3, 800724c <__swbuf_r+0x12>
 8007248:	f7ff ff0e 	bl	8007068 <__sinit>
 800724c:	69a3      	ldr	r3, [r4, #24]
 800724e:	60a3      	str	r3, [r4, #8]
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	071a      	lsls	r2, r3, #28
 8007254:	d501      	bpl.n	800725a <__swbuf_r+0x20>
 8007256:	6923      	ldr	r3, [r4, #16]
 8007258:	b943      	cbnz	r3, 800726c <__swbuf_r+0x32>
 800725a:	4621      	mov	r1, r4
 800725c:	4628      	mov	r0, r5
 800725e:	f000 f82b 	bl	80072b8 <__swsetup_r>
 8007262:	b118      	cbz	r0, 800726c <__swbuf_r+0x32>
 8007264:	f04f 37ff 	mov.w	r7, #4294967295
 8007268:	4638      	mov	r0, r7
 800726a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	6922      	ldr	r2, [r4, #16]
 8007270:	1a98      	subs	r0, r3, r2
 8007272:	6963      	ldr	r3, [r4, #20]
 8007274:	b2f6      	uxtb	r6, r6
 8007276:	4283      	cmp	r3, r0
 8007278:	4637      	mov	r7, r6
 800727a:	dc05      	bgt.n	8007288 <__swbuf_r+0x4e>
 800727c:	4621      	mov	r1, r4
 800727e:	4628      	mov	r0, r5
 8007280:	f000 fca6 	bl	8007bd0 <_fflush_r>
 8007284:	2800      	cmp	r0, #0
 8007286:	d1ed      	bne.n	8007264 <__swbuf_r+0x2a>
 8007288:	68a3      	ldr	r3, [r4, #8]
 800728a:	3b01      	subs	r3, #1
 800728c:	60a3      	str	r3, [r4, #8]
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	6022      	str	r2, [r4, #0]
 8007294:	701e      	strb	r6, [r3, #0]
 8007296:	6962      	ldr	r2, [r4, #20]
 8007298:	1c43      	adds	r3, r0, #1
 800729a:	429a      	cmp	r2, r3
 800729c:	d004      	beq.n	80072a8 <__swbuf_r+0x6e>
 800729e:	89a3      	ldrh	r3, [r4, #12]
 80072a0:	07db      	lsls	r3, r3, #31
 80072a2:	d5e1      	bpl.n	8007268 <__swbuf_r+0x2e>
 80072a4:	2e0a      	cmp	r6, #10
 80072a6:	d1df      	bne.n	8007268 <__swbuf_r+0x2e>
 80072a8:	4621      	mov	r1, r4
 80072aa:	4628      	mov	r0, r5
 80072ac:	f000 fc90 	bl	8007bd0 <_fflush_r>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d0d9      	beq.n	8007268 <__swbuf_r+0x2e>
 80072b4:	e7d6      	b.n	8007264 <__swbuf_r+0x2a>
	...

080072b8 <__swsetup_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	4b29      	ldr	r3, [pc, #164]	@ (8007360 <__swsetup_r+0xa8>)
 80072bc:	4605      	mov	r5, r0
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	460c      	mov	r4, r1
 80072c2:	b118      	cbz	r0, 80072cc <__swsetup_r+0x14>
 80072c4:	6a03      	ldr	r3, [r0, #32]
 80072c6:	b90b      	cbnz	r3, 80072cc <__swsetup_r+0x14>
 80072c8:	f7ff fece 	bl	8007068 <__sinit>
 80072cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072d0:	0719      	lsls	r1, r3, #28
 80072d2:	d422      	bmi.n	800731a <__swsetup_r+0x62>
 80072d4:	06da      	lsls	r2, r3, #27
 80072d6:	d407      	bmi.n	80072e8 <__swsetup_r+0x30>
 80072d8:	2209      	movs	r2, #9
 80072da:	602a      	str	r2, [r5, #0]
 80072dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072e0:	81a3      	strh	r3, [r4, #12]
 80072e2:	f04f 30ff 	mov.w	r0, #4294967295
 80072e6:	e033      	b.n	8007350 <__swsetup_r+0x98>
 80072e8:	0758      	lsls	r0, r3, #29
 80072ea:	d512      	bpl.n	8007312 <__swsetup_r+0x5a>
 80072ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072ee:	b141      	cbz	r1, 8007302 <__swsetup_r+0x4a>
 80072f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072f4:	4299      	cmp	r1, r3
 80072f6:	d002      	beq.n	80072fe <__swsetup_r+0x46>
 80072f8:	4628      	mov	r0, r5
 80072fa:	f000 f8cd 	bl	8007498 <_free_r>
 80072fe:	2300      	movs	r3, #0
 8007300:	6363      	str	r3, [r4, #52]	@ 0x34
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007308:	81a3      	strh	r3, [r4, #12]
 800730a:	2300      	movs	r3, #0
 800730c:	6063      	str	r3, [r4, #4]
 800730e:	6923      	ldr	r3, [r4, #16]
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	89a3      	ldrh	r3, [r4, #12]
 8007314:	f043 0308 	orr.w	r3, r3, #8
 8007318:	81a3      	strh	r3, [r4, #12]
 800731a:	6923      	ldr	r3, [r4, #16]
 800731c:	b94b      	cbnz	r3, 8007332 <__swsetup_r+0x7a>
 800731e:	89a3      	ldrh	r3, [r4, #12]
 8007320:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007328:	d003      	beq.n	8007332 <__swsetup_r+0x7a>
 800732a:	4621      	mov	r1, r4
 800732c:	4628      	mov	r0, r5
 800732e:	f000 fc9d 	bl	8007c6c <__smakebuf_r>
 8007332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007336:	f013 0201 	ands.w	r2, r3, #1
 800733a:	d00a      	beq.n	8007352 <__swsetup_r+0x9a>
 800733c:	2200      	movs	r2, #0
 800733e:	60a2      	str	r2, [r4, #8]
 8007340:	6962      	ldr	r2, [r4, #20]
 8007342:	4252      	negs	r2, r2
 8007344:	61a2      	str	r2, [r4, #24]
 8007346:	6922      	ldr	r2, [r4, #16]
 8007348:	b942      	cbnz	r2, 800735c <__swsetup_r+0xa4>
 800734a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800734e:	d1c5      	bne.n	80072dc <__swsetup_r+0x24>
 8007350:	bd38      	pop	{r3, r4, r5, pc}
 8007352:	0799      	lsls	r1, r3, #30
 8007354:	bf58      	it	pl
 8007356:	6962      	ldrpl	r2, [r4, #20]
 8007358:	60a2      	str	r2, [r4, #8]
 800735a:	e7f4      	b.n	8007346 <__swsetup_r+0x8e>
 800735c:	2000      	movs	r0, #0
 800735e:	e7f7      	b.n	8007350 <__swsetup_r+0x98>
 8007360:	20000018 	.word	0x20000018

08007364 <memset>:
 8007364:	4402      	add	r2, r0
 8007366:	4603      	mov	r3, r0
 8007368:	4293      	cmp	r3, r2
 800736a:	d100      	bne.n	800736e <memset+0xa>
 800736c:	4770      	bx	lr
 800736e:	f803 1b01 	strb.w	r1, [r3], #1
 8007372:	e7f9      	b.n	8007368 <memset+0x4>

08007374 <_close_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	4d06      	ldr	r5, [pc, #24]	@ (8007390 <_close_r+0x1c>)
 8007378:	2300      	movs	r3, #0
 800737a:	4604      	mov	r4, r0
 800737c:	4608      	mov	r0, r1
 800737e:	602b      	str	r3, [r5, #0]
 8007380:	f7fa fac5 	bl	800190e <_close>
 8007384:	1c43      	adds	r3, r0, #1
 8007386:	d102      	bne.n	800738e <_close_r+0x1a>
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	b103      	cbz	r3, 800738e <_close_r+0x1a>
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	bd38      	pop	{r3, r4, r5, pc}
 8007390:	2000093c 	.word	0x2000093c

08007394 <_lseek_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	4d07      	ldr	r5, [pc, #28]	@ (80073b4 <_lseek_r+0x20>)
 8007398:	4604      	mov	r4, r0
 800739a:	4608      	mov	r0, r1
 800739c:	4611      	mov	r1, r2
 800739e:	2200      	movs	r2, #0
 80073a0:	602a      	str	r2, [r5, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	f7fa fada 	bl	800195c <_lseek>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d102      	bne.n	80073b2 <_lseek_r+0x1e>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	b103      	cbz	r3, 80073b2 <_lseek_r+0x1e>
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	2000093c 	.word	0x2000093c

080073b8 <_read_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	4d07      	ldr	r5, [pc, #28]	@ (80073d8 <_read_r+0x20>)
 80073bc:	4604      	mov	r4, r0
 80073be:	4608      	mov	r0, r1
 80073c0:	4611      	mov	r1, r2
 80073c2:	2200      	movs	r2, #0
 80073c4:	602a      	str	r2, [r5, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	f7fa fa68 	bl	800189c <_read>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d102      	bne.n	80073d6 <_read_r+0x1e>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	b103      	cbz	r3, 80073d6 <_read_r+0x1e>
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	2000093c 	.word	0x2000093c

080073dc <_sbrk_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	4d06      	ldr	r5, [pc, #24]	@ (80073f8 <_sbrk_r+0x1c>)
 80073e0:	2300      	movs	r3, #0
 80073e2:	4604      	mov	r4, r0
 80073e4:	4608      	mov	r0, r1
 80073e6:	602b      	str	r3, [r5, #0]
 80073e8:	f7fa fac6 	bl	8001978 <_sbrk>
 80073ec:	1c43      	adds	r3, r0, #1
 80073ee:	d102      	bne.n	80073f6 <_sbrk_r+0x1a>
 80073f0:	682b      	ldr	r3, [r5, #0]
 80073f2:	b103      	cbz	r3, 80073f6 <_sbrk_r+0x1a>
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	bd38      	pop	{r3, r4, r5, pc}
 80073f8:	2000093c 	.word	0x2000093c

080073fc <_write_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	4d07      	ldr	r5, [pc, #28]	@ (800741c <_write_r+0x20>)
 8007400:	4604      	mov	r4, r0
 8007402:	4608      	mov	r0, r1
 8007404:	4611      	mov	r1, r2
 8007406:	2200      	movs	r2, #0
 8007408:	602a      	str	r2, [r5, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	f7fa fa63 	bl	80018d6 <_write>
 8007410:	1c43      	adds	r3, r0, #1
 8007412:	d102      	bne.n	800741a <_write_r+0x1e>
 8007414:	682b      	ldr	r3, [r5, #0]
 8007416:	b103      	cbz	r3, 800741a <_write_r+0x1e>
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	bd38      	pop	{r3, r4, r5, pc}
 800741c:	2000093c 	.word	0x2000093c

08007420 <__errno>:
 8007420:	4b01      	ldr	r3, [pc, #4]	@ (8007428 <__errno+0x8>)
 8007422:	6818      	ldr	r0, [r3, #0]
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	20000018 	.word	0x20000018

0800742c <__libc_init_array>:
 800742c:	b570      	push	{r4, r5, r6, lr}
 800742e:	4d0d      	ldr	r5, [pc, #52]	@ (8007464 <__libc_init_array+0x38>)
 8007430:	4c0d      	ldr	r4, [pc, #52]	@ (8007468 <__libc_init_array+0x3c>)
 8007432:	1b64      	subs	r4, r4, r5
 8007434:	10a4      	asrs	r4, r4, #2
 8007436:	2600      	movs	r6, #0
 8007438:	42a6      	cmp	r6, r4
 800743a:	d109      	bne.n	8007450 <__libc_init_array+0x24>
 800743c:	4d0b      	ldr	r5, [pc, #44]	@ (800746c <__libc_init_array+0x40>)
 800743e:	4c0c      	ldr	r4, [pc, #48]	@ (8007470 <__libc_init_array+0x44>)
 8007440:	f000 fc72 	bl	8007d28 <_init>
 8007444:	1b64      	subs	r4, r4, r5
 8007446:	10a4      	asrs	r4, r4, #2
 8007448:	2600      	movs	r6, #0
 800744a:	42a6      	cmp	r6, r4
 800744c:	d105      	bne.n	800745a <__libc_init_array+0x2e>
 800744e:	bd70      	pop	{r4, r5, r6, pc}
 8007450:	f855 3b04 	ldr.w	r3, [r5], #4
 8007454:	4798      	blx	r3
 8007456:	3601      	adds	r6, #1
 8007458:	e7ee      	b.n	8007438 <__libc_init_array+0xc>
 800745a:	f855 3b04 	ldr.w	r3, [r5], #4
 800745e:	4798      	blx	r3
 8007460:	3601      	adds	r6, #1
 8007462:	e7f2      	b.n	800744a <__libc_init_array+0x1e>
 8007464:	08007e0c 	.word	0x08007e0c
 8007468:	08007e0c 	.word	0x08007e0c
 800746c:	08007e0c 	.word	0x08007e0c
 8007470:	08007e10 	.word	0x08007e10

08007474 <__retarget_lock_init_recursive>:
 8007474:	4770      	bx	lr

08007476 <__retarget_lock_acquire_recursive>:
 8007476:	4770      	bx	lr

08007478 <__retarget_lock_release_recursive>:
 8007478:	4770      	bx	lr

0800747a <memcpy>:
 800747a:	440a      	add	r2, r1
 800747c:	4291      	cmp	r1, r2
 800747e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007482:	d100      	bne.n	8007486 <memcpy+0xc>
 8007484:	4770      	bx	lr
 8007486:	b510      	push	{r4, lr}
 8007488:	f811 4b01 	ldrb.w	r4, [r1], #1
 800748c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007490:	4291      	cmp	r1, r2
 8007492:	d1f9      	bne.n	8007488 <memcpy+0xe>
 8007494:	bd10      	pop	{r4, pc}
	...

08007498 <_free_r>:
 8007498:	b538      	push	{r3, r4, r5, lr}
 800749a:	4605      	mov	r5, r0
 800749c:	2900      	cmp	r1, #0
 800749e:	d041      	beq.n	8007524 <_free_r+0x8c>
 80074a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074a4:	1f0c      	subs	r4, r1, #4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	bfb8      	it	lt
 80074aa:	18e4      	addlt	r4, r4, r3
 80074ac:	f7ff fd44 	bl	8006f38 <__malloc_lock>
 80074b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007528 <_free_r+0x90>)
 80074b2:	6813      	ldr	r3, [r2, #0]
 80074b4:	b933      	cbnz	r3, 80074c4 <_free_r+0x2c>
 80074b6:	6063      	str	r3, [r4, #4]
 80074b8:	6014      	str	r4, [r2, #0]
 80074ba:	4628      	mov	r0, r5
 80074bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074c0:	f7ff bd40 	b.w	8006f44 <__malloc_unlock>
 80074c4:	42a3      	cmp	r3, r4
 80074c6:	d908      	bls.n	80074da <_free_r+0x42>
 80074c8:	6820      	ldr	r0, [r4, #0]
 80074ca:	1821      	adds	r1, r4, r0
 80074cc:	428b      	cmp	r3, r1
 80074ce:	bf01      	itttt	eq
 80074d0:	6819      	ldreq	r1, [r3, #0]
 80074d2:	685b      	ldreq	r3, [r3, #4]
 80074d4:	1809      	addeq	r1, r1, r0
 80074d6:	6021      	streq	r1, [r4, #0]
 80074d8:	e7ed      	b.n	80074b6 <_free_r+0x1e>
 80074da:	461a      	mov	r2, r3
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	b10b      	cbz	r3, 80074e4 <_free_r+0x4c>
 80074e0:	42a3      	cmp	r3, r4
 80074e2:	d9fa      	bls.n	80074da <_free_r+0x42>
 80074e4:	6811      	ldr	r1, [r2, #0]
 80074e6:	1850      	adds	r0, r2, r1
 80074e8:	42a0      	cmp	r0, r4
 80074ea:	d10b      	bne.n	8007504 <_free_r+0x6c>
 80074ec:	6820      	ldr	r0, [r4, #0]
 80074ee:	4401      	add	r1, r0
 80074f0:	1850      	adds	r0, r2, r1
 80074f2:	4283      	cmp	r3, r0
 80074f4:	6011      	str	r1, [r2, #0]
 80074f6:	d1e0      	bne.n	80074ba <_free_r+0x22>
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	6053      	str	r3, [r2, #4]
 80074fe:	4408      	add	r0, r1
 8007500:	6010      	str	r0, [r2, #0]
 8007502:	e7da      	b.n	80074ba <_free_r+0x22>
 8007504:	d902      	bls.n	800750c <_free_r+0x74>
 8007506:	230c      	movs	r3, #12
 8007508:	602b      	str	r3, [r5, #0]
 800750a:	e7d6      	b.n	80074ba <_free_r+0x22>
 800750c:	6820      	ldr	r0, [r4, #0]
 800750e:	1821      	adds	r1, r4, r0
 8007510:	428b      	cmp	r3, r1
 8007512:	bf04      	itt	eq
 8007514:	6819      	ldreq	r1, [r3, #0]
 8007516:	685b      	ldreq	r3, [r3, #4]
 8007518:	6063      	str	r3, [r4, #4]
 800751a:	bf04      	itt	eq
 800751c:	1809      	addeq	r1, r1, r0
 800751e:	6021      	streq	r1, [r4, #0]
 8007520:	6054      	str	r4, [r2, #4]
 8007522:	e7ca      	b.n	80074ba <_free_r+0x22>
 8007524:	bd38      	pop	{r3, r4, r5, pc}
 8007526:	bf00      	nop
 8007528:	200007fc 	.word	0x200007fc

0800752c <__sfputc_r>:
 800752c:	6893      	ldr	r3, [r2, #8]
 800752e:	3b01      	subs	r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	b410      	push	{r4}
 8007534:	6093      	str	r3, [r2, #8]
 8007536:	da08      	bge.n	800754a <__sfputc_r+0x1e>
 8007538:	6994      	ldr	r4, [r2, #24]
 800753a:	42a3      	cmp	r3, r4
 800753c:	db01      	blt.n	8007542 <__sfputc_r+0x16>
 800753e:	290a      	cmp	r1, #10
 8007540:	d103      	bne.n	800754a <__sfputc_r+0x1e>
 8007542:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007546:	f7ff be78 	b.w	800723a <__swbuf_r>
 800754a:	6813      	ldr	r3, [r2, #0]
 800754c:	1c58      	adds	r0, r3, #1
 800754e:	6010      	str	r0, [r2, #0]
 8007550:	7019      	strb	r1, [r3, #0]
 8007552:	4608      	mov	r0, r1
 8007554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007558:	4770      	bx	lr

0800755a <__sfputs_r>:
 800755a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755c:	4606      	mov	r6, r0
 800755e:	460f      	mov	r7, r1
 8007560:	4614      	mov	r4, r2
 8007562:	18d5      	adds	r5, r2, r3
 8007564:	42ac      	cmp	r4, r5
 8007566:	d101      	bne.n	800756c <__sfputs_r+0x12>
 8007568:	2000      	movs	r0, #0
 800756a:	e007      	b.n	800757c <__sfputs_r+0x22>
 800756c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007570:	463a      	mov	r2, r7
 8007572:	4630      	mov	r0, r6
 8007574:	f7ff ffda 	bl	800752c <__sfputc_r>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	d1f3      	bne.n	8007564 <__sfputs_r+0xa>
 800757c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007580 <_vfiprintf_r>:
 8007580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007584:	460d      	mov	r5, r1
 8007586:	b09d      	sub	sp, #116	@ 0x74
 8007588:	4614      	mov	r4, r2
 800758a:	4698      	mov	r8, r3
 800758c:	4606      	mov	r6, r0
 800758e:	b118      	cbz	r0, 8007598 <_vfiprintf_r+0x18>
 8007590:	6a03      	ldr	r3, [r0, #32]
 8007592:	b90b      	cbnz	r3, 8007598 <_vfiprintf_r+0x18>
 8007594:	f7ff fd68 	bl	8007068 <__sinit>
 8007598:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800759a:	07d9      	lsls	r1, r3, #31
 800759c:	d405      	bmi.n	80075aa <_vfiprintf_r+0x2a>
 800759e:	89ab      	ldrh	r3, [r5, #12]
 80075a0:	059a      	lsls	r2, r3, #22
 80075a2:	d402      	bmi.n	80075aa <_vfiprintf_r+0x2a>
 80075a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075a6:	f7ff ff66 	bl	8007476 <__retarget_lock_acquire_recursive>
 80075aa:	89ab      	ldrh	r3, [r5, #12]
 80075ac:	071b      	lsls	r3, r3, #28
 80075ae:	d501      	bpl.n	80075b4 <_vfiprintf_r+0x34>
 80075b0:	692b      	ldr	r3, [r5, #16]
 80075b2:	b99b      	cbnz	r3, 80075dc <_vfiprintf_r+0x5c>
 80075b4:	4629      	mov	r1, r5
 80075b6:	4630      	mov	r0, r6
 80075b8:	f7ff fe7e 	bl	80072b8 <__swsetup_r>
 80075bc:	b170      	cbz	r0, 80075dc <_vfiprintf_r+0x5c>
 80075be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075c0:	07dc      	lsls	r4, r3, #31
 80075c2:	d504      	bpl.n	80075ce <_vfiprintf_r+0x4e>
 80075c4:	f04f 30ff 	mov.w	r0, #4294967295
 80075c8:	b01d      	add	sp, #116	@ 0x74
 80075ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ce:	89ab      	ldrh	r3, [r5, #12]
 80075d0:	0598      	lsls	r0, r3, #22
 80075d2:	d4f7      	bmi.n	80075c4 <_vfiprintf_r+0x44>
 80075d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075d6:	f7ff ff4f 	bl	8007478 <__retarget_lock_release_recursive>
 80075da:	e7f3      	b.n	80075c4 <_vfiprintf_r+0x44>
 80075dc:	2300      	movs	r3, #0
 80075de:	9309      	str	r3, [sp, #36]	@ 0x24
 80075e0:	2320      	movs	r3, #32
 80075e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80075ea:	2330      	movs	r3, #48	@ 0x30
 80075ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800779c <_vfiprintf_r+0x21c>
 80075f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075f4:	f04f 0901 	mov.w	r9, #1
 80075f8:	4623      	mov	r3, r4
 80075fa:	469a      	mov	sl, r3
 80075fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007600:	b10a      	cbz	r2, 8007606 <_vfiprintf_r+0x86>
 8007602:	2a25      	cmp	r2, #37	@ 0x25
 8007604:	d1f9      	bne.n	80075fa <_vfiprintf_r+0x7a>
 8007606:	ebba 0b04 	subs.w	fp, sl, r4
 800760a:	d00b      	beq.n	8007624 <_vfiprintf_r+0xa4>
 800760c:	465b      	mov	r3, fp
 800760e:	4622      	mov	r2, r4
 8007610:	4629      	mov	r1, r5
 8007612:	4630      	mov	r0, r6
 8007614:	f7ff ffa1 	bl	800755a <__sfputs_r>
 8007618:	3001      	adds	r0, #1
 800761a:	f000 80a7 	beq.w	800776c <_vfiprintf_r+0x1ec>
 800761e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007620:	445a      	add	r2, fp
 8007622:	9209      	str	r2, [sp, #36]	@ 0x24
 8007624:	f89a 3000 	ldrb.w	r3, [sl]
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 809f 	beq.w	800776c <_vfiprintf_r+0x1ec>
 800762e:	2300      	movs	r3, #0
 8007630:	f04f 32ff 	mov.w	r2, #4294967295
 8007634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007638:	f10a 0a01 	add.w	sl, sl, #1
 800763c:	9304      	str	r3, [sp, #16]
 800763e:	9307      	str	r3, [sp, #28]
 8007640:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007644:	931a      	str	r3, [sp, #104]	@ 0x68
 8007646:	4654      	mov	r4, sl
 8007648:	2205      	movs	r2, #5
 800764a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800764e:	4853      	ldr	r0, [pc, #332]	@ (800779c <_vfiprintf_r+0x21c>)
 8007650:	f7f8 fdbe 	bl	80001d0 <memchr>
 8007654:	9a04      	ldr	r2, [sp, #16]
 8007656:	b9d8      	cbnz	r0, 8007690 <_vfiprintf_r+0x110>
 8007658:	06d1      	lsls	r1, r2, #27
 800765a:	bf44      	itt	mi
 800765c:	2320      	movmi	r3, #32
 800765e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007662:	0713      	lsls	r3, r2, #28
 8007664:	bf44      	itt	mi
 8007666:	232b      	movmi	r3, #43	@ 0x2b
 8007668:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800766c:	f89a 3000 	ldrb.w	r3, [sl]
 8007670:	2b2a      	cmp	r3, #42	@ 0x2a
 8007672:	d015      	beq.n	80076a0 <_vfiprintf_r+0x120>
 8007674:	9a07      	ldr	r2, [sp, #28]
 8007676:	4654      	mov	r4, sl
 8007678:	2000      	movs	r0, #0
 800767a:	f04f 0c0a 	mov.w	ip, #10
 800767e:	4621      	mov	r1, r4
 8007680:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007684:	3b30      	subs	r3, #48	@ 0x30
 8007686:	2b09      	cmp	r3, #9
 8007688:	d94b      	bls.n	8007722 <_vfiprintf_r+0x1a2>
 800768a:	b1b0      	cbz	r0, 80076ba <_vfiprintf_r+0x13a>
 800768c:	9207      	str	r2, [sp, #28]
 800768e:	e014      	b.n	80076ba <_vfiprintf_r+0x13a>
 8007690:	eba0 0308 	sub.w	r3, r0, r8
 8007694:	fa09 f303 	lsl.w	r3, r9, r3
 8007698:	4313      	orrs	r3, r2
 800769a:	9304      	str	r3, [sp, #16]
 800769c:	46a2      	mov	sl, r4
 800769e:	e7d2      	b.n	8007646 <_vfiprintf_r+0xc6>
 80076a0:	9b03      	ldr	r3, [sp, #12]
 80076a2:	1d19      	adds	r1, r3, #4
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	9103      	str	r1, [sp, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	bfbb      	ittet	lt
 80076ac:	425b      	neglt	r3, r3
 80076ae:	f042 0202 	orrlt.w	r2, r2, #2
 80076b2:	9307      	strge	r3, [sp, #28]
 80076b4:	9307      	strlt	r3, [sp, #28]
 80076b6:	bfb8      	it	lt
 80076b8:	9204      	strlt	r2, [sp, #16]
 80076ba:	7823      	ldrb	r3, [r4, #0]
 80076bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80076be:	d10a      	bne.n	80076d6 <_vfiprintf_r+0x156>
 80076c0:	7863      	ldrb	r3, [r4, #1]
 80076c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80076c4:	d132      	bne.n	800772c <_vfiprintf_r+0x1ac>
 80076c6:	9b03      	ldr	r3, [sp, #12]
 80076c8:	1d1a      	adds	r2, r3, #4
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	9203      	str	r2, [sp, #12]
 80076ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076d2:	3402      	adds	r4, #2
 80076d4:	9305      	str	r3, [sp, #20]
 80076d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80077ac <_vfiprintf_r+0x22c>
 80076da:	7821      	ldrb	r1, [r4, #0]
 80076dc:	2203      	movs	r2, #3
 80076de:	4650      	mov	r0, sl
 80076e0:	f7f8 fd76 	bl	80001d0 <memchr>
 80076e4:	b138      	cbz	r0, 80076f6 <_vfiprintf_r+0x176>
 80076e6:	9b04      	ldr	r3, [sp, #16]
 80076e8:	eba0 000a 	sub.w	r0, r0, sl
 80076ec:	2240      	movs	r2, #64	@ 0x40
 80076ee:	4082      	lsls	r2, r0
 80076f0:	4313      	orrs	r3, r2
 80076f2:	3401      	adds	r4, #1
 80076f4:	9304      	str	r3, [sp, #16]
 80076f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076fa:	4829      	ldr	r0, [pc, #164]	@ (80077a0 <_vfiprintf_r+0x220>)
 80076fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007700:	2206      	movs	r2, #6
 8007702:	f7f8 fd65 	bl	80001d0 <memchr>
 8007706:	2800      	cmp	r0, #0
 8007708:	d03f      	beq.n	800778a <_vfiprintf_r+0x20a>
 800770a:	4b26      	ldr	r3, [pc, #152]	@ (80077a4 <_vfiprintf_r+0x224>)
 800770c:	bb1b      	cbnz	r3, 8007756 <_vfiprintf_r+0x1d6>
 800770e:	9b03      	ldr	r3, [sp, #12]
 8007710:	3307      	adds	r3, #7
 8007712:	f023 0307 	bic.w	r3, r3, #7
 8007716:	3308      	adds	r3, #8
 8007718:	9303      	str	r3, [sp, #12]
 800771a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800771c:	443b      	add	r3, r7
 800771e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007720:	e76a      	b.n	80075f8 <_vfiprintf_r+0x78>
 8007722:	fb0c 3202 	mla	r2, ip, r2, r3
 8007726:	460c      	mov	r4, r1
 8007728:	2001      	movs	r0, #1
 800772a:	e7a8      	b.n	800767e <_vfiprintf_r+0xfe>
 800772c:	2300      	movs	r3, #0
 800772e:	3401      	adds	r4, #1
 8007730:	9305      	str	r3, [sp, #20]
 8007732:	4619      	mov	r1, r3
 8007734:	f04f 0c0a 	mov.w	ip, #10
 8007738:	4620      	mov	r0, r4
 800773a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800773e:	3a30      	subs	r2, #48	@ 0x30
 8007740:	2a09      	cmp	r2, #9
 8007742:	d903      	bls.n	800774c <_vfiprintf_r+0x1cc>
 8007744:	2b00      	cmp	r3, #0
 8007746:	d0c6      	beq.n	80076d6 <_vfiprintf_r+0x156>
 8007748:	9105      	str	r1, [sp, #20]
 800774a:	e7c4      	b.n	80076d6 <_vfiprintf_r+0x156>
 800774c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007750:	4604      	mov	r4, r0
 8007752:	2301      	movs	r3, #1
 8007754:	e7f0      	b.n	8007738 <_vfiprintf_r+0x1b8>
 8007756:	ab03      	add	r3, sp, #12
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	462a      	mov	r2, r5
 800775c:	4b12      	ldr	r3, [pc, #72]	@ (80077a8 <_vfiprintf_r+0x228>)
 800775e:	a904      	add	r1, sp, #16
 8007760:	4630      	mov	r0, r6
 8007762:	f3af 8000 	nop.w
 8007766:	4607      	mov	r7, r0
 8007768:	1c78      	adds	r0, r7, #1
 800776a:	d1d6      	bne.n	800771a <_vfiprintf_r+0x19a>
 800776c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800776e:	07d9      	lsls	r1, r3, #31
 8007770:	d405      	bmi.n	800777e <_vfiprintf_r+0x1fe>
 8007772:	89ab      	ldrh	r3, [r5, #12]
 8007774:	059a      	lsls	r2, r3, #22
 8007776:	d402      	bmi.n	800777e <_vfiprintf_r+0x1fe>
 8007778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800777a:	f7ff fe7d 	bl	8007478 <__retarget_lock_release_recursive>
 800777e:	89ab      	ldrh	r3, [r5, #12]
 8007780:	065b      	lsls	r3, r3, #25
 8007782:	f53f af1f 	bmi.w	80075c4 <_vfiprintf_r+0x44>
 8007786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007788:	e71e      	b.n	80075c8 <_vfiprintf_r+0x48>
 800778a:	ab03      	add	r3, sp, #12
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	462a      	mov	r2, r5
 8007790:	4b05      	ldr	r3, [pc, #20]	@ (80077a8 <_vfiprintf_r+0x228>)
 8007792:	a904      	add	r1, sp, #16
 8007794:	4630      	mov	r0, r6
 8007796:	f000 f879 	bl	800788c <_printf_i>
 800779a:	e7e4      	b.n	8007766 <_vfiprintf_r+0x1e6>
 800779c:	08007dd0 	.word	0x08007dd0
 80077a0:	08007dda 	.word	0x08007dda
 80077a4:	00000000 	.word	0x00000000
 80077a8:	0800755b 	.word	0x0800755b
 80077ac:	08007dd6 	.word	0x08007dd6

080077b0 <_printf_common>:
 80077b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b4:	4616      	mov	r6, r2
 80077b6:	4698      	mov	r8, r3
 80077b8:	688a      	ldr	r2, [r1, #8]
 80077ba:	690b      	ldr	r3, [r1, #16]
 80077bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077c0:	4293      	cmp	r3, r2
 80077c2:	bfb8      	it	lt
 80077c4:	4613      	movlt	r3, r2
 80077c6:	6033      	str	r3, [r6, #0]
 80077c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80077cc:	4607      	mov	r7, r0
 80077ce:	460c      	mov	r4, r1
 80077d0:	b10a      	cbz	r2, 80077d6 <_printf_common+0x26>
 80077d2:	3301      	adds	r3, #1
 80077d4:	6033      	str	r3, [r6, #0]
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	0699      	lsls	r1, r3, #26
 80077da:	bf42      	ittt	mi
 80077dc:	6833      	ldrmi	r3, [r6, #0]
 80077de:	3302      	addmi	r3, #2
 80077e0:	6033      	strmi	r3, [r6, #0]
 80077e2:	6825      	ldr	r5, [r4, #0]
 80077e4:	f015 0506 	ands.w	r5, r5, #6
 80077e8:	d106      	bne.n	80077f8 <_printf_common+0x48>
 80077ea:	f104 0a19 	add.w	sl, r4, #25
 80077ee:	68e3      	ldr	r3, [r4, #12]
 80077f0:	6832      	ldr	r2, [r6, #0]
 80077f2:	1a9b      	subs	r3, r3, r2
 80077f4:	42ab      	cmp	r3, r5
 80077f6:	dc26      	bgt.n	8007846 <_printf_common+0x96>
 80077f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077fc:	6822      	ldr	r2, [r4, #0]
 80077fe:	3b00      	subs	r3, #0
 8007800:	bf18      	it	ne
 8007802:	2301      	movne	r3, #1
 8007804:	0692      	lsls	r2, r2, #26
 8007806:	d42b      	bmi.n	8007860 <_printf_common+0xb0>
 8007808:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800780c:	4641      	mov	r1, r8
 800780e:	4638      	mov	r0, r7
 8007810:	47c8      	blx	r9
 8007812:	3001      	adds	r0, #1
 8007814:	d01e      	beq.n	8007854 <_printf_common+0xa4>
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	6922      	ldr	r2, [r4, #16]
 800781a:	f003 0306 	and.w	r3, r3, #6
 800781e:	2b04      	cmp	r3, #4
 8007820:	bf02      	ittt	eq
 8007822:	68e5      	ldreq	r5, [r4, #12]
 8007824:	6833      	ldreq	r3, [r6, #0]
 8007826:	1aed      	subeq	r5, r5, r3
 8007828:	68a3      	ldr	r3, [r4, #8]
 800782a:	bf0c      	ite	eq
 800782c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007830:	2500      	movne	r5, #0
 8007832:	4293      	cmp	r3, r2
 8007834:	bfc4      	itt	gt
 8007836:	1a9b      	subgt	r3, r3, r2
 8007838:	18ed      	addgt	r5, r5, r3
 800783a:	2600      	movs	r6, #0
 800783c:	341a      	adds	r4, #26
 800783e:	42b5      	cmp	r5, r6
 8007840:	d11a      	bne.n	8007878 <_printf_common+0xc8>
 8007842:	2000      	movs	r0, #0
 8007844:	e008      	b.n	8007858 <_printf_common+0xa8>
 8007846:	2301      	movs	r3, #1
 8007848:	4652      	mov	r2, sl
 800784a:	4641      	mov	r1, r8
 800784c:	4638      	mov	r0, r7
 800784e:	47c8      	blx	r9
 8007850:	3001      	adds	r0, #1
 8007852:	d103      	bne.n	800785c <_printf_common+0xac>
 8007854:	f04f 30ff 	mov.w	r0, #4294967295
 8007858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800785c:	3501      	adds	r5, #1
 800785e:	e7c6      	b.n	80077ee <_printf_common+0x3e>
 8007860:	18e1      	adds	r1, r4, r3
 8007862:	1c5a      	adds	r2, r3, #1
 8007864:	2030      	movs	r0, #48	@ 0x30
 8007866:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800786a:	4422      	add	r2, r4
 800786c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007870:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007874:	3302      	adds	r3, #2
 8007876:	e7c7      	b.n	8007808 <_printf_common+0x58>
 8007878:	2301      	movs	r3, #1
 800787a:	4622      	mov	r2, r4
 800787c:	4641      	mov	r1, r8
 800787e:	4638      	mov	r0, r7
 8007880:	47c8      	blx	r9
 8007882:	3001      	adds	r0, #1
 8007884:	d0e6      	beq.n	8007854 <_printf_common+0xa4>
 8007886:	3601      	adds	r6, #1
 8007888:	e7d9      	b.n	800783e <_printf_common+0x8e>
	...

0800788c <_printf_i>:
 800788c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007890:	7e0f      	ldrb	r7, [r1, #24]
 8007892:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007894:	2f78      	cmp	r7, #120	@ 0x78
 8007896:	4691      	mov	r9, r2
 8007898:	4680      	mov	r8, r0
 800789a:	460c      	mov	r4, r1
 800789c:	469a      	mov	sl, r3
 800789e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80078a2:	d807      	bhi.n	80078b4 <_printf_i+0x28>
 80078a4:	2f62      	cmp	r7, #98	@ 0x62
 80078a6:	d80a      	bhi.n	80078be <_printf_i+0x32>
 80078a8:	2f00      	cmp	r7, #0
 80078aa:	f000 80d1 	beq.w	8007a50 <_printf_i+0x1c4>
 80078ae:	2f58      	cmp	r7, #88	@ 0x58
 80078b0:	f000 80b8 	beq.w	8007a24 <_printf_i+0x198>
 80078b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80078bc:	e03a      	b.n	8007934 <_printf_i+0xa8>
 80078be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80078c2:	2b15      	cmp	r3, #21
 80078c4:	d8f6      	bhi.n	80078b4 <_printf_i+0x28>
 80078c6:	a101      	add	r1, pc, #4	@ (adr r1, 80078cc <_printf_i+0x40>)
 80078c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078cc:	08007925 	.word	0x08007925
 80078d0:	08007939 	.word	0x08007939
 80078d4:	080078b5 	.word	0x080078b5
 80078d8:	080078b5 	.word	0x080078b5
 80078dc:	080078b5 	.word	0x080078b5
 80078e0:	080078b5 	.word	0x080078b5
 80078e4:	08007939 	.word	0x08007939
 80078e8:	080078b5 	.word	0x080078b5
 80078ec:	080078b5 	.word	0x080078b5
 80078f0:	080078b5 	.word	0x080078b5
 80078f4:	080078b5 	.word	0x080078b5
 80078f8:	08007a37 	.word	0x08007a37
 80078fc:	08007963 	.word	0x08007963
 8007900:	080079f1 	.word	0x080079f1
 8007904:	080078b5 	.word	0x080078b5
 8007908:	080078b5 	.word	0x080078b5
 800790c:	08007a59 	.word	0x08007a59
 8007910:	080078b5 	.word	0x080078b5
 8007914:	08007963 	.word	0x08007963
 8007918:	080078b5 	.word	0x080078b5
 800791c:	080078b5 	.word	0x080078b5
 8007920:	080079f9 	.word	0x080079f9
 8007924:	6833      	ldr	r3, [r6, #0]
 8007926:	1d1a      	adds	r2, r3, #4
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6032      	str	r2, [r6, #0]
 800792c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007930:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007934:	2301      	movs	r3, #1
 8007936:	e09c      	b.n	8007a72 <_printf_i+0x1e6>
 8007938:	6833      	ldr	r3, [r6, #0]
 800793a:	6820      	ldr	r0, [r4, #0]
 800793c:	1d19      	adds	r1, r3, #4
 800793e:	6031      	str	r1, [r6, #0]
 8007940:	0606      	lsls	r6, r0, #24
 8007942:	d501      	bpl.n	8007948 <_printf_i+0xbc>
 8007944:	681d      	ldr	r5, [r3, #0]
 8007946:	e003      	b.n	8007950 <_printf_i+0xc4>
 8007948:	0645      	lsls	r5, r0, #25
 800794a:	d5fb      	bpl.n	8007944 <_printf_i+0xb8>
 800794c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007950:	2d00      	cmp	r5, #0
 8007952:	da03      	bge.n	800795c <_printf_i+0xd0>
 8007954:	232d      	movs	r3, #45	@ 0x2d
 8007956:	426d      	negs	r5, r5
 8007958:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800795c:	4858      	ldr	r0, [pc, #352]	@ (8007ac0 <_printf_i+0x234>)
 800795e:	230a      	movs	r3, #10
 8007960:	e011      	b.n	8007986 <_printf_i+0xfa>
 8007962:	6821      	ldr	r1, [r4, #0]
 8007964:	6833      	ldr	r3, [r6, #0]
 8007966:	0608      	lsls	r0, r1, #24
 8007968:	f853 5b04 	ldr.w	r5, [r3], #4
 800796c:	d402      	bmi.n	8007974 <_printf_i+0xe8>
 800796e:	0649      	lsls	r1, r1, #25
 8007970:	bf48      	it	mi
 8007972:	b2ad      	uxthmi	r5, r5
 8007974:	2f6f      	cmp	r7, #111	@ 0x6f
 8007976:	4852      	ldr	r0, [pc, #328]	@ (8007ac0 <_printf_i+0x234>)
 8007978:	6033      	str	r3, [r6, #0]
 800797a:	bf14      	ite	ne
 800797c:	230a      	movne	r3, #10
 800797e:	2308      	moveq	r3, #8
 8007980:	2100      	movs	r1, #0
 8007982:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007986:	6866      	ldr	r6, [r4, #4]
 8007988:	60a6      	str	r6, [r4, #8]
 800798a:	2e00      	cmp	r6, #0
 800798c:	db05      	blt.n	800799a <_printf_i+0x10e>
 800798e:	6821      	ldr	r1, [r4, #0]
 8007990:	432e      	orrs	r6, r5
 8007992:	f021 0104 	bic.w	r1, r1, #4
 8007996:	6021      	str	r1, [r4, #0]
 8007998:	d04b      	beq.n	8007a32 <_printf_i+0x1a6>
 800799a:	4616      	mov	r6, r2
 800799c:	fbb5 f1f3 	udiv	r1, r5, r3
 80079a0:	fb03 5711 	mls	r7, r3, r1, r5
 80079a4:	5dc7      	ldrb	r7, [r0, r7]
 80079a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079aa:	462f      	mov	r7, r5
 80079ac:	42bb      	cmp	r3, r7
 80079ae:	460d      	mov	r5, r1
 80079b0:	d9f4      	bls.n	800799c <_printf_i+0x110>
 80079b2:	2b08      	cmp	r3, #8
 80079b4:	d10b      	bne.n	80079ce <_printf_i+0x142>
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	07df      	lsls	r7, r3, #31
 80079ba:	d508      	bpl.n	80079ce <_printf_i+0x142>
 80079bc:	6923      	ldr	r3, [r4, #16]
 80079be:	6861      	ldr	r1, [r4, #4]
 80079c0:	4299      	cmp	r1, r3
 80079c2:	bfde      	ittt	le
 80079c4:	2330      	movle	r3, #48	@ 0x30
 80079c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079ce:	1b92      	subs	r2, r2, r6
 80079d0:	6122      	str	r2, [r4, #16]
 80079d2:	f8cd a000 	str.w	sl, [sp]
 80079d6:	464b      	mov	r3, r9
 80079d8:	aa03      	add	r2, sp, #12
 80079da:	4621      	mov	r1, r4
 80079dc:	4640      	mov	r0, r8
 80079de:	f7ff fee7 	bl	80077b0 <_printf_common>
 80079e2:	3001      	adds	r0, #1
 80079e4:	d14a      	bne.n	8007a7c <_printf_i+0x1f0>
 80079e6:	f04f 30ff 	mov.w	r0, #4294967295
 80079ea:	b004      	add	sp, #16
 80079ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	f043 0320 	orr.w	r3, r3, #32
 80079f6:	6023      	str	r3, [r4, #0]
 80079f8:	4832      	ldr	r0, [pc, #200]	@ (8007ac4 <_printf_i+0x238>)
 80079fa:	2778      	movs	r7, #120	@ 0x78
 80079fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	6831      	ldr	r1, [r6, #0]
 8007a04:	061f      	lsls	r7, r3, #24
 8007a06:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a0a:	d402      	bmi.n	8007a12 <_printf_i+0x186>
 8007a0c:	065f      	lsls	r7, r3, #25
 8007a0e:	bf48      	it	mi
 8007a10:	b2ad      	uxthmi	r5, r5
 8007a12:	6031      	str	r1, [r6, #0]
 8007a14:	07d9      	lsls	r1, r3, #31
 8007a16:	bf44      	itt	mi
 8007a18:	f043 0320 	orrmi.w	r3, r3, #32
 8007a1c:	6023      	strmi	r3, [r4, #0]
 8007a1e:	b11d      	cbz	r5, 8007a28 <_printf_i+0x19c>
 8007a20:	2310      	movs	r3, #16
 8007a22:	e7ad      	b.n	8007980 <_printf_i+0xf4>
 8007a24:	4826      	ldr	r0, [pc, #152]	@ (8007ac0 <_printf_i+0x234>)
 8007a26:	e7e9      	b.n	80079fc <_printf_i+0x170>
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	f023 0320 	bic.w	r3, r3, #32
 8007a2e:	6023      	str	r3, [r4, #0]
 8007a30:	e7f6      	b.n	8007a20 <_printf_i+0x194>
 8007a32:	4616      	mov	r6, r2
 8007a34:	e7bd      	b.n	80079b2 <_printf_i+0x126>
 8007a36:	6833      	ldr	r3, [r6, #0]
 8007a38:	6825      	ldr	r5, [r4, #0]
 8007a3a:	6961      	ldr	r1, [r4, #20]
 8007a3c:	1d18      	adds	r0, r3, #4
 8007a3e:	6030      	str	r0, [r6, #0]
 8007a40:	062e      	lsls	r6, r5, #24
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	d501      	bpl.n	8007a4a <_printf_i+0x1be>
 8007a46:	6019      	str	r1, [r3, #0]
 8007a48:	e002      	b.n	8007a50 <_printf_i+0x1c4>
 8007a4a:	0668      	lsls	r0, r5, #25
 8007a4c:	d5fb      	bpl.n	8007a46 <_printf_i+0x1ba>
 8007a4e:	8019      	strh	r1, [r3, #0]
 8007a50:	2300      	movs	r3, #0
 8007a52:	6123      	str	r3, [r4, #16]
 8007a54:	4616      	mov	r6, r2
 8007a56:	e7bc      	b.n	80079d2 <_printf_i+0x146>
 8007a58:	6833      	ldr	r3, [r6, #0]
 8007a5a:	1d1a      	adds	r2, r3, #4
 8007a5c:	6032      	str	r2, [r6, #0]
 8007a5e:	681e      	ldr	r6, [r3, #0]
 8007a60:	6862      	ldr	r2, [r4, #4]
 8007a62:	2100      	movs	r1, #0
 8007a64:	4630      	mov	r0, r6
 8007a66:	f7f8 fbb3 	bl	80001d0 <memchr>
 8007a6a:	b108      	cbz	r0, 8007a70 <_printf_i+0x1e4>
 8007a6c:	1b80      	subs	r0, r0, r6
 8007a6e:	6060      	str	r0, [r4, #4]
 8007a70:	6863      	ldr	r3, [r4, #4]
 8007a72:	6123      	str	r3, [r4, #16]
 8007a74:	2300      	movs	r3, #0
 8007a76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a7a:	e7aa      	b.n	80079d2 <_printf_i+0x146>
 8007a7c:	6923      	ldr	r3, [r4, #16]
 8007a7e:	4632      	mov	r2, r6
 8007a80:	4649      	mov	r1, r9
 8007a82:	4640      	mov	r0, r8
 8007a84:	47d0      	blx	sl
 8007a86:	3001      	adds	r0, #1
 8007a88:	d0ad      	beq.n	80079e6 <_printf_i+0x15a>
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	079b      	lsls	r3, r3, #30
 8007a8e:	d413      	bmi.n	8007ab8 <_printf_i+0x22c>
 8007a90:	68e0      	ldr	r0, [r4, #12]
 8007a92:	9b03      	ldr	r3, [sp, #12]
 8007a94:	4298      	cmp	r0, r3
 8007a96:	bfb8      	it	lt
 8007a98:	4618      	movlt	r0, r3
 8007a9a:	e7a6      	b.n	80079ea <_printf_i+0x15e>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	4632      	mov	r2, r6
 8007aa0:	4649      	mov	r1, r9
 8007aa2:	4640      	mov	r0, r8
 8007aa4:	47d0      	blx	sl
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	d09d      	beq.n	80079e6 <_printf_i+0x15a>
 8007aaa:	3501      	adds	r5, #1
 8007aac:	68e3      	ldr	r3, [r4, #12]
 8007aae:	9903      	ldr	r1, [sp, #12]
 8007ab0:	1a5b      	subs	r3, r3, r1
 8007ab2:	42ab      	cmp	r3, r5
 8007ab4:	dcf2      	bgt.n	8007a9c <_printf_i+0x210>
 8007ab6:	e7eb      	b.n	8007a90 <_printf_i+0x204>
 8007ab8:	2500      	movs	r5, #0
 8007aba:	f104 0619 	add.w	r6, r4, #25
 8007abe:	e7f5      	b.n	8007aac <_printf_i+0x220>
 8007ac0:	08007de1 	.word	0x08007de1
 8007ac4:	08007df2 	.word	0x08007df2

08007ac8 <__sflush_r>:
 8007ac8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad0:	0716      	lsls	r6, r2, #28
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	d454      	bmi.n	8007b82 <__sflush_r+0xba>
 8007ad8:	684b      	ldr	r3, [r1, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	dc02      	bgt.n	8007ae4 <__sflush_r+0x1c>
 8007ade:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	dd48      	ble.n	8007b76 <__sflush_r+0xae>
 8007ae4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ae6:	2e00      	cmp	r6, #0
 8007ae8:	d045      	beq.n	8007b76 <__sflush_r+0xae>
 8007aea:	2300      	movs	r3, #0
 8007aec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007af0:	682f      	ldr	r7, [r5, #0]
 8007af2:	6a21      	ldr	r1, [r4, #32]
 8007af4:	602b      	str	r3, [r5, #0]
 8007af6:	d030      	beq.n	8007b5a <__sflush_r+0x92>
 8007af8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	0759      	lsls	r1, r3, #29
 8007afe:	d505      	bpl.n	8007b0c <__sflush_r+0x44>
 8007b00:	6863      	ldr	r3, [r4, #4]
 8007b02:	1ad2      	subs	r2, r2, r3
 8007b04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b06:	b10b      	cbz	r3, 8007b0c <__sflush_r+0x44>
 8007b08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b0a:	1ad2      	subs	r2, r2, r3
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b10:	6a21      	ldr	r1, [r4, #32]
 8007b12:	4628      	mov	r0, r5
 8007b14:	47b0      	blx	r6
 8007b16:	1c43      	adds	r3, r0, #1
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	d106      	bne.n	8007b2a <__sflush_r+0x62>
 8007b1c:	6829      	ldr	r1, [r5, #0]
 8007b1e:	291d      	cmp	r1, #29
 8007b20:	d82b      	bhi.n	8007b7a <__sflush_r+0xb2>
 8007b22:	4a2a      	ldr	r2, [pc, #168]	@ (8007bcc <__sflush_r+0x104>)
 8007b24:	40ca      	lsrs	r2, r1
 8007b26:	07d6      	lsls	r6, r2, #31
 8007b28:	d527      	bpl.n	8007b7a <__sflush_r+0xb2>
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	6062      	str	r2, [r4, #4]
 8007b2e:	04d9      	lsls	r1, r3, #19
 8007b30:	6922      	ldr	r2, [r4, #16]
 8007b32:	6022      	str	r2, [r4, #0]
 8007b34:	d504      	bpl.n	8007b40 <__sflush_r+0x78>
 8007b36:	1c42      	adds	r2, r0, #1
 8007b38:	d101      	bne.n	8007b3e <__sflush_r+0x76>
 8007b3a:	682b      	ldr	r3, [r5, #0]
 8007b3c:	b903      	cbnz	r3, 8007b40 <__sflush_r+0x78>
 8007b3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b42:	602f      	str	r7, [r5, #0]
 8007b44:	b1b9      	cbz	r1, 8007b76 <__sflush_r+0xae>
 8007b46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b4a:	4299      	cmp	r1, r3
 8007b4c:	d002      	beq.n	8007b54 <__sflush_r+0x8c>
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f7ff fca2 	bl	8007498 <_free_r>
 8007b54:	2300      	movs	r3, #0
 8007b56:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b58:	e00d      	b.n	8007b76 <__sflush_r+0xae>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	47b0      	blx	r6
 8007b60:	4602      	mov	r2, r0
 8007b62:	1c50      	adds	r0, r2, #1
 8007b64:	d1c9      	bne.n	8007afa <__sflush_r+0x32>
 8007b66:	682b      	ldr	r3, [r5, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d0c6      	beq.n	8007afa <__sflush_r+0x32>
 8007b6c:	2b1d      	cmp	r3, #29
 8007b6e:	d001      	beq.n	8007b74 <__sflush_r+0xac>
 8007b70:	2b16      	cmp	r3, #22
 8007b72:	d11e      	bne.n	8007bb2 <__sflush_r+0xea>
 8007b74:	602f      	str	r7, [r5, #0]
 8007b76:	2000      	movs	r0, #0
 8007b78:	e022      	b.n	8007bc0 <__sflush_r+0xf8>
 8007b7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b7e:	b21b      	sxth	r3, r3
 8007b80:	e01b      	b.n	8007bba <__sflush_r+0xf2>
 8007b82:	690f      	ldr	r7, [r1, #16]
 8007b84:	2f00      	cmp	r7, #0
 8007b86:	d0f6      	beq.n	8007b76 <__sflush_r+0xae>
 8007b88:	0793      	lsls	r3, r2, #30
 8007b8a:	680e      	ldr	r6, [r1, #0]
 8007b8c:	bf08      	it	eq
 8007b8e:	694b      	ldreq	r3, [r1, #20]
 8007b90:	600f      	str	r7, [r1, #0]
 8007b92:	bf18      	it	ne
 8007b94:	2300      	movne	r3, #0
 8007b96:	eba6 0807 	sub.w	r8, r6, r7
 8007b9a:	608b      	str	r3, [r1, #8]
 8007b9c:	f1b8 0f00 	cmp.w	r8, #0
 8007ba0:	dde9      	ble.n	8007b76 <__sflush_r+0xae>
 8007ba2:	6a21      	ldr	r1, [r4, #32]
 8007ba4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007ba6:	4643      	mov	r3, r8
 8007ba8:	463a      	mov	r2, r7
 8007baa:	4628      	mov	r0, r5
 8007bac:	47b0      	blx	r6
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	dc08      	bgt.n	8007bc4 <__sflush_r+0xfc>
 8007bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bba:	81a3      	strh	r3, [r4, #12]
 8007bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bc4:	4407      	add	r7, r0
 8007bc6:	eba8 0800 	sub.w	r8, r8, r0
 8007bca:	e7e7      	b.n	8007b9c <__sflush_r+0xd4>
 8007bcc:	20400001 	.word	0x20400001

08007bd0 <_fflush_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	690b      	ldr	r3, [r1, #16]
 8007bd4:	4605      	mov	r5, r0
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	b913      	cbnz	r3, 8007be0 <_fflush_r+0x10>
 8007bda:	2500      	movs	r5, #0
 8007bdc:	4628      	mov	r0, r5
 8007bde:	bd38      	pop	{r3, r4, r5, pc}
 8007be0:	b118      	cbz	r0, 8007bea <_fflush_r+0x1a>
 8007be2:	6a03      	ldr	r3, [r0, #32]
 8007be4:	b90b      	cbnz	r3, 8007bea <_fflush_r+0x1a>
 8007be6:	f7ff fa3f 	bl	8007068 <__sinit>
 8007bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d0f3      	beq.n	8007bda <_fflush_r+0xa>
 8007bf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007bf4:	07d0      	lsls	r0, r2, #31
 8007bf6:	d404      	bmi.n	8007c02 <_fflush_r+0x32>
 8007bf8:	0599      	lsls	r1, r3, #22
 8007bfa:	d402      	bmi.n	8007c02 <_fflush_r+0x32>
 8007bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bfe:	f7ff fc3a 	bl	8007476 <__retarget_lock_acquire_recursive>
 8007c02:	4628      	mov	r0, r5
 8007c04:	4621      	mov	r1, r4
 8007c06:	f7ff ff5f 	bl	8007ac8 <__sflush_r>
 8007c0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c0c:	07da      	lsls	r2, r3, #31
 8007c0e:	4605      	mov	r5, r0
 8007c10:	d4e4      	bmi.n	8007bdc <_fflush_r+0xc>
 8007c12:	89a3      	ldrh	r3, [r4, #12]
 8007c14:	059b      	lsls	r3, r3, #22
 8007c16:	d4e1      	bmi.n	8007bdc <_fflush_r+0xc>
 8007c18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c1a:	f7ff fc2d 	bl	8007478 <__retarget_lock_release_recursive>
 8007c1e:	e7dd      	b.n	8007bdc <_fflush_r+0xc>

08007c20 <__swhatbuf_r>:
 8007c20:	b570      	push	{r4, r5, r6, lr}
 8007c22:	460c      	mov	r4, r1
 8007c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c28:	2900      	cmp	r1, #0
 8007c2a:	b096      	sub	sp, #88	@ 0x58
 8007c2c:	4615      	mov	r5, r2
 8007c2e:	461e      	mov	r6, r3
 8007c30:	da0d      	bge.n	8007c4e <__swhatbuf_r+0x2e>
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007c38:	f04f 0100 	mov.w	r1, #0
 8007c3c:	bf14      	ite	ne
 8007c3e:	2340      	movne	r3, #64	@ 0x40
 8007c40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c44:	2000      	movs	r0, #0
 8007c46:	6031      	str	r1, [r6, #0]
 8007c48:	602b      	str	r3, [r5, #0]
 8007c4a:	b016      	add	sp, #88	@ 0x58
 8007c4c:	bd70      	pop	{r4, r5, r6, pc}
 8007c4e:	466a      	mov	r2, sp
 8007c50:	f000 f848 	bl	8007ce4 <_fstat_r>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	dbec      	blt.n	8007c32 <__swhatbuf_r+0x12>
 8007c58:	9901      	ldr	r1, [sp, #4]
 8007c5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c62:	4259      	negs	r1, r3
 8007c64:	4159      	adcs	r1, r3
 8007c66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c6a:	e7eb      	b.n	8007c44 <__swhatbuf_r+0x24>

08007c6c <__smakebuf_r>:
 8007c6c:	898b      	ldrh	r3, [r1, #12]
 8007c6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c70:	079d      	lsls	r5, r3, #30
 8007c72:	4606      	mov	r6, r0
 8007c74:	460c      	mov	r4, r1
 8007c76:	d507      	bpl.n	8007c88 <__smakebuf_r+0x1c>
 8007c78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	6123      	str	r3, [r4, #16]
 8007c80:	2301      	movs	r3, #1
 8007c82:	6163      	str	r3, [r4, #20]
 8007c84:	b003      	add	sp, #12
 8007c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c88:	ab01      	add	r3, sp, #4
 8007c8a:	466a      	mov	r2, sp
 8007c8c:	f7ff ffc8 	bl	8007c20 <__swhatbuf_r>
 8007c90:	9f00      	ldr	r7, [sp, #0]
 8007c92:	4605      	mov	r5, r0
 8007c94:	4639      	mov	r1, r7
 8007c96:	4630      	mov	r0, r6
 8007c98:	f7ff f8ce 	bl	8006e38 <_malloc_r>
 8007c9c:	b948      	cbnz	r0, 8007cb2 <__smakebuf_r+0x46>
 8007c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca2:	059a      	lsls	r2, r3, #22
 8007ca4:	d4ee      	bmi.n	8007c84 <__smakebuf_r+0x18>
 8007ca6:	f023 0303 	bic.w	r3, r3, #3
 8007caa:	f043 0302 	orr.w	r3, r3, #2
 8007cae:	81a3      	strh	r3, [r4, #12]
 8007cb0:	e7e2      	b.n	8007c78 <__smakebuf_r+0xc>
 8007cb2:	89a3      	ldrh	r3, [r4, #12]
 8007cb4:	6020      	str	r0, [r4, #0]
 8007cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cba:	81a3      	strh	r3, [r4, #12]
 8007cbc:	9b01      	ldr	r3, [sp, #4]
 8007cbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007cc2:	b15b      	cbz	r3, 8007cdc <__smakebuf_r+0x70>
 8007cc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cc8:	4630      	mov	r0, r6
 8007cca:	f000 f81d 	bl	8007d08 <_isatty_r>
 8007cce:	b128      	cbz	r0, 8007cdc <__smakebuf_r+0x70>
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	f023 0303 	bic.w	r3, r3, #3
 8007cd6:	f043 0301 	orr.w	r3, r3, #1
 8007cda:	81a3      	strh	r3, [r4, #12]
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	431d      	orrs	r5, r3
 8007ce0:	81a5      	strh	r5, [r4, #12]
 8007ce2:	e7cf      	b.n	8007c84 <__smakebuf_r+0x18>

08007ce4 <_fstat_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	4d07      	ldr	r5, [pc, #28]	@ (8007d04 <_fstat_r+0x20>)
 8007ce8:	2300      	movs	r3, #0
 8007cea:	4604      	mov	r4, r0
 8007cec:	4608      	mov	r0, r1
 8007cee:	4611      	mov	r1, r2
 8007cf0:	602b      	str	r3, [r5, #0]
 8007cf2:	f7f9 fe18 	bl	8001926 <_fstat>
 8007cf6:	1c43      	adds	r3, r0, #1
 8007cf8:	d102      	bne.n	8007d00 <_fstat_r+0x1c>
 8007cfa:	682b      	ldr	r3, [r5, #0]
 8007cfc:	b103      	cbz	r3, 8007d00 <_fstat_r+0x1c>
 8007cfe:	6023      	str	r3, [r4, #0]
 8007d00:	bd38      	pop	{r3, r4, r5, pc}
 8007d02:	bf00      	nop
 8007d04:	2000093c 	.word	0x2000093c

08007d08 <_isatty_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	4d06      	ldr	r5, [pc, #24]	@ (8007d24 <_isatty_r+0x1c>)
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	4604      	mov	r4, r0
 8007d10:	4608      	mov	r0, r1
 8007d12:	602b      	str	r3, [r5, #0]
 8007d14:	f7f9 fe17 	bl	8001946 <_isatty>
 8007d18:	1c43      	adds	r3, r0, #1
 8007d1a:	d102      	bne.n	8007d22 <_isatty_r+0x1a>
 8007d1c:	682b      	ldr	r3, [r5, #0]
 8007d1e:	b103      	cbz	r3, 8007d22 <_isatty_r+0x1a>
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	bd38      	pop	{r3, r4, r5, pc}
 8007d24:	2000093c 	.word	0x2000093c

08007d28 <_init>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	bf00      	nop
 8007d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2e:	bc08      	pop	{r3}
 8007d30:	469e      	mov	lr, r3
 8007d32:	4770      	bx	lr

08007d34 <_fini>:
 8007d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d36:	bf00      	nop
 8007d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3a:	bc08      	pop	{r3}
 8007d3c:	469e      	mov	lr, r3
 8007d3e:	4770      	bx	lr
