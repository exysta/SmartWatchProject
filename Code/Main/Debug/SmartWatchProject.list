
SmartWatchProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff2c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f4  080100c0  080100c0  000110c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108b4  080108b4  000121d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080108b4  080108b4  000118b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108bc  080108bc  000121d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108bc  080108bc  000118bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080108c0  080108c0  000118c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080108c4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001944  200001d4  08010a98  000121d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b18  08010a98  00012b18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d928  00000000  00000000  00012204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045a6  00000000  00000000  0002fb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  000340d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff7  00000000  00000000  000355b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a673  00000000  00000000  000365af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d3b0  00000000  00000000  00060c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1f43  00000000  00000000  0007dfd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016ff15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a70  00000000  00000000  0016ff58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001769c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080100a4 	.word	0x080100a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080100a4 	.word	0x080100a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 ba09 	b.w	80010bc <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b9be 	b.w	80010bc <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	468e      	mov	lr, r1
 8000dcc:	4604      	mov	r4, r0
 8000dce:	4688      	mov	r8, r1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d14a      	bne.n	8000e6a <__udivmoddi4+0xa6>
 8000dd4:	428a      	cmp	r2, r1
 8000dd6:	4617      	mov	r7, r2
 8000dd8:	d962      	bls.n	8000ea0 <__udivmoddi4+0xdc>
 8000dda:	fab2 f682 	clz	r6, r2
 8000dde:	b14e      	cbz	r6, 8000df4 <__udivmoddi4+0x30>
 8000de0:	f1c6 0320 	rsb	r3, r6, #32
 8000de4:	fa01 f806 	lsl.w	r8, r1, r6
 8000de8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dec:	40b7      	lsls	r7, r6
 8000dee:	ea43 0808 	orr.w	r8, r3, r8
 8000df2:	40b4      	lsls	r4, r6
 8000df4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df8:	fa1f fc87 	uxth.w	ip, r7
 8000dfc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0x62>
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e18:	f080 80ea 	bcs.w	8000ff0 <__udivmoddi4+0x22c>
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	f240 80e7 	bls.w	8000ff0 <__udivmoddi4+0x22c>
 8000e22:	3902      	subs	r1, #2
 8000e24:	443b      	add	r3, r7
 8000e26:	1a9a      	subs	r2, r3, r2
 8000e28:	b2a3      	uxth	r3, r4
 8000e2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e3a:	459c      	cmp	ip, r3
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x8e>
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e44:	f080 80d6 	bcs.w	8000ff4 <__udivmoddi4+0x230>
 8000e48:	459c      	cmp	ip, r3
 8000e4a:	f240 80d3 	bls.w	8000ff4 <__udivmoddi4+0x230>
 8000e4e:	443b      	add	r3, r7
 8000e50:	3802      	subs	r0, #2
 8000e52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e56:	eba3 030c 	sub.w	r3, r3, ip
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	b11d      	cbz	r5, 8000e66 <__udivmoddi4+0xa2>
 8000e5e:	40f3      	lsrs	r3, r6
 8000e60:	2200      	movs	r2, #0
 8000e62:	e9c5 3200 	strd	r3, r2, [r5]
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d905      	bls.n	8000e7a <__udivmoddi4+0xb6>
 8000e6e:	b10d      	cbz	r5, 8000e74 <__udivmoddi4+0xb0>
 8000e70:	e9c5 0100 	strd	r0, r1, [r5]
 8000e74:	2100      	movs	r1, #0
 8000e76:	4608      	mov	r0, r1
 8000e78:	e7f5      	b.n	8000e66 <__udivmoddi4+0xa2>
 8000e7a:	fab3 f183 	clz	r1, r3
 8000e7e:	2900      	cmp	r1, #0
 8000e80:	d146      	bne.n	8000f10 <__udivmoddi4+0x14c>
 8000e82:	4573      	cmp	r3, lr
 8000e84:	d302      	bcc.n	8000e8c <__udivmoddi4+0xc8>
 8000e86:	4282      	cmp	r2, r0
 8000e88:	f200 8105 	bhi.w	8001096 <__udivmoddi4+0x2d2>
 8000e8c:	1a84      	subs	r4, r0, r2
 8000e8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e92:	2001      	movs	r0, #1
 8000e94:	4690      	mov	r8, r2
 8000e96:	2d00      	cmp	r5, #0
 8000e98:	d0e5      	beq.n	8000e66 <__udivmoddi4+0xa2>
 8000e9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e9e:	e7e2      	b.n	8000e66 <__udivmoddi4+0xa2>
 8000ea0:	2a00      	cmp	r2, #0
 8000ea2:	f000 8090 	beq.w	8000fc6 <__udivmoddi4+0x202>
 8000ea6:	fab2 f682 	clz	r6, r2
 8000eaa:	2e00      	cmp	r6, #0
 8000eac:	f040 80a4 	bne.w	8000ff8 <__udivmoddi4+0x234>
 8000eb0:	1a8a      	subs	r2, r1, r2
 8000eb2:	0c03      	lsrs	r3, r0, #16
 8000eb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eb8:	b280      	uxth	r0, r0
 8000eba:	b2bc      	uxth	r4, r7
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ec2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ec6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000eca:	fb04 f20c 	mul.w	r2, r4, ip
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x11e>
 8000ed2:	18fb      	adds	r3, r7, r3
 8000ed4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ed8:	d202      	bcs.n	8000ee0 <__udivmoddi4+0x11c>
 8000eda:	429a      	cmp	r2, r3
 8000edc:	f200 80e0 	bhi.w	80010a0 <__udivmoddi4+0x2dc>
 8000ee0:	46c4      	mov	ip, r8
 8000ee2:	1a9b      	subs	r3, r3, r2
 8000ee4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ee8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000eec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ef0:	fb02 f404 	mul.w	r4, r2, r4
 8000ef4:	429c      	cmp	r4, r3
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x144>
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000efe:	d202      	bcs.n	8000f06 <__udivmoddi4+0x142>
 8000f00:	429c      	cmp	r4, r3
 8000f02:	f200 80ca 	bhi.w	800109a <__udivmoddi4+0x2d6>
 8000f06:	4602      	mov	r2, r0
 8000f08:	1b1b      	subs	r3, r3, r4
 8000f0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f0e:	e7a5      	b.n	8000e5c <__udivmoddi4+0x98>
 8000f10:	f1c1 0620 	rsb	r6, r1, #32
 8000f14:	408b      	lsls	r3, r1
 8000f16:	fa22 f706 	lsr.w	r7, r2, r6
 8000f1a:	431f      	orrs	r7, r3
 8000f1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f20:	fa20 f306 	lsr.w	r3, r0, r6
 8000f24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f32:	fa1f fc87 	uxth.w	ip, r7
 8000f36:	fbbe f0f9 	udiv	r0, lr, r9
 8000f3a:	0c1c      	lsrs	r4, r3, #16
 8000f3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f48:	45a6      	cmp	lr, r4
 8000f4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f4e:	d909      	bls.n	8000f64 <__udivmoddi4+0x1a0>
 8000f50:	193c      	adds	r4, r7, r4
 8000f52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f56:	f080 809c 	bcs.w	8001092 <__udivmoddi4+0x2ce>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	f240 8099 	bls.w	8001092 <__udivmoddi4+0x2ce>
 8000f60:	3802      	subs	r0, #2
 8000f62:	443c      	add	r4, r7
 8000f64:	eba4 040e 	sub.w	r4, r4, lr
 8000f68:	fa1f fe83 	uxth.w	lr, r3
 8000f6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f70:	fb09 4413 	mls	r4, r9, r3, r4
 8000f74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f7c:	45a4      	cmp	ip, r4
 8000f7e:	d908      	bls.n	8000f92 <__udivmoddi4+0x1ce>
 8000f80:	193c      	adds	r4, r7, r4
 8000f82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f86:	f080 8082 	bcs.w	800108e <__udivmoddi4+0x2ca>
 8000f8a:	45a4      	cmp	ip, r4
 8000f8c:	d97f      	bls.n	800108e <__udivmoddi4+0x2ca>
 8000f8e:	3b02      	subs	r3, #2
 8000f90:	443c      	add	r4, r7
 8000f92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f96:	eba4 040c 	sub.w	r4, r4, ip
 8000f9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f9e:	4564      	cmp	r4, ip
 8000fa0:	4673      	mov	r3, lr
 8000fa2:	46e1      	mov	r9, ip
 8000fa4:	d362      	bcc.n	800106c <__udivmoddi4+0x2a8>
 8000fa6:	d05f      	beq.n	8001068 <__udivmoddi4+0x2a4>
 8000fa8:	b15d      	cbz	r5, 8000fc2 <__udivmoddi4+0x1fe>
 8000faa:	ebb8 0203 	subs.w	r2, r8, r3
 8000fae:	eb64 0409 	sbc.w	r4, r4, r9
 8000fb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000fba:	431e      	orrs	r6, r3
 8000fbc:	40cc      	lsrs	r4, r1
 8000fbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	e74f      	b.n	8000e66 <__udivmoddi4+0xa2>
 8000fc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000fca:	0c01      	lsrs	r1, r0, #16
 8000fcc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000fd0:	b280      	uxth	r0, r0
 8000fd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4638      	mov	r0, r7
 8000fda:	463c      	mov	r4, r7
 8000fdc:	46b8      	mov	r8, r7
 8000fde:	46be      	mov	lr, r7
 8000fe0:	2620      	movs	r6, #32
 8000fe2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fe6:	eba2 0208 	sub.w	r2, r2, r8
 8000fea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fee:	e766      	b.n	8000ebe <__udivmoddi4+0xfa>
 8000ff0:	4601      	mov	r1, r0
 8000ff2:	e718      	b.n	8000e26 <__udivmoddi4+0x62>
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	e72c      	b.n	8000e52 <__udivmoddi4+0x8e>
 8000ff8:	f1c6 0220 	rsb	r2, r6, #32
 8000ffc:	fa2e f302 	lsr.w	r3, lr, r2
 8001000:	40b7      	lsls	r7, r6
 8001002:	40b1      	lsls	r1, r6
 8001004:	fa20 f202 	lsr.w	r2, r0, r2
 8001008:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800100c:	430a      	orrs	r2, r1
 800100e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001012:	b2bc      	uxth	r4, r7
 8001014:	fb0e 3318 	mls	r3, lr, r8, r3
 8001018:	0c11      	lsrs	r1, r2, #16
 800101a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800101e:	fb08 f904 	mul.w	r9, r8, r4
 8001022:	40b0      	lsls	r0, r6
 8001024:	4589      	cmp	r9, r1
 8001026:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800102a:	b280      	uxth	r0, r0
 800102c:	d93e      	bls.n	80010ac <__udivmoddi4+0x2e8>
 800102e:	1879      	adds	r1, r7, r1
 8001030:	f108 3cff 	add.w	ip, r8, #4294967295
 8001034:	d201      	bcs.n	800103a <__udivmoddi4+0x276>
 8001036:	4589      	cmp	r9, r1
 8001038:	d81f      	bhi.n	800107a <__udivmoddi4+0x2b6>
 800103a:	eba1 0109 	sub.w	r1, r1, r9
 800103e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001042:	fb09 f804 	mul.w	r8, r9, r4
 8001046:	fb0e 1119 	mls	r1, lr, r9, r1
 800104a:	b292      	uxth	r2, r2
 800104c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001050:	4542      	cmp	r2, r8
 8001052:	d229      	bcs.n	80010a8 <__udivmoddi4+0x2e4>
 8001054:	18ba      	adds	r2, r7, r2
 8001056:	f109 31ff 	add.w	r1, r9, #4294967295
 800105a:	d2c4      	bcs.n	8000fe6 <__udivmoddi4+0x222>
 800105c:	4542      	cmp	r2, r8
 800105e:	d2c2      	bcs.n	8000fe6 <__udivmoddi4+0x222>
 8001060:	f1a9 0102 	sub.w	r1, r9, #2
 8001064:	443a      	add	r2, r7
 8001066:	e7be      	b.n	8000fe6 <__udivmoddi4+0x222>
 8001068:	45f0      	cmp	r8, lr
 800106a:	d29d      	bcs.n	8000fa8 <__udivmoddi4+0x1e4>
 800106c:	ebbe 0302 	subs.w	r3, lr, r2
 8001070:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001074:	3801      	subs	r0, #1
 8001076:	46e1      	mov	r9, ip
 8001078:	e796      	b.n	8000fa8 <__udivmoddi4+0x1e4>
 800107a:	eba7 0909 	sub.w	r9, r7, r9
 800107e:	4449      	add	r1, r9
 8001080:	f1a8 0c02 	sub.w	ip, r8, #2
 8001084:	fbb1 f9fe 	udiv	r9, r1, lr
 8001088:	fb09 f804 	mul.w	r8, r9, r4
 800108c:	e7db      	b.n	8001046 <__udivmoddi4+0x282>
 800108e:	4673      	mov	r3, lr
 8001090:	e77f      	b.n	8000f92 <__udivmoddi4+0x1ce>
 8001092:	4650      	mov	r0, sl
 8001094:	e766      	b.n	8000f64 <__udivmoddi4+0x1a0>
 8001096:	4608      	mov	r0, r1
 8001098:	e6fd      	b.n	8000e96 <__udivmoddi4+0xd2>
 800109a:	443b      	add	r3, r7
 800109c:	3a02      	subs	r2, #2
 800109e:	e733      	b.n	8000f08 <__udivmoddi4+0x144>
 80010a0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010a4:	443b      	add	r3, r7
 80010a6:	e71c      	b.n	8000ee2 <__udivmoddi4+0x11e>
 80010a8:	4649      	mov	r1, r9
 80010aa:	e79c      	b.n	8000fe6 <__udivmoddi4+0x222>
 80010ac:	eba1 0109 	sub.w	r1, r1, r9
 80010b0:	46c4      	mov	ip, r8
 80010b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b6:	fb09 f804 	mul.w	r8, r9, r4
 80010ba:	e7c4      	b.n	8001046 <__udivmoddi4+0x282>

080010bc <__aeabi_idiv0>:
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010c6:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <MX_DMA_Init+0x90>)
 80010c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010ca:	4a21      	ldr	r2, [pc, #132]	@ (8001150 <MX_DMA_Init+0x90>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80010d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <MX_DMA_Init+0x90>)
 80010d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010de:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <MX_DMA_Init+0x90>)
 80010e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001150 <MX_DMA_Init+0x90>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80010ea:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <MX_DMA_Init+0x90>)
 80010ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	200c      	movs	r0, #12
 80010fc:	f001 fa21 	bl	8002542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001100:	200c      	movs	r0, #12
 8001102:	f001 fa3a 	bl	800257a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	200d      	movs	r0, #13
 800110c:	f001 fa19 	bl	8002542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001110:	200d      	movs	r0, #13
 8001112:	f001 fa32 	bl	800257a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	200e      	movs	r0, #14
 800111c:	f001 fa11 	bl	8002542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001120:	200e      	movs	r0, #14
 8001122:	f001 fa2a 	bl	800257a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	200f      	movs	r0, #15
 800112c:	f001 fa09 	bl	8002542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001130:	200f      	movs	r0, #15
 8001132:	f001 fa22 	bl	800257a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2045      	movs	r0, #69	@ 0x45
 800113c:	f001 fa01 	bl	8002542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8001140:	2045      	movs	r0, #69	@ 0x45
 8001142:	f001 fa1a 	bl	800257a <HAL_NVIC_EnableIRQ>

}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000

08001154 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	4b6c      	ldr	r3, [pc, #432]	@ (800131c <MX_GPIO_Init+0x1c8>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	4a6b      	ldr	r2, [pc, #428]	@ (800131c <MX_GPIO_Init+0x1c8>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001176:	4b69      	ldr	r3, [pc, #420]	@ (800131c <MX_GPIO_Init+0x1c8>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b66      	ldr	r3, [pc, #408]	@ (800131c <MX_GPIO_Init+0x1c8>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001186:	4a65      	ldr	r2, [pc, #404]	@ (800131c <MX_GPIO_Init+0x1c8>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118e:	4b63      	ldr	r3, [pc, #396]	@ (800131c <MX_GPIO_Init+0x1c8>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	4b60      	ldr	r3, [pc, #384]	@ (800131c <MX_GPIO_Init+0x1c8>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	4a5f      	ldr	r2, [pc, #380]	@ (800131c <MX_GPIO_Init+0x1c8>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a6:	4b5d      	ldr	r3, [pc, #372]	@ (800131c <MX_GPIO_Init+0x1c8>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_MAX30102_Pin|ST7789_DC_Pin|ST7789_CS_Pin|ST7789_BLK_Pin
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 61b9 	mov.w	r1, #1480	@ 0x5c8
 80011b8:	4859      	ldr	r0, [pc, #356]	@ (8001320 <MX_GPIO_Init+0x1cc>)
 80011ba:	f001 fe25 	bl	8002e08 <HAL_GPIO_WritePin>
                          |BLE_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_SWD_Pin|LED_ERROR_Pin|LED_STATUS_Pin|LED_BLE_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f640 0164 	movw	r1, #2148	@ 0x864
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c8:	f001 fe1e 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GPS_Pin|LED_LCD_Pin|LED_BMP280_Pin|ST7789_RST_Pin
 80011cc:	2200      	movs	r2, #0
 80011ce:	f241 1107 	movw	r1, #4359	@ 0x1107
 80011d2:	4854      	ldr	r0, [pc, #336]	@ (8001324 <MX_GPIO_Init+0x1d0>)
 80011d4:	f001 fe18 	bl	8002e08 <HAL_GPIO_WritePin>
                          |LED_MPUS6500_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : MAX30102_INT_Pin */
  GPIO_InitStruct.Pin = MAX30102_INT_Pin;
 80011d8:	2304      	movs	r3, #4
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MAX30102_INT_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	4619      	mov	r1, r3
 80011ec:	484c      	ldr	r0, [pc, #304]	@ (8001320 <MX_GPIO_Init+0x1cc>)
 80011ee:	f001 fc61 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_MAX30102_Pin ST7789_CS_Pin ST7789_BLK_Pin BLE_EN_Pin */
  GPIO_InitStruct.Pin = LED_MAX30102_Pin|ST7789_CS_Pin|ST7789_BLK_Pin|BLE_EN_Pin;
 80011f2:	f44f 63b1 	mov.w	r3, #1416	@ 0x588
 80011f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4619      	mov	r1, r3
 800120a:	4845      	ldr	r0, [pc, #276]	@ (8001320 <MX_GPIO_Init+0x1cc>)
 800120c:	f001 fc52 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SWD_Pin LED_ERROR_Pin LED_STATUS_Pin LED_BLE_Pin */
  GPIO_InitStruct.Pin = LED_SWD_Pin|LED_ERROR_Pin|LED_STATUS_Pin|LED_BLE_Pin;
 8001210:	f640 0364 	movw	r3, #2148	@ 0x864
 8001214:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800122c:	f001 fc42 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GPS_Pin LED_LCD_Pin LED_BMP280_Pin ST7789_RST_Pin
                           LED_MPUS6500_Pin */
  GPIO_InitStruct.Pin = LED_GPS_Pin|LED_LCD_Pin|LED_BMP280_Pin|ST7789_RST_Pin
 8001230:	f241 1307 	movw	r3, #4359	@ 0x1107
 8001234:	60fb      	str	r3, [r7, #12]
                          |LED_MPUS6500_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	4619      	mov	r1, r3
 8001248:	4836      	ldr	r0, [pc, #216]	@ (8001324 <MX_GPIO_Init+0x1d0>)
 800124a:	f001 fc33 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800124e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001254:	2303      	movs	r3, #3
 8001256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4619      	mov	r1, r3
 8001262:	4830      	ldr	r0, [pc, #192]	@ (8001324 <MX_GPIO_Init+0x1d0>)
 8001264:	f001 fc26 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin;
 8001268:	2340      	movs	r3, #64	@ 0x40
 800126a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001274:	2302      	movs	r3, #2
 8001276:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ST7789_DC_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	4619      	mov	r1, r3
 800127e:	4828      	ldr	r0, [pc, #160]	@ (8001320 <MX_GPIO_Init+0x1cc>)
 8001280:	f001 fc18 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_NEXT_Pin */
  GPIO_InitStruct.Pin = BUTTON_NEXT_Pin;
 8001284:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001288:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800128a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800128e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_NEXT_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4619      	mov	r1, r3
 800129a:	4821      	ldr	r0, [pc, #132]	@ (8001320 <MX_GPIO_Init+0x1cc>)
 800129c:	f001 fc0a 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_BACK_Pin */
  GPIO_InitStruct.Pin = BUTTON_BACK_Pin;
 80012a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_BACK_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	4619      	mov	r1, r3
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ba:	f001 fbfb 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STATE_Pin */
  GPIO_InitStruct.Pin = BLE_STATE_Pin;
 80012be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLE_STATE_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	4619      	mov	r1, r3
 80012d2:	4813      	ldr	r0, [pc, #76]	@ (8001320 <MX_GPIO_Init+0x1cc>)
 80012d4:	f001 fbee 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6500_INT_Pin */
  GPIO_InitStruct.Pin = MPU6500_INT_Pin;
 80012d8:	2320      	movs	r3, #32
 80012da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MPU6500_INT_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	4619      	mov	r1, r3
 80012ec:	480d      	ldr	r0, [pc, #52]	@ (8001324 <MX_GPIO_Init+0x1d0>)
 80012ee:	f001 fbe1 	bl	8002ab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2008      	movs	r0, #8
 80012f8:	f001 f923 	bl	8002542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80012fc:	2008      	movs	r0, #8
 80012fe:	f001 f93c 	bl	800257a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2017      	movs	r0, #23
 8001308:	f001 f91b 	bl	8002542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800130c:	2017      	movs	r0, #23
 800130e:	f001 f934 	bl	800257a <HAL_NVIC_EnableIRQ>

}
 8001312:	bf00      	nop
 8001314:	3720      	adds	r7, #32
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000
 8001320:	48000800 	.word	0x48000800
 8001324:	48000400 	.word	0x48000400

08001328 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800132c:	4b1b      	ldr	r3, [pc, #108]	@ (800139c <MX_I2C1_Init+0x74>)
 800132e:	4a1c      	ldr	r2, [pc, #112]	@ (80013a0 <MX_I2C1_Init+0x78>)
 8001330:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8001332:	4b1a      	ldr	r3, [pc, #104]	@ (800139c <MX_I2C1_Init+0x74>)
 8001334:	4a1b      	ldr	r2, [pc, #108]	@ (80013a4 <MX_I2C1_Init+0x7c>)
 8001336:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001338:	4b18      	ldr	r3, [pc, #96]	@ (800139c <MX_I2C1_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800133e:	4b17      	ldr	r3, [pc, #92]	@ (800139c <MX_I2C1_Init+0x74>)
 8001340:	2201      	movs	r2, #1
 8001342:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001344:	4b15      	ldr	r3, [pc, #84]	@ (800139c <MX_I2C1_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800134a:	4b14      	ldr	r3, [pc, #80]	@ (800139c <MX_I2C1_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <MX_I2C1_Init+0x74>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001356:	4b11      	ldr	r3, [pc, #68]	@ (800139c <MX_I2C1_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135c:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <MX_I2C1_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001362:	480e      	ldr	r0, [pc, #56]	@ (800139c <MX_I2C1_Init+0x74>)
 8001364:	f001 fd80 	bl	8002e68 <HAL_I2C_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800136e:	f000 fab3 	bl	80018d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001372:	2100      	movs	r1, #0
 8001374:	4809      	ldr	r0, [pc, #36]	@ (800139c <MX_I2C1_Init+0x74>)
 8001376:	f002 fd9d 	bl	8003eb4 <HAL_I2CEx_ConfigAnalogFilter>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001380:	f000 faaa 	bl	80018d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001384:	2100      	movs	r1, #0
 8001386:	4805      	ldr	r0, [pc, #20]	@ (800139c <MX_I2C1_Init+0x74>)
 8001388:	f002 fddf 	bl	8003f4a <HAL_I2CEx_ConfigDigitalFilter>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001392:	f000 faa1 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200001f0 	.word	0x200001f0
 80013a0:	40005400 	.word	0x40005400
 80013a4:	10d19ce4 	.word	0x10d19ce4

080013a8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <MX_I2C2_Init+0x74>)
 80013ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001420 <MX_I2C2_Init+0x78>)
 80013b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <MX_I2C2_Init+0x74>)
 80013b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001424 <MX_I2C2_Init+0x7c>)
 80013b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013b8:	4b18      	ldr	r3, [pc, #96]	@ (800141c <MX_I2C2_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013be:	4b17      	ldr	r3, [pc, #92]	@ (800141c <MX_I2C2_Init+0x74>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c4:	4b15      	ldr	r3, [pc, #84]	@ (800141c <MX_I2C2_Init+0x74>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <MX_I2C2_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <MX_I2C2_Init+0x74>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <MX_I2C2_Init+0x74>)
 80013d8:	2200      	movs	r2, #0
 80013da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <MX_I2C2_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013e2:	480e      	ldr	r0, [pc, #56]	@ (800141c <MX_I2C2_Init+0x74>)
 80013e4:	f001 fd40 	bl	8002e68 <HAL_I2C_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80013ee:	f000 fa73 	bl	80018d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013f2:	2100      	movs	r1, #0
 80013f4:	4809      	ldr	r0, [pc, #36]	@ (800141c <MX_I2C2_Init+0x74>)
 80013f6:	f002 fd5d 	bl	8003eb4 <HAL_I2CEx_ConfigAnalogFilter>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001400:	f000 fa6a 	bl	80018d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001404:	2100      	movs	r1, #0
 8001406:	4805      	ldr	r0, [pc, #20]	@ (800141c <MX_I2C2_Init+0x74>)
 8001408:	f002 fd9f 	bl	8003f4a <HAL_I2CEx_ConfigDigitalFilter>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001412:	f000 fa61 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000244 	.word	0x20000244
 8001420:	40005800 	.word	0x40005800
 8001424:	10d19ce4 	.word	0x10d19ce4

08001428 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800142c:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <MX_I2C3_Init+0x74>)
 800142e:	4a1c      	ldr	r2, [pc, #112]	@ (80014a0 <MX_I2C3_Init+0x78>)
 8001430:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 8001432:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <MX_I2C3_Init+0x74>)
 8001434:	4a1b      	ldr	r2, [pc, #108]	@ (80014a4 <MX_I2C3_Init+0x7c>)
 8001436:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001438:	4b18      	ldr	r3, [pc, #96]	@ (800149c <MX_I2C3_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143e:	4b17      	ldr	r3, [pc, #92]	@ (800149c <MX_I2C3_Init+0x74>)
 8001440:	2201      	movs	r2, #1
 8001442:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001444:	4b15      	ldr	r3, [pc, #84]	@ (800149c <MX_I2C3_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800144a:	4b14      	ldr	r3, [pc, #80]	@ (800149c <MX_I2C3_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <MX_I2C3_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001456:	4b11      	ldr	r3, [pc, #68]	@ (800149c <MX_I2C3_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145c:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <MX_I2C3_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001462:	480e      	ldr	r0, [pc, #56]	@ (800149c <MX_I2C3_Init+0x74>)
 8001464:	f001 fd00 	bl	8002e68 <HAL_I2C_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800146e:	f000 fa33 	bl	80018d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001472:	2100      	movs	r1, #0
 8001474:	4809      	ldr	r0, [pc, #36]	@ (800149c <MX_I2C3_Init+0x74>)
 8001476:	f002 fd1d 	bl	8003eb4 <HAL_I2CEx_ConfigAnalogFilter>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001480:	f000 fa2a 	bl	80018d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001484:	2100      	movs	r1, #0
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_I2C3_Init+0x74>)
 8001488:	f002 fd5f 	bl	8003f4a <HAL_I2CEx_ConfigDigitalFilter>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001492:	f000 fa21 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000298 	.word	0x20000298
 80014a0:	40005c00 	.word	0x40005c00
 80014a4:	10d19ce4 	.word	0x10d19ce4

080014a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b0b0      	sub	sp, #192	@ 0xc0
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c4:	2288      	movs	r2, #136	@ 0x88
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00b fac4 	bl	800ca56 <memset>
  if(i2cHandle->Instance==I2C1)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a63      	ldr	r2, [pc, #396]	@ (8001660 <HAL_I2C_MspInit+0x1b8>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d13b      	bne.n	8001550 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014d8:	2340      	movs	r3, #64	@ 0x40
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014dc:	2300      	movs	r3, #0
 80014de:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e4:	4618      	mov	r0, r3
 80014e6:	f003 fbe1 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014f0:	f000 f9f2 	bl	80018d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001664 <HAL_I2C_MspInit+0x1bc>)
 80014f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f8:	4a5a      	ldr	r2, [pc, #360]	@ (8001664 <HAL_I2C_MspInit+0x1bc>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001500:	4b58      	ldr	r3, [pc, #352]	@ (8001664 <HAL_I2C_MspInit+0x1bc>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	623b      	str	r3, [r7, #32]
 800150a:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU6500_SCL_Pin|MPU6500_SDA_Pin;
 800150c:	23c0      	movs	r3, #192	@ 0xc0
 800150e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001512:	2312      	movs	r3, #18
 8001514:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001524:	2304      	movs	r3, #4
 8001526:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800152e:	4619      	mov	r1, r3
 8001530:	484d      	ldr	r0, [pc, #308]	@ (8001668 <HAL_I2C_MspInit+0x1c0>)
 8001532:	f001 fabf 	bl	8002ab4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001536:	4b4b      	ldr	r3, [pc, #300]	@ (8001664 <HAL_I2C_MspInit+0x1bc>)
 8001538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153a:	4a4a      	ldr	r2, [pc, #296]	@ (8001664 <HAL_I2C_MspInit+0x1bc>)
 800153c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001540:	6593      	str	r3, [r2, #88]	@ 0x58
 8001542:	4b48      	ldr	r3, [pc, #288]	@ (8001664 <HAL_I2C_MspInit+0x1bc>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001546:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800154e:	e082      	b.n	8001656 <HAL_I2C_MspInit+0x1ae>
  else if(i2cHandle->Instance==I2C2)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a45      	ldr	r2, [pc, #276]	@ (800166c <HAL_I2C_MspInit+0x1c4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d13c      	bne.n	80015d4 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800155a:	2380      	movs	r3, #128	@ 0x80
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800155e:	2300      	movs	r3, #0
 8001560:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001566:	4618      	mov	r0, r3
 8001568:	f003 fba0 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8001572:	f000 f9b1 	bl	80018d8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	4b3b      	ldr	r3, [pc, #236]	@ (8001664 <HAL_I2C_MspInit+0x1bc>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	4a3a      	ldr	r2, [pc, #232]	@ (8001664 <HAL_I2C_MspInit+0x1bc>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001582:	4b38      	ldr	r3, [pc, #224]	@ (8001664 <HAL_I2C_MspInit+0x1bc>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
 800158c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = BMP280_SCL_Pin|BMP280_SDA_Pin;
 800158e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001592:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001596:	2312      	movs	r3, #18
 8001598:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015a8:	2304      	movs	r3, #4
 80015aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80015b2:	4619      	mov	r1, r3
 80015b4:	482c      	ldr	r0, [pc, #176]	@ (8001668 <HAL_I2C_MspInit+0x1c0>)
 80015b6:	f001 fa7d 	bl	8002ab4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001664 <HAL_I2C_MspInit+0x1bc>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015be:	4a29      	ldr	r2, [pc, #164]	@ (8001664 <HAL_I2C_MspInit+0x1bc>)
 80015c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015c6:	4b27      	ldr	r3, [pc, #156]	@ (8001664 <HAL_I2C_MspInit+0x1bc>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697b      	ldr	r3, [r7, #20]
}
 80015d2:	e040      	b.n	8001656 <HAL_I2C_MspInit+0x1ae>
  else if(i2cHandle->Instance==I2C3)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a25      	ldr	r2, [pc, #148]	@ (8001670 <HAL_I2C_MspInit+0x1c8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d13b      	bne.n	8001656 <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80015de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ec:	4618      	mov	r0, r3
 80015ee:	f003 fb5d 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_I2C_MspInit+0x154>
      Error_Handler();
 80015f8:	f000 f96e 	bl	80018d8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fc:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <HAL_I2C_MspInit+0x1bc>)
 80015fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001600:	4a18      	ldr	r2, [pc, #96]	@ (8001664 <HAL_I2C_MspInit+0x1bc>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001608:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <HAL_I2C_MspInit+0x1bc>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MAX30102_SCL_Pin|MAX30102_SDA_Pin;
 8001614:	2303      	movs	r3, #3
 8001616:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161a:	2312      	movs	r3, #18
 800161c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001626:	2303      	movs	r3, #3
 8001628:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800162c:	2304      	movs	r3, #4
 800162e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001632:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001636:	4619      	mov	r1, r3
 8001638:	480e      	ldr	r0, [pc, #56]	@ (8001674 <HAL_I2C_MspInit+0x1cc>)
 800163a:	f001 fa3b 	bl	8002ab4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <HAL_I2C_MspInit+0x1bc>)
 8001640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001642:	4a08      	ldr	r2, [pc, #32]	@ (8001664 <HAL_I2C_MspInit+0x1bc>)
 8001644:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001648:	6593      	str	r3, [r2, #88]	@ 0x58
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_I2C_MspInit+0x1bc>)
 800164c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
}
 8001656:	bf00      	nop
 8001658:	37c0      	adds	r7, #192	@ 0xc0
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40005400 	.word	0x40005400
 8001664:	40021000 	.word	0x40021000
 8001668:	48000400 	.word	0x48000400
 800166c:	40005800 	.word	0x40005800
 8001670:	40005c00 	.word	0x40005c00
 8001674:	48000800 	.word	0x48000800

08001678 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&STLINK_UART, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8001680:	1d39      	adds	r1, r7, #4
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	2201      	movs	r2, #1
 8001688:	4803      	ldr	r0, [pc, #12]	@ (8001698 <__io_putchar+0x20>)
 800168a:	f004 fe39 	bl	8006300 <HAL_UART_Transmit>
	return chr;
 800168e:	687b      	ldr	r3, [r7, #4]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	2000065c 	.word	0x2000065c

0800169c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a0:	f000 fddb 	bl	800225a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a4:	f000 f82a 	bl	80016fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a8:	f7ff fd54 	bl	8001154 <MX_GPIO_Init>
  MX_DMA_Init();
 80016ac:	f7ff fd08 	bl	80010c0 <MX_DMA_Init>
  MX_I2C1_Init();
 80016b0:	f7ff fe3a 	bl	8001328 <MX_I2C1_Init>
  MX_I2C2_Init();
 80016b4:	f7ff fe78 	bl	80013a8 <MX_I2C2_Init>
  MX_I2C3_Init();
 80016b8:	f7ff feb6 	bl	8001428 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 80016bc:	f000 fbc0 	bl	8001e40 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 80016c0:	f000 f910 	bl	80018e4 <MX_SPI2_Init>
  MX_UART4_Init();
 80016c4:	f000 fb58 	bl	8001d78 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80016c8:	f000 fb86 	bl	8001dd8 <MX_USART1_UART_Init>
	max30102_set_die_temp_rdy(&max30102, 1);

	Sensor_MAX30102_init(50.0f);
#endif
	//init
	Sensor_SmartWatch_init(&SmartWatchData_handle);
 80016cc:	4809      	ldr	r0, [pc, #36]	@ (80016f4 <main+0x58>)
 80016ce:	f009 fb3d 	bl	800ad4c <Sensor_SmartWatch_init>
	SmartWatchScreen_State = SCREEN_CLOCK; // first screen
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <main+0x5c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
	Display_Init(SmartWatchScreen_State);
 80016d8:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <main+0x5c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f009 f80a 	bl	800a6f8 <Display_Init>
//	      uint8_t bpm  = Sensor_MAX30102_get_hr();
//	      uint8_t spO2 = Sensor_MAX30102_get_spo2();
//	      printf("hey %u %u",bpm,spO2);
	    }
#endif
	    Sensor_SmartWatch_update(&SmartWatchData_handle);
 80016e4:	4803      	ldr	r0, [pc, #12]	@ (80016f4 <main+0x58>)
 80016e6:	f009 fb5d 	bl	800ada4 <Sensor_SmartWatch_update>
	    Sensor_SmartWatch_log(&SmartWatchData_handle);
 80016ea:	4802      	ldr	r0, [pc, #8]	@ (80016f4 <main+0x58>)
 80016ec:	f00a f914 	bl	800b918 <Sensor_SmartWatch_log>
	    Sensor_SmartWatch_update(&SmartWatchData_handle);
 80016f0:	bf00      	nop
 80016f2:	e7f7      	b.n	80016e4 <main+0x48>
 80016f4:	20000a28 	.word	0x20000a28
 80016f8:	2000049d 	.word	0x2000049d

080016fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b096      	sub	sp, #88	@ 0x58
 8001700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	2244      	movs	r2, #68	@ 0x44
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f00b f9a3 	bl	800ca56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001710:	463b      	mov	r3, r7
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800171e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001722:	f002 fc6d 	bl	8004000 <HAL_PWREx_ControlVoltageScaling>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800172c:	f000 f8d4 	bl	80018d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001730:	2310      	movs	r3, #16
 8001732:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001734:	2301      	movs	r3, #1
 8001736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800173c:	2360      	movs	r3, #96	@ 0x60
 800173e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001740:	2302      	movs	r3, #2
 8001742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001744:	2301      	movs	r3, #1
 8001746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001748:	2301      	movs	r3, #1
 800174a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800174c:	2328      	movs	r3, #40	@ 0x28
 800174e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001750:	2307      	movs	r3, #7
 8001752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001754:	2302      	movs	r3, #2
 8001756:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001758:	2302      	movs	r3, #2
 800175a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4618      	mov	r0, r3
 8001762:	f002 fca3 	bl	80040ac <HAL_RCC_OscConfig>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800176c:	f000 f8b4 	bl	80018d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001770:	230f      	movs	r3, #15
 8001772:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001774:	2303      	movs	r3, #3
 8001776:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001784:	463b      	mov	r3, r7
 8001786:	2104      	movs	r1, #4
 8001788:	4618      	mov	r0, r3
 800178a:	f003 f86b 	bl	8004864 <HAL_RCC_ClockConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001794:	f000 f8a0 	bl	80018d8 <Error_Handler>
  }
}
 8001798:	bf00      	nop
 800179a:	3758      	adds	r7, #88	@ 0x58
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
// This callback is called when idle line is detected or buffer is full
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
	//for BLE
    if (huart == &BLE_UART)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a16      	ldr	r2, [pc, #88]	@ (8001808 <HAL_UARTEx_RxEventCallback+0x68>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d125      	bne.n	8001800 <HAL_UARTEx_RxEventCallback+0x60>
    {
        // Copy the data from DMA buffer to message buffer
        memcpy(messageBuffer, rxBuffer, Size);
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	461a      	mov	r2, r3
 80017b8:	4914      	ldr	r1, [pc, #80]	@ (800180c <HAL_UARTEx_RxEventCallback+0x6c>)
 80017ba:	4815      	ldr	r0, [pc, #84]	@ (8001810 <HAL_UARTEx_RxEventCallback+0x70>)
 80017bc:	f00b f9db 	bl	800cb76 <memcpy>

        // Null-terminate the string
        messageBuffer[Size] = '\0';
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	4a13      	ldr	r2, [pc, #76]	@ (8001810 <HAL_UARTEx_RxEventCallback+0x70>)
 80017c4:	2100      	movs	r1, #0
 80017c6:	54d1      	strb	r1, [r2, r3]

        // Set flag for main loop
        messageReady = 1;
 80017c8:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <HAL_UARTEx_RxEventCallback+0x74>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]

        HAL_UART_AbortReceive(huart);  // Stop DMA
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f004 fee8 	bl	80065a4 <HAL_UART_AbortReceive>
        memset(rxBuffer, 0, sizeof(rxBuffer));  // Reset buffer
 80017d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017d8:	2100      	movs	r1, #0
 80017da:	480c      	ldr	r0, [pc, #48]	@ (800180c <HAL_UARTEx_RxEventCallback+0x6c>)
 80017dc:	f00b f93b 	bl	800ca56 <memset>

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 80017e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017e4:	4909      	ldr	r1, [pc, #36]	@ (800180c <HAL_UARTEx_RxEventCallback+0x6c>)
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f006 fc7c 	bl	80080e4 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0204 	bic.w	r2, r2, #4
 80017fe:	601a      	str	r2, [r3, #0]
    }
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200006e4 	.word	0x200006e4
 800180c:	20000924 	.word	0x20000924
 8001810:	2000039c 	.word	0x2000039c
 8001814:	2000049c 	.word	0x2000049c

08001818 <HAL_GPIO_EXTI_Callback>:

//------------------------------------------------------------------------------
// EXTI callback (button presses and sensor interrupts)
//------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	80fb      	strh	r3, [r7, #6]
    uint32_t now = HAL_GetTick();
 8001822:	f000 fd83 	bl	800232c <HAL_GetTick>
 8001826:	60f8      	str	r0, [r7, #12]
    static uint32_t lastBtnTick = 0;

    if (now - lastBtnTick < 50) {
 8001828:	4b26      	ldr	r3, [pc, #152]	@ (80018c4 <HAL_GPIO_EXTI_Callback+0xac>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b31      	cmp	r3, #49	@ 0x31
 8001832:	d943      	bls.n	80018bc <HAL_GPIO_EXTI_Callback+0xa4>
        return;  // debounce
    }
    lastBtnTick = now;
 8001834:	4a23      	ldr	r2, [pc, #140]	@ (80018c4 <HAL_GPIO_EXTI_Callback+0xac>)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6013      	str	r3, [r2, #0]

    if (GPIO_Pin == BUTTON_BACK_Pin) {
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001840:	d118      	bne.n	8001874 <HAL_GPIO_EXTI_Callback+0x5c>
        SmartWatchScreen_State = (SmartWatchScreen_State + NUM_SCREENS - 1) % NUM_SCREENS;
 8001842:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	1d1a      	adds	r2, r3, #4
 800184a:	4b20      	ldr	r3, [pc, #128]	@ (80018cc <HAL_GPIO_EXTI_Callback+0xb4>)
 800184c:	fb83 1302 	smull	r1, r3, r3, r2
 8001850:	1059      	asrs	r1, r3, #1
 8001852:	17d3      	asrs	r3, r2, #31
 8001854:	1ac9      	subs	r1, r1, r3
 8001856:	460b      	mov	r3, r1
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	1ad1      	subs	r1, r2, r3
 800185e:	b2ca      	uxtb	r2, r1
 8001860:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001862:	701a      	strb	r2, [r3, #0]
        SendScreenState(&STLINK_UART, SmartWatchScreen_State);
 8001864:	4b18      	ldr	r3, [pc, #96]	@ (80018c8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	4619      	mov	r1, r3
 800186c:	4818      	ldr	r0, [pc, #96]	@ (80018d0 <HAL_GPIO_EXTI_Callback+0xb8>)
 800186e:	f00a f835 	bl	800b8dc <SendScreenState>
 8001872:	e024      	b.n	80018be <HAL_GPIO_EXTI_Callback+0xa6>
    }
    else if (GPIO_Pin == BUTTON_NEXT_Pin) {
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800187a:	d118      	bne.n	80018ae <HAL_GPIO_EXTI_Callback+0x96>
        SmartWatchScreen_State = (SmartWatchScreen_State + 1) % NUM_SCREENS;
 800187c:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <HAL_GPIO_EXTI_Callback+0xb0>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <HAL_GPIO_EXTI_Callback+0xb4>)
 8001886:	fb83 1302 	smull	r1, r3, r3, r2
 800188a:	1059      	asrs	r1, r3, #1
 800188c:	17d3      	asrs	r3, r2, #31
 800188e:	1ac9      	subs	r1, r1, r3
 8001890:	460b      	mov	r3, r1
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	1ad1      	subs	r1, r2, r3
 8001898:	b2ca      	uxtb	r2, r1
 800189a:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <HAL_GPIO_EXTI_Callback+0xb0>)
 800189c:	701a      	strb	r2, [r3, #0]
        SendScreenState(&STLINK_UART, SmartWatchScreen_State);
 800189e:	4b0a      	ldr	r3, [pc, #40]	@ (80018c8 <HAL_GPIO_EXTI_Callback+0xb0>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	4619      	mov	r1, r3
 80018a6:	480a      	ldr	r0, [pc, #40]	@ (80018d0 <HAL_GPIO_EXTI_Callback+0xb8>)
 80018a8:	f00a f818 	bl	800b8dc <SendScreenState>
 80018ac:	e007      	b.n	80018be <HAL_GPIO_EXTI_Callback+0xa6>
    }
    else if (GPIO_Pin == MAX30102_INT_Pin) {
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d104      	bne.n	80018be <HAL_GPIO_EXTI_Callback+0xa6>
        max30102_on_interrupt(&max30102);
 80018b4:	4807      	ldr	r0, [pc, #28]	@ (80018d4 <HAL_GPIO_EXTI_Callback+0xbc>)
 80018b6:	f009 f845 	bl	800a944 <max30102_on_interrupt>
 80018ba:	e000      	b.n	80018be <HAL_GPIO_EXTI_Callback+0xa6>
        return;  // debounce
 80018bc:	bf00      	nop
    }
}
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200005a8 	.word	0x200005a8
 80018c8:	2000049d 	.word	0x2000049d
 80018cc:	66666667 	.word	0x66666667
 80018d0:	2000065c 	.word	0x2000065c
 80018d4:	200004a0 	.word	0x200004a0

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <Error_Handler+0x8>

080018e4 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <MX_SPI2_Init+0x74>)
 80018ea:	4a1c      	ldr	r2, [pc, #112]	@ (800195c <MX_SPI2_Init+0x78>)
 80018ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <MX_SPI2_Init+0x74>)
 80018f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018f6:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <MX_SPI2_Init+0x74>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018fc:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <MX_SPI2_Init+0x74>)
 80018fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001902:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001904:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <MX_SPI2_Init+0x74>)
 8001906:	2202      	movs	r2, #2
 8001908:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800190a:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <MX_SPI2_Init+0x74>)
 800190c:	2201      	movs	r2, #1
 800190e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <MX_SPI2_Init+0x74>)
 8001912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001916:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001918:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <MX_SPI2_Init+0x74>)
 800191a:	2218      	movs	r2, #24
 800191c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <MX_SPI2_Init+0x74>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001924:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <MX_SPI2_Init+0x74>)
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800192a:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <MX_SPI2_Init+0x74>)
 800192c:	2200      	movs	r2, #0
 800192e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001930:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <MX_SPI2_Init+0x74>)
 8001932:	2207      	movs	r2, #7
 8001934:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001936:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <MX_SPI2_Init+0x74>)
 8001938:	2200      	movs	r2, #0
 800193a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <MX_SPI2_Init+0x74>)
 800193e:	2200      	movs	r2, #0
 8001940:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001942:	4805      	ldr	r0, [pc, #20]	@ (8001958 <MX_SPI2_Init+0x74>)
 8001944:	f003 fe6e 	bl	8005624 <HAL_SPI_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800194e:	f7ff ffc3 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200005ac 	.word	0x200005ac
 800195c:	40003800 	.word	0x40003800

08001960 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	@ 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a30      	ldr	r2, [pc, #192]	@ (8001a40 <HAL_SPI_MspInit+0xe0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d159      	bne.n	8001a36 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001982:	4b30      	ldr	r3, [pc, #192]	@ (8001a44 <HAL_SPI_MspInit+0xe4>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001986:	4a2f      	ldr	r2, [pc, #188]	@ (8001a44 <HAL_SPI_MspInit+0xe4>)
 8001988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800198c:	6593      	str	r3, [r2, #88]	@ 0x58
 800198e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a44 <HAL_SPI_MspInit+0xe4>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a44 <HAL_SPI_MspInit+0xe4>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199e:	4a29      	ldr	r2, [pc, #164]	@ (8001a44 <HAL_SPI_MspInit+0xe4>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a6:	4b27      	ldr	r3, [pc, #156]	@ (8001a44 <HAL_SPI_MspInit+0xe4>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ST7789_SCK_Pin|ST7789_MOSI_Pin;
 80019b2:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80019b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019c4:	2305      	movs	r3, #5
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	481e      	ldr	r0, [pc, #120]	@ (8001a48 <HAL_SPI_MspInit+0xe8>)
 80019d0:	f001 f870 	bl	8002ab4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a4c <HAL_SPI_MspInit+0xec>)
 80019d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a50 <HAL_SPI_MspInit+0xf0>)
 80019d8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80019da:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <HAL_SPI_MspInit+0xec>)
 80019dc:	2201      	movs	r2, #1
 80019de:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a4c <HAL_SPI_MspInit+0xec>)
 80019e2:	2210      	movs	r2, #16
 80019e4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e6:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <HAL_SPI_MspInit+0xec>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019ec:	4b17      	ldr	r3, [pc, #92]	@ (8001a4c <HAL_SPI_MspInit+0xec>)
 80019ee:	2280      	movs	r2, #128	@ 0x80
 80019f0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019f2:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <HAL_SPI_MspInit+0xec>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019f8:	4b14      	ldr	r3, [pc, #80]	@ (8001a4c <HAL_SPI_MspInit+0xec>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80019fe:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <HAL_SPI_MspInit+0xec>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a04:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <HAL_SPI_MspInit+0xec>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001a0a:	4810      	ldr	r0, [pc, #64]	@ (8001a4c <HAL_SPI_MspInit+0xec>)
 8001a0c:	f000 fdd0 	bl	80025b0 <HAL_DMA_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8001a16:	f7ff ff5f 	bl	80018d8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a4c <HAL_SPI_MspInit+0xec>)
 8001a1e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a20:	4a0a      	ldr	r2, [pc, #40]	@ (8001a4c <HAL_SPI_MspInit+0xec>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2024      	movs	r0, #36	@ 0x24
 8001a2c:	f000 fd89 	bl	8002542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001a30:	2024      	movs	r0, #36	@ 0x24
 8001a32:	f000 fda2 	bl	800257a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001a36:	bf00      	nop
 8001a38:	3728      	adds	r7, #40	@ 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40003800 	.word	0x40003800
 8001a44:	40021000 	.word	0x40021000
 8001a48:	48000400 	.word	0x48000400
 8001a4c:	20000610 	.word	0x20000610
 8001a50:	40020058 	.word	0x40020058

08001a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a66:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a76:	4a08      	ldr	r2, [pc, #32]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a7e:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000

08001a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <NMI_Handler+0x4>

08001aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <HardFault_Handler+0x4>

08001aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <MemManage_Handler+0x4>

08001ab4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <BusFault_Handler+0x4>

08001abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <UsageFault_Handler+0x4>

08001ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af2:	f000 fc07 	bl	8002304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}

08001afa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAX30102_INT_Pin);
 8001afe:	2004      	movs	r0, #4
 8001b00:	f001 f99a 	bl	8002e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b0c:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <DMA1_Channel2_IRQHandler+0x10>)
 8001b0e:	f000 fee6 	bl	80028de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200008cc 	.word	0x200008cc

08001b1c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b20:	4802      	ldr	r0, [pc, #8]	@ (8001b2c <DMA1_Channel3_IRQHandler+0x10>)
 8001b22:	f000 fedc 	bl	80028de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000884 	.word	0x20000884

08001b30 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b34:	4802      	ldr	r0, [pc, #8]	@ (8001b40 <DMA1_Channel4_IRQHandler+0x10>)
 8001b36:	f000 fed2 	bl	80028de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000083c 	.word	0x2000083c

08001b44 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001b48:	4802      	ldr	r0, [pc, #8]	@ (8001b54 <DMA1_Channel5_IRQHandler+0x10>)
 8001b4a:	f000 fec8 	bl	80028de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000610 	.word	0x20000610

08001b58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU6500_INT_Pin);
 8001b5c:	2020      	movs	r0, #32
 8001b5e:	f001 f96b 	bl	8002e38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_BACK_Pin);
 8001b62:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001b66:	f001 f967 	bl	8002e38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_NEXT_Pin);
 8001b6a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b6e:	f001 f963 	bl	8002e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001b7c:	4802      	ldr	r0, [pc, #8]	@ (8001b88 <SPI2_IRQHandler+0x10>)
 8001b7e:	f004 f859 	bl	8005c34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200005ac 	.word	0x200005ac

08001b8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b90:	4802      	ldr	r0, [pc, #8]	@ (8001b9c <USART1_IRQHandler+0x10>)
 8001b92:	f004 fdb9 	bl	8006708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200006e4 	.word	0x200006e4

08001ba0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ba4:	4802      	ldr	r0, [pc, #8]	@ (8001bb0 <USART3_IRQHandler+0x10>)
 8001ba6:	f004 fdaf 	bl	8006708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2000076c 	.word	0x2000076c

08001bb4 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001bb8:	4802      	ldr	r0, [pc, #8]	@ (8001bc4 <DMA2_Channel7_IRQHandler+0x10>)
 8001bba:	f000 fe90 	bl	80028de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200007f4 	.word	0x200007f4

08001bc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return 1;
 8001bcc:	2301      	movs	r3, #1
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <_kill>:

int _kill(int pid, int sig)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001be2:	f00a ff9b 	bl	800cb1c <__errno>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2216      	movs	r2, #22
 8001bea:	601a      	str	r2, [r3, #0]
  return -1;
 8001bec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <_exit>:

void _exit (int status)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ffe7 	bl	8001bd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c0a:	bf00      	nop
 8001c0c:	e7fd      	b.n	8001c0a <_exit+0x12>

08001c0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e00a      	b.n	8001c36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c20:	f3af 8000 	nop.w
 8001c24:	4601      	mov	r1, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	60ba      	str	r2, [r7, #8]
 8001c2c:	b2ca      	uxtb	r2, r1
 8001c2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3301      	adds	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	dbf0      	blt.n	8001c20 <_read+0x12>
  }

  return len;
 8001c3e:	687b      	ldr	r3, [r7, #4]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e009      	b.n	8001c6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	60ba      	str	r2, [r7, #8]
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fd08 	bl	8001678 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	dbf1      	blt.n	8001c5a <_write+0x12>
  }
  return len;
 8001c76:	687b      	ldr	r3, [r7, #4]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <_close>:

int _close(int file)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ca8:	605a      	str	r2, [r3, #4]
  return 0;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <_isatty>:

int _isatty(int file)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cc0:	2301      	movs	r3, #1
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf0:	4a14      	ldr	r2, [pc, #80]	@ (8001d44 <_sbrk+0x5c>)
 8001cf2:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <_sbrk+0x60>)
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cfc:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <_sbrk+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d04:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <_sbrk+0x64>)
 8001d06:	4a12      	ldr	r2, [pc, #72]	@ (8001d50 <_sbrk+0x68>)
 8001d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0a:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d207      	bcs.n	8001d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d18:	f00a ff00 	bl	800cb1c <__errno>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	220c      	movs	r2, #12
 8001d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
 8001d26:	e009      	b.n	8001d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d28:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d2e:	4b07      	ldr	r3, [pc, #28]	@ (8001d4c <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	4a05      	ldr	r2, [pc, #20]	@ (8001d4c <_sbrk+0x64>)
 8001d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20018000 	.word	0x20018000
 8001d48:	00000400 	.word	0x00000400
 8001d4c:	20000658 	.word	0x20000658
 8001d50:	20001b18 	.word	0x20001b18

08001d54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d58:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <SystemInit+0x20>)
 8001d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d5e:	4a05      	ldr	r2, [pc, #20]	@ (8001d74 <SystemInit+0x20>)
 8001d60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d7c:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <MX_UART4_Init+0x58>)
 8001d7e:	4a15      	ldr	r2, [pc, #84]	@ (8001dd4 <MX_UART4_Init+0x5c>)
 8001d80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d82:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <MX_UART4_Init+0x58>)
 8001d84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d88:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <MX_UART4_Init+0x58>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <MX_UART4_Init+0x58>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d96:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <MX_UART4_Init+0x58>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <MX_UART4_Init+0x58>)
 8001d9e:	220c      	movs	r2, #12
 8001da0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <MX_UART4_Init+0x58>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da8:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <MX_UART4_Init+0x58>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dae:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <MX_UART4_Init+0x58>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <MX_UART4_Init+0x58>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dba:	4805      	ldr	r0, [pc, #20]	@ (8001dd0 <MX_UART4_Init+0x58>)
 8001dbc:	f004 fa52 	bl	8006264 <HAL_UART_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001dc6:	f7ff fd87 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000065c 	.word	0x2000065c
 8001dd4:	40004c00 	.word	0x40004c00

08001dd8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ddc:	4b16      	ldr	r3, [pc, #88]	@ (8001e38 <MX_USART1_UART_Init+0x60>)
 8001dde:	4a17      	ldr	r2, [pc, #92]	@ (8001e3c <MX_USART1_UART_Init+0x64>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001de2:	4b15      	ldr	r3, [pc, #84]	@ (8001e38 <MX_USART1_UART_Init+0x60>)
 8001de4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001de8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b13      	ldr	r3, [pc, #76]	@ (8001e38 <MX_USART1_UART_Init+0x60>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <MX_USART1_UART_Init+0x60>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <MX_USART1_UART_Init+0x60>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <MX_USART1_UART_Init+0x60>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b0d      	ldr	r3, [pc, #52]	@ (8001e38 <MX_USART1_UART_Init+0x60>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <MX_USART1_UART_Init+0x60>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e38 <MX_USART1_UART_Init+0x60>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001e14:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <MX_USART1_UART_Init+0x60>)
 8001e16:	2208      	movs	r2, #8
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <MX_USART1_UART_Init+0x60>)
 8001e1c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e20:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e22:	4805      	ldr	r0, [pc, #20]	@ (8001e38 <MX_USART1_UART_Init+0x60>)
 8001e24:	f004 fa1e 	bl	8006264 <HAL_UART_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001e2e:	f7ff fd53 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200006e4 	.word	0x200006e4
 8001e3c:	40013800 	.word	0x40013800

08001e40 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e44:	4b16      	ldr	r3, [pc, #88]	@ (8001ea0 <MX_USART3_UART_Init+0x60>)
 8001e46:	4a17      	ldr	r2, [pc, #92]	@ (8001ea4 <MX_USART3_UART_Init+0x64>)
 8001e48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <MX_USART3_UART_Init+0x60>)
 8001e4c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e52:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <MX_USART3_UART_Init+0x60>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e58:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <MX_USART3_UART_Init+0x60>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <MX_USART3_UART_Init+0x60>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea0 <MX_USART3_UART_Init+0x60>)
 8001e66:	220c      	movs	r2, #12
 8001e68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <MX_USART3_UART_Init+0x60>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea0 <MX_USART3_UART_Init+0x60>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <MX_USART3_UART_Init+0x60>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001e7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <MX_USART3_UART_Init+0x60>)
 8001e7e:	2208      	movs	r2, #8
 8001e80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001e82:	4b07      	ldr	r3, [pc, #28]	@ (8001ea0 <MX_USART3_UART_Init+0x60>)
 8001e84:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e88:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e8a:	4805      	ldr	r0, [pc, #20]	@ (8001ea0 <MX_USART3_UART_Init+0x60>)
 8001e8c:	f004 f9ea 	bl	8006264 <HAL_UART_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8001e96:	f7ff fd1f 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000076c 	.word	0x2000076c
 8001ea4:	40004800 	.word	0x40004800

08001ea8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b0b0      	sub	sp, #192	@ 0xc0
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ec4:	2288      	movs	r2, #136	@ 0x88
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f00a fdc4 	bl	800ca56 <memset>
  if(uartHandle->Instance==UART4)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6f      	ldr	r2, [pc, #444]	@ (8002090 <HAL_UART_MspInit+0x1e8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d13c      	bne.n	8001f52 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 fee1 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ef0:	f7ff fcf2 	bl	80018d8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ef4:	4b67      	ldr	r3, [pc, #412]	@ (8002094 <HAL_UART_MspInit+0x1ec>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef8:	4a66      	ldr	r2, [pc, #408]	@ (8002094 <HAL_UART_MspInit+0x1ec>)
 8001efa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001efe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f00:	4b64      	ldr	r3, [pc, #400]	@ (8002094 <HAL_UART_MspInit+0x1ec>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f08:	623b      	str	r3, [r7, #32]
 8001f0a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0c:	4b61      	ldr	r3, [pc, #388]	@ (8002094 <HAL_UART_MspInit+0x1ec>)
 8001f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f10:	4a60      	ldr	r2, [pc, #384]	@ (8002094 <HAL_UART_MspInit+0x1ec>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f18:	4b5e      	ldr	r3, [pc, #376]	@ (8002094 <HAL_UART_MspInit+0x1ec>)
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001f24:	2303      	movs	r3, #3
 8001f26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f36:	2303      	movs	r3, #3
 8001f38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f46:	4619      	mov	r1, r3
 8001f48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f4c:	f000 fdb2 	bl	8002ab4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f50:	e147      	b.n	80021e2 <HAL_UART_MspInit+0x33a>
  else if(uartHandle->Instance==USART1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a50      	ldr	r2, [pc, #320]	@ (8002098 <HAL_UART_MspInit+0x1f0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	f040 80a7 	bne.w	80020ac <HAL_UART_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f62:	2300      	movs	r3, #0
 8001f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f002 fe9e 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001f76:	f7ff fcaf 	bl	80018d8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f7a:	4b46      	ldr	r3, [pc, #280]	@ (8002094 <HAL_UART_MspInit+0x1ec>)
 8001f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f7e:	4a45      	ldr	r2, [pc, #276]	@ (8002094 <HAL_UART_MspInit+0x1ec>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f84:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f86:	4b43      	ldr	r3, [pc, #268]	@ (8002094 <HAL_UART_MspInit+0x1ec>)
 8001f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f8e:	61bb      	str	r3, [r7, #24]
 8001f90:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	4b40      	ldr	r3, [pc, #256]	@ (8002094 <HAL_UART_MspInit+0x1ec>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f96:	4a3f      	ldr	r2, [pc, #252]	@ (8002094 <HAL_UART_MspInit+0x1ec>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002094 <HAL_UART_MspInit+0x1ec>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BLE_TX_Pin|BLE_RX_Pin;
 8001faa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fc4:	2307      	movs	r3, #7
 8001fc6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fca:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fd4:	f000 fd6e 	bl	8002ab4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Channel7;
 8001fd8:	4b30      	ldr	r3, [pc, #192]	@ (800209c <HAL_UART_MspInit+0x1f4>)
 8001fda:	4a31      	ldr	r2, [pc, #196]	@ (80020a0 <HAL_UART_MspInit+0x1f8>)
 8001fdc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001fde:	4b2f      	ldr	r3, [pc, #188]	@ (800209c <HAL_UART_MspInit+0x1f4>)
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800209c <HAL_UART_MspInit+0x1f4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fea:	4b2c      	ldr	r3, [pc, #176]	@ (800209c <HAL_UART_MspInit+0x1f4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800209c <HAL_UART_MspInit+0x1f4>)
 8001ff2:	2280      	movs	r2, #128	@ 0x80
 8001ff4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ff6:	4b29      	ldr	r3, [pc, #164]	@ (800209c <HAL_UART_MspInit+0x1f4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ffc:	4b27      	ldr	r3, [pc, #156]	@ (800209c <HAL_UART_MspInit+0x1f4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002002:	4b26      	ldr	r3, [pc, #152]	@ (800209c <HAL_UART_MspInit+0x1f4>)
 8002004:	2220      	movs	r2, #32
 8002006:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002008:	4b24      	ldr	r3, [pc, #144]	@ (800209c <HAL_UART_MspInit+0x1f4>)
 800200a:	2200      	movs	r2, #0
 800200c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800200e:	4823      	ldr	r0, [pc, #140]	@ (800209c <HAL_UART_MspInit+0x1f4>)
 8002010:	f000 face 	bl	80025b0 <HAL_DMA_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_UART_MspInit+0x176>
      Error_Handler();
 800201a:	f7ff fc5d 	bl	80018d8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a1e      	ldr	r2, [pc, #120]	@ (800209c <HAL_UART_MspInit+0x1f4>)
 8002022:	675a      	str	r2, [r3, #116]	@ 0x74
 8002024:	4a1d      	ldr	r2, [pc, #116]	@ (800209c <HAL_UART_MspInit+0x1f4>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800202a:	4b1e      	ldr	r3, [pc, #120]	@ (80020a4 <HAL_UART_MspInit+0x1fc>)
 800202c:	4a1e      	ldr	r2, [pc, #120]	@ (80020a8 <HAL_UART_MspInit+0x200>)
 800202e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8002030:	4b1c      	ldr	r3, [pc, #112]	@ (80020a4 <HAL_UART_MspInit+0x1fc>)
 8002032:	2202      	movs	r2, #2
 8002034:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002036:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <HAL_UART_MspInit+0x1fc>)
 8002038:	2210      	movs	r2, #16
 800203a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800203c:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <HAL_UART_MspInit+0x1fc>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002042:	4b18      	ldr	r3, [pc, #96]	@ (80020a4 <HAL_UART_MspInit+0x1fc>)
 8002044:	2280      	movs	r2, #128	@ 0x80
 8002046:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002048:	4b16      	ldr	r3, [pc, #88]	@ (80020a4 <HAL_UART_MspInit+0x1fc>)
 800204a:	2200      	movs	r2, #0
 800204c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800204e:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <HAL_UART_MspInit+0x1fc>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002054:	4b13      	ldr	r3, [pc, #76]	@ (80020a4 <HAL_UART_MspInit+0x1fc>)
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800205a:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <HAL_UART_MspInit+0x1fc>)
 800205c:	2200      	movs	r2, #0
 800205e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002060:	4810      	ldr	r0, [pc, #64]	@ (80020a4 <HAL_UART_MspInit+0x1fc>)
 8002062:	f000 faa5 	bl	80025b0 <HAL_DMA_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_UART_MspInit+0x1c8>
      Error_Handler();
 800206c:	f7ff fc34 	bl	80018d8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a0c      	ldr	r2, [pc, #48]	@ (80020a4 <HAL_UART_MspInit+0x1fc>)
 8002074:	671a      	str	r2, [r3, #112]	@ 0x70
 8002076:	4a0b      	ldr	r2, [pc, #44]	@ (80020a4 <HAL_UART_MspInit+0x1fc>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800207c:	2200      	movs	r2, #0
 800207e:	2100      	movs	r1, #0
 8002080:	2025      	movs	r0, #37	@ 0x25
 8002082:	f000 fa5e 	bl	8002542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002086:	2025      	movs	r0, #37	@ 0x25
 8002088:	f000 fa77 	bl	800257a <HAL_NVIC_EnableIRQ>
}
 800208c:	e0a9      	b.n	80021e2 <HAL_UART_MspInit+0x33a>
 800208e:	bf00      	nop
 8002090:	40004c00 	.word	0x40004c00
 8002094:	40021000 	.word	0x40021000
 8002098:	40013800 	.word	0x40013800
 800209c:	200007f4 	.word	0x200007f4
 80020a0:	40020480 	.word	0x40020480
 80020a4:	2000083c 	.word	0x2000083c
 80020a8:	40020044 	.word	0x40020044
  else if(uartHandle->Instance==USART3)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a4e      	ldr	r2, [pc, #312]	@ (80021ec <HAL_UART_MspInit+0x344>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	f040 8095 	bne.w	80021e2 <HAL_UART_MspInit+0x33a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020b8:	2304      	movs	r3, #4
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020bc:	2300      	movs	r3, #0
 80020be:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020c4:	4618      	mov	r0, r3
 80020c6:	f002 fdf1 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 80020d0:	f7ff fc02 	bl	80018d8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020d4:	4b46      	ldr	r3, [pc, #280]	@ (80021f0 <HAL_UART_MspInit+0x348>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d8:	4a45      	ldr	r2, [pc, #276]	@ (80021f0 <HAL_UART_MspInit+0x348>)
 80020da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020de:	6593      	str	r3, [r2, #88]	@ 0x58
 80020e0:	4b43      	ldr	r3, [pc, #268]	@ (80021f0 <HAL_UART_MspInit+0x348>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ec:	4b40      	ldr	r3, [pc, #256]	@ (80021f0 <HAL_UART_MspInit+0x348>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f0:	4a3f      	ldr	r2, [pc, #252]	@ (80021f0 <HAL_UART_MspInit+0x348>)
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020f8:	4b3d      	ldr	r3, [pc, #244]	@ (80021f0 <HAL_UART_MspInit+0x348>)
 80020fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8002104:	2330      	movs	r3, #48	@ 0x30
 8002106:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800211c:	2307      	movs	r3, #7
 800211e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002122:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002126:	4619      	mov	r1, r3
 8002128:	4832      	ldr	r0, [pc, #200]	@ (80021f4 <HAL_UART_MspInit+0x34c>)
 800212a:	f000 fcc3 	bl	8002ab4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800212e:	4b32      	ldr	r3, [pc, #200]	@ (80021f8 <HAL_UART_MspInit+0x350>)
 8002130:	4a32      	ldr	r2, [pc, #200]	@ (80021fc <HAL_UART_MspInit+0x354>)
 8002132:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 8002134:	4b30      	ldr	r3, [pc, #192]	@ (80021f8 <HAL_UART_MspInit+0x350>)
 8002136:	2202      	movs	r2, #2
 8002138:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800213a:	4b2f      	ldr	r3, [pc, #188]	@ (80021f8 <HAL_UART_MspInit+0x350>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002140:	4b2d      	ldr	r3, [pc, #180]	@ (80021f8 <HAL_UART_MspInit+0x350>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002146:	4b2c      	ldr	r3, [pc, #176]	@ (80021f8 <HAL_UART_MspInit+0x350>)
 8002148:	2280      	movs	r2, #128	@ 0x80
 800214a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800214c:	4b2a      	ldr	r3, [pc, #168]	@ (80021f8 <HAL_UART_MspInit+0x350>)
 800214e:	2200      	movs	r2, #0
 8002150:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002152:	4b29      	ldr	r3, [pc, #164]	@ (80021f8 <HAL_UART_MspInit+0x350>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002158:	4b27      	ldr	r3, [pc, #156]	@ (80021f8 <HAL_UART_MspInit+0x350>)
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800215e:	4b26      	ldr	r3, [pc, #152]	@ (80021f8 <HAL_UART_MspInit+0x350>)
 8002160:	2200      	movs	r2, #0
 8002162:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002164:	4824      	ldr	r0, [pc, #144]	@ (80021f8 <HAL_UART_MspInit+0x350>)
 8002166:	f000 fa23 	bl	80025b0 <HAL_DMA_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_UART_MspInit+0x2cc>
      Error_Handler();
 8002170:	f7ff fbb2 	bl	80018d8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a20      	ldr	r2, [pc, #128]	@ (80021f8 <HAL_UART_MspInit+0x350>)
 8002178:	675a      	str	r2, [r3, #116]	@ 0x74
 800217a:	4a1f      	ldr	r2, [pc, #124]	@ (80021f8 <HAL_UART_MspInit+0x350>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002180:	4b1f      	ldr	r3, [pc, #124]	@ (8002200 <HAL_UART_MspInit+0x358>)
 8002182:	4a20      	ldr	r2, [pc, #128]	@ (8002204 <HAL_UART_MspInit+0x35c>)
 8002184:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 8002186:	4b1e      	ldr	r3, [pc, #120]	@ (8002200 <HAL_UART_MspInit+0x358>)
 8002188:	2202      	movs	r2, #2
 800218a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800218c:	4b1c      	ldr	r3, [pc, #112]	@ (8002200 <HAL_UART_MspInit+0x358>)
 800218e:	2210      	movs	r2, #16
 8002190:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002192:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <HAL_UART_MspInit+0x358>)
 8002194:	2200      	movs	r2, #0
 8002196:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002198:	4b19      	ldr	r3, [pc, #100]	@ (8002200 <HAL_UART_MspInit+0x358>)
 800219a:	2280      	movs	r2, #128	@ 0x80
 800219c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800219e:	4b18      	ldr	r3, [pc, #96]	@ (8002200 <HAL_UART_MspInit+0x358>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a4:	4b16      	ldr	r3, [pc, #88]	@ (8002200 <HAL_UART_MspInit+0x358>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80021aa:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <HAL_UART_MspInit+0x358>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021b0:	4b13      	ldr	r3, [pc, #76]	@ (8002200 <HAL_UART_MspInit+0x358>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80021b6:	4812      	ldr	r0, [pc, #72]	@ (8002200 <HAL_UART_MspInit+0x358>)
 80021b8:	f000 f9fa 	bl	80025b0 <HAL_DMA_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_UART_MspInit+0x31e>
      Error_Handler();
 80021c2:	f7ff fb89 	bl	80018d8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002200 <HAL_UART_MspInit+0x358>)
 80021ca:	671a      	str	r2, [r3, #112]	@ 0x70
 80021cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002200 <HAL_UART_MspInit+0x358>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	2027      	movs	r0, #39	@ 0x27
 80021d8:	f000 f9b3 	bl	8002542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021dc:	2027      	movs	r0, #39	@ 0x27
 80021de:	f000 f9cc 	bl	800257a <HAL_NVIC_EnableIRQ>
}
 80021e2:	bf00      	nop
 80021e4:	37c0      	adds	r7, #192	@ 0xc0
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40004800 	.word	0x40004800
 80021f0:	40021000 	.word	0x40021000
 80021f4:	48000800 	.word	0x48000800
 80021f8:	20000884 	.word	0x20000884
 80021fc:	40020030 	.word	0x40020030
 8002200:	200008cc 	.word	0x200008cc
 8002204:	4002001c 	.word	0x4002001c

08002208 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002208:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002240 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800220c:	f7ff fda2 	bl	8001d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002210:	480c      	ldr	r0, [pc, #48]	@ (8002244 <LoopForever+0x6>)
  ldr r1, =_edata
 8002212:	490d      	ldr	r1, [pc, #52]	@ (8002248 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002214:	4a0d      	ldr	r2, [pc, #52]	@ (800224c <LoopForever+0xe>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002218:	e002      	b.n	8002220 <LoopCopyDataInit>

0800221a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800221c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221e:	3304      	adds	r3, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002224:	d3f9      	bcc.n	800221a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002226:	4a0a      	ldr	r2, [pc, #40]	@ (8002250 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002228:	4c0a      	ldr	r4, [pc, #40]	@ (8002254 <LoopForever+0x16>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800222c:	e001      	b.n	8002232 <LoopFillZerobss>

0800222e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002230:	3204      	adds	r2, #4

08002232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002234:	d3fb      	bcc.n	800222e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002236:	f00a fc77 	bl	800cb28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800223a:	f7ff fa2f 	bl	800169c <main>

0800223e <LoopForever>:

LoopForever:
    b LoopForever
 800223e:	e7fe      	b.n	800223e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002240:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002248:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800224c:	080108c4 	.word	0x080108c4
  ldr r2, =_sbss
 8002250:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002254:	20001b18 	.word	0x20001b18

08002258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <ADC1_2_IRQHandler>

0800225a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002264:	2003      	movs	r0, #3
 8002266:	f000 f961 	bl	800252c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800226a:	200f      	movs	r0, #15
 800226c:	f000 f80e 	bl	800228c <HAL_InitTick>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	71fb      	strb	r3, [r7, #7]
 800227a:	e001      	b.n	8002280 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800227c:	f7ff fbea 	bl	8001a54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002280:	79fb      	ldrb	r3, [r7, #7]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002298:	4b17      	ldr	r3, [pc, #92]	@ (80022f8 <HAL_InitTick+0x6c>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d023      	beq.n	80022e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022a0:	4b16      	ldr	r3, [pc, #88]	@ (80022fc <HAL_InitTick+0x70>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b14      	ldr	r3, [pc, #80]	@ (80022f8 <HAL_InitTick+0x6c>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
 80022aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80022b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 f96d 	bl	8002596 <HAL_SYSTICK_Config>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10f      	bne.n	80022e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b0f      	cmp	r3, #15
 80022c6:	d809      	bhi.n	80022dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c8:	2200      	movs	r2, #0
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295
 80022d0:	f000 f937 	bl	8002542 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002300 <HAL_InitTick+0x74>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e007      	b.n	80022ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	e004      	b.n	80022ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	73fb      	strb	r3, [r7, #15]
 80022e6:	e001      	b.n	80022ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000008 	.word	0x20000008
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000004 	.word	0x20000004

08002304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002308:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_IncTick+0x20>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <HAL_IncTick+0x24>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4413      	add	r3, r2
 8002314:	4a04      	ldr	r2, [pc, #16]	@ (8002328 <HAL_IncTick+0x24>)
 8002316:	6013      	str	r3, [r2, #0]
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000008 	.word	0x20000008
 8002328:	20000914 	.word	0x20000914

0800232c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return uwTick;
 8002330:	4b03      	ldr	r3, [pc, #12]	@ (8002340 <HAL_GetTick+0x14>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000914 	.word	0x20000914

08002344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800234c:	f7ff ffee 	bl	800232c <HAL_GetTick>
 8002350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	d005      	beq.n	800236a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800235e:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <HAL_Delay+0x44>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4413      	add	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800236a:	bf00      	nop
 800236c:	f7ff ffde 	bl	800232c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	429a      	cmp	r2, r3
 800237a:	d8f7      	bhi.n	800236c <HAL_Delay+0x28>
  {
  }
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000008 	.word	0x20000008

0800238c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800239c:	4b0c      	ldr	r3, [pc, #48]	@ (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023a8:	4013      	ands	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023be:	4a04      	ldr	r2, [pc, #16]	@ (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	60d3      	str	r3, [r2, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d8:	4b04      	ldr	r3, [pc, #16]	@ (80023ec <__NVIC_GetPriorityGrouping+0x18>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	f003 0307 	and.w	r3, r3, #7
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db0b      	blt.n	800241a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	4907      	ldr	r1, [pc, #28]	@ (8002428 <__NVIC_EnableIRQ+0x38>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2001      	movs	r0, #1
 8002412:	fa00 f202 	lsl.w	r2, r0, r2
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000e100 	.word	0xe000e100

0800242c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	2b00      	cmp	r3, #0
 800243e:	db0a      	blt.n	8002456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	490c      	ldr	r1, [pc, #48]	@ (8002478 <__NVIC_SetPriority+0x4c>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	0112      	lsls	r2, r2, #4
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	440b      	add	r3, r1
 8002450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002454:	e00a      	b.n	800246c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4908      	ldr	r1, [pc, #32]	@ (800247c <__NVIC_SetPriority+0x50>)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	3b04      	subs	r3, #4
 8002464:	0112      	lsls	r2, r2, #4
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	440b      	add	r3, r1
 800246a:	761a      	strb	r2, [r3, #24]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000e100 	.word	0xe000e100
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	@ 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f1c3 0307 	rsb	r3, r3, #7
 800249a:	2b04      	cmp	r3, #4
 800249c:	bf28      	it	cs
 800249e:	2304      	movcs	r3, #4
 80024a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d902      	bls.n	80024b0 <NVIC_EncodePriority+0x30>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3b03      	subs	r3, #3
 80024ae:	e000      	b.n	80024b2 <NVIC_EncodePriority+0x32>
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43da      	mvns	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	401a      	ands	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c8:	f04f 31ff 	mov.w	r1, #4294967295
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	43d9      	mvns	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	4313      	orrs	r3, r2
         );
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3724      	adds	r7, #36	@ 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024f8:	d301      	bcc.n	80024fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fa:	2301      	movs	r3, #1
 80024fc:	e00f      	b.n	800251e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002528 <SysTick_Config+0x40>)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002506:	210f      	movs	r1, #15
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	f7ff ff8e 	bl	800242c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002510:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <SysTick_Config+0x40>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002516:	4b04      	ldr	r3, [pc, #16]	@ (8002528 <SysTick_Config+0x40>)
 8002518:	2207      	movs	r2, #7
 800251a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	e000e010 	.word	0xe000e010

0800252c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff29 	bl	800238c <__NVIC_SetPriorityGrouping>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	4603      	mov	r3, r0
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002554:	f7ff ff3e 	bl	80023d4 <__NVIC_GetPriorityGrouping>
 8002558:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	6978      	ldr	r0, [r7, #20]
 8002560:	f7ff ff8e 	bl	8002480 <NVIC_EncodePriority>
 8002564:	4602      	mov	r2, r0
 8002566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff5d 	bl	800242c <__NVIC_SetPriority>
}
 8002572:	bf00      	nop
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff31 	bl	80023f0 <__NVIC_EnableIRQ>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff ffa2 	bl	80024e8 <SysTick_Config>
 80025a4:	4603      	mov	r3, r0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e098      	b.n	80026f4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002700 <HAL_DMA_Init+0x150>)
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d80f      	bhi.n	80025ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002704 <HAL_DMA_Init+0x154>)
 80025d6:	4413      	add	r3, r2
 80025d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002708 <HAL_DMA_Init+0x158>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	009a      	lsls	r2, r3, #2
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a48      	ldr	r2, [pc, #288]	@ (800270c <HAL_DMA_Init+0x15c>)
 80025ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80025ec:	e00e      	b.n	800260c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b46      	ldr	r3, [pc, #280]	@ (8002710 <HAL_DMA_Init+0x160>)
 80025f6:	4413      	add	r3, r2
 80025f8:	4a43      	ldr	r2, [pc, #268]	@ (8002708 <HAL_DMA_Init+0x158>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	009a      	lsls	r2, r3, #2
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a42      	ldr	r2, [pc, #264]	@ (8002714 <HAL_DMA_Init+0x164>)
 800260a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002626:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002630:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002648:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002666:	d039      	beq.n	80026dc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	4a27      	ldr	r2, [pc, #156]	@ (800270c <HAL_DMA_Init+0x15c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d11a      	bne.n	80026a8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002672:	4b29      	ldr	r3, [pc, #164]	@ (8002718 <HAL_DMA_Init+0x168>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267a:	f003 031c 	and.w	r3, r3, #28
 800267e:	210f      	movs	r1, #15
 8002680:	fa01 f303 	lsl.w	r3, r1, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	4924      	ldr	r1, [pc, #144]	@ (8002718 <HAL_DMA_Init+0x168>)
 8002688:	4013      	ands	r3, r2
 800268a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800268c:	4b22      	ldr	r3, [pc, #136]	@ (8002718 <HAL_DMA_Init+0x168>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6859      	ldr	r1, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002698:	f003 031c 	and.w	r3, r3, #28
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	491d      	ldr	r1, [pc, #116]	@ (8002718 <HAL_DMA_Init+0x168>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]
 80026a6:	e019      	b.n	80026dc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026a8:	4b1c      	ldr	r3, [pc, #112]	@ (800271c <HAL_DMA_Init+0x16c>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b0:	f003 031c 	and.w	r3, r3, #28
 80026b4:	210f      	movs	r1, #15
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	4917      	ldr	r1, [pc, #92]	@ (800271c <HAL_DMA_Init+0x16c>)
 80026be:	4013      	ands	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026c2:	4b16      	ldr	r3, [pc, #88]	@ (800271c <HAL_DMA_Init+0x16c>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6859      	ldr	r1, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	f003 031c 	and.w	r3, r3, #28
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	4911      	ldr	r1, [pc, #68]	@ (800271c <HAL_DMA_Init+0x16c>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	40020407 	.word	0x40020407
 8002704:	bffdfff8 	.word	0xbffdfff8
 8002708:	cccccccd 	.word	0xcccccccd
 800270c:	40020000 	.word	0x40020000
 8002710:	bffdfbf8 	.word	0xbffdfbf8
 8002714:	40020400 	.word	0x40020400
 8002718:	400200a8 	.word	0x400200a8
 800271c:	400204a8 	.word	0x400204a8

08002720 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_DMA_Start_IT+0x20>
 800273c:	2302      	movs	r3, #2
 800273e:	e04b      	b.n	80027d8 <HAL_DMA_Start_IT+0xb8>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d13a      	bne.n	80027ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0201 	bic.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f96b 	bl	8002a54 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 020e 	orr.w	r2, r2, #14
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	e00f      	b.n	80027b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0204 	bic.w	r2, r2, #4
 80027a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 020a 	orr.w	r2, r2, #10
 80027b6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	e005      	b.n	80027d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80027d2:	2302      	movs	r3, #2
 80027d4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d008      	beq.n	800280a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2204      	movs	r2, #4
 80027fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e022      	b.n	8002850 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 020e 	bic.w	r2, r2, #14
 8002818:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0201 	bic.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282e:	f003 021c 	and.w	r2, r3, #28
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f202 	lsl.w	r2, r1, r2
 800283c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800284e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d005      	beq.n	8002880 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2204      	movs	r2, #4
 8002878:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
 800287e:	e029      	b.n	80028d4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 020e 	bic.w	r2, r2, #14
 800288e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0201 	bic.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a4:	f003 021c 	and.w	r2, r3, #28
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	2101      	movs	r1, #1
 80028ae:	fa01 f202 	lsl.w	r2, r1, r2
 80028b2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	4798      	blx	r3
    }
  }
  return status;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	f003 031c 	and.w	r3, r3, #28
 80028fe:	2204      	movs	r2, #4
 8002900:	409a      	lsls	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d026      	beq.n	8002958 <HAL_DMA_IRQHandler+0x7a>
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d021      	beq.n	8002958 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	2b00      	cmp	r3, #0
 8002920:	d107      	bne.n	8002932 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0204 	bic.w	r2, r2, #4
 8002930:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002936:	f003 021c 	and.w	r2, r3, #28
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	2104      	movs	r1, #4
 8002940:	fa01 f202 	lsl.w	r2, r1, r2
 8002944:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	2b00      	cmp	r3, #0
 800294c:	d071      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002956:	e06c      	b.n	8002a32 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295c:	f003 031c 	and.w	r3, r3, #28
 8002960:	2202      	movs	r2, #2
 8002962:	409a      	lsls	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4013      	ands	r3, r2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d02e      	beq.n	80029ca <HAL_DMA_IRQHandler+0xec>
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d029      	beq.n	80029ca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10b      	bne.n	800299c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 020a 	bic.w	r2, r2, #10
 8002992:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a0:	f003 021c 	and.w	r2, r3, #28
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	2102      	movs	r1, #2
 80029aa:	fa01 f202 	lsl.w	r2, r1, r2
 80029ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d038      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80029c8:	e033      	b.n	8002a32 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ce:	f003 031c 	and.w	r3, r3, #28
 80029d2:	2208      	movs	r2, #8
 80029d4:	409a      	lsls	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d02a      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x156>
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d025      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 020e 	bic.w	r2, r2, #14
 80029f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fc:	f003 021c 	and.w	r2, r3, #28
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	2101      	movs	r1, #1
 8002a06:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d004      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a32:	bf00      	nop
 8002a34:	bf00      	nop
}
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a66:	f003 021c 	and.w	r2, r3, #28
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	2101      	movs	r1, #1
 8002a70:	fa01 f202 	lsl.w	r2, r1, r2
 8002a74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b10      	cmp	r3, #16
 8002a84:	d108      	bne.n	8002a98 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a96:	e007      	b.n	8002aa8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	60da      	str	r2, [r3, #12]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac2:	e17f      	b.n	8002dc4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2101      	movs	r1, #1
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8171 	beq.w	8002dbe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d005      	beq.n	8002af4 <HAL_GPIO_Init+0x40>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d130      	bne.n	8002b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	f003 0201 	and.w	r2, r3, #1
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d118      	bne.n	8002b94 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b68:	2201      	movs	r2, #1
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	08db      	lsrs	r3, r3, #3
 8002b7e:	f003 0201 	and.w	r2, r3, #1
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d017      	beq.n	8002bd0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	2203      	movs	r2, #3
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d123      	bne.n	8002c24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	08da      	lsrs	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3208      	adds	r2, #8
 8002be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	220f      	movs	r2, #15
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	08da      	lsrs	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3208      	adds	r2, #8
 8002c1e:	6939      	ldr	r1, [r7, #16]
 8002c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	2203      	movs	r2, #3
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0203 	and.w	r2, r3, #3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80ac 	beq.w	8002dbe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c66:	4b5f      	ldr	r3, [pc, #380]	@ (8002de4 <HAL_GPIO_Init+0x330>)
 8002c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c6a:	4a5e      	ldr	r2, [pc, #376]	@ (8002de4 <HAL_GPIO_Init+0x330>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c72:	4b5c      	ldr	r3, [pc, #368]	@ (8002de4 <HAL_GPIO_Init+0x330>)
 8002c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c7e:	4a5a      	ldr	r2, [pc, #360]	@ (8002de8 <HAL_GPIO_Init+0x334>)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3302      	adds	r3, #2
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ca8:	d025      	beq.n	8002cf6 <HAL_GPIO_Init+0x242>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4f      	ldr	r2, [pc, #316]	@ (8002dec <HAL_GPIO_Init+0x338>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01f      	beq.n	8002cf2 <HAL_GPIO_Init+0x23e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4e      	ldr	r2, [pc, #312]	@ (8002df0 <HAL_GPIO_Init+0x33c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d019      	beq.n	8002cee <HAL_GPIO_Init+0x23a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4d      	ldr	r2, [pc, #308]	@ (8002df4 <HAL_GPIO_Init+0x340>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d013      	beq.n	8002cea <HAL_GPIO_Init+0x236>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4c      	ldr	r2, [pc, #304]	@ (8002df8 <HAL_GPIO_Init+0x344>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00d      	beq.n	8002ce6 <HAL_GPIO_Init+0x232>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4b      	ldr	r2, [pc, #300]	@ (8002dfc <HAL_GPIO_Init+0x348>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d007      	beq.n	8002ce2 <HAL_GPIO_Init+0x22e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4a      	ldr	r2, [pc, #296]	@ (8002e00 <HAL_GPIO_Init+0x34c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_GPIO_Init+0x22a>
 8002cda:	2306      	movs	r3, #6
 8002cdc:	e00c      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002cde:	2307      	movs	r3, #7
 8002ce0:	e00a      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002ce2:	2305      	movs	r3, #5
 8002ce4:	e008      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	e006      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002cea:	2303      	movs	r3, #3
 8002cec:	e004      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e002      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	f002 0203 	and.w	r2, r2, #3
 8002cfe:	0092      	lsls	r2, r2, #2
 8002d00:	4093      	lsls	r3, r2
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d08:	4937      	ldr	r1, [pc, #220]	@ (8002de8 <HAL_GPIO_Init+0x334>)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	3302      	adds	r3, #2
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d16:	4b3b      	ldr	r3, [pc, #236]	@ (8002e04 <HAL_GPIO_Init+0x350>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d3a:	4a32      	ldr	r2, [pc, #200]	@ (8002e04 <HAL_GPIO_Init+0x350>)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d40:	4b30      	ldr	r3, [pc, #192]	@ (8002e04 <HAL_GPIO_Init+0x350>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d64:	4a27      	ldr	r2, [pc, #156]	@ (8002e04 <HAL_GPIO_Init+0x350>)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d6a:	4b26      	ldr	r3, [pc, #152]	@ (8002e04 <HAL_GPIO_Init+0x350>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002e04 <HAL_GPIO_Init+0x350>)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d94:	4b1b      	ldr	r3, [pc, #108]	@ (8002e04 <HAL_GPIO_Init+0x350>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002db8:	4a12      	ldr	r2, [pc, #72]	@ (8002e04 <HAL_GPIO_Init+0x350>)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	fa22 f303 	lsr.w	r3, r2, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f47f ae78 	bne.w	8002ac4 <HAL_GPIO_Init+0x10>
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	371c      	adds	r7, #28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40010000 	.word	0x40010000
 8002dec:	48000400 	.word	0x48000400
 8002df0:	48000800 	.word	0x48000800
 8002df4:	48000c00 	.word	0x48000c00
 8002df8:	48001000 	.word	0x48001000
 8002dfc:	48001400 	.word	0x48001400
 8002e00:	48001800 	.word	0x48001800
 8002e04:	40010400 	.word	0x40010400

08002e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
 8002e14:	4613      	mov	r3, r2
 8002e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e18:	787b      	ldrb	r3, [r7, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e24:	e002      	b.n	8002e2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e42:	4b08      	ldr	r3, [pc, #32]	@ (8002e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d006      	beq.n	8002e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e4e:	4a05      	ldr	r2, [pc, #20]	@ (8002e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e54:	88fb      	ldrh	r3, [r7, #6]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe fcde 	bl	8001818 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40010400 	.word	0x40010400

08002e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e08d      	b.n	8002f96 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fe fb0a 	bl	80014a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2224      	movs	r2, #36	@ 0x24
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002eb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ec8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d107      	bne.n	8002ee2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	e006      	b.n	8002ef0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002eee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d108      	bne.n	8002f0a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	e007      	b.n	8002f1a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69d9      	ldr	r1, [r3, #28]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1a      	ldr	r2, [r3, #32]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af02      	add	r7, sp, #8
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	461a      	mov	r2, r3
 8002fac:	460b      	mov	r3, r1
 8002fae:	817b      	strh	r3, [r7, #10]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	f040 80fd 	bne.w	80031bc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_I2C_Master_Transmit+0x30>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e0f6      	b.n	80031be <HAL_I2C_Master_Transmit+0x21e>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fd8:	f7ff f9a8 	bl	800232c <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	2319      	movs	r3, #25
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fce0 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0e1      	b.n	80031be <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2221      	movs	r2, #33	@ 0x21
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2210      	movs	r2, #16
 8003006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	893a      	ldrh	r2, [r7, #8]
 800301a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003026:	b29b      	uxth	r3, r3
 8003028:	2bff      	cmp	r3, #255	@ 0xff
 800302a:	d906      	bls.n	800303a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	22ff      	movs	r2, #255	@ 0xff
 8003030:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003032:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	e007      	b.n	800304a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003044:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003048:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304e:	2b00      	cmp	r3, #0
 8003050:	d024      	beq.n	800309c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003056:	781a      	ldrb	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003086:	b2db      	uxtb	r3, r3
 8003088:	3301      	adds	r3, #1
 800308a:	b2da      	uxtb	r2, r3
 800308c:	8979      	ldrh	r1, [r7, #10]
 800308e:	4b4e      	ldr	r3, [pc, #312]	@ (80031c8 <HAL_I2C_Master_Transmit+0x228>)
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fedb 	bl	8003e50 <I2C_TransferConfig>
 800309a:	e066      	b.n	800316a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	8979      	ldrh	r1, [r7, #10]
 80030a4:	4b48      	ldr	r3, [pc, #288]	@ (80031c8 <HAL_I2C_Master_Transmit+0x228>)
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 fed0 	bl	8003e50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80030b0:	e05b      	b.n	800316a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	6a39      	ldr	r1, [r7, #32]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fcd3 	bl	8003a62 <I2C_WaitOnTXISFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e07b      	b.n	80031be <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ca:	781a      	ldrb	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d034      	beq.n	800316a <HAL_I2C_Master_Transmit+0x1ca>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003104:	2b00      	cmp	r3, #0
 8003106:	d130      	bne.n	800316a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	2200      	movs	r2, #0
 8003110:	2180      	movs	r1, #128	@ 0x80
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fc4c 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e04d      	b.n	80031be <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	2bff      	cmp	r3, #255	@ 0xff
 800312a:	d90e      	bls.n	800314a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	22ff      	movs	r2, #255	@ 0xff
 8003130:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003136:	b2da      	uxtb	r2, r3
 8003138:	8979      	ldrh	r1, [r7, #10]
 800313a:	2300      	movs	r3, #0
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 fe84 	bl	8003e50 <I2C_TransferConfig>
 8003148:	e00f      	b.n	800316a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003158:	b2da      	uxtb	r2, r3
 800315a:	8979      	ldrh	r1, [r7, #10]
 800315c:	2300      	movs	r3, #0
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fe73 	bl	8003e50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d19e      	bne.n	80030b2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	6a39      	ldr	r1, [r7, #32]
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fcb9 	bl	8003af0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e01a      	b.n	80031be <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2220      	movs	r2, #32
 800318e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6859      	ldr	r1, [r3, #4]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4b0c      	ldr	r3, [pc, #48]	@ (80031cc <HAL_I2C_Master_Transmit+0x22c>)
 800319c:	400b      	ands	r3, r1
 800319e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	e000      	b.n	80031be <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80031bc:	2302      	movs	r3, #2
  }
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	80002000 	.word	0x80002000
 80031cc:	fe00e800 	.word	0xfe00e800

080031d0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	461a      	mov	r2, r3
 80031dc:	460b      	mov	r3, r1
 80031de:	817b      	strh	r3, [r7, #10]
 80031e0:	4613      	mov	r3, r2
 80031e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	f040 80db 	bne.w	80033a8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_I2C_Master_Receive+0x30>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e0d4      	b.n	80033aa <HAL_I2C_Master_Receive+0x1da>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003208:	f7ff f890 	bl	800232c <HAL_GetTick>
 800320c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	2319      	movs	r3, #25
 8003214:	2201      	movs	r2, #1
 8003216:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 fbc8 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e0bf      	b.n	80033aa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2222      	movs	r2, #34	@ 0x22
 800322e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2210      	movs	r2, #16
 8003236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	893a      	ldrh	r2, [r7, #8]
 800324a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003256:	b29b      	uxth	r3, r3
 8003258:	2bff      	cmp	r3, #255	@ 0xff
 800325a:	d90e      	bls.n	800327a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003266:	b2da      	uxtb	r2, r3
 8003268:	8979      	ldrh	r1, [r7, #10]
 800326a:	4b52      	ldr	r3, [pc, #328]	@ (80033b4 <HAL_I2C_Master_Receive+0x1e4>)
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fdec 	bl	8003e50 <I2C_TransferConfig>
 8003278:	e06d      	b.n	8003356 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003288:	b2da      	uxtb	r2, r3
 800328a:	8979      	ldrh	r1, [r7, #10]
 800328c:	4b49      	ldr	r3, [pc, #292]	@ (80033b4 <HAL_I2C_Master_Receive+0x1e4>)
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fddb 	bl	8003e50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800329a:	e05c      	b.n	8003356 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	6a39      	ldr	r1, [r7, #32]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 fc69 	bl	8003b78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e07c      	b.n	80033aa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d034      	beq.n	8003356 <HAL_I2C_Master_Receive+0x186>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d130      	bne.n	8003356 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	2200      	movs	r2, #0
 80032fc:	2180      	movs	r1, #128	@ 0x80
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 fb56 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e04d      	b.n	80033aa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	2bff      	cmp	r3, #255	@ 0xff
 8003316:	d90e      	bls.n	8003336 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	22ff      	movs	r2, #255	@ 0xff
 800331c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003322:	b2da      	uxtb	r2, r3
 8003324:	8979      	ldrh	r1, [r7, #10]
 8003326:	2300      	movs	r3, #0
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 fd8e 	bl	8003e50 <I2C_TransferConfig>
 8003334:	e00f      	b.n	8003356 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003344:	b2da      	uxtb	r2, r3
 8003346:	8979      	ldrh	r1, [r7, #10]
 8003348:	2300      	movs	r3, #0
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fd7d 	bl	8003e50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d19d      	bne.n	800329c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	6a39      	ldr	r1, [r7, #32]
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fbc3 	bl	8003af0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e01a      	b.n	80033aa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2220      	movs	r2, #32
 800337a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6859      	ldr	r1, [r3, #4]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b0c      	ldr	r3, [pc, #48]	@ (80033b8 <HAL_I2C_Master_Receive+0x1e8>)
 8003388:	400b      	ands	r3, r1
 800338a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	e000      	b.n	80033aa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80033a8:	2302      	movs	r3, #2
  }
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	80002400 	.word	0x80002400
 80033b8:	fe00e800 	.word	0xfe00e800

080033bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	4608      	mov	r0, r1
 80033c6:	4611      	mov	r1, r2
 80033c8:	461a      	mov	r2, r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	817b      	strh	r3, [r7, #10]
 80033ce:	460b      	mov	r3, r1
 80033d0:	813b      	strh	r3, [r7, #8]
 80033d2:	4613      	mov	r3, r2
 80033d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b20      	cmp	r3, #32
 80033e0:	f040 80f9 	bne.w	80035d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_I2C_Mem_Write+0x34>
 80033ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0ed      	b.n	80035d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_I2C_Mem_Write+0x4e>
 8003406:	2302      	movs	r3, #2
 8003408:	e0e6      	b.n	80035d8 <HAL_I2C_Mem_Write+0x21c>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003412:	f7fe ff8b 	bl	800232c <HAL_GetTick>
 8003416:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	2319      	movs	r3, #25
 800341e:	2201      	movs	r2, #1
 8003420:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 fac3 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0d1      	b.n	80035d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2221      	movs	r2, #33	@ 0x21
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2240      	movs	r2, #64	@ 0x40
 8003440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a3a      	ldr	r2, [r7, #32]
 800344e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003454:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800345c:	88f8      	ldrh	r0, [r7, #6]
 800345e:	893a      	ldrh	r2, [r7, #8]
 8003460:	8979      	ldrh	r1, [r7, #10]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	4603      	mov	r3, r0
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f9d3 	bl	8003818 <I2C_RequestMemoryWrite>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0a9      	b.n	80035d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003488:	b29b      	uxth	r3, r3
 800348a:	2bff      	cmp	r3, #255	@ 0xff
 800348c:	d90e      	bls.n	80034ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	22ff      	movs	r2, #255	@ 0xff
 8003492:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003498:	b2da      	uxtb	r2, r3
 800349a:	8979      	ldrh	r1, [r7, #10]
 800349c:	2300      	movs	r3, #0
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fcd3 	bl	8003e50 <I2C_TransferConfig>
 80034aa:	e00f      	b.n	80034cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	8979      	ldrh	r1, [r7, #10]
 80034be:	2300      	movs	r3, #0
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 fcc2 	bl	8003e50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fac6 	bl	8003a62 <I2C_WaitOnTXISFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e07b      	b.n	80035d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	781a      	ldrb	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d034      	beq.n	8003584 <HAL_I2C_Mem_Write+0x1c8>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351e:	2b00      	cmp	r3, #0
 8003520:	d130      	bne.n	8003584 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003528:	2200      	movs	r2, #0
 800352a:	2180      	movs	r1, #128	@ 0x80
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 fa3f 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e04d      	b.n	80035d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	2bff      	cmp	r3, #255	@ 0xff
 8003544:	d90e      	bls.n	8003564 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	22ff      	movs	r2, #255	@ 0xff
 800354a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003550:	b2da      	uxtb	r2, r3
 8003552:	8979      	ldrh	r1, [r7, #10]
 8003554:	2300      	movs	r3, #0
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 fc77 	bl	8003e50 <I2C_TransferConfig>
 8003562:	e00f      	b.n	8003584 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003572:	b2da      	uxtb	r2, r3
 8003574:	8979      	ldrh	r1, [r7, #10]
 8003576:	2300      	movs	r3, #0
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 fc66 	bl	8003e50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d19e      	bne.n	80034cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 faac 	bl	8003af0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e01a      	b.n	80035d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2220      	movs	r2, #32
 80035a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <HAL_I2C_Mem_Write+0x224>)
 80035b6:	400b      	ands	r3, r1
 80035b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e000      	b.n	80035d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80035d6:	2302      	movs	r3, #2
  }
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	fe00e800 	.word	0xfe00e800

080035e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	4608      	mov	r0, r1
 80035ee:	4611      	mov	r1, r2
 80035f0:	461a      	mov	r2, r3
 80035f2:	4603      	mov	r3, r0
 80035f4:	817b      	strh	r3, [r7, #10]
 80035f6:	460b      	mov	r3, r1
 80035f8:	813b      	strh	r3, [r7, #8]
 80035fa:	4613      	mov	r3, r2
 80035fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b20      	cmp	r3, #32
 8003608:	f040 80fd 	bne.w	8003806 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_I2C_Mem_Read+0x34>
 8003612:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003614:	2b00      	cmp	r3, #0
 8003616:	d105      	bne.n	8003624 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800361e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0f1      	b.n	8003808 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_I2C_Mem_Read+0x4e>
 800362e:	2302      	movs	r3, #2
 8003630:	e0ea      	b.n	8003808 <HAL_I2C_Mem_Read+0x224>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800363a:	f7fe fe77 	bl	800232c <HAL_GetTick>
 800363e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2319      	movs	r3, #25
 8003646:	2201      	movs	r2, #1
 8003648:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f9af 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0d5      	b.n	8003808 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2222      	movs	r2, #34	@ 0x22
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2240      	movs	r2, #64	@ 0x40
 8003668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a3a      	ldr	r2, [r7, #32]
 8003676:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800367c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003684:	88f8      	ldrh	r0, [r7, #6]
 8003686:	893a      	ldrh	r2, [r7, #8]
 8003688:	8979      	ldrh	r1, [r7, #10]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	9301      	str	r3, [sp, #4]
 800368e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	4603      	mov	r3, r0
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f913 	bl	80038c0 <I2C_RequestMemoryRead>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0ad      	b.n	8003808 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2bff      	cmp	r3, #255	@ 0xff
 80036b4:	d90e      	bls.n	80036d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	8979      	ldrh	r1, [r7, #10]
 80036c4:	4b52      	ldr	r3, [pc, #328]	@ (8003810 <HAL_I2C_Mem_Read+0x22c>)
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 fbbf 	bl	8003e50 <I2C_TransferConfig>
 80036d2:	e00f      	b.n	80036f4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	8979      	ldrh	r1, [r7, #10]
 80036e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003810 <HAL_I2C_Mem_Read+0x22c>)
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fbae 	bl	8003e50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fa:	2200      	movs	r2, #0
 80036fc:	2104      	movs	r1, #4
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f956 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e07c      	b.n	8003808 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d034      	beq.n	80037b4 <HAL_I2C_Mem_Read+0x1d0>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374e:	2b00      	cmp	r3, #0
 8003750:	d130      	bne.n	80037b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003758:	2200      	movs	r2, #0
 800375a:	2180      	movs	r1, #128	@ 0x80
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f927 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e04d      	b.n	8003808 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	2bff      	cmp	r3, #255	@ 0xff
 8003774:	d90e      	bls.n	8003794 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003780:	b2da      	uxtb	r2, r3
 8003782:	8979      	ldrh	r1, [r7, #10]
 8003784:	2300      	movs	r3, #0
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 fb5f 	bl	8003e50 <I2C_TransferConfig>
 8003792:	e00f      	b.n	80037b4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	8979      	ldrh	r1, [r7, #10]
 80037a6:	2300      	movs	r3, #0
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fb4e 	bl	8003e50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d19a      	bne.n	80036f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f994 	bl	8003af0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e01a      	b.n	8003808 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2220      	movs	r2, #32
 80037d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <HAL_I2C_Mem_Read+0x230>)
 80037e6:	400b      	ands	r3, r1
 80037e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	e000      	b.n	8003808 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003806:	2302      	movs	r3, #2
  }
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	80002400 	.word	0x80002400
 8003814:	fe00e800 	.word	0xfe00e800

08003818 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	4608      	mov	r0, r1
 8003822:	4611      	mov	r1, r2
 8003824:	461a      	mov	r2, r3
 8003826:	4603      	mov	r3, r0
 8003828:	817b      	strh	r3, [r7, #10]
 800382a:	460b      	mov	r3, r1
 800382c:	813b      	strh	r3, [r7, #8]
 800382e:	4613      	mov	r3, r2
 8003830:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003832:	88fb      	ldrh	r3, [r7, #6]
 8003834:	b2da      	uxtb	r2, r3
 8003836:	8979      	ldrh	r1, [r7, #10]
 8003838:	4b20      	ldr	r3, [pc, #128]	@ (80038bc <I2C_RequestMemoryWrite+0xa4>)
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 fb05 	bl	8003e50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	69b9      	ldr	r1, [r7, #24]
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f909 	bl	8003a62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e02c      	b.n	80038b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d105      	bne.n	800386c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003860:	893b      	ldrh	r3, [r7, #8]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	629a      	str	r2, [r3, #40]	@ 0x28
 800386a:	e015      	b.n	8003898 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800386c:	893b      	ldrh	r3, [r7, #8]
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	b29b      	uxth	r3, r3
 8003872:	b2da      	uxtb	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	69b9      	ldr	r1, [r7, #24]
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f8ef 	bl	8003a62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e012      	b.n	80038b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800388e:	893b      	ldrh	r3, [r7, #8]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2200      	movs	r2, #0
 80038a0:	2180      	movs	r1, #128	@ 0x80
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f884 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	80002000 	.word	0x80002000

080038c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	4608      	mov	r0, r1
 80038ca:	4611      	mov	r1, r2
 80038cc:	461a      	mov	r2, r3
 80038ce:	4603      	mov	r3, r0
 80038d0:	817b      	strh	r3, [r7, #10]
 80038d2:	460b      	mov	r3, r1
 80038d4:	813b      	strh	r3, [r7, #8]
 80038d6:	4613      	mov	r3, r2
 80038d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	8979      	ldrh	r1, [r7, #10]
 80038e0:	4b20      	ldr	r3, [pc, #128]	@ (8003964 <I2C_RequestMemoryRead+0xa4>)
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	2300      	movs	r3, #0
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 fab2 	bl	8003e50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ec:	69fa      	ldr	r2, [r7, #28]
 80038ee:	69b9      	ldr	r1, [r7, #24]
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f8b6 	bl	8003a62 <I2C_WaitOnTXISFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e02c      	b.n	800395a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d105      	bne.n	8003912 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003906:	893b      	ldrh	r3, [r7, #8]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003910:	e015      	b.n	800393e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003912:	893b      	ldrh	r3, [r7, #8]
 8003914:	0a1b      	lsrs	r3, r3, #8
 8003916:	b29b      	uxth	r3, r3
 8003918:	b2da      	uxtb	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	69b9      	ldr	r1, [r7, #24]
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 f89c 	bl	8003a62 <I2C_WaitOnTXISFlagUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e012      	b.n	800395a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003934:	893b      	ldrh	r3, [r7, #8]
 8003936:	b2da      	uxtb	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2200      	movs	r2, #0
 8003946:	2140      	movs	r1, #64	@ 0x40
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f831 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	80002000 	.word	0x80002000

08003968 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b02      	cmp	r3, #2
 800397c:	d103      	bne.n	8003986 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b01      	cmp	r3, #1
 8003992:	d007      	beq.n	80039a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	619a      	str	r2, [r3, #24]
  }
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039c0:	e03b      	b.n	8003a3a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	6839      	ldr	r1, [r7, #0]
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f962 	bl	8003c90 <I2C_IsErrorOccurred>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e041      	b.n	8003a5a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d02d      	beq.n	8003a3a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039de:	f7fe fca5 	bl	800232c <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d302      	bcc.n	80039f4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d122      	bne.n	8003a3a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	4013      	ands	r3, r2
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d113      	bne.n	8003a3a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a16:	f043 0220 	orr.w	r2, r3, #32
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e00f      	b.n	8003a5a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699a      	ldr	r2, [r3, #24]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4013      	ands	r3, r2
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	bf0c      	ite	eq
 8003a4a:	2301      	moveq	r3, #1
 8003a4c:	2300      	movne	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d0b4      	beq.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a6e:	e033      	b.n	8003ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f90b 	bl	8003c90 <I2C_IsErrorOccurred>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e031      	b.n	8003ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d025      	beq.n	8003ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8c:	f7fe fc4e 	bl	800232c <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d302      	bcc.n	8003aa2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d11a      	bne.n	8003ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d013      	beq.n	8003ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab4:	f043 0220 	orr.w	r2, r3, #32
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e007      	b.n	8003ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d1c4      	bne.n	8003a70 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003afc:	e02f      	b.n	8003b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f8c4 	bl	8003c90 <I2C_IsErrorOccurred>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e02d      	b.n	8003b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b12:	f7fe fc0b 	bl	800232c <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d302      	bcc.n	8003b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d11a      	bne.n	8003b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b20      	cmp	r3, #32
 8003b34:	d013      	beq.n	8003b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3a:	f043 0220 	orr.w	r2, r3, #32
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e007      	b.n	8003b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d1c8      	bne.n	8003afe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003b88:	e071      	b.n	8003c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 f87e 	bl	8003c90 <I2C_IsErrorOccurred>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d13b      	bne.n	8003c24 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d138      	bne.n	8003c24 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d105      	bne.n	8003bcc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	2b10      	cmp	r3, #16
 8003bd8:	d121      	bne.n	8003c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2210      	movs	r2, #16
 8003be0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2204      	movs	r2, #4
 8003be6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2220      	movs	r2, #32
 8003bee:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6859      	ldr	r1, [r3, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	4b24      	ldr	r3, [pc, #144]	@ (8003c8c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003bfc:	400b      	ands	r3, r1
 8003bfe:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	75fb      	strb	r3, [r7, #23]
 8003c1c:	e002      	b.n	8003c24 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003c24:	f7fe fb82 	bl	800232c <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d302      	bcc.n	8003c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d119      	bne.n	8003c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d116      	bne.n	8003c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d00f      	beq.n	8003c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	f043 0220 	orr.w	r2, r3, #32
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d002      	beq.n	8003c82 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d083      	beq.n	8003b8a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	fe00e800 	.word	0xfe00e800

08003c90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	@ 0x28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d068      	beq.n	8003d8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cc4:	e049      	b.n	8003d5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d045      	beq.n	8003d5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cce:	f7fe fb2d 	bl	800232c <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d302      	bcc.n	8003ce4 <I2C_IsErrorOccurred+0x54>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d13a      	bne.n	8003d5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cf6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d06:	d121      	bne.n	8003d4c <I2C_IsErrorOccurred+0xbc>
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d0e:	d01d      	beq.n	8003d4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003d10:	7cfb      	ldrb	r3, [r7, #19]
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d01a      	beq.n	8003d4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d26:	f7fe fb01 	bl	800232c <HAL_GetTick>
 8003d2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d2c:	e00e      	b.n	8003d4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d2e:	f7fe fafd 	bl	800232c <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b19      	cmp	r3, #25
 8003d3a:	d907      	bls.n	8003d4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	f043 0320 	orr.w	r3, r3, #32
 8003d42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003d4a:	e006      	b.n	8003d5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d1e9      	bne.n	8003d2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	d003      	beq.n	8003d70 <I2C_IsErrorOccurred+0xe0>
 8003d68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0aa      	beq.n	8003cc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d103      	bne.n	8003d80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	f043 0304 	orr.w	r3, r3, #4
 8003d86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00b      	beq.n	8003db8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003db0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	f043 0308 	orr.w	r3, r3, #8
 8003dc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00b      	beq.n	8003dfc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	f043 0302 	orr.w	r3, r3, #2
 8003dea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003df4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01c      	beq.n	8003e3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f7ff fdaf 	bl	8003968 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6859      	ldr	r1, [r3, #4]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	4b0d      	ldr	r3, [pc, #52]	@ (8003e4c <I2C_IsErrorOccurred+0x1bc>)
 8003e16:	400b      	ands	r3, r1
 8003e18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	431a      	orrs	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3728      	adds	r7, #40	@ 0x28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	fe00e800 	.word	0xfe00e800

08003e50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	607b      	str	r3, [r7, #4]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	817b      	strh	r3, [r7, #10]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e62:	897b      	ldrh	r3, [r7, #10]
 8003e64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e68:	7a7b      	ldrb	r3, [r7, #9]
 8003e6a:	041b      	lsls	r3, r3, #16
 8003e6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	0d5b      	lsrs	r3, r3, #21
 8003e8a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e8e:	4b08      	ldr	r3, [pc, #32]	@ (8003eb0 <I2C_TransferConfig+0x60>)
 8003e90:	430b      	orrs	r3, r1
 8003e92:	43db      	mvns	r3, r3
 8003e94:	ea02 0103 	and.w	r1, r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	03ff63ff 	.word	0x03ff63ff

08003eb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d138      	bne.n	8003f3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e032      	b.n	8003f3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2224      	movs	r2, #36	@ 0x24
 8003ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0201 	bic.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6819      	ldr	r1, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	e000      	b.n	8003f3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f3c:	2302      	movs	r3, #2
  }
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b085      	sub	sp, #20
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d139      	bne.n	8003fd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e033      	b.n	8003fd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2224      	movs	r2, #36	@ 0x24
 8003f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0201 	bic.w	r2, r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e000      	b.n	8003fd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003fe8:	4b04      	ldr	r3, [pc, #16]	@ (8003ffc <HAL_PWREx_GetVoltageRange+0x18>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40007000 	.word	0x40007000

08004000 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800400e:	d130      	bne.n	8004072 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004010:	4b23      	ldr	r3, [pc, #140]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800401c:	d038      	beq.n	8004090 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800401e:	4b20      	ldr	r3, [pc, #128]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004026:	4a1e      	ldr	r2, [pc, #120]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004028:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800402c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800402e:	4b1d      	ldr	r3, [pc, #116]	@ (80040a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2232      	movs	r2, #50	@ 0x32
 8004034:	fb02 f303 	mul.w	r3, r2, r3
 8004038:	4a1b      	ldr	r2, [pc, #108]	@ (80040a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	0c9b      	lsrs	r3, r3, #18
 8004040:	3301      	adds	r3, #1
 8004042:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004044:	e002      	b.n	800404c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	3b01      	subs	r3, #1
 800404a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800404c:	4b14      	ldr	r3, [pc, #80]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004054:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004058:	d102      	bne.n	8004060 <HAL_PWREx_ControlVoltageScaling+0x60>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1f2      	bne.n	8004046 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004060:	4b0f      	ldr	r3, [pc, #60]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800406c:	d110      	bne.n	8004090 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e00f      	b.n	8004092 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004072:	4b0b      	ldr	r3, [pc, #44]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800407a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800407e:	d007      	beq.n	8004090 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004080:	4b07      	ldr	r3, [pc, #28]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004088:	4a05      	ldr	r2, [pc, #20]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800408a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800408e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40007000 	.word	0x40007000
 80040a4:	20000000 	.word	0x20000000
 80040a8:	431bde83 	.word	0x431bde83

080040ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e3ca      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040be:	4b97      	ldr	r3, [pc, #604]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040c8:	4b94      	ldr	r3, [pc, #592]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 80e4 	beq.w	80042a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d007      	beq.n	80040f6 <HAL_RCC_OscConfig+0x4a>
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b0c      	cmp	r3, #12
 80040ea:	f040 808b 	bne.w	8004204 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	f040 8087 	bne.w	8004204 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040f6:	4b89      	ldr	r3, [pc, #548]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <HAL_RCC_OscConfig+0x62>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e3a2      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1a      	ldr	r2, [r3, #32]
 8004112:	4b82      	ldr	r3, [pc, #520]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d004      	beq.n	8004128 <HAL_RCC_OscConfig+0x7c>
 800411e:	4b7f      	ldr	r3, [pc, #508]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004126:	e005      	b.n	8004134 <HAL_RCC_OscConfig+0x88>
 8004128:	4b7c      	ldr	r3, [pc, #496]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 800412a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004134:	4293      	cmp	r3, r2
 8004136:	d223      	bcs.n	8004180 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fd55 	bl	8004bec <RCC_SetFlashLatencyFromMSIRange>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e383      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800414c:	4b73      	ldr	r3, [pc, #460]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a72      	ldr	r2, [pc, #456]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 8004152:	f043 0308 	orr.w	r3, r3, #8
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	4b70      	ldr	r3, [pc, #448]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	496d      	ldr	r1, [pc, #436]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800416a:	4b6c      	ldr	r3, [pc, #432]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	4968      	ldr	r1, [pc, #416]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 800417a:	4313      	orrs	r3, r2
 800417c:	604b      	str	r3, [r1, #4]
 800417e:	e025      	b.n	80041cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004180:	4b66      	ldr	r3, [pc, #408]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a65      	ldr	r2, [pc, #404]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 8004186:	f043 0308 	orr.w	r3, r3, #8
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	4b63      	ldr	r3, [pc, #396]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	4960      	ldr	r1, [pc, #384]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 800419a:	4313      	orrs	r3, r2
 800419c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800419e:	4b5f      	ldr	r3, [pc, #380]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	495b      	ldr	r1, [pc, #364]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d109      	bne.n	80041cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fd15 	bl	8004bec <RCC_SetFlashLatencyFromMSIRange>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e343      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041cc:	f000 fc4a 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 80041d0:	4602      	mov	r2, r0
 80041d2:	4b52      	ldr	r3, [pc, #328]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	091b      	lsrs	r3, r3, #4
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	4950      	ldr	r1, [pc, #320]	@ (8004320 <HAL_RCC_OscConfig+0x274>)
 80041de:	5ccb      	ldrb	r3, [r1, r3]
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
 80041e8:	4a4e      	ldr	r2, [pc, #312]	@ (8004324 <HAL_RCC_OscConfig+0x278>)
 80041ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041ec:	4b4e      	ldr	r3, [pc, #312]	@ (8004328 <HAL_RCC_OscConfig+0x27c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fe f84b 	bl	800228c <HAL_InitTick>
 80041f6:	4603      	mov	r3, r0
 80041f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d052      	beq.n	80042a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	e327      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d032      	beq.n	8004272 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800420c:	4b43      	ldr	r3, [pc, #268]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a42      	ldr	r2, [pc, #264]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004218:	f7fe f888 	bl	800232c <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004220:	f7fe f884 	bl	800232c <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e310      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004232:	4b3a      	ldr	r3, [pc, #232]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800423e:	4b37      	ldr	r3, [pc, #220]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a36      	ldr	r2, [pc, #216]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 8004244:	f043 0308 	orr.w	r3, r3, #8
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	4b34      	ldr	r3, [pc, #208]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	4931      	ldr	r1, [pc, #196]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 8004258:	4313      	orrs	r3, r2
 800425a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800425c:	4b2f      	ldr	r3, [pc, #188]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	021b      	lsls	r3, r3, #8
 800426a:	492c      	ldr	r1, [pc, #176]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 800426c:	4313      	orrs	r3, r2
 800426e:	604b      	str	r3, [r1, #4]
 8004270:	e01a      	b.n	80042a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004272:	4b2a      	ldr	r3, [pc, #168]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a29      	ldr	r2, [pc, #164]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 8004278:	f023 0301 	bic.w	r3, r3, #1
 800427c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800427e:	f7fe f855 	bl	800232c <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004286:	f7fe f851 	bl	800232c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e2dd      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004298:	4b20      	ldr	r3, [pc, #128]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f0      	bne.n	8004286 <HAL_RCC_OscConfig+0x1da>
 80042a4:	e000      	b.n	80042a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d074      	beq.n	800439e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d005      	beq.n	80042c6 <HAL_RCC_OscConfig+0x21a>
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	2b0c      	cmp	r3, #12
 80042be:	d10e      	bne.n	80042de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d10b      	bne.n	80042de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c6:	4b15      	ldr	r3, [pc, #84]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d064      	beq.n	800439c <HAL_RCC_OscConfig+0x2f0>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d160      	bne.n	800439c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e2ba      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042e6:	d106      	bne.n	80042f6 <HAL_RCC_OscConfig+0x24a>
 80042e8:	4b0c      	ldr	r3, [pc, #48]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a0b      	ldr	r2, [pc, #44]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 80042ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	e026      	b.n	8004344 <HAL_RCC_OscConfig+0x298>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042fe:	d115      	bne.n	800432c <HAL_RCC_OscConfig+0x280>
 8004300:	4b06      	ldr	r3, [pc, #24]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a05      	ldr	r2, [pc, #20]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 8004306:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	4b03      	ldr	r3, [pc, #12]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a02      	ldr	r2, [pc, #8]	@ (800431c <HAL_RCC_OscConfig+0x270>)
 8004312:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	e014      	b.n	8004344 <HAL_RCC_OscConfig+0x298>
 800431a:	bf00      	nop
 800431c:	40021000 	.word	0x40021000
 8004320:	08010248 	.word	0x08010248
 8004324:	20000000 	.word	0x20000000
 8004328:	20000004 	.word	0x20000004
 800432c:	4ba0      	ldr	r3, [pc, #640]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a9f      	ldr	r2, [pc, #636]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	4b9d      	ldr	r3, [pc, #628]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a9c      	ldr	r2, [pc, #624]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 800433e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d013      	beq.n	8004374 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fd ffee 	bl	800232c <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004354:	f7fd ffea 	bl	800232c <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b64      	cmp	r3, #100	@ 0x64
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e276      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004366:	4b92      	ldr	r3, [pc, #584]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0x2a8>
 8004372:	e014      	b.n	800439e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fd ffda 	bl	800232c <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800437c:	f7fd ffd6 	bl	800232c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	@ 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e262      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800438e:	4b88      	ldr	r3, [pc, #544]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x2d0>
 800439a:	e000      	b.n	800439e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d060      	beq.n	800446c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d005      	beq.n	80043bc <HAL_RCC_OscConfig+0x310>
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b0c      	cmp	r3, #12
 80043b4:	d119      	bne.n	80043ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d116      	bne.n	80043ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043bc:	4b7c      	ldr	r3, [pc, #496]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_OscConfig+0x328>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e23f      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d4:	4b76      	ldr	r3, [pc, #472]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	4973      	ldr	r1, [pc, #460]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043e8:	e040      	b.n	800446c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d023      	beq.n	800443a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f2:	4b6f      	ldr	r3, [pc, #444]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a6e      	ldr	r2, [pc, #440]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 80043f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fe:	f7fd ff95 	bl	800232c <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004406:	f7fd ff91 	bl	800232c <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e21d      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004418:	4b65      	ldr	r3, [pc, #404]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004424:	4b62      	ldr	r3, [pc, #392]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	061b      	lsls	r3, r3, #24
 8004432:	495f      	ldr	r1, [pc, #380]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004434:	4313      	orrs	r3, r2
 8004436:	604b      	str	r3, [r1, #4]
 8004438:	e018      	b.n	800446c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443a:	4b5d      	ldr	r3, [pc, #372]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a5c      	ldr	r2, [pc, #368]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004446:	f7fd ff71 	bl	800232c <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800444e:	f7fd ff6d 	bl	800232c <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e1f9      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004460:	4b53      	ldr	r3, [pc, #332]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1f0      	bne.n	800444e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b00      	cmp	r3, #0
 8004476:	d03c      	beq.n	80044f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01c      	beq.n	80044ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004480:	4b4b      	ldr	r3, [pc, #300]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004486:	4a4a      	ldr	r2, [pc, #296]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fd ff4c 	bl	800232c <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004498:	f7fd ff48 	bl	800232c <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e1d4      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044aa:	4b41      	ldr	r3, [pc, #260]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 80044ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0ef      	beq.n	8004498 <HAL_RCC_OscConfig+0x3ec>
 80044b8:	e01b      	b.n	80044f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ba:	4b3d      	ldr	r3, [pc, #244]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 80044bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044c0:	4a3b      	ldr	r2, [pc, #236]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 80044c2:	f023 0301 	bic.w	r3, r3, #1
 80044c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ca:	f7fd ff2f 	bl	800232c <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d2:	f7fd ff2b 	bl	800232c <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e1b7      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044e4:	4b32      	ldr	r3, [pc, #200]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 80044e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1ef      	bne.n	80044d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 80a6 	beq.w	800464c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004500:	2300      	movs	r3, #0
 8004502:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004504:	4b2a      	ldr	r3, [pc, #168]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10d      	bne.n	800452c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004510:	4b27      	ldr	r3, [pc, #156]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004514:	4a26      	ldr	r2, [pc, #152]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800451a:	6593      	str	r3, [r2, #88]	@ 0x58
 800451c:	4b24      	ldr	r3, [pc, #144]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 800451e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004524:	60bb      	str	r3, [r7, #8]
 8004526:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004528:	2301      	movs	r3, #1
 800452a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800452c:	4b21      	ldr	r3, [pc, #132]	@ (80045b4 <HAL_RCC_OscConfig+0x508>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d118      	bne.n	800456a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004538:	4b1e      	ldr	r3, [pc, #120]	@ (80045b4 <HAL_RCC_OscConfig+0x508>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1d      	ldr	r2, [pc, #116]	@ (80045b4 <HAL_RCC_OscConfig+0x508>)
 800453e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004542:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004544:	f7fd fef2 	bl	800232c <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454c:	f7fd feee 	bl	800232c <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e17a      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800455e:	4b15      	ldr	r3, [pc, #84]	@ (80045b4 <HAL_RCC_OscConfig+0x508>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d108      	bne.n	8004584 <HAL_RCC_OscConfig+0x4d8>
 8004572:	4b0f      	ldr	r3, [pc, #60]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004578:	4a0d      	ldr	r2, [pc, #52]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004582:	e029      	b.n	80045d8 <HAL_RCC_OscConfig+0x52c>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b05      	cmp	r3, #5
 800458a:	d115      	bne.n	80045b8 <HAL_RCC_OscConfig+0x50c>
 800458c:	4b08      	ldr	r3, [pc, #32]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004592:	4a07      	ldr	r2, [pc, #28]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004594:	f043 0304 	orr.w	r3, r3, #4
 8004598:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800459c:	4b04      	ldr	r3, [pc, #16]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a2:	4a03      	ldr	r2, [pc, #12]	@ (80045b0 <HAL_RCC_OscConfig+0x504>)
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045ac:	e014      	b.n	80045d8 <HAL_RCC_OscConfig+0x52c>
 80045ae:	bf00      	nop
 80045b0:	40021000 	.word	0x40021000
 80045b4:	40007000 	.word	0x40007000
 80045b8:	4b9c      	ldr	r3, [pc, #624]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045be:	4a9b      	ldr	r2, [pc, #620]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045c8:	4b98      	ldr	r3, [pc, #608]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 80045ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ce:	4a97      	ldr	r2, [pc, #604]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 80045d0:	f023 0304 	bic.w	r3, r3, #4
 80045d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d016      	beq.n	800460e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e0:	f7fd fea4 	bl	800232c <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fd fea0 	bl	800232c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e12a      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045fe:	4b8b      	ldr	r3, [pc, #556]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 8004600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0ed      	beq.n	80045e8 <HAL_RCC_OscConfig+0x53c>
 800460c:	e015      	b.n	800463a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460e:	f7fd fe8d 	bl	800232c <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004614:	e00a      	b.n	800462c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fd fe89 	bl	800232c <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004624:	4293      	cmp	r3, r2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e113      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800462c:	4b7f      	ldr	r3, [pc, #508]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1ed      	bne.n	8004616 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800463a:	7ffb      	ldrb	r3, [r7, #31]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d105      	bne.n	800464c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004640:	4b7a      	ldr	r3, [pc, #488]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 8004642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004644:	4a79      	ldr	r2, [pc, #484]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 8004646:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800464a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80fe 	beq.w	8004852 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465a:	2b02      	cmp	r3, #2
 800465c:	f040 80d0 	bne.w	8004800 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004660:	4b72      	ldr	r3, [pc, #456]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f003 0203 	and.w	r2, r3, #3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004670:	429a      	cmp	r2, r3
 8004672:	d130      	bne.n	80046d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467e:	3b01      	subs	r3, #1
 8004680:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d127      	bne.n	80046d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004690:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004692:	429a      	cmp	r2, r3
 8004694:	d11f      	bne.n	80046d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80046a0:	2a07      	cmp	r2, #7
 80046a2:	bf14      	ite	ne
 80046a4:	2201      	movne	r2, #1
 80046a6:	2200      	moveq	r2, #0
 80046a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d113      	bne.n	80046d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	3b01      	subs	r3, #1
 80046bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046be:	429a      	cmp	r2, r3
 80046c0:	d109      	bne.n	80046d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046cc:	085b      	lsrs	r3, r3, #1
 80046ce:	3b01      	subs	r3, #1
 80046d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d06e      	beq.n	80047b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	2b0c      	cmp	r3, #12
 80046da:	d069      	beq.n	80047b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046dc:	4b53      	ldr	r3, [pc, #332]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d105      	bne.n	80046f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80046e8:	4b50      	ldr	r3, [pc, #320]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0ad      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046f8:	4b4c      	ldr	r3, [pc, #304]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a4b      	ldr	r2, [pc, #300]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 80046fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004702:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004704:	f7fd fe12 	bl	800232c <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470c:	f7fd fe0e 	bl	800232c <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e09a      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800471e:	4b43      	ldr	r3, [pc, #268]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800472a:	4b40      	ldr	r3, [pc, #256]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	4b40      	ldr	r3, [pc, #256]	@ (8004830 <HAL_RCC_OscConfig+0x784>)
 8004730:	4013      	ands	r3, r2
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800473a:	3a01      	subs	r2, #1
 800473c:	0112      	lsls	r2, r2, #4
 800473e:	4311      	orrs	r1, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004744:	0212      	lsls	r2, r2, #8
 8004746:	4311      	orrs	r1, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800474c:	0852      	lsrs	r2, r2, #1
 800474e:	3a01      	subs	r2, #1
 8004750:	0552      	lsls	r2, r2, #21
 8004752:	4311      	orrs	r1, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004758:	0852      	lsrs	r2, r2, #1
 800475a:	3a01      	subs	r2, #1
 800475c:	0652      	lsls	r2, r2, #25
 800475e:	4311      	orrs	r1, r2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004764:	0912      	lsrs	r2, r2, #4
 8004766:	0452      	lsls	r2, r2, #17
 8004768:	430a      	orrs	r2, r1
 800476a:	4930      	ldr	r1, [pc, #192]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 800476c:	4313      	orrs	r3, r2
 800476e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004770:	4b2e      	ldr	r3, [pc, #184]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a2d      	ldr	r2, [pc, #180]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 8004776:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800477a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800477c:	4b2b      	ldr	r3, [pc, #172]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4a2a      	ldr	r2, [pc, #168]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 8004782:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004786:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004788:	f7fd fdd0 	bl	800232c <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004790:	f7fd fdcc 	bl	800232c <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e058      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a2:	4b22      	ldr	r3, [pc, #136]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047ae:	e050      	b.n	8004852 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e04f      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b4:	4b1d      	ldr	r3, [pc, #116]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d148      	bne.n	8004852 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047c0:	4b1a      	ldr	r3, [pc, #104]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a19      	ldr	r2, [pc, #100]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 80047c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047cc:	4b17      	ldr	r3, [pc, #92]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4a16      	ldr	r2, [pc, #88]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 80047d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047d8:	f7fd fda8 	bl	800232c <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e0:	f7fd fda4 	bl	800232c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e030      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047f2:	4b0e      	ldr	r3, [pc, #56]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0f0      	beq.n	80047e0 <HAL_RCC_OscConfig+0x734>
 80047fe:	e028      	b.n	8004852 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b0c      	cmp	r3, #12
 8004804:	d023      	beq.n	800484e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004806:	4b09      	ldr	r3, [pc, #36]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a08      	ldr	r2, [pc, #32]	@ (800482c <HAL_RCC_OscConfig+0x780>)
 800480c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7fd fd8b 	bl	800232c <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004818:	e00c      	b.n	8004834 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481a:	f7fd fd87 	bl	800232c <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d905      	bls.n	8004834 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e013      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
 800482c:	40021000 	.word	0x40021000
 8004830:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004834:	4b09      	ldr	r3, [pc, #36]	@ (800485c <HAL_RCC_OscConfig+0x7b0>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1ec      	bne.n	800481a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004840:	4b06      	ldr	r3, [pc, #24]	@ (800485c <HAL_RCC_OscConfig+0x7b0>)
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	4905      	ldr	r1, [pc, #20]	@ (800485c <HAL_RCC_OscConfig+0x7b0>)
 8004846:	4b06      	ldr	r3, [pc, #24]	@ (8004860 <HAL_RCC_OscConfig+0x7b4>)
 8004848:	4013      	ands	r3, r2
 800484a:	60cb      	str	r3, [r1, #12]
 800484c:	e001      	b.n	8004852 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3720      	adds	r7, #32
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40021000 	.word	0x40021000
 8004860:	feeefffc 	.word	0xfeeefffc

08004864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0e7      	b.n	8004a48 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004878:	4b75      	ldr	r3, [pc, #468]	@ (8004a50 <HAL_RCC_ClockConfig+0x1ec>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d910      	bls.n	80048a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004886:	4b72      	ldr	r3, [pc, #456]	@ (8004a50 <HAL_RCC_ClockConfig+0x1ec>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 0207 	bic.w	r2, r3, #7
 800488e:	4970      	ldr	r1, [pc, #448]	@ (8004a50 <HAL_RCC_ClockConfig+0x1ec>)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	4313      	orrs	r3, r2
 8004894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004896:	4b6e      	ldr	r3, [pc, #440]	@ (8004a50 <HAL_RCC_ClockConfig+0x1ec>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0cf      	b.n	8004a48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d010      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	4b66      	ldr	r3, [pc, #408]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d908      	bls.n	80048d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c4:	4b63      	ldr	r3, [pc, #396]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	4960      	ldr	r1, [pc, #384]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d04c      	beq.n	800497c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d107      	bne.n	80048fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ea:	4b5a      	ldr	r3, [pc, #360]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d121      	bne.n	800493a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e0a6      	b.n	8004a48 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d107      	bne.n	8004912 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004902:	4b54      	ldr	r3, [pc, #336]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d115      	bne.n	800493a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e09a      	b.n	8004a48 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d107      	bne.n	800492a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800491a:	4b4e      	ldr	r3, [pc, #312]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e08e      	b.n	8004a48 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800492a:	4b4a      	ldr	r3, [pc, #296]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e086      	b.n	8004a48 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800493a:	4b46      	ldr	r3, [pc, #280]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f023 0203 	bic.w	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4943      	ldr	r1, [pc, #268]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 8004948:	4313      	orrs	r3, r2
 800494a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494c:	f7fd fcee 	bl	800232c <HAL_GetTick>
 8004950:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004952:	e00a      	b.n	800496a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004954:	f7fd fcea 	bl	800232c <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004962:	4293      	cmp	r3, r2
 8004964:	d901      	bls.n	800496a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e06e      	b.n	8004a48 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496a:	4b3a      	ldr	r3, [pc, #232]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 020c 	and.w	r2, r3, #12
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	429a      	cmp	r2, r3
 800497a:	d1eb      	bne.n	8004954 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d010      	beq.n	80049aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	4b31      	ldr	r3, [pc, #196]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004994:	429a      	cmp	r2, r3
 8004996:	d208      	bcs.n	80049aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004998:	4b2e      	ldr	r3, [pc, #184]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	492b      	ldr	r1, [pc, #172]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049aa:	4b29      	ldr	r3, [pc, #164]	@ (8004a50 <HAL_RCC_ClockConfig+0x1ec>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d210      	bcs.n	80049da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b8:	4b25      	ldr	r3, [pc, #148]	@ (8004a50 <HAL_RCC_ClockConfig+0x1ec>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f023 0207 	bic.w	r2, r3, #7
 80049c0:	4923      	ldr	r1, [pc, #140]	@ (8004a50 <HAL_RCC_ClockConfig+0x1ec>)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c8:	4b21      	ldr	r3, [pc, #132]	@ (8004a50 <HAL_RCC_ClockConfig+0x1ec>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d001      	beq.n	80049da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e036      	b.n	8004a48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d008      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	4918      	ldr	r1, [pc, #96]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d009      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a04:	4b13      	ldr	r3, [pc, #76]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	4910      	ldr	r1, [pc, #64]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a18:	f000 f824 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	091b      	lsrs	r3, r3, #4
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	490b      	ldr	r1, [pc, #44]	@ (8004a58 <HAL_RCC_ClockConfig+0x1f4>)
 8004a2a:	5ccb      	ldrb	r3, [r1, r3]
 8004a2c:	f003 031f 	and.w	r3, r3, #31
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
 8004a34:	4a09      	ldr	r2, [pc, #36]	@ (8004a5c <HAL_RCC_ClockConfig+0x1f8>)
 8004a36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a38:	4b09      	ldr	r3, [pc, #36]	@ (8004a60 <HAL_RCC_ClockConfig+0x1fc>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fd fc25 	bl	800228c <HAL_InitTick>
 8004a42:	4603      	mov	r3, r0
 8004a44:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a46:	7afb      	ldrb	r3, [r7, #11]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40022000 	.word	0x40022000
 8004a54:	40021000 	.word	0x40021000
 8004a58:	08010248 	.word	0x08010248
 8004a5c:	20000000 	.word	0x20000000
 8004a60:	20000004 	.word	0x20000004

08004a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b089      	sub	sp, #36	@ 0x24
 8004a68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a72:	4b3e      	ldr	r3, [pc, #248]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 030c 	and.w	r3, r3, #12
 8004a7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0x34>
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	2b0c      	cmp	r3, #12
 8004a90:	d121      	bne.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d11e      	bne.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a98:	4b34      	ldr	r3, [pc, #208]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d107      	bne.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004aa4:	4b31      	ldr	r3, [pc, #196]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	e005      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10d      	bne.n	8004aec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d102      	bne.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004adc:	4b25      	ldr	r3, [pc, #148]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ade:	61bb      	str	r3, [r7, #24]
 8004ae0:	e004      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d101      	bne.n	8004aec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ae8:	4b23      	ldr	r3, [pc, #140]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x114>)
 8004aea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	2b0c      	cmp	r3, #12
 8004af0:	d134      	bne.n	8004b5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004af2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d003      	beq.n	8004b0a <HAL_RCC_GetSysClockFreq+0xa6>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d003      	beq.n	8004b10 <HAL_RCC_GetSysClockFreq+0xac>
 8004b08:	e005      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b0c:	617b      	str	r3, [r7, #20]
      break;
 8004b0e:	e005      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b10:	4b19      	ldr	r3, [pc, #100]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b12:	617b      	str	r3, [r7, #20]
      break;
 8004b14:	e002      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	617b      	str	r3, [r7, #20]
      break;
 8004b1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b1c:	4b13      	ldr	r3, [pc, #76]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	091b      	lsrs	r3, r3, #4
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	3301      	adds	r3, #1
 8004b28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b2a:	4b10      	ldr	r3, [pc, #64]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	0a1b      	lsrs	r3, r3, #8
 8004b30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	fb03 f202 	mul.w	r2, r3, r2
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b42:	4b0a      	ldr	r3, [pc, #40]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	0e5b      	lsrs	r3, r3, #25
 8004b48:	f003 0303 	and.w	r3, r3, #3
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b5c:	69bb      	ldr	r3, [r7, #24]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3724      	adds	r7, #36	@ 0x24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	08010260 	.word	0x08010260
 8004b74:	00f42400 	.word	0x00f42400
 8004b78:	007a1200 	.word	0x007a1200

08004b7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b80:	4b03      	ldr	r3, [pc, #12]	@ (8004b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b82:	681b      	ldr	r3, [r3, #0]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	20000000 	.word	0x20000000

08004b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b98:	f7ff fff0 	bl	8004b7c <HAL_RCC_GetHCLKFreq>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	4b06      	ldr	r3, [pc, #24]	@ (8004bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	0a1b      	lsrs	r3, r3, #8
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	4904      	ldr	r1, [pc, #16]	@ (8004bbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004baa:	5ccb      	ldrb	r3, [r1, r3]
 8004bac:	f003 031f 	and.w	r3, r3, #31
 8004bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	08010258 	.word	0x08010258

08004bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bc4:	f7ff ffda 	bl	8004b7c <HAL_RCC_GetHCLKFreq>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	4b06      	ldr	r3, [pc, #24]	@ (8004be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	0adb      	lsrs	r3, r3, #11
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	4904      	ldr	r1, [pc, #16]	@ (8004be8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bd6:	5ccb      	ldrb	r3, [r1, r3]
 8004bd8:	f003 031f 	and.w	r3, r3, #31
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40021000 	.word	0x40021000
 8004be8:	08010258 	.word	0x08010258

08004bec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004bf8:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c04:	f7ff f9ee 	bl	8003fe4 <HAL_PWREx_GetVoltageRange>
 8004c08:	6178      	str	r0, [r7, #20]
 8004c0a:	e014      	b.n	8004c36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c0c:	4b25      	ldr	r3, [pc, #148]	@ (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c10:	4a24      	ldr	r2, [pc, #144]	@ (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c16:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c18:	4b22      	ldr	r3, [pc, #136]	@ (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c24:	f7ff f9de 	bl	8003fe4 <HAL_PWREx_GetVoltageRange>
 8004c28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c34:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c3c:	d10b      	bne.n	8004c56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b80      	cmp	r3, #128	@ 0x80
 8004c42:	d919      	bls.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2ba0      	cmp	r3, #160	@ 0xa0
 8004c48:	d902      	bls.n	8004c50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	e013      	b.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c50:	2301      	movs	r3, #1
 8004c52:	613b      	str	r3, [r7, #16]
 8004c54:	e010      	b.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b80      	cmp	r3, #128	@ 0x80
 8004c5a:	d902      	bls.n	8004c62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	613b      	str	r3, [r7, #16]
 8004c60:	e00a      	b.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b80      	cmp	r3, #128	@ 0x80
 8004c66:	d102      	bne.n	8004c6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c68:	2302      	movs	r3, #2
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	e004      	b.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b70      	cmp	r3, #112	@ 0x70
 8004c72:	d101      	bne.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c74:	2301      	movs	r3, #1
 8004c76:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c78:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f023 0207 	bic.w	r2, r3, #7
 8004c80:	4909      	ldr	r1, [pc, #36]	@ (8004ca8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c88:	4b07      	ldr	r3, [pc, #28]	@ (8004ca8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d001      	beq.n	8004c9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	40022000 	.word	0x40022000

08004cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cb8:	2300      	movs	r3, #0
 8004cba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d041      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ccc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004cd0:	d02a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004cd2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004cd6:	d824      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004cd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004cdc:	d008      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004cde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ce2:	d81e      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ce8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cec:	d010      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004cee:	e018      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cf0:	4b86      	ldr	r3, [pc, #536]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4a85      	ldr	r2, [pc, #532]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cfa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cfc:	e015      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3304      	adds	r3, #4
 8004d02:	2100      	movs	r1, #0
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fabb 	bl	8005280 <RCCEx_PLLSAI1_Config>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d0e:	e00c      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3320      	adds	r3, #32
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fba6 	bl	8005468 <RCCEx_PLLSAI2_Config>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d20:	e003      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	74fb      	strb	r3, [r7, #19]
      break;
 8004d26:	e000      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d2a:	7cfb      	ldrb	r3, [r7, #19]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10b      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d30:	4b76      	ldr	r3, [pc, #472]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d3e:	4973      	ldr	r1, [pc, #460]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d46:	e001      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d041      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d60:	d02a      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004d62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d66:	d824      	bhi.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d6c:	d008      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d72:	d81e      	bhi.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004d78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d7c:	d010      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d7e:	e018      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d80:	4b62      	ldr	r3, [pc, #392]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	4a61      	ldr	r2, [pc, #388]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d8a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d8c:	e015      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	2100      	movs	r1, #0
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fa73 	bl	8005280 <RCCEx_PLLSAI1_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d9e:	e00c      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3320      	adds	r3, #32
 8004da4:	2100      	movs	r1, #0
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fb5e 	bl	8005468 <RCCEx_PLLSAI2_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004db0:	e003      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	74fb      	strb	r3, [r7, #19]
      break;
 8004db6:	e000      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dba:	7cfb      	ldrb	r3, [r7, #19]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10b      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004dc0:	4b52      	ldr	r3, [pc, #328]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dce:	494f      	ldr	r1, [pc, #316]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004dd6:	e001      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd8:	7cfb      	ldrb	r3, [r7, #19]
 8004dda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 80a0 	beq.w	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dea:	2300      	movs	r3, #0
 8004dec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004dee:	4b47      	ldr	r3, [pc, #284]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00d      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e04:	4b41      	ldr	r3, [pc, #260]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e08:	4a40      	ldr	r2, [pc, #256]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e10:	4b3e      	ldr	r3, [pc, #248]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e18:	60bb      	str	r3, [r7, #8]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e20:	4b3b      	ldr	r3, [pc, #236]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a3a      	ldr	r2, [pc, #232]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e2c:	f7fd fa7e 	bl	800232c <HAL_GetTick>
 8004e30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e32:	e009      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e34:	f7fd fa7a 	bl	800232c <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d902      	bls.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	74fb      	strb	r3, [r7, #19]
        break;
 8004e46:	e005      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e48:	4b31      	ldr	r3, [pc, #196]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0ef      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004e54:	7cfb      	ldrb	r3, [r7, #19]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d15c      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01f      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d019      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e78:	4b24      	ldr	r3, [pc, #144]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e84:	4b21      	ldr	r3, [pc, #132]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8a:	4a20      	ldr	r2, [pc, #128]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e94:	4b1d      	ldr	r3, [pc, #116]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ea4:	4a19      	ldr	r2, [pc, #100]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d016      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb6:	f7fd fa39 	bl	800232c <HAL_GetTick>
 8004eba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ebc:	e00b      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ebe:	f7fd fa35 	bl	800232c <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d902      	bls.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	74fb      	strb	r3, [r7, #19]
            break;
 8004ed4:	e006      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0ec      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004ee4:	7cfb      	ldrb	r3, [r7, #19]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10c      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eea:	4b08      	ldr	r3, [pc, #32]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004efa:	4904      	ldr	r1, [pc, #16]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f02:	e009      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	74bb      	strb	r3, [r7, #18]
 8004f08:	e006      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f0a:	bf00      	nop
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f14:	7cfb      	ldrb	r3, [r7, #19]
 8004f16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f18:	7c7b      	ldrb	r3, [r7, #17]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d105      	bne.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f1e:	4b9e      	ldr	r3, [pc, #632]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f22:	4a9d      	ldr	r2, [pc, #628]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f28:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f36:	4b98      	ldr	r3, [pc, #608]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f3c:	f023 0203 	bic.w	r2, r3, #3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f44:	4994      	ldr	r1, [pc, #592]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f58:	4b8f      	ldr	r3, [pc, #572]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5e:	f023 020c 	bic.w	r2, r3, #12
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f66:	498c      	ldr	r1, [pc, #560]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f7a:	4b87      	ldr	r3, [pc, #540]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f80:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f88:	4983      	ldr	r1, [pc, #524]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f9c:	4b7e      	ldr	r3, [pc, #504]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004faa:	497b      	ldr	r1, [pc, #492]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fbe:	4b76      	ldr	r3, [pc, #472]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fcc:	4972      	ldr	r1, [pc, #456]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0320 	and.w	r3, r3, #32
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fe0:	4b6d      	ldr	r3, [pc, #436]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fee:	496a      	ldr	r1, [pc, #424]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005002:	4b65      	ldr	r3, [pc, #404]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005008:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005010:	4961      	ldr	r1, [pc, #388]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005024:	4b5c      	ldr	r3, [pc, #368]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005032:	4959      	ldr	r1, [pc, #356]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005046:	4b54      	ldr	r3, [pc, #336]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005054:	4950      	ldr	r1, [pc, #320]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005068:	4b4b      	ldr	r3, [pc, #300]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800506e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005076:	4948      	ldr	r1, [pc, #288]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800508a:	4b43      	ldr	r3, [pc, #268]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005090:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005098:	493f      	ldr	r1, [pc, #252]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d028      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050ac:	4b3a      	ldr	r3, [pc, #232]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ba:	4937      	ldr	r1, [pc, #220]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050ca:	d106      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050cc:	4b32      	ldr	r3, [pc, #200]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	4a31      	ldr	r2, [pc, #196]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050d6:	60d3      	str	r3, [r2, #12]
 80050d8:	e011      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050e2:	d10c      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3304      	adds	r3, #4
 80050e8:	2101      	movs	r1, #1
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 f8c8 	bl	8005280 <RCCEx_PLLSAI1_Config>
 80050f0:	4603      	mov	r3, r0
 80050f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80050f4:	7cfb      	ldrb	r3, [r7, #19]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80050fa:	7cfb      	ldrb	r3, [r7, #19]
 80050fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d028      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800510a:	4b23      	ldr	r3, [pc, #140]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005110:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005118:	491f      	ldr	r1, [pc, #124]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005124:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005128:	d106      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800512a:	4b1b      	ldr	r3, [pc, #108]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	4a1a      	ldr	r2, [pc, #104]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005130:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005134:	60d3      	str	r3, [r2, #12]
 8005136:	e011      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005140:	d10c      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3304      	adds	r3, #4
 8005146:	2101      	movs	r1, #1
 8005148:	4618      	mov	r0, r3
 800514a:	f000 f899 	bl	8005280 <RCCEx_PLLSAI1_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005152:	7cfb      	ldrb	r3, [r7, #19]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d02b      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005168:	4b0b      	ldr	r3, [pc, #44]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005176:	4908      	ldr	r1, [pc, #32]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005182:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005186:	d109      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005188:	4b03      	ldr	r3, [pc, #12]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4a02      	ldr	r2, [pc, #8]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005192:	60d3      	str	r3, [r2, #12]
 8005194:	e014      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005196:	bf00      	nop
 8005198:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051a4:	d10c      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3304      	adds	r3, #4
 80051aa:	2101      	movs	r1, #1
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 f867 	bl	8005280 <RCCEx_PLLSAI1_Config>
 80051b2:	4603      	mov	r3, r0
 80051b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051b6:	7cfb      	ldrb	r3, [r7, #19]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80051bc:	7cfb      	ldrb	r3, [r7, #19]
 80051be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d02f      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051cc:	4b2b      	ldr	r3, [pc, #172]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051da:	4928      	ldr	r1, [pc, #160]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051ea:	d10d      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3304      	adds	r3, #4
 80051f0:	2102      	movs	r1, #2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 f844 	bl	8005280 <RCCEx_PLLSAI1_Config>
 80051f8:	4603      	mov	r3, r0
 80051fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051fc:	7cfb      	ldrb	r3, [r7, #19]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d014      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005202:	7cfb      	ldrb	r3, [r7, #19]
 8005204:	74bb      	strb	r3, [r7, #18]
 8005206:	e011      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800520c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005210:	d10c      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3320      	adds	r3, #32
 8005216:	2102      	movs	r1, #2
 8005218:	4618      	mov	r0, r3
 800521a:	f000 f925 	bl	8005468 <RCCEx_PLLSAI2_Config>
 800521e:	4603      	mov	r3, r0
 8005220:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005222:	7cfb      	ldrb	r3, [r7, #19]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005228:	7cfb      	ldrb	r3, [r7, #19]
 800522a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005238:	4b10      	ldr	r3, [pc, #64]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800523e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005246:	490d      	ldr	r1, [pc, #52]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00b      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800525a:	4b08      	ldr	r3, [pc, #32]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005260:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800526a:	4904      	ldr	r1, [pc, #16]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005272:	7cbb      	ldrb	r3, [r7, #18]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	40021000 	.word	0x40021000

08005280 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800528e:	4b75      	ldr	r3, [pc, #468]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d018      	beq.n	80052cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800529a:	4b72      	ldr	r3, [pc, #456]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f003 0203 	and.w	r2, r3, #3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d10d      	bne.n	80052c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
       ||
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d009      	beq.n	80052c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80052b2:	4b6c      	ldr	r3, [pc, #432]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	091b      	lsrs	r3, r3, #4
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
       ||
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d047      	beq.n	8005356 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	73fb      	strb	r3, [r7, #15]
 80052ca:	e044      	b.n	8005356 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d018      	beq.n	8005306 <RCCEx_PLLSAI1_Config+0x86>
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d825      	bhi.n	8005324 <RCCEx_PLLSAI1_Config+0xa4>
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d002      	beq.n	80052e2 <RCCEx_PLLSAI1_Config+0x62>
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d009      	beq.n	80052f4 <RCCEx_PLLSAI1_Config+0x74>
 80052e0:	e020      	b.n	8005324 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052e2:	4b60      	ldr	r3, [pc, #384]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d11d      	bne.n	800532a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052f2:	e01a      	b.n	800532a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052f4:	4b5b      	ldr	r3, [pc, #364]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d116      	bne.n	800532e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005304:	e013      	b.n	800532e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005306:	4b57      	ldr	r3, [pc, #348]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10f      	bne.n	8005332 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005312:	4b54      	ldr	r3, [pc, #336]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005322:	e006      	b.n	8005332 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
      break;
 8005328:	e004      	b.n	8005334 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800532a:	bf00      	nop
 800532c:	e002      	b.n	8005334 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800532e:	bf00      	nop
 8005330:	e000      	b.n	8005334 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005332:	bf00      	nop
    }

    if(status == HAL_OK)
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10d      	bne.n	8005356 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800533a:	4b4a      	ldr	r3, [pc, #296]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6819      	ldr	r1, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	3b01      	subs	r3, #1
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	430b      	orrs	r3, r1
 8005350:	4944      	ldr	r1, [pc, #272]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005352:	4313      	orrs	r3, r2
 8005354:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005356:	7bfb      	ldrb	r3, [r7, #15]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d17d      	bne.n	8005458 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800535c:	4b41      	ldr	r3, [pc, #260]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a40      	ldr	r2, [pc, #256]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005362:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005366:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005368:	f7fc ffe0 	bl	800232c <HAL_GetTick>
 800536c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800536e:	e009      	b.n	8005384 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005370:	f7fc ffdc 	bl	800232c <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d902      	bls.n	8005384 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	73fb      	strb	r3, [r7, #15]
        break;
 8005382:	e005      	b.n	8005390 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005384:	4b37      	ldr	r3, [pc, #220]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1ef      	bne.n	8005370 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005390:	7bfb      	ldrb	r3, [r7, #15]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d160      	bne.n	8005458 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d111      	bne.n	80053c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800539c:	4b31      	ldr	r3, [pc, #196]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80053a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6892      	ldr	r2, [r2, #8]
 80053ac:	0211      	lsls	r1, r2, #8
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	68d2      	ldr	r2, [r2, #12]
 80053b2:	0912      	lsrs	r2, r2, #4
 80053b4:	0452      	lsls	r2, r2, #17
 80053b6:	430a      	orrs	r2, r1
 80053b8:	492a      	ldr	r1, [pc, #168]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	610b      	str	r3, [r1, #16]
 80053be:	e027      	b.n	8005410 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d112      	bne.n	80053ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053c6:	4b27      	ldr	r3, [pc, #156]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80053ce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6892      	ldr	r2, [r2, #8]
 80053d6:	0211      	lsls	r1, r2, #8
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6912      	ldr	r2, [r2, #16]
 80053dc:	0852      	lsrs	r2, r2, #1
 80053de:	3a01      	subs	r2, #1
 80053e0:	0552      	lsls	r2, r2, #21
 80053e2:	430a      	orrs	r2, r1
 80053e4:	491f      	ldr	r1, [pc, #124]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	610b      	str	r3, [r1, #16]
 80053ea:	e011      	b.n	8005410 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80053f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6892      	ldr	r2, [r2, #8]
 80053fc:	0211      	lsls	r1, r2, #8
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6952      	ldr	r2, [r2, #20]
 8005402:	0852      	lsrs	r2, r2, #1
 8005404:	3a01      	subs	r2, #1
 8005406:	0652      	lsls	r2, r2, #25
 8005408:	430a      	orrs	r2, r1
 800540a:	4916      	ldr	r1, [pc, #88]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 800540c:	4313      	orrs	r3, r2
 800540e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005410:	4b14      	ldr	r3, [pc, #80]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a13      	ldr	r2, [pc, #76]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005416:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800541a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800541c:	f7fc ff86 	bl	800232c <HAL_GetTick>
 8005420:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005422:	e009      	b.n	8005438 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005424:	f7fc ff82 	bl	800232c <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d902      	bls.n	8005438 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	73fb      	strb	r3, [r7, #15]
          break;
 8005436:	e005      	b.n	8005444 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005438:	4b0a      	ldr	r3, [pc, #40]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0ef      	beq.n	8005424 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800544a:	4b06      	ldr	r3, [pc, #24]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 800544c:	691a      	ldr	r2, [r3, #16]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	4904      	ldr	r1, [pc, #16]	@ (8005464 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005454:	4313      	orrs	r3, r2
 8005456:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005458:	7bfb      	ldrb	r3, [r7, #15]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40021000 	.word	0x40021000

08005468 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005476:	4b6a      	ldr	r3, [pc, #424]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d018      	beq.n	80054b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005482:	4b67      	ldr	r3, [pc, #412]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f003 0203 	and.w	r2, r3, #3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d10d      	bne.n	80054ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
       ||
 8005496:	2b00      	cmp	r3, #0
 8005498:	d009      	beq.n	80054ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800549a:	4b61      	ldr	r3, [pc, #388]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	091b      	lsrs	r3, r3, #4
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
       ||
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d047      	beq.n	800553e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	73fb      	strb	r3, [r7, #15]
 80054b2:	e044      	b.n	800553e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d018      	beq.n	80054ee <RCCEx_PLLSAI2_Config+0x86>
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d825      	bhi.n	800550c <RCCEx_PLLSAI2_Config+0xa4>
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d002      	beq.n	80054ca <RCCEx_PLLSAI2_Config+0x62>
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d009      	beq.n	80054dc <RCCEx_PLLSAI2_Config+0x74>
 80054c8:	e020      	b.n	800550c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054ca:	4b55      	ldr	r3, [pc, #340]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d11d      	bne.n	8005512 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054da:	e01a      	b.n	8005512 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054dc:	4b50      	ldr	r3, [pc, #320]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d116      	bne.n	8005516 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ec:	e013      	b.n	8005516 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054ee:	4b4c      	ldr	r3, [pc, #304]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10f      	bne.n	800551a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054fa:	4b49      	ldr	r3, [pc, #292]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d109      	bne.n	800551a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800550a:	e006      	b.n	800551a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	73fb      	strb	r3, [r7, #15]
      break;
 8005510:	e004      	b.n	800551c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005512:	bf00      	nop
 8005514:	e002      	b.n	800551c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005516:	bf00      	nop
 8005518:	e000      	b.n	800551c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800551a:	bf00      	nop
    }

    if(status == HAL_OK)
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10d      	bne.n	800553e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005522:	4b3f      	ldr	r3, [pc, #252]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6819      	ldr	r1, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	3b01      	subs	r3, #1
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	430b      	orrs	r3, r1
 8005538:	4939      	ldr	r1, [pc, #228]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 800553a:	4313      	orrs	r3, r2
 800553c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d167      	bne.n	8005614 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005544:	4b36      	ldr	r3, [pc, #216]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a35      	ldr	r2, [pc, #212]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 800554a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800554e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005550:	f7fc feec 	bl	800232c <HAL_GetTick>
 8005554:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005556:	e009      	b.n	800556c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005558:	f7fc fee8 	bl	800232c <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d902      	bls.n	800556c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	73fb      	strb	r3, [r7, #15]
        break;
 800556a:	e005      	b.n	8005578 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800556c:	4b2c      	ldr	r3, [pc, #176]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1ef      	bne.n	8005558 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d14a      	bne.n	8005614 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d111      	bne.n	80055a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005584:	4b26      	ldr	r3, [pc, #152]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800558c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6892      	ldr	r2, [r2, #8]
 8005594:	0211      	lsls	r1, r2, #8
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	68d2      	ldr	r2, [r2, #12]
 800559a:	0912      	lsrs	r2, r2, #4
 800559c:	0452      	lsls	r2, r2, #17
 800559e:	430a      	orrs	r2, r1
 80055a0:	491f      	ldr	r1, [pc, #124]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	614b      	str	r3, [r1, #20]
 80055a6:	e011      	b.n	80055cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80055b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6892      	ldr	r2, [r2, #8]
 80055b8:	0211      	lsls	r1, r2, #8
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6912      	ldr	r2, [r2, #16]
 80055be:	0852      	lsrs	r2, r2, #1
 80055c0:	3a01      	subs	r2, #1
 80055c2:	0652      	lsls	r2, r2, #25
 80055c4:	430a      	orrs	r2, r1
 80055c6:	4916      	ldr	r1, [pc, #88]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80055cc:	4b14      	ldr	r3, [pc, #80]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a13      	ldr	r2, [pc, #76]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d8:	f7fc fea8 	bl	800232c <HAL_GetTick>
 80055dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055de:	e009      	b.n	80055f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055e0:	f7fc fea4 	bl	800232c <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d902      	bls.n	80055f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	73fb      	strb	r3, [r7, #15]
          break;
 80055f2:	e005      	b.n	8005600 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0ef      	beq.n	80055e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005606:	4b06      	ldr	r3, [pc, #24]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005608:	695a      	ldr	r2, [r3, #20]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	4904      	ldr	r1, [pc, #16]	@ (8005620 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005610:	4313      	orrs	r3, r2
 8005612:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005614:	7bfb      	ldrb	r3, [r7, #15]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40021000 	.word	0x40021000

08005624 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e095      	b.n	8005762 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563a:	2b00      	cmp	r3, #0
 800563c:	d108      	bne.n	8005650 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005646:	d009      	beq.n	800565c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	61da      	str	r2, [r3, #28]
 800564e:	e005      	b.n	800565c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fc f972 	bl	8001960 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005692:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800569c:	d902      	bls.n	80056a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	e002      	b.n	80056aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80056a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80056b2:	d007      	beq.n	80056c4 <HAL_SPI_Init+0xa0>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056bc:	d002      	beq.n	80056c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005706:	ea42 0103 	orr.w	r1, r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	0c1b      	lsrs	r3, r3, #16
 8005720:	f003 0204 	and.w	r2, r3, #4
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005732:	f003 0308 	and.w	r3, r3, #8
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005740:	ea42 0103 	orr.w	r1, r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b088      	sub	sp, #32
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	603b      	str	r3, [r7, #0]
 8005776:	4613      	mov	r3, r2
 8005778:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800577a:	f7fc fdd7 	bl	800232c <HAL_GetTick>
 800577e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005780:	88fb      	ldrh	r3, [r7, #6]
 8005782:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b01      	cmp	r3, #1
 800578e:	d001      	beq.n	8005794 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005790:	2302      	movs	r3, #2
 8005792:	e15c      	b.n	8005a4e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <HAL_SPI_Transmit+0x36>
 800579a:	88fb      	ldrh	r3, [r7, #6]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e154      	b.n	8005a4e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_SPI_Transmit+0x48>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e14d      	b.n	8005a4e <HAL_SPI_Transmit+0x2e4>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2203      	movs	r2, #3
 80057be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	88fa      	ldrh	r2, [r7, #6]
 80057d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	88fa      	ldrh	r2, [r7, #6]
 80057d8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005804:	d10f      	bne.n	8005826 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005814:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005824:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005830:	2b40      	cmp	r3, #64	@ 0x40
 8005832:	d007      	beq.n	8005844 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005842:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800584c:	d952      	bls.n	80058f4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <HAL_SPI_Transmit+0xf2>
 8005856:	8b7b      	ldrh	r3, [r7, #26]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d145      	bne.n	80058e8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005860:	881a      	ldrh	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586c:	1c9a      	adds	r2, r3, #2
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005880:	e032      	b.n	80058e8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b02      	cmp	r3, #2
 800588e:	d112      	bne.n	80058b6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005894:	881a      	ldrh	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a0:	1c9a      	adds	r2, r3, #2
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058b4:	e018      	b.n	80058e8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058b6:	f7fc fd39 	bl	800232c <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d803      	bhi.n	80058ce <HAL_SPI_Transmit+0x164>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d102      	bne.n	80058d4 <HAL_SPI_Transmit+0x16a>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d109      	bne.n	80058e8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e0b2      	b.n	8005a4e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1c7      	bne.n	8005882 <HAL_SPI_Transmit+0x118>
 80058f2:	e083      	b.n	80059fc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <HAL_SPI_Transmit+0x198>
 80058fc:	8b7b      	ldrh	r3, [r7, #26]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d177      	bne.n	80059f2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b01      	cmp	r3, #1
 800590a:	d912      	bls.n	8005932 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005910:	881a      	ldrh	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591c:	1c9a      	adds	r2, r3, #2
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b02      	subs	r3, #2
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005930:	e05f      	b.n	80059f2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	330c      	adds	r3, #12
 800593c:	7812      	ldrb	r2, [r2, #0]
 800593e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005958:	e04b      	b.n	80059f2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b02      	cmp	r3, #2
 8005966:	d12b      	bne.n	80059c0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b01      	cmp	r3, #1
 8005970:	d912      	bls.n	8005998 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005976:	881a      	ldrh	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005982:	1c9a      	adds	r2, r3, #2
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b02      	subs	r3, #2
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005996:	e02c      	b.n	80059f2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	330c      	adds	r3, #12
 80059a2:	7812      	ldrb	r2, [r2, #0]
 80059a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059be:	e018      	b.n	80059f2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c0:	f7fc fcb4 	bl	800232c <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d803      	bhi.n	80059d8 <HAL_SPI_Transmit+0x26e>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d6:	d102      	bne.n	80059de <HAL_SPI_Transmit+0x274>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d109      	bne.n	80059f2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e02d      	b.n	8005a4e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1ae      	bne.n	800595a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059fc:	69fa      	ldr	r2, [r7, #28]
 80059fe:	6839      	ldr	r1, [r7, #0]
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 fbe9 	bl	80061d8 <SPI_EndRxTxTransaction>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10a      	bne.n	8005a30 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
  }
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3720      	adds	r7, #32
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
	...

08005a58 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	4613      	mov	r3, r2
 8005a64:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d001      	beq.n	8005a76 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8005a72:	2302      	movs	r3, #2
 8005a74:	e0d4      	b.n	8005c20 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <HAL_SPI_Transmit_DMA+0x2a>
 8005a7c:	88fb      	ldrh	r3, [r7, #6]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e0cc      	b.n	8005c20 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_SPI_Transmit_DMA+0x3c>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e0c5      	b.n	8005c20 <HAL_SPI_Transmit_DMA+0x1c8>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2203      	movs	r2, #3
 8005aa0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	88fa      	ldrh	r2, [r7, #6]
 8005ab4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	88fa      	ldrh	r2, [r7, #6]
 8005aba:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ae6:	d10f      	bne.n	8005b08 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005af6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0c:	4a46      	ldr	r2, [pc, #280]	@ (8005c28 <HAL_SPI_Transmit_DMA+0x1d0>)
 8005b0e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b14:	4a45      	ldr	r2, [pc, #276]	@ (8005c2c <HAL_SPI_Transmit_DMA+0x1d4>)
 8005b16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b1c:	4a44      	ldr	r2, [pc, #272]	@ (8005c30 <HAL_SPI_Transmit_DMA+0x1d8>)
 8005b1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b24:	2200      	movs	r2, #0
 8005b26:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005b36:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b40:	d82d      	bhi.n	8005b9e <HAL_SPI_Transmit_DMA+0x146>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b4c:	d127      	bne.n	8005b9e <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10f      	bne.n	8005b7c <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005b6a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	085b      	lsrs	r3, r3, #1
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b7a:	e010      	b.n	8005b9e <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b8a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	3301      	adds	r3, #1
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	330c      	adds	r3, #12
 8005bae:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bb4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005bb6:	f7fc fdb3 	bl	8002720 <HAL_DMA_Start_IT>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bc4:	f043 0210 	orr.w	r2, r3, #16
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e023      	b.n	8005c20 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be2:	2b40      	cmp	r3, #64	@ 0x40
 8005be4:	d007      	beq.n	8005bf6 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bf4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0220 	orr.w	r2, r2, #32
 8005c0c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0202 	orr.w	r2, r2, #2
 8005c1c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	08005f17 	.word	0x08005f17
 8005c2c:	08005e71 	.word	0x08005e71
 8005c30:	08005f33 	.word	0x08005f33

08005c34 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b088      	sub	sp, #32
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	099b      	lsrs	r3, r3, #6
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10f      	bne.n	8005c78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00a      	beq.n	8005c78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	099b      	lsrs	r3, r3, #6
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d004      	beq.n	8005c78 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	4798      	blx	r3
    return;
 8005c76:	e0d7      	b.n	8005e28 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00a      	beq.n	8005c9a <HAL_SPI_IRQHandler+0x66>
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	09db      	lsrs	r3, r3, #7
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d004      	beq.n	8005c9a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	4798      	blx	r3
    return;
 8005c98:	e0c6      	b.n	8005e28 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	095b      	lsrs	r3, r3, #5
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10c      	bne.n	8005cc0 <HAL_SPI_IRQHandler+0x8c>
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	099b      	lsrs	r3, r3, #6
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	0a1b      	lsrs	r3, r3, #8
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 80b4 	beq.w	8005e28 <HAL_SPI_IRQHandler+0x1f4>
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 80ad 	beq.w	8005e28 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	099b      	lsrs	r3, r3, #6
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d023      	beq.n	8005d22 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d011      	beq.n	8005d0a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cea:	f043 0204 	orr.w	r2, r3, #4
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	617b      	str	r3, [r7, #20]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	e00b      	b.n	8005d22 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	613b      	str	r3, [r7, #16]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	693b      	ldr	r3, [r7, #16]
        return;
 8005d20:	e082      	b.n	8005e28 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	095b      	lsrs	r3, r3, #5
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d014      	beq.n	8005d58 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d32:	f043 0201 	orr.w	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	0a1b      	lsrs	r3, r3, #8
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00c      	beq.n	8005d7e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d68:	f043 0208 	orr.w	r2, r3, #8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005d70:	2300      	movs	r3, #0
 8005d72:	60bb      	str	r3, [r7, #8]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	60bb      	str	r3, [r7, #8]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d04f      	beq.n	8005e26 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d94:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d104      	bne.n	8005db2 <HAL_SPI_IRQHandler+0x17e>
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d034      	beq.n	8005e1c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0203 	bic.w	r2, r2, #3
 8005dc0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d011      	beq.n	8005dee <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dce:	4a18      	ldr	r2, [pc, #96]	@ (8005e30 <HAL_SPI_IRQHandler+0x1fc>)
 8005dd0:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fc fd40 	bl	800285c <HAL_DMA_Abort_IT>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d005      	beq.n	8005dee <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005de6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d016      	beq.n	8005e24 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfa:	4a0d      	ldr	r2, [pc, #52]	@ (8005e30 <HAL_SPI_IRQHandler+0x1fc>)
 8005dfc:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fc fd2a 	bl	800285c <HAL_DMA_Abort_IT>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8005e1a:	e003      	b.n	8005e24 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f81d 	bl	8005e5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005e22:	e000      	b.n	8005e26 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005e24:	bf00      	nop
    return;
 8005e26:	bf00      	nop
  }
}
 8005e28:	3720      	adds	r7, #32
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	08005f73 	.word	0x08005f73

08005e34 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e7e:	f7fc fa55 	bl	800232c <HAL_GetTick>
 8005e82:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0320 	and.w	r3, r3, #32
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	d03b      	beq.n	8005f0a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0220 	bic.w	r2, r2, #32
 8005ea0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0202 	bic.w	r2, r2, #2
 8005eb0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	2164      	movs	r1, #100	@ 0x64
 8005eb6:	6978      	ldr	r0, [r7, #20]
 8005eb8:	f000 f98e 	bl	80061d8 <SPI_EndRxTxTransaction>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ec6:	f043 0220 	orr.w	r2, r3, #32
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10a      	bne.n	8005eec <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005f02:	6978      	ldr	r0, [r7, #20]
 8005f04:	f7ff ffaa 	bl	8005e5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005f08:	e002      	b.n	8005f10 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005f0a:	6978      	ldr	r0, [r7, #20]
 8005f0c:	f7ff ff92 	bl	8005e34 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f7ff ff8f 	bl	8005e48 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0203 	bic.w	r2, r2, #3
 8005f4e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f54:	f043 0210 	orr.w	r2, r3, #16
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f7ff ff79 	bl	8005e5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f6a:	bf00      	nop
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f7ff ff64 	bl	8005e5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f94:	bf00      	nop
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fac:	f7fc f9be 	bl	800232c <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb4:	1a9b      	subs	r3, r3, r2
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	4413      	add	r3, r2
 8005fba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fbc:	f7fc f9b6 	bl	800232c <HAL_GetTick>
 8005fc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fc2:	4b39      	ldr	r3, [pc, #228]	@ (80060a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	015b      	lsls	r3, r3, #5
 8005fc8:	0d1b      	lsrs	r3, r3, #20
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	fb02 f303 	mul.w	r3, r2, r3
 8005fd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fd2:	e054      	b.n	800607e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fda:	d050      	beq.n	800607e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fdc:	f7fc f9a6 	bl	800232c <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d902      	bls.n	8005ff2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d13d      	bne.n	800606e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800600a:	d111      	bne.n	8006030 <SPI_WaitFlagStateUntilTimeout+0x94>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006014:	d004      	beq.n	8006020 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800601e:	d107      	bne.n	8006030 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800602e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006038:	d10f      	bne.n	800605a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006058:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e017      	b.n	800609e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	3b01      	subs	r3, #1
 800607c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4013      	ands	r3, r2
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	429a      	cmp	r2, r3
 800608c:	bf0c      	ite	eq
 800608e:	2301      	moveq	r3, #1
 8006090:	2300      	movne	r3, #0
 8006092:	b2db      	uxtb	r3, r3
 8006094:	461a      	mov	r2, r3
 8006096:	79fb      	ldrb	r3, [r7, #7]
 8006098:	429a      	cmp	r2, r3
 800609a:	d19b      	bne.n	8005fd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3720      	adds	r7, #32
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000000 	.word	0x20000000

080060ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08a      	sub	sp, #40	@ 0x28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80060ba:	2300      	movs	r3, #0
 80060bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80060be:	f7fc f935 	bl	800232c <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c6:	1a9b      	subs	r3, r3, r2
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	4413      	add	r3, r2
 80060cc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80060ce:	f7fc f92d 	bl	800232c <HAL_GetTick>
 80060d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	330c      	adds	r3, #12
 80060da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80060dc:	4b3d      	ldr	r3, [pc, #244]	@ (80061d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	00da      	lsls	r2, r3, #3
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	0d1b      	lsrs	r3, r3, #20
 80060ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ee:	fb02 f303 	mul.w	r3, r2, r3
 80060f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80060f4:	e060      	b.n	80061b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80060fc:	d107      	bne.n	800610e <SPI_WaitFifoStateUntilTimeout+0x62>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d104      	bne.n	800610e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	b2db      	uxtb	r3, r3
 800610a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800610c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006114:	d050      	beq.n	80061b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006116:	f7fc f909 	bl	800232c <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006122:	429a      	cmp	r2, r3
 8006124:	d902      	bls.n	800612c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	2b00      	cmp	r3, #0
 800612a:	d13d      	bne.n	80061a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800613a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006144:	d111      	bne.n	800616a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800614e:	d004      	beq.n	800615a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006158:	d107      	bne.n	800616a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006168:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006172:	d10f      	bne.n	8006194 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006192:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e010      	b.n	80061ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	4013      	ands	r3, r2
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d196      	bne.n	80060f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3728      	adds	r7, #40	@ 0x28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000000 	.word	0x20000000

080061d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af02      	add	r7, sp, #8
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f7ff ff5b 	bl	80060ac <SPI_WaitFifoStateUntilTimeout>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d007      	beq.n	800620c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006200:	f043 0220 	orr.w	r2, r3, #32
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e027      	b.n	800625c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2200      	movs	r2, #0
 8006214:	2180      	movs	r1, #128	@ 0x80
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f7ff fec0 	bl	8005f9c <SPI_WaitFlagStateUntilTimeout>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d007      	beq.n	8006232 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006226:	f043 0220 	orr.w	r2, r3, #32
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e014      	b.n	800625c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2200      	movs	r2, #0
 800623a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f7ff ff34 	bl	80060ac <SPI_WaitFifoStateUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d007      	beq.n	800625a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800624e:	f043 0220 	orr.w	r2, r3, #32
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e000      	b.n	800625c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e040      	b.n	80062f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800627a:	2b00      	cmp	r3, #0
 800627c:	d106      	bne.n	800628c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7fb fe0e 	bl	8001ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2224      	movs	r2, #36	@ 0x24
 8006290:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0201 	bic.w	r2, r2, #1
 80062a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 f81c 	bl	80072e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fd61 	bl	8006d78 <UART_SetConfig>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e01b      	b.n	80062f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 f89b 	bl	800742c <UART_CheckIdleState>
 80062f6:	4603      	mov	r3, r0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08a      	sub	sp, #40	@ 0x28
 8006304:	af02      	add	r7, sp, #8
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	603b      	str	r3, [r7, #0]
 800630c:	4613      	mov	r3, r2
 800630e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006314:	2b20      	cmp	r3, #32
 8006316:	d177      	bne.n	8006408 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <HAL_UART_Transmit+0x24>
 800631e:	88fb      	ldrh	r3, [r7, #6]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e070      	b.n	800640a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2221      	movs	r2, #33	@ 0x21
 8006334:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006336:	f7fb fff9 	bl	800232c <HAL_GetTick>
 800633a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	88fa      	ldrh	r2, [r7, #6]
 8006340:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	88fa      	ldrh	r2, [r7, #6]
 8006348:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006354:	d108      	bne.n	8006368 <HAL_UART_Transmit+0x68>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d104      	bne.n	8006368 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800635e:	2300      	movs	r3, #0
 8006360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	61bb      	str	r3, [r7, #24]
 8006366:	e003      	b.n	8006370 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800636c:	2300      	movs	r3, #0
 800636e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006370:	e02f      	b.n	80063d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2200      	movs	r2, #0
 800637a:	2180      	movs	r1, #128	@ 0x80
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f001 f8fd 	bl	800757c <UART_WaitOnFlagUntilTimeout>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d004      	beq.n	8006392 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2220      	movs	r2, #32
 800638c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e03b      	b.n	800640a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10b      	bne.n	80063b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	881a      	ldrh	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063a4:	b292      	uxth	r2, r2
 80063a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	3302      	adds	r3, #2
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	e007      	b.n	80063c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	781a      	ldrb	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	3301      	adds	r3, #1
 80063be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	3b01      	subs	r3, #1
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1c9      	bne.n	8006372 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2200      	movs	r2, #0
 80063e6:	2140      	movs	r1, #64	@ 0x40
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f001 f8c7 	bl	800757c <UART_WaitOnFlagUntilTimeout>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d004      	beq.n	80063fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2220      	movs	r2, #32
 80063f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e005      	b.n	800640a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2220      	movs	r2, #32
 8006402:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	e000      	b.n	800640a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006408:	2302      	movs	r3, #2
  }
}
 800640a:	4618      	mov	r0, r3
 800640c:	3720      	adds	r7, #32
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08a      	sub	sp, #40	@ 0x28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	4613      	mov	r3, r2
 8006420:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006428:	2b20      	cmp	r3, #32
 800642a:	d137      	bne.n	800649c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <HAL_UART_Receive_IT+0x24>
 8006432:	88fb      	ldrh	r3, [r7, #6]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e030      	b.n	800649e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a18      	ldr	r2, [pc, #96]	@ (80064a8 <HAL_UART_Receive_IT+0x94>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d01f      	beq.n	800648c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d018      	beq.n	800648c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	e853 3f00 	ldrex	r3, [r3]
 8006466:	613b      	str	r3, [r7, #16]
   return(result);
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800646e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	461a      	mov	r2, r3
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	623b      	str	r3, [r7, #32]
 800647a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647c:	69f9      	ldr	r1, [r7, #28]
 800647e:	6a3a      	ldr	r2, [r7, #32]
 8006480:	e841 2300 	strex	r3, r2, [r1]
 8006484:	61bb      	str	r3, [r7, #24]
   return(result);
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e6      	bne.n	800645a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800648c:	88fb      	ldrh	r3, [r7, #6]
 800648e:	461a      	mov	r2, r3
 8006490:	68b9      	ldr	r1, [r7, #8]
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f001 f8e0 	bl	8007658 <UART_Start_Receive_IT>
 8006498:	4603      	mov	r3, r0
 800649a:	e000      	b.n	800649e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800649c:	2302      	movs	r3, #2
  }
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3728      	adds	r7, #40	@ 0x28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	40008000 	.word	0x40008000

080064ac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08a      	sub	sp, #40	@ 0x28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	4613      	mov	r3, r2
 80064b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d165      	bne.n	800658e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <HAL_UART_Transmit_DMA+0x22>
 80064c8:	88fb      	ldrh	r3, [r7, #6]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e05e      	b.n	8006590 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	88fa      	ldrh	r2, [r7, #6]
 80064dc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	88fa      	ldrh	r2, [r7, #6]
 80064e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2221      	movs	r2, #33	@ 0x21
 80064f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d027      	beq.n	800654e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006502:	4a25      	ldr	r2, [pc, #148]	@ (8006598 <HAL_UART_Transmit_DMA+0xec>)
 8006504:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650a:	4a24      	ldr	r2, [pc, #144]	@ (800659c <HAL_UART_Transmit_DMA+0xf0>)
 800650c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006512:	4a23      	ldr	r2, [pc, #140]	@ (80065a0 <HAL_UART_Transmit_DMA+0xf4>)
 8006514:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651a:	2200      	movs	r2, #0
 800651c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006526:	4619      	mov	r1, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3328      	adds	r3, #40	@ 0x28
 800652e:	461a      	mov	r2, r3
 8006530:	88fb      	ldrh	r3, [r7, #6]
 8006532:	f7fc f8f5 	bl	8002720 <HAL_DMA_Start_IT>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d008      	beq.n	800654e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2210      	movs	r2, #16
 8006540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e020      	b.n	8006590 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2240      	movs	r2, #64	@ 0x40
 8006554:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3308      	adds	r3, #8
 800655c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	613b      	str	r3, [r7, #16]
   return(result);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800656c:	627b      	str	r3, [r7, #36]	@ 0x24
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3308      	adds	r3, #8
 8006574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006576:	623a      	str	r2, [r7, #32]
 8006578:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657a:	69f9      	ldr	r1, [r7, #28]
 800657c:	6a3a      	ldr	r2, [r7, #32]
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	61bb      	str	r3, [r7, #24]
   return(result);
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e5      	bne.n	8006556 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	e000      	b.n	8006590 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800658e:	2302      	movs	r3, #2
  }
}
 8006590:	4618      	mov	r0, r3
 8006592:	3728      	adds	r7, #40	@ 0x28
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	08007a39 	.word	0x08007a39
 800659c:	08007ad3 	.word	0x08007ad3
 80065a0:	08007c59 	.word	0x08007c59

080065a4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b09a      	sub	sp, #104	@ 0x68
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
#else
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065b4:	e853 3f00 	ldrex	r3, [r3]
 80065b8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80065ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80065cc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80065d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1e6      	bne.n	80065ac <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3308      	adds	r3, #8
 80065e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	f023 0301 	bic.w	r3, r3, #1
 80065f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3308      	adds	r3, #8
 80065fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80065fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8006600:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006604:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800660c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e5      	bne.n	80065de <HAL_UART_AbortReceive+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006616:	2b01      	cmp	r3, #1
 8006618:	d118      	bne.n	800664c <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	61fb      	str	r3, [r7, #28]
   return(result);
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	f023 0310 	bic.w	r3, r3, #16
 800662e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800663a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800663e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e6      	bne.n	800661a <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006656:	2b40      	cmp	r3, #64	@ 0x40
 8006658:	d137      	bne.n	80066ca <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3308      	adds	r3, #8
 8006660:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	60bb      	str	r3, [r7, #8]
   return(result);
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006670:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3308      	adds	r3, #8
 8006678:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800667a:	61ba      	str	r2, [r7, #24]
 800667c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	6979      	ldr	r1, [r7, #20]
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	613b      	str	r3, [r7, #16]
   return(result);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e5      	bne.n	800665a <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006692:	2b00      	cmp	r3, #0
 8006694:	d019      	beq.n	80066ca <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800669a:	2200      	movs	r2, #0
 800669c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fc f89c 	bl	80027e0 <HAL_DMA_Abort>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00d      	beq.n	80066ca <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fc f9c2 	bl	8002a3c <HAL_DMA_GetError>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d105      	bne.n	80066ca <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2210      	movs	r2, #16
 80066c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e019      	b.n	80066fe <HAL_UART_AbortReceive+0x15a>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	220f      	movs	r2, #15
 80066d8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	8b1b      	ldrh	r3, [r3, #24]
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0208 	orr.w	r2, r2, #8
 80066ea:	b292      	uxth	r2, r2
 80066ec:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3768      	adds	r7, #104	@ 0x68
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
	...

08006708 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b0ba      	sub	sp, #232	@ 0xe8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800672e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006732:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006736:	4013      	ands	r3, r2
 8006738:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800673c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006740:	2b00      	cmp	r3, #0
 8006742:	d115      	bne.n	8006770 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006748:	f003 0320 	and.w	r3, r3, #32
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00f      	beq.n	8006770 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006754:	f003 0320 	and.w	r3, r3, #32
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 82ca 	beq.w	8006cfa <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3
      }
      return;
 800676e:	e2c4      	b.n	8006cfa <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006770:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 8117 	beq.w	80069a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800677a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006786:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800678a:	4b85      	ldr	r3, [pc, #532]	@ (80069a0 <HAL_UART_IRQHandler+0x298>)
 800678c:	4013      	ands	r3, r2
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 810a 	beq.w	80069a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d011      	beq.n	80067c4 <HAL_UART_IRQHandler+0xbc>
 80067a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00b      	beq.n	80067c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2201      	movs	r2, #1
 80067b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067ba:	f043 0201 	orr.w	r2, r3, #1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d011      	beq.n	80067f4 <HAL_UART_IRQHandler+0xec>
 80067d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00b      	beq.n	80067f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2202      	movs	r2, #2
 80067e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067ea:	f043 0204 	orr.w	r2, r3, #4
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d011      	beq.n	8006824 <HAL_UART_IRQHandler+0x11c>
 8006800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00b      	beq.n	8006824 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2204      	movs	r2, #4
 8006812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800681a:	f043 0202 	orr.w	r2, r3, #2
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b00      	cmp	r3, #0
 800682e:	d017      	beq.n	8006860 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b00      	cmp	r3, #0
 800683a:	d105      	bne.n	8006848 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800683c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006840:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00b      	beq.n	8006860 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2208      	movs	r2, #8
 800684e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006856:	f043 0208 	orr.w	r2, r3, #8
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006864:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006868:	2b00      	cmp	r3, #0
 800686a:	d012      	beq.n	8006892 <HAL_UART_IRQHandler+0x18a>
 800686c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006870:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00c      	beq.n	8006892 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006880:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006888:	f043 0220 	orr.w	r2, r3, #32
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 8230 	beq.w	8006cfe <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800689e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00d      	beq.n	80068c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ae:	f003 0320 	and.w	r3, r3, #32
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d007      	beq.n	80068c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068da:	2b40      	cmp	r3, #64	@ 0x40
 80068dc:	d005      	beq.n	80068ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d04f      	beq.n	800698a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 f840 	bl	8007970 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068fa:	2b40      	cmp	r3, #64	@ 0x40
 80068fc:	d141      	bne.n	8006982 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3308      	adds	r3, #8
 8006904:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006914:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006918:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800691c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3308      	adds	r3, #8
 8006926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800692a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800692e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1d9      	bne.n	80068fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800694e:	2b00      	cmp	r3, #0
 8006950:	d013      	beq.n	800697a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006956:	4a13      	ldr	r2, [pc, #76]	@ (80069a4 <HAL_UART_IRQHandler+0x29c>)
 8006958:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800695e:	4618      	mov	r0, r3
 8006960:	f7fb ff7c 	bl	800285c <HAL_DMA_Abort_IT>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d017      	beq.n	800699a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800696e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006974:	4610      	mov	r0, r2
 8006976:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006978:	e00f      	b.n	800699a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f9f2 	bl	8006d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006980:	e00b      	b.n	800699a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f9ee 	bl	8006d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006988:	e007      	b.n	800699a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f9ea 	bl	8006d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006998:	e1b1      	b.n	8006cfe <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800699a:	bf00      	nop
    return;
 800699c:	e1af      	b.n	8006cfe <HAL_UART_IRQHandler+0x5f6>
 800699e:	bf00      	nop
 80069a0:	04000120 	.word	0x04000120
 80069a4:	08007cd7 	.word	0x08007cd7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	f040 816a 	bne.w	8006c86 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b6:	f003 0310 	and.w	r3, r3, #16
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 8163 	beq.w	8006c86 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 815c 	beq.w	8006c86 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2210      	movs	r2, #16
 80069d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e0:	2b40      	cmp	r3, #64	@ 0x40
 80069e2:	f040 80d4 	bne.w	8006b8e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 80ad 	beq.w	8006b56 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a06:	429a      	cmp	r2, r3
 8006a08:	f080 80a5 	bcs.w	8006b56 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a12:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f040 8086 	bne.w	8006b34 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a56:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1da      	bne.n	8006a28 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3308      	adds	r3, #8
 8006a78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a84:	f023 0301 	bic.w	r3, r3, #1
 8006a88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3308      	adds	r3, #8
 8006a92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006aa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e1      	bne.n	8006a72 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006abe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ac0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3308      	adds	r3, #8
 8006ace:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ad2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ad8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ae0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e3      	bne.n	8006aae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b04:	f023 0310 	bic.w	r3, r3, #16
 8006b08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	461a      	mov	r2, r3
 8006b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b1e:	e841 2300 	strex	r3, r2, [r1]
 8006b22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1e4      	bne.n	8006af4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fb fe56 	bl	80027e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7fa fe26 	bl	80017a0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006b54:	e0d5      	b.n	8006d02 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b60:	429a      	cmp	r2, r3
 8006b62:	f040 80ce 	bne.w	8006d02 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	f040 80c5 	bne.w	8006d02 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7fa fe0a 	bl	80017a0 <HAL_UARTEx_RxEventCallback>
      return;
 8006b8c:	e0b9      	b.n	8006d02 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 80ab 	beq.w	8006d06 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006bb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 80a6 	beq.w	8006d06 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006bdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006be2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006be4:	e841 2300 	strex	r3, r2, [r1]
 8006be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1e4      	bne.n	8006bba <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfa:	e853 3f00 	ldrex	r3, [r3]
 8006bfe:	623b      	str	r3, [r7, #32]
   return(result);
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	f023 0301 	bic.w	r3, r3, #1
 8006c06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3308      	adds	r3, #8
 8006c10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c14:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c1c:	e841 2300 	strex	r3, r2, [r1]
 8006c20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e3      	bne.n	8006bf0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	e853 3f00 	ldrex	r3, [r3]
 8006c48:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f023 0310 	bic.w	r3, r3, #16
 8006c50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006c5e:	61fb      	str	r3, [r7, #28]
 8006c60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c62:	69b9      	ldr	r1, [r7, #24]
 8006c64:	69fa      	ldr	r2, [r7, #28]
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	617b      	str	r3, [r7, #20]
   return(result);
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1e4      	bne.n	8006c3c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7fa fd8e 	bl	80017a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c84:	e03f      	b.n	8006d06 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00e      	beq.n	8006cb0 <HAL_UART_IRQHandler+0x5a8>
 8006c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d008      	beq.n	8006cb0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006ca6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f001 fa11 	bl	80080d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cae:	e02d      	b.n	8006d0c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00e      	beq.n	8006cda <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d008      	beq.n	8006cda <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d01c      	beq.n	8006d0a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	4798      	blx	r3
    }
    return;
 8006cd8:	e017      	b.n	8006d0a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d012      	beq.n	8006d0c <HAL_UART_IRQHandler+0x604>
 8006ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00c      	beq.n	8006d0c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 f805 	bl	8007d02 <UART_EndTransmit_IT>
    return;
 8006cf8:	e008      	b.n	8006d0c <HAL_UART_IRQHandler+0x604>
      return;
 8006cfa:	bf00      	nop
 8006cfc:	e006      	b.n	8006d0c <HAL_UART_IRQHandler+0x604>
    return;
 8006cfe:	bf00      	nop
 8006d00:	e004      	b.n	8006d0c <HAL_UART_IRQHandler+0x604>
      return;
 8006d02:	bf00      	nop
 8006d04:	e002      	b.n	8006d0c <HAL_UART_IRQHandler+0x604>
      return;
 8006d06:	bf00      	nop
 8006d08:	e000      	b.n	8006d0c <HAL_UART_IRQHandler+0x604>
    return;
 8006d0a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006d0c:	37e8      	adds	r7, #232	@ 0xe8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop

08006d14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d7c:	b08a      	sub	sp, #40	@ 0x28
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	431a      	orrs	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	4ba4      	ldr	r3, [pc, #656]	@ (8007038 <UART_SetConfig+0x2c0>)
 8006da8:	4013      	ands	r3, r2
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	6812      	ldr	r2, [r2, #0]
 8006dae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006db0:	430b      	orrs	r3, r1
 8006db2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	68da      	ldr	r2, [r3, #12]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a99      	ldr	r2, [pc, #612]	@ (800703c <UART_SetConfig+0x2c4>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d004      	beq.n	8006de4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006de0:	4313      	orrs	r3, r2
 8006de2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006df4:	430a      	orrs	r2, r1
 8006df6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a90      	ldr	r2, [pc, #576]	@ (8007040 <UART_SetConfig+0x2c8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d126      	bne.n	8006e50 <UART_SetConfig+0xd8>
 8006e02:	4b90      	ldr	r3, [pc, #576]	@ (8007044 <UART_SetConfig+0x2cc>)
 8006e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e08:	f003 0303 	and.w	r3, r3, #3
 8006e0c:	2b03      	cmp	r3, #3
 8006e0e:	d81b      	bhi.n	8006e48 <UART_SetConfig+0xd0>
 8006e10:	a201      	add	r2, pc, #4	@ (adr r2, 8006e18 <UART_SetConfig+0xa0>)
 8006e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e16:	bf00      	nop
 8006e18:	08006e29 	.word	0x08006e29
 8006e1c:	08006e39 	.word	0x08006e39
 8006e20:	08006e31 	.word	0x08006e31
 8006e24:	08006e41 	.word	0x08006e41
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e2e:	e116      	b.n	800705e <UART_SetConfig+0x2e6>
 8006e30:	2302      	movs	r3, #2
 8006e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e36:	e112      	b.n	800705e <UART_SetConfig+0x2e6>
 8006e38:	2304      	movs	r3, #4
 8006e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e3e:	e10e      	b.n	800705e <UART_SetConfig+0x2e6>
 8006e40:	2308      	movs	r3, #8
 8006e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e46:	e10a      	b.n	800705e <UART_SetConfig+0x2e6>
 8006e48:	2310      	movs	r3, #16
 8006e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e4e:	e106      	b.n	800705e <UART_SetConfig+0x2e6>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a7c      	ldr	r2, [pc, #496]	@ (8007048 <UART_SetConfig+0x2d0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d138      	bne.n	8006ecc <UART_SetConfig+0x154>
 8006e5a:	4b7a      	ldr	r3, [pc, #488]	@ (8007044 <UART_SetConfig+0x2cc>)
 8006e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e60:	f003 030c 	and.w	r3, r3, #12
 8006e64:	2b0c      	cmp	r3, #12
 8006e66:	d82d      	bhi.n	8006ec4 <UART_SetConfig+0x14c>
 8006e68:	a201      	add	r2, pc, #4	@ (adr r2, 8006e70 <UART_SetConfig+0xf8>)
 8006e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6e:	bf00      	nop
 8006e70:	08006ea5 	.word	0x08006ea5
 8006e74:	08006ec5 	.word	0x08006ec5
 8006e78:	08006ec5 	.word	0x08006ec5
 8006e7c:	08006ec5 	.word	0x08006ec5
 8006e80:	08006eb5 	.word	0x08006eb5
 8006e84:	08006ec5 	.word	0x08006ec5
 8006e88:	08006ec5 	.word	0x08006ec5
 8006e8c:	08006ec5 	.word	0x08006ec5
 8006e90:	08006ead 	.word	0x08006ead
 8006e94:	08006ec5 	.word	0x08006ec5
 8006e98:	08006ec5 	.word	0x08006ec5
 8006e9c:	08006ec5 	.word	0x08006ec5
 8006ea0:	08006ebd 	.word	0x08006ebd
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eaa:	e0d8      	b.n	800705e <UART_SetConfig+0x2e6>
 8006eac:	2302      	movs	r3, #2
 8006eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eb2:	e0d4      	b.n	800705e <UART_SetConfig+0x2e6>
 8006eb4:	2304      	movs	r3, #4
 8006eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eba:	e0d0      	b.n	800705e <UART_SetConfig+0x2e6>
 8006ebc:	2308      	movs	r3, #8
 8006ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ec2:	e0cc      	b.n	800705e <UART_SetConfig+0x2e6>
 8006ec4:	2310      	movs	r3, #16
 8006ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eca:	e0c8      	b.n	800705e <UART_SetConfig+0x2e6>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a5e      	ldr	r2, [pc, #376]	@ (800704c <UART_SetConfig+0x2d4>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d125      	bne.n	8006f22 <UART_SetConfig+0x1aa>
 8006ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8007044 <UART_SetConfig+0x2cc>)
 8006ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006edc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ee0:	2b30      	cmp	r3, #48	@ 0x30
 8006ee2:	d016      	beq.n	8006f12 <UART_SetConfig+0x19a>
 8006ee4:	2b30      	cmp	r3, #48	@ 0x30
 8006ee6:	d818      	bhi.n	8006f1a <UART_SetConfig+0x1a2>
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d00a      	beq.n	8006f02 <UART_SetConfig+0x18a>
 8006eec:	2b20      	cmp	r3, #32
 8006eee:	d814      	bhi.n	8006f1a <UART_SetConfig+0x1a2>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <UART_SetConfig+0x182>
 8006ef4:	2b10      	cmp	r3, #16
 8006ef6:	d008      	beq.n	8006f0a <UART_SetConfig+0x192>
 8006ef8:	e00f      	b.n	8006f1a <UART_SetConfig+0x1a2>
 8006efa:	2300      	movs	r3, #0
 8006efc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f00:	e0ad      	b.n	800705e <UART_SetConfig+0x2e6>
 8006f02:	2302      	movs	r3, #2
 8006f04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f08:	e0a9      	b.n	800705e <UART_SetConfig+0x2e6>
 8006f0a:	2304      	movs	r3, #4
 8006f0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f10:	e0a5      	b.n	800705e <UART_SetConfig+0x2e6>
 8006f12:	2308      	movs	r3, #8
 8006f14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f18:	e0a1      	b.n	800705e <UART_SetConfig+0x2e6>
 8006f1a:	2310      	movs	r3, #16
 8006f1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f20:	e09d      	b.n	800705e <UART_SetConfig+0x2e6>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a4a      	ldr	r2, [pc, #296]	@ (8007050 <UART_SetConfig+0x2d8>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d125      	bne.n	8006f78 <UART_SetConfig+0x200>
 8006f2c:	4b45      	ldr	r3, [pc, #276]	@ (8007044 <UART_SetConfig+0x2cc>)
 8006f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f36:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f38:	d016      	beq.n	8006f68 <UART_SetConfig+0x1f0>
 8006f3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f3c:	d818      	bhi.n	8006f70 <UART_SetConfig+0x1f8>
 8006f3e:	2b80      	cmp	r3, #128	@ 0x80
 8006f40:	d00a      	beq.n	8006f58 <UART_SetConfig+0x1e0>
 8006f42:	2b80      	cmp	r3, #128	@ 0x80
 8006f44:	d814      	bhi.n	8006f70 <UART_SetConfig+0x1f8>
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <UART_SetConfig+0x1d8>
 8006f4a:	2b40      	cmp	r3, #64	@ 0x40
 8006f4c:	d008      	beq.n	8006f60 <UART_SetConfig+0x1e8>
 8006f4e:	e00f      	b.n	8006f70 <UART_SetConfig+0x1f8>
 8006f50:	2300      	movs	r3, #0
 8006f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f56:	e082      	b.n	800705e <UART_SetConfig+0x2e6>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f5e:	e07e      	b.n	800705e <UART_SetConfig+0x2e6>
 8006f60:	2304      	movs	r3, #4
 8006f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f66:	e07a      	b.n	800705e <UART_SetConfig+0x2e6>
 8006f68:	2308      	movs	r3, #8
 8006f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f6e:	e076      	b.n	800705e <UART_SetConfig+0x2e6>
 8006f70:	2310      	movs	r3, #16
 8006f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f76:	e072      	b.n	800705e <UART_SetConfig+0x2e6>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a35      	ldr	r2, [pc, #212]	@ (8007054 <UART_SetConfig+0x2dc>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d12a      	bne.n	8006fd8 <UART_SetConfig+0x260>
 8006f82:	4b30      	ldr	r3, [pc, #192]	@ (8007044 <UART_SetConfig+0x2cc>)
 8006f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f90:	d01a      	beq.n	8006fc8 <UART_SetConfig+0x250>
 8006f92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f96:	d81b      	bhi.n	8006fd0 <UART_SetConfig+0x258>
 8006f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f9c:	d00c      	beq.n	8006fb8 <UART_SetConfig+0x240>
 8006f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fa2:	d815      	bhi.n	8006fd0 <UART_SetConfig+0x258>
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d003      	beq.n	8006fb0 <UART_SetConfig+0x238>
 8006fa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fac:	d008      	beq.n	8006fc0 <UART_SetConfig+0x248>
 8006fae:	e00f      	b.n	8006fd0 <UART_SetConfig+0x258>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fb6:	e052      	b.n	800705e <UART_SetConfig+0x2e6>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fbe:	e04e      	b.n	800705e <UART_SetConfig+0x2e6>
 8006fc0:	2304      	movs	r3, #4
 8006fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fc6:	e04a      	b.n	800705e <UART_SetConfig+0x2e6>
 8006fc8:	2308      	movs	r3, #8
 8006fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fce:	e046      	b.n	800705e <UART_SetConfig+0x2e6>
 8006fd0:	2310      	movs	r3, #16
 8006fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fd6:	e042      	b.n	800705e <UART_SetConfig+0x2e6>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a17      	ldr	r2, [pc, #92]	@ (800703c <UART_SetConfig+0x2c4>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d13a      	bne.n	8007058 <UART_SetConfig+0x2e0>
 8006fe2:	4b18      	ldr	r3, [pc, #96]	@ (8007044 <UART_SetConfig+0x2cc>)
 8006fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fe8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006fec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ff0:	d01a      	beq.n	8007028 <UART_SetConfig+0x2b0>
 8006ff2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ff6:	d81b      	bhi.n	8007030 <UART_SetConfig+0x2b8>
 8006ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ffc:	d00c      	beq.n	8007018 <UART_SetConfig+0x2a0>
 8006ffe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007002:	d815      	bhi.n	8007030 <UART_SetConfig+0x2b8>
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <UART_SetConfig+0x298>
 8007008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800700c:	d008      	beq.n	8007020 <UART_SetConfig+0x2a8>
 800700e:	e00f      	b.n	8007030 <UART_SetConfig+0x2b8>
 8007010:	2300      	movs	r3, #0
 8007012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007016:	e022      	b.n	800705e <UART_SetConfig+0x2e6>
 8007018:	2302      	movs	r3, #2
 800701a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800701e:	e01e      	b.n	800705e <UART_SetConfig+0x2e6>
 8007020:	2304      	movs	r3, #4
 8007022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007026:	e01a      	b.n	800705e <UART_SetConfig+0x2e6>
 8007028:	2308      	movs	r3, #8
 800702a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800702e:	e016      	b.n	800705e <UART_SetConfig+0x2e6>
 8007030:	2310      	movs	r3, #16
 8007032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007036:	e012      	b.n	800705e <UART_SetConfig+0x2e6>
 8007038:	efff69f3 	.word	0xefff69f3
 800703c:	40008000 	.word	0x40008000
 8007040:	40013800 	.word	0x40013800
 8007044:	40021000 	.word	0x40021000
 8007048:	40004400 	.word	0x40004400
 800704c:	40004800 	.word	0x40004800
 8007050:	40004c00 	.word	0x40004c00
 8007054:	40005000 	.word	0x40005000
 8007058:	2310      	movs	r3, #16
 800705a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a9f      	ldr	r2, [pc, #636]	@ (80072e0 <UART_SetConfig+0x568>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d17a      	bne.n	800715e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007068:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800706c:	2b08      	cmp	r3, #8
 800706e:	d824      	bhi.n	80070ba <UART_SetConfig+0x342>
 8007070:	a201      	add	r2, pc, #4	@ (adr r2, 8007078 <UART_SetConfig+0x300>)
 8007072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007076:	bf00      	nop
 8007078:	0800709d 	.word	0x0800709d
 800707c:	080070bb 	.word	0x080070bb
 8007080:	080070a5 	.word	0x080070a5
 8007084:	080070bb 	.word	0x080070bb
 8007088:	080070ab 	.word	0x080070ab
 800708c:	080070bb 	.word	0x080070bb
 8007090:	080070bb 	.word	0x080070bb
 8007094:	080070bb 	.word	0x080070bb
 8007098:	080070b3 	.word	0x080070b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800709c:	f7fd fd7a 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 80070a0:	61f8      	str	r0, [r7, #28]
        break;
 80070a2:	e010      	b.n	80070c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070a4:	4b8f      	ldr	r3, [pc, #572]	@ (80072e4 <UART_SetConfig+0x56c>)
 80070a6:	61fb      	str	r3, [r7, #28]
        break;
 80070a8:	e00d      	b.n	80070c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070aa:	f7fd fcdb 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 80070ae:	61f8      	str	r0, [r7, #28]
        break;
 80070b0:	e009      	b.n	80070c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070b6:	61fb      	str	r3, [r7, #28]
        break;
 80070b8:	e005      	b.n	80070c6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80070c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 80fb 	beq.w	80072c4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	4613      	mov	r3, r2
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	4413      	add	r3, r2
 80070d8:	69fa      	ldr	r2, [r7, #28]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d305      	bcc.n	80070ea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070e4:	69fa      	ldr	r2, [r7, #28]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d903      	bls.n	80070f2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80070f0:	e0e8      	b.n	80072c4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	2200      	movs	r2, #0
 80070f6:	461c      	mov	r4, r3
 80070f8:	4615      	mov	r5, r2
 80070fa:	f04f 0200 	mov.w	r2, #0
 80070fe:	f04f 0300 	mov.w	r3, #0
 8007102:	022b      	lsls	r3, r5, #8
 8007104:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007108:	0222      	lsls	r2, r4, #8
 800710a:	68f9      	ldr	r1, [r7, #12]
 800710c:	6849      	ldr	r1, [r1, #4]
 800710e:	0849      	lsrs	r1, r1, #1
 8007110:	2000      	movs	r0, #0
 8007112:	4688      	mov	r8, r1
 8007114:	4681      	mov	r9, r0
 8007116:	eb12 0a08 	adds.w	sl, r2, r8
 800711a:	eb43 0b09 	adc.w	fp, r3, r9
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	603b      	str	r3, [r7, #0]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800712c:	4650      	mov	r0, sl
 800712e:	4659      	mov	r1, fp
 8007130:	f7f9 fdfa 	bl	8000d28 <__aeabi_uldivmod>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	4613      	mov	r3, r2
 800713a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007142:	d308      	bcc.n	8007156 <UART_SetConfig+0x3de>
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800714a:	d204      	bcs.n	8007156 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	60da      	str	r2, [r3, #12]
 8007154:	e0b6      	b.n	80072c4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800715c:	e0b2      	b.n	80072c4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007166:	d15e      	bne.n	8007226 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007168:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800716c:	2b08      	cmp	r3, #8
 800716e:	d828      	bhi.n	80071c2 <UART_SetConfig+0x44a>
 8007170:	a201      	add	r2, pc, #4	@ (adr r2, 8007178 <UART_SetConfig+0x400>)
 8007172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007176:	bf00      	nop
 8007178:	0800719d 	.word	0x0800719d
 800717c:	080071a5 	.word	0x080071a5
 8007180:	080071ad 	.word	0x080071ad
 8007184:	080071c3 	.word	0x080071c3
 8007188:	080071b3 	.word	0x080071b3
 800718c:	080071c3 	.word	0x080071c3
 8007190:	080071c3 	.word	0x080071c3
 8007194:	080071c3 	.word	0x080071c3
 8007198:	080071bb 	.word	0x080071bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800719c:	f7fd fcfa 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 80071a0:	61f8      	str	r0, [r7, #28]
        break;
 80071a2:	e014      	b.n	80071ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071a4:	f7fd fd0c 	bl	8004bc0 <HAL_RCC_GetPCLK2Freq>
 80071a8:	61f8      	str	r0, [r7, #28]
        break;
 80071aa:	e010      	b.n	80071ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071ac:	4b4d      	ldr	r3, [pc, #308]	@ (80072e4 <UART_SetConfig+0x56c>)
 80071ae:	61fb      	str	r3, [r7, #28]
        break;
 80071b0:	e00d      	b.n	80071ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071b2:	f7fd fc57 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 80071b6:	61f8      	str	r0, [r7, #28]
        break;
 80071b8:	e009      	b.n	80071ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071be:	61fb      	str	r3, [r7, #28]
        break;
 80071c0:	e005      	b.n	80071ce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80071cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d077      	beq.n	80072c4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	005a      	lsls	r2, r3, #1
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	085b      	lsrs	r3, r3, #1
 80071de:	441a      	add	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	2b0f      	cmp	r3, #15
 80071ee:	d916      	bls.n	800721e <UART_SetConfig+0x4a6>
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071f6:	d212      	bcs.n	800721e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	f023 030f 	bic.w	r3, r3, #15
 8007200:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	085b      	lsrs	r3, r3, #1
 8007206:	b29b      	uxth	r3, r3
 8007208:	f003 0307 	and.w	r3, r3, #7
 800720c:	b29a      	uxth	r2, r3
 800720e:	8afb      	ldrh	r3, [r7, #22]
 8007210:	4313      	orrs	r3, r2
 8007212:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	8afa      	ldrh	r2, [r7, #22]
 800721a:	60da      	str	r2, [r3, #12]
 800721c:	e052      	b.n	80072c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007224:	e04e      	b.n	80072c4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007226:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800722a:	2b08      	cmp	r3, #8
 800722c:	d827      	bhi.n	800727e <UART_SetConfig+0x506>
 800722e:	a201      	add	r2, pc, #4	@ (adr r2, 8007234 <UART_SetConfig+0x4bc>)
 8007230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007234:	08007259 	.word	0x08007259
 8007238:	08007261 	.word	0x08007261
 800723c:	08007269 	.word	0x08007269
 8007240:	0800727f 	.word	0x0800727f
 8007244:	0800726f 	.word	0x0800726f
 8007248:	0800727f 	.word	0x0800727f
 800724c:	0800727f 	.word	0x0800727f
 8007250:	0800727f 	.word	0x0800727f
 8007254:	08007277 	.word	0x08007277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007258:	f7fd fc9c 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 800725c:	61f8      	str	r0, [r7, #28]
        break;
 800725e:	e014      	b.n	800728a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007260:	f7fd fcae 	bl	8004bc0 <HAL_RCC_GetPCLK2Freq>
 8007264:	61f8      	str	r0, [r7, #28]
        break;
 8007266:	e010      	b.n	800728a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007268:	4b1e      	ldr	r3, [pc, #120]	@ (80072e4 <UART_SetConfig+0x56c>)
 800726a:	61fb      	str	r3, [r7, #28]
        break;
 800726c:	e00d      	b.n	800728a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800726e:	f7fd fbf9 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8007272:	61f8      	str	r0, [r7, #28]
        break;
 8007274:	e009      	b.n	800728a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800727a:	61fb      	str	r3, [r7, #28]
        break;
 800727c:	e005      	b.n	800728a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800727e:	2300      	movs	r3, #0
 8007280:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007288:	bf00      	nop
    }

    if (pclk != 0U)
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d019      	beq.n	80072c4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	085a      	lsrs	r2, r3, #1
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	441a      	add	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b0f      	cmp	r3, #15
 80072a8:	d909      	bls.n	80072be <UART_SetConfig+0x546>
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072b0:	d205      	bcs.n	80072be <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	60da      	str	r2, [r3, #12]
 80072bc:	e002      	b.n	80072c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80072d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3728      	adds	r7, #40	@ 0x28
 80072d8:	46bd      	mov	sp, r7
 80072da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072de:	bf00      	nop
 80072e0:	40008000 	.word	0x40008000
 80072e4:	00f42400 	.word	0x00f42400

080072e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f4:	f003 0308 	and.w	r3, r3, #8
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00a      	beq.n	8007312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00a      	beq.n	8007378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737c:	f003 0310 	and.w	r3, r3, #16
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00a      	beq.n	800739a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739e:	f003 0320 	and.w	r3, r3, #32
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d01a      	beq.n	80073fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073e6:	d10a      	bne.n	80073fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	430a      	orrs	r2, r1
 800741e:	605a      	str	r2, [r3, #4]
  }
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b098      	sub	sp, #96	@ 0x60
 8007430:	af02      	add	r7, sp, #8
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800743c:	f7fa ff76 	bl	800232c <HAL_GetTick>
 8007440:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0308 	and.w	r3, r3, #8
 800744c:	2b08      	cmp	r3, #8
 800744e:	d12e      	bne.n	80074ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007450:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007458:	2200      	movs	r2, #0
 800745a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f88c 	bl	800757c <UART_WaitOnFlagUntilTimeout>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d021      	beq.n	80074ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800747a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800747e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007488:	647b      	str	r3, [r7, #68]	@ 0x44
 800748a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800748e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007490:	e841 2300 	strex	r3, r2, [r1]
 8007494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e6      	bne.n	800746a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e062      	b.n	8007574 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d149      	bne.n	8007550 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074c4:	2200      	movs	r2, #0
 80074c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f856 	bl	800757c <UART_WaitOnFlagUntilTimeout>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d03c      	beq.n	8007550 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074de:	e853 3f00 	ldrex	r3, [r3]
 80074e2:	623b      	str	r3, [r7, #32]
   return(result);
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	461a      	mov	r2, r3
 80074f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80074f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074fc:	e841 2300 	strex	r3, r2, [r1]
 8007500:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e6      	bne.n	80074d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3308      	adds	r3, #8
 800750e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	e853 3f00 	ldrex	r3, [r3]
 8007516:	60fb      	str	r3, [r7, #12]
   return(result);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 0301 	bic.w	r3, r3, #1
 800751e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3308      	adds	r3, #8
 8007526:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007528:	61fa      	str	r2, [r7, #28]
 800752a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	69b9      	ldr	r1, [r7, #24]
 800752e:	69fa      	ldr	r2, [r7, #28]
 8007530:	e841 2300 	strex	r3, r2, [r1]
 8007534:	617b      	str	r3, [r7, #20]
   return(result);
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e5      	bne.n	8007508 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e011      	b.n	8007574 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2220      	movs	r2, #32
 8007554:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3758      	adds	r7, #88	@ 0x58
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	603b      	str	r3, [r7, #0]
 8007588:	4613      	mov	r3, r2
 800758a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800758c:	e04f      	b.n	800762e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007594:	d04b      	beq.n	800762e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007596:	f7fa fec9 	bl	800232c <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d302      	bcc.n	80075ac <UART_WaitOnFlagUntilTimeout+0x30>
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e04e      	b.n	800764e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0304 	and.w	r3, r3, #4
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d037      	beq.n	800762e <UART_WaitOnFlagUntilTimeout+0xb2>
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b80      	cmp	r3, #128	@ 0x80
 80075c2:	d034      	beq.n	800762e <UART_WaitOnFlagUntilTimeout+0xb2>
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2b40      	cmp	r3, #64	@ 0x40
 80075c8:	d031      	beq.n	800762e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b08      	cmp	r3, #8
 80075d6:	d110      	bne.n	80075fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2208      	movs	r2, #8
 80075de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 f9c5 	bl	8007970 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2208      	movs	r2, #8
 80075ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e029      	b.n	800764e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007604:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007608:	d111      	bne.n	800762e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007612:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 f9ab 	bl	8007970 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2220      	movs	r2, #32
 800761e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e00f      	b.n	800764e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	69da      	ldr	r2, [r3, #28]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4013      	ands	r3, r2
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	429a      	cmp	r2, r3
 800763c:	bf0c      	ite	eq
 800763e:	2301      	moveq	r3, #1
 8007640:	2300      	movne	r3, #0
 8007642:	b2db      	uxtb	r3, r3
 8007644:	461a      	mov	r2, r3
 8007646:	79fb      	ldrb	r3, [r7, #7]
 8007648:	429a      	cmp	r2, r3
 800764a:	d0a0      	beq.n	800758e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
	...

08007658 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007658:	b480      	push	{r7}
 800765a:	b097      	sub	sp, #92	@ 0x5c
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	4613      	mov	r3, r2
 8007664:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	88fa      	ldrh	r2, [r7, #6]
 8007670:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	88fa      	ldrh	r2, [r7, #6]
 8007678:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800768a:	d10e      	bne.n	80076aa <UART_Start_Receive_IT+0x52>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d105      	bne.n	80076a0 <UART_Start_Receive_IT+0x48>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800769a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800769e:	e02d      	b.n	80076fc <UART_Start_Receive_IT+0xa4>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	22ff      	movs	r2, #255	@ 0xff
 80076a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80076a8:	e028      	b.n	80076fc <UART_Start_Receive_IT+0xa4>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10d      	bne.n	80076ce <UART_Start_Receive_IT+0x76>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d104      	bne.n	80076c4 <UART_Start_Receive_IT+0x6c>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	22ff      	movs	r2, #255	@ 0xff
 80076be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80076c2:	e01b      	b.n	80076fc <UART_Start_Receive_IT+0xa4>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	227f      	movs	r2, #127	@ 0x7f
 80076c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80076cc:	e016      	b.n	80076fc <UART_Start_Receive_IT+0xa4>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076d6:	d10d      	bne.n	80076f4 <UART_Start_Receive_IT+0x9c>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d104      	bne.n	80076ea <UART_Start_Receive_IT+0x92>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	227f      	movs	r2, #127	@ 0x7f
 80076e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80076e8:	e008      	b.n	80076fc <UART_Start_Receive_IT+0xa4>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	223f      	movs	r2, #63	@ 0x3f
 80076ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80076f2:	e003      	b.n	80076fc <UART_Start_Receive_IT+0xa4>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2222      	movs	r2, #34	@ 0x22
 8007708:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3308      	adds	r3, #8
 8007712:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007716:	e853 3f00 	ldrex	r3, [r3]
 800771a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800771c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771e:	f043 0301 	orr.w	r3, r3, #1
 8007722:	657b      	str	r3, [r7, #84]	@ 0x54
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3308      	adds	r3, #8
 800772a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800772c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800772e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007730:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007732:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007734:	e841 2300 	strex	r3, r2, [r1]
 8007738:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800773a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e5      	bne.n	800770c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007748:	d107      	bne.n	800775a <UART_Start_Receive_IT+0x102>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d103      	bne.n	800775a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	4a21      	ldr	r2, [pc, #132]	@ (80077dc <UART_Start_Receive_IT+0x184>)
 8007756:	669a      	str	r2, [r3, #104]	@ 0x68
 8007758:	e002      	b.n	8007760 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	4a20      	ldr	r2, [pc, #128]	@ (80077e0 <UART_Start_Receive_IT+0x188>)
 800775e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d019      	beq.n	800779c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007778:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800777c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007786:	637b      	str	r3, [r7, #52]	@ 0x34
 8007788:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800778c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e6      	bne.n	8007768 <UART_Start_Receive_IT+0x110>
 800779a:	e018      	b.n	80077ce <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	613b      	str	r3, [r7, #16]
   return(result);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f043 0320 	orr.w	r3, r3, #32
 80077b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077ba:	623b      	str	r3, [r7, #32]
 80077bc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	69f9      	ldr	r1, [r7, #28]
 80077c0:	6a3a      	ldr	r2, [r7, #32]
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e6      	bne.n	800779c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	375c      	adds	r7, #92	@ 0x5c
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	08007f15 	.word	0x08007f15
 80077e0:	08007d59 	.word	0x08007d59

080077e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b096      	sub	sp, #88	@ 0x58
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	4613      	mov	r3, r2
 80077f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	88fa      	ldrh	r2, [r7, #6]
 80077fc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2222      	movs	r2, #34	@ 0x22
 800780c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007814:	2b00      	cmp	r3, #0
 8007816:	d028      	beq.n	800786a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800781c:	4a3e      	ldr	r2, [pc, #248]	@ (8007918 <UART_Start_Receive_DMA+0x134>)
 800781e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007824:	4a3d      	ldr	r2, [pc, #244]	@ (800791c <UART_Start_Receive_DMA+0x138>)
 8007826:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800782c:	4a3c      	ldr	r2, [pc, #240]	@ (8007920 <UART_Start_Receive_DMA+0x13c>)
 800782e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007834:	2200      	movs	r2, #0
 8007836:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3324      	adds	r3, #36	@ 0x24
 8007842:	4619      	mov	r1, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007848:	461a      	mov	r2, r3
 800784a:	88fb      	ldrh	r3, [r7, #6]
 800784c:	f7fa ff68 	bl	8002720 <HAL_DMA_Start_IT>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d009      	beq.n	800786a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2210      	movs	r2, #16
 800785a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2220      	movs	r2, #32
 8007862:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e051      	b.n	800790e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d018      	beq.n	80078a4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800787a:	e853 3f00 	ldrex	r3, [r3]
 800787e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007886:	657b      	str	r3, [r7, #84]	@ 0x54
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007890:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007892:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007894:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007896:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007898:	e841 2300 	strex	r3, r2, [r1]
 800789c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800789e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1e6      	bne.n	8007872 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3308      	adds	r3, #8
 80078aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ae:	e853 3f00 	ldrex	r3, [r3]
 80078b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b6:	f043 0301 	orr.w	r3, r3, #1
 80078ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3308      	adds	r3, #8
 80078c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80078c4:	637a      	str	r2, [r7, #52]	@ 0x34
 80078c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80078ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078cc:	e841 2300 	strex	r3, r2, [r1]
 80078d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80078d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1e5      	bne.n	80078a4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3308      	adds	r3, #8
 80078de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	e853 3f00 	ldrex	r3, [r3]
 80078e6:	613b      	str	r3, [r7, #16]
   return(result);
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3308      	adds	r3, #8
 80078f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078f8:	623a      	str	r2, [r7, #32]
 80078fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	69f9      	ldr	r1, [r7, #28]
 80078fe:	6a3a      	ldr	r2, [r7, #32]
 8007900:	e841 2300 	strex	r3, r2, [r1]
 8007904:	61bb      	str	r3, [r7, #24]
   return(result);
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1e5      	bne.n	80078d8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3758      	adds	r7, #88	@ 0x58
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	08007aef 	.word	0x08007aef
 800791c:	08007c1b 	.word	0x08007c1b
 8007920:	08007c59 	.word	0x08007c59

08007924 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007924:	b480      	push	{r7}
 8007926:	b089      	sub	sp, #36	@ 0x24
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	e853 3f00 	ldrex	r3, [r3]
 8007938:	60bb      	str	r3, [r7, #8]
   return(result);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007940:	61fb      	str	r3, [r7, #28]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	461a      	mov	r2, r3
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	61bb      	str	r3, [r7, #24]
 800794c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794e:	6979      	ldr	r1, [r7, #20]
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	e841 2300 	strex	r3, r2, [r1]
 8007956:	613b      	str	r3, [r7, #16]
   return(result);
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1e6      	bne.n	800792c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2220      	movs	r2, #32
 8007962:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007964:	bf00      	nop
 8007966:	3724      	adds	r7, #36	@ 0x24
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007970:	b480      	push	{r7}
 8007972:	b095      	sub	sp, #84	@ 0x54
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007980:	e853 3f00 	ldrex	r3, [r3]
 8007984:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007988:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800798c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007996:	643b      	str	r3, [r7, #64]	@ 0x40
 8007998:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800799c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800799e:	e841 2300 	strex	r3, r2, [r1]
 80079a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1e6      	bne.n	8007978 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	3308      	adds	r3, #8
 80079b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b2:	6a3b      	ldr	r3, [r7, #32]
 80079b4:	e853 3f00 	ldrex	r3, [r3]
 80079b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	f023 0301 	bic.w	r3, r3, #1
 80079c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3308      	adds	r3, #8
 80079c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e5      	bne.n	80079aa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d118      	bne.n	8007a18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	e853 3f00 	ldrex	r3, [r3]
 80079f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	f023 0310 	bic.w	r3, r3, #16
 80079fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	461a      	mov	r2, r3
 8007a02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a04:	61bb      	str	r3, [r7, #24]
 8007a06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a08:	6979      	ldr	r1, [r7, #20]
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	e841 2300 	strex	r3, r2, [r1]
 8007a10:	613b      	str	r3, [r7, #16]
   return(result);
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e6      	bne.n	80079e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007a2c:	bf00      	nop
 8007a2e:	3754      	adds	r7, #84	@ 0x54
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b090      	sub	sp, #64	@ 0x40
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a44:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0320 	and.w	r3, r3, #32
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d137      	bne.n	8007ac4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3308      	adds	r3, #8
 8007a62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	623b      	str	r3, [r7, #32]
   return(result);
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3308      	adds	r3, #8
 8007a7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e5      	bne.n	8007a5c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	e853 3f00 	ldrex	r3, [r3]
 8007a9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aae:	61fb      	str	r3, [r7, #28]
 8007ab0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab2:	69b9      	ldr	r1, [r7, #24]
 8007ab4:	69fa      	ldr	r2, [r7, #28]
 8007ab6:	e841 2300 	strex	r3, r2, [r1]
 8007aba:	617b      	str	r3, [r7, #20]
   return(result);
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1e6      	bne.n	8007a90 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ac2:	e002      	b.n	8007aca <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007ac4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007ac6:	f7ff f925 	bl	8006d14 <HAL_UART_TxCpltCallback>
}
 8007aca:	bf00      	nop
 8007acc:	3740      	adds	r7, #64	@ 0x40
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ade:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f7ff f921 	bl	8006d28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ae6:	bf00      	nop
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b09c      	sub	sp, #112	@ 0x70
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0320 	and.w	r3, r3, #32
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d171      	bne.n	8007bee <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007b0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b1a:	e853 3f00 	ldrex	r3, [r3]
 8007b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b32:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b38:	e841 2300 	strex	r3, r2, [r1]
 8007b3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1e6      	bne.n	8007b12 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3308      	adds	r3, #8
 8007b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4e:	e853 3f00 	ldrex	r3, [r3]
 8007b52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b56:	f023 0301 	bic.w	r3, r3, #1
 8007b5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3308      	adds	r3, #8
 8007b62:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007b64:	647a      	str	r2, [r7, #68]	@ 0x44
 8007b66:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b6c:	e841 2300 	strex	r3, r2, [r1]
 8007b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1e5      	bne.n	8007b44 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3308      	adds	r3, #8
 8007b7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	623b      	str	r3, [r7, #32]
   return(result);
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3308      	adds	r3, #8
 8007b96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007b98:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ba0:	e841 2300 	strex	r3, r2, [r1]
 8007ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e5      	bne.n	8007b78 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d118      	bne.n	8007bee <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	e853 3f00 	ldrex	r3, [r3]
 8007bc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f023 0310 	bic.w	r3, r3, #16
 8007bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bda:	61fb      	str	r3, [r7, #28]
 8007bdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bde:	69b9      	ldr	r1, [r7, #24]
 8007be0:	69fa      	ldr	r2, [r7, #28]
 8007be2:	e841 2300 	strex	r3, r2, [r1]
 8007be6:	617b      	str	r3, [r7, #20]
   return(result);
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1e6      	bne.n	8007bbc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d107      	bne.n	8007c0c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007c02:	4619      	mov	r1, r3
 8007c04:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007c06:	f7f9 fdcb 	bl	80017a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c0a:	e002      	b.n	8007c12 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007c0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007c0e:	f7ff f895 	bl	8006d3c <HAL_UART_RxCpltCallback>
}
 8007c12:	bf00      	nop
 8007c14:	3770      	adds	r7, #112	@ 0x70
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d109      	bne.n	8007c4a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007c3c:	085b      	lsrs	r3, r3, #1
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	4619      	mov	r1, r3
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f7f9 fdac 	bl	80017a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c48:	e002      	b.n	8007c50 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f7ff f880 	bl	8006d50 <HAL_UART_RxHalfCpltCallback>
}
 8007c50:	bf00      	nop
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c64:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c6a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c7e:	2b80      	cmp	r3, #128	@ 0x80
 8007c80:	d109      	bne.n	8007c96 <UART_DMAError+0x3e>
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	2b21      	cmp	r3, #33	@ 0x21
 8007c86:	d106      	bne.n	8007c96 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8007c90:	6978      	ldr	r0, [r7, #20]
 8007c92:	f7ff fe47 	bl	8007924 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca0:	2b40      	cmp	r3, #64	@ 0x40
 8007ca2:	d109      	bne.n	8007cb8 <UART_DMAError+0x60>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2b22      	cmp	r3, #34	@ 0x22
 8007ca8:	d106      	bne.n	8007cb8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8007cb2:	6978      	ldr	r0, [r7, #20]
 8007cb4:	f7ff fe5c 	bl	8007970 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cbe:	f043 0210 	orr.w	r2, r3, #16
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cc8:	6978      	ldr	r0, [r7, #20]
 8007cca:	f7ff f84b 	bl	8006d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cce:	bf00      	nop
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b084      	sub	sp, #16
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f7ff f835 	bl	8006d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cfa:	bf00      	nop
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b088      	sub	sp, #32
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	e853 3f00 	ldrex	r3, [r3]
 8007d16:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d1e:	61fb      	str	r3, [r7, #28]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	461a      	mov	r2, r3
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	61bb      	str	r3, [r7, #24]
 8007d2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2c:	6979      	ldr	r1, [r7, #20]
 8007d2e:	69ba      	ldr	r2, [r7, #24]
 8007d30:	e841 2300 	strex	r3, r2, [r1]
 8007d34:	613b      	str	r3, [r7, #16]
   return(result);
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1e6      	bne.n	8007d0a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7fe ffe3 	bl	8006d14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d4e:	bf00      	nop
 8007d50:	3720      	adds	r7, #32
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
	...

08007d58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b09c      	sub	sp, #112	@ 0x70
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d66:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d70:	2b22      	cmp	r3, #34	@ 0x22
 8007d72:	f040 80be 	bne.w	8007ef2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007d7c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007d84:	b2d9      	uxtb	r1, r3
 8007d86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d90:	400a      	ands	r2, r1
 8007d92:	b2d2      	uxtb	r2, r2
 8007d94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	3b01      	subs	r3, #1
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f040 80a3 	bne.w	8007f06 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dc8:	e853 3f00 	ldrex	r3, [r3]
 8007dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007dde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007de0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007de4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007de6:	e841 2300 	strex	r3, r2, [r1]
 8007dea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1e6      	bne.n	8007dc0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3308      	adds	r3, #8
 8007df8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfc:	e853 3f00 	ldrex	r3, [r3]
 8007e00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e04:	f023 0301 	bic.w	r3, r3, #1
 8007e08:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3308      	adds	r3, #8
 8007e10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007e12:	647a      	str	r2, [r7, #68]	@ 0x44
 8007e14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e1a:	e841 2300 	strex	r3, r2, [r1]
 8007e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1e5      	bne.n	8007df2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a34      	ldr	r2, [pc, #208]	@ (8007f10 <UART_RxISR_8BIT+0x1b8>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d01f      	beq.n	8007e84 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d018      	beq.n	8007e84 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5a:	e853 3f00 	ldrex	r3, [r3]
 8007e5e:	623b      	str	r3, [r7, #32]
   return(result);
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e72:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e78:	e841 2300 	strex	r3, r2, [r1]
 8007e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e6      	bne.n	8007e52 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d12e      	bne.n	8007eea <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f023 0310 	bic.w	r3, r3, #16
 8007ea6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007eb0:	61fb      	str	r3, [r7, #28]
 8007eb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	69b9      	ldr	r1, [r7, #24]
 8007eb6:	69fa      	ldr	r2, [r7, #28]
 8007eb8:	e841 2300 	strex	r3, r2, [r1]
 8007ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e6      	bne.n	8007e92 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	f003 0310 	and.w	r3, r3, #16
 8007ece:	2b10      	cmp	r3, #16
 8007ed0:	d103      	bne.n	8007eda <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2210      	movs	r2, #16
 8007ed8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7f9 fc5c 	bl	80017a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ee8:	e00d      	b.n	8007f06 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7fe ff26 	bl	8006d3c <HAL_UART_RxCpltCallback>
}
 8007ef0:	e009      	b.n	8007f06 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	8b1b      	ldrh	r3, [r3, #24]
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0208 	orr.w	r2, r2, #8
 8007f02:	b292      	uxth	r2, r2
 8007f04:	831a      	strh	r2, [r3, #24]
}
 8007f06:	bf00      	nop
 8007f08:	3770      	adds	r7, #112	@ 0x70
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	40008000 	.word	0x40008000

08007f14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b09c      	sub	sp, #112	@ 0x70
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f2c:	2b22      	cmp	r3, #34	@ 0x22
 8007f2e:	f040 80be 	bne.w	80080ae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007f38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f40:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007f46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f56:	1c9a      	adds	r2, r3, #2
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	3b01      	subs	r3, #1
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f040 80a3 	bne.w	80080c2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007f8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f90:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f9c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007fa0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007fa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1e6      	bne.n	8007f7c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc0:	f023 0301 	bic.w	r3, r3, #1
 8007fc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3308      	adds	r3, #8
 8007fcc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007fce:	643a      	str	r2, [r7, #64]	@ 0x40
 8007fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fd6:	e841 2300 	strex	r3, r2, [r1]
 8007fda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1e5      	bne.n	8007fae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a34      	ldr	r2, [pc, #208]	@ (80080cc <UART_RxISR_16BIT+0x1b8>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d01f      	beq.n	8008040 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d018      	beq.n	8008040 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	e853 3f00 	ldrex	r3, [r3]
 800801a:	61fb      	str	r3, [r7, #28]
   return(result);
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008022:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	461a      	mov	r2, r3
 800802a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800802c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800802e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008030:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008034:	e841 2300 	strex	r3, r2, [r1]
 8008038:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800803a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e6      	bne.n	800800e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008044:	2b01      	cmp	r3, #1
 8008046:	d12e      	bne.n	80080a6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	e853 3f00 	ldrex	r3, [r3]
 800805a:	60bb      	str	r3, [r7, #8]
   return(result);
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	f023 0310 	bic.w	r3, r3, #16
 8008062:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	461a      	mov	r2, r3
 800806a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800806c:	61bb      	str	r3, [r7, #24]
 800806e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008070:	6979      	ldr	r1, [r7, #20]
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	e841 2300 	strex	r3, r2, [r1]
 8008078:	613b      	str	r3, [r7, #16]
   return(result);
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1e6      	bne.n	800804e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	f003 0310 	and.w	r3, r3, #16
 800808a:	2b10      	cmp	r3, #16
 800808c:	d103      	bne.n	8008096 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2210      	movs	r2, #16
 8008094:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7f9 fb7e 	bl	80017a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080a4:	e00d      	b.n	80080c2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7fe fe48 	bl	8006d3c <HAL_UART_RxCpltCallback>
}
 80080ac:	e009      	b.n	80080c2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	8b1b      	ldrh	r3, [r3, #24]
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0208 	orr.w	r2, r2, #8
 80080be:	b292      	uxth	r2, r2
 80080c0:	831a      	strh	r2, [r3, #24]
}
 80080c2:	bf00      	nop
 80080c4:	3770      	adds	r7, #112	@ 0x70
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	40008000 	.word	0x40008000

080080d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b08c      	sub	sp, #48	@ 0x30
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	4613      	mov	r3, r2
 80080f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080f8:	2b20      	cmp	r3, #32
 80080fa:	d142      	bne.n	8008182 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008102:	88fb      	ldrh	r3, [r7, #6]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e03b      	b.n	8008184 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2201      	movs	r2, #1
 8008110:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008118:	88fb      	ldrh	r3, [r7, #6]
 800811a:	461a      	mov	r2, r3
 800811c:	68b9      	ldr	r1, [r7, #8]
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f7ff fb60 	bl	80077e4 <UART_Start_Receive_DMA>
 8008124:	4603      	mov	r3, r0
 8008126:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800812a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800812e:	2b00      	cmp	r3, #0
 8008130:	d124      	bne.n	800817c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008136:	2b01      	cmp	r3, #1
 8008138:	d11d      	bne.n	8008176 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2210      	movs	r2, #16
 8008140:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	e853 3f00 	ldrex	r3, [r3]
 800814e:	617b      	str	r3, [r7, #20]
   return(result);
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f043 0310 	orr.w	r3, r3, #16
 8008156:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	461a      	mov	r2, r3
 800815e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008160:	627b      	str	r3, [r7, #36]	@ 0x24
 8008162:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008164:	6a39      	ldr	r1, [r7, #32]
 8008166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008168:	e841 2300 	strex	r3, r2, [r1]
 800816c:	61fb      	str	r3, [r7, #28]
   return(result);
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1e6      	bne.n	8008142 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008174:	e002      	b.n	800817c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800817c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008180:	e000      	b.n	8008184 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008182:	2302      	movs	r3, #2
  }
}
 8008184:	4618      	mov	r0, r3
 8008186:	3730      	adds	r7, #48	@ 0x30
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param huart Pointer to uart handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, UART_HandleTypeDef *huart) {
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
	GNSS->huart = huart;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	601a      	str	r2, [r3, #0]
	GNSS->year = 0;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = 0;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = 0;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = 0;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = 0;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = 0;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	GNSS->fixType = 0;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
	GNSS->lon = 0;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	679a      	str	r2, [r3, #120]	@ 0x78
	GNSS->lat = 0;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	GNSS->height = 0;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	GNSS->hMSL = 0;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	GNSS->hAcc = 0;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	GNSS->vAcc = 0;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	GNSS->gSpeed = 0;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	GNSS->headMot = 0;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
 8008212:	bf00      	nop
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <GNSS_ParseBuffer>:

/*!
 * Searching for a header in data buffer and matching class and message ID to buffer data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseBuffer(GNSS_StateHandle *GNSS) {
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]

	for (int var = 0; var <= 100; ++var) {
 8008226:	2300      	movs	r3, #0
 8008228:	60fb      	str	r3, [r7, #12]
 800822a:	e057      	b.n	80082dc <GNSS_ParseBuffer+0xbe>
		if (GNSS->uartWorkingBuffer[var] == 0xB5
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	4413      	add	r3, r2
 8008232:	3308      	adds	r3, #8
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	2bb5      	cmp	r3, #181	@ 0xb5
 8008238:	d14d      	bne.n	80082d6 <GNSS_ParseBuffer+0xb8>
				&& GNSS->uartWorkingBuffer[var + 1] == 0x62) {
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	3301      	adds	r3, #1
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	4413      	add	r3, r2
 8008242:	7a1b      	ldrb	r3, [r3, #8]
 8008244:	2b62      	cmp	r3, #98	@ 0x62
 8008246:	d146      	bne.n	80082d6 <GNSS_ParseBuffer+0xb8>
			if (GNSS->uartWorkingBuffer[var + 2] == 0x27
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	3302      	adds	r3, #2
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	4413      	add	r3, r2
 8008250:	7a1b      	ldrb	r3, [r3, #8]
 8008252:	2b27      	cmp	r3, #39	@ 0x27
 8008254:	d10a      	bne.n	800826c <GNSS_ParseBuffer+0x4e>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x03) { //Look at: 32.19.1.1 u-blox 8 Receiver description
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3303      	adds	r3, #3
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	4413      	add	r3, r2
 800825e:	7a1b      	ldrb	r3, [r3, #8]
 8008260:	2b03      	cmp	r3, #3
 8008262:	d103      	bne.n	800826c <GNSS_ParseBuffer+0x4e>
				GNSS_ParseUniqID(GNSS);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f85b 	bl	8008320 <GNSS_ParseUniqID>
 800826a:	e034      	b.n	80082d6 <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	3302      	adds	r3, #2
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	4413      	add	r3, r2
 8008274:	7a1b      	ldrb	r3, [r3, #8]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d10a      	bne.n	8008290 <GNSS_ParseBuffer+0x72>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x21) { //Look at: 32.17.14.1 u-blox 8 Receiver description
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	3303      	adds	r3, #3
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	4413      	add	r3, r2
 8008282:	7a1b      	ldrb	r3, [r3, #8]
 8008284:	2b21      	cmp	r3, #33	@ 0x21
 8008286:	d103      	bne.n	8008290 <GNSS_ParseBuffer+0x72>
				GNSS_ParseNavigatorData(GNSS);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fa65 	bl	8008758 <GNSS_ParseNavigatorData>
 800828e:	e022      	b.n	80082d6 <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	3302      	adds	r3, #2
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	4413      	add	r3, r2
 8008298:	7a1b      	ldrb	r3, [r3, #8]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d10a      	bne.n	80082b4 <GNSS_ParseBuffer+0x96>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x07) { //ook at: 32.17.30.1 u-blox 8 Receiver description
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3303      	adds	r3, #3
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	4413      	add	r3, r2
 80082a6:	7a1b      	ldrb	r3, [r3, #8]
 80082a8:	2b07      	cmp	r3, #7
 80082aa:	d103      	bne.n	80082b4 <GNSS_ParseBuffer+0x96>
				GNSS_ParsePVTData(GNSS);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f8ef 	bl	8008490 <GNSS_ParsePVTData>
 80082b2:	e010      	b.n	80082d6 <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	3302      	adds	r3, #2
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	4413      	add	r3, r2
 80082bc:	7a1b      	ldrb	r3, [r3, #8]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d109      	bne.n	80082d6 <GNSS_ParseBuffer+0xb8>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x02) { // Look at: 32.17.15.1 u-blox 8 Receiver description
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	3303      	adds	r3, #3
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	4413      	add	r3, r2
 80082ca:	7a1b      	ldrb	r3, [r3, #8]
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d102      	bne.n	80082d6 <GNSS_ParseBuffer+0xb8>
				GNSS_ParsePOSLLHData(GNSS);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fa77 	bl	80087c4 <GNSS_ParsePOSLLHData>
	for (int var = 0; var <= 100; ++var) {
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3301      	adds	r3, #1
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2b64      	cmp	r3, #100	@ 0x64
 80082e0:	dda4      	ble.n	800822c <GNSS_ParseBuffer+0xe>
			}
		}
	}
}
 80082e2:	bf00      	nop
 80082e4:	bf00      	nop
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <GNSS_GetPVTData>:

/*!
 * Make request for navigation position velocity time solution data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetPVTData(GNSS_StateHandle *GNSS) {
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, getPVTData,
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2208      	movs	r2, #8
 80082fa:	4907      	ldr	r1, [pc, #28]	@ (8008318 <GNSS_GetPVTData+0x2c>)
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7fe f8d5 	bl	80064ac <HAL_UART_Transmit_DMA>
			sizeof(getPVTData) / sizeof(uint8_t));
	HAL_UART_Receive_IT(GNSS->huart, GNSS_Handle.uartWorkingBuffer, 100);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2264      	movs	r2, #100	@ 0x64
 8008308:	4904      	ldr	r1, [pc, #16]	@ (800831c <GNSS_GetPVTData+0x30>)
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe f882 	bl	8006414 <HAL_UART_Receive_IT>
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	080102f4 	.word	0x080102f4
 800831c:	200002f4 	.word	0x200002f4

08008320 <GNSS_ParseUniqID>:
/*!
 * Parse data to unique chip ID standard.
 * Look at: 32.19.1.1 u-blox 8 Receiver description
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseUniqID(GNSS_StateHandle *GNSS) {
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 5; ++var) {
 8008328:	2300      	movs	r3, #0
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	e00d      	b.n	800834a <GNSS_ParseUniqID+0x2a>
		GNSS->uniqueID[var] = GNSS_Handle.uartWorkingBuffer[10 + var];
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	330a      	adds	r3, #10
 8008332:	4a0b      	ldr	r2, [pc, #44]	@ (8008360 <GNSS_ParseUniqID+0x40>)
 8008334:	4413      	add	r3, r2
 8008336:	7a19      	ldrb	r1, [r3, #8]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	4413      	add	r3, r2
 800833e:	3304      	adds	r3, #4
 8008340:	460a      	mov	r2, r1
 8008342:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 5; ++var) {
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	3301      	adds	r3, #1
 8008348:	60fb      	str	r3, [r7, #12]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2b04      	cmp	r3, #4
 800834e:	ddee      	ble.n	800832e <GNSS_ParseUniqID+0xe>
	}
}
 8008350:	bf00      	nop
 8008352:	bf00      	nop
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	200002ec 	.word	0x200002ec

08008364 <GNSS_SetMode>:

/*!
 * Changing the GNSS mode.
 * Look at: 32.10.19 u-blox 8 Receiver description
 */
void GNSS_SetMode(GNSS_StateHandle *GNSS, short gnssMode) {
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	460b      	mov	r3, r1
 800836e:	807b      	strh	r3, [r7, #2]
	if (gnssMode == 0) {
 8008370:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d107      	bne.n	8008388 <GNSS_SetMode+0x24>
		HAL_UART_Transmit_DMA(GNSS->huart, setPortableMode,sizeof(setPortableMode) / sizeof(uint8_t));
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	222c      	movs	r2, #44	@ 0x2c
 800837e:	493a      	ldr	r1, [pc, #232]	@ (8008468 <GNSS_SetMode+0x104>)
 8008380:	4618      	mov	r0, r3
 8008382:	f7fe f893 	bl	80064ac <HAL_UART_Transmit_DMA>
	} else if (gnssMode == 8) {
		HAL_UART_Transmit_DMA(GNSS->huart, setWirstMode,sizeof(setWirstMode) / sizeof(uint8_t));
	} else if (gnssMode == 9) {
		HAL_UART_Transmit_DMA(GNSS->huart, setBikeMode,sizeof(setBikeMode) / sizeof(uint8_t));
	}
}
 8008386:	e06a      	b.n	800845e <GNSS_SetMode+0xfa>
	} else if (gnssMode == 1) {
 8008388:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d107      	bne.n	80083a0 <GNSS_SetMode+0x3c>
		HAL_UART_Transmit_DMA(GNSS->huart, setStationaryMode,sizeof(setStationaryMode) / sizeof(uint8_t));
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	222c      	movs	r2, #44	@ 0x2c
 8008396:	4935      	ldr	r1, [pc, #212]	@ (800846c <GNSS_SetMode+0x108>)
 8008398:	4618      	mov	r0, r3
 800839a:	f7fe f887 	bl	80064ac <HAL_UART_Transmit_DMA>
}
 800839e:	e05e      	b.n	800845e <GNSS_SetMode+0xfa>
	} else if (gnssMode == 2) {
 80083a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d107      	bne.n	80083b8 <GNSS_SetMode+0x54>
		HAL_UART_Transmit_DMA(GNSS->huart, setPedestrianMode,sizeof(setPedestrianMode) / sizeof(uint8_t));
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	222c      	movs	r2, #44	@ 0x2c
 80083ae:	4930      	ldr	r1, [pc, #192]	@ (8008470 <GNSS_SetMode+0x10c>)
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fe f87b 	bl	80064ac <HAL_UART_Transmit_DMA>
}
 80083b6:	e052      	b.n	800845e <GNSS_SetMode+0xfa>
	} else if (gnssMode == 3) {
 80083b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d107      	bne.n	80083d0 <GNSS_SetMode+0x6c>
		HAL_UART_Transmit_DMA(GNSS->huart, setAutomotiveMode,sizeof(setAutomotiveMode) / sizeof(uint8_t));
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	222c      	movs	r2, #44	@ 0x2c
 80083c6:	492b      	ldr	r1, [pc, #172]	@ (8008474 <GNSS_SetMode+0x110>)
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fe f86f 	bl	80064ac <HAL_UART_Transmit_DMA>
}
 80083ce:	e046      	b.n	800845e <GNSS_SetMode+0xfa>
	} else if (gnssMode == 4) {
 80083d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80083d4:	2b04      	cmp	r3, #4
 80083d6:	d107      	bne.n	80083e8 <GNSS_SetMode+0x84>
		HAL_UART_Transmit_DMA(GNSS->huart, setAutomotiveMode,sizeof(setAutomotiveMode) / sizeof(uint8_t));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	222c      	movs	r2, #44	@ 0x2c
 80083de:	4925      	ldr	r1, [pc, #148]	@ (8008474 <GNSS_SetMode+0x110>)
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fe f863 	bl	80064ac <HAL_UART_Transmit_DMA>
}
 80083e6:	e03a      	b.n	800845e <GNSS_SetMode+0xfa>
	} else if (gnssMode == 5) {
 80083e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80083ec:	2b05      	cmp	r3, #5
 80083ee:	d107      	bne.n	8008400 <GNSS_SetMode+0x9c>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone1GMode,sizeof(setAirbone1GMode) / sizeof(uint8_t));
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	222c      	movs	r2, #44	@ 0x2c
 80083f6:	4920      	ldr	r1, [pc, #128]	@ (8008478 <GNSS_SetMode+0x114>)
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7fe f857 	bl	80064ac <HAL_UART_Transmit_DMA>
}
 80083fe:	e02e      	b.n	800845e <GNSS_SetMode+0xfa>
	} else if (gnssMode == 6) {
 8008400:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008404:	2b06      	cmp	r3, #6
 8008406:	d107      	bne.n	8008418 <GNSS_SetMode+0xb4>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone2GMode,sizeof(setAirbone2GMode) / sizeof(uint8_t));
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	222c      	movs	r2, #44	@ 0x2c
 800840e:	491b      	ldr	r1, [pc, #108]	@ (800847c <GNSS_SetMode+0x118>)
 8008410:	4618      	mov	r0, r3
 8008412:	f7fe f84b 	bl	80064ac <HAL_UART_Transmit_DMA>
}
 8008416:	e022      	b.n	800845e <GNSS_SetMode+0xfa>
	} else if (gnssMode == 7) {
 8008418:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800841c:	2b07      	cmp	r3, #7
 800841e:	d107      	bne.n	8008430 <GNSS_SetMode+0xcc>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone4GMode,sizeof(setAirbone4GMode) / sizeof(uint8_t));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	222c      	movs	r2, #44	@ 0x2c
 8008426:	4916      	ldr	r1, [pc, #88]	@ (8008480 <GNSS_SetMode+0x11c>)
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe f83f 	bl	80064ac <HAL_UART_Transmit_DMA>
}
 800842e:	e016      	b.n	800845e <GNSS_SetMode+0xfa>
	} else if (gnssMode == 8) {
 8008430:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008434:	2b08      	cmp	r3, #8
 8008436:	d107      	bne.n	8008448 <GNSS_SetMode+0xe4>
		HAL_UART_Transmit_DMA(GNSS->huart, setWirstMode,sizeof(setWirstMode) / sizeof(uint8_t));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	222c      	movs	r2, #44	@ 0x2c
 800843e:	4911      	ldr	r1, [pc, #68]	@ (8008484 <GNSS_SetMode+0x120>)
 8008440:	4618      	mov	r0, r3
 8008442:	f7fe f833 	bl	80064ac <HAL_UART_Transmit_DMA>
}
 8008446:	e00a      	b.n	800845e <GNSS_SetMode+0xfa>
	} else if (gnssMode == 9) {
 8008448:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800844c:	2b09      	cmp	r3, #9
 800844e:	d106      	bne.n	800845e <GNSS_SetMode+0xfa>
		HAL_UART_Transmit_DMA(GNSS->huart, setBikeMode,sizeof(setBikeMode) / sizeof(uint8_t));
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	222c      	movs	r2, #44	@ 0x2c
 8008456:	490c      	ldr	r1, [pc, #48]	@ (8008488 <GNSS_SetMode+0x124>)
 8008458:	4618      	mov	r0, r3
 800845a:	f7fe f827 	bl	80064ac <HAL_UART_Transmit_DMA>
}
 800845e:	bf00      	nop
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	080102fc 	.word	0x080102fc
 800846c:	08010328 	.word	0x08010328
 8008470:	08010354 	.word	0x08010354
 8008474:	08010380 	.word	0x08010380
 8008478:	080103ac 	.word	0x080103ac
 800847c:	080103d8 	.word	0x080103d8
 8008480:	08010404 	.word	0x08010404
 8008484:	08010430 	.word	0x08010430
 8008488:	0801045c 	.word	0x0801045c
 800848c:	00000000 	.word	0x00000000

08008490 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 8008490:	b580      	push	{r7, lr}
 8008492:	b08a      	sub	sp, #40	@ 0x28
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS_Handle.uartWorkingBuffer[10];
 8008498:	4b92      	ldr	r3, [pc, #584]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 800849a:	7c9a      	ldrb	r2, [r3, #18]
 800849c:	4b92      	ldr	r3, [pc, #584]	@ (80086e8 <GNSS_ParsePVTData+0x258>)
 800849e:	701a      	strb	r2, [r3, #0]
	GNSS->yearBytes[0]=GNSS_Handle.uartWorkingBuffer[10];
 80084a0:	4b90      	ldr	r3, [pc, #576]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 80084a2:	7c9a      	ldrb	r2, [r3, #18]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	uShort.bytes[1] = GNSS_Handle.uartWorkingBuffer[11];
 80084aa:	4b8e      	ldr	r3, [pc, #568]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 80084ac:	7cda      	ldrb	r2, [r3, #19]
 80084ae:	4b8e      	ldr	r3, [pc, #568]	@ (80086e8 <GNSS_ParsePVTData+0x258>)
 80084b0:	705a      	strb	r2, [r3, #1]
	GNSS->yearBytes[1]=GNSS_Handle.uartWorkingBuffer[11];
 80084b2:	4b8c      	ldr	r3, [pc, #560]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 80084b4:	7cda      	ldrb	r2, [r3, #19]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	GNSS->year = uShort.uShort;
 80084bc:	4b8a      	ldr	r3, [pc, #552]	@ (80086e8 <GNSS_ParsePVTData+0x258>)
 80084be:	881a      	ldrh	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = GNSS_Handle.uartWorkingBuffer[12];
 80084c6:	4b87      	ldr	r3, [pc, #540]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 80084c8:	7d1a      	ldrb	r2, [r3, #20]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = GNSS_Handle.uartWorkingBuffer[13];
 80084d0:	4b84      	ldr	r3, [pc, #528]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 80084d2:	7d5a      	ldrb	r2, [r3, #21]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = GNSS_Handle.uartWorkingBuffer[14];
 80084da:	4b82      	ldr	r3, [pc, #520]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 80084dc:	7d9a      	ldrb	r2, [r3, #22]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = GNSS_Handle.uartWorkingBuffer[15];
 80084e4:	4b7f      	ldr	r3, [pc, #508]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 80084e6:	7dda      	ldrb	r2, [r3, #23]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = GNSS_Handle.uartWorkingBuffer[16];
 80084ee:	4b7d      	ldr	r3, [pc, #500]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 80084f0:	7e1a      	ldrb	r2, [r3, #24]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	GNSS->fixType = GNSS_Handle.uartWorkingBuffer[26];
 80084f8:	4b7a      	ldr	r3, [pc, #488]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 80084fa:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77

	for (int var = 0; var < 4; ++var) {
 8008504:	2300      	movs	r3, #0
 8008506:	627b      	str	r3, [r7, #36]	@ 0x24
 8008508:	e017      	b.n	800853a <GNSS_ParsePVTData+0xaa>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 30];
 800850a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850c:	331e      	adds	r3, #30
 800850e:	4a75      	ldr	r2, [pc, #468]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 8008510:	4413      	add	r3, r2
 8008512:	7a19      	ldrb	r1, [r3, #8]
 8008514:	4a75      	ldr	r2, [pc, #468]	@ (80086ec <GNSS_ParsePVTData+0x25c>)
 8008516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008518:	4413      	add	r3, r2
 800851a:	460a      	mov	r2, r1
 800851c:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= GNSS_Handle.uartWorkingBuffer[var + 30];
 800851e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008520:	331e      	adds	r3, #30
 8008522:	4a70      	ldr	r2, [pc, #448]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 8008524:	4413      	add	r3, r2
 8008526:	7a19      	ldrb	r1, [r3, #8]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852c:	4413      	add	r3, r2
 800852e:	337c      	adds	r3, #124	@ 0x7c
 8008530:	460a      	mov	r2, r1
 8008532:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8008534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008536:	3301      	adds	r3, #1
 8008538:	627b      	str	r3, [r7, #36]	@ 0x24
 800853a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853c:	2b03      	cmp	r3, #3
 800853e:	dde4      	ble.n	800850a <GNSS_ParsePVTData+0x7a>
	}
	GNSS->lon = iLong.iLong;
 8008540:	4b6a      	ldr	r3, [pc, #424]	@ (80086ec <GNSS_ParsePVTData+0x25c>)
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	679a      	str	r2, [r3, #120]	@ 0x78
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 8008548:	4b68      	ldr	r3, [pc, #416]	@ (80086ec <GNSS_ParsePVTData+0x25c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	ee07 3a90 	vmov	s15, r3
 8008550:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008554:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80086f0 <GNSS_ParsePVTData+0x260>
 8008558:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
	for (int var = 0; var < 4; ++var) {
 8008562:	2300      	movs	r3, #0
 8008564:	623b      	str	r3, [r7, #32]
 8008566:	e017      	b.n	8008598 <GNSS_ParsePVTData+0x108>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 34];
 8008568:	6a3b      	ldr	r3, [r7, #32]
 800856a:	3322      	adds	r3, #34	@ 0x22
 800856c:	4a5d      	ldr	r2, [pc, #372]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 800856e:	4413      	add	r3, r2
 8008570:	7a19      	ldrb	r1, [r3, #8]
 8008572:	4a5e      	ldr	r2, [pc, #376]	@ (80086ec <GNSS_ParsePVTData+0x25c>)
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	4413      	add	r3, r2
 8008578:	460a      	mov	r2, r1
 800857a:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]=GNSS_Handle.uartWorkingBuffer[var + 34];
 800857c:	6a3b      	ldr	r3, [r7, #32]
 800857e:	3322      	adds	r3, #34	@ 0x22
 8008580:	4a58      	ldr	r2, [pc, #352]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 8008582:	4413      	add	r3, r2
 8008584:	7a19      	ldrb	r1, [r3, #8]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	4413      	add	r3, r2
 800858c:	3384      	adds	r3, #132	@ 0x84
 800858e:	460a      	mov	r2, r1
 8008590:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8008592:	6a3b      	ldr	r3, [r7, #32]
 8008594:	3301      	adds	r3, #1
 8008596:	623b      	str	r3, [r7, #32]
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	2b03      	cmp	r3, #3
 800859c:	dde4      	ble.n	8008568 <GNSS_ParsePVTData+0xd8>
	}
	GNSS->lat = iLong.iLong;
 800859e:	4b53      	ldr	r3, [pc, #332]	@ (80086ec <GNSS_ParsePVTData+0x25c>)
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 80085a8:	4b50      	ldr	r3, [pc, #320]	@ (80086ec <GNSS_ParsePVTData+0x25c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	ee07 3a90 	vmov	s15, r3
 80085b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085b4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80086f0 <GNSS_ParsePVTData+0x260>
 80085b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
	for (int var = 0; var < 4; ++var) {
 80085c2:	2300      	movs	r3, #0
 80085c4:	61fb      	str	r3, [r7, #28]
 80085c6:	e00c      	b.n	80085e2 <GNSS_ParsePVTData+0x152>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 38];
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	3326      	adds	r3, #38	@ 0x26
 80085cc:	4a45      	ldr	r2, [pc, #276]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 80085ce:	4413      	add	r3, r2
 80085d0:	7a19      	ldrb	r1, [r3, #8]
 80085d2:	4a46      	ldr	r2, [pc, #280]	@ (80086ec <GNSS_ParsePVTData+0x25c>)
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	4413      	add	r3, r2
 80085d8:	460a      	mov	r2, r1
 80085da:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	3301      	adds	r3, #1
 80085e0:	61fb      	str	r3, [r7, #28]
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	ddef      	ble.n	80085c8 <GNSS_ParsePVTData+0x138>
	}
	GNSS->height = iLong.iLong;
 80085e8:	4b40      	ldr	r3, [pc, #256]	@ (80086ec <GNSS_ParsePVTData+0x25c>)
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

	for (int var = 0; var < 4; ++var) {
 80085f2:	2300      	movs	r3, #0
 80085f4:	61bb      	str	r3, [r7, #24]
 80085f6:	e017      	b.n	8008628 <GNSS_ParsePVTData+0x198>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 42];
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	332a      	adds	r3, #42	@ 0x2a
 80085fc:	4a39      	ldr	r2, [pc, #228]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 80085fe:	4413      	add	r3, r2
 8008600:	7a19      	ldrb	r1, [r3, #8]
 8008602:	4a3a      	ldr	r2, [pc, #232]	@ (80086ec <GNSS_ParsePVTData+0x25c>)
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	4413      	add	r3, r2
 8008608:	460a      	mov	r2, r1
 800860a:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = GNSS_Handle.uartWorkingBuffer[var + 42];
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	332a      	adds	r3, #42	@ 0x2a
 8008610:	4a34      	ldr	r2, [pc, #208]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 8008612:	4413      	add	r3, r2
 8008614:	7a19      	ldrb	r1, [r3, #8]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	4413      	add	r3, r2
 800861c:	3398      	adds	r3, #152	@ 0x98
 800861e:	460a      	mov	r2, r1
 8008620:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	3301      	adds	r3, #1
 8008626:	61bb      	str	r3, [r7, #24]
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	2b03      	cmp	r3, #3
 800862c:	dde4      	ble.n	80085f8 <GNSS_ParsePVTData+0x168>
	}
	GNSS->hMSL = iLong.iLong;
 800862e:	4b2f      	ldr	r3, [pc, #188]	@ (80086ec <GNSS_ParsePVTData+0x25c>)
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	for (int var = 0; var < 4; ++var) {
 8008638:	2300      	movs	r3, #0
 800863a:	617b      	str	r3, [r7, #20]
 800863c:	e00c      	b.n	8008658 <GNSS_ParsePVTData+0x1c8>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 46];
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	332e      	adds	r3, #46	@ 0x2e
 8008642:	4a28      	ldr	r2, [pc, #160]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 8008644:	4413      	add	r3, r2
 8008646:	7a19      	ldrb	r1, [r3, #8]
 8008648:	4a2a      	ldr	r2, [pc, #168]	@ (80086f4 <GNSS_ParsePVTData+0x264>)
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	4413      	add	r3, r2
 800864e:	460a      	mov	r2, r1
 8008650:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	3301      	adds	r3, #1
 8008656:	617b      	str	r3, [r7, #20]
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	2b03      	cmp	r3, #3
 800865c:	ddef      	ble.n	800863e <GNSS_ParsePVTData+0x1ae>
	}
	GNSS->hAcc = uLong.uLong;
 800865e:	4b25      	ldr	r3, [pc, #148]	@ (80086f4 <GNSS_ParsePVTData+0x264>)
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	for (int var = 0; var < 4; ++var) {
 8008668:	2300      	movs	r3, #0
 800866a:	613b      	str	r3, [r7, #16]
 800866c:	e00c      	b.n	8008688 <GNSS_ParsePVTData+0x1f8>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 50];
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	3332      	adds	r3, #50	@ 0x32
 8008672:	4a1c      	ldr	r2, [pc, #112]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 8008674:	4413      	add	r3, r2
 8008676:	7a19      	ldrb	r1, [r3, #8]
 8008678:	4a1e      	ldr	r2, [pc, #120]	@ (80086f4 <GNSS_ParsePVTData+0x264>)
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	4413      	add	r3, r2
 800867e:	460a      	mov	r2, r1
 8008680:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	3301      	adds	r3, #1
 8008686:	613b      	str	r3, [r7, #16]
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	2b03      	cmp	r3, #3
 800868c:	ddef      	ble.n	800866e <GNSS_ParsePVTData+0x1de>
	}
	GNSS->vAcc = uLong.uLong;
 800868e:	4b19      	ldr	r3, [pc, #100]	@ (80086f4 <GNSS_ParsePVTData+0x264>)
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

	for (int var = 0; var < 4; ++var) {
 8008698:	2300      	movs	r3, #0
 800869a:	60fb      	str	r3, [r7, #12]
 800869c:	e017      	b.n	80086ce <GNSS_ParsePVTData+0x23e>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 66];
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3342      	adds	r3, #66	@ 0x42
 80086a2:	4a10      	ldr	r2, [pc, #64]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 80086a4:	4413      	add	r3, r2
 80086a6:	7a19      	ldrb	r1, [r3, #8]
 80086a8:	4a10      	ldr	r2, [pc, #64]	@ (80086ec <GNSS_ParsePVTData+0x25c>)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	4413      	add	r3, r2
 80086ae:	460a      	mov	r2, r1
 80086b0:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = GNSS_Handle.uartWorkingBuffer[var + 66];
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3342      	adds	r3, #66	@ 0x42
 80086b6:	4a0b      	ldr	r2, [pc, #44]	@ (80086e4 <GNSS_ParsePVTData+0x254>)
 80086b8:	4413      	add	r3, r2
 80086ba:	7a19      	ldrb	r1, [r3, #8]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	4413      	add	r3, r2
 80086c2:	33a8      	adds	r3, #168	@ 0xa8
 80086c4:	460a      	mov	r2, r1
 80086c6:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	3301      	adds	r3, #1
 80086cc:	60fb      	str	r3, [r7, #12]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b03      	cmp	r3, #3
 80086d2:	dde4      	ble.n	800869e <GNSS_ParsePVTData+0x20e>
	}
	GNSS->gSpeed = iLong.iLong;
 80086d4:	4b05      	ldr	r3, [pc, #20]	@ (80086ec <GNSS_ParsePVTData+0x25c>)
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	for (int var = 0; var < 4; ++var) {
 80086de:	2300      	movs	r3, #0
 80086e0:	60bb      	str	r3, [r7, #8]
 80086e2:	e016      	b.n	8008712 <GNSS_ParsePVTData+0x282>
 80086e4:	200002ec 	.word	0x200002ec
 80086e8:	20000918 	.word	0x20000918
 80086ec:	20000920 	.word	0x20000920
 80086f0:	4b189680 	.word	0x4b189680
 80086f4:	2000091c 	.word	0x2000091c
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 70];
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	3346      	adds	r3, #70	@ 0x46
 80086fc:	4a14      	ldr	r2, [pc, #80]	@ (8008750 <GNSS_ParsePVTData+0x2c0>)
 80086fe:	4413      	add	r3, r2
 8008700:	7a19      	ldrb	r1, [r3, #8]
 8008702:	4a14      	ldr	r2, [pc, #80]	@ (8008754 <GNSS_ParsePVTData+0x2c4>)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	4413      	add	r3, r2
 8008708:	460a      	mov	r2, r1
 800870a:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	3301      	adds	r3, #1
 8008710:	60bb      	str	r3, [r7, #8]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	2b03      	cmp	r3, #3
 8008716:	ddef      	ble.n	80086f8 <GNSS_ParsePVTData+0x268>
	}
	GNSS->headMot = iLong.iLong * 1e-5; // todo I'm not sure this good options.
 8008718:	4b0e      	ldr	r3, [pc, #56]	@ (8008754 <GNSS_ParsePVTData+0x2c4>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4618      	mov	r0, r3
 800871e:	f7f7 ff01 	bl	8000524 <__aeabi_i2d>
 8008722:	a309      	add	r3, pc, #36	@ (adr r3, 8008748 <GNSS_ParsePVTData+0x2b8>)
 8008724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008728:	f7f7 ff66 	bl	80005f8 <__aeabi_dmul>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	4610      	mov	r0, r2
 8008732:	4619      	mov	r1, r3
 8008734:	f7f8 fa10 	bl	8000b58 <__aeabi_d2iz>
 8008738:	4602      	mov	r2, r0
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
 8008740:	bf00      	nop
 8008742:	3728      	adds	r7, #40	@ 0x28
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	88e368f1 	.word	0x88e368f1
 800874c:	3ee4f8b5 	.word	0x3ee4f8b5
 8008750:	200002ec 	.word	0x200002ec
 8008754:	20000920 	.word	0x20000920

08008758 <GNSS_ParseNavigatorData>:
/*!
 * Parse data to UTC time solution standard.
 * Look at: 32.17.30.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseNavigatorData(GNSS_StateHandle *GNSS) {
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS_Handle.uartWorkingBuffer[18];
 8008760:	4b16      	ldr	r3, [pc, #88]	@ (80087bc <GNSS_ParseNavigatorData+0x64>)
 8008762:	7e9a      	ldrb	r2, [r3, #26]
 8008764:	4b16      	ldr	r3, [pc, #88]	@ (80087c0 <GNSS_ParseNavigatorData+0x68>)
 8008766:	701a      	strb	r2, [r3, #0]
	uShort.bytes[1] = GNSS_Handle.uartWorkingBuffer[19];
 8008768:	4b14      	ldr	r3, [pc, #80]	@ (80087bc <GNSS_ParseNavigatorData+0x64>)
 800876a:	7eda      	ldrb	r2, [r3, #27]
 800876c:	4b14      	ldr	r3, [pc, #80]	@ (80087c0 <GNSS_ParseNavigatorData+0x68>)
 800876e:	705a      	strb	r2, [r3, #1]
	GNSS->year = uShort.uShort;
 8008770:	4b13      	ldr	r3, [pc, #76]	@ (80087c0 <GNSS_ParseNavigatorData+0x68>)
 8008772:	881a      	ldrh	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = GNSS_Handle.uartWorkingBuffer[20];
 800877a:	4b10      	ldr	r3, [pc, #64]	@ (80087bc <GNSS_ParseNavigatorData+0x64>)
 800877c:	7f1a      	ldrb	r2, [r3, #28]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = GNSS_Handle.uartWorkingBuffer[21];
 8008784:	4b0d      	ldr	r3, [pc, #52]	@ (80087bc <GNSS_ParseNavigatorData+0x64>)
 8008786:	7f5a      	ldrb	r2, [r3, #29]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = GNSS_Handle.uartWorkingBuffer[22];
 800878e:	4b0b      	ldr	r3, [pc, #44]	@ (80087bc <GNSS_ParseNavigatorData+0x64>)
 8008790:	7f9a      	ldrb	r2, [r3, #30]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = GNSS_Handle.uartWorkingBuffer[23];
 8008798:	4b08      	ldr	r3, [pc, #32]	@ (80087bc <GNSS_ParseNavigatorData+0x64>)
 800879a:	7fda      	ldrb	r2, [r3, #31]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = GNSS_Handle.uartWorkingBuffer[24];
 80087a2:	4b06      	ldr	r3, [pc, #24]	@ (80087bc <GNSS_ParseNavigatorData+0x64>)
 80087a4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
}
 80087ae:	bf00      	nop
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	200002ec 	.word	0x200002ec
 80087c0:	20000918 	.word	0x20000918

080087c4 <GNSS_ParsePOSLLHData>:
/*!
 * Parse data to geodetic position solution standard.
 * Look at: 32.17.14.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePOSLLHData(GNSS_StateHandle *GNSS) {
 80087c4:	b480      	push	{r7}
 80087c6:	b089      	sub	sp, #36	@ 0x24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 4; ++var) {
 80087cc:	2300      	movs	r3, #0
 80087ce:	61fb      	str	r3, [r7, #28]
 80087d0:	e00c      	b.n	80087ec <GNSS_ParsePOSLLHData+0x28>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 10];
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	330a      	adds	r3, #10
 80087d6:	4a55      	ldr	r2, [pc, #340]	@ (800892c <GNSS_ParsePOSLLHData+0x168>)
 80087d8:	4413      	add	r3, r2
 80087da:	7a19      	ldrb	r1, [r3, #8]
 80087dc:	4a54      	ldr	r2, [pc, #336]	@ (8008930 <GNSS_ParsePOSLLHData+0x16c>)
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	4413      	add	r3, r2
 80087e2:	460a      	mov	r2, r1
 80087e4:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	3301      	adds	r3, #1
 80087ea:	61fb      	str	r3, [r7, #28]
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	ddef      	ble.n	80087d2 <GNSS_ParsePOSLLHData+0xe>
	}
	GNSS->lon = iLong.iLong;
 80087f2:	4b4f      	ldr	r3, [pc, #316]	@ (8008930 <GNSS_ParsePOSLLHData+0x16c>)
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	679a      	str	r2, [r3, #120]	@ 0x78
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 80087fa:	4b4d      	ldr	r3, [pc, #308]	@ (8008930 <GNSS_ParsePOSLLHData+0x16c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	ee07 3a90 	vmov	s15, r3
 8008802:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008806:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8008934 <GNSS_ParsePOSLLHData+0x170>
 800880a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88

	for (int var = 0; var < 4; ++var) {
 8008814:	2300      	movs	r3, #0
 8008816:	61bb      	str	r3, [r7, #24]
 8008818:	e00c      	b.n	8008834 <GNSS_ParsePOSLLHData+0x70>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 14];
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	330e      	adds	r3, #14
 800881e:	4a43      	ldr	r2, [pc, #268]	@ (800892c <GNSS_ParsePOSLLHData+0x168>)
 8008820:	4413      	add	r3, r2
 8008822:	7a19      	ldrb	r1, [r3, #8]
 8008824:	4a42      	ldr	r2, [pc, #264]	@ (8008930 <GNSS_ParsePOSLLHData+0x16c>)
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	4413      	add	r3, r2
 800882a:	460a      	mov	r2, r1
 800882c:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	3301      	adds	r3, #1
 8008832:	61bb      	str	r3, [r7, #24]
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	2b03      	cmp	r3, #3
 8008838:	ddef      	ble.n	800881a <GNSS_ParsePOSLLHData+0x56>
	}
	GNSS->lat = iLong.iLong;
 800883a:	4b3d      	ldr	r3, [pc, #244]	@ (8008930 <GNSS_ParsePOSLLHData+0x16c>)
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 8008844:	4b3a      	ldr	r3, [pc, #232]	@ (8008930 <GNSS_ParsePOSLLHData+0x16c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	ee07 3a90 	vmov	s15, r3
 800884c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008850:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008934 <GNSS_ParsePOSLLHData+0x170>
 8008854:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c

	for (int var = 0; var < 4; ++var) {
 800885e:	2300      	movs	r3, #0
 8008860:	617b      	str	r3, [r7, #20]
 8008862:	e00c      	b.n	800887e <GNSS_ParsePOSLLHData+0xba>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 18];
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	3312      	adds	r3, #18
 8008868:	4a30      	ldr	r2, [pc, #192]	@ (800892c <GNSS_ParsePOSLLHData+0x168>)
 800886a:	4413      	add	r3, r2
 800886c:	7a19      	ldrb	r1, [r3, #8]
 800886e:	4a30      	ldr	r2, [pc, #192]	@ (8008930 <GNSS_ParsePOSLLHData+0x16c>)
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	4413      	add	r3, r2
 8008874:	460a      	mov	r2, r1
 8008876:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	3301      	adds	r3, #1
 800887c:	617b      	str	r3, [r7, #20]
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2b03      	cmp	r3, #3
 8008882:	ddef      	ble.n	8008864 <GNSS_ParsePOSLLHData+0xa0>
	}
	GNSS->height = iLong.iLong;
 8008884:	4b2a      	ldr	r3, [pc, #168]	@ (8008930 <GNSS_ParsePOSLLHData+0x16c>)
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

	for (int var = 0; var < 4; ++var) {
 800888e:	2300      	movs	r3, #0
 8008890:	613b      	str	r3, [r7, #16]
 8008892:	e00c      	b.n	80088ae <GNSS_ParsePOSLLHData+0xea>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 22];
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	3316      	adds	r3, #22
 8008898:	4a24      	ldr	r2, [pc, #144]	@ (800892c <GNSS_ParsePOSLLHData+0x168>)
 800889a:	4413      	add	r3, r2
 800889c:	7a19      	ldrb	r1, [r3, #8]
 800889e:	4a24      	ldr	r2, [pc, #144]	@ (8008930 <GNSS_ParsePOSLLHData+0x16c>)
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	4413      	add	r3, r2
 80088a4:	460a      	mov	r2, r1
 80088a6:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	3301      	adds	r3, #1
 80088ac:	613b      	str	r3, [r7, #16]
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	ddef      	ble.n	8008894 <GNSS_ParsePOSLLHData+0xd0>
	}
	GNSS->hMSL = iLong.iLong;
 80088b4:	4b1e      	ldr	r3, [pc, #120]	@ (8008930 <GNSS_ParsePOSLLHData+0x16c>)
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	for (int var = 0; var < 4; ++var) {
 80088be:	2300      	movs	r3, #0
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	e00c      	b.n	80088de <GNSS_ParsePOSLLHData+0x11a>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 26];
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	331a      	adds	r3, #26
 80088c8:	4a18      	ldr	r2, [pc, #96]	@ (800892c <GNSS_ParsePOSLLHData+0x168>)
 80088ca:	4413      	add	r3, r2
 80088cc:	7a19      	ldrb	r1, [r3, #8]
 80088ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008938 <GNSS_ParsePOSLLHData+0x174>)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4413      	add	r3, r2
 80088d4:	460a      	mov	r2, r1
 80088d6:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	3301      	adds	r3, #1
 80088dc:	60fb      	str	r3, [r7, #12]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2b03      	cmp	r3, #3
 80088e2:	ddef      	ble.n	80088c4 <GNSS_ParsePOSLLHData+0x100>
	}
	GNSS->hAcc = uLong.uLong;
 80088e4:	4b14      	ldr	r3, [pc, #80]	@ (8008938 <GNSS_ParsePOSLLHData+0x174>)
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	for (int var = 0; var < 4; ++var) {
 80088ee:	2300      	movs	r3, #0
 80088f0:	60bb      	str	r3, [r7, #8]
 80088f2:	e00c      	b.n	800890e <GNSS_ParsePOSLLHData+0x14a>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 30];
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	331e      	adds	r3, #30
 80088f8:	4a0c      	ldr	r2, [pc, #48]	@ (800892c <GNSS_ParsePOSLLHData+0x168>)
 80088fa:	4413      	add	r3, r2
 80088fc:	7a19      	ldrb	r1, [r3, #8]
 80088fe:	4a0e      	ldr	r2, [pc, #56]	@ (8008938 <GNSS_ParsePOSLLHData+0x174>)
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	4413      	add	r3, r2
 8008904:	460a      	mov	r2, r1
 8008906:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	3301      	adds	r3, #1
 800890c:	60bb      	str	r3, [r7, #8]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2b03      	cmp	r3, #3
 8008912:	ddef      	ble.n	80088f4 <GNSS_ParsePOSLLHData+0x130>
	}
	GNSS->vAcc = uLong.uLong;
 8008914:	4b08      	ldr	r3, [pc, #32]	@ (8008938 <GNSS_ParsePOSLLHData+0x174>)
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 800891e:	bf00      	nop
 8008920:	3724      	adds	r7, #36	@ 0x24
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	200002ec 	.word	0x200002ec
 8008930:	20000920 	.word	0x20000920
 8008934:	4b189680 	.word	0x4b189680
 8008938:	2000091c 	.word	0x2000091c

0800893c <GNSS_LoadConfig>:

/*!
 *  Sends the basic configuration: Activation of the UBX standard, change of NMEA version to 4.10 and turn on of the Galileo system.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_LoadConfig(GNSS_StateHandle *GNSS) {
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, configUBX,
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	221c      	movs	r2, #28
 800894a:	490f      	ldr	r1, [pc, #60]	@ (8008988 <GNSS_LoadConfig+0x4c>)
 800894c:	4618      	mov	r0, r3
 800894e:	f7fd fdad 	bl	80064ac <HAL_UART_Transmit_DMA>
			sizeof(configUBX) / sizeof(uint8_t));
	HAL_Delay(250);
 8008952:	20fa      	movs	r0, #250	@ 0xfa
 8008954:	f7f9 fcf6 	bl	8002344 <HAL_Delay>
	HAL_UART_Transmit_DMA(GNSS->huart, setNMEA410,
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	221c      	movs	r2, #28
 800895e:	490b      	ldr	r1, [pc, #44]	@ (800898c <GNSS_LoadConfig+0x50>)
 8008960:	4618      	mov	r0, r3
 8008962:	f7fd fda3 	bl	80064ac <HAL_UART_Transmit_DMA>
			sizeof(setNMEA410) / sizeof(uint8_t));
	HAL_Delay(250);
 8008966:	20fa      	movs	r0, #250	@ 0xfa
 8008968:	f7f9 fcec 	bl	8002344 <HAL_Delay>
	HAL_UART_Transmit_DMA(GNSS->huart, setGNSS,
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	222c      	movs	r2, #44	@ 0x2c
 8008972:	4907      	ldr	r1, [pc, #28]	@ (8008990 <GNSS_LoadConfig+0x54>)
 8008974:	4618      	mov	r0, r3
 8008976:	f7fd fd99 	bl	80064ac <HAL_UART_Transmit_DMA>
			sizeof(setGNSS) / sizeof(uint8_t));
	HAL_Delay(250);
 800897a:	20fa      	movs	r0, #250	@ 0xfa
 800897c:	f7f9 fce2 	bl	8002344 <HAL_Delay>
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	08010290 	.word	0x08010290
 800898c:	080102ac 	.word	0x080102ac
 8008990:	080102c8 	.word	0x080102c8

08008994 <mpu6500_read_hal>:
 */
uint8_t mpu6500_read_hal(I2C_HandleTypeDef *hi2c, uint16_t i2c_addr_shifted, uint32_t timeout,
                         int16_t (*accel_raw)[3], float (*accel_g)[3],
                         int16_t (*gyro_raw)[3], float (*gyro_dps)[3],
                         uint16_t *len)
{
 8008994:	b590      	push	{r4, r7, lr}
 8008996:	f2ad 4d3c 	subw	sp, sp, #1084	@ 0x43c
 800899a:	af04      	add	r7, sp, #16
 800899c:	f507 6485 	add.w	r4, r7, #1064	@ 0x428
 80089a0:	f2a4 441c 	subw	r4, r4, #1052	@ 0x41c
 80089a4:	6020      	str	r0, [r4, #0]
 80089a6:	4608      	mov	r0, r1
 80089a8:	f507 6185 	add.w	r1, r7, #1064	@ 0x428
 80089ac:	f2a1 4124 	subw	r1, r1, #1060	@ 0x424
 80089b0:	600a      	str	r2, [r1, #0]
 80089b2:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 80089b6:	f5a2 6285 	sub.w	r2, r2, #1064	@ 0x428
 80089ba:	6013      	str	r3, [r2, #0]
 80089bc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80089c0:	f2a3 431e 	subw	r3, r3, #1054	@ 0x41e
 80089c4:	4602      	mov	r2, r0
 80089c6:	801a      	strh	r2, [r3, #0]
    // Size needs to accommodate max FIFO read (1024 bytes) or normal read (14 bytes).
    // Using a large buffer on the stack can be risky on memory-constrained MCUs.
    uint8_t read_buffer[1024]; // Be mindful of stack usage!

    // --- Parameter Checks ---
    if (hi2c == NULL || accel_raw == NULL || accel_g == NULL ||
 80089c8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80089cc:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d016      	beq.n	8008a04 <mpu6500_read_hal+0x70>
 80089d6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80089da:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00f      	beq.n	8008a04 <mpu6500_read_hal+0x70>
 80089e4:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00b      	beq.n	8008a04 <mpu6500_read_hal+0x70>
 80089ec:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d007      	beq.n	8008a04 <mpu6500_read_hal+0x70>
        gyro_raw == NULL || gyro_dps == NULL || len == NULL)
 80089f4:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d003      	beq.n	8008a04 <mpu6500_read_hal+0x70>
 80089fc:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d102      	bne.n	8008a0a <mpu6500_read_hal+0x76>
    {
        return MPU6500_ERR_PARAM; // return error: null pointer
 8008a04:	2302      	movs	r3, #2
 8008a06:	f001 b830 	b.w	8009a6a <mpu6500_read_hal+0x10d6>
    }
    if ((*len) == 0)
 8008a0a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d102      	bne.n	8008a1a <mpu6500_read_hal+0x86>
    {
        return MPU6500_ERR_LEN_ZERO; // return error: length is zero
 8008a14:	2304      	movs	r3, #4
 8008a16:	f001 b828 	b.w	8009a6a <mpu6500_read_hal+0x10d6>
    }

    // --- Read configurations using HAL ---
    hal_res = HAL_I2C_Mem_Read(hi2c, i2c_addr_shifted, MPU6500_REG_USER_CTRL,
 8008a1a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008a1e:	f2a3 431e 	subw	r3, r3, #1054	@ 0x41e
 8008a22:	8819      	ldrh	r1, [r3, #0]
 8008a24:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008a28:	f2a3 401c 	subw	r0, r3, #1052	@ 0x41c
 8008a2c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008a30:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	9302      	str	r3, [sp, #8]
 8008a38:	2301      	movs	r3, #1
 8008a3a:	9301      	str	r3, [sp, #4]
 8008a3c:	f207 4319 	addw	r3, r7, #1049	@ 0x419
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	2301      	movs	r3, #1
 8008a44:	226a      	movs	r2, #106	@ 0x6a
 8008a46:	6800      	ldr	r0, [r0, #0]
 8008a48:	f7fa fdcc 	bl	80035e4 <HAL_I2C_Mem_Read>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	f887 3421 	strb.w	r3, [r7, #1057]	@ 0x421
                               I2C_MEMADD_SIZE_8BIT, &user_ctrl_reg, 1, timeout);
    if (hal_res != HAL_OK) { /* printf("Debug: Read USER_CTRL failed (%d)\n", hal_res); */ return MPU6500_ERR_READ; }
 8008a52:	f897 3421 	ldrb.w	r3, [r7, #1057]	@ 0x421
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d002      	beq.n	8008a60 <mpu6500_read_hal+0xcc>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	f001 b805 	b.w	8009a6a <mpu6500_read_hal+0x10d6>

    hal_res = HAL_I2C_Mem_Read(hi2c, i2c_addr_shifted, MPU6500_REG_ACCEL_CONFIG,
 8008a60:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008a64:	f2a3 431e 	subw	r3, r3, #1054	@ 0x41e
 8008a68:	8819      	ldrh	r1, [r3, #0]
 8008a6a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008a6e:	f2a3 401c 	subw	r0, r3, #1052	@ 0x41c
 8008a72:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008a76:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	9302      	str	r3, [sp, #8]
 8008a7e:	2301      	movs	r3, #1
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	2301      	movs	r3, #1
 8008a8a:	221c      	movs	r2, #28
 8008a8c:	6800      	ldr	r0, [r0, #0]
 8008a8e:	f7fa fda9 	bl	80035e4 <HAL_I2C_Mem_Read>
 8008a92:	4603      	mov	r3, r0
 8008a94:	f887 3421 	strb.w	r3, [r7, #1057]	@ 0x421
                               I2C_MEMADD_SIZE_8BIT, &accel_conf_reg, 1, timeout);
    if (hal_res != HAL_OK) { /* printf("Debug: Read ACCEL_CONFIG failed (%d)\n", hal_res); */ return MPU6500_ERR_READ; }
 8008a98:	f897 3421 	ldrb.w	r3, [r7, #1057]	@ 0x421
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <mpu6500_read_hal+0x112>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	f000 bfe2 	b.w	8009a6a <mpu6500_read_hal+0x10d6>

    hal_res = HAL_I2C_Mem_Read(hi2c, i2c_addr_shifted, MPU6500_REG_GYRO_CONFIG,
 8008aa6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008aaa:	f2a3 431e 	subw	r3, r3, #1054	@ 0x41e
 8008aae:	8819      	ldrh	r1, [r3, #0]
 8008ab0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008ab4:	f2a3 401c 	subw	r0, r3, #1052	@ 0x41c
 8008ab8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008abc:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	9302      	str	r3, [sp, #8]
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	9301      	str	r3, [sp, #4]
 8008ac8:	f207 4317 	addw	r3, r7, #1047	@ 0x417
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	2301      	movs	r3, #1
 8008ad0:	221b      	movs	r2, #27
 8008ad2:	6800      	ldr	r0, [r0, #0]
 8008ad4:	f7fa fd86 	bl	80035e4 <HAL_I2C_Mem_Read>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	f887 3421 	strb.w	r3, [r7, #1057]	@ 0x421
                               I2C_MEMADD_SIZE_8BIT, &gyro_conf_reg, 1, timeout);
    if (hal_res != HAL_OK) { /* printf("Debug: Read GYRO_CONFIG failed (%d)\n", hal_res); */ return MPU6500_ERR_READ; }
 8008ade:	f897 3421 	ldrb.w	r3, [r7, #1057]	@ 0x421
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d002      	beq.n	8008aec <mpu6500_read_hal+0x158>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	f000 bfbf 	b.w	8009a6a <mpu6500_read_hal+0x10d6>

    // Extract sensitivity settings (FS_SEL bits)
    accel_fs_sel = (accel_conf_reg >> 3) & 0x03;
 8008aec:	f897 3418 	ldrb.w	r3, [r7, #1048]	@ 0x418
 8008af0:	08db      	lsrs	r3, r3, #3
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	f003 0303 	and.w	r3, r3, #3
 8008af8:	f887 3420 	strb.w	r3, [r7, #1056]	@ 0x420
    gyro_fs_sel  = (gyro_conf_reg >> 3) & 0x03;
 8008afc:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 8008b00:	08db      	lsrs	r3, r3, #3
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	f003 0303 	and.w	r3, r3, #3
 8008b08:	f887 341f 	strb.w	r3, [r7, #1055]	@ 0x41f

    // --- Check if FIFO mode is enabled (USER_CTRL bit 6) ---
    if ((user_ctrl_reg & (1 << 6)) != 0)
 8008b0c:	f897 3419 	ldrb.w	r3, [r7, #1049]	@ 0x419
 8008b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 8540 	beq.w	800959a <mpu6500_read_hal+0xc06>
        uint16_t count_bytes;
        uint16_t num_samples;
        uint16_t i;

        // Read FIFO_EN register to verify expected configuration (Accel + Gyro)
        hal_res = HAL_I2C_Mem_Read(hi2c, i2c_addr_shifted, MPU6500_REG_FIFO_EN,
 8008b1a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008b1e:	f2a3 431e 	subw	r3, r3, #1054	@ 0x41e
 8008b22:	8819      	ldrh	r1, [r3, #0]
 8008b24:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008b28:	f2a3 401c 	subw	r0, r3, #1052	@ 0x41c
 8008b2c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008b30:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	9302      	str	r3, [sp, #8]
 8008b38:	2301      	movs	r3, #1
 8008b3a:	9301      	str	r3, [sp, #4]
 8008b3c:	f107 0313 	add.w	r3, r7, #19
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	2301      	movs	r3, #1
 8008b44:	2223      	movs	r2, #35	@ 0x23
 8008b46:	6800      	ldr	r0, [r0, #0]
 8008b48:	f7fa fd4c 	bl	80035e4 <HAL_I2C_Mem_Read>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	f887 3421 	strb.w	r3, [r7, #1057]	@ 0x421
                                   I2C_MEMADD_SIZE_8BIT, &fifo_en_conf, 1, timeout);
        if (hal_res != HAL_OK) { /* printf("Debug: Read FIFO_EN failed (%d)\n", hal_res); */ return MPU6500_ERR_READ; }
 8008b52:	f897 3421 	ldrb.w	r3, [r7, #1057]	@ 0x421
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <mpu6500_read_hal+0x1cc>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	f000 bf85 	b.w	8009a6a <mpu6500_read_hal+0x10d6>

        // Check if Accel (bit 3) and Gyro (bits 4,5,6) are enabled
        // 0x78 = 0b0111 1000 (Gyro X,Y,Z + Accel)
        if (fifo_en_conf != 0x78)
 8008b60:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008b64:	f2a3 4315 	subw	r3, r3, #1045	@ 0x415
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	2b78      	cmp	r3, #120	@ 0x78
 8008b6c:	d002      	beq.n	8008b74 <mpu6500_read_hal+0x1e0>
        {
            // Allow only accel+gyro data in FIFO for this specific implementation
             /* printf("Debug: Unexpected FIFO_EN config (0x%02X), expected 0x78\n", fifo_en_conf); */
            return MPU6500_ERR_FIFO_CONF;
 8008b6e:	2306      	movs	r3, #6
 8008b70:	f000 bf7b 	b.w	8009a6a <mpu6500_read_hal+0x10d6>
        }

        // Read FIFO Count (High and Low bytes)
        hal_res = HAL_I2C_Mem_Read(hi2c, i2c_addr_shifted, MPU6500_REG_FIFO_COUNTH,
 8008b74:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008b78:	f2a3 431e 	subw	r3, r3, #1054	@ 0x41e
 8008b7c:	8819      	ldrh	r1, [r3, #0]
 8008b7e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008b82:	f2a3 401c 	subw	r0, r3, #1052	@ 0x41c
 8008b86:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008b8a:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	9302      	str	r3, [sp, #8]
 8008b92:	2302      	movs	r3, #2
 8008b94:	9301      	str	r3, [sp, #4]
 8008b96:	f107 0310 	add.w	r3, r7, #16
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	2272      	movs	r2, #114	@ 0x72
 8008ba0:	6800      	ldr	r0, [r0, #0]
 8008ba2:	f7fa fd1f 	bl	80035e4 <HAL_I2C_Mem_Read>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	f887 3421 	strb.w	r3, [r7, #1057]	@ 0x421
                                   I2C_MEMADD_SIZE_8BIT, fifo_count_buf, 2, timeout);
        if (hal_res != HAL_OK) { /* printf("Debug: Read FIFO_COUNT failed (%d)\n", hal_res); */ return MPU6500_ERR_READ; }
 8008bac:	f897 3421 	ldrb.w	r3, [r7, #1057]	@ 0x421
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <mpu6500_read_hal+0x226>
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	f000 bf58 	b.w	8009a6a <mpu6500_read_hal+0x10d6>

        count_bytes = (uint16_t)(((uint16_t)fifo_count_buf[0] << 8) | fifo_count_buf[1]);
 8008bba:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008bbe:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	b21b      	sxth	r3, r3
 8008bc6:	021b      	lsls	r3, r3, #8
 8008bc8:	b21a      	sxth	r2, r3
 8008bca:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008bce:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8008bd2:	785b      	ldrb	r3, [r3, #1]
 8008bd4:	b21b      	sxth	r3, r3
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	b21b      	sxth	r3, r3
 8008bda:	f8a7 3426 	strh.w	r3, [r7, #1062]	@ 0x426

        // Limit bytes to prevent overflow reads and check against internal buffer size
        if (count_bytes > sizeof(read_buffer)) {
 8008bde:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	@ 0x426
 8008be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008be6:	d903      	bls.n	8008bf0 <mpu6500_read_hal+0x25c>
            /* printf("Debug: Warning - FIFO count (%d) > buffer size (%d). Limiting.\n", count_bytes, sizeof(read_buffer)); */
            count_bytes = sizeof(read_buffer);
 8008be8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bec:	f8a7 3426 	strh.w	r3, [r7, #1062]	@ 0x426
        }
        // Datasheet implies max 1024, but checking against buffer is safer
        if (count_bytes >= 1024) {
 8008bf0:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	@ 0x426
 8008bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bf8:	d303      	bcc.n	8008c02 <mpu6500_read_hal+0x26e>
             /* printf("Debug: Warning - FIFO count near/at max (%d bytes).\n", count_bytes); */
             // Note: If overflow truly happened *before* this read, data might be corrupted.
             // Consider adding FIFO reset logic here or in initialization if overflows are expected.
             count_bytes = 1024; // Cap at theoretical max / buffer size
 8008bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bfe:	f8a7 3426 	strh.w	r3, [r7, #1062]	@ 0x426
        }


        // Calculate how many samples fit in the available bytes (12 bytes per sample)
        uint16_t available_samples = count_bytes / 12;
 8008c02:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	@ 0x426
 8008c06:	4a2f      	ldr	r2, [pc, #188]	@ (8008cc4 <mpu6500_read_hal+0x330>)
 8008c08:	fba2 2303 	umull	r2, r3, r2, r3
 8008c0c:	08db      	lsrs	r3, r3, #3
 8008c0e:	f8a7 341c 	strh.w	r3, [r7, #1052]	@ 0x41c
        uint16_t requested_max_samples = (*len);
 8008c12:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	f8a7 341a 	strh.w	r3, [r7, #1050]	@ 0x41a

        num_samples = available_samples;
 8008c1c:	f8b7 341c 	ldrh.w	r3, [r7, #1052]	@ 0x41c
 8008c20:	f8a7 3424 	strh.w	r3, [r7, #1060]	@ 0x424
        if (num_samples > requested_max_samples) {
 8008c24:	f8b7 2424 	ldrh.w	r2, [r7, #1060]	@ 0x424
 8008c28:	f8b7 341a 	ldrh.w	r3, [r7, #1050]	@ 0x41a
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d903      	bls.n	8008c38 <mpu6500_read_hal+0x2a4>
            num_samples = requested_max_samples; // Limit by user request
 8008c30:	f8b7 341a 	ldrh.w	r3, [r7, #1050]	@ 0x41a
 8008c34:	f8a7 3424 	strh.w	r3, [r7, #1060]	@ 0x424
        }

        count_bytes = num_samples * 12; // Final number of bytes to read
 8008c38:	f8b7 3424 	ldrh.w	r3, [r7, #1060]	@ 0x424
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	0052      	lsls	r2, r2, #1
 8008c40:	4413      	add	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	f8a7 3426 	strh.w	r3, [r7, #1062]	@ 0x426

        if (num_samples == 0) {
 8008c48:	f8b7 3424 	ldrh.w	r3, [r7, #1060]	@ 0x424
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d106      	bne.n	8008c5e <mpu6500_read_hal+0x2ca>
            *len = 0; // No complete samples available or requested
 8008c50:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8008c54:	2200      	movs	r2, #0
 8008c56:	801a      	strh	r2, [r3, #0]
            return MPU6500_OK; // Not an error, just no data
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f000 bf06 	b.w	8009a6a <mpu6500_read_hal+0x10d6>
        }

        // Read the data from FIFO register (MPU6500_REG_R_W) into the local buffer
        hal_res = HAL_I2C_Mem_Read(hi2c, i2c_addr_shifted, MPU6500_REG_R_W,
 8008c5e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008c62:	f2a3 431e 	subw	r3, r3, #1054	@ 0x41e
 8008c66:	8819      	ldrh	r1, [r3, #0]
 8008c68:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008c6c:	f2a3 401c 	subw	r0, r3, #1052	@ 0x41c
 8008c70:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008c74:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	9302      	str	r3, [sp, #8]
 8008c7c:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	@ 0x426
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	f107 0314 	add.w	r3, r7, #20
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	2301      	movs	r3, #1
 8008c8a:	2274      	movs	r2, #116	@ 0x74
 8008c8c:	6800      	ldr	r0, [r0, #0]
 8008c8e:	f7fa fca9 	bl	80035e4 <HAL_I2C_Mem_Read>
 8008c92:	4603      	mov	r3, r0
 8008c94:	f887 3421 	strb.w	r3, [r7, #1057]	@ 0x421
                                   I2C_MEMADD_SIZE_8BIT, read_buffer, count_bytes, timeout);
        if (hal_res != HAL_OK)
 8008c98:	f897 3421 	ldrb.w	r3, [r7, #1057]	@ 0x421
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d006      	beq.n	8008cae <mpu6500_read_hal+0x31a>
        {
             /* printf("Debug: Read FIFO data failed (%d)\n", hal_res); */
            *len = 0; // Indicate no data was successfully read
 8008ca0:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	801a      	strh	r2, [r3, #0]
            return MPU6500_ERR_READ;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f000 bede 	b.w	8009a6a <mpu6500_read_hal+0x10d6>
        }

        // --- Process the read FIFO data ---
        *len = num_samples; // Update the output length
 8008cae:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8008cb2:	f8b7 2424 	ldrh.w	r2, [r7, #1060]	@ 0x424
 8008cb6:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < num_samples; i++)
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f8a7 3422 	strh.w	r3, [r7, #1058]	@ 0x422
 8008cbe:	f000 bc63 	b.w	8009588 <mpu6500_read_hal+0xbf4>
 8008cc2:	bf00      	nop
 8008cc4:	aaaaaaab 	.word	0xaaaaaaab
 8008cc8:	46800000 	.word	0x46800000
 8008ccc:	46000000 	.word	0x46000000
        {
            // Extract raw values (Big Endian) from the local buffer
            accel_raw[i][0] = (int16_t)(((uint16_t)read_buffer[i * 12 + 0] << 8) | read_buffer[i * 12 + 1]);
 8008cd0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	005b      	lsls	r3, r3, #1
 8008cd8:	4413      	add	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	461a      	mov	r2, r3
 8008cde:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008ce2:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8008ce6:	5c9b      	ldrb	r3, [r3, r2]
 8008ce8:	b21b      	sxth	r3, r3
 8008cea:	021b      	lsls	r3, r3, #8
 8008cec:	b218      	sxth	r0, r3
 8008cee:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	4413      	add	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8008d00:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8008d04:	5cd3      	ldrb	r3, [r2, r3]
 8008d06:	b219      	sxth	r1, r3
 8008d08:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	005b      	lsls	r3, r3, #1
 8008d10:	4413      	add	r3, r2
 8008d12:	005b      	lsls	r3, r3, #1
 8008d14:	461a      	mov	r2, r3
 8008d16:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008d1a:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4413      	add	r3, r2
 8008d22:	ea40 0201 	orr.w	r2, r0, r1
 8008d26:	b212      	sxth	r2, r2
 8008d28:	801a      	strh	r2, [r3, #0]
            accel_raw[i][1] = (int16_t)(((uint16_t)read_buffer[i * 12 + 2] << 8) | read_buffer[i * 12 + 3]);
 8008d2a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008d2e:	4613      	mov	r3, r2
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	4413      	add	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	3302      	adds	r3, #2
 8008d38:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8008d3c:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8008d40:	5cd3      	ldrb	r3, [r2, r3]
 8008d42:	b21b      	sxth	r3, r3
 8008d44:	021b      	lsls	r3, r3, #8
 8008d46:	b218      	sxth	r0, r3
 8008d48:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	005b      	lsls	r3, r3, #1
 8008d50:	4413      	add	r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	3303      	adds	r3, #3
 8008d56:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8008d5a:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8008d5e:	5cd3      	ldrb	r3, [r2, r3]
 8008d60:	b219      	sxth	r1, r3
 8008d62:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008d66:	4613      	mov	r3, r2
 8008d68:	005b      	lsls	r3, r3, #1
 8008d6a:	4413      	add	r3, r2
 8008d6c:	005b      	lsls	r3, r3, #1
 8008d6e:	461a      	mov	r2, r3
 8008d70:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008d74:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	ea40 0201 	orr.w	r2, r0, r1
 8008d80:	b212      	sxth	r2, r2
 8008d82:	805a      	strh	r2, [r3, #2]
            accel_raw[i][2] = (int16_t)(((uint16_t)read_buffer[i * 12 + 4] << 8) | read_buffer[i * 12 + 5]);
 8008d84:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008d88:	4613      	mov	r3, r2
 8008d8a:	005b      	lsls	r3, r3, #1
 8008d8c:	4413      	add	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	3304      	adds	r3, #4
 8008d92:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8008d96:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8008d9a:	5cd3      	ldrb	r3, [r2, r3]
 8008d9c:	b21b      	sxth	r3, r3
 8008d9e:	021b      	lsls	r3, r3, #8
 8008da0:	b218      	sxth	r0, r3
 8008da2:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008da6:	4613      	mov	r3, r2
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	4413      	add	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	3305      	adds	r3, #5
 8008db0:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8008db4:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8008db8:	5cd3      	ldrb	r3, [r2, r3]
 8008dba:	b219      	sxth	r1, r3
 8008dbc:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	005b      	lsls	r3, r3, #1
 8008dc4:	4413      	add	r3, r2
 8008dc6:	005b      	lsls	r3, r3, #1
 8008dc8:	461a      	mov	r2, r3
 8008dca:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008dce:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	ea40 0201 	orr.w	r2, r0, r1
 8008dda:	b212      	sxth	r2, r2
 8008ddc:	809a      	strh	r2, [r3, #4]
            gyro_raw[i][0]  = (int16_t)(((uint16_t)read_buffer[i * 12 + 6] << 8) | read_buffer[i * 12 + 7]);
 8008dde:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008de2:	4613      	mov	r3, r2
 8008de4:	005b      	lsls	r3, r3, #1
 8008de6:	4413      	add	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	3306      	adds	r3, #6
 8008dec:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8008df0:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8008df4:	5cd3      	ldrb	r3, [r2, r3]
 8008df6:	b21b      	sxth	r3, r3
 8008df8:	021b      	lsls	r3, r3, #8
 8008dfa:	b218      	sxth	r0, r3
 8008dfc:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008e00:	4613      	mov	r3, r2
 8008e02:	005b      	lsls	r3, r3, #1
 8008e04:	4413      	add	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	3307      	adds	r3, #7
 8008e0a:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8008e0e:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8008e12:	5cd3      	ldrb	r3, [r2, r3]
 8008e14:	b219      	sxth	r1, r3
 8008e16:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	005b      	lsls	r3, r3, #1
 8008e1e:	4413      	add	r3, r2
 8008e20:	005b      	lsls	r3, r3, #1
 8008e22:	461a      	mov	r2, r3
 8008e24:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8008e28:	4413      	add	r3, r2
 8008e2a:	ea40 0201 	orr.w	r2, r0, r1
 8008e2e:	b212      	sxth	r2, r2
 8008e30:	801a      	strh	r2, [r3, #0]
            gyro_raw[i][1]  = (int16_t)(((uint16_t)read_buffer[i * 12 + 8] << 8) | read_buffer[i * 12 + 9]);
 8008e32:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008e36:	4613      	mov	r3, r2
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	4413      	add	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	3308      	adds	r3, #8
 8008e40:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8008e44:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8008e48:	5cd3      	ldrb	r3, [r2, r3]
 8008e4a:	b21b      	sxth	r3, r3
 8008e4c:	021b      	lsls	r3, r3, #8
 8008e4e:	b218      	sxth	r0, r3
 8008e50:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008e54:	4613      	mov	r3, r2
 8008e56:	005b      	lsls	r3, r3, #1
 8008e58:	4413      	add	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	3309      	adds	r3, #9
 8008e5e:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8008e62:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8008e66:	5cd3      	ldrb	r3, [r2, r3]
 8008e68:	b219      	sxth	r1, r3
 8008e6a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008e6e:	4613      	mov	r3, r2
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	4413      	add	r3, r2
 8008e74:	005b      	lsls	r3, r3, #1
 8008e76:	461a      	mov	r2, r3
 8008e78:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8008e7c:	4413      	add	r3, r2
 8008e7e:	ea40 0201 	orr.w	r2, r0, r1
 8008e82:	b212      	sxth	r2, r2
 8008e84:	805a      	strh	r2, [r3, #2]
            gyro_raw[i][2]  = (int16_t)(((uint16_t)read_buffer[i * 12 + 10] << 8) | read_buffer[i * 12 + 11]);
 8008e86:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	4413      	add	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	330a      	adds	r3, #10
 8008e94:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8008e98:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8008e9c:	5cd3      	ldrb	r3, [r2, r3]
 8008e9e:	b21b      	sxth	r3, r3
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	b218      	sxth	r0, r3
 8008ea4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	005b      	lsls	r3, r3, #1
 8008eac:	4413      	add	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	330b      	adds	r3, #11
 8008eb2:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8008eb6:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8008eba:	5cd3      	ldrb	r3, [r2, r3]
 8008ebc:	b219      	sxth	r1, r3
 8008ebe:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	005b      	lsls	r3, r3, #1
 8008ec6:	4413      	add	r3, r2
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	461a      	mov	r2, r3
 8008ecc:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8008ed0:	4413      	add	r3, r2
 8008ed2:	ea40 0201 	orr.w	r2, r0, r1
 8008ed6:	b212      	sxth	r2, r2
 8008ed8:	809a      	strh	r2, [r3, #4]

            // --- Convert raw values to physical units ---
            // Accel conversion
            if (accel_fs_sel == 0) { // ±2g
 8008eda:	f897 3420 	ldrb.w	r3, [r7, #1056]	@ 0x420
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d169      	bne.n	8008fb6 <mpu6500_read_hal+0x622>
                accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;
 8008ee2:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	4413      	add	r3, r2
 8008eec:	005b      	lsls	r3, r3, #1
 8008eee:	461a      	mov	r2, r3
 8008ef0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008ef4:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4413      	add	r3, r2
 8008efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f00:	ee07 3a90 	vmov	s15, r3
 8008f04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f08:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	005b      	lsls	r3, r3, #1
 8008f10:	4413      	add	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	461a      	mov	r2, r3
 8008f16:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8008f1a:	4413      	add	r3, r2
 8008f1c:	ed5f 6a96 	vldr	s13, [pc, #-600]	@ 8008cc8 <mpu6500_read_hal+0x334>
 8008f20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f24:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;
 8008f28:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	005b      	lsls	r3, r3, #1
 8008f30:	4413      	add	r3, r2
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	461a      	mov	r2, r3
 8008f36:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008f3a:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4413      	add	r3, r2
 8008f42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008f46:	ee07 3a90 	vmov	s15, r3
 8008f4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f4e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008f52:	4613      	mov	r3, r2
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	4413      	add	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8008f60:	4413      	add	r3, r2
 8008f62:	ed5f 6aa7 	vldr	s13, [pc, #-668]	@ 8008cc8 <mpu6500_read_hal+0x334>
 8008f66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f6a:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;
 8008f6e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008f72:	4613      	mov	r3, r2
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	4413      	add	r3, r2
 8008f78:	005b      	lsls	r3, r3, #1
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008f80:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4413      	add	r3, r2
 8008f88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008f8c:	ee07 3a90 	vmov	s15, r3
 8008f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f94:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008f98:	4613      	mov	r3, r2
 8008f9a:	005b      	lsls	r3, r3, #1
 8008f9c:	4413      	add	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8008fa6:	4413      	add	r3, r2
 8008fa8:	ed5f 6ab9 	vldr	s13, [pc, #-740]	@ 8008cc8 <mpu6500_read_hal+0x334>
 8008fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008fb0:	edc3 7a02 	vstr	s15, [r3, #8]
 8008fb4:	e144      	b.n	8009240 <mpu6500_read_hal+0x8ac>
            } else if (accel_fs_sel == 1) { // ±4g
 8008fb6:	f897 3420 	ldrb.w	r3, [r7, #1056]	@ 0x420
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d169      	bne.n	8009092 <mpu6500_read_hal+0x6fe>
                accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;
 8008fbe:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	005b      	lsls	r3, r3, #1
 8008fc6:	4413      	add	r3, r2
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	461a      	mov	r2, r3
 8008fcc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8008fd0:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fdc:	ee07 3a90 	vmov	s15, r3
 8008fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fe4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8008fe8:	4613      	mov	r3, r2
 8008fea:	005b      	lsls	r3, r3, #1
 8008fec:	4413      	add	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8008ff6:	4413      	add	r3, r2
 8008ff8:	ed5f 6acc 	vldr	s13, [pc, #-816]	@ 8008ccc <mpu6500_read_hal+0x338>
 8008ffc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009000:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;
 8009004:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009008:	4613      	mov	r3, r2
 800900a:	005b      	lsls	r3, r3, #1
 800900c:	4413      	add	r3, r2
 800900e:	005b      	lsls	r3, r3, #1
 8009010:	461a      	mov	r2, r3
 8009012:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8009016:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4413      	add	r3, r2
 800901e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009022:	ee07 3a90 	vmov	s15, r3
 8009026:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800902a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 800902e:	4613      	mov	r3, r2
 8009030:	005b      	lsls	r3, r3, #1
 8009032:	4413      	add	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	461a      	mov	r2, r3
 8009038:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 800903c:	4413      	add	r3, r2
 800903e:	ed5f 6add 	vldr	s13, [pc, #-884]	@ 8008ccc <mpu6500_read_hal+0x338>
 8009042:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009046:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;
 800904a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 800904e:	4613      	mov	r3, r2
 8009050:	005b      	lsls	r3, r3, #1
 8009052:	4413      	add	r3, r2
 8009054:	005b      	lsls	r3, r3, #1
 8009056:	461a      	mov	r2, r3
 8009058:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800905c:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4413      	add	r3, r2
 8009064:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009068:	ee07 3a90 	vmov	s15, r3
 800906c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009070:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009074:	4613      	mov	r3, r2
 8009076:	005b      	lsls	r3, r3, #1
 8009078:	4413      	add	r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	461a      	mov	r2, r3
 800907e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8009082:	4413      	add	r3, r2
 8009084:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 80093d4 <mpu6500_read_hal+0xa40>
 8009088:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800908c:	edc3 7a02 	vstr	s15, [r3, #8]
 8009090:	e0d6      	b.n	8009240 <mpu6500_read_hal+0x8ac>
            } else if (accel_fs_sel == 2) { // ±8g
 8009092:	f897 3420 	ldrb.w	r3, [r7, #1056]	@ 0x420
 8009096:	2b02      	cmp	r3, #2
 8009098:	d169      	bne.n	800916e <mpu6500_read_hal+0x7da>
                accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;
 800909a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 800909e:	4613      	mov	r3, r2
 80090a0:	005b      	lsls	r3, r3, #1
 80090a2:	4413      	add	r3, r2
 80090a4:	005b      	lsls	r3, r3, #1
 80090a6:	461a      	mov	r2, r3
 80090a8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80090ac:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4413      	add	r3, r2
 80090b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090b8:	ee07 3a90 	vmov	s15, r3
 80090bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80090c0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80090c4:	4613      	mov	r3, r2
 80090c6:	005b      	lsls	r3, r3, #1
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	461a      	mov	r2, r3
 80090ce:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80090d2:	4413      	add	r3, r2
 80090d4:	eddf 6ac0 	vldr	s13, [pc, #768]	@ 80093d8 <mpu6500_read_hal+0xa44>
 80090d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80090dc:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;
 80090e0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80090e4:	4613      	mov	r3, r2
 80090e6:	005b      	lsls	r3, r3, #1
 80090e8:	4413      	add	r3, r2
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	461a      	mov	r2, r3
 80090ee:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80090f2:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4413      	add	r3, r2
 80090fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80090fe:	ee07 3a90 	vmov	s15, r3
 8009102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009106:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 800910a:	4613      	mov	r3, r2
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	4413      	add	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	461a      	mov	r2, r3
 8009114:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8009118:	4413      	add	r3, r2
 800911a:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 80093d8 <mpu6500_read_hal+0xa44>
 800911e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009122:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;
 8009126:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 800912a:	4613      	mov	r3, r2
 800912c:	005b      	lsls	r3, r3, #1
 800912e:	4413      	add	r3, r2
 8009130:	005b      	lsls	r3, r3, #1
 8009132:	461a      	mov	r2, r3
 8009134:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8009138:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4413      	add	r3, r2
 8009140:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009144:	ee07 3a90 	vmov	s15, r3
 8009148:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800914c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009150:	4613      	mov	r3, r2
 8009152:	005b      	lsls	r3, r3, #1
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	461a      	mov	r2, r3
 800915a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 800915e:	4413      	add	r3, r2
 8009160:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 80093d8 <mpu6500_read_hal+0xa44>
 8009164:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009168:	edc3 7a02 	vstr	s15, [r3, #8]
 800916c:	e068      	b.n	8009240 <mpu6500_read_hal+0x8ac>
            } else { // ±16g
                accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;
 800916e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009172:	4613      	mov	r3, r2
 8009174:	005b      	lsls	r3, r3, #1
 8009176:	4413      	add	r3, r2
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	461a      	mov	r2, r3
 800917c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8009180:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4413      	add	r3, r2
 8009188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800918c:	ee07 3a90 	vmov	s15, r3
 8009190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009194:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009198:	4613      	mov	r3, r2
 800919a:	005b      	lsls	r3, r3, #1
 800919c:	4413      	add	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	461a      	mov	r2, r3
 80091a2:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80091a6:	4413      	add	r3, r2
 80091a8:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80093dc <mpu6500_read_hal+0xa48>
 80091ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80091b0:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;
 80091b4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80091b8:	4613      	mov	r3, r2
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	4413      	add	r3, r2
 80091be:	005b      	lsls	r3, r3, #1
 80091c0:	461a      	mov	r2, r3
 80091c2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80091c6:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4413      	add	r3, r2
 80091ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80091d2:	ee07 3a90 	vmov	s15, r3
 80091d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80091da:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80091de:	4613      	mov	r3, r2
 80091e0:	005b      	lsls	r3, r3, #1
 80091e2:	4413      	add	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	461a      	mov	r2, r3
 80091e8:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80091ec:	4413      	add	r3, r2
 80091ee:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 80093dc <mpu6500_read_hal+0xa48>
 80091f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80091f6:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;
 80091fa:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80091fe:	4613      	mov	r3, r2
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	4413      	add	r3, r2
 8009204:	005b      	lsls	r3, r3, #1
 8009206:	461a      	mov	r2, r3
 8009208:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800920c:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4413      	add	r3, r2
 8009214:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009218:	ee07 3a90 	vmov	s15, r3
 800921c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009220:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009224:	4613      	mov	r3, r2
 8009226:	005b      	lsls	r3, r3, #1
 8009228:	4413      	add	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	461a      	mov	r2, r3
 800922e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8009232:	4413      	add	r3, r2
 8009234:	eddf 6a69 	vldr	s13, [pc, #420]	@ 80093dc <mpu6500_read_hal+0xa48>
 8009238:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800923c:	edc3 7a02 	vstr	s15, [r3, #8]
            }

            // Gyro conversion
            if (gyro_fs_sel == 0) { // ±250 dps
 8009240:	f897 341f 	ldrb.w	r3, [r7, #1055]	@ 0x41f
 8009244:	2b00      	cmp	r3, #0
 8009246:	d160      	bne.n	800930a <mpu6500_read_hal+0x976>
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;
 8009248:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 800924c:	4613      	mov	r3, r2
 800924e:	005b      	lsls	r3, r3, #1
 8009250:	4413      	add	r3, r2
 8009252:	005b      	lsls	r3, r3, #1
 8009254:	461a      	mov	r2, r3
 8009256:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 800925a:	4413      	add	r3, r2
 800925c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009260:	ee07 3a90 	vmov	s15, r3
 8009264:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009268:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 800926c:	4613      	mov	r3, r2
 800926e:	005b      	lsls	r3, r3, #1
 8009270:	4413      	add	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	461a      	mov	r2, r3
 8009276:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800927a:	4413      	add	r3, r2
 800927c:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80093e0 <mpu6500_read_hal+0xa4c>
 8009280:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009284:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;
 8009288:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 800928c:	4613      	mov	r3, r2
 800928e:	005b      	lsls	r3, r3, #1
 8009290:	4413      	add	r3, r2
 8009292:	005b      	lsls	r3, r3, #1
 8009294:	461a      	mov	r2, r3
 8009296:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 800929a:	4413      	add	r3, r2
 800929c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80092a0:	ee07 3a90 	vmov	s15, r3
 80092a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092a8:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80092ac:	4613      	mov	r3, r2
 80092ae:	005b      	lsls	r3, r3, #1
 80092b0:	4413      	add	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	461a      	mov	r2, r3
 80092b6:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80092ba:	4413      	add	r3, r2
 80092bc:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80093e0 <mpu6500_read_hal+0xa4c>
 80092c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80092c4:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;
 80092c8:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80092cc:	4613      	mov	r3, r2
 80092ce:	005b      	lsls	r3, r3, #1
 80092d0:	4413      	add	r3, r2
 80092d2:	005b      	lsls	r3, r3, #1
 80092d4:	461a      	mov	r2, r3
 80092d6:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80092da:	4413      	add	r3, r2
 80092dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80092e0:	ee07 3a90 	vmov	s15, r3
 80092e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092e8:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80092ec:	4613      	mov	r3, r2
 80092ee:	005b      	lsls	r3, r3, #1
 80092f0:	4413      	add	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	461a      	mov	r2, r3
 80092f6:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80092fa:	4413      	add	r3, r2
 80092fc:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80093e0 <mpu6500_read_hal+0xa4c>
 8009300:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009304:	edc3 7a02 	vstr	s15, [r3, #8]
 8009308:	e139      	b.n	800957e <mpu6500_read_hal+0xbea>
            } else if (gyro_fs_sel == 1) { // ±500 dps
 800930a:	f897 341f 	ldrb.w	r3, [r7, #1055]	@ 0x41f
 800930e:	2b01      	cmp	r3, #1
 8009310:	d170      	bne.n	80093f4 <mpu6500_read_hal+0xa60>
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;
 8009312:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009316:	4613      	mov	r3, r2
 8009318:	005b      	lsls	r3, r3, #1
 800931a:	4413      	add	r3, r2
 800931c:	005b      	lsls	r3, r3, #1
 800931e:	461a      	mov	r2, r3
 8009320:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8009324:	4413      	add	r3, r2
 8009326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800932a:	ee07 3a90 	vmov	s15, r3
 800932e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009332:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009336:	4613      	mov	r3, r2
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	4413      	add	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	461a      	mov	r2, r3
 8009340:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8009344:	4413      	add	r3, r2
 8009346:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80093e4 <mpu6500_read_hal+0xa50>
 800934a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800934e:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;
 8009352:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009356:	4613      	mov	r3, r2
 8009358:	005b      	lsls	r3, r3, #1
 800935a:	4413      	add	r3, r2
 800935c:	005b      	lsls	r3, r3, #1
 800935e:	461a      	mov	r2, r3
 8009360:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8009364:	4413      	add	r3, r2
 8009366:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800936a:	ee07 3a90 	vmov	s15, r3
 800936e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009372:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009376:	4613      	mov	r3, r2
 8009378:	005b      	lsls	r3, r3, #1
 800937a:	4413      	add	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	461a      	mov	r2, r3
 8009380:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8009384:	4413      	add	r3, r2
 8009386:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80093e4 <mpu6500_read_hal+0xa50>
 800938a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800938e:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;
 8009392:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009396:	4613      	mov	r3, r2
 8009398:	005b      	lsls	r3, r3, #1
 800939a:	4413      	add	r3, r2
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	461a      	mov	r2, r3
 80093a0:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80093a4:	4413      	add	r3, r2
 80093a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80093aa:	ee07 3a90 	vmov	s15, r3
 80093ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093b2:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80093b6:	4613      	mov	r3, r2
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	4413      	add	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	461a      	mov	r2, r3
 80093c0:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80093c4:	4413      	add	r3, r2
 80093c6:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80093e4 <mpu6500_read_hal+0xa50>
 80093ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80093ce:	edc3 7a02 	vstr	s15, [r3, #8]
 80093d2:	e0d4      	b.n	800957e <mpu6500_read_hal+0xbea>
 80093d4:	46000000 	.word	0x46000000
 80093d8:	45800000 	.word	0x45800000
 80093dc:	45000000 	.word	0x45000000
 80093e0:	43030000 	.word	0x43030000
 80093e4:	42830000 	.word	0x42830000
 80093e8:	42033333 	.word	0x42033333
 80093ec:	41833333 	.word	0x41833333
 80093f0:	46800000 	.word	0x46800000
            } else if (gyro_fs_sel == 2) { // ±1000 dps
 80093f4:	f897 341f 	ldrb.w	r3, [r7, #1055]	@ 0x41f
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d160      	bne.n	80094be <mpu6500_read_hal+0xb2a>
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;
 80093fc:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009400:	4613      	mov	r3, r2
 8009402:	005b      	lsls	r3, r3, #1
 8009404:	4413      	add	r3, r2
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	461a      	mov	r2, r3
 800940a:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 800940e:	4413      	add	r3, r2
 8009410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009414:	ee07 3a90 	vmov	s15, r3
 8009418:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800941c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009420:	4613      	mov	r3, r2
 8009422:	005b      	lsls	r3, r3, #1
 8009424:	4413      	add	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	461a      	mov	r2, r3
 800942a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800942e:	4413      	add	r3, r2
 8009430:	ed5f 6a13 	vldr	s13, [pc, #-76]	@ 80093e8 <mpu6500_read_hal+0xa54>
 8009434:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009438:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;
 800943c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009440:	4613      	mov	r3, r2
 8009442:	005b      	lsls	r3, r3, #1
 8009444:	4413      	add	r3, r2
 8009446:	005b      	lsls	r3, r3, #1
 8009448:	461a      	mov	r2, r3
 800944a:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 800944e:	4413      	add	r3, r2
 8009450:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009454:	ee07 3a90 	vmov	s15, r3
 8009458:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800945c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009460:	4613      	mov	r3, r2
 8009462:	005b      	lsls	r3, r3, #1
 8009464:	4413      	add	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	461a      	mov	r2, r3
 800946a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800946e:	4413      	add	r3, r2
 8009470:	ed5f 6a23 	vldr	s13, [pc, #-140]	@ 80093e8 <mpu6500_read_hal+0xa54>
 8009474:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009478:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;
 800947c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009480:	4613      	mov	r3, r2
 8009482:	005b      	lsls	r3, r3, #1
 8009484:	4413      	add	r3, r2
 8009486:	005b      	lsls	r3, r3, #1
 8009488:	461a      	mov	r2, r3
 800948a:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 800948e:	4413      	add	r3, r2
 8009490:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009494:	ee07 3a90 	vmov	s15, r3
 8009498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800949c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80094a0:	4613      	mov	r3, r2
 80094a2:	005b      	lsls	r3, r3, #1
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	461a      	mov	r2, r3
 80094aa:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80094ae:	4413      	add	r3, r2
 80094b0:	ed5f 6a33 	vldr	s13, [pc, #-204]	@ 80093e8 <mpu6500_read_hal+0xa54>
 80094b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80094b8:	edc3 7a02 	vstr	s15, [r3, #8]
 80094bc:	e05f      	b.n	800957e <mpu6500_read_hal+0xbea>
            } else { // ±2000 dps
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;
 80094be:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80094c2:	4613      	mov	r3, r2
 80094c4:	005b      	lsls	r3, r3, #1
 80094c6:	4413      	add	r3, r2
 80094c8:	005b      	lsls	r3, r3, #1
 80094ca:	461a      	mov	r2, r3
 80094cc:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80094d0:	4413      	add	r3, r2
 80094d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094d6:	ee07 3a90 	vmov	s15, r3
 80094da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80094de:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80094e2:	4613      	mov	r3, r2
 80094e4:	005b      	lsls	r3, r3, #1
 80094e6:	4413      	add	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	461a      	mov	r2, r3
 80094ec:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80094f0:	4413      	add	r3, r2
 80094f2:	ed5f 6a42 	vldr	s13, [pc, #-264]	@ 80093ec <mpu6500_read_hal+0xa58>
 80094f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80094fa:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;
 80094fe:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009502:	4613      	mov	r3, r2
 8009504:	005b      	lsls	r3, r3, #1
 8009506:	4413      	add	r3, r2
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	461a      	mov	r2, r3
 800950c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8009510:	4413      	add	r3, r2
 8009512:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009516:	ee07 3a90 	vmov	s15, r3
 800951a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800951e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009522:	4613      	mov	r3, r2
 8009524:	005b      	lsls	r3, r3, #1
 8009526:	4413      	add	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	461a      	mov	r2, r3
 800952c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8009530:	4413      	add	r3, r2
 8009532:	ed5f 6a52 	vldr	s13, [pc, #-328]	@ 80093ec <mpu6500_read_hal+0xa58>
 8009536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800953a:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;
 800953e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009542:	4613      	mov	r3, r2
 8009544:	005b      	lsls	r3, r3, #1
 8009546:	4413      	add	r3, r2
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	461a      	mov	r2, r3
 800954c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8009550:	4413      	add	r3, r2
 8009552:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800955e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8009562:	4613      	mov	r3, r2
 8009564:	005b      	lsls	r3, r3, #1
 8009566:	4413      	add	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	461a      	mov	r2, r3
 800956c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8009570:	4413      	add	r3, r2
 8009572:	ed5f 6a62 	vldr	s13, [pc, #-392]	@ 80093ec <mpu6500_read_hal+0xa58>
 8009576:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800957a:	edc3 7a02 	vstr	s15, [r3, #8]
        for (i = 0; i < num_samples; i++)
 800957e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	@ 0x422
 8009582:	3301      	adds	r3, #1
 8009584:	f8a7 3422 	strh.w	r3, [r7, #1058]	@ 0x422
 8009588:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 800958c:	f8b7 3424 	ldrh.w	r3, [r7, #1060]	@ 0x424
 8009590:	429a      	cmp	r2, r3
 8009592:	f4ff ab9d 	bcc.w	8008cd0 <mpu6500_read_hal+0x33c>
            }
        }
        return MPU6500_OK; // success
 8009596:	2300      	movs	r3, #0
 8009598:	e267      	b.n	8009a6a <mpu6500_read_hal+0x10d6>
    }
    else
    {
        // --- Normal Mode (Read directly from sensor registers) ---
        *len = 1; // Normal mode always reads one sample
 800959a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 800959e:	2201      	movs	r2, #1
 80095a0:	801a      	strh	r2, [r3, #0]

        // Read 14 bytes starting from ACCEL_XOUT_H into the local buffer
        // ACCEL_X/Y/Z, TEMP, GYRO_X/Y/Z (each 2 bytes)
        hal_res = HAL_I2C_Mem_Read(hi2c, i2c_addr_shifted, MPU6500_REG_ACCEL_XOUT_H,
 80095a2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80095a6:	f2a3 431e 	subw	r3, r3, #1054	@ 0x41e
 80095aa:	8819      	ldrh	r1, [r3, #0]
 80095ac:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80095b0:	f2a3 401c 	subw	r0, r3, #1052	@ 0x41c
 80095b4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80095b8:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	9302      	str	r3, [sp, #8]
 80095c0:	230e      	movs	r3, #14
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	f107 0314 	add.w	r3, r7, #20
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	2301      	movs	r3, #1
 80095cc:	223b      	movs	r2, #59	@ 0x3b
 80095ce:	6800      	ldr	r0, [r0, #0]
 80095d0:	f7fa f808 	bl	80035e4 <HAL_I2C_Mem_Read>
 80095d4:	4603      	mov	r3, r0
 80095d6:	f887 3421 	strb.w	r3, [r7, #1057]	@ 0x421
                                   I2C_MEMADD_SIZE_8BIT, read_buffer, 14, timeout);
        if (hal_res != HAL_OK)
 80095da:	f897 3421 	ldrb.w	r3, [r7, #1057]	@ 0x421
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d005      	beq.n	80095ee <mpu6500_read_hal+0xc5a>
        {
             /* printf("Debug: Read sensor data failed (%d)\n", hal_res); */
            *len = 0; // Indicate no data read
 80095e2:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80095e6:	2200      	movs	r2, #0
 80095e8:	801a      	strh	r2, [r3, #0]
            return MPU6500_ERR_READ;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e23d      	b.n	8009a6a <mpu6500_read_hal+0x10d6>
        }

        // --- Process the read sensor data ---
        // Extract raw values (Big Endian) from the local buffer
        accel_raw[0][0] = (int16_t)(((uint16_t)read_buffer[0] << 8) | read_buffer[1]);
 80095ee:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80095f2:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	b21b      	sxth	r3, r3
 80095fa:	021b      	lsls	r3, r3, #8
 80095fc:	b21a      	sxth	r2, r3
 80095fe:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8009602:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8009606:	785b      	ldrb	r3, [r3, #1]
 8009608:	b21b      	sxth	r3, r3
 800960a:	4313      	orrs	r3, r2
 800960c:	b21a      	sxth	r2, r3
 800960e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8009612:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	801a      	strh	r2, [r3, #0]
        accel_raw[0][1] = (int16_t)(((uint16_t)read_buffer[2] << 8) | read_buffer[3]);
 800961a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800961e:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8009622:	789b      	ldrb	r3, [r3, #2]
 8009624:	b21b      	sxth	r3, r3
 8009626:	021b      	lsls	r3, r3, #8
 8009628:	b21a      	sxth	r2, r3
 800962a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800962e:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8009632:	78db      	ldrb	r3, [r3, #3]
 8009634:	b21b      	sxth	r3, r3
 8009636:	4313      	orrs	r3, r2
 8009638:	b21a      	sxth	r2, r3
 800963a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800963e:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	805a      	strh	r2, [r3, #2]
        accel_raw[0][2] = (int16_t)(((uint16_t)read_buffer[4] << 8) | read_buffer[5]);
 8009646:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800964a:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800964e:	791b      	ldrb	r3, [r3, #4]
 8009650:	b21b      	sxth	r3, r3
 8009652:	021b      	lsls	r3, r3, #8
 8009654:	b21a      	sxth	r2, r3
 8009656:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800965a:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800965e:	795b      	ldrb	r3, [r3, #5]
 8009660:	b21b      	sxth	r3, r3
 8009662:	4313      	orrs	r3, r2
 8009664:	b21a      	sxth	r2, r3
 8009666:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800966a:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	809a      	strh	r2, [r3, #4]
        // Skip Temperature bytes read_buffer[6] and read_buffer[7]
        gyro_raw[0][0] = (int16_t)(((uint16_t)read_buffer[8] << 8) | read_buffer[9]);
 8009672:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8009676:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800967a:	7a1b      	ldrb	r3, [r3, #8]
 800967c:	b21b      	sxth	r3, r3
 800967e:	021b      	lsls	r3, r3, #8
 8009680:	b21a      	sxth	r2, r3
 8009682:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8009686:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800968a:	7a5b      	ldrb	r3, [r3, #9]
 800968c:	b21b      	sxth	r3, r3
 800968e:	4313      	orrs	r3, r2
 8009690:	b21a      	sxth	r2, r3
 8009692:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8009696:	801a      	strh	r2, [r3, #0]
        gyro_raw[0][1] = (int16_t)(((uint16_t)read_buffer[10] << 8) | read_buffer[11]);
 8009698:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800969c:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80096a0:	7a9b      	ldrb	r3, [r3, #10]
 80096a2:	b21b      	sxth	r3, r3
 80096a4:	021b      	lsls	r3, r3, #8
 80096a6:	b21a      	sxth	r2, r3
 80096a8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80096ac:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80096b0:	7adb      	ldrb	r3, [r3, #11]
 80096b2:	b21b      	sxth	r3, r3
 80096b4:	4313      	orrs	r3, r2
 80096b6:	b21a      	sxth	r2, r3
 80096b8:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80096bc:	805a      	strh	r2, [r3, #2]
        gyro_raw[0][2] = (int16_t)(((uint16_t)read_buffer[12] << 8) | read_buffer[13]);
 80096be:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80096c2:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80096c6:	7b1b      	ldrb	r3, [r3, #12]
 80096c8:	b21b      	sxth	r3, r3
 80096ca:	021b      	lsls	r3, r3, #8
 80096cc:	b21a      	sxth	r2, r3
 80096ce:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80096d2:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80096d6:	7b5b      	ldrb	r3, [r3, #13]
 80096d8:	b21b      	sxth	r3, r3
 80096da:	4313      	orrs	r3, r2
 80096dc:	b21a      	sxth	r2, r3
 80096de:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80096e2:	809a      	strh	r2, [r3, #4]

        // --- Convert raw values to physical units ---
        // Accel conversion
        if (accel_fs_sel == 0) { // ±2g
 80096e4:	f897 3420 	ldrb.w	r3, [r7, #1056]	@ 0x420
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d139      	bne.n	8009760 <mpu6500_read_hal+0xdcc>
            accel_g[0][0] = (float)(accel_raw[0][0]) / 16384.0f;
 80096ec:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80096f0:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096fa:	ee07 3a90 	vmov	s15, r3
 80096fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009702:	ed5f 6ac5 	vldr	s13, [pc, #-788]	@ 80093f0 <mpu6500_read_hal+0xa5c>
 8009706:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800970a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 800970e:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 16384.0f;
 8009712:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8009716:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009720:	ee07 3a90 	vmov	s15, r3
 8009724:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009728:	ed5f 6acf 	vldr	s13, [pc, #-828]	@ 80093f0 <mpu6500_read_hal+0xa5c>
 800972c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009730:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8009734:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 16384.0f;
 8009738:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800973c:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009746:	ee07 3a90 	vmov	s15, r3
 800974a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800974e:	ed5f 6ad8 	vldr	s13, [pc, #-864]	@ 80093f0 <mpu6500_read_hal+0xa5c>
 8009752:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009756:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 800975a:	edc3 7a02 	vstr	s15, [r3, #8]
 800975e:	e0b4      	b.n	80098ca <mpu6500_read_hal+0xf36>
        } else if (accel_fs_sel == 1) { // ±4g
 8009760:	f897 3420 	ldrb.w	r3, [r7, #1056]	@ 0x420
 8009764:	2b01      	cmp	r3, #1
 8009766:	d139      	bne.n	80097dc <mpu6500_read_hal+0xe48>
            accel_g[0][0] = (float)(accel_raw[0][0]) / 8192.0f;
 8009768:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800976c:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009776:	ee07 3a90 	vmov	s15, r3
 800977a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800977e:	eddf 6abd 	vldr	s13, [pc, #756]	@ 8009a74 <mpu6500_read_hal+0x10e0>
 8009782:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009786:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 800978a:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 8192.0f;
 800978e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8009792:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800979c:	ee07 3a90 	vmov	s15, r3
 80097a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80097a4:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 8009a74 <mpu6500_read_hal+0x10e0>
 80097a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80097ac:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80097b0:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 8192.0f;
 80097b4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80097b8:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80097c2:	ee07 3a90 	vmov	s15, r3
 80097c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80097ca:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 8009a74 <mpu6500_read_hal+0x10e0>
 80097ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80097d2:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80097d6:	edc3 7a02 	vstr	s15, [r3, #8]
 80097da:	e076      	b.n	80098ca <mpu6500_read_hal+0xf36>
        } else if (accel_fs_sel == 2) { // ±8g
 80097dc:	f897 3420 	ldrb.w	r3, [r7, #1056]	@ 0x420
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d139      	bne.n	8009858 <mpu6500_read_hal+0xec4>
            accel_g[0][0] = (float)(accel_raw[0][0]) / 4096.0f;
 80097e4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80097e8:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097f2:	ee07 3a90 	vmov	s15, r3
 80097f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80097fa:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 8009a78 <mpu6500_read_hal+0x10e4>
 80097fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009802:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8009806:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 4096.0f;
 800980a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800980e:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009818:	ee07 3a90 	vmov	s15, r3
 800981c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009820:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8009a78 <mpu6500_read_hal+0x10e4>
 8009824:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009828:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 800982c:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 4096.0f;
 8009830:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8009834:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800983e:	ee07 3a90 	vmov	s15, r3
 8009842:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009846:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8009a78 <mpu6500_read_hal+0x10e4>
 800984a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800984e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8009852:	edc3 7a02 	vstr	s15, [r3, #8]
 8009856:	e038      	b.n	80098ca <mpu6500_read_hal+0xf36>
        } else { // ±16g
            accel_g[0][0] = (float)(accel_raw[0][0]) / 2048.0f;
 8009858:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800985c:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009866:	ee07 3a90 	vmov	s15, r3
 800986a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800986e:	eddf 6a83 	vldr	s13, [pc, #524]	@ 8009a7c <mpu6500_read_hal+0x10e8>
 8009872:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009876:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 800987a:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 2048.0f;
 800987e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8009882:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800988c:	ee07 3a90 	vmov	s15, r3
 8009890:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009894:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8009a7c <mpu6500_read_hal+0x10e8>
 8009898:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800989c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80098a0:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 2048.0f;
 80098a4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80098a8:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80098b2:	ee07 3a90 	vmov	s15, r3
 80098b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80098ba:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009a7c <mpu6500_read_hal+0x10e8>
 80098be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80098c2:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80098c6:	edc3 7a02 	vstr	s15, [r3, #8]
        }

        // Gyro conversion
        if (gyro_fs_sel == 0) { // ±250 dps
 80098ca:	f897 341f 	ldrb.w	r3, [r7, #1055]	@ 0x41f
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d130      	bne.n	8009934 <mpu6500_read_hal+0xfa0>
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 131.0f;
 80098d2:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80098d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098da:	ee07 3a90 	vmov	s15, r3
 80098de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80098e2:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8009a80 <mpu6500_read_hal+0x10ec>
 80098e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80098ea:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80098ee:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 131.0f;
 80098f2:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80098f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80098fa:	ee07 3a90 	vmov	s15, r3
 80098fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009902:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009a80 <mpu6500_read_hal+0x10ec>
 8009906:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800990a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800990e:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 131.0f;
 8009912:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8009916:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800991a:	ee07 3a90 	vmov	s15, r3
 800991e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009922:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8009a80 <mpu6500_read_hal+0x10ec>
 8009926:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800992a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800992e:	edc3 7a02 	vstr	s15, [r3, #8]
 8009932:	e099      	b.n	8009a68 <mpu6500_read_hal+0x10d4>
        } else if (gyro_fs_sel == 1) { // ±500 dps
 8009934:	f897 341f 	ldrb.w	r3, [r7, #1055]	@ 0x41f
 8009938:	2b01      	cmp	r3, #1
 800993a:	d130      	bne.n	800999e <mpu6500_read_hal+0x100a>
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 65.5f;
 800993c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8009940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009944:	ee07 3a90 	vmov	s15, r3
 8009948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800994c:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8009a84 <mpu6500_read_hal+0x10f0>
 8009950:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009954:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8009958:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 65.5f;
 800995c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8009960:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009964:	ee07 3a90 	vmov	s15, r3
 8009968:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800996c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8009a84 <mpu6500_read_hal+0x10f0>
 8009970:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009974:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8009978:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 65.5f;
 800997c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8009980:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009984:	ee07 3a90 	vmov	s15, r3
 8009988:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800998c:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009a84 <mpu6500_read_hal+0x10f0>
 8009990:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009994:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8009998:	edc3 7a02 	vstr	s15, [r3, #8]
 800999c:	e064      	b.n	8009a68 <mpu6500_read_hal+0x10d4>
        } else if (gyro_fs_sel == 2) { // ±1000 dps
 800999e:	f897 341f 	ldrb.w	r3, [r7, #1055]	@ 0x41f
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d130      	bne.n	8009a08 <mpu6500_read_hal+0x1074>
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 32.8f;
 80099a6:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80099aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80099b6:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8009a88 <mpu6500_read_hal+0x10f4>
 80099ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80099be:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80099c2:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 32.8f;
 80099c6:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80099ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80099ce:	ee07 3a90 	vmov	s15, r3
 80099d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80099d6:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8009a88 <mpu6500_read_hal+0x10f4>
 80099da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80099de:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80099e2:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 32.8f;
 80099e6:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80099ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80099f6:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8009a88 <mpu6500_read_hal+0x10f4>
 80099fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80099fe:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8009a02:	edc3 7a02 	vstr	s15, [r3, #8]
 8009a06:	e02f      	b.n	8009a68 <mpu6500_read_hal+0x10d4>
        } else { // ±2000 dps
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 16.4f;
 8009a08:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8009a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a10:	ee07 3a90 	vmov	s15, r3
 8009a14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009a18:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8009a8c <mpu6500_read_hal+0x10f8>
 8009a1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009a20:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8009a24:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 16.4f;
 8009a28:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8009a2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009a30:	ee07 3a90 	vmov	s15, r3
 8009a34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009a38:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8009a8c <mpu6500_read_hal+0x10f8>
 8009a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009a40:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8009a44:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 16.4f;
 8009a48:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8009a4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009a50:	ee07 3a90 	vmov	s15, r3
 8009a54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009a58:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8009a8c <mpu6500_read_hal+0x10f8>
 8009a5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009a60:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8009a64:	edc3 7a02 	vstr	s15, [r3, #8]
        }

        return MPU6500_OK; // success
 8009a68:	2300      	movs	r3, #0
    }
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f207 472c 	addw	r7, r7, #1068	@ 0x42c
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd90      	pop	{r4, r7, pc}
 8009a74:	46000000 	.word	0x46000000
 8009a78:	45800000 	.word	0x45800000
 8009a7c:	45000000 	.word	0x45000000
 8009a80:	43030000 	.word	0x43030000
 8009a84:	42830000 	.word	0x42830000
 8009a88:	42033333 	.word	0x42033333
 8009a8c:	41833333 	.word	0x41833333

08009a90 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2203      	movs	r2, #3
 8009a9c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2203      	movs	r2, #3
 8009aa8:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2203      	movs	r2, #3
 8009aae:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2203      	movs	r2, #3
 8009ab4:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2203      	movs	r2, #3
 8009aba:	715a      	strb	r2, [r3, #5]
}
 8009abc:	bf00      	nop
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b08a      	sub	sp, #40	@ 0x28
 8009acc:	af04      	add	r7, sp, #16
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	607a      	str	r2, [r7, #4]
 8009ad4:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009ada:	005b      	lsls	r3, r3, #1
 8009adc:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009ae2:	7afb      	ldrb	r3, [r7, #11]
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	8af9      	ldrh	r1, [r7, #22]
 8009ae8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009aec:	9302      	str	r3, [sp, #8]
 8009aee:	2302      	movs	r3, #2
 8009af0:	9301      	str	r3, [sp, #4]
 8009af2:	f107 0314 	add.w	r3, r7, #20
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	2301      	movs	r3, #1
 8009afa:	f7f9 fd73 	bl	80035e4 <HAL_I2C_Mem_Read>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10c      	bne.n	8009b1e <read_register16+0x56>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8009b04:	7d7b      	ldrb	r3, [r7, #21]
 8009b06:	b21b      	sxth	r3, r3
 8009b08:	021b      	lsls	r3, r3, #8
 8009b0a:	b21a      	sxth	r2, r3
 8009b0c:	7d3b      	ldrb	r3, [r7, #20]
 8009b0e:	b21b      	sxth	r3, r3
 8009b10:	4313      	orrs	r3, r2
 8009b12:	b21b      	sxth	r3, r3
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	801a      	strh	r2, [r3, #0]
		return true;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e000      	b.n	8009b20 <read_register16+0x58>
	} else
		return false;
 8009b1e:	2300      	movs	r3, #0

}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3718      	adds	r7, #24
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8009b28:	b590      	push	{r4, r7, lr}
 8009b2a:	b08b      	sub	sp, #44	@ 0x2c
 8009b2c:	af04      	add	r7, sp, #16
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	607a      	str	r2, [r7, #4]
 8009b32:	461a      	mov	r2, r3
 8009b34:	460b      	mov	r3, r1
 8009b36:	72fb      	strb	r3, [r7, #11]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009b40:	005b      	lsls	r3, r3, #1
 8009b42:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009b48:	7afb      	ldrb	r3, [r7, #11]
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	7abb      	ldrb	r3, [r7, #10]
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	8af9      	ldrh	r1, [r7, #22]
 8009b52:	f241 3488 	movw	r4, #5000	@ 0x1388
 8009b56:	9402      	str	r4, [sp, #8]
 8009b58:	9301      	str	r3, [sp, #4]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	2301      	movs	r3, #1
 8009b60:	f7f9 fd40 	bl	80035e4 <HAL_I2C_Mem_Read>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d101      	bne.n	8009b6e <read_data+0x46>
		return 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	e000      	b.n	8009b70 <read_data+0x48>
	else
		return 1;
 8009b6e:	2301      	movs	r3, #1

}
 8009b70:	4618      	mov	r0, r3
 8009b72:	371c      	adds	r7, #28
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd90      	pop	{r4, r7, pc}

08009b78 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	461a      	mov	r2, r3
 8009b84:	2188      	movs	r1, #136	@ 0x88
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7ff ff9e 	bl	8009ac8 <read_register16>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d06f      	beq.n	8009c72 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	3302      	adds	r3, #2
 8009b96:	461a      	mov	r2, r3
 8009b98:	218a      	movs	r1, #138	@ 0x8a
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7ff ff94 	bl	8009ac8 <read_register16>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d065      	beq.n	8009c72 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	3304      	adds	r3, #4
 8009baa:	461a      	mov	r2, r3
 8009bac:	218c      	movs	r1, #140	@ 0x8c
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7ff ff8a 	bl	8009ac8 <read_register16>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d05b      	beq.n	8009c72 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	3306      	adds	r3, #6
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	218e      	movs	r1, #142	@ 0x8e
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7ff ff80 	bl	8009ac8 <read_register16>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d051      	beq.n	8009c72 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	2190      	movs	r1, #144	@ 0x90
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f7ff ff76 	bl	8009ac8 <read_register16>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d047      	beq.n	8009c72 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	330a      	adds	r3, #10
 8009be6:	461a      	mov	r2, r3
 8009be8:	2192      	movs	r1, #146	@ 0x92
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7ff ff6c 	bl	8009ac8 <read_register16>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d03d      	beq.n	8009c72 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	330c      	adds	r3, #12
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	2194      	movs	r1, #148	@ 0x94
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7ff ff62 	bl	8009ac8 <read_register16>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d033      	beq.n	8009c72 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	330e      	adds	r3, #14
 8009c0e:	461a      	mov	r2, r3
 8009c10:	2196      	movs	r1, #150	@ 0x96
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7ff ff58 	bl	8009ac8 <read_register16>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d029      	beq.n	8009c72 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	3310      	adds	r3, #16
 8009c22:	461a      	mov	r2, r3
 8009c24:	2198      	movs	r1, #152	@ 0x98
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff ff4e 	bl	8009ac8 <read_register16>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d01f      	beq.n	8009c72 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	3312      	adds	r3, #18
 8009c36:	461a      	mov	r2, r3
 8009c38:	219a      	movs	r1, #154	@ 0x9a
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f7ff ff44 	bl	8009ac8 <read_register16>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d015      	beq.n	8009c72 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3314      	adds	r3, #20
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	219c      	movs	r1, #156	@ 0x9c
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7ff ff3a 	bl	8009ac8 <read_register16>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00b      	beq.n	8009c72 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8009c5e:	461a      	mov	r2, r3
 8009c60:	219e      	movs	r1, #158	@ 0x9e
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f7ff ff30 	bl	8009ac8 <read_register16>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <read_calibration_data+0xfa>

		return true;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e000      	b.n	8009c74 <read_calibration_data+0xfc>
	}

	return false;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3708      	adds	r7, #8
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f103 0218 	add.w	r2, r3, #24
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	21a1      	movs	r1, #161	@ 0xa1
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7ff ff4a 	bl	8009b28 <read_data>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d14c      	bne.n	8009d34 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	331a      	adds	r3, #26
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	21e1      	movs	r1, #225	@ 0xe1
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7ff ff10 	bl	8009ac8 <read_register16>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d042      	beq.n	8009d34 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f103 021c 	add.w	r2, r3, #28
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	21e3      	movs	r1, #227	@ 0xe3
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f7ff ff35 	bl	8009b28 <read_data>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d137      	bne.n	8009d34 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe4, &h4)
 8009cc4:	f107 030e 	add.w	r3, r7, #14
 8009cc8:	461a      	mov	r2, r3
 8009cca:	21e4      	movs	r1, #228	@ 0xe4
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff fefb 	bl	8009ac8 <read_register16>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d02d      	beq.n	8009d34 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe5, &h5)
 8009cd8:	f107 030c 	add.w	r3, r7, #12
 8009cdc:	461a      	mov	r2, r3
 8009cde:	21e5      	movs	r1, #229	@ 0xe5
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f7ff fef1 	bl	8009ac8 <read_register16>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d023      	beq.n	8009d34 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	21e7      	movs	r1, #231	@ 0xe7
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7ff ff16 	bl	8009b28 <read_data>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d118      	bne.n	8009d34 <read_hum_calibration_data+0xb8>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8009d02:	89fb      	ldrh	r3, [r7, #14]
 8009d04:	b21b      	sxth	r3, r3
 8009d06:	011b      	lsls	r3, r3, #4
 8009d08:	b21b      	sxth	r3, r3
 8009d0a:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8009d0e:	b21a      	sxth	r2, r3
 8009d10:	89fb      	ldrh	r3, [r7, #14]
 8009d12:	121b      	asrs	r3, r3, #8
 8009d14:	b21b      	sxth	r3, r3
 8009d16:	f003 030f 	and.w	r3, r3, #15
 8009d1a:	b21b      	sxth	r3, r3
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	b21a      	sxth	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8009d24:	89bb      	ldrh	r3, [r7, #12]
 8009d26:	091b      	lsrs	r3, r3, #4
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	b21a      	sxth	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	841a      	strh	r2, [r3, #32]

		return true;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e000      	b.n	8009d36 <read_hum_calibration_data+0xba>
	}

	return false;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b088      	sub	sp, #32
 8009d42:	af04      	add	r7, sp, #16
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	460b      	mov	r3, r1
 8009d48:	70fb      	strb	r3, [r7, #3]
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009d52:	005b      	lsls	r3, r3, #1
 8009d54:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009d5a:	78fb      	ldrb	r3, [r7, #3]
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	89f9      	ldrh	r1, [r7, #14]
 8009d60:	f242 7310 	movw	r3, #10000	@ 0x2710
 8009d64:	9302      	str	r3, [sp, #8]
 8009d66:	2301      	movs	r3, #1
 8009d68:	9301      	str	r3, [sp, #4]
 8009d6a:	1cbb      	adds	r3, r7, #2
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	2301      	movs	r3, #1
 8009d70:	f7f9 fb24 	bl	80033bc <HAL_I2C_Mem_Write>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d101      	bne.n	8009d7e <write_register8+0x40>
		return false;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	e000      	b.n	8009d80 <write_register8+0x42>
	else
		return true;
 8009d7e:	2301      	movs	r3, #1
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009d96:	2b76      	cmp	r3, #118	@ 0x76
 8009d98:	d005      	beq.n	8009da6 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009d9e:	2b77      	cmp	r3, #119	@ 0x77
 8009da0:	d001      	beq.n	8009da6 <bmp280_init+0x1e>

		return false;
 8009da2:	2300      	movs	r3, #0
 8009da4:	e09d      	b.n	8009ee2 <bmp280_init+0x15a>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009dac:	2301      	movs	r3, #1
 8009dae:	21d0      	movs	r1, #208	@ 0xd0
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f7ff feb9 	bl	8009b28 <read_data>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <bmp280_init+0x38>
		return false;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	e090      	b.n	8009ee2 <bmp280_init+0x15a>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009dc6:	2b58      	cmp	r3, #88	@ 0x58
 8009dc8:	d006      	beq.n	8009dd8 <bmp280_init+0x50>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009dd0:	2b60      	cmp	r3, #96	@ 0x60
 8009dd2:	d001      	beq.n	8009dd8 <bmp280_init+0x50>

		return false;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	e084      	b.n	8009ee2 <bmp280_init+0x15a>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8009dd8:	22b6      	movs	r2, #182	@ 0xb6
 8009dda:	21e0      	movs	r1, #224	@ 0xe0
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7ff ffae 	bl	8009d3e <write_register8>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <bmp280_init+0x64>
		return false;
 8009de8:	2300      	movs	r3, #0
 8009dea:	e07a      	b.n	8009ee2 <bmp280_init+0x15a>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8009dec:	f107 020c 	add.w	r2, r7, #12
 8009df0:	2301      	movs	r3, #1
 8009df2:	21f3      	movs	r1, #243	@ 0xf3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7ff fe97 	bl	8009b28 <read_data>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d1f5      	bne.n	8009dec <bmp280_init+0x64>
				&& (status & 1) == 0)
 8009e00:	7b3b      	ldrb	r3, [r7, #12]
 8009e02:	f003 0301 	and.w	r3, r3, #1
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1f0      	bne.n	8009dec <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7ff feb4 	bl	8009b78 <read_calibration_data>
 8009e10:	4603      	mov	r3, r0
 8009e12:	f083 0301 	eor.w	r3, r3, #1
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d100      	bne.n	8009e1e <bmp280_init+0x96>
 8009e1c:	e001      	b.n	8009e22 <bmp280_init+0x9a>
		return false;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	e05f      	b.n	8009ee2 <bmp280_init+0x15a>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009e28:	2b60      	cmp	r3, #96	@ 0x60
 8009e2a:	d10a      	bne.n	8009e42 <bmp280_init+0xba>
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f7ff ff25 	bl	8009c7c <read_hum_calibration_data>
 8009e32:	4603      	mov	r3, r0
 8009e34:	f083 0301 	eor.w	r3, r3, #1
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d001      	beq.n	8009e42 <bmp280_init+0xba>
		return false;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	e04f      	b.n	8009ee2 <bmp280_init+0x15a>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	795b      	ldrb	r3, [r3, #5]
 8009e46:	b25b      	sxtb	r3, r3
 8009e48:	015b      	lsls	r3, r3, #5
 8009e4a:	b25a      	sxtb	r2, r3
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	785b      	ldrb	r3, [r3, #1]
 8009e50:	b25b      	sxtb	r3, r3
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	b25b      	sxtb	r3, r3
 8009e56:	4313      	orrs	r3, r2
 8009e58:	b25b      	sxtb	r3, r3
 8009e5a:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8009e5c:	7bfb      	ldrb	r3, [r7, #15]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	21f5      	movs	r1, #245	@ 0xf5
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7ff ff6b 	bl	8009d3e <write_register8>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d001      	beq.n	8009e72 <bmp280_init+0xea>
		return false;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	e037      	b.n	8009ee2 <bmp280_init+0x15a>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d102      	bne.n	8009e80 <bmp280_init+0xf8>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	78db      	ldrb	r3, [r3, #3]
			| (params->oversampling_pressure << 2) | (params->mode);
 8009e84:	b25b      	sxtb	r3, r3
 8009e86:	015b      	lsls	r3, r3, #5
 8009e88:	b25a      	sxtb	r2, r3
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	789b      	ldrb	r3, [r3, #2]
 8009e8e:	b25b      	sxtb	r3, r3
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	b25b      	sxtb	r3, r3
 8009e94:	4313      	orrs	r3, r2
 8009e96:	b25a      	sxtb	r2, r3
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	b25b      	sxtb	r3, r3
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8009ea2:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009eaa:	2b60      	cmp	r3, #96	@ 0x60
 8009eac:	d10d      	bne.n	8009eca <bmp280_init+0x142>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	791b      	ldrb	r3, [r3, #4]
 8009eb2:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8009eb4:	7b7b      	ldrb	r3, [r7, #13]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	21f2      	movs	r1, #242	@ 0xf2
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f7ff ff3f 	bl	8009d3e <write_register8>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <bmp280_init+0x142>
			return false;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	e00b      	b.n	8009ee2 <bmp280_init+0x15a>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8009eca:	7bbb      	ldrb	r3, [r7, #14]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	21f4      	movs	r1, #244	@ 0xf4
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7ff ff34 	bl	8009d3e <write_register8>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <bmp280_init+0x158>
		return false;
 8009edc:	2300      	movs	r3, #0
 8009ede:	e000      	b.n	8009ee2 <bmp280_init+0x15a>
	}

	return true;
 8009ee0:	2301      	movs	r3, #1
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8009eea:	b480      	push	{r7}
 8009eec:	b087      	sub	sp, #28
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	60f8      	str	r0, [r7, #12]
 8009ef2:	60b9      	str	r1, [r7, #8]
 8009ef4:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	10da      	asrs	r2, r3, #3
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	881b      	ldrh	r3, [r3, #0]
 8009efe:	005b      	lsls	r3, r3, #1
 8009f00:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8009f08:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8009f0c:	12db      	asrs	r3, r3, #11
 8009f0e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	111b      	asrs	r3, r3, #4
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	8812      	ldrh	r2, [r2, #0]
 8009f18:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	1112      	asrs	r2, r2, #4
 8009f1e:	68f9      	ldr	r1, [r7, #12]
 8009f20:	8809      	ldrh	r1, [r1, #0]
 8009f22:	1a52      	subs	r2, r2, r1
 8009f24:	fb02 f303 	mul.w	r3, r2, r3
 8009f28:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8009f30:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8009f34:	139b      	asrs	r3, r3, #14
 8009f36:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	441a      	add	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	4613      	mov	r3, r2
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	4413      	add	r3, r2
 8009f4c:	3380      	adds	r3, #128	@ 0x80
 8009f4e:	121b      	asrs	r3, r3, #8
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	371c      	adds	r7, #28
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8009f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f60:	b0cc      	sub	sp, #304	@ 0x130
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8009f68:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8009f6c:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8009f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f74:	17da      	asrs	r2, r3, #31
 8009f76:	461c      	mov	r4, r3
 8009f78:	4615      	mov	r5, r2
 8009f7a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8009f7e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8009f82:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8009f86:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8009f8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f8e:	fb03 f102 	mul.w	r1, r3, r2
 8009f92:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8009f96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f9a:	fb02 f303 	mul.w	r3, r2, r3
 8009f9e:	18ca      	adds	r2, r1, r3
 8009fa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009fa4:	fba3 8903 	umull	r8, r9, r3, r3
 8009fa8:	eb02 0309 	add.w	r3, r2, r9
 8009fac:	4699      	mov	r9, r3
 8009fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fb2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009fb6:	b21b      	sxth	r3, r3
 8009fb8:	17da      	asrs	r2, r3, #31
 8009fba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009fbe:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009fc2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	fb03 f209 	mul.w	r2, r3, r9
 8009fcc:	460b      	mov	r3, r1
 8009fce:	fb08 f303 	mul.w	r3, r8, r3
 8009fd2:	4413      	add	r3, r2
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	fba8 1202 	umull	r1, r2, r8, r2
 8009fda:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009fde:	460a      	mov	r2, r1
 8009fe0:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8009fe4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009fe8:	4413      	add	r3, r2
 8009fea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009fee:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8009ff2:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8009ff6:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8009ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ffe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800a002:	b21b      	sxth	r3, r3
 800a004:	17da      	asrs	r2, r3, #31
 800a006:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a00a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800a00e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a012:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800a016:	462a      	mov	r2, r5
 800a018:	fb02 f203 	mul.w	r2, r2, r3
 800a01c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a020:	4621      	mov	r1, r4
 800a022:	fb01 f303 	mul.w	r3, r1, r3
 800a026:	441a      	add	r2, r3
 800a028:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a02c:	4621      	mov	r1, r4
 800a02e:	fba3 1301 	umull	r1, r3, r3, r1
 800a032:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a036:	460b      	mov	r3, r1
 800a038:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a03c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a040:	18d3      	adds	r3, r2, r3
 800a042:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a046:	f04f 0000 	mov.w	r0, #0
 800a04a:	f04f 0100 	mov.w	r1, #0
 800a04e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800a052:	462b      	mov	r3, r5
 800a054:	0459      	lsls	r1, r3, #17
 800a056:	4623      	mov	r3, r4
 800a058:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800a05c:	4623      	mov	r3, r4
 800a05e:	0458      	lsls	r0, r3, #17
 800a060:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800a064:	1814      	adds	r4, r2, r0
 800a066:	643c      	str	r4, [r7, #64]	@ 0x40
 800a068:	414b      	adcs	r3, r1
 800a06a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a06c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800a070:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800a074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a078:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a07c:	b21b      	sxth	r3, r3
 800a07e:	17da      	asrs	r2, r3, #31
 800a080:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a084:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a088:	f04f 0000 	mov.w	r0, #0
 800a08c:	f04f 0100 	mov.w	r1, #0
 800a090:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a094:	00d9      	lsls	r1, r3, #3
 800a096:	2000      	movs	r0, #0
 800a098:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800a09c:	1814      	adds	r4, r2, r0
 800a09e:	63bc      	str	r4, [r7, #56]	@ 0x38
 800a0a0:	414b      	adcs	r3, r1
 800a0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0a4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800a0a8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800a0ac:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800a0b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a0b4:	fb03 f102 	mul.w	r1, r3, r2
 800a0b8:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800a0bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a0c0:	fb02 f303 	mul.w	r3, r2, r3
 800a0c4:	18ca      	adds	r2, r1, r3
 800a0c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a0ca:	fba3 1303 	umull	r1, r3, r3, r3
 800a0ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a0d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0dc:	18d3      	adds	r3, r2, r3
 800a0de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a0ea:	b21b      	sxth	r3, r3
 800a0ec:	17da      	asrs	r2, r3, #31
 800a0ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a0f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a0f6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800a0fa:	462b      	mov	r3, r5
 800a0fc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a100:	4642      	mov	r2, r8
 800a102:	fb02 f203 	mul.w	r2, r2, r3
 800a106:	464b      	mov	r3, r9
 800a108:	4621      	mov	r1, r4
 800a10a:	fb01 f303 	mul.w	r3, r1, r3
 800a10e:	4413      	add	r3, r2
 800a110:	4622      	mov	r2, r4
 800a112:	4641      	mov	r1, r8
 800a114:	fba2 1201 	umull	r1, r2, r2, r1
 800a118:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800a11c:	460a      	mov	r2, r1
 800a11e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800a122:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800a126:	4413      	add	r3, r2
 800a128:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a12c:	f04f 0000 	mov.w	r0, #0
 800a130:	f04f 0100 	mov.w	r1, #0
 800a134:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800a138:	4623      	mov	r3, r4
 800a13a:	0a18      	lsrs	r0, r3, #8
 800a13c:	462b      	mov	r3, r5
 800a13e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800a142:	462b      	mov	r3, r5
 800a144:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800a146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a14a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a14e:	b21b      	sxth	r3, r3
 800a150:	17da      	asrs	r2, r3, #31
 800a152:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a156:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800a15a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a15e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800a162:	464a      	mov	r2, r9
 800a164:	fb02 f203 	mul.w	r2, r2, r3
 800a168:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a16c:	4644      	mov	r4, r8
 800a16e:	fb04 f303 	mul.w	r3, r4, r3
 800a172:	441a      	add	r2, r3
 800a174:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a178:	4644      	mov	r4, r8
 800a17a:	fba3 4304 	umull	r4, r3, r3, r4
 800a17e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a182:	4623      	mov	r3, r4
 800a184:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a188:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a18c:	18d3      	adds	r3, r2, r3
 800a18e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a192:	f04f 0200 	mov.w	r2, #0
 800a196:	f04f 0300 	mov.w	r3, #0
 800a19a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800a19e:	464c      	mov	r4, r9
 800a1a0:	0323      	lsls	r3, r4, #12
 800a1a2:	4644      	mov	r4, r8
 800a1a4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800a1a8:	4644      	mov	r4, r8
 800a1aa:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800a1ac:	1884      	adds	r4, r0, r2
 800a1ae:	633c      	str	r4, [r7, #48]	@ 0x30
 800a1b0:	eb41 0303 	adc.w	r3, r1, r3
 800a1b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1b6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800a1ba:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800a1be:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800a1c2:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800a1c6:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 800a1ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800a1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1d2:	88db      	ldrh	r3, [r3, #6]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a1dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a1e0:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a1e4:	462b      	mov	r3, r5
 800a1e6:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a1ea:	4642      	mov	r2, r8
 800a1ec:	fb02 f203 	mul.w	r2, r2, r3
 800a1f0:	464b      	mov	r3, r9
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	fb01 f303 	mul.w	r3, r1, r3
 800a1f8:	4413      	add	r3, r2
 800a1fa:	4622      	mov	r2, r4
 800a1fc:	4641      	mov	r1, r8
 800a1fe:	fba2 1201 	umull	r1, r2, r2, r1
 800a202:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800a206:	460a      	mov	r2, r1
 800a208:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800a20c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a210:	4413      	add	r3, r2
 800a212:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a216:	f04f 0200 	mov.w	r2, #0
 800a21a:	f04f 0300 	mov.w	r3, #0
 800a21e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800a222:	4629      	mov	r1, r5
 800a224:	104a      	asrs	r2, r1, #1
 800a226:	4629      	mov	r1, r5
 800a228:	17cb      	asrs	r3, r1, #31
 800a22a:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 800a22e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800a232:	4313      	orrs	r3, r2
 800a234:	d101      	bne.n	800a23a <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 800a236:	2300      	movs	r3, #0
 800a238:	e148      	b.n	800a4cc <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 800a23a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a23e:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800a242:	17da      	asrs	r2, r3, #31
 800a244:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a246:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a248:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800a24c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800a250:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a254:	105b      	asrs	r3, r3, #1
 800a256:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a25a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a25e:	07db      	lsls	r3, r3, #31
 800a260:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a264:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800a268:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800a26c:	4621      	mov	r1, r4
 800a26e:	1a89      	subs	r1, r1, r2
 800a270:	67b9      	str	r1, [r7, #120]	@ 0x78
 800a272:	4629      	mov	r1, r5
 800a274:	eb61 0303 	sbc.w	r3, r1, r3
 800a278:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a27a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800a27e:	4622      	mov	r2, r4
 800a280:	462b      	mov	r3, r5
 800a282:	1891      	adds	r1, r2, r2
 800a284:	6239      	str	r1, [r7, #32]
 800a286:	415b      	adcs	r3, r3
 800a288:	627b      	str	r3, [r7, #36]	@ 0x24
 800a28a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a28e:	4621      	mov	r1, r4
 800a290:	1851      	adds	r1, r2, r1
 800a292:	61b9      	str	r1, [r7, #24]
 800a294:	4629      	mov	r1, r5
 800a296:	414b      	adcs	r3, r1
 800a298:	61fb      	str	r3, [r7, #28]
 800a29a:	f04f 0200 	mov.w	r2, #0
 800a29e:	f04f 0300 	mov.w	r3, #0
 800a2a2:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800a2a6:	4649      	mov	r1, r9
 800a2a8:	018b      	lsls	r3, r1, #6
 800a2aa:	4641      	mov	r1, r8
 800a2ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a2b0:	4641      	mov	r1, r8
 800a2b2:	018a      	lsls	r2, r1, #6
 800a2b4:	4641      	mov	r1, r8
 800a2b6:	1889      	adds	r1, r1, r2
 800a2b8:	6139      	str	r1, [r7, #16]
 800a2ba:	4649      	mov	r1, r9
 800a2bc:	eb43 0101 	adc.w	r1, r3, r1
 800a2c0:	6179      	str	r1, [r7, #20]
 800a2c2:	f04f 0200 	mov.w	r2, #0
 800a2c6:	f04f 0300 	mov.w	r3, #0
 800a2ca:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800a2ce:	4649      	mov	r1, r9
 800a2d0:	008b      	lsls	r3, r1, #2
 800a2d2:	4641      	mov	r1, r8
 800a2d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2d8:	4641      	mov	r1, r8
 800a2da:	008a      	lsls	r2, r1, #2
 800a2dc:	4610      	mov	r0, r2
 800a2de:	4619      	mov	r1, r3
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	4622      	mov	r2, r4
 800a2e4:	189b      	adds	r3, r3, r2
 800a2e6:	60bb      	str	r3, [r7, #8]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	462a      	mov	r2, r5
 800a2ec:	eb42 0303 	adc.w	r3, r2, r3
 800a2f0:	60fb      	str	r3, [r7, #12]
 800a2f2:	f04f 0200 	mov.w	r2, #0
 800a2f6:	f04f 0300 	mov.w	r3, #0
 800a2fa:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800a2fe:	4649      	mov	r1, r9
 800a300:	008b      	lsls	r3, r1, #2
 800a302:	4641      	mov	r1, r8
 800a304:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a308:	4641      	mov	r1, r8
 800a30a:	008a      	lsls	r2, r1, #2
 800a30c:	4610      	mov	r0, r2
 800a30e:	4619      	mov	r1, r3
 800a310:	4603      	mov	r3, r0
 800a312:	4622      	mov	r2, r4
 800a314:	189b      	adds	r3, r3, r2
 800a316:	673b      	str	r3, [r7, #112]	@ 0x70
 800a318:	462b      	mov	r3, r5
 800a31a:	460a      	mov	r2, r1
 800a31c:	eb42 0303 	adc.w	r3, r2, r3
 800a320:	677b      	str	r3, [r7, #116]	@ 0x74
 800a322:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800a326:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800a32a:	f7f6 fcad 	bl	8000c88 <__aeabi_ldivmod>
 800a32e:	4602      	mov	r2, r0
 800a330:	460b      	mov	r3, r1
 800a332:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800a336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a33a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a33e:	b21b      	sxth	r3, r3
 800a340:	17da      	asrs	r2, r3, #31
 800a342:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a344:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a346:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800a34a:	f04f 0000 	mov.w	r0, #0
 800a34e:	f04f 0100 	mov.w	r1, #0
 800a352:	0b50      	lsrs	r0, r2, #13
 800a354:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800a358:	1359      	asrs	r1, r3, #13
 800a35a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800a35e:	462b      	mov	r3, r5
 800a360:	fb00 f203 	mul.w	r2, r0, r3
 800a364:	4623      	mov	r3, r4
 800a366:	fb03 f301 	mul.w	r3, r3, r1
 800a36a:	4413      	add	r3, r2
 800a36c:	4622      	mov	r2, r4
 800a36e:	fba2 1200 	umull	r1, r2, r2, r0
 800a372:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a376:	460a      	mov	r2, r1
 800a378:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800a37c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a380:	4413      	add	r3, r2
 800a382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a386:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800a38a:	f04f 0000 	mov.w	r0, #0
 800a38e:	f04f 0100 	mov.w	r1, #0
 800a392:	0b50      	lsrs	r0, r2, #13
 800a394:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800a398:	1359      	asrs	r1, r3, #13
 800a39a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800a39e:	462b      	mov	r3, r5
 800a3a0:	fb00 f203 	mul.w	r2, r0, r3
 800a3a4:	4623      	mov	r3, r4
 800a3a6:	fb03 f301 	mul.w	r3, r3, r1
 800a3aa:	4413      	add	r3, r2
 800a3ac:	4622      	mov	r2, r4
 800a3ae:	fba2 1200 	umull	r1, r2, r2, r0
 800a3b2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a3b6:	460a      	mov	r2, r1
 800a3b8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800a3bc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800a3c0:	4413      	add	r3, r2
 800a3c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a3c6:	f04f 0200 	mov.w	r2, #0
 800a3ca:	f04f 0300 	mov.w	r3, #0
 800a3ce:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800a3d2:	4621      	mov	r1, r4
 800a3d4:	0e4a      	lsrs	r2, r1, #25
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800a3dc:	4629      	mov	r1, r5
 800a3de:	164b      	asrs	r3, r1, #25
 800a3e0:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800a3e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3e8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a3ec:	b21b      	sxth	r3, r3
 800a3ee:	17da      	asrs	r2, r3, #31
 800a3f0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3f2:	667a      	str	r2, [r7, #100]	@ 0x64
 800a3f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a3f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800a3fc:	462a      	mov	r2, r5
 800a3fe:	fb02 f203 	mul.w	r2, r2, r3
 800a402:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a406:	4621      	mov	r1, r4
 800a408:	fb01 f303 	mul.w	r3, r1, r3
 800a40c:	4413      	add	r3, r2
 800a40e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800a412:	4621      	mov	r1, r4
 800a414:	fba2 1201 	umull	r1, r2, r2, r1
 800a418:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800a41c:	460a      	mov	r2, r1
 800a41e:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800a422:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800a426:	4413      	add	r3, r2
 800a428:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a42c:	f04f 0200 	mov.w	r2, #0
 800a430:	f04f 0300 	mov.w	r3, #0
 800a434:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 800a438:	4621      	mov	r1, r4
 800a43a:	0cca      	lsrs	r2, r1, #19
 800a43c:	4629      	mov	r1, r5
 800a43e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800a442:	4629      	mov	r1, r5
 800a444:	14cb      	asrs	r3, r1, #19
 800a446:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800a44a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800a44e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800a452:	1884      	adds	r4, r0, r2
 800a454:	65bc      	str	r4, [r7, #88]	@ 0x58
 800a456:	eb41 0303 	adc.w	r3, r1, r3
 800a45a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a45c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800a460:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800a464:	4621      	mov	r1, r4
 800a466:	1889      	adds	r1, r1, r2
 800a468:	6539      	str	r1, [r7, #80]	@ 0x50
 800a46a:	4629      	mov	r1, r5
 800a46c:	eb43 0101 	adc.w	r1, r3, r1
 800a470:	6579      	str	r1, [r7, #84]	@ 0x54
 800a472:	f04f 0000 	mov.w	r0, #0
 800a476:	f04f 0100 	mov.w	r1, #0
 800a47a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800a47e:	4623      	mov	r3, r4
 800a480:	0a18      	lsrs	r0, r3, #8
 800a482:	462b      	mov	r3, r5
 800a484:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800a488:	462b      	mov	r3, r5
 800a48a:	1219      	asrs	r1, r3, #8
 800a48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a490:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a494:	b21b      	sxth	r3, r3
 800a496:	17da      	asrs	r2, r3, #31
 800a498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a49a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a49c:	f04f 0200 	mov.w	r2, #0
 800a4a0:	f04f 0300 	mov.w	r3, #0
 800a4a4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 800a4a8:	464c      	mov	r4, r9
 800a4aa:	0123      	lsls	r3, r4, #4
 800a4ac:	4644      	mov	r4, r8
 800a4ae:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800a4b2:	4644      	mov	r4, r8
 800a4b4:	0122      	lsls	r2, r4, #4
 800a4b6:	1884      	adds	r4, r0, r2
 800a4b8:	603c      	str	r4, [r7, #0]
 800a4ba:	eb41 0303 	adc.w	r3, r1, r3
 800a4be:	607b      	str	r3, [r7, #4]
 800a4c0:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a4c4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 800a4c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a4d8 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800a4d8:	b480      	push	{r7}
 800a4da:	b087      	sub	sp, #28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 800a4ea:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	039a      	lsls	r2, r3, #14
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800a4f6:	051b      	lsls	r3, r3, #20
 800a4f8:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800a500:	4619      	mov	r1, r3
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	fb01 f303 	mul.w	r3, r1, r3
 800a508:	1ad3      	subs	r3, r2, r3
 800a50a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a50e:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 800a516:	4611      	mov	r1, r2
 800a518:	697a      	ldr	r2, [r7, #20]
 800a51a:	fb01 f202 	mul.w	r2, r1, r2
 800a51e:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800a520:	68f9      	ldr	r1, [r7, #12]
 800a522:	7f09      	ldrb	r1, [r1, #28]
 800a524:	4608      	mov	r0, r1
 800a526:	6979      	ldr	r1, [r7, #20]
 800a528:	fb00 f101 	mul.w	r1, r0, r1
 800a52c:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800a52e:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800a532:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800a536:	1292      	asrs	r2, r2, #10
 800a538:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 800a53c:	68f9      	ldr	r1, [r7, #12]
 800a53e:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800a542:	fb01 f202 	mul.w	r2, r1, r2
 800a546:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800a54a:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800a54c:	fb02 f303 	mul.w	r3, r2, r3
 800a550:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	13db      	asrs	r3, r3, #15
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	13d2      	asrs	r2, r2, #15
 800a55a:	fb02 f303 	mul.w	r3, r2, r3
 800a55e:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	7e12      	ldrb	r2, [r2, #24]
 800a564:	fb02 f303 	mul.w	r3, r2, r3
 800a568:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a576:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800a57e:	bfa8      	it	ge
 800a580:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800a584:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	131b      	asrs	r3, r3, #12
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	371c      	adds	r7, #28
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 800a596:	b580      	push	{r7, lr}
 800a598:	b08c      	sub	sp, #48	@ 0x30
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	60f8      	str	r0, [r7, #12]
 800a59e:	60b9      	str	r1, [r7, #8]
 800a5a0:	607a      	str	r2, [r7, #4]
 800a5a2:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a5aa:	2b60      	cmp	r3, #96	@ 0x60
 800a5ac:	d007      	beq.n	800a5be <bmp280_read_fixed+0x28>
		if (humidity)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d002      	beq.n	800a5ba <bmp280_read_fixed+0x24>
			*humidity = 0;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d001      	beq.n	800a5c8 <bmp280_read_fixed+0x32>
 800a5c4:	2308      	movs	r3, #8
 800a5c6:	e000      	b.n	800a5ca <bmp280_read_fixed+0x34>
 800a5c8:	2306      	movs	r3, #6
 800a5ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800a5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	f107 0218 	add.w	r2, r7, #24
 800a5d4:	21f7      	movs	r1, #247	@ 0xf7
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f7ff faa6 	bl	8009b28 <read_data>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <bmp280_read_fixed+0x50>
		return false;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	e038      	b.n	800a658 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800a5e6:	7e3b      	ldrb	r3, [r7, #24]
 800a5e8:	031a      	lsls	r2, r3, #12
 800a5ea:	7e7b      	ldrb	r3, [r7, #25]
 800a5ec:	011b      	lsls	r3, r3, #4
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	7eba      	ldrb	r2, [r7, #26]
 800a5f2:	0912      	lsrs	r2, r2, #4
 800a5f4:	b2d2      	uxtb	r2, r2
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800a5fa:	7efb      	ldrb	r3, [r7, #27]
 800a5fc:	031a      	lsls	r2, r3, #12
 800a5fe:	7f3b      	ldrb	r3, [r7, #28]
 800a600:	011b      	lsls	r3, r3, #4
 800a602:	4313      	orrs	r3, r2
 800a604:	7f7a      	ldrb	r2, [r7, #29]
 800a606:	0912      	lsrs	r2, r2, #4
 800a608:	b2d2      	uxtb	r2, r2
 800a60a:	4313      	orrs	r3, r2
 800a60c:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800a60e:	f107 0314 	add.w	r3, r7, #20
 800a612:	461a      	mov	r2, r3
 800a614:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f7ff fc67 	bl	8009eea <compensate_temperature>
 800a61c:	4602      	mov	r2, r0
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	461a      	mov	r2, r3
 800a626:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f7ff fc97 	bl	8009f5c <compensate_pressure>
 800a62e:	4602      	mov	r2, r0
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	601a      	str	r2, [r3, #0]

	if (humidity) {
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00d      	beq.n	800a656 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 800a63a:	7fbb      	ldrb	r3, [r7, #30]
 800a63c:	021b      	lsls	r3, r3, #8
 800a63e:	7ffa      	ldrb	r2, [r7, #31]
 800a640:	4313      	orrs	r3, r2
 800a642:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	461a      	mov	r2, r3
 800a648:	6a39      	ldr	r1, [r7, #32]
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f7ff ff44 	bl	800a4d8 <compensate_humidity>
 800a650:	4602      	mov	r2, r0
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	601a      	str	r2, [r3, #0]
	}

	return true;
 800a656:	2301      	movs	r3, #1
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3730      	adds	r7, #48	@ 0x30
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 800a660:	b580      	push	{r7, lr}
 800a662:	b088      	sub	sp, #32
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
 800a66c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d002      	beq.n	800a67a <bmp280_read_float+0x1a>
 800a674:	f107 0314 	add.w	r3, r7, #20
 800a678:	e000      	b.n	800a67c <bmp280_read_float+0x1c>
 800a67a:	2300      	movs	r3, #0
 800a67c:	f107 0218 	add.w	r2, r7, #24
 800a680:	f107 011c 	add.w	r1, r7, #28
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f7ff ff86 	bl	800a596 <bmp280_read_fixed>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d028      	beq.n	800a6e2 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	ee07 3a90 	vmov	s15, r3
 800a696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a69a:	eddf 6a14 	vldr	s13, [pc, #80]	@ 800a6ec <bmp280_read_float+0x8c>
 800a69e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	ee07 3a90 	vmov	s15, r3
 800a6ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a6b2:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800a6f0 <bmp280_read_float+0x90>
 800a6b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00b      	beq.n	800a6de <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	ee07 3a90 	vmov	s15, r3
 800a6cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a6d0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800a6f4 <bmp280_read_float+0x94>
 800a6d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	edc3 7a00 	vstr	s15, [r3]
		return true;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e000      	b.n	800a6e4 <bmp280_read_float+0x84>
	}

	return false;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3720      	adds	r7, #32
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	42c80000 	.word	0x42c80000
 800a6f0:	43800000 	.word	0x43800000
 800a6f4:	44800000 	.word	0x44800000

0800a6f8 <Display_Init>:


#define ANIMATION_FRAME_DELAY_MS 80 // Adjust for desired speed (milliseconds)

void Display_Init(UI_Screen_State_t screenState)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	4603      	mov	r3, r0
 800a700:	71fb      	strb	r3, [r7, #7]
	ST7789_Init();
 800a702:	f000 fed9 	bl	800b4b8 <ST7789_Init>
	HAL_GPIO_WritePin(ST7789_BLK_GPIO_Port  , ST7789_BLK_Pin, GPIO_PIN_SET);
 800a706:	2201      	movs	r2, #1
 800a708:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a70c:	4812      	ldr	r0, [pc, #72]	@ (800a758 <Display_Init+0x60>)
 800a70e:	f7f8 fb7b 	bl	8002e08 <HAL_GPIO_WritePin>
    // 2) Disable SPI2 before touching CR2
    __HAL_SPI_DISABLE(&ST7789_SPI_PORT);
 800a712:	4b12      	ldr	r3, [pc, #72]	@ (800a75c <Display_Init+0x64>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	4b10      	ldr	r3, [pc, #64]	@ (800a75c <Display_Init+0x64>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a720:	601a      	str	r2, [r3, #0]

    // 3) Turn on hardware‐NSS pulse management (NSSP) in CR2
    //    and be sure SSOE (NSS output enable) is set too:
    MODIFY_REG(
 800a722:	4b0e      	ldr	r3, [pc, #56]	@ (800a75c <Display_Init+0x64>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	4b0c      	ldr	r3, [pc, #48]	@ (800a75c <Display_Init+0x64>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f042 020c 	orr.w	r2, r2, #12
 800a730:	605a      	str	r2, [r3, #4]
      SPI_CR2_NSSP  | SPI_CR2_SSOE,    // mask
      SPI_CR2_NSSP  | SPI_CR2_SSOE     // value
    );

    // 4) Re-enable SPI2 so your change takes effect
    __HAL_SPI_ENABLE(&ST7789_SPI_PORT);
 800a732:	4b0a      	ldr	r3, [pc, #40]	@ (800a75c <Display_Init+0x64>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	4b08      	ldr	r3, [pc, #32]	@ (800a75c <Display_Init+0x64>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a740:	601a      	str	r2, [r3, #0]
	previous_screenState = screenState;
 800a742:	4a07      	ldr	r2, [pc, #28]	@ (800a760 <Display_Init+0x68>)
 800a744:	79fb      	ldrb	r3, [r7, #7]
 800a746:	7013      	strb	r3, [r2, #0]
	current_screenState = screenState;
 800a748:	4a06      	ldr	r2, [pc, #24]	@ (800a764 <Display_Init+0x6c>)
 800a74a:	79fb      	ldrb	r3, [r7, #7]
 800a74c:	7013      	strb	r3, [r2, #0]
}
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	48000800 	.word	0x48000800
 800a75c:	200005ac 	.word	0x200005ac
 800a760:	20000a24 	.word	0x20000a24
 800a764:	20000a25 	.word	0x20000a25

0800a768 <max30102_plot>:
 * @note Override this in your main.c if you do not use printf() for printing.
 * @param ir_sample
 * @param red_sample
 */
__weak void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
    UNUSED(ir_sample);
    UNUSED(red_sample);
}
 800a772:	bf00      	nop
 800a774:	370c      	adds	r7, #12
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b082      	sub	sp, #8
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	683a      	ldr	r2, [r7, #0]
 800a78c:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	3304      	adds	r3, #4
 800a79a:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800a79e:	2100      	movs	r1, #0
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f002 f958 	bl	800ca56 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	3384      	adds	r3, #132	@ 0x84
 800a7aa:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f002 f950 	bl	800ca56 <memset>
}
 800a7b6:	bf00      	nop
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b088      	sub	sp, #32
 800a7c2:	af02      	add	r7, sp, #8
 800a7c4:	60f8      	str	r0, [r7, #12]
 800a7c6:	607a      	str	r2, [r7, #4]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	72fb      	strb	r3, [r7, #11]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 800a7d2:	893b      	ldrh	r3, [r7, #8]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f001 f8ac 	bl	800b934 <malloc>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	617b      	str	r3, [r7, #20]
    *payload = reg;
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	7afa      	ldrb	r2, [r7, #11]
 800a7e4:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d009      	beq.n	800a800 <max30102_write+0x42>
 800a7ec:	893b      	ldrh	r3, [r7, #8]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d006      	beq.n	800a800 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	893a      	ldrh	r2, [r7, #8]
 800a7f8:	6879      	ldr	r1, [r7, #4]
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f002 f9bb 	bl	800cb76 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6818      	ldr	r0, [r3, #0]
 800a804:	893b      	ldrh	r3, [r7, #8]
 800a806:	3301      	adds	r3, #1
 800a808:	b29b      	uxth	r3, r3
 800a80a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a80e:	9200      	str	r2, [sp, #0]
 800a810:	697a      	ldr	r2, [r7, #20]
 800a812:	21ae      	movs	r1, #174	@ 0xae
 800a814:	f7f8 fbc4 	bl	8002fa0 <HAL_I2C_Master_Transmit>
    free(payload);
 800a818:	6978      	ldr	r0, [r7, #20]
 800a81a:	f001 f893 	bl	800b944 <free>
}
 800a81e:	bf00      	nop
 800a820:	3718      	adds	r7, #24
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b088      	sub	sp, #32
 800a82a:	af02      	add	r7, sp, #8
 800a82c:	60f8      	str	r0, [r7, #12]
 800a82e:	607a      	str	r2, [r7, #4]
 800a830:	461a      	mov	r2, r3
 800a832:	460b      	mov	r3, r1
 800a834:	72fb      	strb	r3, [r7, #11]
 800a836:	4613      	mov	r3, r2
 800a838:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 800a83a:	7afb      	ldrb	r3, [r7, #11]
 800a83c:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	f107 0217 	add.w	r2, r7, #23
 800a846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	2301      	movs	r3, #1
 800a84e:	21ae      	movs	r1, #174	@ 0xae
 800a850:	f7f8 fba6 	bl	8002fa0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6818      	ldr	r0, [r3, #0]
 800a858:	893b      	ldrh	r3, [r7, #8]
 800a85a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a85e:	9200      	str	r2, [sp, #0]
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	21ae      	movs	r1, #174	@ 0xae
 800a864:	f7f8 fcb4 	bl	80031d0 <HAL_I2C_Master_Receive>
}
 800a868:	bf00      	nop
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 800a878:	2340      	movs	r3, #64	@ 0x40
 800a87a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 800a87c:	f107 020f 	add.w	r2, r7, #15
 800a880:	2301      	movs	r3, #1
 800a882:	2109      	movs	r1, #9
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f7ff ff9a 	bl	800a7be <max30102_write>
}
 800a88a:	bf00      	nop
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b084      	sub	sp, #16
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
 800a89a:	460b      	mov	r3, r1
 800a89c:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800a8a2:	f107 020f 	add.w	r2, r7, #15
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	2102      	movs	r1, #2
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f7ff ffbb 	bl	800a826 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 800a8b0:	7bfb      	ldrb	r3, [r7, #15]
 800a8b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 800a8ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8be:	01db      	lsls	r3, r3, #7
 800a8c0:	b25a      	sxtb	r2, r3
 800a8c2:	7bfb      	ldrb	r3, [r7, #15]
 800a8c4:	b25b      	sxtb	r3, r3
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	b25b      	sxtb	r3, r3
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800a8ce:	f107 020f 	add.w	r2, r7, #15
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	2102      	movs	r1, #2
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f7ff ff71 	bl	800a7be <max30102_write>
}
 800a8dc:	bf00      	nop
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 800a8f0:	78fb      	ldrb	r3, [r7, #3]
 800a8f2:	005b      	lsls	r3, r3, #1
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	f003 0302 	and.w	r3, r3, #2
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 800a8fe:	f107 020f 	add.w	r2, r7, #15
 800a902:	2301      	movs	r3, #1
 800a904:	2103      	movs	r1, #3
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7ff ff59 	bl	800a7be <max30102_write>
}
 800a90c:	bf00      	nop
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	460b      	mov	r3, r1
 800a91e:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 800a920:	78fb      	ldrb	r3, [r7, #3]
 800a922:	005b      	lsls	r3, r3, #1
 800a924:	b2db      	uxtb	r3, r3
 800a926:	f003 0302 	and.w	r3, r3, #2
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 800a92e:	f107 020f 	add.w	r2, r7, #15
 800a932:	2301      	movs	r3, #1
 800a934:	2121      	movs	r1, #33	@ 0x21
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f7ff ff41 	bl	800a7be <max30102_write>
}
 800a93c:	bf00      	nop
 800a93e:	3710      	adds	r7, #16
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 800a954:	bf00      	nop
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <max30102_has_interrupt>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30102_has_interrupt(max30102_t *obj)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
}
 800a96e:	4618      	mov	r0, r3
 800a970:	370c      	adds	r7, #12
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr

0800a97a <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b084      	sub	sp, #16
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 800a982:	2300      	movs	r3, #0
 800a984:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 800a986:	f107 020c 	add.w	r2, r7, #12
 800a98a:	2302      	movs	r3, #2
 800a98c:	2100      	movs	r1, #0
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f7ff ff49 	bl	800a826 <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 800a994:	7b3b      	ldrb	r3, [r7, #12]
 800a996:	09db      	lsrs	r3, r3, #7
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	f003 0301 	and.w	r3, r3, #1
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d002      	beq.n	800a9a8 <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f957 	bl	800ac56 <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 800a9a8:	7b7b      	ldrb	r3, [r7, #13]
 800a9aa:	085b      	lsrs	r3, r3, #1
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	f003 0301 	and.w	r3, r3, #1
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d007      	beq.n	800a9c6 <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 800a9b6:	f107 020a 	add.w	r2, r7, #10
 800a9ba:	f107 030b 	add.w	r3, r7, #11
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f9ad 	bl	800ad20 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 800a9ce:	bf00      	nop
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b084      	sub	sp, #16
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
 800a9de:	460b      	mov	r3, r1
 800a9e0:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 800a9e2:	f107 020f 	add.w	r2, r7, #15
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	2109      	movs	r1, #9
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f7ff ff1b 	bl	800a826 <max30102_read>
    config = (config & 0xf8) | mode;
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
 800a9f2:	b25b      	sxtb	r3, r3
 800a9f4:	f023 0307 	bic.w	r3, r3, #7
 800a9f8:	b25a      	sxtb	r2, r3
 800a9fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	b25b      	sxtb	r3, r3
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 800aa06:	f107 020f 	add.w	r2, r7, #15
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	2109      	movs	r1, #9
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f7ff fed5 	bl	800a7be <max30102_write>
    max30102_clear_fifo(obj);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 f8ff 	bl	800ac18 <max30102_clear_fifo>
}
 800aa1a:	bf00      	nop
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b084      	sub	sp, #16
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800aa2e:	f107 020f 	add.w	r2, r7, #15
 800aa32:	2301      	movs	r3, #1
 800aa34:	210a      	movs	r1, #10
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f7ff fef5 	bl	800a826 <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 800aa3c:	7bfb      	ldrb	r3, [r7, #15]
 800aa3e:	b25b      	sxtb	r3, r3
 800aa40:	f003 0363 	and.w	r3, r3, #99	@ 0x63
 800aa44:	b25a      	sxtb	r2, r3
 800aa46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	b25b      	sxtb	r3, r3
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	b25b      	sxtb	r3, r3
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800aa56:	f107 020f 	add.w	r2, r7, #15
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	210a      	movs	r1, #10
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7ff fead 	bl	800a7be <max30102_write>
}
 800aa64:	bf00      	nop
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	460b      	mov	r3, r1
 800aa76:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800aa78:	f107 020f 	add.w	r2, r7, #15
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	210a      	movs	r1, #10
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7ff fed0 	bl	800a826 <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 800aa86:	7bfb      	ldrb	r3, [r7, #15]
 800aa88:	b25b      	sxtb	r3, r3
 800aa8a:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800aa8e:	b25a      	sxtb	r2, r3
 800aa90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	b25b      	sxtb	r3, r3
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800aa9c:	f107 020f 	add.w	r2, r7, #15
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	210a      	movs	r1, #10
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f7ff fe8a 	bl	800a7be <max30102_write>
}
 800aaaa:	bf00      	nop
 800aaac:	3710      	adds	r7, #16
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b084      	sub	sp, #16
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
 800aaba:	460b      	mov	r3, r1
 800aabc:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800aabe:	f107 020f 	add.w	r2, r7, #15
 800aac2:	2301      	movs	r3, #1
 800aac4:	210a      	movs	r1, #10
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7ff fead 	bl	800a826 <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 800aacc:	7bfb      	ldrb	r3, [r7, #15]
 800aace:	b25b      	sxtb	r3, r3
 800aad0:	f003 031f 	and.w	r3, r3, #31
 800aad4:	b25a      	sxtb	r2, r3
 800aad6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aada:	015b      	lsls	r3, r3, #5
 800aadc:	b25b      	sxtb	r3, r3
 800aade:	4313      	orrs	r3, r2
 800aae0:	b25b      	sxtb	r3, r3
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800aae6:	f107 020f 	add.w	r2, r7, #15
 800aaea:	2301      	movs	r3, #1
 800aaec:	210a      	movs	r1, #10
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f7ff fe65 	bl	800a7be <max30102_write>
}
 800aaf4:	bf00      	nop
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	0000      	movs	r0, r0
	...

0800ab00 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 800ab0c:	6838      	ldr	r0, [r7, #0]
 800ab0e:	f7f5 fd1b 	bl	8000548 <__aeabi_f2d>
 800ab12:	a30d      	add	r3, pc, #52	@ (adr r3, 800ab48 <max30102_set_led_current_1+0x48>)
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f7f5 fe98 	bl	800084c <__aeabi_ddiv>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	460b      	mov	r3, r1
 800ab20:	4610      	mov	r0, r2
 800ab22:	4619      	mov	r1, r3
 800ab24:	f7f6 f840 	bl	8000ba8 <__aeabi_d2uiz>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 800ab2e:	f107 020f 	add.w	r2, r7, #15
 800ab32:	2301      	movs	r3, #1
 800ab34:	210c      	movs	r1, #12
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7ff fe41 	bl	800a7be <max30102_write>
}
 800ab3c:	bf00      	nop
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	f3af 8000 	nop.w
 800ab48:	9999999a 	.word	0x9999999a
 800ab4c:	3fc99999 	.word	0x3fc99999

0800ab50 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 800ab5c:	6838      	ldr	r0, [r7, #0]
 800ab5e:	f7f5 fcf3 	bl	8000548 <__aeabi_f2d>
 800ab62:	a30d      	add	r3, pc, #52	@ (adr r3, 800ab98 <max30102_set_led_current_2+0x48>)
 800ab64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab68:	f7f5 fe70 	bl	800084c <__aeabi_ddiv>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	460b      	mov	r3, r1
 800ab70:	4610      	mov	r0, r2
 800ab72:	4619      	mov	r1, r3
 800ab74:	f7f6 f818 	bl	8000ba8 <__aeabi_d2uiz>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 800ab7e:	f107 020f 	add.w	r2, r7, #15
 800ab82:	2301      	movs	r3, #1
 800ab84:	210d      	movs	r1, #13
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f7ff fe19 	bl	800a7be <max30102_write>
}
 800ab8c:	bf00      	nop
 800ab8e:	3710      	adds	r7, #16
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	f3af 8000 	nop.w
 800ab98:	9999999a 	.word	0x9999999a
 800ab9c:	3fc99999 	.word	0x3fc99999

0800aba0 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	4608      	mov	r0, r1
 800abaa:	4611      	mov	r1, r2
 800abac:	461a      	mov	r2, r3
 800abae:	4603      	mov	r3, r0
 800abb0:	70fb      	strb	r3, [r7, #3]
 800abb2:	460b      	mov	r3, r1
 800abb4:	70bb      	strb	r3, [r7, #2]
 800abb6:	4613      	mov	r3, r2
 800abb8:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 800abba:	2300      	movs	r3, #0
 800abbc:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 800abbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800abc2:	015b      	lsls	r3, r3, #5
 800abc4:	b25a      	sxtb	r2, r3
 800abc6:	7bfb      	ldrb	r3, [r7, #15]
 800abc8:	b25b      	sxtb	r3, r3
 800abca:	4313      	orrs	r3, r2
 800abcc:	b25b      	sxtb	r3, r3
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 800abd2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800abd6:	011b      	lsls	r3, r3, #4
 800abd8:	b25b      	sxtb	r3, r3
 800abda:	f003 0310 	and.w	r3, r3, #16
 800abde:	b25a      	sxtb	r2, r3
 800abe0:	7bfb      	ldrb	r3, [r7, #15]
 800abe2:	b25b      	sxtb	r3, r3
 800abe4:	4313      	orrs	r3, r2
 800abe6:	b25b      	sxtb	r3, r3
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 800abec:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800abf0:	f003 030f 	and.w	r3, r3, #15
 800abf4:	b25a      	sxtb	r2, r3
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
 800abf8:	b25b      	sxtb	r3, r3
 800abfa:	4313      	orrs	r3, r2
 800abfc:	b25b      	sxtb	r3, r3
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 800ac02:	f107 020f 	add.w	r2, r7, #15
 800ac06:	2301      	movs	r3, #1
 800ac08:	2108      	movs	r1, #8
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f7ff fdd7 	bl	800a7be <max30102_write>
}
 800ac10:	bf00      	nop
 800ac12:	3710      	adds	r7, #16
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 800ac24:	f107 020f 	add.w	r2, r7, #15
 800ac28:	2303      	movs	r3, #3
 800ac2a:	2104      	movs	r1, #4
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f7ff fdc6 	bl	800a7be <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 800ac32:	f107 020f 	add.w	r2, r7, #15
 800ac36:	2303      	movs	r3, #3
 800ac38:	2106      	movs	r1, #6
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7ff fdbf 	bl	800a7be <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 800ac40:	f107 020f 	add.w	r2, r7, #15
 800ac44:	2303      	movs	r3, #3
 800ac46:	2105      	movs	r1, #5
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f7ff fdb8 	bl	800a7be <max30102_write>
}
 800ac4e:	bf00      	nop
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b088      	sub	sp, #32
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	74fb      	strb	r3, [r7, #19]
 800ac62:	2300      	movs	r3, #0
 800ac64:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 800ac66:	f107 0213 	add.w	r2, r7, #19
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	2104      	movs	r1, #4
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f7ff fdd9 	bl	800a826 <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 800ac74:	f107 0212 	add.w	r2, r7, #18
 800ac78:	2301      	movs	r3, #1
 800ac7a:	2106      	movs	r1, #6
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f7ff fdd2 	bl	800a826 <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 800ac82:	7cfa      	ldrb	r2, [r7, #19]
 800ac84:	7cbb      	ldrb	r3, [r7, #18]
 800ac86:	1ad3      	subs	r3, r2, r3
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 800ac8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	dc03      	bgt.n	800ac9c <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 800ac94:	7ffb      	ldrb	r3, [r7, #31]
 800ac96:	3320      	adds	r3, #32
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	77bb      	strb	r3, [r7, #30]
 800aca0:	e033      	b.n	800ad0a <max30102_read_fifo+0xb4>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 800aca2:	f107 020c 	add.w	r2, r7, #12
 800aca6:	2306      	movs	r3, #6
 800aca8:	2107      	movs	r1, #7
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7ff fdbb 	bl	800a826 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 800acb0:	7b3b      	ldrb	r3, [r7, #12]
 800acb2:	041a      	lsls	r2, r3, #16
 800acb4:	7b7b      	ldrb	r3, [r7, #13]
 800acb6:	021b      	lsls	r3, r3, #8
 800acb8:	4313      	orrs	r3, r2
 800acba:	7bba      	ldrb	r2, [r7, #14]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800acc2:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 800acc4:	7bfb      	ldrb	r3, [r7, #15]
 800acc6:	041a      	lsls	r2, r3, #16
 800acc8:	7c3b      	ldrb	r3, [r7, #16]
 800acca:	021b      	lsls	r3, r3, #8
 800accc:	4313      	orrs	r3, r2
 800acce:	7c7a      	ldrb	r2, [r7, #17]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800acd6:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 800acd8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4413      	add	r3, r2
 800ace2:	69ba      	ldr	r2, [r7, #24]
 800ace4:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 800ace6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	3320      	adds	r3, #32
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	4413      	add	r3, r2
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 800acf6:	6979      	ldr	r1, [r7, #20]
 800acf8:	69b8      	ldr	r0, [r7, #24]
 800acfa:	f7ff fd35 	bl	800a768 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 800acfe:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	3301      	adds	r3, #1
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	77bb      	strb	r3, [r7, #30]
 800ad0a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800ad0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	dbc5      	blt.n	800aca2 <max30102_read_fifo+0x4c>
    }
}
 800ad16:	bf00      	nop
 800ad18:	bf00      	nop
 800ad1a:	3720      	adds	r7, #32
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	68ba      	ldr	r2, [r7, #8]
 800ad30:	211f      	movs	r1, #31
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f7ff fd77 	bl	800a826 <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 800ad38:	2301      	movs	r3, #1
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	2120      	movs	r1, #32
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f7ff fd71 	bl	800a826 <max30102_read>
}
 800ad44:	bf00      	nop
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <Sensor_SmartWatch_init>:
static float MAX30102_fs;         // sampling rate in Hz
static uint8_t last_MAX30102_hr;
static uint8_t last_MAX30102_spo2;

void Sensor_SmartWatch_init(SmartWatchData_t *SmartWatchData)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
    // 1) Zero entire struct to ensure all numeric fields are 0 / pointers NULL
    memset(SmartWatchData, 0, sizeof(*SmartWatchData));
 800ad54:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800ad58:	2100      	movs	r1, #0
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f001 fe7b 	bl	800ca56 <memset>

    // 2) Explicitly set “valid” flags to false (0)
    SmartWatchData->bmp_data_valid = 0;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	641a      	str	r2, [r3, #64]	@ 0x40
    SmartWatchData->mpu_data_valid = 0;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134

    // 3) Call sensor-specific init routines,
    Sensor_BMP280_init(&SmartWatchData->bmp280);                   // initialize BMP280 driver
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4618      	mov	r0, r3
 800ad72:	f000 f9f1 	bl	800b158 <Sensor_BMP280_init>
    Sensor_GNSS_Init(SmartWatchData,&GNSS_UART);        // init GNSS data handle
 800ad76:	4908      	ldr	r1, [pc, #32]	@ (800ad98 <Sensor_SmartWatch_init+0x4c>)
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 f83e 	bl	800adfa <Sensor_GNSS_Init>
	Sensor_MAX30102_init(800.0f, &SmartWatchData->max30102, &MAX30102_I2C); //800f is default sampling rate for config
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800ad84:	4905      	ldr	r1, [pc, #20]	@ (800ad9c <Sensor_SmartWatch_init+0x50>)
 800ad86:	4618      	mov	r0, r3
 800ad88:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 800ada0 <Sensor_SmartWatch_init+0x54>
 800ad8c:	f000 fa78 	bl	800b280 <Sensor_MAX30102_init>
}
 800ad90:	bf00      	nop
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	2000076c 	.word	0x2000076c
 800ad9c:	20000298 	.word	0x20000298
 800ada0:	44480000 	.word	0x44480000

0800ada4 <Sensor_SmartWatch_update>:

void Sensor_SmartWatch_update(SmartWatchData_t *SmartWatchData)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  	Sensor_BMP280_read_data(SmartWatchData);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 f9f9 	bl	800b1a4 <Sensor_BMP280_read_data>
  	Sensor_GNSS_Update(SmartWatchData);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f852 	bl	800ae5c <Sensor_GNSS_Update>
    Sensor_MPU6500_read_data(SmartWatchData);
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 f8e3 	bl	800af84 <Sensor_MPU6500_read_data>
    Sensor_max30102_Update(SmartWatchData);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f804 	bl	800adcc <Sensor_max30102_Update>
}
 800adc4:	bf00      	nop
 800adc6:	3708      	adds	r7, #8
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <Sensor_max30102_Update>:

//------------------------------------------------------------------------------
// Call this from your main loop (or a scheduler) to refresh GPS data at ~1 Hz
//------------------------------------------------------------------------------
void Sensor_max30102_Update(SmartWatchData_t *sw)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
	if (max30102_has_interrupt(&sw->max30102))
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800adda:	4618      	mov	r0, r3
 800addc:	f7ff fdc0 	bl	800a960 <max30102_has_interrupt>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d005      	beq.n	800adf2 <Sensor_max30102_Update+0x26>
	{
	  // Run interrupt handler to read FIFO
	  max30102_interrupt_handler(&sw->max30102);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800adec:	4618      	mov	r0, r3
 800adee:	f7ff fdc4 	bl	800a97a <max30102_interrupt_handler>
	//	      // now you can grab
	//	      uint8_t bpm  = Sensor_MAX30102_get_hr();
	//	      uint8_t spO2 = Sensor_MAX30102_get_spo2();
	//	      printf("hey %u %u",bpm,spO2);
	}
}
 800adf2:	bf00      	nop
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <Sensor_GNSS_Init>:

//------------------------------------------------------------------------------
// Call this once at startup to wire up the GNSS inside your SmartWatchData
//------------------------------------------------------------------------------
void Sensor_GNSS_Init(SmartWatchData_t *sw, UART_HandleTypeDef *huart)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b082      	sub	sp, #8
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
 800ae02:	6039      	str	r1, [r7, #0]
    // 1) initialize the GNSS handle inside sw
    GNSS_Init(&sw->gps_data, huart);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ae0a:	6839      	ldr	r1, [r7, #0]
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7fd f9bd 	bl	800818c <GNSS_Init>
    HAL_Delay(200);
 800ae12:	20c8      	movs	r0, #200	@ 0xc8
 800ae14:	f7f7 fa96 	bl	8002344 <HAL_Delay>

    // 2) load your base configuration (turns off NMEA, enables UBX + Galileo)
    GNSS_LoadConfig(&sw->gps_data);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fd fd8c 	bl	800893c <GNSS_LoadConfig>
    HAL_Delay(200);
 800ae24:	20c8      	movs	r0, #200	@ 0xc8
 800ae26:	f7f7 fa8d 	bl	8002344 <HAL_Delay>

    // 3) apply the “stationary” dynamic model for best static accuracy
    GNSS_SetMode(&sw->gps_data, Stationary);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ae30:	2101      	movs	r1, #1
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7fd fa96 	bl	8008364 <GNSS_SetMode>
    HAL_Delay(100);
 800ae38:	2064      	movs	r0, #100	@ 0x64
 800ae3a:	f7f7 fa83 	bl	8002344 <HAL_Delay>

    // 4) seed your 1 Hz timer
    sw->GNSS_Timer = HAL_GetTick();
 800ae3e:	f7f7 fa75 	bl	800232c <HAL_GetTick>
 800ae42:	4602      	mov	r2, r0
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8

    // mark invalid until we get a fix
    sw->gps_data.fixType = 0;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f883 22bf 	strb.w	r2, [r3, #703]	@ 0x2bf
}
 800ae52:	bf00      	nop
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
	...

0800ae5c <Sensor_GNSS_Update>:

//------------------------------------------------------------------------------
// Call this from your main loop (or a scheduler) to refresh GPS data at ~1 Hz
//------------------------------------------------------------------------------
void Sensor_GNSS_Update(SmartWatchData_t *sw)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 800ae64:	f7f7 fa62 	bl	800232c <HAL_GetTick>
 800ae68:	60f8      	str	r0, [r7, #12]

    switch (sw->gnss_state) {
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f893 3318 	ldrb.w	r3, [r3, #792]	@ 0x318
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d002      	beq.n	800ae7a <Sensor_GNSS_Update+0x1e>
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d017      	beq.n	800aea8 <Sensor_GNSS_Update+0x4c>
                sw->gnss_state           = 0;
                sw->gnss_nextRequestTick = now + 1000;
            }
            break;
    }
}
 800ae78:	e07e      	b.n	800af78 <Sensor_GNSS_Update+0x11c>
            if (now >= sw->gnss_nextRequestTick) {
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d375      	bcc.n	800af72 <Sensor_GNSS_Update+0x116>
                GNSS_GetPVTData(&sw->gps_data);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7fd fa2d 	bl	80082ec <GNSS_GetPVTData>
                sw->gnss_state             = 1;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2201      	movs	r2, #1
 800ae96:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318
                sw->gnss_nextRequestTick   = now + 100;   // parse in 100 ms
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
            break;
 800aea6:	e064      	b.n	800af72 <Sensor_GNSS_Update+0x116>
            if (now >= sw->gnss_nextRequestTick) {
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d360      	bcc.n	800af76 <Sensor_GNSS_Update+0x11a>
                GNSS_ParseBuffer(&sw->gps_data);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7fd f9af 	bl	800821e <GNSS_ParseBuffer>
                if (sw->gps_data.fixType >= 3) {
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f893 32bf 	ldrb.w	r3, [r3, #703]	@ 0x2bf
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d944      	bls.n	800af54 <Sensor_GNSS_Update+0xf8>
                    sw->latitude      = sw->gps_data.fLat;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc
                    sw->longitude     = sw->gps_data.fLon;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
                    sw->altitude      = sw->gps_data.hMSL / 1000.0f;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800aee8:	ee07 3a90 	vmov	s15, r3
 800aeec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aef0:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800af80 <Sensor_GNSS_Update+0x124>
 800aef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	edc3 7ac1 	vstr	s15, [r3, #772]	@ 0x304
                    sw->year          = sw->gps_data.year;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8b3 22b6 	ldrh.w	r2, [r3, #694]	@ 0x2b6
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8a3 2308 	strh.w	r2, [r3, #776]	@ 0x308
                    sw->month         = sw->gps_data.month;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 32ba 	ldrb.w	r3, [r3, #698]	@ 0x2ba
 800af10:	461a      	mov	r2, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8a3 230a 	strh.w	r2, [r3, #778]	@ 0x30a
                    sw->day           = sw->gps_data.day;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 32bb 	ldrb.w	r3, [r3, #699]	@ 0x2bb
 800af1e:	461a      	mov	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8a3 230c 	strh.w	r2, [r3, #780]	@ 0x30c
                    sw->hour          = sw->gps_data.hour;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f893 22bc 	ldrb.w	r2, [r3, #700]	@ 0x2bc
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f883 230e 	strb.w	r2, [r3, #782]	@ 0x30e
                    sw->minute        = sw->gps_data.min;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 22bd 	ldrb.w	r2, [r3, #701]	@ 0x2bd
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f883 230f 	strb.w	r2, [r3, #783]	@ 0x30f
                    sw->second        = sw->gps_data.sec;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 22be 	ldrb.w	r2, [r3, #702]	@ 0x2be
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f883 2310 	strb.w	r2, [r3, #784]	@ 0x310
                    sw->gps_fix_valid = 1;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2201      	movs	r2, #1
 800af4e:	f883 2311 	strb.w	r2, [r3, #785]	@ 0x311
 800af52:	e003      	b.n	800af5c <Sensor_GNSS_Update+0x100>
                    sw->gps_fix_valid = 0;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	f883 2311 	strb.w	r2, [r3, #785]	@ 0x311
                sw->gnss_state           = 0;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318
                sw->gnss_nextRequestTick = now + 1000;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
            break;
 800af70:	e001      	b.n	800af76 <Sensor_GNSS_Update+0x11a>
            break;
 800af72:	bf00      	nop
 800af74:	e000      	b.n	800af78 <Sensor_GNSS_Update+0x11c>
            break;
 800af76:	bf00      	nop
}
 800af78:	bf00      	nop
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	447a0000 	.word	0x447a0000

0800af84 <Sensor_MPU6500_read_data>:

void Sensor_MPU6500_read_data(SmartWatchData_t *SmartWatchData_handle)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b0e4      	sub	sp, #400	@ 0x190
 800af88:	af04      	add	r7, sp, #16
 800af8a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800af8e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800af92:	6018      	str	r0, [r3, #0]
#define MAX_SAMPLES 10 // Max samples to read in one go (especially for FIFO)
	int16_t accel_raw[MAX_SAMPLES][3];
	float accel_g[MAX_SAMPLES][3];
	int16_t gyro_raw[MAX_SAMPLES][3];
	float gyro_dps[MAX_SAMPLES][3];
	uint16_t samples_read = MAX_SAMPLES; // Request up to MAX_SAMPLES
 800af94:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800af98:	f5a3 73b9 	sub.w	r3, r3, #370	@ 0x172
 800af9c:	220a      	movs	r2, #10
 800af9e:	801a      	strh	r2, [r3, #0]
	uint8_t status;
	int i;

	status = mpu6500_read_hal(&MPU6500_I2C, MPU6500_I2C_ADDR_SHIFTED,
 800afa0:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800afa4:	f107 030e 	add.w	r3, r7, #14
 800afa8:	9303      	str	r3, [sp, #12]
 800afaa:	f107 0310 	add.w	r3, r7, #16
 800afae:	9302      	str	r3, [sp, #8]
 800afb0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800afb4:	9301      	str	r3, [sp, #4]
 800afb6:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	4613      	mov	r3, r2
 800afbe:	f04f 32ff 	mov.w	r2, #4294967295
 800afc2:	21d0      	movs	r1, #208	@ 0xd0
 800afc4:	4862      	ldr	r0, [pc, #392]	@ (800b150 <Sensor_MPU6500_read_data+0x1cc>)
 800afc6:	f7fd fce5 	bl	8008994 <mpu6500_read_hal>
 800afca:	4603      	mov	r3, r0
 800afcc:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
	HAL_MAX_DELAY, accel_raw, accel_g, gyro_raw, gyro_dps, &samples_read);

	if (status == MPU6500_OK)
 800afd0:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	f040 80b0 	bne.w	800b13a <Sensor_MPU6500_read_data+0x1b6>
	{
		for (i = 0; i < samples_read; i++)
 800afda:	2300      	movs	r3, #0
 800afdc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800afe0:	e09f      	b.n	800b122 <Sensor_MPU6500_read_data+0x19e>
		{
			SmartWatchData_handle->accel_g[i][0] = accel_g[i][0];
 800afe2:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800afe6:	4613      	mov	r3, r2
 800afe8:	005b      	lsls	r3, r3, #1
 800afea:	4413      	add	r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800aff2:	443b      	add	r3, r7
 800aff4:	3bbc      	subs	r3, #188	@ 0xbc
 800aff6:	6819      	ldr	r1, [r3, #0]
 800aff8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800affc:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800b000:	6818      	ldr	r0, [r3, #0]
 800b002:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800b006:	4613      	mov	r3, r2
 800b008:	005b      	lsls	r3, r3, #1
 800b00a:	4413      	add	r3, r2
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	4403      	add	r3, r0
 800b010:	3344      	adds	r3, #68	@ 0x44
 800b012:	6019      	str	r1, [r3, #0]
			SmartWatchData_handle->accel_g[i][1] = accel_g[i][1];
 800b014:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800b018:	4613      	mov	r3, r2
 800b01a:	005b      	lsls	r3, r3, #1
 800b01c:	4413      	add	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800b024:	443b      	add	r3, r7
 800b026:	3bb8      	subs	r3, #184	@ 0xb8
 800b028:	6819      	ldr	r1, [r3, #0]
 800b02a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800b02e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800b032:	6818      	ldr	r0, [r3, #0]
 800b034:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800b038:	4613      	mov	r3, r2
 800b03a:	005b      	lsls	r3, r3, #1
 800b03c:	4413      	add	r3, r2
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	4403      	add	r3, r0
 800b042:	3348      	adds	r3, #72	@ 0x48
 800b044:	6019      	str	r1, [r3, #0]
			SmartWatchData_handle->accel_g[i][2] = accel_g[i][2];
 800b046:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800b04a:	4613      	mov	r3, r2
 800b04c:	005b      	lsls	r3, r3, #1
 800b04e:	4413      	add	r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800b056:	443b      	add	r3, r7
 800b058:	3bb4      	subs	r3, #180	@ 0xb4
 800b05a:	6819      	ldr	r1, [r3, #0]
 800b05c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800b060:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800b064:	6818      	ldr	r0, [r3, #0]
 800b066:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800b06a:	4613      	mov	r3, r2
 800b06c:	005b      	lsls	r3, r3, #1
 800b06e:	4413      	add	r3, r2
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	4403      	add	r3, r0
 800b074:	334c      	adds	r3, #76	@ 0x4c
 800b076:	6019      	str	r1, [r3, #0]

			SmartWatchData_handle->gyro_dps[i][0] = gyro_dps[i][0];
 800b078:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800b07c:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 800b080:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800b084:	4613      	mov	r3, r2
 800b086:	005b      	lsls	r3, r3, #1
 800b088:	4413      	add	r3, r2
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	440b      	add	r3, r1
 800b08e:	6819      	ldr	r1, [r3, #0]
 800b090:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800b094:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800b098:	6818      	ldr	r0, [r3, #0]
 800b09a:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800b09e:	4613      	mov	r3, r2
 800b0a0:	005b      	lsls	r3, r3, #1
 800b0a2:	4413      	add	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4403      	add	r3, r0
 800b0a8:	33bc      	adds	r3, #188	@ 0xbc
 800b0aa:	6019      	str	r1, [r3, #0]
			SmartWatchData_handle->gyro_dps[i][1] = gyro_dps[i][1];
 800b0ac:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800b0b0:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 800b0b4:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	005b      	lsls	r3, r3, #1
 800b0bc:	4413      	add	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	440b      	add	r3, r1
 800b0c2:	3304      	adds	r3, #4
 800b0c4:	6819      	ldr	r1, [r3, #0]
 800b0c6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800b0ca:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800b0ce:	6818      	ldr	r0, [r3, #0]
 800b0d0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	005b      	lsls	r3, r3, #1
 800b0d8:	4413      	add	r3, r2
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	4403      	add	r3, r0
 800b0de:	33c0      	adds	r3, #192	@ 0xc0
 800b0e0:	6019      	str	r1, [r3, #0]
			SmartWatchData_handle->gyro_dps[i][2] = gyro_dps[i][2];
 800b0e2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800b0e6:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 800b0ea:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	005b      	lsls	r3, r3, #1
 800b0f2:	4413      	add	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	440b      	add	r3, r1
 800b0f8:	3308      	adds	r3, #8
 800b0fa:	6819      	ldr	r1, [r3, #0]
 800b0fc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800b100:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800b104:	6818      	ldr	r0, [r3, #0]
 800b106:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800b10a:	4613      	mov	r3, r2
 800b10c:	005b      	lsls	r3, r3, #1
 800b10e:	4413      	add	r3, r2
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	4403      	add	r3, r0
 800b114:	33c4      	adds	r3, #196	@ 0xc4
 800b116:	6019      	str	r1, [r3, #0]
		for (i = 0; i < samples_read; i++)
 800b118:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800b11c:	3301      	adds	r3, #1
 800b11e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800b122:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800b126:	f5a3 73b9 	sub.w	r3, r3, #370	@ 0x172
 800b12a:	881b      	ldrh	r3, [r3, #0]
 800b12c:	461a      	mov	r2, r3
 800b12e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800b132:	4293      	cmp	r3, r2
 800b134:	f6ff af55 	blt.w	800afe2 <Sensor_MPU6500_read_data+0x5e>
	}
	else
	{
		printf("MPU6500 read failed with status: %u\r\n", status);
	}
}
 800b138:	e005      	b.n	800b146 <Sensor_MPU6500_read_data+0x1c2>
		printf("MPU6500 read failed with status: %u\r\n", status);
 800b13a:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 800b13e:	4619      	mov	r1, r3
 800b140:	4804      	ldr	r0, [pc, #16]	@ (800b154 <Sensor_MPU6500_read_data+0x1d0>)
 800b142:	f001 fbdb 	bl	800c8fc <iprintf>
}
 800b146:	bf00      	nop
 800b148:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	200001f0 	.word	0x200001f0
 800b154:	080100c0 	.word	0x080100c0

0800b158 <Sensor_BMP280_init>:

void Sensor_BMP280_init(BMP280_HandleTypedef *bmp280)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
//	HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &txData, 1, 100);
//	HAL_StatusTypeDef status = HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR,
//			rxData, 1, 100);
//	printf("Received: 0x%02X \r\n", rxData[0]);  // Print response

	bmp280_init_default_params(&bmp280->params);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	332c      	adds	r3, #44	@ 0x2c
 800b164:	4618      	mov	r0, r3
 800b166:	f7fe fc93 	bl	8009a90 <bmp280_init_default_params>
	bmp280->addr = BMP280_I2C_ADDRESS_0;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2276      	movs	r2, #118	@ 0x76
 800b16e:	849a      	strh	r2, [r3, #36]	@ 0x24
	bmp280->i2c = &BME280_I2C;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4a0b      	ldr	r2, [pc, #44]	@ (800b1a0 <Sensor_BMP280_init+0x48>)
 800b174:	629a      	str	r2, [r3, #40]	@ 0x28

    // 3) try to initialize until the chip acks
    while (!bmp280_init(bmp280, &bmp280->params)) {
 800b176:	e002      	b.n	800b17e <Sensor_BMP280_init+0x26>
        // Optional: blink an LED, print a message, delay, etc.
        HAL_Delay(200);
 800b178:	20c8      	movs	r0, #200	@ 0xc8
 800b17a:	f7f7 f8e3 	bl	8002344 <HAL_Delay>
    while (!bmp280_init(bmp280, &bmp280->params)) {
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	332c      	adds	r3, #44	@ 0x2c
 800b182:	4619      	mov	r1, r3
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f7fe fdff 	bl	8009d88 <bmp280_init>
 800b18a:	4603      	mov	r3, r0
 800b18c:	f083 0301 	eor.w	r3, r3, #1
 800b190:	b2db      	uxtb	r3, r3
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1f0      	bne.n	800b178 <Sensor_BMP280_init+0x20>
    }
//	bool bme280p = bmp280.id == BME280_CHIP_ID;
//	size = sprintf((char*) Data, "BMP280: found %s \r\n",
//			bme280p ? "BME280" : "BMP280");
//	HAL_UART_Transmit(&STLINK_UART, Data, size, 1000);
}
 800b196:	bf00      	nop
 800b198:	bf00      	nop
 800b19a:	3708      	adds	r7, #8
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	20000244 	.word	0x20000244

0800b1a4 <Sensor_BMP280_read_data>:

void Sensor_BMP280_read_data(SmartWatchData_t *SmartWatchData)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
	bmp280_read_float(&SmartWatchData->bmp280, &SmartWatchData->temperature,
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	333c      	adds	r3, #60	@ 0x3c
 800b1be:	f7ff fa4f 	bl	800a660 <bmp280_read_float>
			&SmartWatchData->pressure, &SmartWatchData->humidity);

}
 800b1c2:	bf00      	nop
 800b1c4:	3708      	adds	r7, #8
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
	...

0800b1cc <Sensor_MAX30102_configure_optimal_hr_spo2>:
 * If signals are too low (small AC, low DC), increase LED current.
 * If signals are saturating (DC near max), decrease LED current or increase ADC range.
 */
void Sensor_MAX30102_configure_optimal_hr_spo2(max30102_t *obj,
		I2C_HandleTypeDef *hi2c)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
//	// After reset, DIE_TEMP_CONFIG register is 0x00, so TEMP_EN is already 0.
//	max30102_set_die_temp_en(obj, 0);

	//------------------ DEBUG -----------------------
	// Initiation
	max30102_init(obj, hi2c);
 800b1d6:	6839      	ldr	r1, [r7, #0]
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f7ff fad0 	bl	800a77e <max30102_init>
	max30102_reset(obj);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f7ff fb46 	bl	800a870 <max30102_reset>
	max30102_clear_fifo(obj);
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7ff fd17 	bl	800ac18 <max30102_clear_fifo>
	max30102_set_fifo_config(obj, max30102_smp_ave_8, 1, 7);
 800b1ea:	2307      	movs	r3, #7
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	2103      	movs	r1, #3
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f7ff fcd5 	bl	800aba0 <max30102_set_fifo_config>

	// Sensor settings
	max30102_set_led_pulse_width(obj, max30102_pw_16_bit);
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f7ff fc37 	bl	800aa6c <max30102_set_led_pulse_width>
	max30102_set_adc_resolution(obj, max30102_adc_2048);
 800b1fe:	2100      	movs	r1, #0
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f7ff fc56 	bl	800aab2 <max30102_set_adc_resolution>
	max30102_set_sampling_rate(obj, max30102_sr_800);
 800b206:	2104      	movs	r1, #4
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f7ff fc0a 	bl	800aa22 <max30102_set_sampling_rate>
	max30102_set_led_current_1(obj, 6.2);
 800b20e:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800b27c <Sensor_MAX30102_configure_optimal_hr_spo2+0xb0>
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7ff fc74 	bl	800ab00 <max30102_set_led_current_1>
	max30102_set_led_current_2(obj, 6.2);
 800b218:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800b27c <Sensor_MAX30102_configure_optimal_hr_spo2+0xb0>
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f7ff fc97 	bl	800ab50 <max30102_set_led_current_2>

	// Enter SpO2 mode
	max30102_set_mode(obj, max30102_spo2);
 800b222:	2103      	movs	r1, #3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f7ff fbd6 	bl	800a9d6 <max30102_set_mode>
	max30102_set_a_full(obj, 1);
 800b22a:	2101      	movs	r1, #1
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7ff fb30 	bl	800a892 <max30102_set_a_full>

	// Initiate 1 temperature measurement
	max30102_set_die_temp_en(obj, 1);
 800b232:	2101      	movs	r1, #1
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f7ff fb6d 	bl	800a914 <max30102_set_die_temp_en>
	max30102_set_die_temp_rdy(obj, 1);
 800b23a:	2101      	movs	r1, #1
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f7ff fb51 	bl	800a8e4 <max30102_set_die_temp_rdy>

	uint8_t en_reg[2] =
 800b242:	2300      	movs	r3, #0
 800b244:	81bb      	strh	r3, [r7, #12]
	{ 0 };
	max30102_read(obj, 0x00, en_reg, 1);
 800b246:	f107 020c 	add.w	r2, r7, #12
 800b24a:	2301      	movs	r3, #1
 800b24c:	2100      	movs	r1, #0
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f7ff fae9 	bl	800a826 <max30102_read>

	//Enter measurement mode:
	// Enter SpO2 mode
	max30102_set_mode(obj, max30102_spo2);
 800b254:	2103      	movs	r1, #3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7ff fbbd 	bl	800a9d6 <max30102_set_mode>

	//Enable the required interrupts:
	// Enable FIFO_A_FULL interrupt
	max30102_set_a_full(obj, 1);
 800b25c:	2101      	movs	r1, #1
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f7ff fb17 	bl	800a892 <max30102_set_a_full>
	// Enable die temperature measurement
	max30102_set_die_temp_en(obj, 1);
 800b264:	2101      	movs	r1, #1
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f7ff fb54 	bl	800a914 <max30102_set_die_temp_en>
	// Enable DIE_TEMP_RDY interrupt
	max30102_set_die_temp_rdy(obj, 1);
 800b26c:	2101      	movs	r1, #1
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f7ff fb38 	bl	800a8e4 <max30102_set_die_temp_rdy>
}
 800b274:	bf00      	nop
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	40c66666 	.word	0x40c66666

0800b280 <Sensor_MAX30102_init>:
	return (uint8_t) ((peaks * 60.0f) / window_sec);
}

void Sensor_MAX30102_init(float sampling_rate_hz, max30102_t *obj,
		I2C_HandleTypeDef *hi2c)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	ed87 0a03 	vstr	s0, [r7, #12]
 800b28a:	60b8      	str	r0, [r7, #8]
 800b28c:	6079      	str	r1, [r7, #4]
	MAX30102_fs = sampling_rate_hz;
 800b28e:	4a08      	ldr	r2, [pc, #32]	@ (800b2b0 <Sensor_MAX30102_init+0x30>)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6013      	str	r3, [r2, #0]
	last_MAX30102_hr = 0;
 800b294:	4b07      	ldr	r3, [pc, #28]	@ (800b2b4 <Sensor_MAX30102_init+0x34>)
 800b296:	2200      	movs	r2, #0
 800b298:	701a      	strb	r2, [r3, #0]
	last_MAX30102_spo2 = 0;
 800b29a:	4b07      	ldr	r3, [pc, #28]	@ (800b2b8 <Sensor_MAX30102_init+0x38>)
 800b29c:	2200      	movs	r2, #0
 800b29e:	701a      	strb	r2, [r3, #0]
	Sensor_MAX30102_configure_optimal_hr_spo2(obj,
 800b2a0:	6879      	ldr	r1, [r7, #4]
 800b2a2:	68b8      	ldr	r0, [r7, #8]
 800b2a4:	f7ff ff92 	bl	800b1cc <Sensor_MAX30102_configure_optimal_hr_spo2>
			hi2c);
}
 800b2a8:	bf00      	nop
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	20000d44 	.word	0x20000d44
 800b2b4:	20000d48 	.word	0x20000d48
 800b2b8:	20000d49 	.word	0x20000d49

0800b2bc <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800b2c6:	bf00      	nop
	ST7789_DC_Clr();
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	2140      	movs	r1, #64	@ 0x40
 800b2cc:	4807      	ldr	r0, [pc, #28]	@ (800b2ec <ST7789_WriteCommand+0x30>)
 800b2ce:	f7f7 fd9b 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800b2d2:	1df9      	adds	r1, r7, #7
 800b2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2d8:	2201      	movs	r2, #1
 800b2da:	4805      	ldr	r0, [pc, #20]	@ (800b2f0 <ST7789_WriteCommand+0x34>)
 800b2dc:	f7fa fa45 	bl	800576a <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800b2e0:	bf00      	nop
}
 800b2e2:	bf00      	nop
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	48000800 	.word	0x48000800
 800b2f0:	200005ac 	.word	0x200005ac

0800b2f4 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 800b2fe:	bf00      	nop
	ST7789_DC_Set();
 800b300:	2201      	movs	r2, #1
 800b302:	2140      	movs	r1, #64	@ 0x40
 800b304:	481b      	ldr	r0, [pc, #108]	@ (800b374 <ST7789_WriteData+0x80>)
 800b306:	f7f7 fd7f 	bl	8002e08 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 800b30a:	e02a      	b.n	800b362 <ST7789_WriteData+0x6e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b312:	4293      	cmp	r3, r2
 800b314:	bf28      	it	cs
 800b316:	4613      	movcs	r3, r2
 800b318:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 800b31a:	4b17      	ldr	r3, [pc, #92]	@ (800b378 <ST7789_WriteData+0x84>)
 800b31c:	881b      	ldrh	r3, [r3, #0]
 800b31e:	461a      	mov	r2, r3
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	4293      	cmp	r3, r2
 800b324:	d30e      	bcc.n	800b344 <ST7789_WriteData+0x50>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 800b326:	89fb      	ldrh	r3, [r7, #14]
 800b328:	461a      	mov	r2, r3
 800b32a:	6879      	ldr	r1, [r7, #4]
 800b32c:	4813      	ldr	r0, [pc, #76]	@ (800b37c <ST7789_WriteData+0x88>)
 800b32e:	f7fa fb93 	bl	8005a58 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 800b332:	bf00      	nop
 800b334:	4b11      	ldr	r3, [pc, #68]	@ (800b37c <ST7789_WriteData+0x88>)
 800b336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b338:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d1f8      	bne.n	800b334 <ST7789_WriteData+0x40>
 800b342:	e006      	b.n	800b352 <ST7789_WriteData+0x5e>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800b344:	89fa      	ldrh	r2, [r7, #14]
 800b346:	f04f 33ff 	mov.w	r3, #4294967295
 800b34a:	6879      	ldr	r1, [r7, #4]
 800b34c:	480b      	ldr	r0, [pc, #44]	@ (800b37c <ST7789_WriteData+0x88>)
 800b34e:	f7fa fa0c 	bl	800576a <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 800b352:	89fb      	ldrh	r3, [r7, #14]
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	4413      	add	r3, r2
 800b358:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800b35a:	89fb      	ldrh	r3, [r7, #14]
 800b35c:	683a      	ldr	r2, [r7, #0]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1d1      	bne.n	800b30c <ST7789_WriteData+0x18>
	}

	ST7789_UnSelect();
 800b368:	bf00      	nop
}
 800b36a:	bf00      	nop
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	48000800 	.word	0x48000800
 800b378:	2000000a 	.word	0x2000000a
 800b37c:	200005ac 	.word	0x200005ac

0800b380 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	4603      	mov	r3, r0
 800b388:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800b38a:	bf00      	nop
	ST7789_DC_Set();
 800b38c:	2201      	movs	r2, #1
 800b38e:	2140      	movs	r1, #64	@ 0x40
 800b390:	4807      	ldr	r0, [pc, #28]	@ (800b3b0 <ST7789_WriteSmallData+0x30>)
 800b392:	f7f7 fd39 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 800b396:	1df9      	adds	r1, r7, #7
 800b398:	f04f 33ff 	mov.w	r3, #4294967295
 800b39c:	2201      	movs	r2, #1
 800b39e:	4805      	ldr	r0, [pc, #20]	@ (800b3b4 <ST7789_WriteSmallData+0x34>)
 800b3a0:	f7fa f9e3 	bl	800576a <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800b3a4:	bf00      	nop
}
 800b3a6:	bf00      	nop
 800b3a8:	3708      	adds	r7, #8
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	48000800 	.word	0x48000800
 800b3b4:	200005ac 	.word	0x200005ac

0800b3b8 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	4603      	mov	r3, r0
 800b3c0:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800b3c2:	2036      	movs	r0, #54	@ 0x36
 800b3c4:	f7ff ff7a 	bl	800b2bc <ST7789_WriteCommand>
	switch (m) {
 800b3c8:	79fb      	ldrb	r3, [r7, #7]
 800b3ca:	2b03      	cmp	r3, #3
 800b3cc:	d81a      	bhi.n	800b404 <ST7789_SetRotation+0x4c>
 800b3ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b3d4 <ST7789_SetRotation+0x1c>)
 800b3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d4:	0800b3e5 	.word	0x0800b3e5
 800b3d8:	0800b3ed 	.word	0x0800b3ed
 800b3dc:	0800b3f5 	.word	0x0800b3f5
 800b3e0:	0800b3fd 	.word	0x0800b3fd
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 800b3e4:	20c0      	movs	r0, #192	@ 0xc0
 800b3e6:	f7ff ffcb 	bl	800b380 <ST7789_WriteSmallData>
		break;
 800b3ea:	e00c      	b.n	800b406 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800b3ec:	20a0      	movs	r0, #160	@ 0xa0
 800b3ee:	f7ff ffc7 	bl	800b380 <ST7789_WriteSmallData>
		break;
 800b3f2:	e008      	b.n	800b406 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	f7ff ffc3 	bl	800b380 <ST7789_WriteSmallData>
		break;
 800b3fa:	e004      	b.n	800b406 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800b3fc:	2060      	movs	r0, #96	@ 0x60
 800b3fe:	f7ff ffbf 	bl	800b380 <ST7789_WriteSmallData>
		break;
 800b402:	e000      	b.n	800b406 <ST7789_SetRotation+0x4e>
	default:
		break;
 800b404:	bf00      	nop
	}
}
 800b406:	bf00      	nop
 800b408:	3708      	adds	r7, #8
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop

0800b410 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800b410:	b590      	push	{r4, r7, lr}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	4604      	mov	r4, r0
 800b418:	4608      	mov	r0, r1
 800b41a:	4611      	mov	r1, r2
 800b41c:	461a      	mov	r2, r3
 800b41e:	4623      	mov	r3, r4
 800b420:	80fb      	strh	r3, [r7, #6]
 800b422:	4603      	mov	r3, r0
 800b424:	80bb      	strh	r3, [r7, #4]
 800b426:	460b      	mov	r3, r1
 800b428:	807b      	strh	r3, [r7, #2]
 800b42a:	4613      	mov	r3, r2
 800b42c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800b42e:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 800b430:	88fb      	ldrh	r3, [r7, #6]
 800b432:	82fb      	strh	r3, [r7, #22]
 800b434:	887b      	ldrh	r3, [r7, #2]
 800b436:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 800b438:	88bb      	ldrh	r3, [r7, #4]
 800b43a:	3323      	adds	r3, #35	@ 0x23
 800b43c:	827b      	strh	r3, [r7, #18]
 800b43e:	883b      	ldrh	r3, [r7, #0]
 800b440:	3323      	adds	r3, #35	@ 0x23
 800b442:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 800b444:	202a      	movs	r0, #42	@ 0x2a
 800b446:	f7ff ff39 	bl	800b2bc <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 800b44a:	8afb      	ldrh	r3, [r7, #22]
 800b44c:	0a1b      	lsrs	r3, r3, #8
 800b44e:	b29b      	uxth	r3, r3
 800b450:	b2db      	uxtb	r3, r3
 800b452:	733b      	strb	r3, [r7, #12]
 800b454:	8afb      	ldrh	r3, [r7, #22]
 800b456:	b2db      	uxtb	r3, r3
 800b458:	737b      	strb	r3, [r7, #13]
 800b45a:	8abb      	ldrh	r3, [r7, #20]
 800b45c:	0a1b      	lsrs	r3, r3, #8
 800b45e:	b29b      	uxth	r3, r3
 800b460:	b2db      	uxtb	r3, r3
 800b462:	73bb      	strb	r3, [r7, #14]
 800b464:	8abb      	ldrh	r3, [r7, #20]
 800b466:	b2db      	uxtb	r3, r3
 800b468:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800b46a:	f107 030c 	add.w	r3, r7, #12
 800b46e:	2104      	movs	r1, #4
 800b470:	4618      	mov	r0, r3
 800b472:	f7ff ff3f 	bl	800b2f4 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800b476:	202b      	movs	r0, #43	@ 0x2b
 800b478:	f7ff ff20 	bl	800b2bc <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800b47c:	8a7b      	ldrh	r3, [r7, #18]
 800b47e:	0a1b      	lsrs	r3, r3, #8
 800b480:	b29b      	uxth	r3, r3
 800b482:	b2db      	uxtb	r3, r3
 800b484:	723b      	strb	r3, [r7, #8]
 800b486:	8a7b      	ldrh	r3, [r7, #18]
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	727b      	strb	r3, [r7, #9]
 800b48c:	8a3b      	ldrh	r3, [r7, #16]
 800b48e:	0a1b      	lsrs	r3, r3, #8
 800b490:	b29b      	uxth	r3, r3
 800b492:	b2db      	uxtb	r3, r3
 800b494:	72bb      	strb	r3, [r7, #10]
 800b496:	8a3b      	ldrh	r3, [r7, #16]
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800b49c:	f107 0308 	add.w	r3, r7, #8
 800b4a0:	2104      	movs	r1, #4
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7ff ff26 	bl	800b2f4 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 800b4a8:	202c      	movs	r0, #44	@ 0x2c
 800b4aa:	f7ff ff07 	bl	800b2bc <ST7789_WriteCommand>
	ST7789_UnSelect();
 800b4ae:	bf00      	nop
}
 800b4b0:	bf00      	nop
 800b4b2:	371c      	adds	r7, #28
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd90      	pop	{r4, r7, pc}

0800b4b8 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 800b4b8:	b590      	push	{r4, r7, lr}
 800b4ba:	b08b      	sub	sp, #44	@ 0x2c
 800b4bc:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 800b4be:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800b4c2:	2100      	movs	r1, #0
 800b4c4:	484c      	ldr	r0, [pc, #304]	@ (800b5f8 <ST7789_Init+0x140>)
 800b4c6:	f001 fac6 	bl	800ca56 <memset>
	#endif
	HAL_Delay(10);
 800b4ca:	200a      	movs	r0, #10
 800b4cc:	f7f6 ff3a 	bl	8002344 <HAL_Delay>
    ST7789_RST_Clr();
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b4d6:	4849      	ldr	r0, [pc, #292]	@ (800b5fc <ST7789_Init+0x144>)
 800b4d8:	f7f7 fc96 	bl	8002e08 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800b4dc:	200a      	movs	r0, #10
 800b4de:	f7f6 ff31 	bl	8002344 <HAL_Delay>
    ST7789_RST_Set();
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b4e8:	4844      	ldr	r0, [pc, #272]	@ (800b5fc <ST7789_Init+0x144>)
 800b4ea:	f7f7 fc8d 	bl	8002e08 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800b4ee:	2014      	movs	r0, #20
 800b4f0:	f7f6 ff28 	bl	8002344 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 800b4f4:	203a      	movs	r0, #58	@ 0x3a
 800b4f6:	f7ff fee1 	bl	800b2bc <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 800b4fa:	2055      	movs	r0, #85	@ 0x55
 800b4fc:	f7ff ff40 	bl	800b380 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800b500:	20b2      	movs	r0, #178	@ 0xb2
 800b502:	f7ff fedb 	bl	800b2bc <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 800b506:	4a3e      	ldr	r2, [pc, #248]	@ (800b600 <ST7789_Init+0x148>)
 800b508:	f107 0320 	add.w	r3, r7, #32
 800b50c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b510:	6018      	str	r0, [r3, #0]
 800b512:	3304      	adds	r3, #4
 800b514:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 800b516:	f107 0320 	add.w	r3, r7, #32
 800b51a:	2105      	movs	r1, #5
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7ff fee9 	bl	800b2f4 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 800b522:	2003      	movs	r0, #3
 800b524:	f7ff ff48 	bl	800b3b8 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 800b528:	20b7      	movs	r0, #183	@ 0xb7
 800b52a:	f7ff fec7 	bl	800b2bc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 800b52e:	2035      	movs	r0, #53	@ 0x35
 800b530:	f7ff ff26 	bl	800b380 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 800b534:	20bb      	movs	r0, #187	@ 0xbb
 800b536:	f7ff fec1 	bl	800b2bc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 800b53a:	2019      	movs	r0, #25
 800b53c:	f7ff ff20 	bl	800b380 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 800b540:	20c0      	movs	r0, #192	@ 0xc0
 800b542:	f7ff febb 	bl	800b2bc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 800b546:	202c      	movs	r0, #44	@ 0x2c
 800b548:	f7ff ff1a 	bl	800b380 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 800b54c:	20c2      	movs	r0, #194	@ 0xc2
 800b54e:	f7ff feb5 	bl	800b2bc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 800b552:	2001      	movs	r0, #1
 800b554:	f7ff ff14 	bl	800b380 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 800b558:	20c3      	movs	r0, #195	@ 0xc3
 800b55a:	f7ff feaf 	bl	800b2bc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 800b55e:	2012      	movs	r0, #18
 800b560:	f7ff ff0e 	bl	800b380 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 800b564:	20c4      	movs	r0, #196	@ 0xc4
 800b566:	f7ff fea9 	bl	800b2bc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 800b56a:	2020      	movs	r0, #32
 800b56c:	f7ff ff08 	bl	800b380 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 800b570:	20c6      	movs	r0, #198	@ 0xc6
 800b572:	f7ff fea3 	bl	800b2bc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 800b576:	200f      	movs	r0, #15
 800b578:	f7ff ff02 	bl	800b380 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 800b57c:	20d0      	movs	r0, #208	@ 0xd0
 800b57e:	f7ff fe9d 	bl	800b2bc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800b582:	20a4      	movs	r0, #164	@ 0xa4
 800b584:	f7ff fefc 	bl	800b380 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 800b588:	20a1      	movs	r0, #161	@ 0xa1
 800b58a:	f7ff fef9 	bl	800b380 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800b58e:	20e0      	movs	r0, #224	@ 0xe0
 800b590:	f7ff fe94 	bl	800b2bc <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 800b594:	4b1b      	ldr	r3, [pc, #108]	@ (800b604 <ST7789_Init+0x14c>)
 800b596:	f107 0410 	add.w	r4, r7, #16
 800b59a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b59c:	c407      	stmia	r4!, {r0, r1, r2}
 800b59e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800b5a0:	f107 0310 	add.w	r3, r7, #16
 800b5a4:	210e      	movs	r1, #14
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7ff fea4 	bl	800b2f4 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 800b5ac:	20e1      	movs	r0, #225	@ 0xe1
 800b5ae:	f7ff fe85 	bl	800b2bc <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800b5b2:	4b15      	ldr	r3, [pc, #84]	@ (800b608 <ST7789_Init+0x150>)
 800b5b4:	463c      	mov	r4, r7
 800b5b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b5b8:	c407      	stmia	r4!, {r0, r1, r2}
 800b5ba:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800b5bc:	463b      	mov	r3, r7
 800b5be:	210e      	movs	r1, #14
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7ff fe97 	bl	800b2f4 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 800b5c6:	2021      	movs	r0, #33	@ 0x21
 800b5c8:	f7ff fe78 	bl	800b2bc <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 800b5cc:	2011      	movs	r0, #17
 800b5ce:	f7ff fe75 	bl	800b2bc <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800b5d2:	2013      	movs	r0, #19
 800b5d4:	f7ff fe72 	bl	800b2bc <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 800b5d8:	2029      	movs	r0, #41	@ 0x29
 800b5da:	f7ff fe6f 	bl	800b2bc <ST7789_WriteCommand>

	HAL_Delay(50);
 800b5de:	2032      	movs	r0, #50	@ 0x32
 800b5e0:	f7f6 feb0 	bl	8002344 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 800b5e4:	2000      	movs	r0, #0
 800b5e6:	f000 f811 	bl	800b60c <ST7789_Fill_Color>
	HAL_Delay(50);
 800b5ea:	2032      	movs	r0, #50	@ 0x32
 800b5ec:	f7f6 feaa 	bl	8002344 <HAL_Delay>

}
 800b5f0:	bf00      	nop
 800b5f2:	372c      	adds	r7, #44	@ 0x2c
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd90      	pop	{r4, r7, pc}
 800b5f8:	20000d4c 	.word	0x20000d4c
 800b5fc:	48000400 	.word	0x48000400
 800b600:	080100e8 	.word	0x080100e8
 800b604:	080100f0 	.word	0x080100f0
 800b608:	08010100 	.word	0x08010100

0800b60c <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	4603      	mov	r3, r0
 800b614:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800b616:	23a9      	movs	r3, #169	@ 0xa9
 800b618:	f240 123f 	movw	r2, #319	@ 0x13f
 800b61c:	2100      	movs	r1, #0
 800b61e:	2000      	movs	r0, #0
 800b620:	f7ff fef6 	bl	800b410 <ST7789_SetAddressWindow>
	ST7789_Select();
 800b624:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800b626:	2300      	movs	r3, #0
 800b628:	81fb      	strh	r3, [r7, #14]
 800b62a:	e00e      	b.n	800b64a <ST7789_Fill_Color+0x3e>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 800b62c:	88fb      	ldrh	r3, [r7, #6]
 800b62e:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800b632:	4619      	mov	r1, r3
 800b634:	4809      	ldr	r0, [pc, #36]	@ (800b65c <ST7789_Fill_Color+0x50>)
 800b636:	f001 fa0e 	bl	800ca56 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 800b63a:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 800b63e:	4807      	ldr	r0, [pc, #28]	@ (800b65c <ST7789_Fill_Color+0x50>)
 800b640:	f7ff fe58 	bl	800b2f4 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800b644:	89fb      	ldrh	r3, [r7, #14]
 800b646:	3301      	adds	r3, #1
 800b648:	81fb      	strh	r3, [r7, #14]
 800b64a:	89fb      	ldrh	r3, [r7, #14]
 800b64c:	2b21      	cmp	r3, #33	@ 0x21
 800b64e:	d9ed      	bls.n	800b62c <ST7789_Fill_Color+0x20>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 800b650:	bf00      	nop
}
 800b652:	bf00      	nop
 800b654:	3710      	adds	r7, #16
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	20000d4c 	.word	0x20000d4c

0800b660 <SendSmartWatchData>:


// Transmit all key fields of your SmartWatchData_t as a single CSV line.
// You can adjust which fields you include or change formatting as needed.
void SendSmartWatchData(UART_HandleTypeDef *huart, const SmartWatchData_t *sw)
{
 800b660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b664:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
 800b668:	af24      	add	r7, sp, #144	@ 0x90
 800b66a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b66e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b672:	6018      	str	r0, [r3, #0]
 800b674:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b678:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b67c:	6019      	str	r1, [r3, #0]
        "Ax=%.3f, Ay=%.3f, Az=%.3f, "
        "Gx=%.3f, Gy=%.3f, Gz=%.3f, "
        "HR=%d, SpO2=%.1f, "
        "Lat=%.6f, Lon=%.6f, Alt=%.2f, "
        "Date=%04u-%02u-%02u, Time=%02u:%02u:%02u, Fix=%u\r\n",
        sw->temperature,
 800b67e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b682:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    int len = snprintf(buf, sizeof(buf),
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7f4 ff5c 	bl	8000548 <__aeabi_f2d>
 800b690:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
        sw->pressure,
 800b694:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b698:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    int len = snprintf(buf, sizeof(buf),
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7f4 ff51 	bl	8000548 <__aeabi_f2d>
 800b6a6:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
        sw->humidity,
 800b6aa:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b6ae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    int len = snprintf(buf, sizeof(buf),
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7f4 ff46 	bl	8000548 <__aeabi_f2d>
 800b6bc:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
        sw->accel_g[0][0],
 800b6c0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b6c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    int len = snprintf(buf, sizeof(buf),
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7f4 ff3b 	bl	8000548 <__aeabi_f2d>
 800b6d2:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
        sw->accel_g[0][1],
 800b6d6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b6da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    int len = snprintf(buf, sizeof(buf),
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7f4 ff30 	bl	8000548 <__aeabi_f2d>
 800b6e8:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
        sw->accel_g[0][2],
 800b6ec:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b6f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    int len = snprintf(buf, sizeof(buf),
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7f4 ff25 	bl	8000548 <__aeabi_f2d>
 800b6fe:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
        sw->gyro_dps[0][0],
 800b702:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b706:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
    int len = snprintf(buf, sizeof(buf),
 800b710:	4618      	mov	r0, r3
 800b712:	f7f4 ff19 	bl	8000548 <__aeabi_f2d>
 800b716:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
        sw->gyro_dps[0][1],
 800b71a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b71e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
    int len = snprintf(buf, sizeof(buf),
 800b728:	4618      	mov	r0, r3
 800b72a:	f7f4 ff0d 	bl	8000548 <__aeabi_f2d>
 800b72e:	e9c7 0108 	strd	r0, r1, [r7, #32]
        sw->gyro_dps[0][2],
 800b732:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b736:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
    int len = snprintf(buf, sizeof(buf),
 800b740:	4618      	mov	r0, r3
 800b742:	f7f4 ff01 	bl	8000548 <__aeabi_f2d>
 800b746:	e9c7 0106 	strd	r0, r1, [r7, #24]
        sw->heart_rate,
 800b74a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b74e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f9b3 3240 	ldrsh.w	r3, [r3, #576]	@ 0x240
    int len = snprintf(buf, sizeof(buf),
 800b758:	617b      	str	r3, [r7, #20]
        sw->spo2,
 800b75a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b75e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f8d3 3244 	ldr.w	r3, [r3, #580]	@ 0x244
    int len = snprintf(buf, sizeof(buf),
 800b768:	4618      	mov	r0, r3
 800b76a:	f7f4 feed 	bl	8000548 <__aeabi_f2d>
 800b76e:	e9c7 0102 	strd	r0, r1, [r7, #8]
        sw->latitude,
 800b772:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b776:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f8d3 32fc 	ldr.w	r3, [r3, #764]	@ 0x2fc
    int len = snprintf(buf, sizeof(buf),
 800b780:	4618      	mov	r0, r3
 800b782:	f7f4 fee1 	bl	8000548 <__aeabi_f2d>
 800b786:	4682      	mov	sl, r0
 800b788:	468b      	mov	fp, r1
        sw->longitude,
 800b78a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b78e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
    int len = snprintf(buf, sizeof(buf),
 800b798:	4618      	mov	r0, r3
 800b79a:	f7f4 fed5 	bl	8000548 <__aeabi_f2d>
 800b79e:	4680      	mov	r8, r0
 800b7a0:	4689      	mov	r9, r1
        sw->altitude,
 800b7a2:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b7a6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
    int len = snprintf(buf, sizeof(buf),
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7f4 fec9 	bl	8000548 <__aeabi_f2d>
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	460d      	mov	r5, r1
        sw->year,
 800b7ba:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b7be:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f8b3 3308 	ldrh.w	r3, [r3, #776]	@ 0x308
    int len = snprintf(buf, sizeof(buf),
 800b7c8:	613b      	str	r3, [r7, #16]
        sw->month,
 800b7ca:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b7ce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f8b3 330a 	ldrh.w	r3, [r3, #778]	@ 0x30a
    int len = snprintf(buf, sizeof(buf),
 800b7d8:	607b      	str	r3, [r7, #4]
        sw->day,
 800b7da:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b7de:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f8b3 330c 	ldrh.w	r3, [r3, #780]	@ 0x30c
    int len = snprintf(buf, sizeof(buf),
 800b7e8:	603b      	str	r3, [r7, #0]
        sw->hour,
 800b7ea:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b7ee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f893 330e 	ldrb.w	r3, [r3, #782]	@ 0x30e
    int len = snprintf(buf, sizeof(buf),
 800b7f8:	461e      	mov	r6, r3
        sw->minute,
 800b7fa:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b7fe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f893 330f 	ldrb.w	r3, [r3, #783]	@ 0x30f
    int len = snprintf(buf, sizeof(buf),
 800b808:	4619      	mov	r1, r3
        sw->second,
 800b80a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b80e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
    int len = snprintf(buf, sizeof(buf),
 800b818:	461a      	mov	r2, r3
        sw->gps_fix_valid
 800b81a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b81e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f893 3311 	ldrb.w	r3, [r3, #785]	@ 0x311
    int len = snprintf(buf, sizeof(buf),
 800b828:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800b82c:	9322      	str	r3, [sp, #136]	@ 0x88
 800b82e:	9221      	str	r2, [sp, #132]	@ 0x84
 800b830:	9120      	str	r1, [sp, #128]	@ 0x80
 800b832:	961f      	str	r6, [sp, #124]	@ 0x7c
 800b834:	683a      	ldr	r2, [r7, #0]
 800b836:	921e      	str	r2, [sp, #120]	@ 0x78
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	921d      	str	r2, [sp, #116]	@ 0x74
 800b83c:	693a      	ldr	r2, [r7, #16]
 800b83e:	921c      	str	r2, [sp, #112]	@ 0x70
 800b840:	e9cd 451a 	strd	r4, r5, [sp, #104]	@ 0x68
 800b844:	e9cd 8918 	strd	r8, r9, [sp, #96]	@ 0x60
 800b848:	e9cd ab16 	strd	sl, fp, [sp, #88]	@ 0x58
 800b84c:	ed97 7b02 	vldr	d7, [r7, #8]
 800b850:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	9312      	str	r3, [sp, #72]	@ 0x48
 800b858:	ed97 7b06 	vldr	d7, [r7, #24]
 800b85c:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 800b860:	ed97 7b08 	vldr	d7, [r7, #32]
 800b864:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b868:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800b86c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b870:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800b874:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b878:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800b87c:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b880:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 800b884:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b888:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 800b88c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b890:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800b894:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b898:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800b89c:	ed8d 7b00 	vstr	d7, [sp]
 800b8a0:	4a0d      	ldr	r2, [pc, #52]	@ (800b8d8 <SendSmartWatchData+0x278>)
 800b8a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b8a6:	f001 f83b 	bl	800c920 <sniprintf>
 800b8aa:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    );

    // Transmit (blocking here; you can switch to DMA if you like)
    HAL_UART_Transmit(huart, (uint8_t*)buf, len, HAL_MAX_DELAY);
 800b8ae:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800b8b2:	b29a      	uxth	r2, r3
 800b8b4:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800b8b8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800b8bc:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 800b8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b8c4:	6800      	ldr	r0, [r0, #0]
 800b8c6:	f7fa fd1b 	bl	8006300 <HAL_UART_Transmit>
}
 800b8ca:	bf00      	nop
 800b8cc:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d6:	bf00      	nop
 800b8d8:	08010180 	.word	0x08010180

0800b8dc <SendScreenState>:

// Transmit just the screen state, e.g. when a button interrupt changes it
void SendScreenState(UART_HandleTypeDef *huart, UI_Screen_State_t state)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b08c      	sub	sp, #48	@ 0x30
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	70fb      	strb	r3, [r7, #3]
    char buf[32];
    int len = snprintf(buf, sizeof(buf),
 800b8e8:	78fb      	ldrb	r3, [r7, #3]
 800b8ea:	f107 000c 	add.w	r0, r7, #12
 800b8ee:	4a09      	ldr	r2, [pc, #36]	@ (800b914 <SendScreenState+0x38>)
 800b8f0:	2120      	movs	r1, #32
 800b8f2:	f001 f815 	bl	800c920 <sniprintf>
 800b8f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        "SCREEN_STATE=%u\r\n",
        (unsigned)state
    );
    HAL_UART_Transmit(huart, (uint8_t*)buf, len, HAL_MAX_DELAY);
 800b8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8fa:	b29a      	uxth	r2, r3
 800b8fc:	f107 010c 	add.w	r1, r7, #12
 800b900:	f04f 33ff 	mov.w	r3, #4294967295
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7fa fcfb 	bl	8006300 <HAL_UART_Transmit>
}
 800b90a:	bf00      	nop
 800b90c:	3730      	adds	r7, #48	@ 0x30
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	08010234 	.word	0x08010234

0800b918 <Sensor_SmartWatch_log>:

//------------------------------------------------------------------------------
// Example: call SendSmartWatchData() periodically in your main loop or scheduler
//------------------------------------------------------------------------------
void Sensor_SmartWatch_log(const SmartWatchData_t *sw)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
    SendSmartWatchData(&STLINK_UART, sw);
 800b920:	6879      	ldr	r1, [r7, #4]
 800b922:	4803      	ldr	r0, [pc, #12]	@ (800b930 <Sensor_SmartWatch_log+0x18>)
 800b924:	f7ff fe9c 	bl	800b660 <SendSmartWatchData>
}
 800b928:	bf00      	nop
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	2000065c 	.word	0x2000065c

0800b934 <malloc>:
 800b934:	4b02      	ldr	r3, [pc, #8]	@ (800b940 <malloc+0xc>)
 800b936:	4601      	mov	r1, r0
 800b938:	6818      	ldr	r0, [r3, #0]
 800b93a:	f000 b82d 	b.w	800b998 <_malloc_r>
 800b93e:	bf00      	nop
 800b940:	20000018 	.word	0x20000018

0800b944 <free>:
 800b944:	4b02      	ldr	r3, [pc, #8]	@ (800b950 <free+0xc>)
 800b946:	4601      	mov	r1, r0
 800b948:	6818      	ldr	r0, [r3, #0]
 800b94a:	f001 bf81 	b.w	800d850 <_free_r>
 800b94e:	bf00      	nop
 800b950:	20000018 	.word	0x20000018

0800b954 <sbrk_aligned>:
 800b954:	b570      	push	{r4, r5, r6, lr}
 800b956:	4e0f      	ldr	r6, [pc, #60]	@ (800b994 <sbrk_aligned+0x40>)
 800b958:	460c      	mov	r4, r1
 800b95a:	6831      	ldr	r1, [r6, #0]
 800b95c:	4605      	mov	r5, r0
 800b95e:	b911      	cbnz	r1, 800b966 <sbrk_aligned+0x12>
 800b960:	f001 f8ba 	bl	800cad8 <_sbrk_r>
 800b964:	6030      	str	r0, [r6, #0]
 800b966:	4621      	mov	r1, r4
 800b968:	4628      	mov	r0, r5
 800b96a:	f001 f8b5 	bl	800cad8 <_sbrk_r>
 800b96e:	1c43      	adds	r3, r0, #1
 800b970:	d103      	bne.n	800b97a <sbrk_aligned+0x26>
 800b972:	f04f 34ff 	mov.w	r4, #4294967295
 800b976:	4620      	mov	r0, r4
 800b978:	bd70      	pop	{r4, r5, r6, pc}
 800b97a:	1cc4      	adds	r4, r0, #3
 800b97c:	f024 0403 	bic.w	r4, r4, #3
 800b980:	42a0      	cmp	r0, r4
 800b982:	d0f8      	beq.n	800b976 <sbrk_aligned+0x22>
 800b984:	1a21      	subs	r1, r4, r0
 800b986:	4628      	mov	r0, r5
 800b988:	f001 f8a6 	bl	800cad8 <_sbrk_r>
 800b98c:	3001      	adds	r0, #1
 800b98e:	d1f2      	bne.n	800b976 <sbrk_aligned+0x22>
 800b990:	e7ef      	b.n	800b972 <sbrk_aligned+0x1e>
 800b992:	bf00      	nop
 800b994:	200019cc 	.word	0x200019cc

0800b998 <_malloc_r>:
 800b998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b99c:	1ccd      	adds	r5, r1, #3
 800b99e:	f025 0503 	bic.w	r5, r5, #3
 800b9a2:	3508      	adds	r5, #8
 800b9a4:	2d0c      	cmp	r5, #12
 800b9a6:	bf38      	it	cc
 800b9a8:	250c      	movcc	r5, #12
 800b9aa:	2d00      	cmp	r5, #0
 800b9ac:	4606      	mov	r6, r0
 800b9ae:	db01      	blt.n	800b9b4 <_malloc_r+0x1c>
 800b9b0:	42a9      	cmp	r1, r5
 800b9b2:	d904      	bls.n	800b9be <_malloc_r+0x26>
 800b9b4:	230c      	movs	r3, #12
 800b9b6:	6033      	str	r3, [r6, #0]
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ba94 <_malloc_r+0xfc>
 800b9c2:	f000 f869 	bl	800ba98 <__malloc_lock>
 800b9c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b9ca:	461c      	mov	r4, r3
 800b9cc:	bb44      	cbnz	r4, 800ba20 <_malloc_r+0x88>
 800b9ce:	4629      	mov	r1, r5
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	f7ff ffbf 	bl	800b954 <sbrk_aligned>
 800b9d6:	1c43      	adds	r3, r0, #1
 800b9d8:	4604      	mov	r4, r0
 800b9da:	d158      	bne.n	800ba8e <_malloc_r+0xf6>
 800b9dc:	f8d8 4000 	ldr.w	r4, [r8]
 800b9e0:	4627      	mov	r7, r4
 800b9e2:	2f00      	cmp	r7, #0
 800b9e4:	d143      	bne.n	800ba6e <_malloc_r+0xd6>
 800b9e6:	2c00      	cmp	r4, #0
 800b9e8:	d04b      	beq.n	800ba82 <_malloc_r+0xea>
 800b9ea:	6823      	ldr	r3, [r4, #0]
 800b9ec:	4639      	mov	r1, r7
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	eb04 0903 	add.w	r9, r4, r3
 800b9f4:	f001 f870 	bl	800cad8 <_sbrk_r>
 800b9f8:	4581      	cmp	r9, r0
 800b9fa:	d142      	bne.n	800ba82 <_malloc_r+0xea>
 800b9fc:	6821      	ldr	r1, [r4, #0]
 800b9fe:	1a6d      	subs	r5, r5, r1
 800ba00:	4629      	mov	r1, r5
 800ba02:	4630      	mov	r0, r6
 800ba04:	f7ff ffa6 	bl	800b954 <sbrk_aligned>
 800ba08:	3001      	adds	r0, #1
 800ba0a:	d03a      	beq.n	800ba82 <_malloc_r+0xea>
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	442b      	add	r3, r5
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	f8d8 3000 	ldr.w	r3, [r8]
 800ba16:	685a      	ldr	r2, [r3, #4]
 800ba18:	bb62      	cbnz	r2, 800ba74 <_malloc_r+0xdc>
 800ba1a:	f8c8 7000 	str.w	r7, [r8]
 800ba1e:	e00f      	b.n	800ba40 <_malloc_r+0xa8>
 800ba20:	6822      	ldr	r2, [r4, #0]
 800ba22:	1b52      	subs	r2, r2, r5
 800ba24:	d420      	bmi.n	800ba68 <_malloc_r+0xd0>
 800ba26:	2a0b      	cmp	r2, #11
 800ba28:	d917      	bls.n	800ba5a <_malloc_r+0xc2>
 800ba2a:	1961      	adds	r1, r4, r5
 800ba2c:	42a3      	cmp	r3, r4
 800ba2e:	6025      	str	r5, [r4, #0]
 800ba30:	bf18      	it	ne
 800ba32:	6059      	strne	r1, [r3, #4]
 800ba34:	6863      	ldr	r3, [r4, #4]
 800ba36:	bf08      	it	eq
 800ba38:	f8c8 1000 	streq.w	r1, [r8]
 800ba3c:	5162      	str	r2, [r4, r5]
 800ba3e:	604b      	str	r3, [r1, #4]
 800ba40:	4630      	mov	r0, r6
 800ba42:	f000 f82f 	bl	800baa4 <__malloc_unlock>
 800ba46:	f104 000b 	add.w	r0, r4, #11
 800ba4a:	1d23      	adds	r3, r4, #4
 800ba4c:	f020 0007 	bic.w	r0, r0, #7
 800ba50:	1ac2      	subs	r2, r0, r3
 800ba52:	bf1c      	itt	ne
 800ba54:	1a1b      	subne	r3, r3, r0
 800ba56:	50a3      	strne	r3, [r4, r2]
 800ba58:	e7af      	b.n	800b9ba <_malloc_r+0x22>
 800ba5a:	6862      	ldr	r2, [r4, #4]
 800ba5c:	42a3      	cmp	r3, r4
 800ba5e:	bf0c      	ite	eq
 800ba60:	f8c8 2000 	streq.w	r2, [r8]
 800ba64:	605a      	strne	r2, [r3, #4]
 800ba66:	e7eb      	b.n	800ba40 <_malloc_r+0xa8>
 800ba68:	4623      	mov	r3, r4
 800ba6a:	6864      	ldr	r4, [r4, #4]
 800ba6c:	e7ae      	b.n	800b9cc <_malloc_r+0x34>
 800ba6e:	463c      	mov	r4, r7
 800ba70:	687f      	ldr	r7, [r7, #4]
 800ba72:	e7b6      	b.n	800b9e2 <_malloc_r+0x4a>
 800ba74:	461a      	mov	r2, r3
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	42a3      	cmp	r3, r4
 800ba7a:	d1fb      	bne.n	800ba74 <_malloc_r+0xdc>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	6053      	str	r3, [r2, #4]
 800ba80:	e7de      	b.n	800ba40 <_malloc_r+0xa8>
 800ba82:	230c      	movs	r3, #12
 800ba84:	6033      	str	r3, [r6, #0]
 800ba86:	4630      	mov	r0, r6
 800ba88:	f000 f80c 	bl	800baa4 <__malloc_unlock>
 800ba8c:	e794      	b.n	800b9b8 <_malloc_r+0x20>
 800ba8e:	6005      	str	r5, [r0, #0]
 800ba90:	e7d6      	b.n	800ba40 <_malloc_r+0xa8>
 800ba92:	bf00      	nop
 800ba94:	200019d0 	.word	0x200019d0

0800ba98 <__malloc_lock>:
 800ba98:	4801      	ldr	r0, [pc, #4]	@ (800baa0 <__malloc_lock+0x8>)
 800ba9a:	f001 b86a 	b.w	800cb72 <__retarget_lock_acquire_recursive>
 800ba9e:	bf00      	nop
 800baa0:	20001b14 	.word	0x20001b14

0800baa4 <__malloc_unlock>:
 800baa4:	4801      	ldr	r0, [pc, #4]	@ (800baac <__malloc_unlock+0x8>)
 800baa6:	f001 b865 	b.w	800cb74 <__retarget_lock_release_recursive>
 800baaa:	bf00      	nop
 800baac:	20001b14 	.word	0x20001b14

0800bab0 <__cvt>:
 800bab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bab4:	ec57 6b10 	vmov	r6, r7, d0
 800bab8:	2f00      	cmp	r7, #0
 800baba:	460c      	mov	r4, r1
 800babc:	4619      	mov	r1, r3
 800babe:	463b      	mov	r3, r7
 800bac0:	bfbb      	ittet	lt
 800bac2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bac6:	461f      	movlt	r7, r3
 800bac8:	2300      	movge	r3, #0
 800baca:	232d      	movlt	r3, #45	@ 0x2d
 800bacc:	700b      	strb	r3, [r1, #0]
 800bace:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bad0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bad4:	4691      	mov	r9, r2
 800bad6:	f023 0820 	bic.w	r8, r3, #32
 800bada:	bfbc      	itt	lt
 800badc:	4632      	movlt	r2, r6
 800bade:	4616      	movlt	r6, r2
 800bae0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bae4:	d005      	beq.n	800baf2 <__cvt+0x42>
 800bae6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800baea:	d100      	bne.n	800baee <__cvt+0x3e>
 800baec:	3401      	adds	r4, #1
 800baee:	2102      	movs	r1, #2
 800baf0:	e000      	b.n	800baf4 <__cvt+0x44>
 800baf2:	2103      	movs	r1, #3
 800baf4:	ab03      	add	r3, sp, #12
 800baf6:	9301      	str	r3, [sp, #4]
 800baf8:	ab02      	add	r3, sp, #8
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	ec47 6b10 	vmov	d0, r6, r7
 800bb00:	4653      	mov	r3, sl
 800bb02:	4622      	mov	r2, r4
 800bb04:	f001 f8d4 	bl	800ccb0 <_dtoa_r>
 800bb08:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bb0c:	4605      	mov	r5, r0
 800bb0e:	d119      	bne.n	800bb44 <__cvt+0x94>
 800bb10:	f019 0f01 	tst.w	r9, #1
 800bb14:	d00e      	beq.n	800bb34 <__cvt+0x84>
 800bb16:	eb00 0904 	add.w	r9, r0, r4
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	4630      	mov	r0, r6
 800bb20:	4639      	mov	r1, r7
 800bb22:	f7f4 ffd1 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb26:	b108      	cbz	r0, 800bb2c <__cvt+0x7c>
 800bb28:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb2c:	2230      	movs	r2, #48	@ 0x30
 800bb2e:	9b03      	ldr	r3, [sp, #12]
 800bb30:	454b      	cmp	r3, r9
 800bb32:	d31e      	bcc.n	800bb72 <__cvt+0xc2>
 800bb34:	9b03      	ldr	r3, [sp, #12]
 800bb36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb38:	1b5b      	subs	r3, r3, r5
 800bb3a:	4628      	mov	r0, r5
 800bb3c:	6013      	str	r3, [r2, #0]
 800bb3e:	b004      	add	sp, #16
 800bb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bb48:	eb00 0904 	add.w	r9, r0, r4
 800bb4c:	d1e5      	bne.n	800bb1a <__cvt+0x6a>
 800bb4e:	7803      	ldrb	r3, [r0, #0]
 800bb50:	2b30      	cmp	r3, #48	@ 0x30
 800bb52:	d10a      	bne.n	800bb6a <__cvt+0xba>
 800bb54:	2200      	movs	r2, #0
 800bb56:	2300      	movs	r3, #0
 800bb58:	4630      	mov	r0, r6
 800bb5a:	4639      	mov	r1, r7
 800bb5c:	f7f4 ffb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb60:	b918      	cbnz	r0, 800bb6a <__cvt+0xba>
 800bb62:	f1c4 0401 	rsb	r4, r4, #1
 800bb66:	f8ca 4000 	str.w	r4, [sl]
 800bb6a:	f8da 3000 	ldr.w	r3, [sl]
 800bb6e:	4499      	add	r9, r3
 800bb70:	e7d3      	b.n	800bb1a <__cvt+0x6a>
 800bb72:	1c59      	adds	r1, r3, #1
 800bb74:	9103      	str	r1, [sp, #12]
 800bb76:	701a      	strb	r2, [r3, #0]
 800bb78:	e7d9      	b.n	800bb2e <__cvt+0x7e>

0800bb7a <__exponent>:
 800bb7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb7c:	2900      	cmp	r1, #0
 800bb7e:	bfba      	itte	lt
 800bb80:	4249      	neglt	r1, r1
 800bb82:	232d      	movlt	r3, #45	@ 0x2d
 800bb84:	232b      	movge	r3, #43	@ 0x2b
 800bb86:	2909      	cmp	r1, #9
 800bb88:	7002      	strb	r2, [r0, #0]
 800bb8a:	7043      	strb	r3, [r0, #1]
 800bb8c:	dd29      	ble.n	800bbe2 <__exponent+0x68>
 800bb8e:	f10d 0307 	add.w	r3, sp, #7
 800bb92:	461d      	mov	r5, r3
 800bb94:	270a      	movs	r7, #10
 800bb96:	461a      	mov	r2, r3
 800bb98:	fbb1 f6f7 	udiv	r6, r1, r7
 800bb9c:	fb07 1416 	mls	r4, r7, r6, r1
 800bba0:	3430      	adds	r4, #48	@ 0x30
 800bba2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bba6:	460c      	mov	r4, r1
 800bba8:	2c63      	cmp	r4, #99	@ 0x63
 800bbaa:	f103 33ff 	add.w	r3, r3, #4294967295
 800bbae:	4631      	mov	r1, r6
 800bbb0:	dcf1      	bgt.n	800bb96 <__exponent+0x1c>
 800bbb2:	3130      	adds	r1, #48	@ 0x30
 800bbb4:	1e94      	subs	r4, r2, #2
 800bbb6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bbba:	1c41      	adds	r1, r0, #1
 800bbbc:	4623      	mov	r3, r4
 800bbbe:	42ab      	cmp	r3, r5
 800bbc0:	d30a      	bcc.n	800bbd8 <__exponent+0x5e>
 800bbc2:	f10d 0309 	add.w	r3, sp, #9
 800bbc6:	1a9b      	subs	r3, r3, r2
 800bbc8:	42ac      	cmp	r4, r5
 800bbca:	bf88      	it	hi
 800bbcc:	2300      	movhi	r3, #0
 800bbce:	3302      	adds	r3, #2
 800bbd0:	4403      	add	r3, r0
 800bbd2:	1a18      	subs	r0, r3, r0
 800bbd4:	b003      	add	sp, #12
 800bbd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbd8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bbdc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bbe0:	e7ed      	b.n	800bbbe <__exponent+0x44>
 800bbe2:	2330      	movs	r3, #48	@ 0x30
 800bbe4:	3130      	adds	r1, #48	@ 0x30
 800bbe6:	7083      	strb	r3, [r0, #2]
 800bbe8:	70c1      	strb	r1, [r0, #3]
 800bbea:	1d03      	adds	r3, r0, #4
 800bbec:	e7f1      	b.n	800bbd2 <__exponent+0x58>
	...

0800bbf0 <_printf_float>:
 800bbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	b08d      	sub	sp, #52	@ 0x34
 800bbf6:	460c      	mov	r4, r1
 800bbf8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bbfc:	4616      	mov	r6, r2
 800bbfe:	461f      	mov	r7, r3
 800bc00:	4605      	mov	r5, r0
 800bc02:	f000 ff31 	bl	800ca68 <_localeconv_r>
 800bc06:	6803      	ldr	r3, [r0, #0]
 800bc08:	9304      	str	r3, [sp, #16]
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7f4 fb30 	bl	8000270 <strlen>
 800bc10:	2300      	movs	r3, #0
 800bc12:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc14:	f8d8 3000 	ldr.w	r3, [r8]
 800bc18:	9005      	str	r0, [sp, #20]
 800bc1a:	3307      	adds	r3, #7
 800bc1c:	f023 0307 	bic.w	r3, r3, #7
 800bc20:	f103 0208 	add.w	r2, r3, #8
 800bc24:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bc28:	f8d4 b000 	ldr.w	fp, [r4]
 800bc2c:	f8c8 2000 	str.w	r2, [r8]
 800bc30:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc34:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bc38:	9307      	str	r3, [sp, #28]
 800bc3a:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc3e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bc42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc46:	4b9c      	ldr	r3, [pc, #624]	@ (800beb8 <_printf_float+0x2c8>)
 800bc48:	f04f 32ff 	mov.w	r2, #4294967295
 800bc4c:	f7f4 ff6e 	bl	8000b2c <__aeabi_dcmpun>
 800bc50:	bb70      	cbnz	r0, 800bcb0 <_printf_float+0xc0>
 800bc52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc56:	4b98      	ldr	r3, [pc, #608]	@ (800beb8 <_printf_float+0x2c8>)
 800bc58:	f04f 32ff 	mov.w	r2, #4294967295
 800bc5c:	f7f4 ff48 	bl	8000af0 <__aeabi_dcmple>
 800bc60:	bb30      	cbnz	r0, 800bcb0 <_printf_float+0xc0>
 800bc62:	2200      	movs	r2, #0
 800bc64:	2300      	movs	r3, #0
 800bc66:	4640      	mov	r0, r8
 800bc68:	4649      	mov	r1, r9
 800bc6a:	f7f4 ff37 	bl	8000adc <__aeabi_dcmplt>
 800bc6e:	b110      	cbz	r0, 800bc76 <_printf_float+0x86>
 800bc70:	232d      	movs	r3, #45	@ 0x2d
 800bc72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc76:	4a91      	ldr	r2, [pc, #580]	@ (800bebc <_printf_float+0x2cc>)
 800bc78:	4b91      	ldr	r3, [pc, #580]	@ (800bec0 <_printf_float+0x2d0>)
 800bc7a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bc7e:	bf8c      	ite	hi
 800bc80:	4690      	movhi	r8, r2
 800bc82:	4698      	movls	r8, r3
 800bc84:	2303      	movs	r3, #3
 800bc86:	6123      	str	r3, [r4, #16]
 800bc88:	f02b 0304 	bic.w	r3, fp, #4
 800bc8c:	6023      	str	r3, [r4, #0]
 800bc8e:	f04f 0900 	mov.w	r9, #0
 800bc92:	9700      	str	r7, [sp, #0]
 800bc94:	4633      	mov	r3, r6
 800bc96:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bc98:	4621      	mov	r1, r4
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	f000 f9d2 	bl	800c044 <_printf_common>
 800bca0:	3001      	adds	r0, #1
 800bca2:	f040 808d 	bne.w	800bdc0 <_printf_float+0x1d0>
 800bca6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcaa:	b00d      	add	sp, #52	@ 0x34
 800bcac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb0:	4642      	mov	r2, r8
 800bcb2:	464b      	mov	r3, r9
 800bcb4:	4640      	mov	r0, r8
 800bcb6:	4649      	mov	r1, r9
 800bcb8:	f7f4 ff38 	bl	8000b2c <__aeabi_dcmpun>
 800bcbc:	b140      	cbz	r0, 800bcd0 <_printf_float+0xe0>
 800bcbe:	464b      	mov	r3, r9
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	bfbc      	itt	lt
 800bcc4:	232d      	movlt	r3, #45	@ 0x2d
 800bcc6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bcca:	4a7e      	ldr	r2, [pc, #504]	@ (800bec4 <_printf_float+0x2d4>)
 800bccc:	4b7e      	ldr	r3, [pc, #504]	@ (800bec8 <_printf_float+0x2d8>)
 800bcce:	e7d4      	b.n	800bc7a <_printf_float+0x8a>
 800bcd0:	6863      	ldr	r3, [r4, #4]
 800bcd2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bcd6:	9206      	str	r2, [sp, #24]
 800bcd8:	1c5a      	adds	r2, r3, #1
 800bcda:	d13b      	bne.n	800bd54 <_printf_float+0x164>
 800bcdc:	2306      	movs	r3, #6
 800bcde:	6063      	str	r3, [r4, #4]
 800bce0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bce4:	2300      	movs	r3, #0
 800bce6:	6022      	str	r2, [r4, #0]
 800bce8:	9303      	str	r3, [sp, #12]
 800bcea:	ab0a      	add	r3, sp, #40	@ 0x28
 800bcec:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bcf0:	ab09      	add	r3, sp, #36	@ 0x24
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	6861      	ldr	r1, [r4, #4]
 800bcf6:	ec49 8b10 	vmov	d0, r8, r9
 800bcfa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bcfe:	4628      	mov	r0, r5
 800bd00:	f7ff fed6 	bl	800bab0 <__cvt>
 800bd04:	9b06      	ldr	r3, [sp, #24]
 800bd06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bd08:	2b47      	cmp	r3, #71	@ 0x47
 800bd0a:	4680      	mov	r8, r0
 800bd0c:	d129      	bne.n	800bd62 <_printf_float+0x172>
 800bd0e:	1cc8      	adds	r0, r1, #3
 800bd10:	db02      	blt.n	800bd18 <_printf_float+0x128>
 800bd12:	6863      	ldr	r3, [r4, #4]
 800bd14:	4299      	cmp	r1, r3
 800bd16:	dd41      	ble.n	800bd9c <_printf_float+0x1ac>
 800bd18:	f1aa 0a02 	sub.w	sl, sl, #2
 800bd1c:	fa5f fa8a 	uxtb.w	sl, sl
 800bd20:	3901      	subs	r1, #1
 800bd22:	4652      	mov	r2, sl
 800bd24:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bd28:	9109      	str	r1, [sp, #36]	@ 0x24
 800bd2a:	f7ff ff26 	bl	800bb7a <__exponent>
 800bd2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd30:	1813      	adds	r3, r2, r0
 800bd32:	2a01      	cmp	r2, #1
 800bd34:	4681      	mov	r9, r0
 800bd36:	6123      	str	r3, [r4, #16]
 800bd38:	dc02      	bgt.n	800bd40 <_printf_float+0x150>
 800bd3a:	6822      	ldr	r2, [r4, #0]
 800bd3c:	07d2      	lsls	r2, r2, #31
 800bd3e:	d501      	bpl.n	800bd44 <_printf_float+0x154>
 800bd40:	3301      	adds	r3, #1
 800bd42:	6123      	str	r3, [r4, #16]
 800bd44:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d0a2      	beq.n	800bc92 <_printf_float+0xa2>
 800bd4c:	232d      	movs	r3, #45	@ 0x2d
 800bd4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd52:	e79e      	b.n	800bc92 <_printf_float+0xa2>
 800bd54:	9a06      	ldr	r2, [sp, #24]
 800bd56:	2a47      	cmp	r2, #71	@ 0x47
 800bd58:	d1c2      	bne.n	800bce0 <_printf_float+0xf0>
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d1c0      	bne.n	800bce0 <_printf_float+0xf0>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e7bd      	b.n	800bcde <_printf_float+0xee>
 800bd62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bd66:	d9db      	bls.n	800bd20 <_printf_float+0x130>
 800bd68:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bd6c:	d118      	bne.n	800bda0 <_printf_float+0x1b0>
 800bd6e:	2900      	cmp	r1, #0
 800bd70:	6863      	ldr	r3, [r4, #4]
 800bd72:	dd0b      	ble.n	800bd8c <_printf_float+0x19c>
 800bd74:	6121      	str	r1, [r4, #16]
 800bd76:	b913      	cbnz	r3, 800bd7e <_printf_float+0x18e>
 800bd78:	6822      	ldr	r2, [r4, #0]
 800bd7a:	07d0      	lsls	r0, r2, #31
 800bd7c:	d502      	bpl.n	800bd84 <_printf_float+0x194>
 800bd7e:	3301      	adds	r3, #1
 800bd80:	440b      	add	r3, r1
 800bd82:	6123      	str	r3, [r4, #16]
 800bd84:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bd86:	f04f 0900 	mov.w	r9, #0
 800bd8a:	e7db      	b.n	800bd44 <_printf_float+0x154>
 800bd8c:	b913      	cbnz	r3, 800bd94 <_printf_float+0x1a4>
 800bd8e:	6822      	ldr	r2, [r4, #0]
 800bd90:	07d2      	lsls	r2, r2, #31
 800bd92:	d501      	bpl.n	800bd98 <_printf_float+0x1a8>
 800bd94:	3302      	adds	r3, #2
 800bd96:	e7f4      	b.n	800bd82 <_printf_float+0x192>
 800bd98:	2301      	movs	r3, #1
 800bd9a:	e7f2      	b.n	800bd82 <_printf_float+0x192>
 800bd9c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bda0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bda2:	4299      	cmp	r1, r3
 800bda4:	db05      	blt.n	800bdb2 <_printf_float+0x1c2>
 800bda6:	6823      	ldr	r3, [r4, #0]
 800bda8:	6121      	str	r1, [r4, #16]
 800bdaa:	07d8      	lsls	r0, r3, #31
 800bdac:	d5ea      	bpl.n	800bd84 <_printf_float+0x194>
 800bdae:	1c4b      	adds	r3, r1, #1
 800bdb0:	e7e7      	b.n	800bd82 <_printf_float+0x192>
 800bdb2:	2900      	cmp	r1, #0
 800bdb4:	bfd4      	ite	le
 800bdb6:	f1c1 0202 	rsble	r2, r1, #2
 800bdba:	2201      	movgt	r2, #1
 800bdbc:	4413      	add	r3, r2
 800bdbe:	e7e0      	b.n	800bd82 <_printf_float+0x192>
 800bdc0:	6823      	ldr	r3, [r4, #0]
 800bdc2:	055a      	lsls	r2, r3, #21
 800bdc4:	d407      	bmi.n	800bdd6 <_printf_float+0x1e6>
 800bdc6:	6923      	ldr	r3, [r4, #16]
 800bdc8:	4642      	mov	r2, r8
 800bdca:	4631      	mov	r1, r6
 800bdcc:	4628      	mov	r0, r5
 800bdce:	47b8      	blx	r7
 800bdd0:	3001      	adds	r0, #1
 800bdd2:	d12b      	bne.n	800be2c <_printf_float+0x23c>
 800bdd4:	e767      	b.n	800bca6 <_printf_float+0xb6>
 800bdd6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bdda:	f240 80dd 	bls.w	800bf98 <_printf_float+0x3a8>
 800bdde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bde2:	2200      	movs	r2, #0
 800bde4:	2300      	movs	r3, #0
 800bde6:	f7f4 fe6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdea:	2800      	cmp	r0, #0
 800bdec:	d033      	beq.n	800be56 <_printf_float+0x266>
 800bdee:	4a37      	ldr	r2, [pc, #220]	@ (800becc <_printf_float+0x2dc>)
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	4631      	mov	r1, r6
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	47b8      	blx	r7
 800bdf8:	3001      	adds	r0, #1
 800bdfa:	f43f af54 	beq.w	800bca6 <_printf_float+0xb6>
 800bdfe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800be02:	4543      	cmp	r3, r8
 800be04:	db02      	blt.n	800be0c <_printf_float+0x21c>
 800be06:	6823      	ldr	r3, [r4, #0]
 800be08:	07d8      	lsls	r0, r3, #31
 800be0a:	d50f      	bpl.n	800be2c <_printf_float+0x23c>
 800be0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be10:	4631      	mov	r1, r6
 800be12:	4628      	mov	r0, r5
 800be14:	47b8      	blx	r7
 800be16:	3001      	adds	r0, #1
 800be18:	f43f af45 	beq.w	800bca6 <_printf_float+0xb6>
 800be1c:	f04f 0900 	mov.w	r9, #0
 800be20:	f108 38ff 	add.w	r8, r8, #4294967295
 800be24:	f104 0a1a 	add.w	sl, r4, #26
 800be28:	45c8      	cmp	r8, r9
 800be2a:	dc09      	bgt.n	800be40 <_printf_float+0x250>
 800be2c:	6823      	ldr	r3, [r4, #0]
 800be2e:	079b      	lsls	r3, r3, #30
 800be30:	f100 8103 	bmi.w	800c03a <_printf_float+0x44a>
 800be34:	68e0      	ldr	r0, [r4, #12]
 800be36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be38:	4298      	cmp	r0, r3
 800be3a:	bfb8      	it	lt
 800be3c:	4618      	movlt	r0, r3
 800be3e:	e734      	b.n	800bcaa <_printf_float+0xba>
 800be40:	2301      	movs	r3, #1
 800be42:	4652      	mov	r2, sl
 800be44:	4631      	mov	r1, r6
 800be46:	4628      	mov	r0, r5
 800be48:	47b8      	blx	r7
 800be4a:	3001      	adds	r0, #1
 800be4c:	f43f af2b 	beq.w	800bca6 <_printf_float+0xb6>
 800be50:	f109 0901 	add.w	r9, r9, #1
 800be54:	e7e8      	b.n	800be28 <_printf_float+0x238>
 800be56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be58:	2b00      	cmp	r3, #0
 800be5a:	dc39      	bgt.n	800bed0 <_printf_float+0x2e0>
 800be5c:	4a1b      	ldr	r2, [pc, #108]	@ (800becc <_printf_float+0x2dc>)
 800be5e:	2301      	movs	r3, #1
 800be60:	4631      	mov	r1, r6
 800be62:	4628      	mov	r0, r5
 800be64:	47b8      	blx	r7
 800be66:	3001      	adds	r0, #1
 800be68:	f43f af1d 	beq.w	800bca6 <_printf_float+0xb6>
 800be6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800be70:	ea59 0303 	orrs.w	r3, r9, r3
 800be74:	d102      	bne.n	800be7c <_printf_float+0x28c>
 800be76:	6823      	ldr	r3, [r4, #0]
 800be78:	07d9      	lsls	r1, r3, #31
 800be7a:	d5d7      	bpl.n	800be2c <_printf_float+0x23c>
 800be7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be80:	4631      	mov	r1, r6
 800be82:	4628      	mov	r0, r5
 800be84:	47b8      	blx	r7
 800be86:	3001      	adds	r0, #1
 800be88:	f43f af0d 	beq.w	800bca6 <_printf_float+0xb6>
 800be8c:	f04f 0a00 	mov.w	sl, #0
 800be90:	f104 0b1a 	add.w	fp, r4, #26
 800be94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be96:	425b      	negs	r3, r3
 800be98:	4553      	cmp	r3, sl
 800be9a:	dc01      	bgt.n	800bea0 <_printf_float+0x2b0>
 800be9c:	464b      	mov	r3, r9
 800be9e:	e793      	b.n	800bdc8 <_printf_float+0x1d8>
 800bea0:	2301      	movs	r3, #1
 800bea2:	465a      	mov	r2, fp
 800bea4:	4631      	mov	r1, r6
 800bea6:	4628      	mov	r0, r5
 800bea8:	47b8      	blx	r7
 800beaa:	3001      	adds	r0, #1
 800beac:	f43f aefb 	beq.w	800bca6 <_printf_float+0xb6>
 800beb0:	f10a 0a01 	add.w	sl, sl, #1
 800beb4:	e7ee      	b.n	800be94 <_printf_float+0x2a4>
 800beb6:	bf00      	nop
 800beb8:	7fefffff 	.word	0x7fefffff
 800bebc:	0801048c 	.word	0x0801048c
 800bec0:	08010488 	.word	0x08010488
 800bec4:	08010494 	.word	0x08010494
 800bec8:	08010490 	.word	0x08010490
 800becc:	08010498 	.word	0x08010498
 800bed0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bed2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bed6:	4553      	cmp	r3, sl
 800bed8:	bfa8      	it	ge
 800beda:	4653      	movge	r3, sl
 800bedc:	2b00      	cmp	r3, #0
 800bede:	4699      	mov	r9, r3
 800bee0:	dc36      	bgt.n	800bf50 <_printf_float+0x360>
 800bee2:	f04f 0b00 	mov.w	fp, #0
 800bee6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800beea:	f104 021a 	add.w	r2, r4, #26
 800beee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bef0:	9306      	str	r3, [sp, #24]
 800bef2:	eba3 0309 	sub.w	r3, r3, r9
 800bef6:	455b      	cmp	r3, fp
 800bef8:	dc31      	bgt.n	800bf5e <_printf_float+0x36e>
 800befa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800befc:	459a      	cmp	sl, r3
 800befe:	dc3a      	bgt.n	800bf76 <_printf_float+0x386>
 800bf00:	6823      	ldr	r3, [r4, #0]
 800bf02:	07da      	lsls	r2, r3, #31
 800bf04:	d437      	bmi.n	800bf76 <_printf_float+0x386>
 800bf06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf08:	ebaa 0903 	sub.w	r9, sl, r3
 800bf0c:	9b06      	ldr	r3, [sp, #24]
 800bf0e:	ebaa 0303 	sub.w	r3, sl, r3
 800bf12:	4599      	cmp	r9, r3
 800bf14:	bfa8      	it	ge
 800bf16:	4699      	movge	r9, r3
 800bf18:	f1b9 0f00 	cmp.w	r9, #0
 800bf1c:	dc33      	bgt.n	800bf86 <_printf_float+0x396>
 800bf1e:	f04f 0800 	mov.w	r8, #0
 800bf22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf26:	f104 0b1a 	add.w	fp, r4, #26
 800bf2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf2c:	ebaa 0303 	sub.w	r3, sl, r3
 800bf30:	eba3 0309 	sub.w	r3, r3, r9
 800bf34:	4543      	cmp	r3, r8
 800bf36:	f77f af79 	ble.w	800be2c <_printf_float+0x23c>
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	465a      	mov	r2, fp
 800bf3e:	4631      	mov	r1, r6
 800bf40:	4628      	mov	r0, r5
 800bf42:	47b8      	blx	r7
 800bf44:	3001      	adds	r0, #1
 800bf46:	f43f aeae 	beq.w	800bca6 <_printf_float+0xb6>
 800bf4a:	f108 0801 	add.w	r8, r8, #1
 800bf4e:	e7ec      	b.n	800bf2a <_printf_float+0x33a>
 800bf50:	4642      	mov	r2, r8
 800bf52:	4631      	mov	r1, r6
 800bf54:	4628      	mov	r0, r5
 800bf56:	47b8      	blx	r7
 800bf58:	3001      	adds	r0, #1
 800bf5a:	d1c2      	bne.n	800bee2 <_printf_float+0x2f2>
 800bf5c:	e6a3      	b.n	800bca6 <_printf_float+0xb6>
 800bf5e:	2301      	movs	r3, #1
 800bf60:	4631      	mov	r1, r6
 800bf62:	4628      	mov	r0, r5
 800bf64:	9206      	str	r2, [sp, #24]
 800bf66:	47b8      	blx	r7
 800bf68:	3001      	adds	r0, #1
 800bf6a:	f43f ae9c 	beq.w	800bca6 <_printf_float+0xb6>
 800bf6e:	9a06      	ldr	r2, [sp, #24]
 800bf70:	f10b 0b01 	add.w	fp, fp, #1
 800bf74:	e7bb      	b.n	800beee <_printf_float+0x2fe>
 800bf76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf7a:	4631      	mov	r1, r6
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	47b8      	blx	r7
 800bf80:	3001      	adds	r0, #1
 800bf82:	d1c0      	bne.n	800bf06 <_printf_float+0x316>
 800bf84:	e68f      	b.n	800bca6 <_printf_float+0xb6>
 800bf86:	9a06      	ldr	r2, [sp, #24]
 800bf88:	464b      	mov	r3, r9
 800bf8a:	4442      	add	r2, r8
 800bf8c:	4631      	mov	r1, r6
 800bf8e:	4628      	mov	r0, r5
 800bf90:	47b8      	blx	r7
 800bf92:	3001      	adds	r0, #1
 800bf94:	d1c3      	bne.n	800bf1e <_printf_float+0x32e>
 800bf96:	e686      	b.n	800bca6 <_printf_float+0xb6>
 800bf98:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bf9c:	f1ba 0f01 	cmp.w	sl, #1
 800bfa0:	dc01      	bgt.n	800bfa6 <_printf_float+0x3b6>
 800bfa2:	07db      	lsls	r3, r3, #31
 800bfa4:	d536      	bpl.n	800c014 <_printf_float+0x424>
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	4642      	mov	r2, r8
 800bfaa:	4631      	mov	r1, r6
 800bfac:	4628      	mov	r0, r5
 800bfae:	47b8      	blx	r7
 800bfb0:	3001      	adds	r0, #1
 800bfb2:	f43f ae78 	beq.w	800bca6 <_printf_float+0xb6>
 800bfb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfba:	4631      	mov	r1, r6
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	47b8      	blx	r7
 800bfc0:	3001      	adds	r0, #1
 800bfc2:	f43f ae70 	beq.w	800bca6 <_printf_float+0xb6>
 800bfc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bfca:	2200      	movs	r2, #0
 800bfcc:	2300      	movs	r3, #0
 800bfce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bfd2:	f7f4 fd79 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfd6:	b9c0      	cbnz	r0, 800c00a <_printf_float+0x41a>
 800bfd8:	4653      	mov	r3, sl
 800bfda:	f108 0201 	add.w	r2, r8, #1
 800bfde:	4631      	mov	r1, r6
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	47b8      	blx	r7
 800bfe4:	3001      	adds	r0, #1
 800bfe6:	d10c      	bne.n	800c002 <_printf_float+0x412>
 800bfe8:	e65d      	b.n	800bca6 <_printf_float+0xb6>
 800bfea:	2301      	movs	r3, #1
 800bfec:	465a      	mov	r2, fp
 800bfee:	4631      	mov	r1, r6
 800bff0:	4628      	mov	r0, r5
 800bff2:	47b8      	blx	r7
 800bff4:	3001      	adds	r0, #1
 800bff6:	f43f ae56 	beq.w	800bca6 <_printf_float+0xb6>
 800bffa:	f108 0801 	add.w	r8, r8, #1
 800bffe:	45d0      	cmp	r8, sl
 800c000:	dbf3      	blt.n	800bfea <_printf_float+0x3fa>
 800c002:	464b      	mov	r3, r9
 800c004:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c008:	e6df      	b.n	800bdca <_printf_float+0x1da>
 800c00a:	f04f 0800 	mov.w	r8, #0
 800c00e:	f104 0b1a 	add.w	fp, r4, #26
 800c012:	e7f4      	b.n	800bffe <_printf_float+0x40e>
 800c014:	2301      	movs	r3, #1
 800c016:	4642      	mov	r2, r8
 800c018:	e7e1      	b.n	800bfde <_printf_float+0x3ee>
 800c01a:	2301      	movs	r3, #1
 800c01c:	464a      	mov	r2, r9
 800c01e:	4631      	mov	r1, r6
 800c020:	4628      	mov	r0, r5
 800c022:	47b8      	blx	r7
 800c024:	3001      	adds	r0, #1
 800c026:	f43f ae3e 	beq.w	800bca6 <_printf_float+0xb6>
 800c02a:	f108 0801 	add.w	r8, r8, #1
 800c02e:	68e3      	ldr	r3, [r4, #12]
 800c030:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c032:	1a5b      	subs	r3, r3, r1
 800c034:	4543      	cmp	r3, r8
 800c036:	dcf0      	bgt.n	800c01a <_printf_float+0x42a>
 800c038:	e6fc      	b.n	800be34 <_printf_float+0x244>
 800c03a:	f04f 0800 	mov.w	r8, #0
 800c03e:	f104 0919 	add.w	r9, r4, #25
 800c042:	e7f4      	b.n	800c02e <_printf_float+0x43e>

0800c044 <_printf_common>:
 800c044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c048:	4616      	mov	r6, r2
 800c04a:	4698      	mov	r8, r3
 800c04c:	688a      	ldr	r2, [r1, #8]
 800c04e:	690b      	ldr	r3, [r1, #16]
 800c050:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c054:	4293      	cmp	r3, r2
 800c056:	bfb8      	it	lt
 800c058:	4613      	movlt	r3, r2
 800c05a:	6033      	str	r3, [r6, #0]
 800c05c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c060:	4607      	mov	r7, r0
 800c062:	460c      	mov	r4, r1
 800c064:	b10a      	cbz	r2, 800c06a <_printf_common+0x26>
 800c066:	3301      	adds	r3, #1
 800c068:	6033      	str	r3, [r6, #0]
 800c06a:	6823      	ldr	r3, [r4, #0]
 800c06c:	0699      	lsls	r1, r3, #26
 800c06e:	bf42      	ittt	mi
 800c070:	6833      	ldrmi	r3, [r6, #0]
 800c072:	3302      	addmi	r3, #2
 800c074:	6033      	strmi	r3, [r6, #0]
 800c076:	6825      	ldr	r5, [r4, #0]
 800c078:	f015 0506 	ands.w	r5, r5, #6
 800c07c:	d106      	bne.n	800c08c <_printf_common+0x48>
 800c07e:	f104 0a19 	add.w	sl, r4, #25
 800c082:	68e3      	ldr	r3, [r4, #12]
 800c084:	6832      	ldr	r2, [r6, #0]
 800c086:	1a9b      	subs	r3, r3, r2
 800c088:	42ab      	cmp	r3, r5
 800c08a:	dc26      	bgt.n	800c0da <_printf_common+0x96>
 800c08c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c090:	6822      	ldr	r2, [r4, #0]
 800c092:	3b00      	subs	r3, #0
 800c094:	bf18      	it	ne
 800c096:	2301      	movne	r3, #1
 800c098:	0692      	lsls	r2, r2, #26
 800c09a:	d42b      	bmi.n	800c0f4 <_printf_common+0xb0>
 800c09c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c0a0:	4641      	mov	r1, r8
 800c0a2:	4638      	mov	r0, r7
 800c0a4:	47c8      	blx	r9
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	d01e      	beq.n	800c0e8 <_printf_common+0xa4>
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	6922      	ldr	r2, [r4, #16]
 800c0ae:	f003 0306 	and.w	r3, r3, #6
 800c0b2:	2b04      	cmp	r3, #4
 800c0b4:	bf02      	ittt	eq
 800c0b6:	68e5      	ldreq	r5, [r4, #12]
 800c0b8:	6833      	ldreq	r3, [r6, #0]
 800c0ba:	1aed      	subeq	r5, r5, r3
 800c0bc:	68a3      	ldr	r3, [r4, #8]
 800c0be:	bf0c      	ite	eq
 800c0c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0c4:	2500      	movne	r5, #0
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	bfc4      	itt	gt
 800c0ca:	1a9b      	subgt	r3, r3, r2
 800c0cc:	18ed      	addgt	r5, r5, r3
 800c0ce:	2600      	movs	r6, #0
 800c0d0:	341a      	adds	r4, #26
 800c0d2:	42b5      	cmp	r5, r6
 800c0d4:	d11a      	bne.n	800c10c <_printf_common+0xc8>
 800c0d6:	2000      	movs	r0, #0
 800c0d8:	e008      	b.n	800c0ec <_printf_common+0xa8>
 800c0da:	2301      	movs	r3, #1
 800c0dc:	4652      	mov	r2, sl
 800c0de:	4641      	mov	r1, r8
 800c0e0:	4638      	mov	r0, r7
 800c0e2:	47c8      	blx	r9
 800c0e4:	3001      	adds	r0, #1
 800c0e6:	d103      	bne.n	800c0f0 <_printf_common+0xac>
 800c0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0f0:	3501      	adds	r5, #1
 800c0f2:	e7c6      	b.n	800c082 <_printf_common+0x3e>
 800c0f4:	18e1      	adds	r1, r4, r3
 800c0f6:	1c5a      	adds	r2, r3, #1
 800c0f8:	2030      	movs	r0, #48	@ 0x30
 800c0fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c0fe:	4422      	add	r2, r4
 800c100:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c104:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c108:	3302      	adds	r3, #2
 800c10a:	e7c7      	b.n	800c09c <_printf_common+0x58>
 800c10c:	2301      	movs	r3, #1
 800c10e:	4622      	mov	r2, r4
 800c110:	4641      	mov	r1, r8
 800c112:	4638      	mov	r0, r7
 800c114:	47c8      	blx	r9
 800c116:	3001      	adds	r0, #1
 800c118:	d0e6      	beq.n	800c0e8 <_printf_common+0xa4>
 800c11a:	3601      	adds	r6, #1
 800c11c:	e7d9      	b.n	800c0d2 <_printf_common+0x8e>
	...

0800c120 <_printf_i>:
 800c120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c124:	7e0f      	ldrb	r7, [r1, #24]
 800c126:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c128:	2f78      	cmp	r7, #120	@ 0x78
 800c12a:	4691      	mov	r9, r2
 800c12c:	4680      	mov	r8, r0
 800c12e:	460c      	mov	r4, r1
 800c130:	469a      	mov	sl, r3
 800c132:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c136:	d807      	bhi.n	800c148 <_printf_i+0x28>
 800c138:	2f62      	cmp	r7, #98	@ 0x62
 800c13a:	d80a      	bhi.n	800c152 <_printf_i+0x32>
 800c13c:	2f00      	cmp	r7, #0
 800c13e:	f000 80d1 	beq.w	800c2e4 <_printf_i+0x1c4>
 800c142:	2f58      	cmp	r7, #88	@ 0x58
 800c144:	f000 80b8 	beq.w	800c2b8 <_printf_i+0x198>
 800c148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c14c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c150:	e03a      	b.n	800c1c8 <_printf_i+0xa8>
 800c152:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c156:	2b15      	cmp	r3, #21
 800c158:	d8f6      	bhi.n	800c148 <_printf_i+0x28>
 800c15a:	a101      	add	r1, pc, #4	@ (adr r1, 800c160 <_printf_i+0x40>)
 800c15c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c160:	0800c1b9 	.word	0x0800c1b9
 800c164:	0800c1cd 	.word	0x0800c1cd
 800c168:	0800c149 	.word	0x0800c149
 800c16c:	0800c149 	.word	0x0800c149
 800c170:	0800c149 	.word	0x0800c149
 800c174:	0800c149 	.word	0x0800c149
 800c178:	0800c1cd 	.word	0x0800c1cd
 800c17c:	0800c149 	.word	0x0800c149
 800c180:	0800c149 	.word	0x0800c149
 800c184:	0800c149 	.word	0x0800c149
 800c188:	0800c149 	.word	0x0800c149
 800c18c:	0800c2cb 	.word	0x0800c2cb
 800c190:	0800c1f7 	.word	0x0800c1f7
 800c194:	0800c285 	.word	0x0800c285
 800c198:	0800c149 	.word	0x0800c149
 800c19c:	0800c149 	.word	0x0800c149
 800c1a0:	0800c2ed 	.word	0x0800c2ed
 800c1a4:	0800c149 	.word	0x0800c149
 800c1a8:	0800c1f7 	.word	0x0800c1f7
 800c1ac:	0800c149 	.word	0x0800c149
 800c1b0:	0800c149 	.word	0x0800c149
 800c1b4:	0800c28d 	.word	0x0800c28d
 800c1b8:	6833      	ldr	r3, [r6, #0]
 800c1ba:	1d1a      	adds	r2, r3, #4
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	6032      	str	r2, [r6, #0]
 800c1c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e09c      	b.n	800c306 <_printf_i+0x1e6>
 800c1cc:	6833      	ldr	r3, [r6, #0]
 800c1ce:	6820      	ldr	r0, [r4, #0]
 800c1d0:	1d19      	adds	r1, r3, #4
 800c1d2:	6031      	str	r1, [r6, #0]
 800c1d4:	0606      	lsls	r6, r0, #24
 800c1d6:	d501      	bpl.n	800c1dc <_printf_i+0xbc>
 800c1d8:	681d      	ldr	r5, [r3, #0]
 800c1da:	e003      	b.n	800c1e4 <_printf_i+0xc4>
 800c1dc:	0645      	lsls	r5, r0, #25
 800c1de:	d5fb      	bpl.n	800c1d8 <_printf_i+0xb8>
 800c1e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c1e4:	2d00      	cmp	r5, #0
 800c1e6:	da03      	bge.n	800c1f0 <_printf_i+0xd0>
 800c1e8:	232d      	movs	r3, #45	@ 0x2d
 800c1ea:	426d      	negs	r5, r5
 800c1ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1f0:	4858      	ldr	r0, [pc, #352]	@ (800c354 <_printf_i+0x234>)
 800c1f2:	230a      	movs	r3, #10
 800c1f4:	e011      	b.n	800c21a <_printf_i+0xfa>
 800c1f6:	6821      	ldr	r1, [r4, #0]
 800c1f8:	6833      	ldr	r3, [r6, #0]
 800c1fa:	0608      	lsls	r0, r1, #24
 800c1fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800c200:	d402      	bmi.n	800c208 <_printf_i+0xe8>
 800c202:	0649      	lsls	r1, r1, #25
 800c204:	bf48      	it	mi
 800c206:	b2ad      	uxthmi	r5, r5
 800c208:	2f6f      	cmp	r7, #111	@ 0x6f
 800c20a:	4852      	ldr	r0, [pc, #328]	@ (800c354 <_printf_i+0x234>)
 800c20c:	6033      	str	r3, [r6, #0]
 800c20e:	bf14      	ite	ne
 800c210:	230a      	movne	r3, #10
 800c212:	2308      	moveq	r3, #8
 800c214:	2100      	movs	r1, #0
 800c216:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c21a:	6866      	ldr	r6, [r4, #4]
 800c21c:	60a6      	str	r6, [r4, #8]
 800c21e:	2e00      	cmp	r6, #0
 800c220:	db05      	blt.n	800c22e <_printf_i+0x10e>
 800c222:	6821      	ldr	r1, [r4, #0]
 800c224:	432e      	orrs	r6, r5
 800c226:	f021 0104 	bic.w	r1, r1, #4
 800c22a:	6021      	str	r1, [r4, #0]
 800c22c:	d04b      	beq.n	800c2c6 <_printf_i+0x1a6>
 800c22e:	4616      	mov	r6, r2
 800c230:	fbb5 f1f3 	udiv	r1, r5, r3
 800c234:	fb03 5711 	mls	r7, r3, r1, r5
 800c238:	5dc7      	ldrb	r7, [r0, r7]
 800c23a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c23e:	462f      	mov	r7, r5
 800c240:	42bb      	cmp	r3, r7
 800c242:	460d      	mov	r5, r1
 800c244:	d9f4      	bls.n	800c230 <_printf_i+0x110>
 800c246:	2b08      	cmp	r3, #8
 800c248:	d10b      	bne.n	800c262 <_printf_i+0x142>
 800c24a:	6823      	ldr	r3, [r4, #0]
 800c24c:	07df      	lsls	r7, r3, #31
 800c24e:	d508      	bpl.n	800c262 <_printf_i+0x142>
 800c250:	6923      	ldr	r3, [r4, #16]
 800c252:	6861      	ldr	r1, [r4, #4]
 800c254:	4299      	cmp	r1, r3
 800c256:	bfde      	ittt	le
 800c258:	2330      	movle	r3, #48	@ 0x30
 800c25a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c25e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c262:	1b92      	subs	r2, r2, r6
 800c264:	6122      	str	r2, [r4, #16]
 800c266:	f8cd a000 	str.w	sl, [sp]
 800c26a:	464b      	mov	r3, r9
 800c26c:	aa03      	add	r2, sp, #12
 800c26e:	4621      	mov	r1, r4
 800c270:	4640      	mov	r0, r8
 800c272:	f7ff fee7 	bl	800c044 <_printf_common>
 800c276:	3001      	adds	r0, #1
 800c278:	d14a      	bne.n	800c310 <_printf_i+0x1f0>
 800c27a:	f04f 30ff 	mov.w	r0, #4294967295
 800c27e:	b004      	add	sp, #16
 800c280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c284:	6823      	ldr	r3, [r4, #0]
 800c286:	f043 0320 	orr.w	r3, r3, #32
 800c28a:	6023      	str	r3, [r4, #0]
 800c28c:	4832      	ldr	r0, [pc, #200]	@ (800c358 <_printf_i+0x238>)
 800c28e:	2778      	movs	r7, #120	@ 0x78
 800c290:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c294:	6823      	ldr	r3, [r4, #0]
 800c296:	6831      	ldr	r1, [r6, #0]
 800c298:	061f      	lsls	r7, r3, #24
 800c29a:	f851 5b04 	ldr.w	r5, [r1], #4
 800c29e:	d402      	bmi.n	800c2a6 <_printf_i+0x186>
 800c2a0:	065f      	lsls	r7, r3, #25
 800c2a2:	bf48      	it	mi
 800c2a4:	b2ad      	uxthmi	r5, r5
 800c2a6:	6031      	str	r1, [r6, #0]
 800c2a8:	07d9      	lsls	r1, r3, #31
 800c2aa:	bf44      	itt	mi
 800c2ac:	f043 0320 	orrmi.w	r3, r3, #32
 800c2b0:	6023      	strmi	r3, [r4, #0]
 800c2b2:	b11d      	cbz	r5, 800c2bc <_printf_i+0x19c>
 800c2b4:	2310      	movs	r3, #16
 800c2b6:	e7ad      	b.n	800c214 <_printf_i+0xf4>
 800c2b8:	4826      	ldr	r0, [pc, #152]	@ (800c354 <_printf_i+0x234>)
 800c2ba:	e7e9      	b.n	800c290 <_printf_i+0x170>
 800c2bc:	6823      	ldr	r3, [r4, #0]
 800c2be:	f023 0320 	bic.w	r3, r3, #32
 800c2c2:	6023      	str	r3, [r4, #0]
 800c2c4:	e7f6      	b.n	800c2b4 <_printf_i+0x194>
 800c2c6:	4616      	mov	r6, r2
 800c2c8:	e7bd      	b.n	800c246 <_printf_i+0x126>
 800c2ca:	6833      	ldr	r3, [r6, #0]
 800c2cc:	6825      	ldr	r5, [r4, #0]
 800c2ce:	6961      	ldr	r1, [r4, #20]
 800c2d0:	1d18      	adds	r0, r3, #4
 800c2d2:	6030      	str	r0, [r6, #0]
 800c2d4:	062e      	lsls	r6, r5, #24
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	d501      	bpl.n	800c2de <_printf_i+0x1be>
 800c2da:	6019      	str	r1, [r3, #0]
 800c2dc:	e002      	b.n	800c2e4 <_printf_i+0x1c4>
 800c2de:	0668      	lsls	r0, r5, #25
 800c2e0:	d5fb      	bpl.n	800c2da <_printf_i+0x1ba>
 800c2e2:	8019      	strh	r1, [r3, #0]
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	6123      	str	r3, [r4, #16]
 800c2e8:	4616      	mov	r6, r2
 800c2ea:	e7bc      	b.n	800c266 <_printf_i+0x146>
 800c2ec:	6833      	ldr	r3, [r6, #0]
 800c2ee:	1d1a      	adds	r2, r3, #4
 800c2f0:	6032      	str	r2, [r6, #0]
 800c2f2:	681e      	ldr	r6, [r3, #0]
 800c2f4:	6862      	ldr	r2, [r4, #4]
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	4630      	mov	r0, r6
 800c2fa:	f7f3 ff69 	bl	80001d0 <memchr>
 800c2fe:	b108      	cbz	r0, 800c304 <_printf_i+0x1e4>
 800c300:	1b80      	subs	r0, r0, r6
 800c302:	6060      	str	r0, [r4, #4]
 800c304:	6863      	ldr	r3, [r4, #4]
 800c306:	6123      	str	r3, [r4, #16]
 800c308:	2300      	movs	r3, #0
 800c30a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c30e:	e7aa      	b.n	800c266 <_printf_i+0x146>
 800c310:	6923      	ldr	r3, [r4, #16]
 800c312:	4632      	mov	r2, r6
 800c314:	4649      	mov	r1, r9
 800c316:	4640      	mov	r0, r8
 800c318:	47d0      	blx	sl
 800c31a:	3001      	adds	r0, #1
 800c31c:	d0ad      	beq.n	800c27a <_printf_i+0x15a>
 800c31e:	6823      	ldr	r3, [r4, #0]
 800c320:	079b      	lsls	r3, r3, #30
 800c322:	d413      	bmi.n	800c34c <_printf_i+0x22c>
 800c324:	68e0      	ldr	r0, [r4, #12]
 800c326:	9b03      	ldr	r3, [sp, #12]
 800c328:	4298      	cmp	r0, r3
 800c32a:	bfb8      	it	lt
 800c32c:	4618      	movlt	r0, r3
 800c32e:	e7a6      	b.n	800c27e <_printf_i+0x15e>
 800c330:	2301      	movs	r3, #1
 800c332:	4632      	mov	r2, r6
 800c334:	4649      	mov	r1, r9
 800c336:	4640      	mov	r0, r8
 800c338:	47d0      	blx	sl
 800c33a:	3001      	adds	r0, #1
 800c33c:	d09d      	beq.n	800c27a <_printf_i+0x15a>
 800c33e:	3501      	adds	r5, #1
 800c340:	68e3      	ldr	r3, [r4, #12]
 800c342:	9903      	ldr	r1, [sp, #12]
 800c344:	1a5b      	subs	r3, r3, r1
 800c346:	42ab      	cmp	r3, r5
 800c348:	dcf2      	bgt.n	800c330 <_printf_i+0x210>
 800c34a:	e7eb      	b.n	800c324 <_printf_i+0x204>
 800c34c:	2500      	movs	r5, #0
 800c34e:	f104 0619 	add.w	r6, r4, #25
 800c352:	e7f5      	b.n	800c340 <_printf_i+0x220>
 800c354:	0801049a 	.word	0x0801049a
 800c358:	080104ab 	.word	0x080104ab

0800c35c <_scanf_float>:
 800c35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c360:	b087      	sub	sp, #28
 800c362:	4691      	mov	r9, r2
 800c364:	9303      	str	r3, [sp, #12]
 800c366:	688b      	ldr	r3, [r1, #8]
 800c368:	1e5a      	subs	r2, r3, #1
 800c36a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c36e:	bf81      	itttt	hi
 800c370:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c374:	eb03 0b05 	addhi.w	fp, r3, r5
 800c378:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c37c:	608b      	strhi	r3, [r1, #8]
 800c37e:	680b      	ldr	r3, [r1, #0]
 800c380:	460a      	mov	r2, r1
 800c382:	f04f 0500 	mov.w	r5, #0
 800c386:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c38a:	f842 3b1c 	str.w	r3, [r2], #28
 800c38e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c392:	4680      	mov	r8, r0
 800c394:	460c      	mov	r4, r1
 800c396:	bf98      	it	ls
 800c398:	f04f 0b00 	movls.w	fp, #0
 800c39c:	9201      	str	r2, [sp, #4]
 800c39e:	4616      	mov	r6, r2
 800c3a0:	46aa      	mov	sl, r5
 800c3a2:	462f      	mov	r7, r5
 800c3a4:	9502      	str	r5, [sp, #8]
 800c3a6:	68a2      	ldr	r2, [r4, #8]
 800c3a8:	b15a      	cbz	r2, 800c3c2 <_scanf_float+0x66>
 800c3aa:	f8d9 3000 	ldr.w	r3, [r9]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	2b4e      	cmp	r3, #78	@ 0x4e
 800c3b2:	d863      	bhi.n	800c47c <_scanf_float+0x120>
 800c3b4:	2b40      	cmp	r3, #64	@ 0x40
 800c3b6:	d83b      	bhi.n	800c430 <_scanf_float+0xd4>
 800c3b8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c3bc:	b2c8      	uxtb	r0, r1
 800c3be:	280e      	cmp	r0, #14
 800c3c0:	d939      	bls.n	800c436 <_scanf_float+0xda>
 800c3c2:	b11f      	cbz	r7, 800c3cc <_scanf_float+0x70>
 800c3c4:	6823      	ldr	r3, [r4, #0]
 800c3c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c3ca:	6023      	str	r3, [r4, #0]
 800c3cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c3d0:	f1ba 0f01 	cmp.w	sl, #1
 800c3d4:	f200 8114 	bhi.w	800c600 <_scanf_float+0x2a4>
 800c3d8:	9b01      	ldr	r3, [sp, #4]
 800c3da:	429e      	cmp	r6, r3
 800c3dc:	f200 8105 	bhi.w	800c5ea <_scanf_float+0x28e>
 800c3e0:	2001      	movs	r0, #1
 800c3e2:	b007      	add	sp, #28
 800c3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c3ec:	2a0d      	cmp	r2, #13
 800c3ee:	d8e8      	bhi.n	800c3c2 <_scanf_float+0x66>
 800c3f0:	a101      	add	r1, pc, #4	@ (adr r1, 800c3f8 <_scanf_float+0x9c>)
 800c3f2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c3f6:	bf00      	nop
 800c3f8:	0800c541 	.word	0x0800c541
 800c3fc:	0800c3c3 	.word	0x0800c3c3
 800c400:	0800c3c3 	.word	0x0800c3c3
 800c404:	0800c3c3 	.word	0x0800c3c3
 800c408:	0800c59d 	.word	0x0800c59d
 800c40c:	0800c577 	.word	0x0800c577
 800c410:	0800c3c3 	.word	0x0800c3c3
 800c414:	0800c3c3 	.word	0x0800c3c3
 800c418:	0800c54f 	.word	0x0800c54f
 800c41c:	0800c3c3 	.word	0x0800c3c3
 800c420:	0800c3c3 	.word	0x0800c3c3
 800c424:	0800c3c3 	.word	0x0800c3c3
 800c428:	0800c3c3 	.word	0x0800c3c3
 800c42c:	0800c50b 	.word	0x0800c50b
 800c430:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c434:	e7da      	b.n	800c3ec <_scanf_float+0x90>
 800c436:	290e      	cmp	r1, #14
 800c438:	d8c3      	bhi.n	800c3c2 <_scanf_float+0x66>
 800c43a:	a001      	add	r0, pc, #4	@ (adr r0, 800c440 <_scanf_float+0xe4>)
 800c43c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c440:	0800c4fb 	.word	0x0800c4fb
 800c444:	0800c3c3 	.word	0x0800c3c3
 800c448:	0800c4fb 	.word	0x0800c4fb
 800c44c:	0800c58b 	.word	0x0800c58b
 800c450:	0800c3c3 	.word	0x0800c3c3
 800c454:	0800c49d 	.word	0x0800c49d
 800c458:	0800c4e1 	.word	0x0800c4e1
 800c45c:	0800c4e1 	.word	0x0800c4e1
 800c460:	0800c4e1 	.word	0x0800c4e1
 800c464:	0800c4e1 	.word	0x0800c4e1
 800c468:	0800c4e1 	.word	0x0800c4e1
 800c46c:	0800c4e1 	.word	0x0800c4e1
 800c470:	0800c4e1 	.word	0x0800c4e1
 800c474:	0800c4e1 	.word	0x0800c4e1
 800c478:	0800c4e1 	.word	0x0800c4e1
 800c47c:	2b6e      	cmp	r3, #110	@ 0x6e
 800c47e:	d809      	bhi.n	800c494 <_scanf_float+0x138>
 800c480:	2b60      	cmp	r3, #96	@ 0x60
 800c482:	d8b1      	bhi.n	800c3e8 <_scanf_float+0x8c>
 800c484:	2b54      	cmp	r3, #84	@ 0x54
 800c486:	d07b      	beq.n	800c580 <_scanf_float+0x224>
 800c488:	2b59      	cmp	r3, #89	@ 0x59
 800c48a:	d19a      	bne.n	800c3c2 <_scanf_float+0x66>
 800c48c:	2d07      	cmp	r5, #7
 800c48e:	d198      	bne.n	800c3c2 <_scanf_float+0x66>
 800c490:	2508      	movs	r5, #8
 800c492:	e02f      	b.n	800c4f4 <_scanf_float+0x198>
 800c494:	2b74      	cmp	r3, #116	@ 0x74
 800c496:	d073      	beq.n	800c580 <_scanf_float+0x224>
 800c498:	2b79      	cmp	r3, #121	@ 0x79
 800c49a:	e7f6      	b.n	800c48a <_scanf_float+0x12e>
 800c49c:	6821      	ldr	r1, [r4, #0]
 800c49e:	05c8      	lsls	r0, r1, #23
 800c4a0:	d51e      	bpl.n	800c4e0 <_scanf_float+0x184>
 800c4a2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c4a6:	6021      	str	r1, [r4, #0]
 800c4a8:	3701      	adds	r7, #1
 800c4aa:	f1bb 0f00 	cmp.w	fp, #0
 800c4ae:	d003      	beq.n	800c4b8 <_scanf_float+0x15c>
 800c4b0:	3201      	adds	r2, #1
 800c4b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c4b6:	60a2      	str	r2, [r4, #8]
 800c4b8:	68a3      	ldr	r3, [r4, #8]
 800c4ba:	3b01      	subs	r3, #1
 800c4bc:	60a3      	str	r3, [r4, #8]
 800c4be:	6923      	ldr	r3, [r4, #16]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	6123      	str	r3, [r4, #16]
 800c4c4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c4c8:	3b01      	subs	r3, #1
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f8c9 3004 	str.w	r3, [r9, #4]
 800c4d0:	f340 8082 	ble.w	800c5d8 <_scanf_float+0x27c>
 800c4d4:	f8d9 3000 	ldr.w	r3, [r9]
 800c4d8:	3301      	adds	r3, #1
 800c4da:	f8c9 3000 	str.w	r3, [r9]
 800c4de:	e762      	b.n	800c3a6 <_scanf_float+0x4a>
 800c4e0:	eb1a 0105 	adds.w	r1, sl, r5
 800c4e4:	f47f af6d 	bne.w	800c3c2 <_scanf_float+0x66>
 800c4e8:	6822      	ldr	r2, [r4, #0]
 800c4ea:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c4ee:	6022      	str	r2, [r4, #0]
 800c4f0:	460d      	mov	r5, r1
 800c4f2:	468a      	mov	sl, r1
 800c4f4:	f806 3b01 	strb.w	r3, [r6], #1
 800c4f8:	e7de      	b.n	800c4b8 <_scanf_float+0x15c>
 800c4fa:	6822      	ldr	r2, [r4, #0]
 800c4fc:	0610      	lsls	r0, r2, #24
 800c4fe:	f57f af60 	bpl.w	800c3c2 <_scanf_float+0x66>
 800c502:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c506:	6022      	str	r2, [r4, #0]
 800c508:	e7f4      	b.n	800c4f4 <_scanf_float+0x198>
 800c50a:	f1ba 0f00 	cmp.w	sl, #0
 800c50e:	d10c      	bne.n	800c52a <_scanf_float+0x1ce>
 800c510:	b977      	cbnz	r7, 800c530 <_scanf_float+0x1d4>
 800c512:	6822      	ldr	r2, [r4, #0]
 800c514:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c518:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c51c:	d108      	bne.n	800c530 <_scanf_float+0x1d4>
 800c51e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c522:	6022      	str	r2, [r4, #0]
 800c524:	f04f 0a01 	mov.w	sl, #1
 800c528:	e7e4      	b.n	800c4f4 <_scanf_float+0x198>
 800c52a:	f1ba 0f02 	cmp.w	sl, #2
 800c52e:	d050      	beq.n	800c5d2 <_scanf_float+0x276>
 800c530:	2d01      	cmp	r5, #1
 800c532:	d002      	beq.n	800c53a <_scanf_float+0x1de>
 800c534:	2d04      	cmp	r5, #4
 800c536:	f47f af44 	bne.w	800c3c2 <_scanf_float+0x66>
 800c53a:	3501      	adds	r5, #1
 800c53c:	b2ed      	uxtb	r5, r5
 800c53e:	e7d9      	b.n	800c4f4 <_scanf_float+0x198>
 800c540:	f1ba 0f01 	cmp.w	sl, #1
 800c544:	f47f af3d 	bne.w	800c3c2 <_scanf_float+0x66>
 800c548:	f04f 0a02 	mov.w	sl, #2
 800c54c:	e7d2      	b.n	800c4f4 <_scanf_float+0x198>
 800c54e:	b975      	cbnz	r5, 800c56e <_scanf_float+0x212>
 800c550:	2f00      	cmp	r7, #0
 800c552:	f47f af37 	bne.w	800c3c4 <_scanf_float+0x68>
 800c556:	6822      	ldr	r2, [r4, #0]
 800c558:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c55c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c560:	f040 8103 	bne.w	800c76a <_scanf_float+0x40e>
 800c564:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c568:	6022      	str	r2, [r4, #0]
 800c56a:	2501      	movs	r5, #1
 800c56c:	e7c2      	b.n	800c4f4 <_scanf_float+0x198>
 800c56e:	2d03      	cmp	r5, #3
 800c570:	d0e3      	beq.n	800c53a <_scanf_float+0x1de>
 800c572:	2d05      	cmp	r5, #5
 800c574:	e7df      	b.n	800c536 <_scanf_float+0x1da>
 800c576:	2d02      	cmp	r5, #2
 800c578:	f47f af23 	bne.w	800c3c2 <_scanf_float+0x66>
 800c57c:	2503      	movs	r5, #3
 800c57e:	e7b9      	b.n	800c4f4 <_scanf_float+0x198>
 800c580:	2d06      	cmp	r5, #6
 800c582:	f47f af1e 	bne.w	800c3c2 <_scanf_float+0x66>
 800c586:	2507      	movs	r5, #7
 800c588:	e7b4      	b.n	800c4f4 <_scanf_float+0x198>
 800c58a:	6822      	ldr	r2, [r4, #0]
 800c58c:	0591      	lsls	r1, r2, #22
 800c58e:	f57f af18 	bpl.w	800c3c2 <_scanf_float+0x66>
 800c592:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c596:	6022      	str	r2, [r4, #0]
 800c598:	9702      	str	r7, [sp, #8]
 800c59a:	e7ab      	b.n	800c4f4 <_scanf_float+0x198>
 800c59c:	6822      	ldr	r2, [r4, #0]
 800c59e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c5a2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c5a6:	d005      	beq.n	800c5b4 <_scanf_float+0x258>
 800c5a8:	0550      	lsls	r0, r2, #21
 800c5aa:	f57f af0a 	bpl.w	800c3c2 <_scanf_float+0x66>
 800c5ae:	2f00      	cmp	r7, #0
 800c5b0:	f000 80db 	beq.w	800c76a <_scanf_float+0x40e>
 800c5b4:	0591      	lsls	r1, r2, #22
 800c5b6:	bf58      	it	pl
 800c5b8:	9902      	ldrpl	r1, [sp, #8]
 800c5ba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c5be:	bf58      	it	pl
 800c5c0:	1a79      	subpl	r1, r7, r1
 800c5c2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c5c6:	bf58      	it	pl
 800c5c8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c5cc:	6022      	str	r2, [r4, #0]
 800c5ce:	2700      	movs	r7, #0
 800c5d0:	e790      	b.n	800c4f4 <_scanf_float+0x198>
 800c5d2:	f04f 0a03 	mov.w	sl, #3
 800c5d6:	e78d      	b.n	800c4f4 <_scanf_float+0x198>
 800c5d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c5dc:	4649      	mov	r1, r9
 800c5de:	4640      	mov	r0, r8
 800c5e0:	4798      	blx	r3
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	f43f aedf 	beq.w	800c3a6 <_scanf_float+0x4a>
 800c5e8:	e6eb      	b.n	800c3c2 <_scanf_float+0x66>
 800c5ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c5ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c5f2:	464a      	mov	r2, r9
 800c5f4:	4640      	mov	r0, r8
 800c5f6:	4798      	blx	r3
 800c5f8:	6923      	ldr	r3, [r4, #16]
 800c5fa:	3b01      	subs	r3, #1
 800c5fc:	6123      	str	r3, [r4, #16]
 800c5fe:	e6eb      	b.n	800c3d8 <_scanf_float+0x7c>
 800c600:	1e6b      	subs	r3, r5, #1
 800c602:	2b06      	cmp	r3, #6
 800c604:	d824      	bhi.n	800c650 <_scanf_float+0x2f4>
 800c606:	2d02      	cmp	r5, #2
 800c608:	d836      	bhi.n	800c678 <_scanf_float+0x31c>
 800c60a:	9b01      	ldr	r3, [sp, #4]
 800c60c:	429e      	cmp	r6, r3
 800c60e:	f67f aee7 	bls.w	800c3e0 <_scanf_float+0x84>
 800c612:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c616:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c61a:	464a      	mov	r2, r9
 800c61c:	4640      	mov	r0, r8
 800c61e:	4798      	blx	r3
 800c620:	6923      	ldr	r3, [r4, #16]
 800c622:	3b01      	subs	r3, #1
 800c624:	6123      	str	r3, [r4, #16]
 800c626:	e7f0      	b.n	800c60a <_scanf_float+0x2ae>
 800c628:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c62c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c630:	464a      	mov	r2, r9
 800c632:	4640      	mov	r0, r8
 800c634:	4798      	blx	r3
 800c636:	6923      	ldr	r3, [r4, #16]
 800c638:	3b01      	subs	r3, #1
 800c63a:	6123      	str	r3, [r4, #16]
 800c63c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c640:	fa5f fa8a 	uxtb.w	sl, sl
 800c644:	f1ba 0f02 	cmp.w	sl, #2
 800c648:	d1ee      	bne.n	800c628 <_scanf_float+0x2cc>
 800c64a:	3d03      	subs	r5, #3
 800c64c:	b2ed      	uxtb	r5, r5
 800c64e:	1b76      	subs	r6, r6, r5
 800c650:	6823      	ldr	r3, [r4, #0]
 800c652:	05da      	lsls	r2, r3, #23
 800c654:	d530      	bpl.n	800c6b8 <_scanf_float+0x35c>
 800c656:	055b      	lsls	r3, r3, #21
 800c658:	d511      	bpl.n	800c67e <_scanf_float+0x322>
 800c65a:	9b01      	ldr	r3, [sp, #4]
 800c65c:	429e      	cmp	r6, r3
 800c65e:	f67f aebf 	bls.w	800c3e0 <_scanf_float+0x84>
 800c662:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c666:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c66a:	464a      	mov	r2, r9
 800c66c:	4640      	mov	r0, r8
 800c66e:	4798      	blx	r3
 800c670:	6923      	ldr	r3, [r4, #16]
 800c672:	3b01      	subs	r3, #1
 800c674:	6123      	str	r3, [r4, #16]
 800c676:	e7f0      	b.n	800c65a <_scanf_float+0x2fe>
 800c678:	46aa      	mov	sl, r5
 800c67a:	46b3      	mov	fp, r6
 800c67c:	e7de      	b.n	800c63c <_scanf_float+0x2e0>
 800c67e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c682:	6923      	ldr	r3, [r4, #16]
 800c684:	2965      	cmp	r1, #101	@ 0x65
 800c686:	f103 33ff 	add.w	r3, r3, #4294967295
 800c68a:	f106 35ff 	add.w	r5, r6, #4294967295
 800c68e:	6123      	str	r3, [r4, #16]
 800c690:	d00c      	beq.n	800c6ac <_scanf_float+0x350>
 800c692:	2945      	cmp	r1, #69	@ 0x45
 800c694:	d00a      	beq.n	800c6ac <_scanf_float+0x350>
 800c696:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c69a:	464a      	mov	r2, r9
 800c69c:	4640      	mov	r0, r8
 800c69e:	4798      	blx	r3
 800c6a0:	6923      	ldr	r3, [r4, #16]
 800c6a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	1eb5      	subs	r5, r6, #2
 800c6aa:	6123      	str	r3, [r4, #16]
 800c6ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c6b0:	464a      	mov	r2, r9
 800c6b2:	4640      	mov	r0, r8
 800c6b4:	4798      	blx	r3
 800c6b6:	462e      	mov	r6, r5
 800c6b8:	6822      	ldr	r2, [r4, #0]
 800c6ba:	f012 0210 	ands.w	r2, r2, #16
 800c6be:	d001      	beq.n	800c6c4 <_scanf_float+0x368>
 800c6c0:	2000      	movs	r0, #0
 800c6c2:	e68e      	b.n	800c3e2 <_scanf_float+0x86>
 800c6c4:	7032      	strb	r2, [r6, #0]
 800c6c6:	6823      	ldr	r3, [r4, #0]
 800c6c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c6cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6d0:	d125      	bne.n	800c71e <_scanf_float+0x3c2>
 800c6d2:	9b02      	ldr	r3, [sp, #8]
 800c6d4:	429f      	cmp	r7, r3
 800c6d6:	d00a      	beq.n	800c6ee <_scanf_float+0x392>
 800c6d8:	1bda      	subs	r2, r3, r7
 800c6da:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c6de:	429e      	cmp	r6, r3
 800c6e0:	bf28      	it	cs
 800c6e2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c6e6:	4922      	ldr	r1, [pc, #136]	@ (800c770 <_scanf_float+0x414>)
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	f000 f94f 	bl	800c98c <siprintf>
 800c6ee:	9901      	ldr	r1, [sp, #4]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	4640      	mov	r0, r8
 800c6f4:	f002 fba4 	bl	800ee40 <_strtod_r>
 800c6f8:	9b03      	ldr	r3, [sp, #12]
 800c6fa:	6821      	ldr	r1, [r4, #0]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f011 0f02 	tst.w	r1, #2
 800c702:	ec57 6b10 	vmov	r6, r7, d0
 800c706:	f103 0204 	add.w	r2, r3, #4
 800c70a:	d015      	beq.n	800c738 <_scanf_float+0x3dc>
 800c70c:	9903      	ldr	r1, [sp, #12]
 800c70e:	600a      	str	r2, [r1, #0]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	e9c3 6700 	strd	r6, r7, [r3]
 800c716:	68e3      	ldr	r3, [r4, #12]
 800c718:	3301      	adds	r3, #1
 800c71a:	60e3      	str	r3, [r4, #12]
 800c71c:	e7d0      	b.n	800c6c0 <_scanf_float+0x364>
 800c71e:	9b04      	ldr	r3, [sp, #16]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d0e4      	beq.n	800c6ee <_scanf_float+0x392>
 800c724:	9905      	ldr	r1, [sp, #20]
 800c726:	230a      	movs	r3, #10
 800c728:	3101      	adds	r1, #1
 800c72a:	4640      	mov	r0, r8
 800c72c:	f002 fc08 	bl	800ef40 <_strtol_r>
 800c730:	9b04      	ldr	r3, [sp, #16]
 800c732:	9e05      	ldr	r6, [sp, #20]
 800c734:	1ac2      	subs	r2, r0, r3
 800c736:	e7d0      	b.n	800c6da <_scanf_float+0x37e>
 800c738:	f011 0f04 	tst.w	r1, #4
 800c73c:	9903      	ldr	r1, [sp, #12]
 800c73e:	600a      	str	r2, [r1, #0]
 800c740:	d1e6      	bne.n	800c710 <_scanf_float+0x3b4>
 800c742:	681d      	ldr	r5, [r3, #0]
 800c744:	4632      	mov	r2, r6
 800c746:	463b      	mov	r3, r7
 800c748:	4630      	mov	r0, r6
 800c74a:	4639      	mov	r1, r7
 800c74c:	f7f4 f9ee 	bl	8000b2c <__aeabi_dcmpun>
 800c750:	b128      	cbz	r0, 800c75e <_scanf_float+0x402>
 800c752:	4808      	ldr	r0, [pc, #32]	@ (800c774 <_scanf_float+0x418>)
 800c754:	f000 fa1e 	bl	800cb94 <nanf>
 800c758:	ed85 0a00 	vstr	s0, [r5]
 800c75c:	e7db      	b.n	800c716 <_scanf_float+0x3ba>
 800c75e:	4630      	mov	r0, r6
 800c760:	4639      	mov	r1, r7
 800c762:	f7f4 fa41 	bl	8000be8 <__aeabi_d2f>
 800c766:	6028      	str	r0, [r5, #0]
 800c768:	e7d5      	b.n	800c716 <_scanf_float+0x3ba>
 800c76a:	2700      	movs	r7, #0
 800c76c:	e62e      	b.n	800c3cc <_scanf_float+0x70>
 800c76e:	bf00      	nop
 800c770:	080104bc 	.word	0x080104bc
 800c774:	080105fd 	.word	0x080105fd

0800c778 <std>:
 800c778:	2300      	movs	r3, #0
 800c77a:	b510      	push	{r4, lr}
 800c77c:	4604      	mov	r4, r0
 800c77e:	e9c0 3300 	strd	r3, r3, [r0]
 800c782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c786:	6083      	str	r3, [r0, #8]
 800c788:	8181      	strh	r1, [r0, #12]
 800c78a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c78c:	81c2      	strh	r2, [r0, #14]
 800c78e:	6183      	str	r3, [r0, #24]
 800c790:	4619      	mov	r1, r3
 800c792:	2208      	movs	r2, #8
 800c794:	305c      	adds	r0, #92	@ 0x5c
 800c796:	f000 f95e 	bl	800ca56 <memset>
 800c79a:	4b0d      	ldr	r3, [pc, #52]	@ (800c7d0 <std+0x58>)
 800c79c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c79e:	4b0d      	ldr	r3, [pc, #52]	@ (800c7d4 <std+0x5c>)
 800c7a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c7a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c7d8 <std+0x60>)
 800c7a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c7a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c7dc <std+0x64>)
 800c7a8:	6323      	str	r3, [r4, #48]	@ 0x30
 800c7aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c7e0 <std+0x68>)
 800c7ac:	6224      	str	r4, [r4, #32]
 800c7ae:	429c      	cmp	r4, r3
 800c7b0:	d006      	beq.n	800c7c0 <std+0x48>
 800c7b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c7b6:	4294      	cmp	r4, r2
 800c7b8:	d002      	beq.n	800c7c0 <std+0x48>
 800c7ba:	33d0      	adds	r3, #208	@ 0xd0
 800c7bc:	429c      	cmp	r4, r3
 800c7be:	d105      	bne.n	800c7cc <std+0x54>
 800c7c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c7c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7c8:	f000 b9d2 	b.w	800cb70 <__retarget_lock_init_recursive>
 800c7cc:	bd10      	pop	{r4, pc}
 800c7ce:	bf00      	nop
 800c7d0:	0800c9d1 	.word	0x0800c9d1
 800c7d4:	0800c9f3 	.word	0x0800c9f3
 800c7d8:	0800ca2b 	.word	0x0800ca2b
 800c7dc:	0800ca4f 	.word	0x0800ca4f
 800c7e0:	200019d4 	.word	0x200019d4

0800c7e4 <stdio_exit_handler>:
 800c7e4:	4a02      	ldr	r2, [pc, #8]	@ (800c7f0 <stdio_exit_handler+0xc>)
 800c7e6:	4903      	ldr	r1, [pc, #12]	@ (800c7f4 <stdio_exit_handler+0x10>)
 800c7e8:	4803      	ldr	r0, [pc, #12]	@ (800c7f8 <stdio_exit_handler+0x14>)
 800c7ea:	f000 b869 	b.w	800c8c0 <_fwalk_sglue>
 800c7ee:	bf00      	nop
 800c7f0:	2000000c 	.word	0x2000000c
 800c7f4:	0800f581 	.word	0x0800f581
 800c7f8:	2000001c 	.word	0x2000001c

0800c7fc <cleanup_stdio>:
 800c7fc:	6841      	ldr	r1, [r0, #4]
 800c7fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c830 <cleanup_stdio+0x34>)
 800c800:	4299      	cmp	r1, r3
 800c802:	b510      	push	{r4, lr}
 800c804:	4604      	mov	r4, r0
 800c806:	d001      	beq.n	800c80c <cleanup_stdio+0x10>
 800c808:	f002 feba 	bl	800f580 <_fflush_r>
 800c80c:	68a1      	ldr	r1, [r4, #8]
 800c80e:	4b09      	ldr	r3, [pc, #36]	@ (800c834 <cleanup_stdio+0x38>)
 800c810:	4299      	cmp	r1, r3
 800c812:	d002      	beq.n	800c81a <cleanup_stdio+0x1e>
 800c814:	4620      	mov	r0, r4
 800c816:	f002 feb3 	bl	800f580 <_fflush_r>
 800c81a:	68e1      	ldr	r1, [r4, #12]
 800c81c:	4b06      	ldr	r3, [pc, #24]	@ (800c838 <cleanup_stdio+0x3c>)
 800c81e:	4299      	cmp	r1, r3
 800c820:	d004      	beq.n	800c82c <cleanup_stdio+0x30>
 800c822:	4620      	mov	r0, r4
 800c824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c828:	f002 beaa 	b.w	800f580 <_fflush_r>
 800c82c:	bd10      	pop	{r4, pc}
 800c82e:	bf00      	nop
 800c830:	200019d4 	.word	0x200019d4
 800c834:	20001a3c 	.word	0x20001a3c
 800c838:	20001aa4 	.word	0x20001aa4

0800c83c <global_stdio_init.part.0>:
 800c83c:	b510      	push	{r4, lr}
 800c83e:	4b0b      	ldr	r3, [pc, #44]	@ (800c86c <global_stdio_init.part.0+0x30>)
 800c840:	4c0b      	ldr	r4, [pc, #44]	@ (800c870 <global_stdio_init.part.0+0x34>)
 800c842:	4a0c      	ldr	r2, [pc, #48]	@ (800c874 <global_stdio_init.part.0+0x38>)
 800c844:	601a      	str	r2, [r3, #0]
 800c846:	4620      	mov	r0, r4
 800c848:	2200      	movs	r2, #0
 800c84a:	2104      	movs	r1, #4
 800c84c:	f7ff ff94 	bl	800c778 <std>
 800c850:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c854:	2201      	movs	r2, #1
 800c856:	2109      	movs	r1, #9
 800c858:	f7ff ff8e 	bl	800c778 <std>
 800c85c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c860:	2202      	movs	r2, #2
 800c862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c866:	2112      	movs	r1, #18
 800c868:	f7ff bf86 	b.w	800c778 <std>
 800c86c:	20001b0c 	.word	0x20001b0c
 800c870:	200019d4 	.word	0x200019d4
 800c874:	0800c7e5 	.word	0x0800c7e5

0800c878 <__sfp_lock_acquire>:
 800c878:	4801      	ldr	r0, [pc, #4]	@ (800c880 <__sfp_lock_acquire+0x8>)
 800c87a:	f000 b97a 	b.w	800cb72 <__retarget_lock_acquire_recursive>
 800c87e:	bf00      	nop
 800c880:	20001b15 	.word	0x20001b15

0800c884 <__sfp_lock_release>:
 800c884:	4801      	ldr	r0, [pc, #4]	@ (800c88c <__sfp_lock_release+0x8>)
 800c886:	f000 b975 	b.w	800cb74 <__retarget_lock_release_recursive>
 800c88a:	bf00      	nop
 800c88c:	20001b15 	.word	0x20001b15

0800c890 <__sinit>:
 800c890:	b510      	push	{r4, lr}
 800c892:	4604      	mov	r4, r0
 800c894:	f7ff fff0 	bl	800c878 <__sfp_lock_acquire>
 800c898:	6a23      	ldr	r3, [r4, #32]
 800c89a:	b11b      	cbz	r3, 800c8a4 <__sinit+0x14>
 800c89c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8a0:	f7ff bff0 	b.w	800c884 <__sfp_lock_release>
 800c8a4:	4b04      	ldr	r3, [pc, #16]	@ (800c8b8 <__sinit+0x28>)
 800c8a6:	6223      	str	r3, [r4, #32]
 800c8a8:	4b04      	ldr	r3, [pc, #16]	@ (800c8bc <__sinit+0x2c>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d1f5      	bne.n	800c89c <__sinit+0xc>
 800c8b0:	f7ff ffc4 	bl	800c83c <global_stdio_init.part.0>
 800c8b4:	e7f2      	b.n	800c89c <__sinit+0xc>
 800c8b6:	bf00      	nop
 800c8b8:	0800c7fd 	.word	0x0800c7fd
 800c8bc:	20001b0c 	.word	0x20001b0c

0800c8c0 <_fwalk_sglue>:
 800c8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8c4:	4607      	mov	r7, r0
 800c8c6:	4688      	mov	r8, r1
 800c8c8:	4614      	mov	r4, r2
 800c8ca:	2600      	movs	r6, #0
 800c8cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c8d0:	f1b9 0901 	subs.w	r9, r9, #1
 800c8d4:	d505      	bpl.n	800c8e2 <_fwalk_sglue+0x22>
 800c8d6:	6824      	ldr	r4, [r4, #0]
 800c8d8:	2c00      	cmp	r4, #0
 800c8da:	d1f7      	bne.n	800c8cc <_fwalk_sglue+0xc>
 800c8dc:	4630      	mov	r0, r6
 800c8de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8e2:	89ab      	ldrh	r3, [r5, #12]
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d907      	bls.n	800c8f8 <_fwalk_sglue+0x38>
 800c8e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	d003      	beq.n	800c8f8 <_fwalk_sglue+0x38>
 800c8f0:	4629      	mov	r1, r5
 800c8f2:	4638      	mov	r0, r7
 800c8f4:	47c0      	blx	r8
 800c8f6:	4306      	orrs	r6, r0
 800c8f8:	3568      	adds	r5, #104	@ 0x68
 800c8fa:	e7e9      	b.n	800c8d0 <_fwalk_sglue+0x10>

0800c8fc <iprintf>:
 800c8fc:	b40f      	push	{r0, r1, r2, r3}
 800c8fe:	b507      	push	{r0, r1, r2, lr}
 800c900:	4906      	ldr	r1, [pc, #24]	@ (800c91c <iprintf+0x20>)
 800c902:	ab04      	add	r3, sp, #16
 800c904:	6808      	ldr	r0, [r1, #0]
 800c906:	f853 2b04 	ldr.w	r2, [r3], #4
 800c90a:	6881      	ldr	r1, [r0, #8]
 800c90c:	9301      	str	r3, [sp, #4]
 800c90e:	f002 fc9b 	bl	800f248 <_vfiprintf_r>
 800c912:	b003      	add	sp, #12
 800c914:	f85d eb04 	ldr.w	lr, [sp], #4
 800c918:	b004      	add	sp, #16
 800c91a:	4770      	bx	lr
 800c91c:	20000018 	.word	0x20000018

0800c920 <sniprintf>:
 800c920:	b40c      	push	{r2, r3}
 800c922:	b530      	push	{r4, r5, lr}
 800c924:	4b18      	ldr	r3, [pc, #96]	@ (800c988 <sniprintf+0x68>)
 800c926:	1e0c      	subs	r4, r1, #0
 800c928:	681d      	ldr	r5, [r3, #0]
 800c92a:	b09d      	sub	sp, #116	@ 0x74
 800c92c:	da08      	bge.n	800c940 <sniprintf+0x20>
 800c92e:	238b      	movs	r3, #139	@ 0x8b
 800c930:	602b      	str	r3, [r5, #0]
 800c932:	f04f 30ff 	mov.w	r0, #4294967295
 800c936:	b01d      	add	sp, #116	@ 0x74
 800c938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c93c:	b002      	add	sp, #8
 800c93e:	4770      	bx	lr
 800c940:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c944:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c948:	f04f 0300 	mov.w	r3, #0
 800c94c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c94e:	bf14      	ite	ne
 800c950:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c954:	4623      	moveq	r3, r4
 800c956:	9304      	str	r3, [sp, #16]
 800c958:	9307      	str	r3, [sp, #28]
 800c95a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c95e:	9002      	str	r0, [sp, #8]
 800c960:	9006      	str	r0, [sp, #24]
 800c962:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c966:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c968:	ab21      	add	r3, sp, #132	@ 0x84
 800c96a:	a902      	add	r1, sp, #8
 800c96c:	4628      	mov	r0, r5
 800c96e:	9301      	str	r3, [sp, #4]
 800c970:	f002 fb44 	bl	800effc <_svfiprintf_r>
 800c974:	1c43      	adds	r3, r0, #1
 800c976:	bfbc      	itt	lt
 800c978:	238b      	movlt	r3, #139	@ 0x8b
 800c97a:	602b      	strlt	r3, [r5, #0]
 800c97c:	2c00      	cmp	r4, #0
 800c97e:	d0da      	beq.n	800c936 <sniprintf+0x16>
 800c980:	9b02      	ldr	r3, [sp, #8]
 800c982:	2200      	movs	r2, #0
 800c984:	701a      	strb	r2, [r3, #0]
 800c986:	e7d6      	b.n	800c936 <sniprintf+0x16>
 800c988:	20000018 	.word	0x20000018

0800c98c <siprintf>:
 800c98c:	b40e      	push	{r1, r2, r3}
 800c98e:	b510      	push	{r4, lr}
 800c990:	b09d      	sub	sp, #116	@ 0x74
 800c992:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c994:	9002      	str	r0, [sp, #8]
 800c996:	9006      	str	r0, [sp, #24]
 800c998:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c99c:	480a      	ldr	r0, [pc, #40]	@ (800c9c8 <siprintf+0x3c>)
 800c99e:	9107      	str	r1, [sp, #28]
 800c9a0:	9104      	str	r1, [sp, #16]
 800c9a2:	490a      	ldr	r1, [pc, #40]	@ (800c9cc <siprintf+0x40>)
 800c9a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9a8:	9105      	str	r1, [sp, #20]
 800c9aa:	2400      	movs	r4, #0
 800c9ac:	a902      	add	r1, sp, #8
 800c9ae:	6800      	ldr	r0, [r0, #0]
 800c9b0:	9301      	str	r3, [sp, #4]
 800c9b2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c9b4:	f002 fb22 	bl	800effc <_svfiprintf_r>
 800c9b8:	9b02      	ldr	r3, [sp, #8]
 800c9ba:	701c      	strb	r4, [r3, #0]
 800c9bc:	b01d      	add	sp, #116	@ 0x74
 800c9be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9c2:	b003      	add	sp, #12
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	20000018 	.word	0x20000018
 800c9cc:	ffff0208 	.word	0xffff0208

0800c9d0 <__sread>:
 800c9d0:	b510      	push	{r4, lr}
 800c9d2:	460c      	mov	r4, r1
 800c9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9d8:	f000 f86c 	bl	800cab4 <_read_r>
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	bfab      	itete	ge
 800c9e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c9e2:	89a3      	ldrhlt	r3, [r4, #12]
 800c9e4:	181b      	addge	r3, r3, r0
 800c9e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c9ea:	bfac      	ite	ge
 800c9ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c9ee:	81a3      	strhlt	r3, [r4, #12]
 800c9f0:	bd10      	pop	{r4, pc}

0800c9f2 <__swrite>:
 800c9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f6:	461f      	mov	r7, r3
 800c9f8:	898b      	ldrh	r3, [r1, #12]
 800c9fa:	05db      	lsls	r3, r3, #23
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	460c      	mov	r4, r1
 800ca00:	4616      	mov	r6, r2
 800ca02:	d505      	bpl.n	800ca10 <__swrite+0x1e>
 800ca04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca08:	2302      	movs	r3, #2
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	f000 f840 	bl	800ca90 <_lseek_r>
 800ca10:	89a3      	ldrh	r3, [r4, #12]
 800ca12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca1a:	81a3      	strh	r3, [r4, #12]
 800ca1c:	4632      	mov	r2, r6
 800ca1e:	463b      	mov	r3, r7
 800ca20:	4628      	mov	r0, r5
 800ca22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca26:	f000 b867 	b.w	800caf8 <_write_r>

0800ca2a <__sseek>:
 800ca2a:	b510      	push	{r4, lr}
 800ca2c:	460c      	mov	r4, r1
 800ca2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca32:	f000 f82d 	bl	800ca90 <_lseek_r>
 800ca36:	1c43      	adds	r3, r0, #1
 800ca38:	89a3      	ldrh	r3, [r4, #12]
 800ca3a:	bf15      	itete	ne
 800ca3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ca3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ca42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ca46:	81a3      	strheq	r3, [r4, #12]
 800ca48:	bf18      	it	ne
 800ca4a:	81a3      	strhne	r3, [r4, #12]
 800ca4c:	bd10      	pop	{r4, pc}

0800ca4e <__sclose>:
 800ca4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca52:	f000 b80d 	b.w	800ca70 <_close_r>

0800ca56 <memset>:
 800ca56:	4402      	add	r2, r0
 800ca58:	4603      	mov	r3, r0
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d100      	bne.n	800ca60 <memset+0xa>
 800ca5e:	4770      	bx	lr
 800ca60:	f803 1b01 	strb.w	r1, [r3], #1
 800ca64:	e7f9      	b.n	800ca5a <memset+0x4>
	...

0800ca68 <_localeconv_r>:
 800ca68:	4800      	ldr	r0, [pc, #0]	@ (800ca6c <_localeconv_r+0x4>)
 800ca6a:	4770      	bx	lr
 800ca6c:	20000158 	.word	0x20000158

0800ca70 <_close_r>:
 800ca70:	b538      	push	{r3, r4, r5, lr}
 800ca72:	4d06      	ldr	r5, [pc, #24]	@ (800ca8c <_close_r+0x1c>)
 800ca74:	2300      	movs	r3, #0
 800ca76:	4604      	mov	r4, r0
 800ca78:	4608      	mov	r0, r1
 800ca7a:	602b      	str	r3, [r5, #0]
 800ca7c:	f7f5 f900 	bl	8001c80 <_close>
 800ca80:	1c43      	adds	r3, r0, #1
 800ca82:	d102      	bne.n	800ca8a <_close_r+0x1a>
 800ca84:	682b      	ldr	r3, [r5, #0]
 800ca86:	b103      	cbz	r3, 800ca8a <_close_r+0x1a>
 800ca88:	6023      	str	r3, [r4, #0]
 800ca8a:	bd38      	pop	{r3, r4, r5, pc}
 800ca8c:	20001b10 	.word	0x20001b10

0800ca90 <_lseek_r>:
 800ca90:	b538      	push	{r3, r4, r5, lr}
 800ca92:	4d07      	ldr	r5, [pc, #28]	@ (800cab0 <_lseek_r+0x20>)
 800ca94:	4604      	mov	r4, r0
 800ca96:	4608      	mov	r0, r1
 800ca98:	4611      	mov	r1, r2
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	602a      	str	r2, [r5, #0]
 800ca9e:	461a      	mov	r2, r3
 800caa0:	f7f5 f915 	bl	8001cce <_lseek>
 800caa4:	1c43      	adds	r3, r0, #1
 800caa6:	d102      	bne.n	800caae <_lseek_r+0x1e>
 800caa8:	682b      	ldr	r3, [r5, #0]
 800caaa:	b103      	cbz	r3, 800caae <_lseek_r+0x1e>
 800caac:	6023      	str	r3, [r4, #0]
 800caae:	bd38      	pop	{r3, r4, r5, pc}
 800cab0:	20001b10 	.word	0x20001b10

0800cab4 <_read_r>:
 800cab4:	b538      	push	{r3, r4, r5, lr}
 800cab6:	4d07      	ldr	r5, [pc, #28]	@ (800cad4 <_read_r+0x20>)
 800cab8:	4604      	mov	r4, r0
 800caba:	4608      	mov	r0, r1
 800cabc:	4611      	mov	r1, r2
 800cabe:	2200      	movs	r2, #0
 800cac0:	602a      	str	r2, [r5, #0]
 800cac2:	461a      	mov	r2, r3
 800cac4:	f7f5 f8a3 	bl	8001c0e <_read>
 800cac8:	1c43      	adds	r3, r0, #1
 800caca:	d102      	bne.n	800cad2 <_read_r+0x1e>
 800cacc:	682b      	ldr	r3, [r5, #0]
 800cace:	b103      	cbz	r3, 800cad2 <_read_r+0x1e>
 800cad0:	6023      	str	r3, [r4, #0]
 800cad2:	bd38      	pop	{r3, r4, r5, pc}
 800cad4:	20001b10 	.word	0x20001b10

0800cad8 <_sbrk_r>:
 800cad8:	b538      	push	{r3, r4, r5, lr}
 800cada:	4d06      	ldr	r5, [pc, #24]	@ (800caf4 <_sbrk_r+0x1c>)
 800cadc:	2300      	movs	r3, #0
 800cade:	4604      	mov	r4, r0
 800cae0:	4608      	mov	r0, r1
 800cae2:	602b      	str	r3, [r5, #0]
 800cae4:	f7f5 f900 	bl	8001ce8 <_sbrk>
 800cae8:	1c43      	adds	r3, r0, #1
 800caea:	d102      	bne.n	800caf2 <_sbrk_r+0x1a>
 800caec:	682b      	ldr	r3, [r5, #0]
 800caee:	b103      	cbz	r3, 800caf2 <_sbrk_r+0x1a>
 800caf0:	6023      	str	r3, [r4, #0]
 800caf2:	bd38      	pop	{r3, r4, r5, pc}
 800caf4:	20001b10 	.word	0x20001b10

0800caf8 <_write_r>:
 800caf8:	b538      	push	{r3, r4, r5, lr}
 800cafa:	4d07      	ldr	r5, [pc, #28]	@ (800cb18 <_write_r+0x20>)
 800cafc:	4604      	mov	r4, r0
 800cafe:	4608      	mov	r0, r1
 800cb00:	4611      	mov	r1, r2
 800cb02:	2200      	movs	r2, #0
 800cb04:	602a      	str	r2, [r5, #0]
 800cb06:	461a      	mov	r2, r3
 800cb08:	f7f5 f89e 	bl	8001c48 <_write>
 800cb0c:	1c43      	adds	r3, r0, #1
 800cb0e:	d102      	bne.n	800cb16 <_write_r+0x1e>
 800cb10:	682b      	ldr	r3, [r5, #0]
 800cb12:	b103      	cbz	r3, 800cb16 <_write_r+0x1e>
 800cb14:	6023      	str	r3, [r4, #0]
 800cb16:	bd38      	pop	{r3, r4, r5, pc}
 800cb18:	20001b10 	.word	0x20001b10

0800cb1c <__errno>:
 800cb1c:	4b01      	ldr	r3, [pc, #4]	@ (800cb24 <__errno+0x8>)
 800cb1e:	6818      	ldr	r0, [r3, #0]
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop
 800cb24:	20000018 	.word	0x20000018

0800cb28 <__libc_init_array>:
 800cb28:	b570      	push	{r4, r5, r6, lr}
 800cb2a:	4d0d      	ldr	r5, [pc, #52]	@ (800cb60 <__libc_init_array+0x38>)
 800cb2c:	4c0d      	ldr	r4, [pc, #52]	@ (800cb64 <__libc_init_array+0x3c>)
 800cb2e:	1b64      	subs	r4, r4, r5
 800cb30:	10a4      	asrs	r4, r4, #2
 800cb32:	2600      	movs	r6, #0
 800cb34:	42a6      	cmp	r6, r4
 800cb36:	d109      	bne.n	800cb4c <__libc_init_array+0x24>
 800cb38:	4d0b      	ldr	r5, [pc, #44]	@ (800cb68 <__libc_init_array+0x40>)
 800cb3a:	4c0c      	ldr	r4, [pc, #48]	@ (800cb6c <__libc_init_array+0x44>)
 800cb3c:	f003 fab2 	bl	80100a4 <_init>
 800cb40:	1b64      	subs	r4, r4, r5
 800cb42:	10a4      	asrs	r4, r4, #2
 800cb44:	2600      	movs	r6, #0
 800cb46:	42a6      	cmp	r6, r4
 800cb48:	d105      	bne.n	800cb56 <__libc_init_array+0x2e>
 800cb4a:	bd70      	pop	{r4, r5, r6, pc}
 800cb4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb50:	4798      	blx	r3
 800cb52:	3601      	adds	r6, #1
 800cb54:	e7ee      	b.n	800cb34 <__libc_init_array+0xc>
 800cb56:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb5a:	4798      	blx	r3
 800cb5c:	3601      	adds	r6, #1
 800cb5e:	e7f2      	b.n	800cb46 <__libc_init_array+0x1e>
 800cb60:	080108bc 	.word	0x080108bc
 800cb64:	080108bc 	.word	0x080108bc
 800cb68:	080108bc 	.word	0x080108bc
 800cb6c:	080108c0 	.word	0x080108c0

0800cb70 <__retarget_lock_init_recursive>:
 800cb70:	4770      	bx	lr

0800cb72 <__retarget_lock_acquire_recursive>:
 800cb72:	4770      	bx	lr

0800cb74 <__retarget_lock_release_recursive>:
 800cb74:	4770      	bx	lr

0800cb76 <memcpy>:
 800cb76:	440a      	add	r2, r1
 800cb78:	4291      	cmp	r1, r2
 800cb7a:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb7e:	d100      	bne.n	800cb82 <memcpy+0xc>
 800cb80:	4770      	bx	lr
 800cb82:	b510      	push	{r4, lr}
 800cb84:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb88:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb8c:	4291      	cmp	r1, r2
 800cb8e:	d1f9      	bne.n	800cb84 <memcpy+0xe>
 800cb90:	bd10      	pop	{r4, pc}
	...

0800cb94 <nanf>:
 800cb94:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cb9c <nanf+0x8>
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop
 800cb9c:	7fc00000 	.word	0x7fc00000

0800cba0 <quorem>:
 800cba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba4:	6903      	ldr	r3, [r0, #16]
 800cba6:	690c      	ldr	r4, [r1, #16]
 800cba8:	42a3      	cmp	r3, r4
 800cbaa:	4607      	mov	r7, r0
 800cbac:	db7e      	blt.n	800ccac <quorem+0x10c>
 800cbae:	3c01      	subs	r4, #1
 800cbb0:	f101 0814 	add.w	r8, r1, #20
 800cbb4:	00a3      	lsls	r3, r4, #2
 800cbb6:	f100 0514 	add.w	r5, r0, #20
 800cbba:	9300      	str	r3, [sp, #0]
 800cbbc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbc0:	9301      	str	r3, [sp, #4]
 800cbc2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cbc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cbd2:	fbb2 f6f3 	udiv	r6, r2, r3
 800cbd6:	d32e      	bcc.n	800cc36 <quorem+0x96>
 800cbd8:	f04f 0a00 	mov.w	sl, #0
 800cbdc:	46c4      	mov	ip, r8
 800cbde:	46ae      	mov	lr, r5
 800cbe0:	46d3      	mov	fp, sl
 800cbe2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cbe6:	b298      	uxth	r0, r3
 800cbe8:	fb06 a000 	mla	r0, r6, r0, sl
 800cbec:	0c02      	lsrs	r2, r0, #16
 800cbee:	0c1b      	lsrs	r3, r3, #16
 800cbf0:	fb06 2303 	mla	r3, r6, r3, r2
 800cbf4:	f8de 2000 	ldr.w	r2, [lr]
 800cbf8:	b280      	uxth	r0, r0
 800cbfa:	b292      	uxth	r2, r2
 800cbfc:	1a12      	subs	r2, r2, r0
 800cbfe:	445a      	add	r2, fp
 800cc00:	f8de 0000 	ldr.w	r0, [lr]
 800cc04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cc0e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cc12:	b292      	uxth	r2, r2
 800cc14:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cc18:	45e1      	cmp	r9, ip
 800cc1a:	f84e 2b04 	str.w	r2, [lr], #4
 800cc1e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cc22:	d2de      	bcs.n	800cbe2 <quorem+0x42>
 800cc24:	9b00      	ldr	r3, [sp, #0]
 800cc26:	58eb      	ldr	r3, [r5, r3]
 800cc28:	b92b      	cbnz	r3, 800cc36 <quorem+0x96>
 800cc2a:	9b01      	ldr	r3, [sp, #4]
 800cc2c:	3b04      	subs	r3, #4
 800cc2e:	429d      	cmp	r5, r3
 800cc30:	461a      	mov	r2, r3
 800cc32:	d32f      	bcc.n	800cc94 <quorem+0xf4>
 800cc34:	613c      	str	r4, [r7, #16]
 800cc36:	4638      	mov	r0, r7
 800cc38:	f001 f910 	bl	800de5c <__mcmp>
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	db25      	blt.n	800cc8c <quorem+0xec>
 800cc40:	4629      	mov	r1, r5
 800cc42:	2000      	movs	r0, #0
 800cc44:	f858 2b04 	ldr.w	r2, [r8], #4
 800cc48:	f8d1 c000 	ldr.w	ip, [r1]
 800cc4c:	fa1f fe82 	uxth.w	lr, r2
 800cc50:	fa1f f38c 	uxth.w	r3, ip
 800cc54:	eba3 030e 	sub.w	r3, r3, lr
 800cc58:	4403      	add	r3, r0
 800cc5a:	0c12      	lsrs	r2, r2, #16
 800cc5c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cc60:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc6a:	45c1      	cmp	r9, r8
 800cc6c:	f841 3b04 	str.w	r3, [r1], #4
 800cc70:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cc74:	d2e6      	bcs.n	800cc44 <quorem+0xa4>
 800cc76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc7e:	b922      	cbnz	r2, 800cc8a <quorem+0xea>
 800cc80:	3b04      	subs	r3, #4
 800cc82:	429d      	cmp	r5, r3
 800cc84:	461a      	mov	r2, r3
 800cc86:	d30b      	bcc.n	800cca0 <quorem+0x100>
 800cc88:	613c      	str	r4, [r7, #16]
 800cc8a:	3601      	adds	r6, #1
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	b003      	add	sp, #12
 800cc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc94:	6812      	ldr	r2, [r2, #0]
 800cc96:	3b04      	subs	r3, #4
 800cc98:	2a00      	cmp	r2, #0
 800cc9a:	d1cb      	bne.n	800cc34 <quorem+0x94>
 800cc9c:	3c01      	subs	r4, #1
 800cc9e:	e7c6      	b.n	800cc2e <quorem+0x8e>
 800cca0:	6812      	ldr	r2, [r2, #0]
 800cca2:	3b04      	subs	r3, #4
 800cca4:	2a00      	cmp	r2, #0
 800cca6:	d1ef      	bne.n	800cc88 <quorem+0xe8>
 800cca8:	3c01      	subs	r4, #1
 800ccaa:	e7ea      	b.n	800cc82 <quorem+0xe2>
 800ccac:	2000      	movs	r0, #0
 800ccae:	e7ee      	b.n	800cc8e <quorem+0xee>

0800ccb0 <_dtoa_r>:
 800ccb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb4:	69c7      	ldr	r7, [r0, #28]
 800ccb6:	b097      	sub	sp, #92	@ 0x5c
 800ccb8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ccbc:	ec55 4b10 	vmov	r4, r5, d0
 800ccc0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ccc2:	9107      	str	r1, [sp, #28]
 800ccc4:	4681      	mov	r9, r0
 800ccc6:	920c      	str	r2, [sp, #48]	@ 0x30
 800ccc8:	9311      	str	r3, [sp, #68]	@ 0x44
 800ccca:	b97f      	cbnz	r7, 800ccec <_dtoa_r+0x3c>
 800cccc:	2010      	movs	r0, #16
 800ccce:	f7fe fe31 	bl	800b934 <malloc>
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	f8c9 001c 	str.w	r0, [r9, #28]
 800ccd8:	b920      	cbnz	r0, 800cce4 <_dtoa_r+0x34>
 800ccda:	4ba9      	ldr	r3, [pc, #676]	@ (800cf80 <_dtoa_r+0x2d0>)
 800ccdc:	21ef      	movs	r1, #239	@ 0xef
 800ccde:	48a9      	ldr	r0, [pc, #676]	@ (800cf84 <_dtoa_r+0x2d4>)
 800cce0:	f002 fd3e 	bl	800f760 <__assert_func>
 800cce4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cce8:	6007      	str	r7, [r0, #0]
 800ccea:	60c7      	str	r7, [r0, #12]
 800ccec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ccf0:	6819      	ldr	r1, [r3, #0]
 800ccf2:	b159      	cbz	r1, 800cd0c <_dtoa_r+0x5c>
 800ccf4:	685a      	ldr	r2, [r3, #4]
 800ccf6:	604a      	str	r2, [r1, #4]
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	4093      	lsls	r3, r2
 800ccfc:	608b      	str	r3, [r1, #8]
 800ccfe:	4648      	mov	r0, r9
 800cd00:	f000 fe30 	bl	800d964 <_Bfree>
 800cd04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	601a      	str	r2, [r3, #0]
 800cd0c:	1e2b      	subs	r3, r5, #0
 800cd0e:	bfb9      	ittee	lt
 800cd10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cd14:	9305      	strlt	r3, [sp, #20]
 800cd16:	2300      	movge	r3, #0
 800cd18:	6033      	strge	r3, [r6, #0]
 800cd1a:	9f05      	ldr	r7, [sp, #20]
 800cd1c:	4b9a      	ldr	r3, [pc, #616]	@ (800cf88 <_dtoa_r+0x2d8>)
 800cd1e:	bfbc      	itt	lt
 800cd20:	2201      	movlt	r2, #1
 800cd22:	6032      	strlt	r2, [r6, #0]
 800cd24:	43bb      	bics	r3, r7
 800cd26:	d112      	bne.n	800cd4e <_dtoa_r+0x9e>
 800cd28:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cd2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cd2e:	6013      	str	r3, [r2, #0]
 800cd30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd34:	4323      	orrs	r3, r4
 800cd36:	f000 855a 	beq.w	800d7ee <_dtoa_r+0xb3e>
 800cd3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cd3c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800cf9c <_dtoa_r+0x2ec>
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f000 855c 	beq.w	800d7fe <_dtoa_r+0xb4e>
 800cd46:	f10a 0303 	add.w	r3, sl, #3
 800cd4a:	f000 bd56 	b.w	800d7fa <_dtoa_r+0xb4a>
 800cd4e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800cd52:	2200      	movs	r2, #0
 800cd54:	ec51 0b17 	vmov	r0, r1, d7
 800cd58:	2300      	movs	r3, #0
 800cd5a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800cd5e:	f7f3 feb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd62:	4680      	mov	r8, r0
 800cd64:	b158      	cbz	r0, 800cd7e <_dtoa_r+0xce>
 800cd66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cd68:	2301      	movs	r3, #1
 800cd6a:	6013      	str	r3, [r2, #0]
 800cd6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cd6e:	b113      	cbz	r3, 800cd76 <_dtoa_r+0xc6>
 800cd70:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cd72:	4b86      	ldr	r3, [pc, #536]	@ (800cf8c <_dtoa_r+0x2dc>)
 800cd74:	6013      	str	r3, [r2, #0]
 800cd76:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800cfa0 <_dtoa_r+0x2f0>
 800cd7a:	f000 bd40 	b.w	800d7fe <_dtoa_r+0xb4e>
 800cd7e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800cd82:	aa14      	add	r2, sp, #80	@ 0x50
 800cd84:	a915      	add	r1, sp, #84	@ 0x54
 800cd86:	4648      	mov	r0, r9
 800cd88:	f001 f988 	bl	800e09c <__d2b>
 800cd8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cd90:	9002      	str	r0, [sp, #8]
 800cd92:	2e00      	cmp	r6, #0
 800cd94:	d078      	beq.n	800ce88 <_dtoa_r+0x1d8>
 800cd96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd98:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800cd9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cda0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cda4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cda8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cdac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	4b76      	ldr	r3, [pc, #472]	@ (800cf90 <_dtoa_r+0x2e0>)
 800cdb6:	f7f3 fa67 	bl	8000288 <__aeabi_dsub>
 800cdba:	a36b      	add	r3, pc, #428	@ (adr r3, 800cf68 <_dtoa_r+0x2b8>)
 800cdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc0:	f7f3 fc1a 	bl	80005f8 <__aeabi_dmul>
 800cdc4:	a36a      	add	r3, pc, #424	@ (adr r3, 800cf70 <_dtoa_r+0x2c0>)
 800cdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdca:	f7f3 fa5f 	bl	800028c <__adddf3>
 800cdce:	4604      	mov	r4, r0
 800cdd0:	4630      	mov	r0, r6
 800cdd2:	460d      	mov	r5, r1
 800cdd4:	f7f3 fba6 	bl	8000524 <__aeabi_i2d>
 800cdd8:	a367      	add	r3, pc, #412	@ (adr r3, 800cf78 <_dtoa_r+0x2c8>)
 800cdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdde:	f7f3 fc0b 	bl	80005f8 <__aeabi_dmul>
 800cde2:	4602      	mov	r2, r0
 800cde4:	460b      	mov	r3, r1
 800cde6:	4620      	mov	r0, r4
 800cde8:	4629      	mov	r1, r5
 800cdea:	f7f3 fa4f 	bl	800028c <__adddf3>
 800cdee:	4604      	mov	r4, r0
 800cdf0:	460d      	mov	r5, r1
 800cdf2:	f7f3 feb1 	bl	8000b58 <__aeabi_d2iz>
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	4607      	mov	r7, r0
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	4629      	mov	r1, r5
 800ce00:	f7f3 fe6c 	bl	8000adc <__aeabi_dcmplt>
 800ce04:	b140      	cbz	r0, 800ce18 <_dtoa_r+0x168>
 800ce06:	4638      	mov	r0, r7
 800ce08:	f7f3 fb8c 	bl	8000524 <__aeabi_i2d>
 800ce0c:	4622      	mov	r2, r4
 800ce0e:	462b      	mov	r3, r5
 800ce10:	f7f3 fe5a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce14:	b900      	cbnz	r0, 800ce18 <_dtoa_r+0x168>
 800ce16:	3f01      	subs	r7, #1
 800ce18:	2f16      	cmp	r7, #22
 800ce1a:	d852      	bhi.n	800cec2 <_dtoa_r+0x212>
 800ce1c:	4b5d      	ldr	r3, [pc, #372]	@ (800cf94 <_dtoa_r+0x2e4>)
 800ce1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ce22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ce2a:	f7f3 fe57 	bl	8000adc <__aeabi_dcmplt>
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	d049      	beq.n	800cec6 <_dtoa_r+0x216>
 800ce32:	3f01      	subs	r7, #1
 800ce34:	2300      	movs	r3, #0
 800ce36:	9310      	str	r3, [sp, #64]	@ 0x40
 800ce38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ce3a:	1b9b      	subs	r3, r3, r6
 800ce3c:	1e5a      	subs	r2, r3, #1
 800ce3e:	bf45      	ittet	mi
 800ce40:	f1c3 0301 	rsbmi	r3, r3, #1
 800ce44:	9300      	strmi	r3, [sp, #0]
 800ce46:	2300      	movpl	r3, #0
 800ce48:	2300      	movmi	r3, #0
 800ce4a:	9206      	str	r2, [sp, #24]
 800ce4c:	bf54      	ite	pl
 800ce4e:	9300      	strpl	r3, [sp, #0]
 800ce50:	9306      	strmi	r3, [sp, #24]
 800ce52:	2f00      	cmp	r7, #0
 800ce54:	db39      	blt.n	800ceca <_dtoa_r+0x21a>
 800ce56:	9b06      	ldr	r3, [sp, #24]
 800ce58:	970d      	str	r7, [sp, #52]	@ 0x34
 800ce5a:	443b      	add	r3, r7
 800ce5c:	9306      	str	r3, [sp, #24]
 800ce5e:	2300      	movs	r3, #0
 800ce60:	9308      	str	r3, [sp, #32]
 800ce62:	9b07      	ldr	r3, [sp, #28]
 800ce64:	2b09      	cmp	r3, #9
 800ce66:	d863      	bhi.n	800cf30 <_dtoa_r+0x280>
 800ce68:	2b05      	cmp	r3, #5
 800ce6a:	bfc4      	itt	gt
 800ce6c:	3b04      	subgt	r3, #4
 800ce6e:	9307      	strgt	r3, [sp, #28]
 800ce70:	9b07      	ldr	r3, [sp, #28]
 800ce72:	f1a3 0302 	sub.w	r3, r3, #2
 800ce76:	bfcc      	ite	gt
 800ce78:	2400      	movgt	r4, #0
 800ce7a:	2401      	movle	r4, #1
 800ce7c:	2b03      	cmp	r3, #3
 800ce7e:	d863      	bhi.n	800cf48 <_dtoa_r+0x298>
 800ce80:	e8df f003 	tbb	[pc, r3]
 800ce84:	2b375452 	.word	0x2b375452
 800ce88:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ce8c:	441e      	add	r6, r3
 800ce8e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ce92:	2b20      	cmp	r3, #32
 800ce94:	bfc1      	itttt	gt
 800ce96:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ce9a:	409f      	lslgt	r7, r3
 800ce9c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cea0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cea4:	bfd6      	itet	le
 800cea6:	f1c3 0320 	rsble	r3, r3, #32
 800ceaa:	ea47 0003 	orrgt.w	r0, r7, r3
 800ceae:	fa04 f003 	lslle.w	r0, r4, r3
 800ceb2:	f7f3 fb27 	bl	8000504 <__aeabi_ui2d>
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cebc:	3e01      	subs	r6, #1
 800cebe:	9212      	str	r2, [sp, #72]	@ 0x48
 800cec0:	e776      	b.n	800cdb0 <_dtoa_r+0x100>
 800cec2:	2301      	movs	r3, #1
 800cec4:	e7b7      	b.n	800ce36 <_dtoa_r+0x186>
 800cec6:	9010      	str	r0, [sp, #64]	@ 0x40
 800cec8:	e7b6      	b.n	800ce38 <_dtoa_r+0x188>
 800ceca:	9b00      	ldr	r3, [sp, #0]
 800cecc:	1bdb      	subs	r3, r3, r7
 800cece:	9300      	str	r3, [sp, #0]
 800ced0:	427b      	negs	r3, r7
 800ced2:	9308      	str	r3, [sp, #32]
 800ced4:	2300      	movs	r3, #0
 800ced6:	930d      	str	r3, [sp, #52]	@ 0x34
 800ced8:	e7c3      	b.n	800ce62 <_dtoa_r+0x1b2>
 800ceda:	2301      	movs	r3, #1
 800cedc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cede:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cee0:	eb07 0b03 	add.w	fp, r7, r3
 800cee4:	f10b 0301 	add.w	r3, fp, #1
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	9303      	str	r3, [sp, #12]
 800ceec:	bfb8      	it	lt
 800ceee:	2301      	movlt	r3, #1
 800cef0:	e006      	b.n	800cf00 <_dtoa_r+0x250>
 800cef2:	2301      	movs	r3, #1
 800cef4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cef6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	dd28      	ble.n	800cf4e <_dtoa_r+0x29e>
 800cefc:	469b      	mov	fp, r3
 800cefe:	9303      	str	r3, [sp, #12]
 800cf00:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800cf04:	2100      	movs	r1, #0
 800cf06:	2204      	movs	r2, #4
 800cf08:	f102 0514 	add.w	r5, r2, #20
 800cf0c:	429d      	cmp	r5, r3
 800cf0e:	d926      	bls.n	800cf5e <_dtoa_r+0x2ae>
 800cf10:	6041      	str	r1, [r0, #4]
 800cf12:	4648      	mov	r0, r9
 800cf14:	f000 fce6 	bl	800d8e4 <_Balloc>
 800cf18:	4682      	mov	sl, r0
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	d142      	bne.n	800cfa4 <_dtoa_r+0x2f4>
 800cf1e:	4b1e      	ldr	r3, [pc, #120]	@ (800cf98 <_dtoa_r+0x2e8>)
 800cf20:	4602      	mov	r2, r0
 800cf22:	f240 11af 	movw	r1, #431	@ 0x1af
 800cf26:	e6da      	b.n	800ccde <_dtoa_r+0x2e>
 800cf28:	2300      	movs	r3, #0
 800cf2a:	e7e3      	b.n	800cef4 <_dtoa_r+0x244>
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	e7d5      	b.n	800cedc <_dtoa_r+0x22c>
 800cf30:	2401      	movs	r4, #1
 800cf32:	2300      	movs	r3, #0
 800cf34:	9307      	str	r3, [sp, #28]
 800cf36:	9409      	str	r4, [sp, #36]	@ 0x24
 800cf38:	f04f 3bff 	mov.w	fp, #4294967295
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	f8cd b00c 	str.w	fp, [sp, #12]
 800cf42:	2312      	movs	r3, #18
 800cf44:	920c      	str	r2, [sp, #48]	@ 0x30
 800cf46:	e7db      	b.n	800cf00 <_dtoa_r+0x250>
 800cf48:	2301      	movs	r3, #1
 800cf4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf4c:	e7f4      	b.n	800cf38 <_dtoa_r+0x288>
 800cf4e:	f04f 0b01 	mov.w	fp, #1
 800cf52:	f8cd b00c 	str.w	fp, [sp, #12]
 800cf56:	465b      	mov	r3, fp
 800cf58:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800cf5c:	e7d0      	b.n	800cf00 <_dtoa_r+0x250>
 800cf5e:	3101      	adds	r1, #1
 800cf60:	0052      	lsls	r2, r2, #1
 800cf62:	e7d1      	b.n	800cf08 <_dtoa_r+0x258>
 800cf64:	f3af 8000 	nop.w
 800cf68:	636f4361 	.word	0x636f4361
 800cf6c:	3fd287a7 	.word	0x3fd287a7
 800cf70:	8b60c8b3 	.word	0x8b60c8b3
 800cf74:	3fc68a28 	.word	0x3fc68a28
 800cf78:	509f79fb 	.word	0x509f79fb
 800cf7c:	3fd34413 	.word	0x3fd34413
 800cf80:	080104ce 	.word	0x080104ce
 800cf84:	080104e5 	.word	0x080104e5
 800cf88:	7ff00000 	.word	0x7ff00000
 800cf8c:	08010499 	.word	0x08010499
 800cf90:	3ff80000 	.word	0x3ff80000
 800cf94:	08010698 	.word	0x08010698
 800cf98:	0801053d 	.word	0x0801053d
 800cf9c:	080104ca 	.word	0x080104ca
 800cfa0:	08010498 	.word	0x08010498
 800cfa4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cfa8:	6018      	str	r0, [r3, #0]
 800cfaa:	9b03      	ldr	r3, [sp, #12]
 800cfac:	2b0e      	cmp	r3, #14
 800cfae:	f200 80a1 	bhi.w	800d0f4 <_dtoa_r+0x444>
 800cfb2:	2c00      	cmp	r4, #0
 800cfb4:	f000 809e 	beq.w	800d0f4 <_dtoa_r+0x444>
 800cfb8:	2f00      	cmp	r7, #0
 800cfba:	dd33      	ble.n	800d024 <_dtoa_r+0x374>
 800cfbc:	4b9c      	ldr	r3, [pc, #624]	@ (800d230 <_dtoa_r+0x580>)
 800cfbe:	f007 020f 	and.w	r2, r7, #15
 800cfc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfc6:	ed93 7b00 	vldr	d7, [r3]
 800cfca:	05f8      	lsls	r0, r7, #23
 800cfcc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800cfd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cfd4:	d516      	bpl.n	800d004 <_dtoa_r+0x354>
 800cfd6:	4b97      	ldr	r3, [pc, #604]	@ (800d234 <_dtoa_r+0x584>)
 800cfd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cfdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cfe0:	f7f3 fc34 	bl	800084c <__aeabi_ddiv>
 800cfe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cfe8:	f004 040f 	and.w	r4, r4, #15
 800cfec:	2603      	movs	r6, #3
 800cfee:	4d91      	ldr	r5, [pc, #580]	@ (800d234 <_dtoa_r+0x584>)
 800cff0:	b954      	cbnz	r4, 800d008 <_dtoa_r+0x358>
 800cff2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cff6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cffa:	f7f3 fc27 	bl	800084c <__aeabi_ddiv>
 800cffe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d002:	e028      	b.n	800d056 <_dtoa_r+0x3a6>
 800d004:	2602      	movs	r6, #2
 800d006:	e7f2      	b.n	800cfee <_dtoa_r+0x33e>
 800d008:	07e1      	lsls	r1, r4, #31
 800d00a:	d508      	bpl.n	800d01e <_dtoa_r+0x36e>
 800d00c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d010:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d014:	f7f3 faf0 	bl	80005f8 <__aeabi_dmul>
 800d018:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d01c:	3601      	adds	r6, #1
 800d01e:	1064      	asrs	r4, r4, #1
 800d020:	3508      	adds	r5, #8
 800d022:	e7e5      	b.n	800cff0 <_dtoa_r+0x340>
 800d024:	f000 80af 	beq.w	800d186 <_dtoa_r+0x4d6>
 800d028:	427c      	negs	r4, r7
 800d02a:	4b81      	ldr	r3, [pc, #516]	@ (800d230 <_dtoa_r+0x580>)
 800d02c:	4d81      	ldr	r5, [pc, #516]	@ (800d234 <_dtoa_r+0x584>)
 800d02e:	f004 020f 	and.w	r2, r4, #15
 800d032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d03e:	f7f3 fadb 	bl	80005f8 <__aeabi_dmul>
 800d042:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d046:	1124      	asrs	r4, r4, #4
 800d048:	2300      	movs	r3, #0
 800d04a:	2602      	movs	r6, #2
 800d04c:	2c00      	cmp	r4, #0
 800d04e:	f040 808f 	bne.w	800d170 <_dtoa_r+0x4c0>
 800d052:	2b00      	cmp	r3, #0
 800d054:	d1d3      	bne.n	800cffe <_dtoa_r+0x34e>
 800d056:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d058:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	f000 8094 	beq.w	800d18a <_dtoa_r+0x4da>
 800d062:	4b75      	ldr	r3, [pc, #468]	@ (800d238 <_dtoa_r+0x588>)
 800d064:	2200      	movs	r2, #0
 800d066:	4620      	mov	r0, r4
 800d068:	4629      	mov	r1, r5
 800d06a:	f7f3 fd37 	bl	8000adc <__aeabi_dcmplt>
 800d06e:	2800      	cmp	r0, #0
 800d070:	f000 808b 	beq.w	800d18a <_dtoa_r+0x4da>
 800d074:	9b03      	ldr	r3, [sp, #12]
 800d076:	2b00      	cmp	r3, #0
 800d078:	f000 8087 	beq.w	800d18a <_dtoa_r+0x4da>
 800d07c:	f1bb 0f00 	cmp.w	fp, #0
 800d080:	dd34      	ble.n	800d0ec <_dtoa_r+0x43c>
 800d082:	4620      	mov	r0, r4
 800d084:	4b6d      	ldr	r3, [pc, #436]	@ (800d23c <_dtoa_r+0x58c>)
 800d086:	2200      	movs	r2, #0
 800d088:	4629      	mov	r1, r5
 800d08a:	f7f3 fab5 	bl	80005f8 <__aeabi_dmul>
 800d08e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d092:	f107 38ff 	add.w	r8, r7, #4294967295
 800d096:	3601      	adds	r6, #1
 800d098:	465c      	mov	r4, fp
 800d09a:	4630      	mov	r0, r6
 800d09c:	f7f3 fa42 	bl	8000524 <__aeabi_i2d>
 800d0a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0a4:	f7f3 faa8 	bl	80005f8 <__aeabi_dmul>
 800d0a8:	4b65      	ldr	r3, [pc, #404]	@ (800d240 <_dtoa_r+0x590>)
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f7f3 f8ee 	bl	800028c <__adddf3>
 800d0b0:	4605      	mov	r5, r0
 800d0b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d0b6:	2c00      	cmp	r4, #0
 800d0b8:	d16a      	bne.n	800d190 <_dtoa_r+0x4e0>
 800d0ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d0be:	4b61      	ldr	r3, [pc, #388]	@ (800d244 <_dtoa_r+0x594>)
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	f7f3 f8e1 	bl	8000288 <__aeabi_dsub>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d0ce:	462a      	mov	r2, r5
 800d0d0:	4633      	mov	r3, r6
 800d0d2:	f7f3 fd21 	bl	8000b18 <__aeabi_dcmpgt>
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	f040 8298 	bne.w	800d60c <_dtoa_r+0x95c>
 800d0dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d0e0:	462a      	mov	r2, r5
 800d0e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d0e6:	f7f3 fcf9 	bl	8000adc <__aeabi_dcmplt>
 800d0ea:	bb38      	cbnz	r0, 800d13c <_dtoa_r+0x48c>
 800d0ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d0f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d0f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	f2c0 8157 	blt.w	800d3aa <_dtoa_r+0x6fa>
 800d0fc:	2f0e      	cmp	r7, #14
 800d0fe:	f300 8154 	bgt.w	800d3aa <_dtoa_r+0x6fa>
 800d102:	4b4b      	ldr	r3, [pc, #300]	@ (800d230 <_dtoa_r+0x580>)
 800d104:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d108:	ed93 7b00 	vldr	d7, [r3]
 800d10c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d10e:	2b00      	cmp	r3, #0
 800d110:	ed8d 7b00 	vstr	d7, [sp]
 800d114:	f280 80e5 	bge.w	800d2e2 <_dtoa_r+0x632>
 800d118:	9b03      	ldr	r3, [sp, #12]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	f300 80e1 	bgt.w	800d2e2 <_dtoa_r+0x632>
 800d120:	d10c      	bne.n	800d13c <_dtoa_r+0x48c>
 800d122:	4b48      	ldr	r3, [pc, #288]	@ (800d244 <_dtoa_r+0x594>)
 800d124:	2200      	movs	r2, #0
 800d126:	ec51 0b17 	vmov	r0, r1, d7
 800d12a:	f7f3 fa65 	bl	80005f8 <__aeabi_dmul>
 800d12e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d132:	f7f3 fce7 	bl	8000b04 <__aeabi_dcmpge>
 800d136:	2800      	cmp	r0, #0
 800d138:	f000 8266 	beq.w	800d608 <_dtoa_r+0x958>
 800d13c:	2400      	movs	r4, #0
 800d13e:	4625      	mov	r5, r4
 800d140:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d142:	4656      	mov	r6, sl
 800d144:	ea6f 0803 	mvn.w	r8, r3
 800d148:	2700      	movs	r7, #0
 800d14a:	4621      	mov	r1, r4
 800d14c:	4648      	mov	r0, r9
 800d14e:	f000 fc09 	bl	800d964 <_Bfree>
 800d152:	2d00      	cmp	r5, #0
 800d154:	f000 80bd 	beq.w	800d2d2 <_dtoa_r+0x622>
 800d158:	b12f      	cbz	r7, 800d166 <_dtoa_r+0x4b6>
 800d15a:	42af      	cmp	r7, r5
 800d15c:	d003      	beq.n	800d166 <_dtoa_r+0x4b6>
 800d15e:	4639      	mov	r1, r7
 800d160:	4648      	mov	r0, r9
 800d162:	f000 fbff 	bl	800d964 <_Bfree>
 800d166:	4629      	mov	r1, r5
 800d168:	4648      	mov	r0, r9
 800d16a:	f000 fbfb 	bl	800d964 <_Bfree>
 800d16e:	e0b0      	b.n	800d2d2 <_dtoa_r+0x622>
 800d170:	07e2      	lsls	r2, r4, #31
 800d172:	d505      	bpl.n	800d180 <_dtoa_r+0x4d0>
 800d174:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d178:	f7f3 fa3e 	bl	80005f8 <__aeabi_dmul>
 800d17c:	3601      	adds	r6, #1
 800d17e:	2301      	movs	r3, #1
 800d180:	1064      	asrs	r4, r4, #1
 800d182:	3508      	adds	r5, #8
 800d184:	e762      	b.n	800d04c <_dtoa_r+0x39c>
 800d186:	2602      	movs	r6, #2
 800d188:	e765      	b.n	800d056 <_dtoa_r+0x3a6>
 800d18a:	9c03      	ldr	r4, [sp, #12]
 800d18c:	46b8      	mov	r8, r7
 800d18e:	e784      	b.n	800d09a <_dtoa_r+0x3ea>
 800d190:	4b27      	ldr	r3, [pc, #156]	@ (800d230 <_dtoa_r+0x580>)
 800d192:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d194:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d198:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d19c:	4454      	add	r4, sl
 800d19e:	2900      	cmp	r1, #0
 800d1a0:	d054      	beq.n	800d24c <_dtoa_r+0x59c>
 800d1a2:	4929      	ldr	r1, [pc, #164]	@ (800d248 <_dtoa_r+0x598>)
 800d1a4:	2000      	movs	r0, #0
 800d1a6:	f7f3 fb51 	bl	800084c <__aeabi_ddiv>
 800d1aa:	4633      	mov	r3, r6
 800d1ac:	462a      	mov	r2, r5
 800d1ae:	f7f3 f86b 	bl	8000288 <__aeabi_dsub>
 800d1b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d1b6:	4656      	mov	r6, sl
 800d1b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d1bc:	f7f3 fccc 	bl	8000b58 <__aeabi_d2iz>
 800d1c0:	4605      	mov	r5, r0
 800d1c2:	f7f3 f9af 	bl	8000524 <__aeabi_i2d>
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d1ce:	f7f3 f85b 	bl	8000288 <__aeabi_dsub>
 800d1d2:	3530      	adds	r5, #48	@ 0x30
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d1dc:	f806 5b01 	strb.w	r5, [r6], #1
 800d1e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d1e4:	f7f3 fc7a 	bl	8000adc <__aeabi_dcmplt>
 800d1e8:	2800      	cmp	r0, #0
 800d1ea:	d172      	bne.n	800d2d2 <_dtoa_r+0x622>
 800d1ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1f0:	4911      	ldr	r1, [pc, #68]	@ (800d238 <_dtoa_r+0x588>)
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	f7f3 f848 	bl	8000288 <__aeabi_dsub>
 800d1f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d1fc:	f7f3 fc6e 	bl	8000adc <__aeabi_dcmplt>
 800d200:	2800      	cmp	r0, #0
 800d202:	f040 80b4 	bne.w	800d36e <_dtoa_r+0x6be>
 800d206:	42a6      	cmp	r6, r4
 800d208:	f43f af70 	beq.w	800d0ec <_dtoa_r+0x43c>
 800d20c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d210:	4b0a      	ldr	r3, [pc, #40]	@ (800d23c <_dtoa_r+0x58c>)
 800d212:	2200      	movs	r2, #0
 800d214:	f7f3 f9f0 	bl	80005f8 <__aeabi_dmul>
 800d218:	4b08      	ldr	r3, [pc, #32]	@ (800d23c <_dtoa_r+0x58c>)
 800d21a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d21e:	2200      	movs	r2, #0
 800d220:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d224:	f7f3 f9e8 	bl	80005f8 <__aeabi_dmul>
 800d228:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d22c:	e7c4      	b.n	800d1b8 <_dtoa_r+0x508>
 800d22e:	bf00      	nop
 800d230:	08010698 	.word	0x08010698
 800d234:	08010670 	.word	0x08010670
 800d238:	3ff00000 	.word	0x3ff00000
 800d23c:	40240000 	.word	0x40240000
 800d240:	401c0000 	.word	0x401c0000
 800d244:	40140000 	.word	0x40140000
 800d248:	3fe00000 	.word	0x3fe00000
 800d24c:	4631      	mov	r1, r6
 800d24e:	4628      	mov	r0, r5
 800d250:	f7f3 f9d2 	bl	80005f8 <__aeabi_dmul>
 800d254:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d258:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d25a:	4656      	mov	r6, sl
 800d25c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d260:	f7f3 fc7a 	bl	8000b58 <__aeabi_d2iz>
 800d264:	4605      	mov	r5, r0
 800d266:	f7f3 f95d 	bl	8000524 <__aeabi_i2d>
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d272:	f7f3 f809 	bl	8000288 <__aeabi_dsub>
 800d276:	3530      	adds	r5, #48	@ 0x30
 800d278:	f806 5b01 	strb.w	r5, [r6], #1
 800d27c:	4602      	mov	r2, r0
 800d27e:	460b      	mov	r3, r1
 800d280:	42a6      	cmp	r6, r4
 800d282:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d286:	f04f 0200 	mov.w	r2, #0
 800d28a:	d124      	bne.n	800d2d6 <_dtoa_r+0x626>
 800d28c:	4baf      	ldr	r3, [pc, #700]	@ (800d54c <_dtoa_r+0x89c>)
 800d28e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d292:	f7f2 fffb 	bl	800028c <__adddf3>
 800d296:	4602      	mov	r2, r0
 800d298:	460b      	mov	r3, r1
 800d29a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d29e:	f7f3 fc3b 	bl	8000b18 <__aeabi_dcmpgt>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	d163      	bne.n	800d36e <_dtoa_r+0x6be>
 800d2a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d2aa:	49a8      	ldr	r1, [pc, #672]	@ (800d54c <_dtoa_r+0x89c>)
 800d2ac:	2000      	movs	r0, #0
 800d2ae:	f7f2 ffeb 	bl	8000288 <__aeabi_dsub>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d2ba:	f7f3 fc0f 	bl	8000adc <__aeabi_dcmplt>
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	f43f af14 	beq.w	800d0ec <_dtoa_r+0x43c>
 800d2c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d2c6:	1e73      	subs	r3, r6, #1
 800d2c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d2ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d2ce:	2b30      	cmp	r3, #48	@ 0x30
 800d2d0:	d0f8      	beq.n	800d2c4 <_dtoa_r+0x614>
 800d2d2:	4647      	mov	r7, r8
 800d2d4:	e03b      	b.n	800d34e <_dtoa_r+0x69e>
 800d2d6:	4b9e      	ldr	r3, [pc, #632]	@ (800d550 <_dtoa_r+0x8a0>)
 800d2d8:	f7f3 f98e 	bl	80005f8 <__aeabi_dmul>
 800d2dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d2e0:	e7bc      	b.n	800d25c <_dtoa_r+0x5ac>
 800d2e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d2e6:	4656      	mov	r6, sl
 800d2e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	4629      	mov	r1, r5
 800d2f0:	f7f3 faac 	bl	800084c <__aeabi_ddiv>
 800d2f4:	f7f3 fc30 	bl	8000b58 <__aeabi_d2iz>
 800d2f8:	4680      	mov	r8, r0
 800d2fa:	f7f3 f913 	bl	8000524 <__aeabi_i2d>
 800d2fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d302:	f7f3 f979 	bl	80005f8 <__aeabi_dmul>
 800d306:	4602      	mov	r2, r0
 800d308:	460b      	mov	r3, r1
 800d30a:	4620      	mov	r0, r4
 800d30c:	4629      	mov	r1, r5
 800d30e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d312:	f7f2 ffb9 	bl	8000288 <__aeabi_dsub>
 800d316:	f806 4b01 	strb.w	r4, [r6], #1
 800d31a:	9d03      	ldr	r5, [sp, #12]
 800d31c:	eba6 040a 	sub.w	r4, r6, sl
 800d320:	42a5      	cmp	r5, r4
 800d322:	4602      	mov	r2, r0
 800d324:	460b      	mov	r3, r1
 800d326:	d133      	bne.n	800d390 <_dtoa_r+0x6e0>
 800d328:	f7f2 ffb0 	bl	800028c <__adddf3>
 800d32c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d330:	4604      	mov	r4, r0
 800d332:	460d      	mov	r5, r1
 800d334:	f7f3 fbf0 	bl	8000b18 <__aeabi_dcmpgt>
 800d338:	b9c0      	cbnz	r0, 800d36c <_dtoa_r+0x6bc>
 800d33a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d33e:	4620      	mov	r0, r4
 800d340:	4629      	mov	r1, r5
 800d342:	f7f3 fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d346:	b110      	cbz	r0, 800d34e <_dtoa_r+0x69e>
 800d348:	f018 0f01 	tst.w	r8, #1
 800d34c:	d10e      	bne.n	800d36c <_dtoa_r+0x6bc>
 800d34e:	9902      	ldr	r1, [sp, #8]
 800d350:	4648      	mov	r0, r9
 800d352:	f000 fb07 	bl	800d964 <_Bfree>
 800d356:	2300      	movs	r3, #0
 800d358:	7033      	strb	r3, [r6, #0]
 800d35a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d35c:	3701      	adds	r7, #1
 800d35e:	601f      	str	r7, [r3, #0]
 800d360:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d362:	2b00      	cmp	r3, #0
 800d364:	f000 824b 	beq.w	800d7fe <_dtoa_r+0xb4e>
 800d368:	601e      	str	r6, [r3, #0]
 800d36a:	e248      	b.n	800d7fe <_dtoa_r+0xb4e>
 800d36c:	46b8      	mov	r8, r7
 800d36e:	4633      	mov	r3, r6
 800d370:	461e      	mov	r6, r3
 800d372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d376:	2a39      	cmp	r2, #57	@ 0x39
 800d378:	d106      	bne.n	800d388 <_dtoa_r+0x6d8>
 800d37a:	459a      	cmp	sl, r3
 800d37c:	d1f8      	bne.n	800d370 <_dtoa_r+0x6c0>
 800d37e:	2230      	movs	r2, #48	@ 0x30
 800d380:	f108 0801 	add.w	r8, r8, #1
 800d384:	f88a 2000 	strb.w	r2, [sl]
 800d388:	781a      	ldrb	r2, [r3, #0]
 800d38a:	3201      	adds	r2, #1
 800d38c:	701a      	strb	r2, [r3, #0]
 800d38e:	e7a0      	b.n	800d2d2 <_dtoa_r+0x622>
 800d390:	4b6f      	ldr	r3, [pc, #444]	@ (800d550 <_dtoa_r+0x8a0>)
 800d392:	2200      	movs	r2, #0
 800d394:	f7f3 f930 	bl	80005f8 <__aeabi_dmul>
 800d398:	2200      	movs	r2, #0
 800d39a:	2300      	movs	r3, #0
 800d39c:	4604      	mov	r4, r0
 800d39e:	460d      	mov	r5, r1
 800d3a0:	f7f3 fb92 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3a4:	2800      	cmp	r0, #0
 800d3a6:	d09f      	beq.n	800d2e8 <_dtoa_r+0x638>
 800d3a8:	e7d1      	b.n	800d34e <_dtoa_r+0x69e>
 800d3aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3ac:	2a00      	cmp	r2, #0
 800d3ae:	f000 80ea 	beq.w	800d586 <_dtoa_r+0x8d6>
 800d3b2:	9a07      	ldr	r2, [sp, #28]
 800d3b4:	2a01      	cmp	r2, #1
 800d3b6:	f300 80cd 	bgt.w	800d554 <_dtoa_r+0x8a4>
 800d3ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d3bc:	2a00      	cmp	r2, #0
 800d3be:	f000 80c1 	beq.w	800d544 <_dtoa_r+0x894>
 800d3c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d3c6:	9c08      	ldr	r4, [sp, #32]
 800d3c8:	9e00      	ldr	r6, [sp, #0]
 800d3ca:	9a00      	ldr	r2, [sp, #0]
 800d3cc:	441a      	add	r2, r3
 800d3ce:	9200      	str	r2, [sp, #0]
 800d3d0:	9a06      	ldr	r2, [sp, #24]
 800d3d2:	2101      	movs	r1, #1
 800d3d4:	441a      	add	r2, r3
 800d3d6:	4648      	mov	r0, r9
 800d3d8:	9206      	str	r2, [sp, #24]
 800d3da:	f000 fbc1 	bl	800db60 <__i2b>
 800d3de:	4605      	mov	r5, r0
 800d3e0:	b166      	cbz	r6, 800d3fc <_dtoa_r+0x74c>
 800d3e2:	9b06      	ldr	r3, [sp, #24]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	dd09      	ble.n	800d3fc <_dtoa_r+0x74c>
 800d3e8:	42b3      	cmp	r3, r6
 800d3ea:	9a00      	ldr	r2, [sp, #0]
 800d3ec:	bfa8      	it	ge
 800d3ee:	4633      	movge	r3, r6
 800d3f0:	1ad2      	subs	r2, r2, r3
 800d3f2:	9200      	str	r2, [sp, #0]
 800d3f4:	9a06      	ldr	r2, [sp, #24]
 800d3f6:	1af6      	subs	r6, r6, r3
 800d3f8:	1ad3      	subs	r3, r2, r3
 800d3fa:	9306      	str	r3, [sp, #24]
 800d3fc:	9b08      	ldr	r3, [sp, #32]
 800d3fe:	b30b      	cbz	r3, 800d444 <_dtoa_r+0x794>
 800d400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d402:	2b00      	cmp	r3, #0
 800d404:	f000 80c6 	beq.w	800d594 <_dtoa_r+0x8e4>
 800d408:	2c00      	cmp	r4, #0
 800d40a:	f000 80c0 	beq.w	800d58e <_dtoa_r+0x8de>
 800d40e:	4629      	mov	r1, r5
 800d410:	4622      	mov	r2, r4
 800d412:	4648      	mov	r0, r9
 800d414:	f000 fc5c 	bl	800dcd0 <__pow5mult>
 800d418:	9a02      	ldr	r2, [sp, #8]
 800d41a:	4601      	mov	r1, r0
 800d41c:	4605      	mov	r5, r0
 800d41e:	4648      	mov	r0, r9
 800d420:	f000 fbb4 	bl	800db8c <__multiply>
 800d424:	9902      	ldr	r1, [sp, #8]
 800d426:	4680      	mov	r8, r0
 800d428:	4648      	mov	r0, r9
 800d42a:	f000 fa9b 	bl	800d964 <_Bfree>
 800d42e:	9b08      	ldr	r3, [sp, #32]
 800d430:	1b1b      	subs	r3, r3, r4
 800d432:	9308      	str	r3, [sp, #32]
 800d434:	f000 80b1 	beq.w	800d59a <_dtoa_r+0x8ea>
 800d438:	9a08      	ldr	r2, [sp, #32]
 800d43a:	4641      	mov	r1, r8
 800d43c:	4648      	mov	r0, r9
 800d43e:	f000 fc47 	bl	800dcd0 <__pow5mult>
 800d442:	9002      	str	r0, [sp, #8]
 800d444:	2101      	movs	r1, #1
 800d446:	4648      	mov	r0, r9
 800d448:	f000 fb8a 	bl	800db60 <__i2b>
 800d44c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d44e:	4604      	mov	r4, r0
 800d450:	2b00      	cmp	r3, #0
 800d452:	f000 81d8 	beq.w	800d806 <_dtoa_r+0xb56>
 800d456:	461a      	mov	r2, r3
 800d458:	4601      	mov	r1, r0
 800d45a:	4648      	mov	r0, r9
 800d45c:	f000 fc38 	bl	800dcd0 <__pow5mult>
 800d460:	9b07      	ldr	r3, [sp, #28]
 800d462:	2b01      	cmp	r3, #1
 800d464:	4604      	mov	r4, r0
 800d466:	f300 809f 	bgt.w	800d5a8 <_dtoa_r+0x8f8>
 800d46a:	9b04      	ldr	r3, [sp, #16]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f040 8097 	bne.w	800d5a0 <_dtoa_r+0x8f0>
 800d472:	9b05      	ldr	r3, [sp, #20]
 800d474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f040 8093 	bne.w	800d5a4 <_dtoa_r+0x8f4>
 800d47e:	9b05      	ldr	r3, [sp, #20]
 800d480:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d484:	0d1b      	lsrs	r3, r3, #20
 800d486:	051b      	lsls	r3, r3, #20
 800d488:	b133      	cbz	r3, 800d498 <_dtoa_r+0x7e8>
 800d48a:	9b00      	ldr	r3, [sp, #0]
 800d48c:	3301      	adds	r3, #1
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	9b06      	ldr	r3, [sp, #24]
 800d492:	3301      	adds	r3, #1
 800d494:	9306      	str	r3, [sp, #24]
 800d496:	2301      	movs	r3, #1
 800d498:	9308      	str	r3, [sp, #32]
 800d49a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f000 81b8 	beq.w	800d812 <_dtoa_r+0xb62>
 800d4a2:	6923      	ldr	r3, [r4, #16]
 800d4a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d4a8:	6918      	ldr	r0, [r3, #16]
 800d4aa:	f000 fb0d 	bl	800dac8 <__hi0bits>
 800d4ae:	f1c0 0020 	rsb	r0, r0, #32
 800d4b2:	9b06      	ldr	r3, [sp, #24]
 800d4b4:	4418      	add	r0, r3
 800d4b6:	f010 001f 	ands.w	r0, r0, #31
 800d4ba:	f000 8082 	beq.w	800d5c2 <_dtoa_r+0x912>
 800d4be:	f1c0 0320 	rsb	r3, r0, #32
 800d4c2:	2b04      	cmp	r3, #4
 800d4c4:	dd73      	ble.n	800d5ae <_dtoa_r+0x8fe>
 800d4c6:	9b00      	ldr	r3, [sp, #0]
 800d4c8:	f1c0 001c 	rsb	r0, r0, #28
 800d4cc:	4403      	add	r3, r0
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	9b06      	ldr	r3, [sp, #24]
 800d4d2:	4403      	add	r3, r0
 800d4d4:	4406      	add	r6, r0
 800d4d6:	9306      	str	r3, [sp, #24]
 800d4d8:	9b00      	ldr	r3, [sp, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	dd05      	ble.n	800d4ea <_dtoa_r+0x83a>
 800d4de:	9902      	ldr	r1, [sp, #8]
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	4648      	mov	r0, r9
 800d4e4:	f000 fc4e 	bl	800dd84 <__lshift>
 800d4e8:	9002      	str	r0, [sp, #8]
 800d4ea:	9b06      	ldr	r3, [sp, #24]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	dd05      	ble.n	800d4fc <_dtoa_r+0x84c>
 800d4f0:	4621      	mov	r1, r4
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	4648      	mov	r0, r9
 800d4f6:	f000 fc45 	bl	800dd84 <__lshift>
 800d4fa:	4604      	mov	r4, r0
 800d4fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d061      	beq.n	800d5c6 <_dtoa_r+0x916>
 800d502:	9802      	ldr	r0, [sp, #8]
 800d504:	4621      	mov	r1, r4
 800d506:	f000 fca9 	bl	800de5c <__mcmp>
 800d50a:	2800      	cmp	r0, #0
 800d50c:	da5b      	bge.n	800d5c6 <_dtoa_r+0x916>
 800d50e:	2300      	movs	r3, #0
 800d510:	9902      	ldr	r1, [sp, #8]
 800d512:	220a      	movs	r2, #10
 800d514:	4648      	mov	r0, r9
 800d516:	f000 fa47 	bl	800d9a8 <__multadd>
 800d51a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d51c:	9002      	str	r0, [sp, #8]
 800d51e:	f107 38ff 	add.w	r8, r7, #4294967295
 800d522:	2b00      	cmp	r3, #0
 800d524:	f000 8177 	beq.w	800d816 <_dtoa_r+0xb66>
 800d528:	4629      	mov	r1, r5
 800d52a:	2300      	movs	r3, #0
 800d52c:	220a      	movs	r2, #10
 800d52e:	4648      	mov	r0, r9
 800d530:	f000 fa3a 	bl	800d9a8 <__multadd>
 800d534:	f1bb 0f00 	cmp.w	fp, #0
 800d538:	4605      	mov	r5, r0
 800d53a:	dc6f      	bgt.n	800d61c <_dtoa_r+0x96c>
 800d53c:	9b07      	ldr	r3, [sp, #28]
 800d53e:	2b02      	cmp	r3, #2
 800d540:	dc49      	bgt.n	800d5d6 <_dtoa_r+0x926>
 800d542:	e06b      	b.n	800d61c <_dtoa_r+0x96c>
 800d544:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d546:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d54a:	e73c      	b.n	800d3c6 <_dtoa_r+0x716>
 800d54c:	3fe00000 	.word	0x3fe00000
 800d550:	40240000 	.word	0x40240000
 800d554:	9b03      	ldr	r3, [sp, #12]
 800d556:	1e5c      	subs	r4, r3, #1
 800d558:	9b08      	ldr	r3, [sp, #32]
 800d55a:	42a3      	cmp	r3, r4
 800d55c:	db09      	blt.n	800d572 <_dtoa_r+0x8c2>
 800d55e:	1b1c      	subs	r4, r3, r4
 800d560:	9b03      	ldr	r3, [sp, #12]
 800d562:	2b00      	cmp	r3, #0
 800d564:	f6bf af30 	bge.w	800d3c8 <_dtoa_r+0x718>
 800d568:	9b00      	ldr	r3, [sp, #0]
 800d56a:	9a03      	ldr	r2, [sp, #12]
 800d56c:	1a9e      	subs	r6, r3, r2
 800d56e:	2300      	movs	r3, #0
 800d570:	e72b      	b.n	800d3ca <_dtoa_r+0x71a>
 800d572:	9b08      	ldr	r3, [sp, #32]
 800d574:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d576:	9408      	str	r4, [sp, #32]
 800d578:	1ae3      	subs	r3, r4, r3
 800d57a:	441a      	add	r2, r3
 800d57c:	9e00      	ldr	r6, [sp, #0]
 800d57e:	9b03      	ldr	r3, [sp, #12]
 800d580:	920d      	str	r2, [sp, #52]	@ 0x34
 800d582:	2400      	movs	r4, #0
 800d584:	e721      	b.n	800d3ca <_dtoa_r+0x71a>
 800d586:	9c08      	ldr	r4, [sp, #32]
 800d588:	9e00      	ldr	r6, [sp, #0]
 800d58a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d58c:	e728      	b.n	800d3e0 <_dtoa_r+0x730>
 800d58e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d592:	e751      	b.n	800d438 <_dtoa_r+0x788>
 800d594:	9a08      	ldr	r2, [sp, #32]
 800d596:	9902      	ldr	r1, [sp, #8]
 800d598:	e750      	b.n	800d43c <_dtoa_r+0x78c>
 800d59a:	f8cd 8008 	str.w	r8, [sp, #8]
 800d59e:	e751      	b.n	800d444 <_dtoa_r+0x794>
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	e779      	b.n	800d498 <_dtoa_r+0x7e8>
 800d5a4:	9b04      	ldr	r3, [sp, #16]
 800d5a6:	e777      	b.n	800d498 <_dtoa_r+0x7e8>
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	9308      	str	r3, [sp, #32]
 800d5ac:	e779      	b.n	800d4a2 <_dtoa_r+0x7f2>
 800d5ae:	d093      	beq.n	800d4d8 <_dtoa_r+0x828>
 800d5b0:	9a00      	ldr	r2, [sp, #0]
 800d5b2:	331c      	adds	r3, #28
 800d5b4:	441a      	add	r2, r3
 800d5b6:	9200      	str	r2, [sp, #0]
 800d5b8:	9a06      	ldr	r2, [sp, #24]
 800d5ba:	441a      	add	r2, r3
 800d5bc:	441e      	add	r6, r3
 800d5be:	9206      	str	r2, [sp, #24]
 800d5c0:	e78a      	b.n	800d4d8 <_dtoa_r+0x828>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	e7f4      	b.n	800d5b0 <_dtoa_r+0x900>
 800d5c6:	9b03      	ldr	r3, [sp, #12]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	46b8      	mov	r8, r7
 800d5cc:	dc20      	bgt.n	800d610 <_dtoa_r+0x960>
 800d5ce:	469b      	mov	fp, r3
 800d5d0:	9b07      	ldr	r3, [sp, #28]
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	dd1e      	ble.n	800d614 <_dtoa_r+0x964>
 800d5d6:	f1bb 0f00 	cmp.w	fp, #0
 800d5da:	f47f adb1 	bne.w	800d140 <_dtoa_r+0x490>
 800d5de:	4621      	mov	r1, r4
 800d5e0:	465b      	mov	r3, fp
 800d5e2:	2205      	movs	r2, #5
 800d5e4:	4648      	mov	r0, r9
 800d5e6:	f000 f9df 	bl	800d9a8 <__multadd>
 800d5ea:	4601      	mov	r1, r0
 800d5ec:	4604      	mov	r4, r0
 800d5ee:	9802      	ldr	r0, [sp, #8]
 800d5f0:	f000 fc34 	bl	800de5c <__mcmp>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	f77f ada3 	ble.w	800d140 <_dtoa_r+0x490>
 800d5fa:	4656      	mov	r6, sl
 800d5fc:	2331      	movs	r3, #49	@ 0x31
 800d5fe:	f806 3b01 	strb.w	r3, [r6], #1
 800d602:	f108 0801 	add.w	r8, r8, #1
 800d606:	e59f      	b.n	800d148 <_dtoa_r+0x498>
 800d608:	9c03      	ldr	r4, [sp, #12]
 800d60a:	46b8      	mov	r8, r7
 800d60c:	4625      	mov	r5, r4
 800d60e:	e7f4      	b.n	800d5fa <_dtoa_r+0x94a>
 800d610:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d616:	2b00      	cmp	r3, #0
 800d618:	f000 8101 	beq.w	800d81e <_dtoa_r+0xb6e>
 800d61c:	2e00      	cmp	r6, #0
 800d61e:	dd05      	ble.n	800d62c <_dtoa_r+0x97c>
 800d620:	4629      	mov	r1, r5
 800d622:	4632      	mov	r2, r6
 800d624:	4648      	mov	r0, r9
 800d626:	f000 fbad 	bl	800dd84 <__lshift>
 800d62a:	4605      	mov	r5, r0
 800d62c:	9b08      	ldr	r3, [sp, #32]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d05c      	beq.n	800d6ec <_dtoa_r+0xa3c>
 800d632:	6869      	ldr	r1, [r5, #4]
 800d634:	4648      	mov	r0, r9
 800d636:	f000 f955 	bl	800d8e4 <_Balloc>
 800d63a:	4606      	mov	r6, r0
 800d63c:	b928      	cbnz	r0, 800d64a <_dtoa_r+0x99a>
 800d63e:	4b82      	ldr	r3, [pc, #520]	@ (800d848 <_dtoa_r+0xb98>)
 800d640:	4602      	mov	r2, r0
 800d642:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d646:	f7ff bb4a 	b.w	800ccde <_dtoa_r+0x2e>
 800d64a:	692a      	ldr	r2, [r5, #16]
 800d64c:	3202      	adds	r2, #2
 800d64e:	0092      	lsls	r2, r2, #2
 800d650:	f105 010c 	add.w	r1, r5, #12
 800d654:	300c      	adds	r0, #12
 800d656:	f7ff fa8e 	bl	800cb76 <memcpy>
 800d65a:	2201      	movs	r2, #1
 800d65c:	4631      	mov	r1, r6
 800d65e:	4648      	mov	r0, r9
 800d660:	f000 fb90 	bl	800dd84 <__lshift>
 800d664:	f10a 0301 	add.w	r3, sl, #1
 800d668:	9300      	str	r3, [sp, #0]
 800d66a:	eb0a 030b 	add.w	r3, sl, fp
 800d66e:	9308      	str	r3, [sp, #32]
 800d670:	9b04      	ldr	r3, [sp, #16]
 800d672:	f003 0301 	and.w	r3, r3, #1
 800d676:	462f      	mov	r7, r5
 800d678:	9306      	str	r3, [sp, #24]
 800d67a:	4605      	mov	r5, r0
 800d67c:	9b00      	ldr	r3, [sp, #0]
 800d67e:	9802      	ldr	r0, [sp, #8]
 800d680:	4621      	mov	r1, r4
 800d682:	f103 3bff 	add.w	fp, r3, #4294967295
 800d686:	f7ff fa8b 	bl	800cba0 <quorem>
 800d68a:	4603      	mov	r3, r0
 800d68c:	3330      	adds	r3, #48	@ 0x30
 800d68e:	9003      	str	r0, [sp, #12]
 800d690:	4639      	mov	r1, r7
 800d692:	9802      	ldr	r0, [sp, #8]
 800d694:	9309      	str	r3, [sp, #36]	@ 0x24
 800d696:	f000 fbe1 	bl	800de5c <__mcmp>
 800d69a:	462a      	mov	r2, r5
 800d69c:	9004      	str	r0, [sp, #16]
 800d69e:	4621      	mov	r1, r4
 800d6a0:	4648      	mov	r0, r9
 800d6a2:	f000 fbf7 	bl	800de94 <__mdiff>
 800d6a6:	68c2      	ldr	r2, [r0, #12]
 800d6a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6aa:	4606      	mov	r6, r0
 800d6ac:	bb02      	cbnz	r2, 800d6f0 <_dtoa_r+0xa40>
 800d6ae:	4601      	mov	r1, r0
 800d6b0:	9802      	ldr	r0, [sp, #8]
 800d6b2:	f000 fbd3 	bl	800de5c <__mcmp>
 800d6b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6b8:	4602      	mov	r2, r0
 800d6ba:	4631      	mov	r1, r6
 800d6bc:	4648      	mov	r0, r9
 800d6be:	920c      	str	r2, [sp, #48]	@ 0x30
 800d6c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6c2:	f000 f94f 	bl	800d964 <_Bfree>
 800d6c6:	9b07      	ldr	r3, [sp, #28]
 800d6c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d6ca:	9e00      	ldr	r6, [sp, #0]
 800d6cc:	ea42 0103 	orr.w	r1, r2, r3
 800d6d0:	9b06      	ldr	r3, [sp, #24]
 800d6d2:	4319      	orrs	r1, r3
 800d6d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6d6:	d10d      	bne.n	800d6f4 <_dtoa_r+0xa44>
 800d6d8:	2b39      	cmp	r3, #57	@ 0x39
 800d6da:	d027      	beq.n	800d72c <_dtoa_r+0xa7c>
 800d6dc:	9a04      	ldr	r2, [sp, #16]
 800d6de:	2a00      	cmp	r2, #0
 800d6e0:	dd01      	ble.n	800d6e6 <_dtoa_r+0xa36>
 800d6e2:	9b03      	ldr	r3, [sp, #12]
 800d6e4:	3331      	adds	r3, #49	@ 0x31
 800d6e6:	f88b 3000 	strb.w	r3, [fp]
 800d6ea:	e52e      	b.n	800d14a <_dtoa_r+0x49a>
 800d6ec:	4628      	mov	r0, r5
 800d6ee:	e7b9      	b.n	800d664 <_dtoa_r+0x9b4>
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	e7e2      	b.n	800d6ba <_dtoa_r+0xa0a>
 800d6f4:	9904      	ldr	r1, [sp, #16]
 800d6f6:	2900      	cmp	r1, #0
 800d6f8:	db04      	blt.n	800d704 <_dtoa_r+0xa54>
 800d6fa:	9807      	ldr	r0, [sp, #28]
 800d6fc:	4301      	orrs	r1, r0
 800d6fe:	9806      	ldr	r0, [sp, #24]
 800d700:	4301      	orrs	r1, r0
 800d702:	d120      	bne.n	800d746 <_dtoa_r+0xa96>
 800d704:	2a00      	cmp	r2, #0
 800d706:	ddee      	ble.n	800d6e6 <_dtoa_r+0xa36>
 800d708:	9902      	ldr	r1, [sp, #8]
 800d70a:	9300      	str	r3, [sp, #0]
 800d70c:	2201      	movs	r2, #1
 800d70e:	4648      	mov	r0, r9
 800d710:	f000 fb38 	bl	800dd84 <__lshift>
 800d714:	4621      	mov	r1, r4
 800d716:	9002      	str	r0, [sp, #8]
 800d718:	f000 fba0 	bl	800de5c <__mcmp>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	9b00      	ldr	r3, [sp, #0]
 800d720:	dc02      	bgt.n	800d728 <_dtoa_r+0xa78>
 800d722:	d1e0      	bne.n	800d6e6 <_dtoa_r+0xa36>
 800d724:	07da      	lsls	r2, r3, #31
 800d726:	d5de      	bpl.n	800d6e6 <_dtoa_r+0xa36>
 800d728:	2b39      	cmp	r3, #57	@ 0x39
 800d72a:	d1da      	bne.n	800d6e2 <_dtoa_r+0xa32>
 800d72c:	2339      	movs	r3, #57	@ 0x39
 800d72e:	f88b 3000 	strb.w	r3, [fp]
 800d732:	4633      	mov	r3, r6
 800d734:	461e      	mov	r6, r3
 800d736:	3b01      	subs	r3, #1
 800d738:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d73c:	2a39      	cmp	r2, #57	@ 0x39
 800d73e:	d04e      	beq.n	800d7de <_dtoa_r+0xb2e>
 800d740:	3201      	adds	r2, #1
 800d742:	701a      	strb	r2, [r3, #0]
 800d744:	e501      	b.n	800d14a <_dtoa_r+0x49a>
 800d746:	2a00      	cmp	r2, #0
 800d748:	dd03      	ble.n	800d752 <_dtoa_r+0xaa2>
 800d74a:	2b39      	cmp	r3, #57	@ 0x39
 800d74c:	d0ee      	beq.n	800d72c <_dtoa_r+0xa7c>
 800d74e:	3301      	adds	r3, #1
 800d750:	e7c9      	b.n	800d6e6 <_dtoa_r+0xa36>
 800d752:	9a00      	ldr	r2, [sp, #0]
 800d754:	9908      	ldr	r1, [sp, #32]
 800d756:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d75a:	428a      	cmp	r2, r1
 800d75c:	d028      	beq.n	800d7b0 <_dtoa_r+0xb00>
 800d75e:	9902      	ldr	r1, [sp, #8]
 800d760:	2300      	movs	r3, #0
 800d762:	220a      	movs	r2, #10
 800d764:	4648      	mov	r0, r9
 800d766:	f000 f91f 	bl	800d9a8 <__multadd>
 800d76a:	42af      	cmp	r7, r5
 800d76c:	9002      	str	r0, [sp, #8]
 800d76e:	f04f 0300 	mov.w	r3, #0
 800d772:	f04f 020a 	mov.w	r2, #10
 800d776:	4639      	mov	r1, r7
 800d778:	4648      	mov	r0, r9
 800d77a:	d107      	bne.n	800d78c <_dtoa_r+0xadc>
 800d77c:	f000 f914 	bl	800d9a8 <__multadd>
 800d780:	4607      	mov	r7, r0
 800d782:	4605      	mov	r5, r0
 800d784:	9b00      	ldr	r3, [sp, #0]
 800d786:	3301      	adds	r3, #1
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	e777      	b.n	800d67c <_dtoa_r+0x9cc>
 800d78c:	f000 f90c 	bl	800d9a8 <__multadd>
 800d790:	4629      	mov	r1, r5
 800d792:	4607      	mov	r7, r0
 800d794:	2300      	movs	r3, #0
 800d796:	220a      	movs	r2, #10
 800d798:	4648      	mov	r0, r9
 800d79a:	f000 f905 	bl	800d9a8 <__multadd>
 800d79e:	4605      	mov	r5, r0
 800d7a0:	e7f0      	b.n	800d784 <_dtoa_r+0xad4>
 800d7a2:	f1bb 0f00 	cmp.w	fp, #0
 800d7a6:	bfcc      	ite	gt
 800d7a8:	465e      	movgt	r6, fp
 800d7aa:	2601      	movle	r6, #1
 800d7ac:	4456      	add	r6, sl
 800d7ae:	2700      	movs	r7, #0
 800d7b0:	9902      	ldr	r1, [sp, #8]
 800d7b2:	9300      	str	r3, [sp, #0]
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	4648      	mov	r0, r9
 800d7b8:	f000 fae4 	bl	800dd84 <__lshift>
 800d7bc:	4621      	mov	r1, r4
 800d7be:	9002      	str	r0, [sp, #8]
 800d7c0:	f000 fb4c 	bl	800de5c <__mcmp>
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	dcb4      	bgt.n	800d732 <_dtoa_r+0xa82>
 800d7c8:	d102      	bne.n	800d7d0 <_dtoa_r+0xb20>
 800d7ca:	9b00      	ldr	r3, [sp, #0]
 800d7cc:	07db      	lsls	r3, r3, #31
 800d7ce:	d4b0      	bmi.n	800d732 <_dtoa_r+0xa82>
 800d7d0:	4633      	mov	r3, r6
 800d7d2:	461e      	mov	r6, r3
 800d7d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7d8:	2a30      	cmp	r2, #48	@ 0x30
 800d7da:	d0fa      	beq.n	800d7d2 <_dtoa_r+0xb22>
 800d7dc:	e4b5      	b.n	800d14a <_dtoa_r+0x49a>
 800d7de:	459a      	cmp	sl, r3
 800d7e0:	d1a8      	bne.n	800d734 <_dtoa_r+0xa84>
 800d7e2:	2331      	movs	r3, #49	@ 0x31
 800d7e4:	f108 0801 	add.w	r8, r8, #1
 800d7e8:	f88a 3000 	strb.w	r3, [sl]
 800d7ec:	e4ad      	b.n	800d14a <_dtoa_r+0x49a>
 800d7ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d7f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d84c <_dtoa_r+0xb9c>
 800d7f4:	b11b      	cbz	r3, 800d7fe <_dtoa_r+0xb4e>
 800d7f6:	f10a 0308 	add.w	r3, sl, #8
 800d7fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d7fc:	6013      	str	r3, [r2, #0]
 800d7fe:	4650      	mov	r0, sl
 800d800:	b017      	add	sp, #92	@ 0x5c
 800d802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d806:	9b07      	ldr	r3, [sp, #28]
 800d808:	2b01      	cmp	r3, #1
 800d80a:	f77f ae2e 	ble.w	800d46a <_dtoa_r+0x7ba>
 800d80e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d810:	9308      	str	r3, [sp, #32]
 800d812:	2001      	movs	r0, #1
 800d814:	e64d      	b.n	800d4b2 <_dtoa_r+0x802>
 800d816:	f1bb 0f00 	cmp.w	fp, #0
 800d81a:	f77f aed9 	ble.w	800d5d0 <_dtoa_r+0x920>
 800d81e:	4656      	mov	r6, sl
 800d820:	9802      	ldr	r0, [sp, #8]
 800d822:	4621      	mov	r1, r4
 800d824:	f7ff f9bc 	bl	800cba0 <quorem>
 800d828:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d82c:	f806 3b01 	strb.w	r3, [r6], #1
 800d830:	eba6 020a 	sub.w	r2, r6, sl
 800d834:	4593      	cmp	fp, r2
 800d836:	ddb4      	ble.n	800d7a2 <_dtoa_r+0xaf2>
 800d838:	9902      	ldr	r1, [sp, #8]
 800d83a:	2300      	movs	r3, #0
 800d83c:	220a      	movs	r2, #10
 800d83e:	4648      	mov	r0, r9
 800d840:	f000 f8b2 	bl	800d9a8 <__multadd>
 800d844:	9002      	str	r0, [sp, #8]
 800d846:	e7eb      	b.n	800d820 <_dtoa_r+0xb70>
 800d848:	0801053d 	.word	0x0801053d
 800d84c:	080104c1 	.word	0x080104c1

0800d850 <_free_r>:
 800d850:	b538      	push	{r3, r4, r5, lr}
 800d852:	4605      	mov	r5, r0
 800d854:	2900      	cmp	r1, #0
 800d856:	d041      	beq.n	800d8dc <_free_r+0x8c>
 800d858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d85c:	1f0c      	subs	r4, r1, #4
 800d85e:	2b00      	cmp	r3, #0
 800d860:	bfb8      	it	lt
 800d862:	18e4      	addlt	r4, r4, r3
 800d864:	f7fe f918 	bl	800ba98 <__malloc_lock>
 800d868:	4a1d      	ldr	r2, [pc, #116]	@ (800d8e0 <_free_r+0x90>)
 800d86a:	6813      	ldr	r3, [r2, #0]
 800d86c:	b933      	cbnz	r3, 800d87c <_free_r+0x2c>
 800d86e:	6063      	str	r3, [r4, #4]
 800d870:	6014      	str	r4, [r2, #0]
 800d872:	4628      	mov	r0, r5
 800d874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d878:	f7fe b914 	b.w	800baa4 <__malloc_unlock>
 800d87c:	42a3      	cmp	r3, r4
 800d87e:	d908      	bls.n	800d892 <_free_r+0x42>
 800d880:	6820      	ldr	r0, [r4, #0]
 800d882:	1821      	adds	r1, r4, r0
 800d884:	428b      	cmp	r3, r1
 800d886:	bf01      	itttt	eq
 800d888:	6819      	ldreq	r1, [r3, #0]
 800d88a:	685b      	ldreq	r3, [r3, #4]
 800d88c:	1809      	addeq	r1, r1, r0
 800d88e:	6021      	streq	r1, [r4, #0]
 800d890:	e7ed      	b.n	800d86e <_free_r+0x1e>
 800d892:	461a      	mov	r2, r3
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	b10b      	cbz	r3, 800d89c <_free_r+0x4c>
 800d898:	42a3      	cmp	r3, r4
 800d89a:	d9fa      	bls.n	800d892 <_free_r+0x42>
 800d89c:	6811      	ldr	r1, [r2, #0]
 800d89e:	1850      	adds	r0, r2, r1
 800d8a0:	42a0      	cmp	r0, r4
 800d8a2:	d10b      	bne.n	800d8bc <_free_r+0x6c>
 800d8a4:	6820      	ldr	r0, [r4, #0]
 800d8a6:	4401      	add	r1, r0
 800d8a8:	1850      	adds	r0, r2, r1
 800d8aa:	4283      	cmp	r3, r0
 800d8ac:	6011      	str	r1, [r2, #0]
 800d8ae:	d1e0      	bne.n	800d872 <_free_r+0x22>
 800d8b0:	6818      	ldr	r0, [r3, #0]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	6053      	str	r3, [r2, #4]
 800d8b6:	4408      	add	r0, r1
 800d8b8:	6010      	str	r0, [r2, #0]
 800d8ba:	e7da      	b.n	800d872 <_free_r+0x22>
 800d8bc:	d902      	bls.n	800d8c4 <_free_r+0x74>
 800d8be:	230c      	movs	r3, #12
 800d8c0:	602b      	str	r3, [r5, #0]
 800d8c2:	e7d6      	b.n	800d872 <_free_r+0x22>
 800d8c4:	6820      	ldr	r0, [r4, #0]
 800d8c6:	1821      	adds	r1, r4, r0
 800d8c8:	428b      	cmp	r3, r1
 800d8ca:	bf04      	itt	eq
 800d8cc:	6819      	ldreq	r1, [r3, #0]
 800d8ce:	685b      	ldreq	r3, [r3, #4]
 800d8d0:	6063      	str	r3, [r4, #4]
 800d8d2:	bf04      	itt	eq
 800d8d4:	1809      	addeq	r1, r1, r0
 800d8d6:	6021      	streq	r1, [r4, #0]
 800d8d8:	6054      	str	r4, [r2, #4]
 800d8da:	e7ca      	b.n	800d872 <_free_r+0x22>
 800d8dc:	bd38      	pop	{r3, r4, r5, pc}
 800d8de:	bf00      	nop
 800d8e0:	200019d0 	.word	0x200019d0

0800d8e4 <_Balloc>:
 800d8e4:	b570      	push	{r4, r5, r6, lr}
 800d8e6:	69c6      	ldr	r6, [r0, #28]
 800d8e8:	4604      	mov	r4, r0
 800d8ea:	460d      	mov	r5, r1
 800d8ec:	b976      	cbnz	r6, 800d90c <_Balloc+0x28>
 800d8ee:	2010      	movs	r0, #16
 800d8f0:	f7fe f820 	bl	800b934 <malloc>
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	61e0      	str	r0, [r4, #28]
 800d8f8:	b920      	cbnz	r0, 800d904 <_Balloc+0x20>
 800d8fa:	4b18      	ldr	r3, [pc, #96]	@ (800d95c <_Balloc+0x78>)
 800d8fc:	4818      	ldr	r0, [pc, #96]	@ (800d960 <_Balloc+0x7c>)
 800d8fe:	216b      	movs	r1, #107	@ 0x6b
 800d900:	f001 ff2e 	bl	800f760 <__assert_func>
 800d904:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d908:	6006      	str	r6, [r0, #0]
 800d90a:	60c6      	str	r6, [r0, #12]
 800d90c:	69e6      	ldr	r6, [r4, #28]
 800d90e:	68f3      	ldr	r3, [r6, #12]
 800d910:	b183      	cbz	r3, 800d934 <_Balloc+0x50>
 800d912:	69e3      	ldr	r3, [r4, #28]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d91a:	b9b8      	cbnz	r0, 800d94c <_Balloc+0x68>
 800d91c:	2101      	movs	r1, #1
 800d91e:	fa01 f605 	lsl.w	r6, r1, r5
 800d922:	1d72      	adds	r2, r6, #5
 800d924:	0092      	lsls	r2, r2, #2
 800d926:	4620      	mov	r0, r4
 800d928:	f001 ff38 	bl	800f79c <_calloc_r>
 800d92c:	b160      	cbz	r0, 800d948 <_Balloc+0x64>
 800d92e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d932:	e00e      	b.n	800d952 <_Balloc+0x6e>
 800d934:	2221      	movs	r2, #33	@ 0x21
 800d936:	2104      	movs	r1, #4
 800d938:	4620      	mov	r0, r4
 800d93a:	f001 ff2f 	bl	800f79c <_calloc_r>
 800d93e:	69e3      	ldr	r3, [r4, #28]
 800d940:	60f0      	str	r0, [r6, #12]
 800d942:	68db      	ldr	r3, [r3, #12]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d1e4      	bne.n	800d912 <_Balloc+0x2e>
 800d948:	2000      	movs	r0, #0
 800d94a:	bd70      	pop	{r4, r5, r6, pc}
 800d94c:	6802      	ldr	r2, [r0, #0]
 800d94e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d952:	2300      	movs	r3, #0
 800d954:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d958:	e7f7      	b.n	800d94a <_Balloc+0x66>
 800d95a:	bf00      	nop
 800d95c:	080104ce 	.word	0x080104ce
 800d960:	0801054e 	.word	0x0801054e

0800d964 <_Bfree>:
 800d964:	b570      	push	{r4, r5, r6, lr}
 800d966:	69c6      	ldr	r6, [r0, #28]
 800d968:	4605      	mov	r5, r0
 800d96a:	460c      	mov	r4, r1
 800d96c:	b976      	cbnz	r6, 800d98c <_Bfree+0x28>
 800d96e:	2010      	movs	r0, #16
 800d970:	f7fd ffe0 	bl	800b934 <malloc>
 800d974:	4602      	mov	r2, r0
 800d976:	61e8      	str	r0, [r5, #28]
 800d978:	b920      	cbnz	r0, 800d984 <_Bfree+0x20>
 800d97a:	4b09      	ldr	r3, [pc, #36]	@ (800d9a0 <_Bfree+0x3c>)
 800d97c:	4809      	ldr	r0, [pc, #36]	@ (800d9a4 <_Bfree+0x40>)
 800d97e:	218f      	movs	r1, #143	@ 0x8f
 800d980:	f001 feee 	bl	800f760 <__assert_func>
 800d984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d988:	6006      	str	r6, [r0, #0]
 800d98a:	60c6      	str	r6, [r0, #12]
 800d98c:	b13c      	cbz	r4, 800d99e <_Bfree+0x3a>
 800d98e:	69eb      	ldr	r3, [r5, #28]
 800d990:	6862      	ldr	r2, [r4, #4]
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d998:	6021      	str	r1, [r4, #0]
 800d99a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d99e:	bd70      	pop	{r4, r5, r6, pc}
 800d9a0:	080104ce 	.word	0x080104ce
 800d9a4:	0801054e 	.word	0x0801054e

0800d9a8 <__multadd>:
 800d9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ac:	690d      	ldr	r5, [r1, #16]
 800d9ae:	4607      	mov	r7, r0
 800d9b0:	460c      	mov	r4, r1
 800d9b2:	461e      	mov	r6, r3
 800d9b4:	f101 0c14 	add.w	ip, r1, #20
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	f8dc 3000 	ldr.w	r3, [ip]
 800d9be:	b299      	uxth	r1, r3
 800d9c0:	fb02 6101 	mla	r1, r2, r1, r6
 800d9c4:	0c1e      	lsrs	r6, r3, #16
 800d9c6:	0c0b      	lsrs	r3, r1, #16
 800d9c8:	fb02 3306 	mla	r3, r2, r6, r3
 800d9cc:	b289      	uxth	r1, r1
 800d9ce:	3001      	adds	r0, #1
 800d9d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d9d4:	4285      	cmp	r5, r0
 800d9d6:	f84c 1b04 	str.w	r1, [ip], #4
 800d9da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d9de:	dcec      	bgt.n	800d9ba <__multadd+0x12>
 800d9e0:	b30e      	cbz	r6, 800da26 <__multadd+0x7e>
 800d9e2:	68a3      	ldr	r3, [r4, #8]
 800d9e4:	42ab      	cmp	r3, r5
 800d9e6:	dc19      	bgt.n	800da1c <__multadd+0x74>
 800d9e8:	6861      	ldr	r1, [r4, #4]
 800d9ea:	4638      	mov	r0, r7
 800d9ec:	3101      	adds	r1, #1
 800d9ee:	f7ff ff79 	bl	800d8e4 <_Balloc>
 800d9f2:	4680      	mov	r8, r0
 800d9f4:	b928      	cbnz	r0, 800da02 <__multadd+0x5a>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	4b0c      	ldr	r3, [pc, #48]	@ (800da2c <__multadd+0x84>)
 800d9fa:	480d      	ldr	r0, [pc, #52]	@ (800da30 <__multadd+0x88>)
 800d9fc:	21ba      	movs	r1, #186	@ 0xba
 800d9fe:	f001 feaf 	bl	800f760 <__assert_func>
 800da02:	6922      	ldr	r2, [r4, #16]
 800da04:	3202      	adds	r2, #2
 800da06:	f104 010c 	add.w	r1, r4, #12
 800da0a:	0092      	lsls	r2, r2, #2
 800da0c:	300c      	adds	r0, #12
 800da0e:	f7ff f8b2 	bl	800cb76 <memcpy>
 800da12:	4621      	mov	r1, r4
 800da14:	4638      	mov	r0, r7
 800da16:	f7ff ffa5 	bl	800d964 <_Bfree>
 800da1a:	4644      	mov	r4, r8
 800da1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800da20:	3501      	adds	r5, #1
 800da22:	615e      	str	r6, [r3, #20]
 800da24:	6125      	str	r5, [r4, #16]
 800da26:	4620      	mov	r0, r4
 800da28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da2c:	0801053d 	.word	0x0801053d
 800da30:	0801054e 	.word	0x0801054e

0800da34 <__s2b>:
 800da34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da38:	460c      	mov	r4, r1
 800da3a:	4615      	mov	r5, r2
 800da3c:	461f      	mov	r7, r3
 800da3e:	2209      	movs	r2, #9
 800da40:	3308      	adds	r3, #8
 800da42:	4606      	mov	r6, r0
 800da44:	fb93 f3f2 	sdiv	r3, r3, r2
 800da48:	2100      	movs	r1, #0
 800da4a:	2201      	movs	r2, #1
 800da4c:	429a      	cmp	r2, r3
 800da4e:	db09      	blt.n	800da64 <__s2b+0x30>
 800da50:	4630      	mov	r0, r6
 800da52:	f7ff ff47 	bl	800d8e4 <_Balloc>
 800da56:	b940      	cbnz	r0, 800da6a <__s2b+0x36>
 800da58:	4602      	mov	r2, r0
 800da5a:	4b19      	ldr	r3, [pc, #100]	@ (800dac0 <__s2b+0x8c>)
 800da5c:	4819      	ldr	r0, [pc, #100]	@ (800dac4 <__s2b+0x90>)
 800da5e:	21d3      	movs	r1, #211	@ 0xd3
 800da60:	f001 fe7e 	bl	800f760 <__assert_func>
 800da64:	0052      	lsls	r2, r2, #1
 800da66:	3101      	adds	r1, #1
 800da68:	e7f0      	b.n	800da4c <__s2b+0x18>
 800da6a:	9b08      	ldr	r3, [sp, #32]
 800da6c:	6143      	str	r3, [r0, #20]
 800da6e:	2d09      	cmp	r5, #9
 800da70:	f04f 0301 	mov.w	r3, #1
 800da74:	6103      	str	r3, [r0, #16]
 800da76:	dd16      	ble.n	800daa6 <__s2b+0x72>
 800da78:	f104 0909 	add.w	r9, r4, #9
 800da7c:	46c8      	mov	r8, r9
 800da7e:	442c      	add	r4, r5
 800da80:	f818 3b01 	ldrb.w	r3, [r8], #1
 800da84:	4601      	mov	r1, r0
 800da86:	3b30      	subs	r3, #48	@ 0x30
 800da88:	220a      	movs	r2, #10
 800da8a:	4630      	mov	r0, r6
 800da8c:	f7ff ff8c 	bl	800d9a8 <__multadd>
 800da90:	45a0      	cmp	r8, r4
 800da92:	d1f5      	bne.n	800da80 <__s2b+0x4c>
 800da94:	f1a5 0408 	sub.w	r4, r5, #8
 800da98:	444c      	add	r4, r9
 800da9a:	1b2d      	subs	r5, r5, r4
 800da9c:	1963      	adds	r3, r4, r5
 800da9e:	42bb      	cmp	r3, r7
 800daa0:	db04      	blt.n	800daac <__s2b+0x78>
 800daa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daa6:	340a      	adds	r4, #10
 800daa8:	2509      	movs	r5, #9
 800daaa:	e7f6      	b.n	800da9a <__s2b+0x66>
 800daac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dab0:	4601      	mov	r1, r0
 800dab2:	3b30      	subs	r3, #48	@ 0x30
 800dab4:	220a      	movs	r2, #10
 800dab6:	4630      	mov	r0, r6
 800dab8:	f7ff ff76 	bl	800d9a8 <__multadd>
 800dabc:	e7ee      	b.n	800da9c <__s2b+0x68>
 800dabe:	bf00      	nop
 800dac0:	0801053d 	.word	0x0801053d
 800dac4:	0801054e 	.word	0x0801054e

0800dac8 <__hi0bits>:
 800dac8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dacc:	4603      	mov	r3, r0
 800dace:	bf36      	itet	cc
 800dad0:	0403      	lslcc	r3, r0, #16
 800dad2:	2000      	movcs	r0, #0
 800dad4:	2010      	movcc	r0, #16
 800dad6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dada:	bf3c      	itt	cc
 800dadc:	021b      	lslcc	r3, r3, #8
 800dade:	3008      	addcc	r0, #8
 800dae0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dae4:	bf3c      	itt	cc
 800dae6:	011b      	lslcc	r3, r3, #4
 800dae8:	3004      	addcc	r0, #4
 800daea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800daee:	bf3c      	itt	cc
 800daf0:	009b      	lslcc	r3, r3, #2
 800daf2:	3002      	addcc	r0, #2
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	db05      	blt.n	800db04 <__hi0bits+0x3c>
 800daf8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dafc:	f100 0001 	add.w	r0, r0, #1
 800db00:	bf08      	it	eq
 800db02:	2020      	moveq	r0, #32
 800db04:	4770      	bx	lr

0800db06 <__lo0bits>:
 800db06:	6803      	ldr	r3, [r0, #0]
 800db08:	4602      	mov	r2, r0
 800db0a:	f013 0007 	ands.w	r0, r3, #7
 800db0e:	d00b      	beq.n	800db28 <__lo0bits+0x22>
 800db10:	07d9      	lsls	r1, r3, #31
 800db12:	d421      	bmi.n	800db58 <__lo0bits+0x52>
 800db14:	0798      	lsls	r0, r3, #30
 800db16:	bf49      	itett	mi
 800db18:	085b      	lsrmi	r3, r3, #1
 800db1a:	089b      	lsrpl	r3, r3, #2
 800db1c:	2001      	movmi	r0, #1
 800db1e:	6013      	strmi	r3, [r2, #0]
 800db20:	bf5c      	itt	pl
 800db22:	6013      	strpl	r3, [r2, #0]
 800db24:	2002      	movpl	r0, #2
 800db26:	4770      	bx	lr
 800db28:	b299      	uxth	r1, r3
 800db2a:	b909      	cbnz	r1, 800db30 <__lo0bits+0x2a>
 800db2c:	0c1b      	lsrs	r3, r3, #16
 800db2e:	2010      	movs	r0, #16
 800db30:	b2d9      	uxtb	r1, r3
 800db32:	b909      	cbnz	r1, 800db38 <__lo0bits+0x32>
 800db34:	3008      	adds	r0, #8
 800db36:	0a1b      	lsrs	r3, r3, #8
 800db38:	0719      	lsls	r1, r3, #28
 800db3a:	bf04      	itt	eq
 800db3c:	091b      	lsreq	r3, r3, #4
 800db3e:	3004      	addeq	r0, #4
 800db40:	0799      	lsls	r1, r3, #30
 800db42:	bf04      	itt	eq
 800db44:	089b      	lsreq	r3, r3, #2
 800db46:	3002      	addeq	r0, #2
 800db48:	07d9      	lsls	r1, r3, #31
 800db4a:	d403      	bmi.n	800db54 <__lo0bits+0x4e>
 800db4c:	085b      	lsrs	r3, r3, #1
 800db4e:	f100 0001 	add.w	r0, r0, #1
 800db52:	d003      	beq.n	800db5c <__lo0bits+0x56>
 800db54:	6013      	str	r3, [r2, #0]
 800db56:	4770      	bx	lr
 800db58:	2000      	movs	r0, #0
 800db5a:	4770      	bx	lr
 800db5c:	2020      	movs	r0, #32
 800db5e:	4770      	bx	lr

0800db60 <__i2b>:
 800db60:	b510      	push	{r4, lr}
 800db62:	460c      	mov	r4, r1
 800db64:	2101      	movs	r1, #1
 800db66:	f7ff febd 	bl	800d8e4 <_Balloc>
 800db6a:	4602      	mov	r2, r0
 800db6c:	b928      	cbnz	r0, 800db7a <__i2b+0x1a>
 800db6e:	4b05      	ldr	r3, [pc, #20]	@ (800db84 <__i2b+0x24>)
 800db70:	4805      	ldr	r0, [pc, #20]	@ (800db88 <__i2b+0x28>)
 800db72:	f240 1145 	movw	r1, #325	@ 0x145
 800db76:	f001 fdf3 	bl	800f760 <__assert_func>
 800db7a:	2301      	movs	r3, #1
 800db7c:	6144      	str	r4, [r0, #20]
 800db7e:	6103      	str	r3, [r0, #16]
 800db80:	bd10      	pop	{r4, pc}
 800db82:	bf00      	nop
 800db84:	0801053d 	.word	0x0801053d
 800db88:	0801054e 	.word	0x0801054e

0800db8c <__multiply>:
 800db8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db90:	4617      	mov	r7, r2
 800db92:	690a      	ldr	r2, [r1, #16]
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	429a      	cmp	r2, r3
 800db98:	bfa8      	it	ge
 800db9a:	463b      	movge	r3, r7
 800db9c:	4689      	mov	r9, r1
 800db9e:	bfa4      	itt	ge
 800dba0:	460f      	movge	r7, r1
 800dba2:	4699      	movge	r9, r3
 800dba4:	693d      	ldr	r5, [r7, #16]
 800dba6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	6879      	ldr	r1, [r7, #4]
 800dbae:	eb05 060a 	add.w	r6, r5, sl
 800dbb2:	42b3      	cmp	r3, r6
 800dbb4:	b085      	sub	sp, #20
 800dbb6:	bfb8      	it	lt
 800dbb8:	3101      	addlt	r1, #1
 800dbba:	f7ff fe93 	bl	800d8e4 <_Balloc>
 800dbbe:	b930      	cbnz	r0, 800dbce <__multiply+0x42>
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	4b41      	ldr	r3, [pc, #260]	@ (800dcc8 <__multiply+0x13c>)
 800dbc4:	4841      	ldr	r0, [pc, #260]	@ (800dccc <__multiply+0x140>)
 800dbc6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dbca:	f001 fdc9 	bl	800f760 <__assert_func>
 800dbce:	f100 0414 	add.w	r4, r0, #20
 800dbd2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800dbd6:	4623      	mov	r3, r4
 800dbd8:	2200      	movs	r2, #0
 800dbda:	4573      	cmp	r3, lr
 800dbdc:	d320      	bcc.n	800dc20 <__multiply+0x94>
 800dbde:	f107 0814 	add.w	r8, r7, #20
 800dbe2:	f109 0114 	add.w	r1, r9, #20
 800dbe6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800dbea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800dbee:	9302      	str	r3, [sp, #8]
 800dbf0:	1beb      	subs	r3, r5, r7
 800dbf2:	3b15      	subs	r3, #21
 800dbf4:	f023 0303 	bic.w	r3, r3, #3
 800dbf8:	3304      	adds	r3, #4
 800dbfa:	3715      	adds	r7, #21
 800dbfc:	42bd      	cmp	r5, r7
 800dbfe:	bf38      	it	cc
 800dc00:	2304      	movcc	r3, #4
 800dc02:	9301      	str	r3, [sp, #4]
 800dc04:	9b02      	ldr	r3, [sp, #8]
 800dc06:	9103      	str	r1, [sp, #12]
 800dc08:	428b      	cmp	r3, r1
 800dc0a:	d80c      	bhi.n	800dc26 <__multiply+0x9a>
 800dc0c:	2e00      	cmp	r6, #0
 800dc0e:	dd03      	ble.n	800dc18 <__multiply+0x8c>
 800dc10:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d055      	beq.n	800dcc4 <__multiply+0x138>
 800dc18:	6106      	str	r6, [r0, #16]
 800dc1a:	b005      	add	sp, #20
 800dc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc20:	f843 2b04 	str.w	r2, [r3], #4
 800dc24:	e7d9      	b.n	800dbda <__multiply+0x4e>
 800dc26:	f8b1 a000 	ldrh.w	sl, [r1]
 800dc2a:	f1ba 0f00 	cmp.w	sl, #0
 800dc2e:	d01f      	beq.n	800dc70 <__multiply+0xe4>
 800dc30:	46c4      	mov	ip, r8
 800dc32:	46a1      	mov	r9, r4
 800dc34:	2700      	movs	r7, #0
 800dc36:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dc3a:	f8d9 3000 	ldr.w	r3, [r9]
 800dc3e:	fa1f fb82 	uxth.w	fp, r2
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	fb0a 330b 	mla	r3, sl, fp, r3
 800dc48:	443b      	add	r3, r7
 800dc4a:	f8d9 7000 	ldr.w	r7, [r9]
 800dc4e:	0c12      	lsrs	r2, r2, #16
 800dc50:	0c3f      	lsrs	r7, r7, #16
 800dc52:	fb0a 7202 	mla	r2, sl, r2, r7
 800dc56:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc60:	4565      	cmp	r5, ip
 800dc62:	f849 3b04 	str.w	r3, [r9], #4
 800dc66:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800dc6a:	d8e4      	bhi.n	800dc36 <__multiply+0xaa>
 800dc6c:	9b01      	ldr	r3, [sp, #4]
 800dc6e:	50e7      	str	r7, [r4, r3]
 800dc70:	9b03      	ldr	r3, [sp, #12]
 800dc72:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dc76:	3104      	adds	r1, #4
 800dc78:	f1b9 0f00 	cmp.w	r9, #0
 800dc7c:	d020      	beq.n	800dcc0 <__multiply+0x134>
 800dc7e:	6823      	ldr	r3, [r4, #0]
 800dc80:	4647      	mov	r7, r8
 800dc82:	46a4      	mov	ip, r4
 800dc84:	f04f 0a00 	mov.w	sl, #0
 800dc88:	f8b7 b000 	ldrh.w	fp, [r7]
 800dc8c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800dc90:	fb09 220b 	mla	r2, r9, fp, r2
 800dc94:	4452      	add	r2, sl
 800dc96:	b29b      	uxth	r3, r3
 800dc98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc9c:	f84c 3b04 	str.w	r3, [ip], #4
 800dca0:	f857 3b04 	ldr.w	r3, [r7], #4
 800dca4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dca8:	f8bc 3000 	ldrh.w	r3, [ip]
 800dcac:	fb09 330a 	mla	r3, r9, sl, r3
 800dcb0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800dcb4:	42bd      	cmp	r5, r7
 800dcb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dcba:	d8e5      	bhi.n	800dc88 <__multiply+0xfc>
 800dcbc:	9a01      	ldr	r2, [sp, #4]
 800dcbe:	50a3      	str	r3, [r4, r2]
 800dcc0:	3404      	adds	r4, #4
 800dcc2:	e79f      	b.n	800dc04 <__multiply+0x78>
 800dcc4:	3e01      	subs	r6, #1
 800dcc6:	e7a1      	b.n	800dc0c <__multiply+0x80>
 800dcc8:	0801053d 	.word	0x0801053d
 800dccc:	0801054e 	.word	0x0801054e

0800dcd0 <__pow5mult>:
 800dcd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcd4:	4615      	mov	r5, r2
 800dcd6:	f012 0203 	ands.w	r2, r2, #3
 800dcda:	4607      	mov	r7, r0
 800dcdc:	460e      	mov	r6, r1
 800dcde:	d007      	beq.n	800dcf0 <__pow5mult+0x20>
 800dce0:	4c25      	ldr	r4, [pc, #148]	@ (800dd78 <__pow5mult+0xa8>)
 800dce2:	3a01      	subs	r2, #1
 800dce4:	2300      	movs	r3, #0
 800dce6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dcea:	f7ff fe5d 	bl	800d9a8 <__multadd>
 800dcee:	4606      	mov	r6, r0
 800dcf0:	10ad      	asrs	r5, r5, #2
 800dcf2:	d03d      	beq.n	800dd70 <__pow5mult+0xa0>
 800dcf4:	69fc      	ldr	r4, [r7, #28]
 800dcf6:	b97c      	cbnz	r4, 800dd18 <__pow5mult+0x48>
 800dcf8:	2010      	movs	r0, #16
 800dcfa:	f7fd fe1b 	bl	800b934 <malloc>
 800dcfe:	4602      	mov	r2, r0
 800dd00:	61f8      	str	r0, [r7, #28]
 800dd02:	b928      	cbnz	r0, 800dd10 <__pow5mult+0x40>
 800dd04:	4b1d      	ldr	r3, [pc, #116]	@ (800dd7c <__pow5mult+0xac>)
 800dd06:	481e      	ldr	r0, [pc, #120]	@ (800dd80 <__pow5mult+0xb0>)
 800dd08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dd0c:	f001 fd28 	bl	800f760 <__assert_func>
 800dd10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd14:	6004      	str	r4, [r0, #0]
 800dd16:	60c4      	str	r4, [r0, #12]
 800dd18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dd1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd20:	b94c      	cbnz	r4, 800dd36 <__pow5mult+0x66>
 800dd22:	f240 2171 	movw	r1, #625	@ 0x271
 800dd26:	4638      	mov	r0, r7
 800dd28:	f7ff ff1a 	bl	800db60 <__i2b>
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd32:	4604      	mov	r4, r0
 800dd34:	6003      	str	r3, [r0, #0]
 800dd36:	f04f 0900 	mov.w	r9, #0
 800dd3a:	07eb      	lsls	r3, r5, #31
 800dd3c:	d50a      	bpl.n	800dd54 <__pow5mult+0x84>
 800dd3e:	4631      	mov	r1, r6
 800dd40:	4622      	mov	r2, r4
 800dd42:	4638      	mov	r0, r7
 800dd44:	f7ff ff22 	bl	800db8c <__multiply>
 800dd48:	4631      	mov	r1, r6
 800dd4a:	4680      	mov	r8, r0
 800dd4c:	4638      	mov	r0, r7
 800dd4e:	f7ff fe09 	bl	800d964 <_Bfree>
 800dd52:	4646      	mov	r6, r8
 800dd54:	106d      	asrs	r5, r5, #1
 800dd56:	d00b      	beq.n	800dd70 <__pow5mult+0xa0>
 800dd58:	6820      	ldr	r0, [r4, #0]
 800dd5a:	b938      	cbnz	r0, 800dd6c <__pow5mult+0x9c>
 800dd5c:	4622      	mov	r2, r4
 800dd5e:	4621      	mov	r1, r4
 800dd60:	4638      	mov	r0, r7
 800dd62:	f7ff ff13 	bl	800db8c <__multiply>
 800dd66:	6020      	str	r0, [r4, #0]
 800dd68:	f8c0 9000 	str.w	r9, [r0]
 800dd6c:	4604      	mov	r4, r0
 800dd6e:	e7e4      	b.n	800dd3a <__pow5mult+0x6a>
 800dd70:	4630      	mov	r0, r6
 800dd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd76:	bf00      	nop
 800dd78:	08010660 	.word	0x08010660
 800dd7c:	080104ce 	.word	0x080104ce
 800dd80:	0801054e 	.word	0x0801054e

0800dd84 <__lshift>:
 800dd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd88:	460c      	mov	r4, r1
 800dd8a:	6849      	ldr	r1, [r1, #4]
 800dd8c:	6923      	ldr	r3, [r4, #16]
 800dd8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dd92:	68a3      	ldr	r3, [r4, #8]
 800dd94:	4607      	mov	r7, r0
 800dd96:	4691      	mov	r9, r2
 800dd98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd9c:	f108 0601 	add.w	r6, r8, #1
 800dda0:	42b3      	cmp	r3, r6
 800dda2:	db0b      	blt.n	800ddbc <__lshift+0x38>
 800dda4:	4638      	mov	r0, r7
 800dda6:	f7ff fd9d 	bl	800d8e4 <_Balloc>
 800ddaa:	4605      	mov	r5, r0
 800ddac:	b948      	cbnz	r0, 800ddc2 <__lshift+0x3e>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	4b28      	ldr	r3, [pc, #160]	@ (800de54 <__lshift+0xd0>)
 800ddb2:	4829      	ldr	r0, [pc, #164]	@ (800de58 <__lshift+0xd4>)
 800ddb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ddb8:	f001 fcd2 	bl	800f760 <__assert_func>
 800ddbc:	3101      	adds	r1, #1
 800ddbe:	005b      	lsls	r3, r3, #1
 800ddc0:	e7ee      	b.n	800dda0 <__lshift+0x1c>
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	f100 0114 	add.w	r1, r0, #20
 800ddc8:	f100 0210 	add.w	r2, r0, #16
 800ddcc:	4618      	mov	r0, r3
 800ddce:	4553      	cmp	r3, sl
 800ddd0:	db33      	blt.n	800de3a <__lshift+0xb6>
 800ddd2:	6920      	ldr	r0, [r4, #16]
 800ddd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ddd8:	f104 0314 	add.w	r3, r4, #20
 800dddc:	f019 091f 	ands.w	r9, r9, #31
 800dde0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dde4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dde8:	d02b      	beq.n	800de42 <__lshift+0xbe>
 800ddea:	f1c9 0e20 	rsb	lr, r9, #32
 800ddee:	468a      	mov	sl, r1
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	6818      	ldr	r0, [r3, #0]
 800ddf4:	fa00 f009 	lsl.w	r0, r0, r9
 800ddf8:	4310      	orrs	r0, r2
 800ddfa:	f84a 0b04 	str.w	r0, [sl], #4
 800ddfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800de02:	459c      	cmp	ip, r3
 800de04:	fa22 f20e 	lsr.w	r2, r2, lr
 800de08:	d8f3      	bhi.n	800ddf2 <__lshift+0x6e>
 800de0a:	ebac 0304 	sub.w	r3, ip, r4
 800de0e:	3b15      	subs	r3, #21
 800de10:	f023 0303 	bic.w	r3, r3, #3
 800de14:	3304      	adds	r3, #4
 800de16:	f104 0015 	add.w	r0, r4, #21
 800de1a:	4560      	cmp	r0, ip
 800de1c:	bf88      	it	hi
 800de1e:	2304      	movhi	r3, #4
 800de20:	50ca      	str	r2, [r1, r3]
 800de22:	b10a      	cbz	r2, 800de28 <__lshift+0xa4>
 800de24:	f108 0602 	add.w	r6, r8, #2
 800de28:	3e01      	subs	r6, #1
 800de2a:	4638      	mov	r0, r7
 800de2c:	612e      	str	r6, [r5, #16]
 800de2e:	4621      	mov	r1, r4
 800de30:	f7ff fd98 	bl	800d964 <_Bfree>
 800de34:	4628      	mov	r0, r5
 800de36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de3a:	f842 0f04 	str.w	r0, [r2, #4]!
 800de3e:	3301      	adds	r3, #1
 800de40:	e7c5      	b.n	800ddce <__lshift+0x4a>
 800de42:	3904      	subs	r1, #4
 800de44:	f853 2b04 	ldr.w	r2, [r3], #4
 800de48:	f841 2f04 	str.w	r2, [r1, #4]!
 800de4c:	459c      	cmp	ip, r3
 800de4e:	d8f9      	bhi.n	800de44 <__lshift+0xc0>
 800de50:	e7ea      	b.n	800de28 <__lshift+0xa4>
 800de52:	bf00      	nop
 800de54:	0801053d 	.word	0x0801053d
 800de58:	0801054e 	.word	0x0801054e

0800de5c <__mcmp>:
 800de5c:	690a      	ldr	r2, [r1, #16]
 800de5e:	4603      	mov	r3, r0
 800de60:	6900      	ldr	r0, [r0, #16]
 800de62:	1a80      	subs	r0, r0, r2
 800de64:	b530      	push	{r4, r5, lr}
 800de66:	d10e      	bne.n	800de86 <__mcmp+0x2a>
 800de68:	3314      	adds	r3, #20
 800de6a:	3114      	adds	r1, #20
 800de6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800de70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800de74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800de78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800de7c:	4295      	cmp	r5, r2
 800de7e:	d003      	beq.n	800de88 <__mcmp+0x2c>
 800de80:	d205      	bcs.n	800de8e <__mcmp+0x32>
 800de82:	f04f 30ff 	mov.w	r0, #4294967295
 800de86:	bd30      	pop	{r4, r5, pc}
 800de88:	42a3      	cmp	r3, r4
 800de8a:	d3f3      	bcc.n	800de74 <__mcmp+0x18>
 800de8c:	e7fb      	b.n	800de86 <__mcmp+0x2a>
 800de8e:	2001      	movs	r0, #1
 800de90:	e7f9      	b.n	800de86 <__mcmp+0x2a>
	...

0800de94 <__mdiff>:
 800de94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de98:	4689      	mov	r9, r1
 800de9a:	4606      	mov	r6, r0
 800de9c:	4611      	mov	r1, r2
 800de9e:	4648      	mov	r0, r9
 800dea0:	4614      	mov	r4, r2
 800dea2:	f7ff ffdb 	bl	800de5c <__mcmp>
 800dea6:	1e05      	subs	r5, r0, #0
 800dea8:	d112      	bne.n	800ded0 <__mdiff+0x3c>
 800deaa:	4629      	mov	r1, r5
 800deac:	4630      	mov	r0, r6
 800deae:	f7ff fd19 	bl	800d8e4 <_Balloc>
 800deb2:	4602      	mov	r2, r0
 800deb4:	b928      	cbnz	r0, 800dec2 <__mdiff+0x2e>
 800deb6:	4b3f      	ldr	r3, [pc, #252]	@ (800dfb4 <__mdiff+0x120>)
 800deb8:	f240 2137 	movw	r1, #567	@ 0x237
 800debc:	483e      	ldr	r0, [pc, #248]	@ (800dfb8 <__mdiff+0x124>)
 800debe:	f001 fc4f 	bl	800f760 <__assert_func>
 800dec2:	2301      	movs	r3, #1
 800dec4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dec8:	4610      	mov	r0, r2
 800deca:	b003      	add	sp, #12
 800decc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded0:	bfbc      	itt	lt
 800ded2:	464b      	movlt	r3, r9
 800ded4:	46a1      	movlt	r9, r4
 800ded6:	4630      	mov	r0, r6
 800ded8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dedc:	bfba      	itte	lt
 800dede:	461c      	movlt	r4, r3
 800dee0:	2501      	movlt	r5, #1
 800dee2:	2500      	movge	r5, #0
 800dee4:	f7ff fcfe 	bl	800d8e4 <_Balloc>
 800dee8:	4602      	mov	r2, r0
 800deea:	b918      	cbnz	r0, 800def4 <__mdiff+0x60>
 800deec:	4b31      	ldr	r3, [pc, #196]	@ (800dfb4 <__mdiff+0x120>)
 800deee:	f240 2145 	movw	r1, #581	@ 0x245
 800def2:	e7e3      	b.n	800debc <__mdiff+0x28>
 800def4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800def8:	6926      	ldr	r6, [r4, #16]
 800defa:	60c5      	str	r5, [r0, #12]
 800defc:	f109 0310 	add.w	r3, r9, #16
 800df00:	f109 0514 	add.w	r5, r9, #20
 800df04:	f104 0e14 	add.w	lr, r4, #20
 800df08:	f100 0b14 	add.w	fp, r0, #20
 800df0c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800df10:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800df14:	9301      	str	r3, [sp, #4]
 800df16:	46d9      	mov	r9, fp
 800df18:	f04f 0c00 	mov.w	ip, #0
 800df1c:	9b01      	ldr	r3, [sp, #4]
 800df1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800df22:	f853 af04 	ldr.w	sl, [r3, #4]!
 800df26:	9301      	str	r3, [sp, #4]
 800df28:	fa1f f38a 	uxth.w	r3, sl
 800df2c:	4619      	mov	r1, r3
 800df2e:	b283      	uxth	r3, r0
 800df30:	1acb      	subs	r3, r1, r3
 800df32:	0c00      	lsrs	r0, r0, #16
 800df34:	4463      	add	r3, ip
 800df36:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800df3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800df3e:	b29b      	uxth	r3, r3
 800df40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800df44:	4576      	cmp	r6, lr
 800df46:	f849 3b04 	str.w	r3, [r9], #4
 800df4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800df4e:	d8e5      	bhi.n	800df1c <__mdiff+0x88>
 800df50:	1b33      	subs	r3, r6, r4
 800df52:	3b15      	subs	r3, #21
 800df54:	f023 0303 	bic.w	r3, r3, #3
 800df58:	3415      	adds	r4, #21
 800df5a:	3304      	adds	r3, #4
 800df5c:	42a6      	cmp	r6, r4
 800df5e:	bf38      	it	cc
 800df60:	2304      	movcc	r3, #4
 800df62:	441d      	add	r5, r3
 800df64:	445b      	add	r3, fp
 800df66:	461e      	mov	r6, r3
 800df68:	462c      	mov	r4, r5
 800df6a:	4544      	cmp	r4, r8
 800df6c:	d30e      	bcc.n	800df8c <__mdiff+0xf8>
 800df6e:	f108 0103 	add.w	r1, r8, #3
 800df72:	1b49      	subs	r1, r1, r5
 800df74:	f021 0103 	bic.w	r1, r1, #3
 800df78:	3d03      	subs	r5, #3
 800df7a:	45a8      	cmp	r8, r5
 800df7c:	bf38      	it	cc
 800df7e:	2100      	movcc	r1, #0
 800df80:	440b      	add	r3, r1
 800df82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df86:	b191      	cbz	r1, 800dfae <__mdiff+0x11a>
 800df88:	6117      	str	r7, [r2, #16]
 800df8a:	e79d      	b.n	800dec8 <__mdiff+0x34>
 800df8c:	f854 1b04 	ldr.w	r1, [r4], #4
 800df90:	46e6      	mov	lr, ip
 800df92:	0c08      	lsrs	r0, r1, #16
 800df94:	fa1c fc81 	uxtah	ip, ip, r1
 800df98:	4471      	add	r1, lr
 800df9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800df9e:	b289      	uxth	r1, r1
 800dfa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dfa4:	f846 1b04 	str.w	r1, [r6], #4
 800dfa8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dfac:	e7dd      	b.n	800df6a <__mdiff+0xd6>
 800dfae:	3f01      	subs	r7, #1
 800dfb0:	e7e7      	b.n	800df82 <__mdiff+0xee>
 800dfb2:	bf00      	nop
 800dfb4:	0801053d 	.word	0x0801053d
 800dfb8:	0801054e 	.word	0x0801054e

0800dfbc <__ulp>:
 800dfbc:	b082      	sub	sp, #8
 800dfbe:	ed8d 0b00 	vstr	d0, [sp]
 800dfc2:	9a01      	ldr	r2, [sp, #4]
 800dfc4:	4b0f      	ldr	r3, [pc, #60]	@ (800e004 <__ulp+0x48>)
 800dfc6:	4013      	ands	r3, r2
 800dfc8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	dc08      	bgt.n	800dfe2 <__ulp+0x26>
 800dfd0:	425b      	negs	r3, r3
 800dfd2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800dfd6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dfda:	da04      	bge.n	800dfe6 <__ulp+0x2a>
 800dfdc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800dfe0:	4113      	asrs	r3, r2
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	e008      	b.n	800dff8 <__ulp+0x3c>
 800dfe6:	f1a2 0314 	sub.w	r3, r2, #20
 800dfea:	2b1e      	cmp	r3, #30
 800dfec:	bfda      	itte	le
 800dfee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800dff2:	40da      	lsrle	r2, r3
 800dff4:	2201      	movgt	r2, #1
 800dff6:	2300      	movs	r3, #0
 800dff8:	4619      	mov	r1, r3
 800dffa:	4610      	mov	r0, r2
 800dffc:	ec41 0b10 	vmov	d0, r0, r1
 800e000:	b002      	add	sp, #8
 800e002:	4770      	bx	lr
 800e004:	7ff00000 	.word	0x7ff00000

0800e008 <__b2d>:
 800e008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e00c:	6906      	ldr	r6, [r0, #16]
 800e00e:	f100 0814 	add.w	r8, r0, #20
 800e012:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e016:	1f37      	subs	r7, r6, #4
 800e018:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e01c:	4610      	mov	r0, r2
 800e01e:	f7ff fd53 	bl	800dac8 <__hi0bits>
 800e022:	f1c0 0320 	rsb	r3, r0, #32
 800e026:	280a      	cmp	r0, #10
 800e028:	600b      	str	r3, [r1, #0]
 800e02a:	491b      	ldr	r1, [pc, #108]	@ (800e098 <__b2d+0x90>)
 800e02c:	dc15      	bgt.n	800e05a <__b2d+0x52>
 800e02e:	f1c0 0c0b 	rsb	ip, r0, #11
 800e032:	fa22 f30c 	lsr.w	r3, r2, ip
 800e036:	45b8      	cmp	r8, r7
 800e038:	ea43 0501 	orr.w	r5, r3, r1
 800e03c:	bf34      	ite	cc
 800e03e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e042:	2300      	movcs	r3, #0
 800e044:	3015      	adds	r0, #21
 800e046:	fa02 f000 	lsl.w	r0, r2, r0
 800e04a:	fa23 f30c 	lsr.w	r3, r3, ip
 800e04e:	4303      	orrs	r3, r0
 800e050:	461c      	mov	r4, r3
 800e052:	ec45 4b10 	vmov	d0, r4, r5
 800e056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e05a:	45b8      	cmp	r8, r7
 800e05c:	bf3a      	itte	cc
 800e05e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e062:	f1a6 0708 	subcc.w	r7, r6, #8
 800e066:	2300      	movcs	r3, #0
 800e068:	380b      	subs	r0, #11
 800e06a:	d012      	beq.n	800e092 <__b2d+0x8a>
 800e06c:	f1c0 0120 	rsb	r1, r0, #32
 800e070:	fa23 f401 	lsr.w	r4, r3, r1
 800e074:	4082      	lsls	r2, r0
 800e076:	4322      	orrs	r2, r4
 800e078:	4547      	cmp	r7, r8
 800e07a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e07e:	bf8c      	ite	hi
 800e080:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e084:	2200      	movls	r2, #0
 800e086:	4083      	lsls	r3, r0
 800e088:	40ca      	lsrs	r2, r1
 800e08a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e08e:	4313      	orrs	r3, r2
 800e090:	e7de      	b.n	800e050 <__b2d+0x48>
 800e092:	ea42 0501 	orr.w	r5, r2, r1
 800e096:	e7db      	b.n	800e050 <__b2d+0x48>
 800e098:	3ff00000 	.word	0x3ff00000

0800e09c <__d2b>:
 800e09c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e0a0:	460f      	mov	r7, r1
 800e0a2:	2101      	movs	r1, #1
 800e0a4:	ec59 8b10 	vmov	r8, r9, d0
 800e0a8:	4616      	mov	r6, r2
 800e0aa:	f7ff fc1b 	bl	800d8e4 <_Balloc>
 800e0ae:	4604      	mov	r4, r0
 800e0b0:	b930      	cbnz	r0, 800e0c0 <__d2b+0x24>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	4b23      	ldr	r3, [pc, #140]	@ (800e144 <__d2b+0xa8>)
 800e0b6:	4824      	ldr	r0, [pc, #144]	@ (800e148 <__d2b+0xac>)
 800e0b8:	f240 310f 	movw	r1, #783	@ 0x30f
 800e0bc:	f001 fb50 	bl	800f760 <__assert_func>
 800e0c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e0c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e0c8:	b10d      	cbz	r5, 800e0ce <__d2b+0x32>
 800e0ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e0ce:	9301      	str	r3, [sp, #4]
 800e0d0:	f1b8 0300 	subs.w	r3, r8, #0
 800e0d4:	d023      	beq.n	800e11e <__d2b+0x82>
 800e0d6:	4668      	mov	r0, sp
 800e0d8:	9300      	str	r3, [sp, #0]
 800e0da:	f7ff fd14 	bl	800db06 <__lo0bits>
 800e0de:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e0e2:	b1d0      	cbz	r0, 800e11a <__d2b+0x7e>
 800e0e4:	f1c0 0320 	rsb	r3, r0, #32
 800e0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e0ec:	430b      	orrs	r3, r1
 800e0ee:	40c2      	lsrs	r2, r0
 800e0f0:	6163      	str	r3, [r4, #20]
 800e0f2:	9201      	str	r2, [sp, #4]
 800e0f4:	9b01      	ldr	r3, [sp, #4]
 800e0f6:	61a3      	str	r3, [r4, #24]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	bf0c      	ite	eq
 800e0fc:	2201      	moveq	r2, #1
 800e0fe:	2202      	movne	r2, #2
 800e100:	6122      	str	r2, [r4, #16]
 800e102:	b1a5      	cbz	r5, 800e12e <__d2b+0x92>
 800e104:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e108:	4405      	add	r5, r0
 800e10a:	603d      	str	r5, [r7, #0]
 800e10c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e110:	6030      	str	r0, [r6, #0]
 800e112:	4620      	mov	r0, r4
 800e114:	b003      	add	sp, #12
 800e116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e11a:	6161      	str	r1, [r4, #20]
 800e11c:	e7ea      	b.n	800e0f4 <__d2b+0x58>
 800e11e:	a801      	add	r0, sp, #4
 800e120:	f7ff fcf1 	bl	800db06 <__lo0bits>
 800e124:	9b01      	ldr	r3, [sp, #4]
 800e126:	6163      	str	r3, [r4, #20]
 800e128:	3020      	adds	r0, #32
 800e12a:	2201      	movs	r2, #1
 800e12c:	e7e8      	b.n	800e100 <__d2b+0x64>
 800e12e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e132:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e136:	6038      	str	r0, [r7, #0]
 800e138:	6918      	ldr	r0, [r3, #16]
 800e13a:	f7ff fcc5 	bl	800dac8 <__hi0bits>
 800e13e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e142:	e7e5      	b.n	800e110 <__d2b+0x74>
 800e144:	0801053d 	.word	0x0801053d
 800e148:	0801054e 	.word	0x0801054e

0800e14c <__ratio>:
 800e14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e150:	b085      	sub	sp, #20
 800e152:	e9cd 1000 	strd	r1, r0, [sp]
 800e156:	a902      	add	r1, sp, #8
 800e158:	f7ff ff56 	bl	800e008 <__b2d>
 800e15c:	9800      	ldr	r0, [sp, #0]
 800e15e:	a903      	add	r1, sp, #12
 800e160:	ec55 4b10 	vmov	r4, r5, d0
 800e164:	f7ff ff50 	bl	800e008 <__b2d>
 800e168:	9b01      	ldr	r3, [sp, #4]
 800e16a:	6919      	ldr	r1, [r3, #16]
 800e16c:	9b00      	ldr	r3, [sp, #0]
 800e16e:	691b      	ldr	r3, [r3, #16]
 800e170:	1ac9      	subs	r1, r1, r3
 800e172:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e176:	1a9b      	subs	r3, r3, r2
 800e178:	ec5b ab10 	vmov	sl, fp, d0
 800e17c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e180:	2b00      	cmp	r3, #0
 800e182:	bfce      	itee	gt
 800e184:	462a      	movgt	r2, r5
 800e186:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e18a:	465a      	movle	r2, fp
 800e18c:	462f      	mov	r7, r5
 800e18e:	46d9      	mov	r9, fp
 800e190:	bfcc      	ite	gt
 800e192:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e196:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e19a:	464b      	mov	r3, r9
 800e19c:	4652      	mov	r2, sl
 800e19e:	4620      	mov	r0, r4
 800e1a0:	4639      	mov	r1, r7
 800e1a2:	f7f2 fb53 	bl	800084c <__aeabi_ddiv>
 800e1a6:	ec41 0b10 	vmov	d0, r0, r1
 800e1aa:	b005      	add	sp, #20
 800e1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e1b0 <__copybits>:
 800e1b0:	3901      	subs	r1, #1
 800e1b2:	b570      	push	{r4, r5, r6, lr}
 800e1b4:	1149      	asrs	r1, r1, #5
 800e1b6:	6914      	ldr	r4, [r2, #16]
 800e1b8:	3101      	adds	r1, #1
 800e1ba:	f102 0314 	add.w	r3, r2, #20
 800e1be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e1c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e1c6:	1f05      	subs	r5, r0, #4
 800e1c8:	42a3      	cmp	r3, r4
 800e1ca:	d30c      	bcc.n	800e1e6 <__copybits+0x36>
 800e1cc:	1aa3      	subs	r3, r4, r2
 800e1ce:	3b11      	subs	r3, #17
 800e1d0:	f023 0303 	bic.w	r3, r3, #3
 800e1d4:	3211      	adds	r2, #17
 800e1d6:	42a2      	cmp	r2, r4
 800e1d8:	bf88      	it	hi
 800e1da:	2300      	movhi	r3, #0
 800e1dc:	4418      	add	r0, r3
 800e1de:	2300      	movs	r3, #0
 800e1e0:	4288      	cmp	r0, r1
 800e1e2:	d305      	bcc.n	800e1f0 <__copybits+0x40>
 800e1e4:	bd70      	pop	{r4, r5, r6, pc}
 800e1e6:	f853 6b04 	ldr.w	r6, [r3], #4
 800e1ea:	f845 6f04 	str.w	r6, [r5, #4]!
 800e1ee:	e7eb      	b.n	800e1c8 <__copybits+0x18>
 800e1f0:	f840 3b04 	str.w	r3, [r0], #4
 800e1f4:	e7f4      	b.n	800e1e0 <__copybits+0x30>

0800e1f6 <__any_on>:
 800e1f6:	f100 0214 	add.w	r2, r0, #20
 800e1fa:	6900      	ldr	r0, [r0, #16]
 800e1fc:	114b      	asrs	r3, r1, #5
 800e1fe:	4298      	cmp	r0, r3
 800e200:	b510      	push	{r4, lr}
 800e202:	db11      	blt.n	800e228 <__any_on+0x32>
 800e204:	dd0a      	ble.n	800e21c <__any_on+0x26>
 800e206:	f011 011f 	ands.w	r1, r1, #31
 800e20a:	d007      	beq.n	800e21c <__any_on+0x26>
 800e20c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e210:	fa24 f001 	lsr.w	r0, r4, r1
 800e214:	fa00 f101 	lsl.w	r1, r0, r1
 800e218:	428c      	cmp	r4, r1
 800e21a:	d10b      	bne.n	800e234 <__any_on+0x3e>
 800e21c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e220:	4293      	cmp	r3, r2
 800e222:	d803      	bhi.n	800e22c <__any_on+0x36>
 800e224:	2000      	movs	r0, #0
 800e226:	bd10      	pop	{r4, pc}
 800e228:	4603      	mov	r3, r0
 800e22a:	e7f7      	b.n	800e21c <__any_on+0x26>
 800e22c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e230:	2900      	cmp	r1, #0
 800e232:	d0f5      	beq.n	800e220 <__any_on+0x2a>
 800e234:	2001      	movs	r0, #1
 800e236:	e7f6      	b.n	800e226 <__any_on+0x30>

0800e238 <sulp>:
 800e238:	b570      	push	{r4, r5, r6, lr}
 800e23a:	4604      	mov	r4, r0
 800e23c:	460d      	mov	r5, r1
 800e23e:	ec45 4b10 	vmov	d0, r4, r5
 800e242:	4616      	mov	r6, r2
 800e244:	f7ff feba 	bl	800dfbc <__ulp>
 800e248:	ec51 0b10 	vmov	r0, r1, d0
 800e24c:	b17e      	cbz	r6, 800e26e <sulp+0x36>
 800e24e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e252:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e256:	2b00      	cmp	r3, #0
 800e258:	dd09      	ble.n	800e26e <sulp+0x36>
 800e25a:	051b      	lsls	r3, r3, #20
 800e25c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e260:	2400      	movs	r4, #0
 800e262:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e266:	4622      	mov	r2, r4
 800e268:	462b      	mov	r3, r5
 800e26a:	f7f2 f9c5 	bl	80005f8 <__aeabi_dmul>
 800e26e:	ec41 0b10 	vmov	d0, r0, r1
 800e272:	bd70      	pop	{r4, r5, r6, pc}
 800e274:	0000      	movs	r0, r0
	...

0800e278 <_strtod_l>:
 800e278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e27c:	b09f      	sub	sp, #124	@ 0x7c
 800e27e:	460c      	mov	r4, r1
 800e280:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e282:	2200      	movs	r2, #0
 800e284:	921a      	str	r2, [sp, #104]	@ 0x68
 800e286:	9005      	str	r0, [sp, #20]
 800e288:	f04f 0a00 	mov.w	sl, #0
 800e28c:	f04f 0b00 	mov.w	fp, #0
 800e290:	460a      	mov	r2, r1
 800e292:	9219      	str	r2, [sp, #100]	@ 0x64
 800e294:	7811      	ldrb	r1, [r2, #0]
 800e296:	292b      	cmp	r1, #43	@ 0x2b
 800e298:	d04a      	beq.n	800e330 <_strtod_l+0xb8>
 800e29a:	d838      	bhi.n	800e30e <_strtod_l+0x96>
 800e29c:	290d      	cmp	r1, #13
 800e29e:	d832      	bhi.n	800e306 <_strtod_l+0x8e>
 800e2a0:	2908      	cmp	r1, #8
 800e2a2:	d832      	bhi.n	800e30a <_strtod_l+0x92>
 800e2a4:	2900      	cmp	r1, #0
 800e2a6:	d03b      	beq.n	800e320 <_strtod_l+0xa8>
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	920e      	str	r2, [sp, #56]	@ 0x38
 800e2ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e2ae:	782a      	ldrb	r2, [r5, #0]
 800e2b0:	2a30      	cmp	r2, #48	@ 0x30
 800e2b2:	f040 80b2 	bne.w	800e41a <_strtod_l+0x1a2>
 800e2b6:	786a      	ldrb	r2, [r5, #1]
 800e2b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e2bc:	2a58      	cmp	r2, #88	@ 0x58
 800e2be:	d16e      	bne.n	800e39e <_strtod_l+0x126>
 800e2c0:	9302      	str	r3, [sp, #8]
 800e2c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2c4:	9301      	str	r3, [sp, #4]
 800e2c6:	ab1a      	add	r3, sp, #104	@ 0x68
 800e2c8:	9300      	str	r3, [sp, #0]
 800e2ca:	4a8f      	ldr	r2, [pc, #572]	@ (800e508 <_strtod_l+0x290>)
 800e2cc:	9805      	ldr	r0, [sp, #20]
 800e2ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e2d0:	a919      	add	r1, sp, #100	@ 0x64
 800e2d2:	f001 fadf 	bl	800f894 <__gethex>
 800e2d6:	f010 060f 	ands.w	r6, r0, #15
 800e2da:	4604      	mov	r4, r0
 800e2dc:	d005      	beq.n	800e2ea <_strtod_l+0x72>
 800e2de:	2e06      	cmp	r6, #6
 800e2e0:	d128      	bne.n	800e334 <_strtod_l+0xbc>
 800e2e2:	3501      	adds	r5, #1
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	9519      	str	r5, [sp, #100]	@ 0x64
 800e2e8:	930e      	str	r3, [sp, #56]	@ 0x38
 800e2ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	f040 858e 	bne.w	800ee0e <_strtod_l+0xb96>
 800e2f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2f4:	b1cb      	cbz	r3, 800e32a <_strtod_l+0xb2>
 800e2f6:	4652      	mov	r2, sl
 800e2f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e2fc:	ec43 2b10 	vmov	d0, r2, r3
 800e300:	b01f      	add	sp, #124	@ 0x7c
 800e302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e306:	2920      	cmp	r1, #32
 800e308:	d1ce      	bne.n	800e2a8 <_strtod_l+0x30>
 800e30a:	3201      	adds	r2, #1
 800e30c:	e7c1      	b.n	800e292 <_strtod_l+0x1a>
 800e30e:	292d      	cmp	r1, #45	@ 0x2d
 800e310:	d1ca      	bne.n	800e2a8 <_strtod_l+0x30>
 800e312:	2101      	movs	r1, #1
 800e314:	910e      	str	r1, [sp, #56]	@ 0x38
 800e316:	1c51      	adds	r1, r2, #1
 800e318:	9119      	str	r1, [sp, #100]	@ 0x64
 800e31a:	7852      	ldrb	r2, [r2, #1]
 800e31c:	2a00      	cmp	r2, #0
 800e31e:	d1c5      	bne.n	800e2ac <_strtod_l+0x34>
 800e320:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e322:	9419      	str	r4, [sp, #100]	@ 0x64
 800e324:	2b00      	cmp	r3, #0
 800e326:	f040 8570 	bne.w	800ee0a <_strtod_l+0xb92>
 800e32a:	4652      	mov	r2, sl
 800e32c:	465b      	mov	r3, fp
 800e32e:	e7e5      	b.n	800e2fc <_strtod_l+0x84>
 800e330:	2100      	movs	r1, #0
 800e332:	e7ef      	b.n	800e314 <_strtod_l+0x9c>
 800e334:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e336:	b13a      	cbz	r2, 800e348 <_strtod_l+0xd0>
 800e338:	2135      	movs	r1, #53	@ 0x35
 800e33a:	a81c      	add	r0, sp, #112	@ 0x70
 800e33c:	f7ff ff38 	bl	800e1b0 <__copybits>
 800e340:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e342:	9805      	ldr	r0, [sp, #20]
 800e344:	f7ff fb0e 	bl	800d964 <_Bfree>
 800e348:	3e01      	subs	r6, #1
 800e34a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e34c:	2e04      	cmp	r6, #4
 800e34e:	d806      	bhi.n	800e35e <_strtod_l+0xe6>
 800e350:	e8df f006 	tbb	[pc, r6]
 800e354:	201d0314 	.word	0x201d0314
 800e358:	14          	.byte	0x14
 800e359:	00          	.byte	0x00
 800e35a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e35e:	05e1      	lsls	r1, r4, #23
 800e360:	bf48      	it	mi
 800e362:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e366:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e36a:	0d1b      	lsrs	r3, r3, #20
 800e36c:	051b      	lsls	r3, r3, #20
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d1bb      	bne.n	800e2ea <_strtod_l+0x72>
 800e372:	f7fe fbd3 	bl	800cb1c <__errno>
 800e376:	2322      	movs	r3, #34	@ 0x22
 800e378:	6003      	str	r3, [r0, #0]
 800e37a:	e7b6      	b.n	800e2ea <_strtod_l+0x72>
 800e37c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e380:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e384:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e388:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e38c:	e7e7      	b.n	800e35e <_strtod_l+0xe6>
 800e38e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800e510 <_strtod_l+0x298>
 800e392:	e7e4      	b.n	800e35e <_strtod_l+0xe6>
 800e394:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e398:	f04f 3aff 	mov.w	sl, #4294967295
 800e39c:	e7df      	b.n	800e35e <_strtod_l+0xe6>
 800e39e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3a0:	1c5a      	adds	r2, r3, #1
 800e3a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e3a4:	785b      	ldrb	r3, [r3, #1]
 800e3a6:	2b30      	cmp	r3, #48	@ 0x30
 800e3a8:	d0f9      	beq.n	800e39e <_strtod_l+0x126>
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d09d      	beq.n	800e2ea <_strtod_l+0x72>
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	2700      	movs	r7, #0
 800e3b2:	9308      	str	r3, [sp, #32]
 800e3b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3b6:	930c      	str	r3, [sp, #48]	@ 0x30
 800e3b8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800e3ba:	46b9      	mov	r9, r7
 800e3bc:	220a      	movs	r2, #10
 800e3be:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e3c0:	7805      	ldrb	r5, [r0, #0]
 800e3c2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e3c6:	b2d9      	uxtb	r1, r3
 800e3c8:	2909      	cmp	r1, #9
 800e3ca:	d928      	bls.n	800e41e <_strtod_l+0x1a6>
 800e3cc:	494f      	ldr	r1, [pc, #316]	@ (800e50c <_strtod_l+0x294>)
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	f001 f9ac 	bl	800f72c <strncmp>
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	d032      	beq.n	800e43e <_strtod_l+0x1c6>
 800e3d8:	2000      	movs	r0, #0
 800e3da:	462a      	mov	r2, r5
 800e3dc:	900a      	str	r0, [sp, #40]	@ 0x28
 800e3de:	464d      	mov	r5, r9
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2a65      	cmp	r2, #101	@ 0x65
 800e3e4:	d001      	beq.n	800e3ea <_strtod_l+0x172>
 800e3e6:	2a45      	cmp	r2, #69	@ 0x45
 800e3e8:	d114      	bne.n	800e414 <_strtod_l+0x19c>
 800e3ea:	b91d      	cbnz	r5, 800e3f4 <_strtod_l+0x17c>
 800e3ec:	9a08      	ldr	r2, [sp, #32]
 800e3ee:	4302      	orrs	r2, r0
 800e3f0:	d096      	beq.n	800e320 <_strtod_l+0xa8>
 800e3f2:	2500      	movs	r5, #0
 800e3f4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e3f6:	1c62      	adds	r2, r4, #1
 800e3f8:	9219      	str	r2, [sp, #100]	@ 0x64
 800e3fa:	7862      	ldrb	r2, [r4, #1]
 800e3fc:	2a2b      	cmp	r2, #43	@ 0x2b
 800e3fe:	d07a      	beq.n	800e4f6 <_strtod_l+0x27e>
 800e400:	2a2d      	cmp	r2, #45	@ 0x2d
 800e402:	d07e      	beq.n	800e502 <_strtod_l+0x28a>
 800e404:	f04f 0c00 	mov.w	ip, #0
 800e408:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e40c:	2909      	cmp	r1, #9
 800e40e:	f240 8085 	bls.w	800e51c <_strtod_l+0x2a4>
 800e412:	9419      	str	r4, [sp, #100]	@ 0x64
 800e414:	f04f 0800 	mov.w	r8, #0
 800e418:	e0a5      	b.n	800e566 <_strtod_l+0x2ee>
 800e41a:	2300      	movs	r3, #0
 800e41c:	e7c8      	b.n	800e3b0 <_strtod_l+0x138>
 800e41e:	f1b9 0f08 	cmp.w	r9, #8
 800e422:	bfd8      	it	le
 800e424:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800e426:	f100 0001 	add.w	r0, r0, #1
 800e42a:	bfda      	itte	le
 800e42c:	fb02 3301 	mlale	r3, r2, r1, r3
 800e430:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800e432:	fb02 3707 	mlagt	r7, r2, r7, r3
 800e436:	f109 0901 	add.w	r9, r9, #1
 800e43a:	9019      	str	r0, [sp, #100]	@ 0x64
 800e43c:	e7bf      	b.n	800e3be <_strtod_l+0x146>
 800e43e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e440:	1c5a      	adds	r2, r3, #1
 800e442:	9219      	str	r2, [sp, #100]	@ 0x64
 800e444:	785a      	ldrb	r2, [r3, #1]
 800e446:	f1b9 0f00 	cmp.w	r9, #0
 800e44a:	d03b      	beq.n	800e4c4 <_strtod_l+0x24c>
 800e44c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e44e:	464d      	mov	r5, r9
 800e450:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e454:	2b09      	cmp	r3, #9
 800e456:	d912      	bls.n	800e47e <_strtod_l+0x206>
 800e458:	2301      	movs	r3, #1
 800e45a:	e7c2      	b.n	800e3e2 <_strtod_l+0x16a>
 800e45c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e45e:	1c5a      	adds	r2, r3, #1
 800e460:	9219      	str	r2, [sp, #100]	@ 0x64
 800e462:	785a      	ldrb	r2, [r3, #1]
 800e464:	3001      	adds	r0, #1
 800e466:	2a30      	cmp	r2, #48	@ 0x30
 800e468:	d0f8      	beq.n	800e45c <_strtod_l+0x1e4>
 800e46a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e46e:	2b08      	cmp	r3, #8
 800e470:	f200 84d2 	bhi.w	800ee18 <_strtod_l+0xba0>
 800e474:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e476:	900a      	str	r0, [sp, #40]	@ 0x28
 800e478:	2000      	movs	r0, #0
 800e47a:	930c      	str	r3, [sp, #48]	@ 0x30
 800e47c:	4605      	mov	r5, r0
 800e47e:	3a30      	subs	r2, #48	@ 0x30
 800e480:	f100 0301 	add.w	r3, r0, #1
 800e484:	d018      	beq.n	800e4b8 <_strtod_l+0x240>
 800e486:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e488:	4419      	add	r1, r3
 800e48a:	910a      	str	r1, [sp, #40]	@ 0x28
 800e48c:	462e      	mov	r6, r5
 800e48e:	f04f 0e0a 	mov.w	lr, #10
 800e492:	1c71      	adds	r1, r6, #1
 800e494:	eba1 0c05 	sub.w	ip, r1, r5
 800e498:	4563      	cmp	r3, ip
 800e49a:	dc15      	bgt.n	800e4c8 <_strtod_l+0x250>
 800e49c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800e4a0:	182b      	adds	r3, r5, r0
 800e4a2:	2b08      	cmp	r3, #8
 800e4a4:	f105 0501 	add.w	r5, r5, #1
 800e4a8:	4405      	add	r5, r0
 800e4aa:	dc1a      	bgt.n	800e4e2 <_strtod_l+0x26a>
 800e4ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e4ae:	230a      	movs	r3, #10
 800e4b0:	fb03 2301 	mla	r3, r3, r1, r2
 800e4b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e4ba:	1c51      	adds	r1, r2, #1
 800e4bc:	9119      	str	r1, [sp, #100]	@ 0x64
 800e4be:	7852      	ldrb	r2, [r2, #1]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	e7c5      	b.n	800e450 <_strtod_l+0x1d8>
 800e4c4:	4648      	mov	r0, r9
 800e4c6:	e7ce      	b.n	800e466 <_strtod_l+0x1ee>
 800e4c8:	2e08      	cmp	r6, #8
 800e4ca:	dc05      	bgt.n	800e4d8 <_strtod_l+0x260>
 800e4cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e4ce:	fb0e f606 	mul.w	r6, lr, r6
 800e4d2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800e4d4:	460e      	mov	r6, r1
 800e4d6:	e7dc      	b.n	800e492 <_strtod_l+0x21a>
 800e4d8:	2910      	cmp	r1, #16
 800e4da:	bfd8      	it	le
 800e4dc:	fb0e f707 	mulle.w	r7, lr, r7
 800e4e0:	e7f8      	b.n	800e4d4 <_strtod_l+0x25c>
 800e4e2:	2b0f      	cmp	r3, #15
 800e4e4:	bfdc      	itt	le
 800e4e6:	230a      	movle	r3, #10
 800e4e8:	fb03 2707 	mlale	r7, r3, r7, r2
 800e4ec:	e7e3      	b.n	800e4b6 <_strtod_l+0x23e>
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	e77a      	b.n	800e3ec <_strtod_l+0x174>
 800e4f6:	f04f 0c00 	mov.w	ip, #0
 800e4fa:	1ca2      	adds	r2, r4, #2
 800e4fc:	9219      	str	r2, [sp, #100]	@ 0x64
 800e4fe:	78a2      	ldrb	r2, [r4, #2]
 800e500:	e782      	b.n	800e408 <_strtod_l+0x190>
 800e502:	f04f 0c01 	mov.w	ip, #1
 800e506:	e7f8      	b.n	800e4fa <_strtod_l+0x282>
 800e508:	08010774 	.word	0x08010774
 800e50c:	080105a7 	.word	0x080105a7
 800e510:	7ff00000 	.word	0x7ff00000
 800e514:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e516:	1c51      	adds	r1, r2, #1
 800e518:	9119      	str	r1, [sp, #100]	@ 0x64
 800e51a:	7852      	ldrb	r2, [r2, #1]
 800e51c:	2a30      	cmp	r2, #48	@ 0x30
 800e51e:	d0f9      	beq.n	800e514 <_strtod_l+0x29c>
 800e520:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e524:	2908      	cmp	r1, #8
 800e526:	f63f af75 	bhi.w	800e414 <_strtod_l+0x19c>
 800e52a:	3a30      	subs	r2, #48	@ 0x30
 800e52c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e52e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e530:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e532:	f04f 080a 	mov.w	r8, #10
 800e536:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e538:	1c56      	adds	r6, r2, #1
 800e53a:	9619      	str	r6, [sp, #100]	@ 0x64
 800e53c:	7852      	ldrb	r2, [r2, #1]
 800e53e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e542:	f1be 0f09 	cmp.w	lr, #9
 800e546:	d939      	bls.n	800e5bc <_strtod_l+0x344>
 800e548:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e54a:	1a76      	subs	r6, r6, r1
 800e54c:	2e08      	cmp	r6, #8
 800e54e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e552:	dc03      	bgt.n	800e55c <_strtod_l+0x2e4>
 800e554:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e556:	4588      	cmp	r8, r1
 800e558:	bfa8      	it	ge
 800e55a:	4688      	movge	r8, r1
 800e55c:	f1bc 0f00 	cmp.w	ip, #0
 800e560:	d001      	beq.n	800e566 <_strtod_l+0x2ee>
 800e562:	f1c8 0800 	rsb	r8, r8, #0
 800e566:	2d00      	cmp	r5, #0
 800e568:	d14e      	bne.n	800e608 <_strtod_l+0x390>
 800e56a:	9908      	ldr	r1, [sp, #32]
 800e56c:	4308      	orrs	r0, r1
 800e56e:	f47f aebc 	bne.w	800e2ea <_strtod_l+0x72>
 800e572:	2b00      	cmp	r3, #0
 800e574:	f47f aed4 	bne.w	800e320 <_strtod_l+0xa8>
 800e578:	2a69      	cmp	r2, #105	@ 0x69
 800e57a:	d028      	beq.n	800e5ce <_strtod_l+0x356>
 800e57c:	dc25      	bgt.n	800e5ca <_strtod_l+0x352>
 800e57e:	2a49      	cmp	r2, #73	@ 0x49
 800e580:	d025      	beq.n	800e5ce <_strtod_l+0x356>
 800e582:	2a4e      	cmp	r2, #78	@ 0x4e
 800e584:	f47f aecc 	bne.w	800e320 <_strtod_l+0xa8>
 800e588:	499a      	ldr	r1, [pc, #616]	@ (800e7f4 <_strtod_l+0x57c>)
 800e58a:	a819      	add	r0, sp, #100	@ 0x64
 800e58c:	f001 fba4 	bl	800fcd8 <__match>
 800e590:	2800      	cmp	r0, #0
 800e592:	f43f aec5 	beq.w	800e320 <_strtod_l+0xa8>
 800e596:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	2b28      	cmp	r3, #40	@ 0x28
 800e59c:	d12e      	bne.n	800e5fc <_strtod_l+0x384>
 800e59e:	4996      	ldr	r1, [pc, #600]	@ (800e7f8 <_strtod_l+0x580>)
 800e5a0:	aa1c      	add	r2, sp, #112	@ 0x70
 800e5a2:	a819      	add	r0, sp, #100	@ 0x64
 800e5a4:	f001 fbac 	bl	800fd00 <__hexnan>
 800e5a8:	2805      	cmp	r0, #5
 800e5aa:	d127      	bne.n	800e5fc <_strtod_l+0x384>
 800e5ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e5ae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e5b2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e5b6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e5ba:	e696      	b.n	800e2ea <_strtod_l+0x72>
 800e5bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e5be:	fb08 2101 	mla	r1, r8, r1, r2
 800e5c2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e5c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800e5c8:	e7b5      	b.n	800e536 <_strtod_l+0x2be>
 800e5ca:	2a6e      	cmp	r2, #110	@ 0x6e
 800e5cc:	e7da      	b.n	800e584 <_strtod_l+0x30c>
 800e5ce:	498b      	ldr	r1, [pc, #556]	@ (800e7fc <_strtod_l+0x584>)
 800e5d0:	a819      	add	r0, sp, #100	@ 0x64
 800e5d2:	f001 fb81 	bl	800fcd8 <__match>
 800e5d6:	2800      	cmp	r0, #0
 800e5d8:	f43f aea2 	beq.w	800e320 <_strtod_l+0xa8>
 800e5dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e5de:	4988      	ldr	r1, [pc, #544]	@ (800e800 <_strtod_l+0x588>)
 800e5e0:	3b01      	subs	r3, #1
 800e5e2:	a819      	add	r0, sp, #100	@ 0x64
 800e5e4:	9319      	str	r3, [sp, #100]	@ 0x64
 800e5e6:	f001 fb77 	bl	800fcd8 <__match>
 800e5ea:	b910      	cbnz	r0, 800e5f2 <_strtod_l+0x37a>
 800e5ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	9319      	str	r3, [sp, #100]	@ 0x64
 800e5f2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800e810 <_strtod_l+0x598>
 800e5f6:	f04f 0a00 	mov.w	sl, #0
 800e5fa:	e676      	b.n	800e2ea <_strtod_l+0x72>
 800e5fc:	4881      	ldr	r0, [pc, #516]	@ (800e804 <_strtod_l+0x58c>)
 800e5fe:	f001 f8a7 	bl	800f750 <nan>
 800e602:	ec5b ab10 	vmov	sl, fp, d0
 800e606:	e670      	b.n	800e2ea <_strtod_l+0x72>
 800e608:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e60a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e60c:	eba8 0303 	sub.w	r3, r8, r3
 800e610:	f1b9 0f00 	cmp.w	r9, #0
 800e614:	bf08      	it	eq
 800e616:	46a9      	moveq	r9, r5
 800e618:	2d10      	cmp	r5, #16
 800e61a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e61c:	462c      	mov	r4, r5
 800e61e:	bfa8      	it	ge
 800e620:	2410      	movge	r4, #16
 800e622:	f7f1 ff6f 	bl	8000504 <__aeabi_ui2d>
 800e626:	2d09      	cmp	r5, #9
 800e628:	4682      	mov	sl, r0
 800e62a:	468b      	mov	fp, r1
 800e62c:	dc13      	bgt.n	800e656 <_strtod_l+0x3de>
 800e62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e630:	2b00      	cmp	r3, #0
 800e632:	f43f ae5a 	beq.w	800e2ea <_strtod_l+0x72>
 800e636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e638:	dd78      	ble.n	800e72c <_strtod_l+0x4b4>
 800e63a:	2b16      	cmp	r3, #22
 800e63c:	dc5f      	bgt.n	800e6fe <_strtod_l+0x486>
 800e63e:	4972      	ldr	r1, [pc, #456]	@ (800e808 <_strtod_l+0x590>)
 800e640:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e644:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e648:	4652      	mov	r2, sl
 800e64a:	465b      	mov	r3, fp
 800e64c:	f7f1 ffd4 	bl	80005f8 <__aeabi_dmul>
 800e650:	4682      	mov	sl, r0
 800e652:	468b      	mov	fp, r1
 800e654:	e649      	b.n	800e2ea <_strtod_l+0x72>
 800e656:	4b6c      	ldr	r3, [pc, #432]	@ (800e808 <_strtod_l+0x590>)
 800e658:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e65c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e660:	f7f1 ffca 	bl	80005f8 <__aeabi_dmul>
 800e664:	4682      	mov	sl, r0
 800e666:	4638      	mov	r0, r7
 800e668:	468b      	mov	fp, r1
 800e66a:	f7f1 ff4b 	bl	8000504 <__aeabi_ui2d>
 800e66e:	4602      	mov	r2, r0
 800e670:	460b      	mov	r3, r1
 800e672:	4650      	mov	r0, sl
 800e674:	4659      	mov	r1, fp
 800e676:	f7f1 fe09 	bl	800028c <__adddf3>
 800e67a:	2d0f      	cmp	r5, #15
 800e67c:	4682      	mov	sl, r0
 800e67e:	468b      	mov	fp, r1
 800e680:	ddd5      	ble.n	800e62e <_strtod_l+0x3b6>
 800e682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e684:	1b2c      	subs	r4, r5, r4
 800e686:	441c      	add	r4, r3
 800e688:	2c00      	cmp	r4, #0
 800e68a:	f340 8093 	ble.w	800e7b4 <_strtod_l+0x53c>
 800e68e:	f014 030f 	ands.w	r3, r4, #15
 800e692:	d00a      	beq.n	800e6aa <_strtod_l+0x432>
 800e694:	495c      	ldr	r1, [pc, #368]	@ (800e808 <_strtod_l+0x590>)
 800e696:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e69a:	4652      	mov	r2, sl
 800e69c:	465b      	mov	r3, fp
 800e69e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6a2:	f7f1 ffa9 	bl	80005f8 <__aeabi_dmul>
 800e6a6:	4682      	mov	sl, r0
 800e6a8:	468b      	mov	fp, r1
 800e6aa:	f034 040f 	bics.w	r4, r4, #15
 800e6ae:	d073      	beq.n	800e798 <_strtod_l+0x520>
 800e6b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e6b4:	dd49      	ble.n	800e74a <_strtod_l+0x4d2>
 800e6b6:	2400      	movs	r4, #0
 800e6b8:	46a0      	mov	r8, r4
 800e6ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e6bc:	46a1      	mov	r9, r4
 800e6be:	9a05      	ldr	r2, [sp, #20]
 800e6c0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800e810 <_strtod_l+0x598>
 800e6c4:	2322      	movs	r3, #34	@ 0x22
 800e6c6:	6013      	str	r3, [r2, #0]
 800e6c8:	f04f 0a00 	mov.w	sl, #0
 800e6cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	f43f ae0b 	beq.w	800e2ea <_strtod_l+0x72>
 800e6d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e6d6:	9805      	ldr	r0, [sp, #20]
 800e6d8:	f7ff f944 	bl	800d964 <_Bfree>
 800e6dc:	9805      	ldr	r0, [sp, #20]
 800e6de:	4649      	mov	r1, r9
 800e6e0:	f7ff f940 	bl	800d964 <_Bfree>
 800e6e4:	9805      	ldr	r0, [sp, #20]
 800e6e6:	4641      	mov	r1, r8
 800e6e8:	f7ff f93c 	bl	800d964 <_Bfree>
 800e6ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e6ee:	9805      	ldr	r0, [sp, #20]
 800e6f0:	f7ff f938 	bl	800d964 <_Bfree>
 800e6f4:	9805      	ldr	r0, [sp, #20]
 800e6f6:	4621      	mov	r1, r4
 800e6f8:	f7ff f934 	bl	800d964 <_Bfree>
 800e6fc:	e5f5      	b.n	800e2ea <_strtod_l+0x72>
 800e6fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e700:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e704:	4293      	cmp	r3, r2
 800e706:	dbbc      	blt.n	800e682 <_strtod_l+0x40a>
 800e708:	4c3f      	ldr	r4, [pc, #252]	@ (800e808 <_strtod_l+0x590>)
 800e70a:	f1c5 050f 	rsb	r5, r5, #15
 800e70e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e712:	4652      	mov	r2, sl
 800e714:	465b      	mov	r3, fp
 800e716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e71a:	f7f1 ff6d 	bl	80005f8 <__aeabi_dmul>
 800e71e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e720:	1b5d      	subs	r5, r3, r5
 800e722:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e726:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e72a:	e78f      	b.n	800e64c <_strtod_l+0x3d4>
 800e72c:	3316      	adds	r3, #22
 800e72e:	dba8      	blt.n	800e682 <_strtod_l+0x40a>
 800e730:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e732:	eba3 0808 	sub.w	r8, r3, r8
 800e736:	4b34      	ldr	r3, [pc, #208]	@ (800e808 <_strtod_l+0x590>)
 800e738:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e73c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e740:	4650      	mov	r0, sl
 800e742:	4659      	mov	r1, fp
 800e744:	f7f2 f882 	bl	800084c <__aeabi_ddiv>
 800e748:	e782      	b.n	800e650 <_strtod_l+0x3d8>
 800e74a:	2300      	movs	r3, #0
 800e74c:	4f2f      	ldr	r7, [pc, #188]	@ (800e80c <_strtod_l+0x594>)
 800e74e:	1124      	asrs	r4, r4, #4
 800e750:	4650      	mov	r0, sl
 800e752:	4659      	mov	r1, fp
 800e754:	461e      	mov	r6, r3
 800e756:	2c01      	cmp	r4, #1
 800e758:	dc21      	bgt.n	800e79e <_strtod_l+0x526>
 800e75a:	b10b      	cbz	r3, 800e760 <_strtod_l+0x4e8>
 800e75c:	4682      	mov	sl, r0
 800e75e:	468b      	mov	fp, r1
 800e760:	492a      	ldr	r1, [pc, #168]	@ (800e80c <_strtod_l+0x594>)
 800e762:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e766:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e76a:	4652      	mov	r2, sl
 800e76c:	465b      	mov	r3, fp
 800e76e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e772:	f7f1 ff41 	bl	80005f8 <__aeabi_dmul>
 800e776:	4b26      	ldr	r3, [pc, #152]	@ (800e810 <_strtod_l+0x598>)
 800e778:	460a      	mov	r2, r1
 800e77a:	400b      	ands	r3, r1
 800e77c:	4925      	ldr	r1, [pc, #148]	@ (800e814 <_strtod_l+0x59c>)
 800e77e:	428b      	cmp	r3, r1
 800e780:	4682      	mov	sl, r0
 800e782:	d898      	bhi.n	800e6b6 <_strtod_l+0x43e>
 800e784:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e788:	428b      	cmp	r3, r1
 800e78a:	bf86      	itte	hi
 800e78c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800e818 <_strtod_l+0x5a0>
 800e790:	f04f 3aff 	movhi.w	sl, #4294967295
 800e794:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e798:	2300      	movs	r3, #0
 800e79a:	9308      	str	r3, [sp, #32]
 800e79c:	e076      	b.n	800e88c <_strtod_l+0x614>
 800e79e:	07e2      	lsls	r2, r4, #31
 800e7a0:	d504      	bpl.n	800e7ac <_strtod_l+0x534>
 800e7a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7a6:	f7f1 ff27 	bl	80005f8 <__aeabi_dmul>
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	3601      	adds	r6, #1
 800e7ae:	1064      	asrs	r4, r4, #1
 800e7b0:	3708      	adds	r7, #8
 800e7b2:	e7d0      	b.n	800e756 <_strtod_l+0x4de>
 800e7b4:	d0f0      	beq.n	800e798 <_strtod_l+0x520>
 800e7b6:	4264      	negs	r4, r4
 800e7b8:	f014 020f 	ands.w	r2, r4, #15
 800e7bc:	d00a      	beq.n	800e7d4 <_strtod_l+0x55c>
 800e7be:	4b12      	ldr	r3, [pc, #72]	@ (800e808 <_strtod_l+0x590>)
 800e7c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7c4:	4650      	mov	r0, sl
 800e7c6:	4659      	mov	r1, fp
 800e7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7cc:	f7f2 f83e 	bl	800084c <__aeabi_ddiv>
 800e7d0:	4682      	mov	sl, r0
 800e7d2:	468b      	mov	fp, r1
 800e7d4:	1124      	asrs	r4, r4, #4
 800e7d6:	d0df      	beq.n	800e798 <_strtod_l+0x520>
 800e7d8:	2c1f      	cmp	r4, #31
 800e7da:	dd1f      	ble.n	800e81c <_strtod_l+0x5a4>
 800e7dc:	2400      	movs	r4, #0
 800e7de:	46a0      	mov	r8, r4
 800e7e0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e7e2:	46a1      	mov	r9, r4
 800e7e4:	9a05      	ldr	r2, [sp, #20]
 800e7e6:	2322      	movs	r3, #34	@ 0x22
 800e7e8:	f04f 0a00 	mov.w	sl, #0
 800e7ec:	f04f 0b00 	mov.w	fp, #0
 800e7f0:	6013      	str	r3, [r2, #0]
 800e7f2:	e76b      	b.n	800e6cc <_strtod_l+0x454>
 800e7f4:	08010495 	.word	0x08010495
 800e7f8:	08010760 	.word	0x08010760
 800e7fc:	0801048d 	.word	0x0801048d
 800e800:	080104c4 	.word	0x080104c4
 800e804:	080105fd 	.word	0x080105fd
 800e808:	08010698 	.word	0x08010698
 800e80c:	08010670 	.word	0x08010670
 800e810:	7ff00000 	.word	0x7ff00000
 800e814:	7ca00000 	.word	0x7ca00000
 800e818:	7fefffff 	.word	0x7fefffff
 800e81c:	f014 0310 	ands.w	r3, r4, #16
 800e820:	bf18      	it	ne
 800e822:	236a      	movne	r3, #106	@ 0x6a
 800e824:	4ea9      	ldr	r6, [pc, #676]	@ (800eacc <_strtod_l+0x854>)
 800e826:	9308      	str	r3, [sp, #32]
 800e828:	4650      	mov	r0, sl
 800e82a:	4659      	mov	r1, fp
 800e82c:	2300      	movs	r3, #0
 800e82e:	07e7      	lsls	r7, r4, #31
 800e830:	d504      	bpl.n	800e83c <_strtod_l+0x5c4>
 800e832:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e836:	f7f1 fedf 	bl	80005f8 <__aeabi_dmul>
 800e83a:	2301      	movs	r3, #1
 800e83c:	1064      	asrs	r4, r4, #1
 800e83e:	f106 0608 	add.w	r6, r6, #8
 800e842:	d1f4      	bne.n	800e82e <_strtod_l+0x5b6>
 800e844:	b10b      	cbz	r3, 800e84a <_strtod_l+0x5d2>
 800e846:	4682      	mov	sl, r0
 800e848:	468b      	mov	fp, r1
 800e84a:	9b08      	ldr	r3, [sp, #32]
 800e84c:	b1b3      	cbz	r3, 800e87c <_strtod_l+0x604>
 800e84e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e852:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e856:	2b00      	cmp	r3, #0
 800e858:	4659      	mov	r1, fp
 800e85a:	dd0f      	ble.n	800e87c <_strtod_l+0x604>
 800e85c:	2b1f      	cmp	r3, #31
 800e85e:	dd56      	ble.n	800e90e <_strtod_l+0x696>
 800e860:	2b34      	cmp	r3, #52	@ 0x34
 800e862:	bfde      	ittt	le
 800e864:	f04f 33ff 	movle.w	r3, #4294967295
 800e868:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e86c:	4093      	lslle	r3, r2
 800e86e:	f04f 0a00 	mov.w	sl, #0
 800e872:	bfcc      	ite	gt
 800e874:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e878:	ea03 0b01 	andle.w	fp, r3, r1
 800e87c:	2200      	movs	r2, #0
 800e87e:	2300      	movs	r3, #0
 800e880:	4650      	mov	r0, sl
 800e882:	4659      	mov	r1, fp
 800e884:	f7f2 f920 	bl	8000ac8 <__aeabi_dcmpeq>
 800e888:	2800      	cmp	r0, #0
 800e88a:	d1a7      	bne.n	800e7dc <_strtod_l+0x564>
 800e88c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e88e:	9300      	str	r3, [sp, #0]
 800e890:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e892:	9805      	ldr	r0, [sp, #20]
 800e894:	462b      	mov	r3, r5
 800e896:	464a      	mov	r2, r9
 800e898:	f7ff f8cc 	bl	800da34 <__s2b>
 800e89c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	f43f af09 	beq.w	800e6b6 <_strtod_l+0x43e>
 800e8a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8a8:	2a00      	cmp	r2, #0
 800e8aa:	eba3 0308 	sub.w	r3, r3, r8
 800e8ae:	bfa8      	it	ge
 800e8b0:	2300      	movge	r3, #0
 800e8b2:	9312      	str	r3, [sp, #72]	@ 0x48
 800e8b4:	2400      	movs	r4, #0
 800e8b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e8ba:	9316      	str	r3, [sp, #88]	@ 0x58
 800e8bc:	46a0      	mov	r8, r4
 800e8be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8c0:	9805      	ldr	r0, [sp, #20]
 800e8c2:	6859      	ldr	r1, [r3, #4]
 800e8c4:	f7ff f80e 	bl	800d8e4 <_Balloc>
 800e8c8:	4681      	mov	r9, r0
 800e8ca:	2800      	cmp	r0, #0
 800e8cc:	f43f aef7 	beq.w	800e6be <_strtod_l+0x446>
 800e8d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8d2:	691a      	ldr	r2, [r3, #16]
 800e8d4:	3202      	adds	r2, #2
 800e8d6:	f103 010c 	add.w	r1, r3, #12
 800e8da:	0092      	lsls	r2, r2, #2
 800e8dc:	300c      	adds	r0, #12
 800e8de:	f7fe f94a 	bl	800cb76 <memcpy>
 800e8e2:	ec4b ab10 	vmov	d0, sl, fp
 800e8e6:	9805      	ldr	r0, [sp, #20]
 800e8e8:	aa1c      	add	r2, sp, #112	@ 0x70
 800e8ea:	a91b      	add	r1, sp, #108	@ 0x6c
 800e8ec:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e8f0:	f7ff fbd4 	bl	800e09c <__d2b>
 800e8f4:	901a      	str	r0, [sp, #104]	@ 0x68
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	f43f aee1 	beq.w	800e6be <_strtod_l+0x446>
 800e8fc:	9805      	ldr	r0, [sp, #20]
 800e8fe:	2101      	movs	r1, #1
 800e900:	f7ff f92e 	bl	800db60 <__i2b>
 800e904:	4680      	mov	r8, r0
 800e906:	b948      	cbnz	r0, 800e91c <_strtod_l+0x6a4>
 800e908:	f04f 0800 	mov.w	r8, #0
 800e90c:	e6d7      	b.n	800e6be <_strtod_l+0x446>
 800e90e:	f04f 32ff 	mov.w	r2, #4294967295
 800e912:	fa02 f303 	lsl.w	r3, r2, r3
 800e916:	ea03 0a0a 	and.w	sl, r3, sl
 800e91a:	e7af      	b.n	800e87c <_strtod_l+0x604>
 800e91c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e91e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e920:	2d00      	cmp	r5, #0
 800e922:	bfab      	itete	ge
 800e924:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e926:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e928:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e92a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e92c:	bfac      	ite	ge
 800e92e:	18ef      	addge	r7, r5, r3
 800e930:	1b5e      	sublt	r6, r3, r5
 800e932:	9b08      	ldr	r3, [sp, #32]
 800e934:	1aed      	subs	r5, r5, r3
 800e936:	4415      	add	r5, r2
 800e938:	4b65      	ldr	r3, [pc, #404]	@ (800ead0 <_strtod_l+0x858>)
 800e93a:	3d01      	subs	r5, #1
 800e93c:	429d      	cmp	r5, r3
 800e93e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e942:	da50      	bge.n	800e9e6 <_strtod_l+0x76e>
 800e944:	1b5b      	subs	r3, r3, r5
 800e946:	2b1f      	cmp	r3, #31
 800e948:	eba2 0203 	sub.w	r2, r2, r3
 800e94c:	f04f 0101 	mov.w	r1, #1
 800e950:	dc3d      	bgt.n	800e9ce <_strtod_l+0x756>
 800e952:	fa01 f303 	lsl.w	r3, r1, r3
 800e956:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e958:	2300      	movs	r3, #0
 800e95a:	9310      	str	r3, [sp, #64]	@ 0x40
 800e95c:	18bd      	adds	r5, r7, r2
 800e95e:	9b08      	ldr	r3, [sp, #32]
 800e960:	42af      	cmp	r7, r5
 800e962:	4416      	add	r6, r2
 800e964:	441e      	add	r6, r3
 800e966:	463b      	mov	r3, r7
 800e968:	bfa8      	it	ge
 800e96a:	462b      	movge	r3, r5
 800e96c:	42b3      	cmp	r3, r6
 800e96e:	bfa8      	it	ge
 800e970:	4633      	movge	r3, r6
 800e972:	2b00      	cmp	r3, #0
 800e974:	bfc2      	ittt	gt
 800e976:	1aed      	subgt	r5, r5, r3
 800e978:	1af6      	subgt	r6, r6, r3
 800e97a:	1aff      	subgt	r7, r7, r3
 800e97c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e97e:	2b00      	cmp	r3, #0
 800e980:	dd16      	ble.n	800e9b0 <_strtod_l+0x738>
 800e982:	4641      	mov	r1, r8
 800e984:	9805      	ldr	r0, [sp, #20]
 800e986:	461a      	mov	r2, r3
 800e988:	f7ff f9a2 	bl	800dcd0 <__pow5mult>
 800e98c:	4680      	mov	r8, r0
 800e98e:	2800      	cmp	r0, #0
 800e990:	d0ba      	beq.n	800e908 <_strtod_l+0x690>
 800e992:	4601      	mov	r1, r0
 800e994:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e996:	9805      	ldr	r0, [sp, #20]
 800e998:	f7ff f8f8 	bl	800db8c <__multiply>
 800e99c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	f43f ae8d 	beq.w	800e6be <_strtod_l+0x446>
 800e9a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e9a6:	9805      	ldr	r0, [sp, #20]
 800e9a8:	f7fe ffdc 	bl	800d964 <_Bfree>
 800e9ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800e9b0:	2d00      	cmp	r5, #0
 800e9b2:	dc1d      	bgt.n	800e9f0 <_strtod_l+0x778>
 800e9b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	dd23      	ble.n	800ea02 <_strtod_l+0x78a>
 800e9ba:	4649      	mov	r1, r9
 800e9bc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e9be:	9805      	ldr	r0, [sp, #20]
 800e9c0:	f7ff f986 	bl	800dcd0 <__pow5mult>
 800e9c4:	4681      	mov	r9, r0
 800e9c6:	b9e0      	cbnz	r0, 800ea02 <_strtod_l+0x78a>
 800e9c8:	f04f 0900 	mov.w	r9, #0
 800e9cc:	e677      	b.n	800e6be <_strtod_l+0x446>
 800e9ce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e9d2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e9d6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e9da:	35e2      	adds	r5, #226	@ 0xe2
 800e9dc:	fa01 f305 	lsl.w	r3, r1, r5
 800e9e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e9e2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e9e4:	e7ba      	b.n	800e95c <_strtod_l+0x6e4>
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e9ee:	e7b5      	b.n	800e95c <_strtod_l+0x6e4>
 800e9f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e9f2:	9805      	ldr	r0, [sp, #20]
 800e9f4:	462a      	mov	r2, r5
 800e9f6:	f7ff f9c5 	bl	800dd84 <__lshift>
 800e9fa:	901a      	str	r0, [sp, #104]	@ 0x68
 800e9fc:	2800      	cmp	r0, #0
 800e9fe:	d1d9      	bne.n	800e9b4 <_strtod_l+0x73c>
 800ea00:	e65d      	b.n	800e6be <_strtod_l+0x446>
 800ea02:	2e00      	cmp	r6, #0
 800ea04:	dd07      	ble.n	800ea16 <_strtod_l+0x79e>
 800ea06:	4649      	mov	r1, r9
 800ea08:	9805      	ldr	r0, [sp, #20]
 800ea0a:	4632      	mov	r2, r6
 800ea0c:	f7ff f9ba 	bl	800dd84 <__lshift>
 800ea10:	4681      	mov	r9, r0
 800ea12:	2800      	cmp	r0, #0
 800ea14:	d0d8      	beq.n	800e9c8 <_strtod_l+0x750>
 800ea16:	2f00      	cmp	r7, #0
 800ea18:	dd08      	ble.n	800ea2c <_strtod_l+0x7b4>
 800ea1a:	4641      	mov	r1, r8
 800ea1c:	9805      	ldr	r0, [sp, #20]
 800ea1e:	463a      	mov	r2, r7
 800ea20:	f7ff f9b0 	bl	800dd84 <__lshift>
 800ea24:	4680      	mov	r8, r0
 800ea26:	2800      	cmp	r0, #0
 800ea28:	f43f ae49 	beq.w	800e6be <_strtod_l+0x446>
 800ea2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ea2e:	9805      	ldr	r0, [sp, #20]
 800ea30:	464a      	mov	r2, r9
 800ea32:	f7ff fa2f 	bl	800de94 <__mdiff>
 800ea36:	4604      	mov	r4, r0
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	f43f ae40 	beq.w	800e6be <_strtod_l+0x446>
 800ea3e:	68c3      	ldr	r3, [r0, #12]
 800ea40:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ea42:	2300      	movs	r3, #0
 800ea44:	60c3      	str	r3, [r0, #12]
 800ea46:	4641      	mov	r1, r8
 800ea48:	f7ff fa08 	bl	800de5c <__mcmp>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	da45      	bge.n	800eadc <_strtod_l+0x864>
 800ea50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea52:	ea53 030a 	orrs.w	r3, r3, sl
 800ea56:	d16b      	bne.n	800eb30 <_strtod_l+0x8b8>
 800ea58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d167      	bne.n	800eb30 <_strtod_l+0x8b8>
 800ea60:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ea64:	0d1b      	lsrs	r3, r3, #20
 800ea66:	051b      	lsls	r3, r3, #20
 800ea68:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ea6c:	d960      	bls.n	800eb30 <_strtod_l+0x8b8>
 800ea6e:	6963      	ldr	r3, [r4, #20]
 800ea70:	b913      	cbnz	r3, 800ea78 <_strtod_l+0x800>
 800ea72:	6923      	ldr	r3, [r4, #16]
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	dd5b      	ble.n	800eb30 <_strtod_l+0x8b8>
 800ea78:	4621      	mov	r1, r4
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	9805      	ldr	r0, [sp, #20]
 800ea7e:	f7ff f981 	bl	800dd84 <__lshift>
 800ea82:	4641      	mov	r1, r8
 800ea84:	4604      	mov	r4, r0
 800ea86:	f7ff f9e9 	bl	800de5c <__mcmp>
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	dd50      	ble.n	800eb30 <_strtod_l+0x8b8>
 800ea8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ea92:	9a08      	ldr	r2, [sp, #32]
 800ea94:	0d1b      	lsrs	r3, r3, #20
 800ea96:	051b      	lsls	r3, r3, #20
 800ea98:	2a00      	cmp	r2, #0
 800ea9a:	d06a      	beq.n	800eb72 <_strtod_l+0x8fa>
 800ea9c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eaa0:	d867      	bhi.n	800eb72 <_strtod_l+0x8fa>
 800eaa2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800eaa6:	f67f ae9d 	bls.w	800e7e4 <_strtod_l+0x56c>
 800eaaa:	4b0a      	ldr	r3, [pc, #40]	@ (800ead4 <_strtod_l+0x85c>)
 800eaac:	4650      	mov	r0, sl
 800eaae:	4659      	mov	r1, fp
 800eab0:	2200      	movs	r2, #0
 800eab2:	f7f1 fda1 	bl	80005f8 <__aeabi_dmul>
 800eab6:	4b08      	ldr	r3, [pc, #32]	@ (800ead8 <_strtod_l+0x860>)
 800eab8:	400b      	ands	r3, r1
 800eaba:	4682      	mov	sl, r0
 800eabc:	468b      	mov	fp, r1
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	f47f ae08 	bne.w	800e6d4 <_strtod_l+0x45c>
 800eac4:	9a05      	ldr	r2, [sp, #20]
 800eac6:	2322      	movs	r3, #34	@ 0x22
 800eac8:	6013      	str	r3, [r2, #0]
 800eaca:	e603      	b.n	800e6d4 <_strtod_l+0x45c>
 800eacc:	08010788 	.word	0x08010788
 800ead0:	fffffc02 	.word	0xfffffc02
 800ead4:	39500000 	.word	0x39500000
 800ead8:	7ff00000 	.word	0x7ff00000
 800eadc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800eae0:	d165      	bne.n	800ebae <_strtod_l+0x936>
 800eae2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800eae4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eae8:	b35a      	cbz	r2, 800eb42 <_strtod_l+0x8ca>
 800eaea:	4a9f      	ldr	r2, [pc, #636]	@ (800ed68 <_strtod_l+0xaf0>)
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d12b      	bne.n	800eb48 <_strtod_l+0x8d0>
 800eaf0:	9b08      	ldr	r3, [sp, #32]
 800eaf2:	4651      	mov	r1, sl
 800eaf4:	b303      	cbz	r3, 800eb38 <_strtod_l+0x8c0>
 800eaf6:	4b9d      	ldr	r3, [pc, #628]	@ (800ed6c <_strtod_l+0xaf4>)
 800eaf8:	465a      	mov	r2, fp
 800eafa:	4013      	ands	r3, r2
 800eafc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800eb00:	f04f 32ff 	mov.w	r2, #4294967295
 800eb04:	d81b      	bhi.n	800eb3e <_strtod_l+0x8c6>
 800eb06:	0d1b      	lsrs	r3, r3, #20
 800eb08:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eb0c:	fa02 f303 	lsl.w	r3, r2, r3
 800eb10:	4299      	cmp	r1, r3
 800eb12:	d119      	bne.n	800eb48 <_strtod_l+0x8d0>
 800eb14:	4b96      	ldr	r3, [pc, #600]	@ (800ed70 <_strtod_l+0xaf8>)
 800eb16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d102      	bne.n	800eb22 <_strtod_l+0x8aa>
 800eb1c:	3101      	adds	r1, #1
 800eb1e:	f43f adce 	beq.w	800e6be <_strtod_l+0x446>
 800eb22:	4b92      	ldr	r3, [pc, #584]	@ (800ed6c <_strtod_l+0xaf4>)
 800eb24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eb26:	401a      	ands	r2, r3
 800eb28:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800eb2c:	f04f 0a00 	mov.w	sl, #0
 800eb30:	9b08      	ldr	r3, [sp, #32]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d1b9      	bne.n	800eaaa <_strtod_l+0x832>
 800eb36:	e5cd      	b.n	800e6d4 <_strtod_l+0x45c>
 800eb38:	f04f 33ff 	mov.w	r3, #4294967295
 800eb3c:	e7e8      	b.n	800eb10 <_strtod_l+0x898>
 800eb3e:	4613      	mov	r3, r2
 800eb40:	e7e6      	b.n	800eb10 <_strtod_l+0x898>
 800eb42:	ea53 030a 	orrs.w	r3, r3, sl
 800eb46:	d0a2      	beq.n	800ea8e <_strtod_l+0x816>
 800eb48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eb4a:	b1db      	cbz	r3, 800eb84 <_strtod_l+0x90c>
 800eb4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eb4e:	4213      	tst	r3, r2
 800eb50:	d0ee      	beq.n	800eb30 <_strtod_l+0x8b8>
 800eb52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb54:	9a08      	ldr	r2, [sp, #32]
 800eb56:	4650      	mov	r0, sl
 800eb58:	4659      	mov	r1, fp
 800eb5a:	b1bb      	cbz	r3, 800eb8c <_strtod_l+0x914>
 800eb5c:	f7ff fb6c 	bl	800e238 <sulp>
 800eb60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb64:	ec53 2b10 	vmov	r2, r3, d0
 800eb68:	f7f1 fb90 	bl	800028c <__adddf3>
 800eb6c:	4682      	mov	sl, r0
 800eb6e:	468b      	mov	fp, r1
 800eb70:	e7de      	b.n	800eb30 <_strtod_l+0x8b8>
 800eb72:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800eb76:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eb7a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eb7e:	f04f 3aff 	mov.w	sl, #4294967295
 800eb82:	e7d5      	b.n	800eb30 <_strtod_l+0x8b8>
 800eb84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eb86:	ea13 0f0a 	tst.w	r3, sl
 800eb8a:	e7e1      	b.n	800eb50 <_strtod_l+0x8d8>
 800eb8c:	f7ff fb54 	bl	800e238 <sulp>
 800eb90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb94:	ec53 2b10 	vmov	r2, r3, d0
 800eb98:	f7f1 fb76 	bl	8000288 <__aeabi_dsub>
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	2300      	movs	r3, #0
 800eba0:	4682      	mov	sl, r0
 800eba2:	468b      	mov	fp, r1
 800eba4:	f7f1 ff90 	bl	8000ac8 <__aeabi_dcmpeq>
 800eba8:	2800      	cmp	r0, #0
 800ebaa:	d0c1      	beq.n	800eb30 <_strtod_l+0x8b8>
 800ebac:	e61a      	b.n	800e7e4 <_strtod_l+0x56c>
 800ebae:	4641      	mov	r1, r8
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	f7ff facb 	bl	800e14c <__ratio>
 800ebb6:	ec57 6b10 	vmov	r6, r7, d0
 800ebba:	2200      	movs	r2, #0
 800ebbc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ebc0:	4630      	mov	r0, r6
 800ebc2:	4639      	mov	r1, r7
 800ebc4:	f7f1 ff94 	bl	8000af0 <__aeabi_dcmple>
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	d06f      	beq.n	800ecac <_strtod_l+0xa34>
 800ebcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d17a      	bne.n	800ecc8 <_strtod_l+0xa50>
 800ebd2:	f1ba 0f00 	cmp.w	sl, #0
 800ebd6:	d158      	bne.n	800ec8a <_strtod_l+0xa12>
 800ebd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d15a      	bne.n	800ec98 <_strtod_l+0xa20>
 800ebe2:	4b64      	ldr	r3, [pc, #400]	@ (800ed74 <_strtod_l+0xafc>)
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	4639      	mov	r1, r7
 800ebea:	f7f1 ff77 	bl	8000adc <__aeabi_dcmplt>
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	d159      	bne.n	800eca6 <_strtod_l+0xa2e>
 800ebf2:	4630      	mov	r0, r6
 800ebf4:	4639      	mov	r1, r7
 800ebf6:	4b60      	ldr	r3, [pc, #384]	@ (800ed78 <_strtod_l+0xb00>)
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	f7f1 fcfd 	bl	80005f8 <__aeabi_dmul>
 800ebfe:	4606      	mov	r6, r0
 800ec00:	460f      	mov	r7, r1
 800ec02:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ec06:	9606      	str	r6, [sp, #24]
 800ec08:	9307      	str	r3, [sp, #28]
 800ec0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec0e:	4d57      	ldr	r5, [pc, #348]	@ (800ed6c <_strtod_l+0xaf4>)
 800ec10:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ec14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec16:	401d      	ands	r5, r3
 800ec18:	4b58      	ldr	r3, [pc, #352]	@ (800ed7c <_strtod_l+0xb04>)
 800ec1a:	429d      	cmp	r5, r3
 800ec1c:	f040 80b2 	bne.w	800ed84 <_strtod_l+0xb0c>
 800ec20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec22:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ec26:	ec4b ab10 	vmov	d0, sl, fp
 800ec2a:	f7ff f9c7 	bl	800dfbc <__ulp>
 800ec2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec32:	ec51 0b10 	vmov	r0, r1, d0
 800ec36:	f7f1 fcdf 	bl	80005f8 <__aeabi_dmul>
 800ec3a:	4652      	mov	r2, sl
 800ec3c:	465b      	mov	r3, fp
 800ec3e:	f7f1 fb25 	bl	800028c <__adddf3>
 800ec42:	460b      	mov	r3, r1
 800ec44:	4949      	ldr	r1, [pc, #292]	@ (800ed6c <_strtod_l+0xaf4>)
 800ec46:	4a4e      	ldr	r2, [pc, #312]	@ (800ed80 <_strtod_l+0xb08>)
 800ec48:	4019      	ands	r1, r3
 800ec4a:	4291      	cmp	r1, r2
 800ec4c:	4682      	mov	sl, r0
 800ec4e:	d942      	bls.n	800ecd6 <_strtod_l+0xa5e>
 800ec50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ec52:	4b47      	ldr	r3, [pc, #284]	@ (800ed70 <_strtod_l+0xaf8>)
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d103      	bne.n	800ec60 <_strtod_l+0x9e8>
 800ec58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	f43f ad2f 	beq.w	800e6be <_strtod_l+0x446>
 800ec60:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ed70 <_strtod_l+0xaf8>
 800ec64:	f04f 3aff 	mov.w	sl, #4294967295
 800ec68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ec6a:	9805      	ldr	r0, [sp, #20]
 800ec6c:	f7fe fe7a 	bl	800d964 <_Bfree>
 800ec70:	9805      	ldr	r0, [sp, #20]
 800ec72:	4649      	mov	r1, r9
 800ec74:	f7fe fe76 	bl	800d964 <_Bfree>
 800ec78:	9805      	ldr	r0, [sp, #20]
 800ec7a:	4641      	mov	r1, r8
 800ec7c:	f7fe fe72 	bl	800d964 <_Bfree>
 800ec80:	9805      	ldr	r0, [sp, #20]
 800ec82:	4621      	mov	r1, r4
 800ec84:	f7fe fe6e 	bl	800d964 <_Bfree>
 800ec88:	e619      	b.n	800e8be <_strtod_l+0x646>
 800ec8a:	f1ba 0f01 	cmp.w	sl, #1
 800ec8e:	d103      	bne.n	800ec98 <_strtod_l+0xa20>
 800ec90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	f43f ada6 	beq.w	800e7e4 <_strtod_l+0x56c>
 800ec98:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ed48 <_strtod_l+0xad0>
 800ec9c:	4f35      	ldr	r7, [pc, #212]	@ (800ed74 <_strtod_l+0xafc>)
 800ec9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eca2:	2600      	movs	r6, #0
 800eca4:	e7b1      	b.n	800ec0a <_strtod_l+0x992>
 800eca6:	4f34      	ldr	r7, [pc, #208]	@ (800ed78 <_strtod_l+0xb00>)
 800eca8:	2600      	movs	r6, #0
 800ecaa:	e7aa      	b.n	800ec02 <_strtod_l+0x98a>
 800ecac:	4b32      	ldr	r3, [pc, #200]	@ (800ed78 <_strtod_l+0xb00>)
 800ecae:	4630      	mov	r0, r6
 800ecb0:	4639      	mov	r1, r7
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	f7f1 fca0 	bl	80005f8 <__aeabi_dmul>
 800ecb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecba:	4606      	mov	r6, r0
 800ecbc:	460f      	mov	r7, r1
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d09f      	beq.n	800ec02 <_strtod_l+0x98a>
 800ecc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ecc6:	e7a0      	b.n	800ec0a <_strtod_l+0x992>
 800ecc8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ed50 <_strtod_l+0xad8>
 800eccc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ecd0:	ec57 6b17 	vmov	r6, r7, d7
 800ecd4:	e799      	b.n	800ec0a <_strtod_l+0x992>
 800ecd6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ecda:	9b08      	ldr	r3, [sp, #32]
 800ecdc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d1c1      	bne.n	800ec68 <_strtod_l+0x9f0>
 800ece4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ece8:	0d1b      	lsrs	r3, r3, #20
 800ecea:	051b      	lsls	r3, r3, #20
 800ecec:	429d      	cmp	r5, r3
 800ecee:	d1bb      	bne.n	800ec68 <_strtod_l+0x9f0>
 800ecf0:	4630      	mov	r0, r6
 800ecf2:	4639      	mov	r1, r7
 800ecf4:	f7f2 f830 	bl	8000d58 <__aeabi_d2lz>
 800ecf8:	f7f1 fc50 	bl	800059c <__aeabi_l2d>
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	460b      	mov	r3, r1
 800ed00:	4630      	mov	r0, r6
 800ed02:	4639      	mov	r1, r7
 800ed04:	f7f1 fac0 	bl	8000288 <__aeabi_dsub>
 800ed08:	460b      	mov	r3, r1
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ed10:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ed14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed16:	ea46 060a 	orr.w	r6, r6, sl
 800ed1a:	431e      	orrs	r6, r3
 800ed1c:	d06f      	beq.n	800edfe <_strtod_l+0xb86>
 800ed1e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ed58 <_strtod_l+0xae0>)
 800ed20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed24:	f7f1 feda 	bl	8000adc <__aeabi_dcmplt>
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	f47f acd3 	bne.w	800e6d4 <_strtod_l+0x45c>
 800ed2e:	a30c      	add	r3, pc, #48	@ (adr r3, 800ed60 <_strtod_l+0xae8>)
 800ed30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed38:	f7f1 feee 	bl	8000b18 <__aeabi_dcmpgt>
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	d093      	beq.n	800ec68 <_strtod_l+0x9f0>
 800ed40:	e4c8      	b.n	800e6d4 <_strtod_l+0x45c>
 800ed42:	bf00      	nop
 800ed44:	f3af 8000 	nop.w
 800ed48:	00000000 	.word	0x00000000
 800ed4c:	bff00000 	.word	0xbff00000
 800ed50:	00000000 	.word	0x00000000
 800ed54:	3ff00000 	.word	0x3ff00000
 800ed58:	94a03595 	.word	0x94a03595
 800ed5c:	3fdfffff 	.word	0x3fdfffff
 800ed60:	35afe535 	.word	0x35afe535
 800ed64:	3fe00000 	.word	0x3fe00000
 800ed68:	000fffff 	.word	0x000fffff
 800ed6c:	7ff00000 	.word	0x7ff00000
 800ed70:	7fefffff 	.word	0x7fefffff
 800ed74:	3ff00000 	.word	0x3ff00000
 800ed78:	3fe00000 	.word	0x3fe00000
 800ed7c:	7fe00000 	.word	0x7fe00000
 800ed80:	7c9fffff 	.word	0x7c9fffff
 800ed84:	9b08      	ldr	r3, [sp, #32]
 800ed86:	b323      	cbz	r3, 800edd2 <_strtod_l+0xb5a>
 800ed88:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ed8c:	d821      	bhi.n	800edd2 <_strtod_l+0xb5a>
 800ed8e:	a328      	add	r3, pc, #160	@ (adr r3, 800ee30 <_strtod_l+0xbb8>)
 800ed90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed94:	4630      	mov	r0, r6
 800ed96:	4639      	mov	r1, r7
 800ed98:	f7f1 feaa 	bl	8000af0 <__aeabi_dcmple>
 800ed9c:	b1a0      	cbz	r0, 800edc8 <_strtod_l+0xb50>
 800ed9e:	4639      	mov	r1, r7
 800eda0:	4630      	mov	r0, r6
 800eda2:	f7f1 ff01 	bl	8000ba8 <__aeabi_d2uiz>
 800eda6:	2801      	cmp	r0, #1
 800eda8:	bf38      	it	cc
 800edaa:	2001      	movcc	r0, #1
 800edac:	f7f1 fbaa 	bl	8000504 <__aeabi_ui2d>
 800edb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edb2:	4606      	mov	r6, r0
 800edb4:	460f      	mov	r7, r1
 800edb6:	b9fb      	cbnz	r3, 800edf8 <_strtod_l+0xb80>
 800edb8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800edbc:	9014      	str	r0, [sp, #80]	@ 0x50
 800edbe:	9315      	str	r3, [sp, #84]	@ 0x54
 800edc0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800edc4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800edc8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800edca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800edce:	1b5b      	subs	r3, r3, r5
 800edd0:	9311      	str	r3, [sp, #68]	@ 0x44
 800edd2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800edd6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800edda:	f7ff f8ef 	bl	800dfbc <__ulp>
 800edde:	4650      	mov	r0, sl
 800ede0:	ec53 2b10 	vmov	r2, r3, d0
 800ede4:	4659      	mov	r1, fp
 800ede6:	f7f1 fc07 	bl	80005f8 <__aeabi_dmul>
 800edea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800edee:	f7f1 fa4d 	bl	800028c <__adddf3>
 800edf2:	4682      	mov	sl, r0
 800edf4:	468b      	mov	fp, r1
 800edf6:	e770      	b.n	800ecda <_strtod_l+0xa62>
 800edf8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800edfc:	e7e0      	b.n	800edc0 <_strtod_l+0xb48>
 800edfe:	a30e      	add	r3, pc, #56	@ (adr r3, 800ee38 <_strtod_l+0xbc0>)
 800ee00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee04:	f7f1 fe6a 	bl	8000adc <__aeabi_dcmplt>
 800ee08:	e798      	b.n	800ed3c <_strtod_l+0xac4>
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	930e      	str	r3, [sp, #56]	@ 0x38
 800ee0e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ee10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee12:	6013      	str	r3, [r2, #0]
 800ee14:	f7ff ba6d 	b.w	800e2f2 <_strtod_l+0x7a>
 800ee18:	2a65      	cmp	r2, #101	@ 0x65
 800ee1a:	f43f ab68 	beq.w	800e4ee <_strtod_l+0x276>
 800ee1e:	2a45      	cmp	r2, #69	@ 0x45
 800ee20:	f43f ab65 	beq.w	800e4ee <_strtod_l+0x276>
 800ee24:	2301      	movs	r3, #1
 800ee26:	f7ff bba0 	b.w	800e56a <_strtod_l+0x2f2>
 800ee2a:	bf00      	nop
 800ee2c:	f3af 8000 	nop.w
 800ee30:	ffc00000 	.word	0xffc00000
 800ee34:	41dfffff 	.word	0x41dfffff
 800ee38:	94a03595 	.word	0x94a03595
 800ee3c:	3fcfffff 	.word	0x3fcfffff

0800ee40 <_strtod_r>:
 800ee40:	4b01      	ldr	r3, [pc, #4]	@ (800ee48 <_strtod_r+0x8>)
 800ee42:	f7ff ba19 	b.w	800e278 <_strtod_l>
 800ee46:	bf00      	nop
 800ee48:	20000068 	.word	0x20000068

0800ee4c <_strtol_l.isra.0>:
 800ee4c:	2b24      	cmp	r3, #36	@ 0x24
 800ee4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee52:	4686      	mov	lr, r0
 800ee54:	4690      	mov	r8, r2
 800ee56:	d801      	bhi.n	800ee5c <_strtol_l.isra.0+0x10>
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d106      	bne.n	800ee6a <_strtol_l.isra.0+0x1e>
 800ee5c:	f7fd fe5e 	bl	800cb1c <__errno>
 800ee60:	2316      	movs	r3, #22
 800ee62:	6003      	str	r3, [r0, #0]
 800ee64:	2000      	movs	r0, #0
 800ee66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee6a:	4834      	ldr	r0, [pc, #208]	@ (800ef3c <_strtol_l.isra.0+0xf0>)
 800ee6c:	460d      	mov	r5, r1
 800ee6e:	462a      	mov	r2, r5
 800ee70:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee74:	5d06      	ldrb	r6, [r0, r4]
 800ee76:	f016 0608 	ands.w	r6, r6, #8
 800ee7a:	d1f8      	bne.n	800ee6e <_strtol_l.isra.0+0x22>
 800ee7c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ee7e:	d110      	bne.n	800eea2 <_strtol_l.isra.0+0x56>
 800ee80:	782c      	ldrb	r4, [r5, #0]
 800ee82:	2601      	movs	r6, #1
 800ee84:	1c95      	adds	r5, r2, #2
 800ee86:	f033 0210 	bics.w	r2, r3, #16
 800ee8a:	d115      	bne.n	800eeb8 <_strtol_l.isra.0+0x6c>
 800ee8c:	2c30      	cmp	r4, #48	@ 0x30
 800ee8e:	d10d      	bne.n	800eeac <_strtol_l.isra.0+0x60>
 800ee90:	782a      	ldrb	r2, [r5, #0]
 800ee92:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ee96:	2a58      	cmp	r2, #88	@ 0x58
 800ee98:	d108      	bne.n	800eeac <_strtol_l.isra.0+0x60>
 800ee9a:	786c      	ldrb	r4, [r5, #1]
 800ee9c:	3502      	adds	r5, #2
 800ee9e:	2310      	movs	r3, #16
 800eea0:	e00a      	b.n	800eeb8 <_strtol_l.isra.0+0x6c>
 800eea2:	2c2b      	cmp	r4, #43	@ 0x2b
 800eea4:	bf04      	itt	eq
 800eea6:	782c      	ldrbeq	r4, [r5, #0]
 800eea8:	1c95      	addeq	r5, r2, #2
 800eeaa:	e7ec      	b.n	800ee86 <_strtol_l.isra.0+0x3a>
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d1f6      	bne.n	800ee9e <_strtol_l.isra.0+0x52>
 800eeb0:	2c30      	cmp	r4, #48	@ 0x30
 800eeb2:	bf14      	ite	ne
 800eeb4:	230a      	movne	r3, #10
 800eeb6:	2308      	moveq	r3, #8
 800eeb8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800eebc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800eec0:	2200      	movs	r2, #0
 800eec2:	fbbc f9f3 	udiv	r9, ip, r3
 800eec6:	4610      	mov	r0, r2
 800eec8:	fb03 ca19 	mls	sl, r3, r9, ip
 800eecc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800eed0:	2f09      	cmp	r7, #9
 800eed2:	d80f      	bhi.n	800eef4 <_strtol_l.isra.0+0xa8>
 800eed4:	463c      	mov	r4, r7
 800eed6:	42a3      	cmp	r3, r4
 800eed8:	dd1b      	ble.n	800ef12 <_strtol_l.isra.0+0xc6>
 800eeda:	1c57      	adds	r7, r2, #1
 800eedc:	d007      	beq.n	800eeee <_strtol_l.isra.0+0xa2>
 800eede:	4581      	cmp	r9, r0
 800eee0:	d314      	bcc.n	800ef0c <_strtol_l.isra.0+0xc0>
 800eee2:	d101      	bne.n	800eee8 <_strtol_l.isra.0+0x9c>
 800eee4:	45a2      	cmp	sl, r4
 800eee6:	db11      	blt.n	800ef0c <_strtol_l.isra.0+0xc0>
 800eee8:	fb00 4003 	mla	r0, r0, r3, r4
 800eeec:	2201      	movs	r2, #1
 800eeee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eef2:	e7eb      	b.n	800eecc <_strtol_l.isra.0+0x80>
 800eef4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800eef8:	2f19      	cmp	r7, #25
 800eefa:	d801      	bhi.n	800ef00 <_strtol_l.isra.0+0xb4>
 800eefc:	3c37      	subs	r4, #55	@ 0x37
 800eefe:	e7ea      	b.n	800eed6 <_strtol_l.isra.0+0x8a>
 800ef00:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ef04:	2f19      	cmp	r7, #25
 800ef06:	d804      	bhi.n	800ef12 <_strtol_l.isra.0+0xc6>
 800ef08:	3c57      	subs	r4, #87	@ 0x57
 800ef0a:	e7e4      	b.n	800eed6 <_strtol_l.isra.0+0x8a>
 800ef0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef10:	e7ed      	b.n	800eeee <_strtol_l.isra.0+0xa2>
 800ef12:	1c53      	adds	r3, r2, #1
 800ef14:	d108      	bne.n	800ef28 <_strtol_l.isra.0+0xdc>
 800ef16:	2322      	movs	r3, #34	@ 0x22
 800ef18:	f8ce 3000 	str.w	r3, [lr]
 800ef1c:	4660      	mov	r0, ip
 800ef1e:	f1b8 0f00 	cmp.w	r8, #0
 800ef22:	d0a0      	beq.n	800ee66 <_strtol_l.isra.0+0x1a>
 800ef24:	1e69      	subs	r1, r5, #1
 800ef26:	e006      	b.n	800ef36 <_strtol_l.isra.0+0xea>
 800ef28:	b106      	cbz	r6, 800ef2c <_strtol_l.isra.0+0xe0>
 800ef2a:	4240      	negs	r0, r0
 800ef2c:	f1b8 0f00 	cmp.w	r8, #0
 800ef30:	d099      	beq.n	800ee66 <_strtol_l.isra.0+0x1a>
 800ef32:	2a00      	cmp	r2, #0
 800ef34:	d1f6      	bne.n	800ef24 <_strtol_l.isra.0+0xd8>
 800ef36:	f8c8 1000 	str.w	r1, [r8]
 800ef3a:	e794      	b.n	800ee66 <_strtol_l.isra.0+0x1a>
 800ef3c:	080107b1 	.word	0x080107b1

0800ef40 <_strtol_r>:
 800ef40:	f7ff bf84 	b.w	800ee4c <_strtol_l.isra.0>

0800ef44 <__ssputs_r>:
 800ef44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef48:	688e      	ldr	r6, [r1, #8]
 800ef4a:	461f      	mov	r7, r3
 800ef4c:	42be      	cmp	r6, r7
 800ef4e:	680b      	ldr	r3, [r1, #0]
 800ef50:	4682      	mov	sl, r0
 800ef52:	460c      	mov	r4, r1
 800ef54:	4690      	mov	r8, r2
 800ef56:	d82d      	bhi.n	800efb4 <__ssputs_r+0x70>
 800ef58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ef60:	d026      	beq.n	800efb0 <__ssputs_r+0x6c>
 800ef62:	6965      	ldr	r5, [r4, #20]
 800ef64:	6909      	ldr	r1, [r1, #16]
 800ef66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef6a:	eba3 0901 	sub.w	r9, r3, r1
 800ef6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef72:	1c7b      	adds	r3, r7, #1
 800ef74:	444b      	add	r3, r9
 800ef76:	106d      	asrs	r5, r5, #1
 800ef78:	429d      	cmp	r5, r3
 800ef7a:	bf38      	it	cc
 800ef7c:	461d      	movcc	r5, r3
 800ef7e:	0553      	lsls	r3, r2, #21
 800ef80:	d527      	bpl.n	800efd2 <__ssputs_r+0x8e>
 800ef82:	4629      	mov	r1, r5
 800ef84:	f7fc fd08 	bl	800b998 <_malloc_r>
 800ef88:	4606      	mov	r6, r0
 800ef8a:	b360      	cbz	r0, 800efe6 <__ssputs_r+0xa2>
 800ef8c:	6921      	ldr	r1, [r4, #16]
 800ef8e:	464a      	mov	r2, r9
 800ef90:	f7fd fdf1 	bl	800cb76 <memcpy>
 800ef94:	89a3      	ldrh	r3, [r4, #12]
 800ef96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ef9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef9e:	81a3      	strh	r3, [r4, #12]
 800efa0:	6126      	str	r6, [r4, #16]
 800efa2:	6165      	str	r5, [r4, #20]
 800efa4:	444e      	add	r6, r9
 800efa6:	eba5 0509 	sub.w	r5, r5, r9
 800efaa:	6026      	str	r6, [r4, #0]
 800efac:	60a5      	str	r5, [r4, #8]
 800efae:	463e      	mov	r6, r7
 800efb0:	42be      	cmp	r6, r7
 800efb2:	d900      	bls.n	800efb6 <__ssputs_r+0x72>
 800efb4:	463e      	mov	r6, r7
 800efb6:	6820      	ldr	r0, [r4, #0]
 800efb8:	4632      	mov	r2, r6
 800efba:	4641      	mov	r1, r8
 800efbc:	f000 fb9c 	bl	800f6f8 <memmove>
 800efc0:	68a3      	ldr	r3, [r4, #8]
 800efc2:	1b9b      	subs	r3, r3, r6
 800efc4:	60a3      	str	r3, [r4, #8]
 800efc6:	6823      	ldr	r3, [r4, #0]
 800efc8:	4433      	add	r3, r6
 800efca:	6023      	str	r3, [r4, #0]
 800efcc:	2000      	movs	r0, #0
 800efce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efd2:	462a      	mov	r2, r5
 800efd4:	f000 ff41 	bl	800fe5a <_realloc_r>
 800efd8:	4606      	mov	r6, r0
 800efda:	2800      	cmp	r0, #0
 800efdc:	d1e0      	bne.n	800efa0 <__ssputs_r+0x5c>
 800efde:	6921      	ldr	r1, [r4, #16]
 800efe0:	4650      	mov	r0, sl
 800efe2:	f7fe fc35 	bl	800d850 <_free_r>
 800efe6:	230c      	movs	r3, #12
 800efe8:	f8ca 3000 	str.w	r3, [sl]
 800efec:	89a3      	ldrh	r3, [r4, #12]
 800efee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eff2:	81a3      	strh	r3, [r4, #12]
 800eff4:	f04f 30ff 	mov.w	r0, #4294967295
 800eff8:	e7e9      	b.n	800efce <__ssputs_r+0x8a>
	...

0800effc <_svfiprintf_r>:
 800effc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f000:	4698      	mov	r8, r3
 800f002:	898b      	ldrh	r3, [r1, #12]
 800f004:	061b      	lsls	r3, r3, #24
 800f006:	b09d      	sub	sp, #116	@ 0x74
 800f008:	4607      	mov	r7, r0
 800f00a:	460d      	mov	r5, r1
 800f00c:	4614      	mov	r4, r2
 800f00e:	d510      	bpl.n	800f032 <_svfiprintf_r+0x36>
 800f010:	690b      	ldr	r3, [r1, #16]
 800f012:	b973      	cbnz	r3, 800f032 <_svfiprintf_r+0x36>
 800f014:	2140      	movs	r1, #64	@ 0x40
 800f016:	f7fc fcbf 	bl	800b998 <_malloc_r>
 800f01a:	6028      	str	r0, [r5, #0]
 800f01c:	6128      	str	r0, [r5, #16]
 800f01e:	b930      	cbnz	r0, 800f02e <_svfiprintf_r+0x32>
 800f020:	230c      	movs	r3, #12
 800f022:	603b      	str	r3, [r7, #0]
 800f024:	f04f 30ff 	mov.w	r0, #4294967295
 800f028:	b01d      	add	sp, #116	@ 0x74
 800f02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f02e:	2340      	movs	r3, #64	@ 0x40
 800f030:	616b      	str	r3, [r5, #20]
 800f032:	2300      	movs	r3, #0
 800f034:	9309      	str	r3, [sp, #36]	@ 0x24
 800f036:	2320      	movs	r3, #32
 800f038:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f03c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f040:	2330      	movs	r3, #48	@ 0x30
 800f042:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f1e0 <_svfiprintf_r+0x1e4>
 800f046:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f04a:	f04f 0901 	mov.w	r9, #1
 800f04e:	4623      	mov	r3, r4
 800f050:	469a      	mov	sl, r3
 800f052:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f056:	b10a      	cbz	r2, 800f05c <_svfiprintf_r+0x60>
 800f058:	2a25      	cmp	r2, #37	@ 0x25
 800f05a:	d1f9      	bne.n	800f050 <_svfiprintf_r+0x54>
 800f05c:	ebba 0b04 	subs.w	fp, sl, r4
 800f060:	d00b      	beq.n	800f07a <_svfiprintf_r+0x7e>
 800f062:	465b      	mov	r3, fp
 800f064:	4622      	mov	r2, r4
 800f066:	4629      	mov	r1, r5
 800f068:	4638      	mov	r0, r7
 800f06a:	f7ff ff6b 	bl	800ef44 <__ssputs_r>
 800f06e:	3001      	adds	r0, #1
 800f070:	f000 80a7 	beq.w	800f1c2 <_svfiprintf_r+0x1c6>
 800f074:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f076:	445a      	add	r2, fp
 800f078:	9209      	str	r2, [sp, #36]	@ 0x24
 800f07a:	f89a 3000 	ldrb.w	r3, [sl]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	f000 809f 	beq.w	800f1c2 <_svfiprintf_r+0x1c6>
 800f084:	2300      	movs	r3, #0
 800f086:	f04f 32ff 	mov.w	r2, #4294967295
 800f08a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f08e:	f10a 0a01 	add.w	sl, sl, #1
 800f092:	9304      	str	r3, [sp, #16]
 800f094:	9307      	str	r3, [sp, #28]
 800f096:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f09a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f09c:	4654      	mov	r4, sl
 800f09e:	2205      	movs	r2, #5
 800f0a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0a4:	484e      	ldr	r0, [pc, #312]	@ (800f1e0 <_svfiprintf_r+0x1e4>)
 800f0a6:	f7f1 f893 	bl	80001d0 <memchr>
 800f0aa:	9a04      	ldr	r2, [sp, #16]
 800f0ac:	b9d8      	cbnz	r0, 800f0e6 <_svfiprintf_r+0xea>
 800f0ae:	06d0      	lsls	r0, r2, #27
 800f0b0:	bf44      	itt	mi
 800f0b2:	2320      	movmi	r3, #32
 800f0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0b8:	0711      	lsls	r1, r2, #28
 800f0ba:	bf44      	itt	mi
 800f0bc:	232b      	movmi	r3, #43	@ 0x2b
 800f0be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0c2:	f89a 3000 	ldrb.w	r3, [sl]
 800f0c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0c8:	d015      	beq.n	800f0f6 <_svfiprintf_r+0xfa>
 800f0ca:	9a07      	ldr	r2, [sp, #28]
 800f0cc:	4654      	mov	r4, sl
 800f0ce:	2000      	movs	r0, #0
 800f0d0:	f04f 0c0a 	mov.w	ip, #10
 800f0d4:	4621      	mov	r1, r4
 800f0d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0da:	3b30      	subs	r3, #48	@ 0x30
 800f0dc:	2b09      	cmp	r3, #9
 800f0de:	d94b      	bls.n	800f178 <_svfiprintf_r+0x17c>
 800f0e0:	b1b0      	cbz	r0, 800f110 <_svfiprintf_r+0x114>
 800f0e2:	9207      	str	r2, [sp, #28]
 800f0e4:	e014      	b.n	800f110 <_svfiprintf_r+0x114>
 800f0e6:	eba0 0308 	sub.w	r3, r0, r8
 800f0ea:	fa09 f303 	lsl.w	r3, r9, r3
 800f0ee:	4313      	orrs	r3, r2
 800f0f0:	9304      	str	r3, [sp, #16]
 800f0f2:	46a2      	mov	sl, r4
 800f0f4:	e7d2      	b.n	800f09c <_svfiprintf_r+0xa0>
 800f0f6:	9b03      	ldr	r3, [sp, #12]
 800f0f8:	1d19      	adds	r1, r3, #4
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	9103      	str	r1, [sp, #12]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	bfbb      	ittet	lt
 800f102:	425b      	neglt	r3, r3
 800f104:	f042 0202 	orrlt.w	r2, r2, #2
 800f108:	9307      	strge	r3, [sp, #28]
 800f10a:	9307      	strlt	r3, [sp, #28]
 800f10c:	bfb8      	it	lt
 800f10e:	9204      	strlt	r2, [sp, #16]
 800f110:	7823      	ldrb	r3, [r4, #0]
 800f112:	2b2e      	cmp	r3, #46	@ 0x2e
 800f114:	d10a      	bne.n	800f12c <_svfiprintf_r+0x130>
 800f116:	7863      	ldrb	r3, [r4, #1]
 800f118:	2b2a      	cmp	r3, #42	@ 0x2a
 800f11a:	d132      	bne.n	800f182 <_svfiprintf_r+0x186>
 800f11c:	9b03      	ldr	r3, [sp, #12]
 800f11e:	1d1a      	adds	r2, r3, #4
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	9203      	str	r2, [sp, #12]
 800f124:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f128:	3402      	adds	r4, #2
 800f12a:	9305      	str	r3, [sp, #20]
 800f12c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f1f0 <_svfiprintf_r+0x1f4>
 800f130:	7821      	ldrb	r1, [r4, #0]
 800f132:	2203      	movs	r2, #3
 800f134:	4650      	mov	r0, sl
 800f136:	f7f1 f84b 	bl	80001d0 <memchr>
 800f13a:	b138      	cbz	r0, 800f14c <_svfiprintf_r+0x150>
 800f13c:	9b04      	ldr	r3, [sp, #16]
 800f13e:	eba0 000a 	sub.w	r0, r0, sl
 800f142:	2240      	movs	r2, #64	@ 0x40
 800f144:	4082      	lsls	r2, r0
 800f146:	4313      	orrs	r3, r2
 800f148:	3401      	adds	r4, #1
 800f14a:	9304      	str	r3, [sp, #16]
 800f14c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f150:	4824      	ldr	r0, [pc, #144]	@ (800f1e4 <_svfiprintf_r+0x1e8>)
 800f152:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f156:	2206      	movs	r2, #6
 800f158:	f7f1 f83a 	bl	80001d0 <memchr>
 800f15c:	2800      	cmp	r0, #0
 800f15e:	d036      	beq.n	800f1ce <_svfiprintf_r+0x1d2>
 800f160:	4b21      	ldr	r3, [pc, #132]	@ (800f1e8 <_svfiprintf_r+0x1ec>)
 800f162:	bb1b      	cbnz	r3, 800f1ac <_svfiprintf_r+0x1b0>
 800f164:	9b03      	ldr	r3, [sp, #12]
 800f166:	3307      	adds	r3, #7
 800f168:	f023 0307 	bic.w	r3, r3, #7
 800f16c:	3308      	adds	r3, #8
 800f16e:	9303      	str	r3, [sp, #12]
 800f170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f172:	4433      	add	r3, r6
 800f174:	9309      	str	r3, [sp, #36]	@ 0x24
 800f176:	e76a      	b.n	800f04e <_svfiprintf_r+0x52>
 800f178:	fb0c 3202 	mla	r2, ip, r2, r3
 800f17c:	460c      	mov	r4, r1
 800f17e:	2001      	movs	r0, #1
 800f180:	e7a8      	b.n	800f0d4 <_svfiprintf_r+0xd8>
 800f182:	2300      	movs	r3, #0
 800f184:	3401      	adds	r4, #1
 800f186:	9305      	str	r3, [sp, #20]
 800f188:	4619      	mov	r1, r3
 800f18a:	f04f 0c0a 	mov.w	ip, #10
 800f18e:	4620      	mov	r0, r4
 800f190:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f194:	3a30      	subs	r2, #48	@ 0x30
 800f196:	2a09      	cmp	r2, #9
 800f198:	d903      	bls.n	800f1a2 <_svfiprintf_r+0x1a6>
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d0c6      	beq.n	800f12c <_svfiprintf_r+0x130>
 800f19e:	9105      	str	r1, [sp, #20]
 800f1a0:	e7c4      	b.n	800f12c <_svfiprintf_r+0x130>
 800f1a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	e7f0      	b.n	800f18e <_svfiprintf_r+0x192>
 800f1ac:	ab03      	add	r3, sp, #12
 800f1ae:	9300      	str	r3, [sp, #0]
 800f1b0:	462a      	mov	r2, r5
 800f1b2:	4b0e      	ldr	r3, [pc, #56]	@ (800f1ec <_svfiprintf_r+0x1f0>)
 800f1b4:	a904      	add	r1, sp, #16
 800f1b6:	4638      	mov	r0, r7
 800f1b8:	f7fc fd1a 	bl	800bbf0 <_printf_float>
 800f1bc:	1c42      	adds	r2, r0, #1
 800f1be:	4606      	mov	r6, r0
 800f1c0:	d1d6      	bne.n	800f170 <_svfiprintf_r+0x174>
 800f1c2:	89ab      	ldrh	r3, [r5, #12]
 800f1c4:	065b      	lsls	r3, r3, #25
 800f1c6:	f53f af2d 	bmi.w	800f024 <_svfiprintf_r+0x28>
 800f1ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f1cc:	e72c      	b.n	800f028 <_svfiprintf_r+0x2c>
 800f1ce:	ab03      	add	r3, sp, #12
 800f1d0:	9300      	str	r3, [sp, #0]
 800f1d2:	462a      	mov	r2, r5
 800f1d4:	4b05      	ldr	r3, [pc, #20]	@ (800f1ec <_svfiprintf_r+0x1f0>)
 800f1d6:	a904      	add	r1, sp, #16
 800f1d8:	4638      	mov	r0, r7
 800f1da:	f7fc ffa1 	bl	800c120 <_printf_i>
 800f1de:	e7ed      	b.n	800f1bc <_svfiprintf_r+0x1c0>
 800f1e0:	080105a9 	.word	0x080105a9
 800f1e4:	080105b3 	.word	0x080105b3
 800f1e8:	0800bbf1 	.word	0x0800bbf1
 800f1ec:	0800ef45 	.word	0x0800ef45
 800f1f0:	080105af 	.word	0x080105af

0800f1f4 <__sfputc_r>:
 800f1f4:	6893      	ldr	r3, [r2, #8]
 800f1f6:	3b01      	subs	r3, #1
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	b410      	push	{r4}
 800f1fc:	6093      	str	r3, [r2, #8]
 800f1fe:	da08      	bge.n	800f212 <__sfputc_r+0x1e>
 800f200:	6994      	ldr	r4, [r2, #24]
 800f202:	42a3      	cmp	r3, r4
 800f204:	db01      	blt.n	800f20a <__sfputc_r+0x16>
 800f206:	290a      	cmp	r1, #10
 800f208:	d103      	bne.n	800f212 <__sfputc_r+0x1e>
 800f20a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f20e:	f000 b9df 	b.w	800f5d0 <__swbuf_r>
 800f212:	6813      	ldr	r3, [r2, #0]
 800f214:	1c58      	adds	r0, r3, #1
 800f216:	6010      	str	r0, [r2, #0]
 800f218:	7019      	strb	r1, [r3, #0]
 800f21a:	4608      	mov	r0, r1
 800f21c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f220:	4770      	bx	lr

0800f222 <__sfputs_r>:
 800f222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f224:	4606      	mov	r6, r0
 800f226:	460f      	mov	r7, r1
 800f228:	4614      	mov	r4, r2
 800f22a:	18d5      	adds	r5, r2, r3
 800f22c:	42ac      	cmp	r4, r5
 800f22e:	d101      	bne.n	800f234 <__sfputs_r+0x12>
 800f230:	2000      	movs	r0, #0
 800f232:	e007      	b.n	800f244 <__sfputs_r+0x22>
 800f234:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f238:	463a      	mov	r2, r7
 800f23a:	4630      	mov	r0, r6
 800f23c:	f7ff ffda 	bl	800f1f4 <__sfputc_r>
 800f240:	1c43      	adds	r3, r0, #1
 800f242:	d1f3      	bne.n	800f22c <__sfputs_r+0xa>
 800f244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f248 <_vfiprintf_r>:
 800f248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f24c:	460d      	mov	r5, r1
 800f24e:	b09d      	sub	sp, #116	@ 0x74
 800f250:	4614      	mov	r4, r2
 800f252:	4698      	mov	r8, r3
 800f254:	4606      	mov	r6, r0
 800f256:	b118      	cbz	r0, 800f260 <_vfiprintf_r+0x18>
 800f258:	6a03      	ldr	r3, [r0, #32]
 800f25a:	b90b      	cbnz	r3, 800f260 <_vfiprintf_r+0x18>
 800f25c:	f7fd fb18 	bl	800c890 <__sinit>
 800f260:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f262:	07d9      	lsls	r1, r3, #31
 800f264:	d405      	bmi.n	800f272 <_vfiprintf_r+0x2a>
 800f266:	89ab      	ldrh	r3, [r5, #12]
 800f268:	059a      	lsls	r2, r3, #22
 800f26a:	d402      	bmi.n	800f272 <_vfiprintf_r+0x2a>
 800f26c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f26e:	f7fd fc80 	bl	800cb72 <__retarget_lock_acquire_recursive>
 800f272:	89ab      	ldrh	r3, [r5, #12]
 800f274:	071b      	lsls	r3, r3, #28
 800f276:	d501      	bpl.n	800f27c <_vfiprintf_r+0x34>
 800f278:	692b      	ldr	r3, [r5, #16]
 800f27a:	b99b      	cbnz	r3, 800f2a4 <_vfiprintf_r+0x5c>
 800f27c:	4629      	mov	r1, r5
 800f27e:	4630      	mov	r0, r6
 800f280:	f000 f9e4 	bl	800f64c <__swsetup_r>
 800f284:	b170      	cbz	r0, 800f2a4 <_vfiprintf_r+0x5c>
 800f286:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f288:	07dc      	lsls	r4, r3, #31
 800f28a:	d504      	bpl.n	800f296 <_vfiprintf_r+0x4e>
 800f28c:	f04f 30ff 	mov.w	r0, #4294967295
 800f290:	b01d      	add	sp, #116	@ 0x74
 800f292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f296:	89ab      	ldrh	r3, [r5, #12]
 800f298:	0598      	lsls	r0, r3, #22
 800f29a:	d4f7      	bmi.n	800f28c <_vfiprintf_r+0x44>
 800f29c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f29e:	f7fd fc69 	bl	800cb74 <__retarget_lock_release_recursive>
 800f2a2:	e7f3      	b.n	800f28c <_vfiprintf_r+0x44>
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2a8:	2320      	movs	r3, #32
 800f2aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f2ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2b2:	2330      	movs	r3, #48	@ 0x30
 800f2b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f464 <_vfiprintf_r+0x21c>
 800f2b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f2bc:	f04f 0901 	mov.w	r9, #1
 800f2c0:	4623      	mov	r3, r4
 800f2c2:	469a      	mov	sl, r3
 800f2c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2c8:	b10a      	cbz	r2, 800f2ce <_vfiprintf_r+0x86>
 800f2ca:	2a25      	cmp	r2, #37	@ 0x25
 800f2cc:	d1f9      	bne.n	800f2c2 <_vfiprintf_r+0x7a>
 800f2ce:	ebba 0b04 	subs.w	fp, sl, r4
 800f2d2:	d00b      	beq.n	800f2ec <_vfiprintf_r+0xa4>
 800f2d4:	465b      	mov	r3, fp
 800f2d6:	4622      	mov	r2, r4
 800f2d8:	4629      	mov	r1, r5
 800f2da:	4630      	mov	r0, r6
 800f2dc:	f7ff ffa1 	bl	800f222 <__sfputs_r>
 800f2e0:	3001      	adds	r0, #1
 800f2e2:	f000 80a7 	beq.w	800f434 <_vfiprintf_r+0x1ec>
 800f2e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2e8:	445a      	add	r2, fp
 800f2ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2ec:	f89a 3000 	ldrb.w	r3, [sl]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	f000 809f 	beq.w	800f434 <_vfiprintf_r+0x1ec>
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	f04f 32ff 	mov.w	r2, #4294967295
 800f2fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f300:	f10a 0a01 	add.w	sl, sl, #1
 800f304:	9304      	str	r3, [sp, #16]
 800f306:	9307      	str	r3, [sp, #28]
 800f308:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f30c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f30e:	4654      	mov	r4, sl
 800f310:	2205      	movs	r2, #5
 800f312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f316:	4853      	ldr	r0, [pc, #332]	@ (800f464 <_vfiprintf_r+0x21c>)
 800f318:	f7f0 ff5a 	bl	80001d0 <memchr>
 800f31c:	9a04      	ldr	r2, [sp, #16]
 800f31e:	b9d8      	cbnz	r0, 800f358 <_vfiprintf_r+0x110>
 800f320:	06d1      	lsls	r1, r2, #27
 800f322:	bf44      	itt	mi
 800f324:	2320      	movmi	r3, #32
 800f326:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f32a:	0713      	lsls	r3, r2, #28
 800f32c:	bf44      	itt	mi
 800f32e:	232b      	movmi	r3, #43	@ 0x2b
 800f330:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f334:	f89a 3000 	ldrb.w	r3, [sl]
 800f338:	2b2a      	cmp	r3, #42	@ 0x2a
 800f33a:	d015      	beq.n	800f368 <_vfiprintf_r+0x120>
 800f33c:	9a07      	ldr	r2, [sp, #28]
 800f33e:	4654      	mov	r4, sl
 800f340:	2000      	movs	r0, #0
 800f342:	f04f 0c0a 	mov.w	ip, #10
 800f346:	4621      	mov	r1, r4
 800f348:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f34c:	3b30      	subs	r3, #48	@ 0x30
 800f34e:	2b09      	cmp	r3, #9
 800f350:	d94b      	bls.n	800f3ea <_vfiprintf_r+0x1a2>
 800f352:	b1b0      	cbz	r0, 800f382 <_vfiprintf_r+0x13a>
 800f354:	9207      	str	r2, [sp, #28]
 800f356:	e014      	b.n	800f382 <_vfiprintf_r+0x13a>
 800f358:	eba0 0308 	sub.w	r3, r0, r8
 800f35c:	fa09 f303 	lsl.w	r3, r9, r3
 800f360:	4313      	orrs	r3, r2
 800f362:	9304      	str	r3, [sp, #16]
 800f364:	46a2      	mov	sl, r4
 800f366:	e7d2      	b.n	800f30e <_vfiprintf_r+0xc6>
 800f368:	9b03      	ldr	r3, [sp, #12]
 800f36a:	1d19      	adds	r1, r3, #4
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	9103      	str	r1, [sp, #12]
 800f370:	2b00      	cmp	r3, #0
 800f372:	bfbb      	ittet	lt
 800f374:	425b      	neglt	r3, r3
 800f376:	f042 0202 	orrlt.w	r2, r2, #2
 800f37a:	9307      	strge	r3, [sp, #28]
 800f37c:	9307      	strlt	r3, [sp, #28]
 800f37e:	bfb8      	it	lt
 800f380:	9204      	strlt	r2, [sp, #16]
 800f382:	7823      	ldrb	r3, [r4, #0]
 800f384:	2b2e      	cmp	r3, #46	@ 0x2e
 800f386:	d10a      	bne.n	800f39e <_vfiprintf_r+0x156>
 800f388:	7863      	ldrb	r3, [r4, #1]
 800f38a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f38c:	d132      	bne.n	800f3f4 <_vfiprintf_r+0x1ac>
 800f38e:	9b03      	ldr	r3, [sp, #12]
 800f390:	1d1a      	adds	r2, r3, #4
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	9203      	str	r2, [sp, #12]
 800f396:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f39a:	3402      	adds	r4, #2
 800f39c:	9305      	str	r3, [sp, #20]
 800f39e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f474 <_vfiprintf_r+0x22c>
 800f3a2:	7821      	ldrb	r1, [r4, #0]
 800f3a4:	2203      	movs	r2, #3
 800f3a6:	4650      	mov	r0, sl
 800f3a8:	f7f0 ff12 	bl	80001d0 <memchr>
 800f3ac:	b138      	cbz	r0, 800f3be <_vfiprintf_r+0x176>
 800f3ae:	9b04      	ldr	r3, [sp, #16]
 800f3b0:	eba0 000a 	sub.w	r0, r0, sl
 800f3b4:	2240      	movs	r2, #64	@ 0x40
 800f3b6:	4082      	lsls	r2, r0
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	3401      	adds	r4, #1
 800f3bc:	9304      	str	r3, [sp, #16]
 800f3be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3c2:	4829      	ldr	r0, [pc, #164]	@ (800f468 <_vfiprintf_r+0x220>)
 800f3c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f3c8:	2206      	movs	r2, #6
 800f3ca:	f7f0 ff01 	bl	80001d0 <memchr>
 800f3ce:	2800      	cmp	r0, #0
 800f3d0:	d03f      	beq.n	800f452 <_vfiprintf_r+0x20a>
 800f3d2:	4b26      	ldr	r3, [pc, #152]	@ (800f46c <_vfiprintf_r+0x224>)
 800f3d4:	bb1b      	cbnz	r3, 800f41e <_vfiprintf_r+0x1d6>
 800f3d6:	9b03      	ldr	r3, [sp, #12]
 800f3d8:	3307      	adds	r3, #7
 800f3da:	f023 0307 	bic.w	r3, r3, #7
 800f3de:	3308      	adds	r3, #8
 800f3e0:	9303      	str	r3, [sp, #12]
 800f3e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3e4:	443b      	add	r3, r7
 800f3e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3e8:	e76a      	b.n	800f2c0 <_vfiprintf_r+0x78>
 800f3ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3ee:	460c      	mov	r4, r1
 800f3f0:	2001      	movs	r0, #1
 800f3f2:	e7a8      	b.n	800f346 <_vfiprintf_r+0xfe>
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	3401      	adds	r4, #1
 800f3f8:	9305      	str	r3, [sp, #20]
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	f04f 0c0a 	mov.w	ip, #10
 800f400:	4620      	mov	r0, r4
 800f402:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f406:	3a30      	subs	r2, #48	@ 0x30
 800f408:	2a09      	cmp	r2, #9
 800f40a:	d903      	bls.n	800f414 <_vfiprintf_r+0x1cc>
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d0c6      	beq.n	800f39e <_vfiprintf_r+0x156>
 800f410:	9105      	str	r1, [sp, #20]
 800f412:	e7c4      	b.n	800f39e <_vfiprintf_r+0x156>
 800f414:	fb0c 2101 	mla	r1, ip, r1, r2
 800f418:	4604      	mov	r4, r0
 800f41a:	2301      	movs	r3, #1
 800f41c:	e7f0      	b.n	800f400 <_vfiprintf_r+0x1b8>
 800f41e:	ab03      	add	r3, sp, #12
 800f420:	9300      	str	r3, [sp, #0]
 800f422:	462a      	mov	r2, r5
 800f424:	4b12      	ldr	r3, [pc, #72]	@ (800f470 <_vfiprintf_r+0x228>)
 800f426:	a904      	add	r1, sp, #16
 800f428:	4630      	mov	r0, r6
 800f42a:	f7fc fbe1 	bl	800bbf0 <_printf_float>
 800f42e:	4607      	mov	r7, r0
 800f430:	1c78      	adds	r0, r7, #1
 800f432:	d1d6      	bne.n	800f3e2 <_vfiprintf_r+0x19a>
 800f434:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f436:	07d9      	lsls	r1, r3, #31
 800f438:	d405      	bmi.n	800f446 <_vfiprintf_r+0x1fe>
 800f43a:	89ab      	ldrh	r3, [r5, #12]
 800f43c:	059a      	lsls	r2, r3, #22
 800f43e:	d402      	bmi.n	800f446 <_vfiprintf_r+0x1fe>
 800f440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f442:	f7fd fb97 	bl	800cb74 <__retarget_lock_release_recursive>
 800f446:	89ab      	ldrh	r3, [r5, #12]
 800f448:	065b      	lsls	r3, r3, #25
 800f44a:	f53f af1f 	bmi.w	800f28c <_vfiprintf_r+0x44>
 800f44e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f450:	e71e      	b.n	800f290 <_vfiprintf_r+0x48>
 800f452:	ab03      	add	r3, sp, #12
 800f454:	9300      	str	r3, [sp, #0]
 800f456:	462a      	mov	r2, r5
 800f458:	4b05      	ldr	r3, [pc, #20]	@ (800f470 <_vfiprintf_r+0x228>)
 800f45a:	a904      	add	r1, sp, #16
 800f45c:	4630      	mov	r0, r6
 800f45e:	f7fc fe5f 	bl	800c120 <_printf_i>
 800f462:	e7e4      	b.n	800f42e <_vfiprintf_r+0x1e6>
 800f464:	080105a9 	.word	0x080105a9
 800f468:	080105b3 	.word	0x080105b3
 800f46c:	0800bbf1 	.word	0x0800bbf1
 800f470:	0800f223 	.word	0x0800f223
 800f474:	080105af 	.word	0x080105af

0800f478 <__sflush_r>:
 800f478:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f480:	0716      	lsls	r6, r2, #28
 800f482:	4605      	mov	r5, r0
 800f484:	460c      	mov	r4, r1
 800f486:	d454      	bmi.n	800f532 <__sflush_r+0xba>
 800f488:	684b      	ldr	r3, [r1, #4]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	dc02      	bgt.n	800f494 <__sflush_r+0x1c>
 800f48e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f490:	2b00      	cmp	r3, #0
 800f492:	dd48      	ble.n	800f526 <__sflush_r+0xae>
 800f494:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f496:	2e00      	cmp	r6, #0
 800f498:	d045      	beq.n	800f526 <__sflush_r+0xae>
 800f49a:	2300      	movs	r3, #0
 800f49c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f4a0:	682f      	ldr	r7, [r5, #0]
 800f4a2:	6a21      	ldr	r1, [r4, #32]
 800f4a4:	602b      	str	r3, [r5, #0]
 800f4a6:	d030      	beq.n	800f50a <__sflush_r+0x92>
 800f4a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f4aa:	89a3      	ldrh	r3, [r4, #12]
 800f4ac:	0759      	lsls	r1, r3, #29
 800f4ae:	d505      	bpl.n	800f4bc <__sflush_r+0x44>
 800f4b0:	6863      	ldr	r3, [r4, #4]
 800f4b2:	1ad2      	subs	r2, r2, r3
 800f4b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f4b6:	b10b      	cbz	r3, 800f4bc <__sflush_r+0x44>
 800f4b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f4ba:	1ad2      	subs	r2, r2, r3
 800f4bc:	2300      	movs	r3, #0
 800f4be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f4c0:	6a21      	ldr	r1, [r4, #32]
 800f4c2:	4628      	mov	r0, r5
 800f4c4:	47b0      	blx	r6
 800f4c6:	1c43      	adds	r3, r0, #1
 800f4c8:	89a3      	ldrh	r3, [r4, #12]
 800f4ca:	d106      	bne.n	800f4da <__sflush_r+0x62>
 800f4cc:	6829      	ldr	r1, [r5, #0]
 800f4ce:	291d      	cmp	r1, #29
 800f4d0:	d82b      	bhi.n	800f52a <__sflush_r+0xb2>
 800f4d2:	4a2a      	ldr	r2, [pc, #168]	@ (800f57c <__sflush_r+0x104>)
 800f4d4:	40ca      	lsrs	r2, r1
 800f4d6:	07d6      	lsls	r6, r2, #31
 800f4d8:	d527      	bpl.n	800f52a <__sflush_r+0xb2>
 800f4da:	2200      	movs	r2, #0
 800f4dc:	6062      	str	r2, [r4, #4]
 800f4de:	04d9      	lsls	r1, r3, #19
 800f4e0:	6922      	ldr	r2, [r4, #16]
 800f4e2:	6022      	str	r2, [r4, #0]
 800f4e4:	d504      	bpl.n	800f4f0 <__sflush_r+0x78>
 800f4e6:	1c42      	adds	r2, r0, #1
 800f4e8:	d101      	bne.n	800f4ee <__sflush_r+0x76>
 800f4ea:	682b      	ldr	r3, [r5, #0]
 800f4ec:	b903      	cbnz	r3, 800f4f0 <__sflush_r+0x78>
 800f4ee:	6560      	str	r0, [r4, #84]	@ 0x54
 800f4f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f4f2:	602f      	str	r7, [r5, #0]
 800f4f4:	b1b9      	cbz	r1, 800f526 <__sflush_r+0xae>
 800f4f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f4fa:	4299      	cmp	r1, r3
 800f4fc:	d002      	beq.n	800f504 <__sflush_r+0x8c>
 800f4fe:	4628      	mov	r0, r5
 800f500:	f7fe f9a6 	bl	800d850 <_free_r>
 800f504:	2300      	movs	r3, #0
 800f506:	6363      	str	r3, [r4, #52]	@ 0x34
 800f508:	e00d      	b.n	800f526 <__sflush_r+0xae>
 800f50a:	2301      	movs	r3, #1
 800f50c:	4628      	mov	r0, r5
 800f50e:	47b0      	blx	r6
 800f510:	4602      	mov	r2, r0
 800f512:	1c50      	adds	r0, r2, #1
 800f514:	d1c9      	bne.n	800f4aa <__sflush_r+0x32>
 800f516:	682b      	ldr	r3, [r5, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d0c6      	beq.n	800f4aa <__sflush_r+0x32>
 800f51c:	2b1d      	cmp	r3, #29
 800f51e:	d001      	beq.n	800f524 <__sflush_r+0xac>
 800f520:	2b16      	cmp	r3, #22
 800f522:	d11e      	bne.n	800f562 <__sflush_r+0xea>
 800f524:	602f      	str	r7, [r5, #0]
 800f526:	2000      	movs	r0, #0
 800f528:	e022      	b.n	800f570 <__sflush_r+0xf8>
 800f52a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f52e:	b21b      	sxth	r3, r3
 800f530:	e01b      	b.n	800f56a <__sflush_r+0xf2>
 800f532:	690f      	ldr	r7, [r1, #16]
 800f534:	2f00      	cmp	r7, #0
 800f536:	d0f6      	beq.n	800f526 <__sflush_r+0xae>
 800f538:	0793      	lsls	r3, r2, #30
 800f53a:	680e      	ldr	r6, [r1, #0]
 800f53c:	bf08      	it	eq
 800f53e:	694b      	ldreq	r3, [r1, #20]
 800f540:	600f      	str	r7, [r1, #0]
 800f542:	bf18      	it	ne
 800f544:	2300      	movne	r3, #0
 800f546:	eba6 0807 	sub.w	r8, r6, r7
 800f54a:	608b      	str	r3, [r1, #8]
 800f54c:	f1b8 0f00 	cmp.w	r8, #0
 800f550:	dde9      	ble.n	800f526 <__sflush_r+0xae>
 800f552:	6a21      	ldr	r1, [r4, #32]
 800f554:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f556:	4643      	mov	r3, r8
 800f558:	463a      	mov	r2, r7
 800f55a:	4628      	mov	r0, r5
 800f55c:	47b0      	blx	r6
 800f55e:	2800      	cmp	r0, #0
 800f560:	dc08      	bgt.n	800f574 <__sflush_r+0xfc>
 800f562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f56a:	81a3      	strh	r3, [r4, #12]
 800f56c:	f04f 30ff 	mov.w	r0, #4294967295
 800f570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f574:	4407      	add	r7, r0
 800f576:	eba8 0800 	sub.w	r8, r8, r0
 800f57a:	e7e7      	b.n	800f54c <__sflush_r+0xd4>
 800f57c:	20400001 	.word	0x20400001

0800f580 <_fflush_r>:
 800f580:	b538      	push	{r3, r4, r5, lr}
 800f582:	690b      	ldr	r3, [r1, #16]
 800f584:	4605      	mov	r5, r0
 800f586:	460c      	mov	r4, r1
 800f588:	b913      	cbnz	r3, 800f590 <_fflush_r+0x10>
 800f58a:	2500      	movs	r5, #0
 800f58c:	4628      	mov	r0, r5
 800f58e:	bd38      	pop	{r3, r4, r5, pc}
 800f590:	b118      	cbz	r0, 800f59a <_fflush_r+0x1a>
 800f592:	6a03      	ldr	r3, [r0, #32]
 800f594:	b90b      	cbnz	r3, 800f59a <_fflush_r+0x1a>
 800f596:	f7fd f97b 	bl	800c890 <__sinit>
 800f59a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d0f3      	beq.n	800f58a <_fflush_r+0xa>
 800f5a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f5a4:	07d0      	lsls	r0, r2, #31
 800f5a6:	d404      	bmi.n	800f5b2 <_fflush_r+0x32>
 800f5a8:	0599      	lsls	r1, r3, #22
 800f5aa:	d402      	bmi.n	800f5b2 <_fflush_r+0x32>
 800f5ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5ae:	f7fd fae0 	bl	800cb72 <__retarget_lock_acquire_recursive>
 800f5b2:	4628      	mov	r0, r5
 800f5b4:	4621      	mov	r1, r4
 800f5b6:	f7ff ff5f 	bl	800f478 <__sflush_r>
 800f5ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f5bc:	07da      	lsls	r2, r3, #31
 800f5be:	4605      	mov	r5, r0
 800f5c0:	d4e4      	bmi.n	800f58c <_fflush_r+0xc>
 800f5c2:	89a3      	ldrh	r3, [r4, #12]
 800f5c4:	059b      	lsls	r3, r3, #22
 800f5c6:	d4e1      	bmi.n	800f58c <_fflush_r+0xc>
 800f5c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5ca:	f7fd fad3 	bl	800cb74 <__retarget_lock_release_recursive>
 800f5ce:	e7dd      	b.n	800f58c <_fflush_r+0xc>

0800f5d0 <__swbuf_r>:
 800f5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5d2:	460e      	mov	r6, r1
 800f5d4:	4614      	mov	r4, r2
 800f5d6:	4605      	mov	r5, r0
 800f5d8:	b118      	cbz	r0, 800f5e2 <__swbuf_r+0x12>
 800f5da:	6a03      	ldr	r3, [r0, #32]
 800f5dc:	b90b      	cbnz	r3, 800f5e2 <__swbuf_r+0x12>
 800f5de:	f7fd f957 	bl	800c890 <__sinit>
 800f5e2:	69a3      	ldr	r3, [r4, #24]
 800f5e4:	60a3      	str	r3, [r4, #8]
 800f5e6:	89a3      	ldrh	r3, [r4, #12]
 800f5e8:	071a      	lsls	r2, r3, #28
 800f5ea:	d501      	bpl.n	800f5f0 <__swbuf_r+0x20>
 800f5ec:	6923      	ldr	r3, [r4, #16]
 800f5ee:	b943      	cbnz	r3, 800f602 <__swbuf_r+0x32>
 800f5f0:	4621      	mov	r1, r4
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	f000 f82a 	bl	800f64c <__swsetup_r>
 800f5f8:	b118      	cbz	r0, 800f602 <__swbuf_r+0x32>
 800f5fa:	f04f 37ff 	mov.w	r7, #4294967295
 800f5fe:	4638      	mov	r0, r7
 800f600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f602:	6823      	ldr	r3, [r4, #0]
 800f604:	6922      	ldr	r2, [r4, #16]
 800f606:	1a98      	subs	r0, r3, r2
 800f608:	6963      	ldr	r3, [r4, #20]
 800f60a:	b2f6      	uxtb	r6, r6
 800f60c:	4283      	cmp	r3, r0
 800f60e:	4637      	mov	r7, r6
 800f610:	dc05      	bgt.n	800f61e <__swbuf_r+0x4e>
 800f612:	4621      	mov	r1, r4
 800f614:	4628      	mov	r0, r5
 800f616:	f7ff ffb3 	bl	800f580 <_fflush_r>
 800f61a:	2800      	cmp	r0, #0
 800f61c:	d1ed      	bne.n	800f5fa <__swbuf_r+0x2a>
 800f61e:	68a3      	ldr	r3, [r4, #8]
 800f620:	3b01      	subs	r3, #1
 800f622:	60a3      	str	r3, [r4, #8]
 800f624:	6823      	ldr	r3, [r4, #0]
 800f626:	1c5a      	adds	r2, r3, #1
 800f628:	6022      	str	r2, [r4, #0]
 800f62a:	701e      	strb	r6, [r3, #0]
 800f62c:	6962      	ldr	r2, [r4, #20]
 800f62e:	1c43      	adds	r3, r0, #1
 800f630:	429a      	cmp	r2, r3
 800f632:	d004      	beq.n	800f63e <__swbuf_r+0x6e>
 800f634:	89a3      	ldrh	r3, [r4, #12]
 800f636:	07db      	lsls	r3, r3, #31
 800f638:	d5e1      	bpl.n	800f5fe <__swbuf_r+0x2e>
 800f63a:	2e0a      	cmp	r6, #10
 800f63c:	d1df      	bne.n	800f5fe <__swbuf_r+0x2e>
 800f63e:	4621      	mov	r1, r4
 800f640:	4628      	mov	r0, r5
 800f642:	f7ff ff9d 	bl	800f580 <_fflush_r>
 800f646:	2800      	cmp	r0, #0
 800f648:	d0d9      	beq.n	800f5fe <__swbuf_r+0x2e>
 800f64a:	e7d6      	b.n	800f5fa <__swbuf_r+0x2a>

0800f64c <__swsetup_r>:
 800f64c:	b538      	push	{r3, r4, r5, lr}
 800f64e:	4b29      	ldr	r3, [pc, #164]	@ (800f6f4 <__swsetup_r+0xa8>)
 800f650:	4605      	mov	r5, r0
 800f652:	6818      	ldr	r0, [r3, #0]
 800f654:	460c      	mov	r4, r1
 800f656:	b118      	cbz	r0, 800f660 <__swsetup_r+0x14>
 800f658:	6a03      	ldr	r3, [r0, #32]
 800f65a:	b90b      	cbnz	r3, 800f660 <__swsetup_r+0x14>
 800f65c:	f7fd f918 	bl	800c890 <__sinit>
 800f660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f664:	0719      	lsls	r1, r3, #28
 800f666:	d422      	bmi.n	800f6ae <__swsetup_r+0x62>
 800f668:	06da      	lsls	r2, r3, #27
 800f66a:	d407      	bmi.n	800f67c <__swsetup_r+0x30>
 800f66c:	2209      	movs	r2, #9
 800f66e:	602a      	str	r2, [r5, #0]
 800f670:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f674:	81a3      	strh	r3, [r4, #12]
 800f676:	f04f 30ff 	mov.w	r0, #4294967295
 800f67a:	e033      	b.n	800f6e4 <__swsetup_r+0x98>
 800f67c:	0758      	lsls	r0, r3, #29
 800f67e:	d512      	bpl.n	800f6a6 <__swsetup_r+0x5a>
 800f680:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f682:	b141      	cbz	r1, 800f696 <__swsetup_r+0x4a>
 800f684:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f688:	4299      	cmp	r1, r3
 800f68a:	d002      	beq.n	800f692 <__swsetup_r+0x46>
 800f68c:	4628      	mov	r0, r5
 800f68e:	f7fe f8df 	bl	800d850 <_free_r>
 800f692:	2300      	movs	r3, #0
 800f694:	6363      	str	r3, [r4, #52]	@ 0x34
 800f696:	89a3      	ldrh	r3, [r4, #12]
 800f698:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f69c:	81a3      	strh	r3, [r4, #12]
 800f69e:	2300      	movs	r3, #0
 800f6a0:	6063      	str	r3, [r4, #4]
 800f6a2:	6923      	ldr	r3, [r4, #16]
 800f6a4:	6023      	str	r3, [r4, #0]
 800f6a6:	89a3      	ldrh	r3, [r4, #12]
 800f6a8:	f043 0308 	orr.w	r3, r3, #8
 800f6ac:	81a3      	strh	r3, [r4, #12]
 800f6ae:	6923      	ldr	r3, [r4, #16]
 800f6b0:	b94b      	cbnz	r3, 800f6c6 <__swsetup_r+0x7a>
 800f6b2:	89a3      	ldrh	r3, [r4, #12]
 800f6b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f6b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f6bc:	d003      	beq.n	800f6c6 <__swsetup_r+0x7a>
 800f6be:	4621      	mov	r1, r4
 800f6c0:	4628      	mov	r0, r5
 800f6c2:	f000 fc3d 	bl	800ff40 <__smakebuf_r>
 800f6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6ca:	f013 0201 	ands.w	r2, r3, #1
 800f6ce:	d00a      	beq.n	800f6e6 <__swsetup_r+0x9a>
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	60a2      	str	r2, [r4, #8]
 800f6d4:	6962      	ldr	r2, [r4, #20]
 800f6d6:	4252      	negs	r2, r2
 800f6d8:	61a2      	str	r2, [r4, #24]
 800f6da:	6922      	ldr	r2, [r4, #16]
 800f6dc:	b942      	cbnz	r2, 800f6f0 <__swsetup_r+0xa4>
 800f6de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f6e2:	d1c5      	bne.n	800f670 <__swsetup_r+0x24>
 800f6e4:	bd38      	pop	{r3, r4, r5, pc}
 800f6e6:	0799      	lsls	r1, r3, #30
 800f6e8:	bf58      	it	pl
 800f6ea:	6962      	ldrpl	r2, [r4, #20]
 800f6ec:	60a2      	str	r2, [r4, #8]
 800f6ee:	e7f4      	b.n	800f6da <__swsetup_r+0x8e>
 800f6f0:	2000      	movs	r0, #0
 800f6f2:	e7f7      	b.n	800f6e4 <__swsetup_r+0x98>
 800f6f4:	20000018 	.word	0x20000018

0800f6f8 <memmove>:
 800f6f8:	4288      	cmp	r0, r1
 800f6fa:	b510      	push	{r4, lr}
 800f6fc:	eb01 0402 	add.w	r4, r1, r2
 800f700:	d902      	bls.n	800f708 <memmove+0x10>
 800f702:	4284      	cmp	r4, r0
 800f704:	4623      	mov	r3, r4
 800f706:	d807      	bhi.n	800f718 <memmove+0x20>
 800f708:	1e43      	subs	r3, r0, #1
 800f70a:	42a1      	cmp	r1, r4
 800f70c:	d008      	beq.n	800f720 <memmove+0x28>
 800f70e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f712:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f716:	e7f8      	b.n	800f70a <memmove+0x12>
 800f718:	4402      	add	r2, r0
 800f71a:	4601      	mov	r1, r0
 800f71c:	428a      	cmp	r2, r1
 800f71e:	d100      	bne.n	800f722 <memmove+0x2a>
 800f720:	bd10      	pop	{r4, pc}
 800f722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f72a:	e7f7      	b.n	800f71c <memmove+0x24>

0800f72c <strncmp>:
 800f72c:	b510      	push	{r4, lr}
 800f72e:	b16a      	cbz	r2, 800f74c <strncmp+0x20>
 800f730:	3901      	subs	r1, #1
 800f732:	1884      	adds	r4, r0, r2
 800f734:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f738:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d103      	bne.n	800f748 <strncmp+0x1c>
 800f740:	42a0      	cmp	r0, r4
 800f742:	d001      	beq.n	800f748 <strncmp+0x1c>
 800f744:	2a00      	cmp	r2, #0
 800f746:	d1f5      	bne.n	800f734 <strncmp+0x8>
 800f748:	1ad0      	subs	r0, r2, r3
 800f74a:	bd10      	pop	{r4, pc}
 800f74c:	4610      	mov	r0, r2
 800f74e:	e7fc      	b.n	800f74a <strncmp+0x1e>

0800f750 <nan>:
 800f750:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f758 <nan+0x8>
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop
 800f758:	00000000 	.word	0x00000000
 800f75c:	7ff80000 	.word	0x7ff80000

0800f760 <__assert_func>:
 800f760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f762:	4614      	mov	r4, r2
 800f764:	461a      	mov	r2, r3
 800f766:	4b09      	ldr	r3, [pc, #36]	@ (800f78c <__assert_func+0x2c>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	4605      	mov	r5, r0
 800f76c:	68d8      	ldr	r0, [r3, #12]
 800f76e:	b14c      	cbz	r4, 800f784 <__assert_func+0x24>
 800f770:	4b07      	ldr	r3, [pc, #28]	@ (800f790 <__assert_func+0x30>)
 800f772:	9100      	str	r1, [sp, #0]
 800f774:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f778:	4906      	ldr	r1, [pc, #24]	@ (800f794 <__assert_func+0x34>)
 800f77a:	462b      	mov	r3, r5
 800f77c:	f000 fba8 	bl	800fed0 <fiprintf>
 800f780:	f000 fc3c 	bl	800fffc <abort>
 800f784:	4b04      	ldr	r3, [pc, #16]	@ (800f798 <__assert_func+0x38>)
 800f786:	461c      	mov	r4, r3
 800f788:	e7f3      	b.n	800f772 <__assert_func+0x12>
 800f78a:	bf00      	nop
 800f78c:	20000018 	.word	0x20000018
 800f790:	080105c2 	.word	0x080105c2
 800f794:	080105cf 	.word	0x080105cf
 800f798:	080105fd 	.word	0x080105fd

0800f79c <_calloc_r>:
 800f79c:	b570      	push	{r4, r5, r6, lr}
 800f79e:	fba1 5402 	umull	r5, r4, r1, r2
 800f7a2:	b934      	cbnz	r4, 800f7b2 <_calloc_r+0x16>
 800f7a4:	4629      	mov	r1, r5
 800f7a6:	f7fc f8f7 	bl	800b998 <_malloc_r>
 800f7aa:	4606      	mov	r6, r0
 800f7ac:	b928      	cbnz	r0, 800f7ba <_calloc_r+0x1e>
 800f7ae:	4630      	mov	r0, r6
 800f7b0:	bd70      	pop	{r4, r5, r6, pc}
 800f7b2:	220c      	movs	r2, #12
 800f7b4:	6002      	str	r2, [r0, #0]
 800f7b6:	2600      	movs	r6, #0
 800f7b8:	e7f9      	b.n	800f7ae <_calloc_r+0x12>
 800f7ba:	462a      	mov	r2, r5
 800f7bc:	4621      	mov	r1, r4
 800f7be:	f7fd f94a 	bl	800ca56 <memset>
 800f7c2:	e7f4      	b.n	800f7ae <_calloc_r+0x12>

0800f7c4 <rshift>:
 800f7c4:	6903      	ldr	r3, [r0, #16]
 800f7c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f7ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f7d2:	f100 0414 	add.w	r4, r0, #20
 800f7d6:	dd45      	ble.n	800f864 <rshift+0xa0>
 800f7d8:	f011 011f 	ands.w	r1, r1, #31
 800f7dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f7e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f7e4:	d10c      	bne.n	800f800 <rshift+0x3c>
 800f7e6:	f100 0710 	add.w	r7, r0, #16
 800f7ea:	4629      	mov	r1, r5
 800f7ec:	42b1      	cmp	r1, r6
 800f7ee:	d334      	bcc.n	800f85a <rshift+0x96>
 800f7f0:	1a9b      	subs	r3, r3, r2
 800f7f2:	009b      	lsls	r3, r3, #2
 800f7f4:	1eea      	subs	r2, r5, #3
 800f7f6:	4296      	cmp	r6, r2
 800f7f8:	bf38      	it	cc
 800f7fa:	2300      	movcc	r3, #0
 800f7fc:	4423      	add	r3, r4
 800f7fe:	e015      	b.n	800f82c <rshift+0x68>
 800f800:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f804:	f1c1 0820 	rsb	r8, r1, #32
 800f808:	40cf      	lsrs	r7, r1
 800f80a:	f105 0e04 	add.w	lr, r5, #4
 800f80e:	46a1      	mov	r9, r4
 800f810:	4576      	cmp	r6, lr
 800f812:	46f4      	mov	ip, lr
 800f814:	d815      	bhi.n	800f842 <rshift+0x7e>
 800f816:	1a9a      	subs	r2, r3, r2
 800f818:	0092      	lsls	r2, r2, #2
 800f81a:	3a04      	subs	r2, #4
 800f81c:	3501      	adds	r5, #1
 800f81e:	42ae      	cmp	r6, r5
 800f820:	bf38      	it	cc
 800f822:	2200      	movcc	r2, #0
 800f824:	18a3      	adds	r3, r4, r2
 800f826:	50a7      	str	r7, [r4, r2]
 800f828:	b107      	cbz	r7, 800f82c <rshift+0x68>
 800f82a:	3304      	adds	r3, #4
 800f82c:	1b1a      	subs	r2, r3, r4
 800f82e:	42a3      	cmp	r3, r4
 800f830:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f834:	bf08      	it	eq
 800f836:	2300      	moveq	r3, #0
 800f838:	6102      	str	r2, [r0, #16]
 800f83a:	bf08      	it	eq
 800f83c:	6143      	streq	r3, [r0, #20]
 800f83e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f842:	f8dc c000 	ldr.w	ip, [ip]
 800f846:	fa0c fc08 	lsl.w	ip, ip, r8
 800f84a:	ea4c 0707 	orr.w	r7, ip, r7
 800f84e:	f849 7b04 	str.w	r7, [r9], #4
 800f852:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f856:	40cf      	lsrs	r7, r1
 800f858:	e7da      	b.n	800f810 <rshift+0x4c>
 800f85a:	f851 cb04 	ldr.w	ip, [r1], #4
 800f85e:	f847 cf04 	str.w	ip, [r7, #4]!
 800f862:	e7c3      	b.n	800f7ec <rshift+0x28>
 800f864:	4623      	mov	r3, r4
 800f866:	e7e1      	b.n	800f82c <rshift+0x68>

0800f868 <__hexdig_fun>:
 800f868:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f86c:	2b09      	cmp	r3, #9
 800f86e:	d802      	bhi.n	800f876 <__hexdig_fun+0xe>
 800f870:	3820      	subs	r0, #32
 800f872:	b2c0      	uxtb	r0, r0
 800f874:	4770      	bx	lr
 800f876:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f87a:	2b05      	cmp	r3, #5
 800f87c:	d801      	bhi.n	800f882 <__hexdig_fun+0x1a>
 800f87e:	3847      	subs	r0, #71	@ 0x47
 800f880:	e7f7      	b.n	800f872 <__hexdig_fun+0xa>
 800f882:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f886:	2b05      	cmp	r3, #5
 800f888:	d801      	bhi.n	800f88e <__hexdig_fun+0x26>
 800f88a:	3827      	subs	r0, #39	@ 0x27
 800f88c:	e7f1      	b.n	800f872 <__hexdig_fun+0xa>
 800f88e:	2000      	movs	r0, #0
 800f890:	4770      	bx	lr
	...

0800f894 <__gethex>:
 800f894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f898:	b085      	sub	sp, #20
 800f89a:	468a      	mov	sl, r1
 800f89c:	9302      	str	r3, [sp, #8]
 800f89e:	680b      	ldr	r3, [r1, #0]
 800f8a0:	9001      	str	r0, [sp, #4]
 800f8a2:	4690      	mov	r8, r2
 800f8a4:	1c9c      	adds	r4, r3, #2
 800f8a6:	46a1      	mov	r9, r4
 800f8a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f8ac:	2830      	cmp	r0, #48	@ 0x30
 800f8ae:	d0fa      	beq.n	800f8a6 <__gethex+0x12>
 800f8b0:	eba9 0303 	sub.w	r3, r9, r3
 800f8b4:	f1a3 0b02 	sub.w	fp, r3, #2
 800f8b8:	f7ff ffd6 	bl	800f868 <__hexdig_fun>
 800f8bc:	4605      	mov	r5, r0
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	d168      	bne.n	800f994 <__gethex+0x100>
 800f8c2:	49a0      	ldr	r1, [pc, #640]	@ (800fb44 <__gethex+0x2b0>)
 800f8c4:	2201      	movs	r2, #1
 800f8c6:	4648      	mov	r0, r9
 800f8c8:	f7ff ff30 	bl	800f72c <strncmp>
 800f8cc:	4607      	mov	r7, r0
 800f8ce:	2800      	cmp	r0, #0
 800f8d0:	d167      	bne.n	800f9a2 <__gethex+0x10e>
 800f8d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f8d6:	4626      	mov	r6, r4
 800f8d8:	f7ff ffc6 	bl	800f868 <__hexdig_fun>
 800f8dc:	2800      	cmp	r0, #0
 800f8de:	d062      	beq.n	800f9a6 <__gethex+0x112>
 800f8e0:	4623      	mov	r3, r4
 800f8e2:	7818      	ldrb	r0, [r3, #0]
 800f8e4:	2830      	cmp	r0, #48	@ 0x30
 800f8e6:	4699      	mov	r9, r3
 800f8e8:	f103 0301 	add.w	r3, r3, #1
 800f8ec:	d0f9      	beq.n	800f8e2 <__gethex+0x4e>
 800f8ee:	f7ff ffbb 	bl	800f868 <__hexdig_fun>
 800f8f2:	fab0 f580 	clz	r5, r0
 800f8f6:	096d      	lsrs	r5, r5, #5
 800f8f8:	f04f 0b01 	mov.w	fp, #1
 800f8fc:	464a      	mov	r2, r9
 800f8fe:	4616      	mov	r6, r2
 800f900:	3201      	adds	r2, #1
 800f902:	7830      	ldrb	r0, [r6, #0]
 800f904:	f7ff ffb0 	bl	800f868 <__hexdig_fun>
 800f908:	2800      	cmp	r0, #0
 800f90a:	d1f8      	bne.n	800f8fe <__gethex+0x6a>
 800f90c:	498d      	ldr	r1, [pc, #564]	@ (800fb44 <__gethex+0x2b0>)
 800f90e:	2201      	movs	r2, #1
 800f910:	4630      	mov	r0, r6
 800f912:	f7ff ff0b 	bl	800f72c <strncmp>
 800f916:	2800      	cmp	r0, #0
 800f918:	d13f      	bne.n	800f99a <__gethex+0x106>
 800f91a:	b944      	cbnz	r4, 800f92e <__gethex+0x9a>
 800f91c:	1c74      	adds	r4, r6, #1
 800f91e:	4622      	mov	r2, r4
 800f920:	4616      	mov	r6, r2
 800f922:	3201      	adds	r2, #1
 800f924:	7830      	ldrb	r0, [r6, #0]
 800f926:	f7ff ff9f 	bl	800f868 <__hexdig_fun>
 800f92a:	2800      	cmp	r0, #0
 800f92c:	d1f8      	bne.n	800f920 <__gethex+0x8c>
 800f92e:	1ba4      	subs	r4, r4, r6
 800f930:	00a7      	lsls	r7, r4, #2
 800f932:	7833      	ldrb	r3, [r6, #0]
 800f934:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f938:	2b50      	cmp	r3, #80	@ 0x50
 800f93a:	d13e      	bne.n	800f9ba <__gethex+0x126>
 800f93c:	7873      	ldrb	r3, [r6, #1]
 800f93e:	2b2b      	cmp	r3, #43	@ 0x2b
 800f940:	d033      	beq.n	800f9aa <__gethex+0x116>
 800f942:	2b2d      	cmp	r3, #45	@ 0x2d
 800f944:	d034      	beq.n	800f9b0 <__gethex+0x11c>
 800f946:	1c71      	adds	r1, r6, #1
 800f948:	2400      	movs	r4, #0
 800f94a:	7808      	ldrb	r0, [r1, #0]
 800f94c:	f7ff ff8c 	bl	800f868 <__hexdig_fun>
 800f950:	1e43      	subs	r3, r0, #1
 800f952:	b2db      	uxtb	r3, r3
 800f954:	2b18      	cmp	r3, #24
 800f956:	d830      	bhi.n	800f9ba <__gethex+0x126>
 800f958:	f1a0 0210 	sub.w	r2, r0, #16
 800f95c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f960:	f7ff ff82 	bl	800f868 <__hexdig_fun>
 800f964:	f100 3cff 	add.w	ip, r0, #4294967295
 800f968:	fa5f fc8c 	uxtb.w	ip, ip
 800f96c:	f1bc 0f18 	cmp.w	ip, #24
 800f970:	f04f 030a 	mov.w	r3, #10
 800f974:	d91e      	bls.n	800f9b4 <__gethex+0x120>
 800f976:	b104      	cbz	r4, 800f97a <__gethex+0xe6>
 800f978:	4252      	negs	r2, r2
 800f97a:	4417      	add	r7, r2
 800f97c:	f8ca 1000 	str.w	r1, [sl]
 800f980:	b1ed      	cbz	r5, 800f9be <__gethex+0x12a>
 800f982:	f1bb 0f00 	cmp.w	fp, #0
 800f986:	bf0c      	ite	eq
 800f988:	2506      	moveq	r5, #6
 800f98a:	2500      	movne	r5, #0
 800f98c:	4628      	mov	r0, r5
 800f98e:	b005      	add	sp, #20
 800f990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f994:	2500      	movs	r5, #0
 800f996:	462c      	mov	r4, r5
 800f998:	e7b0      	b.n	800f8fc <__gethex+0x68>
 800f99a:	2c00      	cmp	r4, #0
 800f99c:	d1c7      	bne.n	800f92e <__gethex+0x9a>
 800f99e:	4627      	mov	r7, r4
 800f9a0:	e7c7      	b.n	800f932 <__gethex+0x9e>
 800f9a2:	464e      	mov	r6, r9
 800f9a4:	462f      	mov	r7, r5
 800f9a6:	2501      	movs	r5, #1
 800f9a8:	e7c3      	b.n	800f932 <__gethex+0x9e>
 800f9aa:	2400      	movs	r4, #0
 800f9ac:	1cb1      	adds	r1, r6, #2
 800f9ae:	e7cc      	b.n	800f94a <__gethex+0xb6>
 800f9b0:	2401      	movs	r4, #1
 800f9b2:	e7fb      	b.n	800f9ac <__gethex+0x118>
 800f9b4:	fb03 0002 	mla	r0, r3, r2, r0
 800f9b8:	e7ce      	b.n	800f958 <__gethex+0xc4>
 800f9ba:	4631      	mov	r1, r6
 800f9bc:	e7de      	b.n	800f97c <__gethex+0xe8>
 800f9be:	eba6 0309 	sub.w	r3, r6, r9
 800f9c2:	3b01      	subs	r3, #1
 800f9c4:	4629      	mov	r1, r5
 800f9c6:	2b07      	cmp	r3, #7
 800f9c8:	dc0a      	bgt.n	800f9e0 <__gethex+0x14c>
 800f9ca:	9801      	ldr	r0, [sp, #4]
 800f9cc:	f7fd ff8a 	bl	800d8e4 <_Balloc>
 800f9d0:	4604      	mov	r4, r0
 800f9d2:	b940      	cbnz	r0, 800f9e6 <__gethex+0x152>
 800f9d4:	4b5c      	ldr	r3, [pc, #368]	@ (800fb48 <__gethex+0x2b4>)
 800f9d6:	4602      	mov	r2, r0
 800f9d8:	21e4      	movs	r1, #228	@ 0xe4
 800f9da:	485c      	ldr	r0, [pc, #368]	@ (800fb4c <__gethex+0x2b8>)
 800f9dc:	f7ff fec0 	bl	800f760 <__assert_func>
 800f9e0:	3101      	adds	r1, #1
 800f9e2:	105b      	asrs	r3, r3, #1
 800f9e4:	e7ef      	b.n	800f9c6 <__gethex+0x132>
 800f9e6:	f100 0a14 	add.w	sl, r0, #20
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	4655      	mov	r5, sl
 800f9ee:	469b      	mov	fp, r3
 800f9f0:	45b1      	cmp	r9, r6
 800f9f2:	d337      	bcc.n	800fa64 <__gethex+0x1d0>
 800f9f4:	f845 bb04 	str.w	fp, [r5], #4
 800f9f8:	eba5 050a 	sub.w	r5, r5, sl
 800f9fc:	10ad      	asrs	r5, r5, #2
 800f9fe:	6125      	str	r5, [r4, #16]
 800fa00:	4658      	mov	r0, fp
 800fa02:	f7fe f861 	bl	800dac8 <__hi0bits>
 800fa06:	016d      	lsls	r5, r5, #5
 800fa08:	f8d8 6000 	ldr.w	r6, [r8]
 800fa0c:	1a2d      	subs	r5, r5, r0
 800fa0e:	42b5      	cmp	r5, r6
 800fa10:	dd54      	ble.n	800fabc <__gethex+0x228>
 800fa12:	1bad      	subs	r5, r5, r6
 800fa14:	4629      	mov	r1, r5
 800fa16:	4620      	mov	r0, r4
 800fa18:	f7fe fbed 	bl	800e1f6 <__any_on>
 800fa1c:	4681      	mov	r9, r0
 800fa1e:	b178      	cbz	r0, 800fa40 <__gethex+0x1ac>
 800fa20:	1e6b      	subs	r3, r5, #1
 800fa22:	1159      	asrs	r1, r3, #5
 800fa24:	f003 021f 	and.w	r2, r3, #31
 800fa28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fa2c:	f04f 0901 	mov.w	r9, #1
 800fa30:	fa09 f202 	lsl.w	r2, r9, r2
 800fa34:	420a      	tst	r2, r1
 800fa36:	d003      	beq.n	800fa40 <__gethex+0x1ac>
 800fa38:	454b      	cmp	r3, r9
 800fa3a:	dc36      	bgt.n	800faaa <__gethex+0x216>
 800fa3c:	f04f 0902 	mov.w	r9, #2
 800fa40:	4629      	mov	r1, r5
 800fa42:	4620      	mov	r0, r4
 800fa44:	f7ff febe 	bl	800f7c4 <rshift>
 800fa48:	442f      	add	r7, r5
 800fa4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fa4e:	42bb      	cmp	r3, r7
 800fa50:	da42      	bge.n	800fad8 <__gethex+0x244>
 800fa52:	9801      	ldr	r0, [sp, #4]
 800fa54:	4621      	mov	r1, r4
 800fa56:	f7fd ff85 	bl	800d964 <_Bfree>
 800fa5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	6013      	str	r3, [r2, #0]
 800fa60:	25a3      	movs	r5, #163	@ 0xa3
 800fa62:	e793      	b.n	800f98c <__gethex+0xf8>
 800fa64:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fa68:	2a2e      	cmp	r2, #46	@ 0x2e
 800fa6a:	d012      	beq.n	800fa92 <__gethex+0x1fe>
 800fa6c:	2b20      	cmp	r3, #32
 800fa6e:	d104      	bne.n	800fa7a <__gethex+0x1e6>
 800fa70:	f845 bb04 	str.w	fp, [r5], #4
 800fa74:	f04f 0b00 	mov.w	fp, #0
 800fa78:	465b      	mov	r3, fp
 800fa7a:	7830      	ldrb	r0, [r6, #0]
 800fa7c:	9303      	str	r3, [sp, #12]
 800fa7e:	f7ff fef3 	bl	800f868 <__hexdig_fun>
 800fa82:	9b03      	ldr	r3, [sp, #12]
 800fa84:	f000 000f 	and.w	r0, r0, #15
 800fa88:	4098      	lsls	r0, r3
 800fa8a:	ea4b 0b00 	orr.w	fp, fp, r0
 800fa8e:	3304      	adds	r3, #4
 800fa90:	e7ae      	b.n	800f9f0 <__gethex+0x15c>
 800fa92:	45b1      	cmp	r9, r6
 800fa94:	d8ea      	bhi.n	800fa6c <__gethex+0x1d8>
 800fa96:	492b      	ldr	r1, [pc, #172]	@ (800fb44 <__gethex+0x2b0>)
 800fa98:	9303      	str	r3, [sp, #12]
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	4630      	mov	r0, r6
 800fa9e:	f7ff fe45 	bl	800f72c <strncmp>
 800faa2:	9b03      	ldr	r3, [sp, #12]
 800faa4:	2800      	cmp	r0, #0
 800faa6:	d1e1      	bne.n	800fa6c <__gethex+0x1d8>
 800faa8:	e7a2      	b.n	800f9f0 <__gethex+0x15c>
 800faaa:	1ea9      	subs	r1, r5, #2
 800faac:	4620      	mov	r0, r4
 800faae:	f7fe fba2 	bl	800e1f6 <__any_on>
 800fab2:	2800      	cmp	r0, #0
 800fab4:	d0c2      	beq.n	800fa3c <__gethex+0x1a8>
 800fab6:	f04f 0903 	mov.w	r9, #3
 800faba:	e7c1      	b.n	800fa40 <__gethex+0x1ac>
 800fabc:	da09      	bge.n	800fad2 <__gethex+0x23e>
 800fabe:	1b75      	subs	r5, r6, r5
 800fac0:	4621      	mov	r1, r4
 800fac2:	9801      	ldr	r0, [sp, #4]
 800fac4:	462a      	mov	r2, r5
 800fac6:	f7fe f95d 	bl	800dd84 <__lshift>
 800faca:	1b7f      	subs	r7, r7, r5
 800facc:	4604      	mov	r4, r0
 800face:	f100 0a14 	add.w	sl, r0, #20
 800fad2:	f04f 0900 	mov.w	r9, #0
 800fad6:	e7b8      	b.n	800fa4a <__gethex+0x1b6>
 800fad8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fadc:	42bd      	cmp	r5, r7
 800fade:	dd6f      	ble.n	800fbc0 <__gethex+0x32c>
 800fae0:	1bed      	subs	r5, r5, r7
 800fae2:	42ae      	cmp	r6, r5
 800fae4:	dc34      	bgt.n	800fb50 <__gethex+0x2bc>
 800fae6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800faea:	2b02      	cmp	r3, #2
 800faec:	d022      	beq.n	800fb34 <__gethex+0x2a0>
 800faee:	2b03      	cmp	r3, #3
 800faf0:	d024      	beq.n	800fb3c <__gethex+0x2a8>
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d115      	bne.n	800fb22 <__gethex+0x28e>
 800faf6:	42ae      	cmp	r6, r5
 800faf8:	d113      	bne.n	800fb22 <__gethex+0x28e>
 800fafa:	2e01      	cmp	r6, #1
 800fafc:	d10b      	bne.n	800fb16 <__gethex+0x282>
 800fafe:	9a02      	ldr	r2, [sp, #8]
 800fb00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fb04:	6013      	str	r3, [r2, #0]
 800fb06:	2301      	movs	r3, #1
 800fb08:	6123      	str	r3, [r4, #16]
 800fb0a:	f8ca 3000 	str.w	r3, [sl]
 800fb0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb10:	2562      	movs	r5, #98	@ 0x62
 800fb12:	601c      	str	r4, [r3, #0]
 800fb14:	e73a      	b.n	800f98c <__gethex+0xf8>
 800fb16:	1e71      	subs	r1, r6, #1
 800fb18:	4620      	mov	r0, r4
 800fb1a:	f7fe fb6c 	bl	800e1f6 <__any_on>
 800fb1e:	2800      	cmp	r0, #0
 800fb20:	d1ed      	bne.n	800fafe <__gethex+0x26a>
 800fb22:	9801      	ldr	r0, [sp, #4]
 800fb24:	4621      	mov	r1, r4
 800fb26:	f7fd ff1d 	bl	800d964 <_Bfree>
 800fb2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	6013      	str	r3, [r2, #0]
 800fb30:	2550      	movs	r5, #80	@ 0x50
 800fb32:	e72b      	b.n	800f98c <__gethex+0xf8>
 800fb34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d1f3      	bne.n	800fb22 <__gethex+0x28e>
 800fb3a:	e7e0      	b.n	800fafe <__gethex+0x26a>
 800fb3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d1dd      	bne.n	800fafe <__gethex+0x26a>
 800fb42:	e7ee      	b.n	800fb22 <__gethex+0x28e>
 800fb44:	080105a7 	.word	0x080105a7
 800fb48:	0801053d 	.word	0x0801053d
 800fb4c:	080105fe 	.word	0x080105fe
 800fb50:	1e6f      	subs	r7, r5, #1
 800fb52:	f1b9 0f00 	cmp.w	r9, #0
 800fb56:	d130      	bne.n	800fbba <__gethex+0x326>
 800fb58:	b127      	cbz	r7, 800fb64 <__gethex+0x2d0>
 800fb5a:	4639      	mov	r1, r7
 800fb5c:	4620      	mov	r0, r4
 800fb5e:	f7fe fb4a 	bl	800e1f6 <__any_on>
 800fb62:	4681      	mov	r9, r0
 800fb64:	117a      	asrs	r2, r7, #5
 800fb66:	2301      	movs	r3, #1
 800fb68:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fb6c:	f007 071f 	and.w	r7, r7, #31
 800fb70:	40bb      	lsls	r3, r7
 800fb72:	4213      	tst	r3, r2
 800fb74:	4629      	mov	r1, r5
 800fb76:	4620      	mov	r0, r4
 800fb78:	bf18      	it	ne
 800fb7a:	f049 0902 	orrne.w	r9, r9, #2
 800fb7e:	f7ff fe21 	bl	800f7c4 <rshift>
 800fb82:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fb86:	1b76      	subs	r6, r6, r5
 800fb88:	2502      	movs	r5, #2
 800fb8a:	f1b9 0f00 	cmp.w	r9, #0
 800fb8e:	d047      	beq.n	800fc20 <__gethex+0x38c>
 800fb90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fb94:	2b02      	cmp	r3, #2
 800fb96:	d015      	beq.n	800fbc4 <__gethex+0x330>
 800fb98:	2b03      	cmp	r3, #3
 800fb9a:	d017      	beq.n	800fbcc <__gethex+0x338>
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d109      	bne.n	800fbb4 <__gethex+0x320>
 800fba0:	f019 0f02 	tst.w	r9, #2
 800fba4:	d006      	beq.n	800fbb4 <__gethex+0x320>
 800fba6:	f8da 3000 	ldr.w	r3, [sl]
 800fbaa:	ea49 0903 	orr.w	r9, r9, r3
 800fbae:	f019 0f01 	tst.w	r9, #1
 800fbb2:	d10e      	bne.n	800fbd2 <__gethex+0x33e>
 800fbb4:	f045 0510 	orr.w	r5, r5, #16
 800fbb8:	e032      	b.n	800fc20 <__gethex+0x38c>
 800fbba:	f04f 0901 	mov.w	r9, #1
 800fbbe:	e7d1      	b.n	800fb64 <__gethex+0x2d0>
 800fbc0:	2501      	movs	r5, #1
 800fbc2:	e7e2      	b.n	800fb8a <__gethex+0x2f6>
 800fbc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fbc6:	f1c3 0301 	rsb	r3, r3, #1
 800fbca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fbcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d0f0      	beq.n	800fbb4 <__gethex+0x320>
 800fbd2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fbd6:	f104 0314 	add.w	r3, r4, #20
 800fbda:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fbde:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fbe2:	f04f 0c00 	mov.w	ip, #0
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fbf0:	d01b      	beq.n	800fc2a <__gethex+0x396>
 800fbf2:	3201      	adds	r2, #1
 800fbf4:	6002      	str	r2, [r0, #0]
 800fbf6:	2d02      	cmp	r5, #2
 800fbf8:	f104 0314 	add.w	r3, r4, #20
 800fbfc:	d13c      	bne.n	800fc78 <__gethex+0x3e4>
 800fbfe:	f8d8 2000 	ldr.w	r2, [r8]
 800fc02:	3a01      	subs	r2, #1
 800fc04:	42b2      	cmp	r2, r6
 800fc06:	d109      	bne.n	800fc1c <__gethex+0x388>
 800fc08:	1171      	asrs	r1, r6, #5
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fc10:	f006 061f 	and.w	r6, r6, #31
 800fc14:	fa02 f606 	lsl.w	r6, r2, r6
 800fc18:	421e      	tst	r6, r3
 800fc1a:	d13a      	bne.n	800fc92 <__gethex+0x3fe>
 800fc1c:	f045 0520 	orr.w	r5, r5, #32
 800fc20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc22:	601c      	str	r4, [r3, #0]
 800fc24:	9b02      	ldr	r3, [sp, #8]
 800fc26:	601f      	str	r7, [r3, #0]
 800fc28:	e6b0      	b.n	800f98c <__gethex+0xf8>
 800fc2a:	4299      	cmp	r1, r3
 800fc2c:	f843 cc04 	str.w	ip, [r3, #-4]
 800fc30:	d8d9      	bhi.n	800fbe6 <__gethex+0x352>
 800fc32:	68a3      	ldr	r3, [r4, #8]
 800fc34:	459b      	cmp	fp, r3
 800fc36:	db17      	blt.n	800fc68 <__gethex+0x3d4>
 800fc38:	6861      	ldr	r1, [r4, #4]
 800fc3a:	9801      	ldr	r0, [sp, #4]
 800fc3c:	3101      	adds	r1, #1
 800fc3e:	f7fd fe51 	bl	800d8e4 <_Balloc>
 800fc42:	4681      	mov	r9, r0
 800fc44:	b918      	cbnz	r0, 800fc4e <__gethex+0x3ba>
 800fc46:	4b1a      	ldr	r3, [pc, #104]	@ (800fcb0 <__gethex+0x41c>)
 800fc48:	4602      	mov	r2, r0
 800fc4a:	2184      	movs	r1, #132	@ 0x84
 800fc4c:	e6c5      	b.n	800f9da <__gethex+0x146>
 800fc4e:	6922      	ldr	r2, [r4, #16]
 800fc50:	3202      	adds	r2, #2
 800fc52:	f104 010c 	add.w	r1, r4, #12
 800fc56:	0092      	lsls	r2, r2, #2
 800fc58:	300c      	adds	r0, #12
 800fc5a:	f7fc ff8c 	bl	800cb76 <memcpy>
 800fc5e:	4621      	mov	r1, r4
 800fc60:	9801      	ldr	r0, [sp, #4]
 800fc62:	f7fd fe7f 	bl	800d964 <_Bfree>
 800fc66:	464c      	mov	r4, r9
 800fc68:	6923      	ldr	r3, [r4, #16]
 800fc6a:	1c5a      	adds	r2, r3, #1
 800fc6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fc70:	6122      	str	r2, [r4, #16]
 800fc72:	2201      	movs	r2, #1
 800fc74:	615a      	str	r2, [r3, #20]
 800fc76:	e7be      	b.n	800fbf6 <__gethex+0x362>
 800fc78:	6922      	ldr	r2, [r4, #16]
 800fc7a:	455a      	cmp	r2, fp
 800fc7c:	dd0b      	ble.n	800fc96 <__gethex+0x402>
 800fc7e:	2101      	movs	r1, #1
 800fc80:	4620      	mov	r0, r4
 800fc82:	f7ff fd9f 	bl	800f7c4 <rshift>
 800fc86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fc8a:	3701      	adds	r7, #1
 800fc8c:	42bb      	cmp	r3, r7
 800fc8e:	f6ff aee0 	blt.w	800fa52 <__gethex+0x1be>
 800fc92:	2501      	movs	r5, #1
 800fc94:	e7c2      	b.n	800fc1c <__gethex+0x388>
 800fc96:	f016 061f 	ands.w	r6, r6, #31
 800fc9a:	d0fa      	beq.n	800fc92 <__gethex+0x3fe>
 800fc9c:	4453      	add	r3, sl
 800fc9e:	f1c6 0620 	rsb	r6, r6, #32
 800fca2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fca6:	f7fd ff0f 	bl	800dac8 <__hi0bits>
 800fcaa:	42b0      	cmp	r0, r6
 800fcac:	dbe7      	blt.n	800fc7e <__gethex+0x3ea>
 800fcae:	e7f0      	b.n	800fc92 <__gethex+0x3fe>
 800fcb0:	0801053d 	.word	0x0801053d

0800fcb4 <L_shift>:
 800fcb4:	f1c2 0208 	rsb	r2, r2, #8
 800fcb8:	0092      	lsls	r2, r2, #2
 800fcba:	b570      	push	{r4, r5, r6, lr}
 800fcbc:	f1c2 0620 	rsb	r6, r2, #32
 800fcc0:	6843      	ldr	r3, [r0, #4]
 800fcc2:	6804      	ldr	r4, [r0, #0]
 800fcc4:	fa03 f506 	lsl.w	r5, r3, r6
 800fcc8:	432c      	orrs	r4, r5
 800fcca:	40d3      	lsrs	r3, r2
 800fccc:	6004      	str	r4, [r0, #0]
 800fcce:	f840 3f04 	str.w	r3, [r0, #4]!
 800fcd2:	4288      	cmp	r0, r1
 800fcd4:	d3f4      	bcc.n	800fcc0 <L_shift+0xc>
 800fcd6:	bd70      	pop	{r4, r5, r6, pc}

0800fcd8 <__match>:
 800fcd8:	b530      	push	{r4, r5, lr}
 800fcda:	6803      	ldr	r3, [r0, #0]
 800fcdc:	3301      	adds	r3, #1
 800fcde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fce2:	b914      	cbnz	r4, 800fcea <__match+0x12>
 800fce4:	6003      	str	r3, [r0, #0]
 800fce6:	2001      	movs	r0, #1
 800fce8:	bd30      	pop	{r4, r5, pc}
 800fcea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800fcf2:	2d19      	cmp	r5, #25
 800fcf4:	bf98      	it	ls
 800fcf6:	3220      	addls	r2, #32
 800fcf8:	42a2      	cmp	r2, r4
 800fcfa:	d0f0      	beq.n	800fcde <__match+0x6>
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	e7f3      	b.n	800fce8 <__match+0x10>

0800fd00 <__hexnan>:
 800fd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd04:	680b      	ldr	r3, [r1, #0]
 800fd06:	6801      	ldr	r1, [r0, #0]
 800fd08:	115e      	asrs	r6, r3, #5
 800fd0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fd0e:	f013 031f 	ands.w	r3, r3, #31
 800fd12:	b087      	sub	sp, #28
 800fd14:	bf18      	it	ne
 800fd16:	3604      	addne	r6, #4
 800fd18:	2500      	movs	r5, #0
 800fd1a:	1f37      	subs	r7, r6, #4
 800fd1c:	4682      	mov	sl, r0
 800fd1e:	4690      	mov	r8, r2
 800fd20:	9301      	str	r3, [sp, #4]
 800fd22:	f846 5c04 	str.w	r5, [r6, #-4]
 800fd26:	46b9      	mov	r9, r7
 800fd28:	463c      	mov	r4, r7
 800fd2a:	9502      	str	r5, [sp, #8]
 800fd2c:	46ab      	mov	fp, r5
 800fd2e:	784a      	ldrb	r2, [r1, #1]
 800fd30:	1c4b      	adds	r3, r1, #1
 800fd32:	9303      	str	r3, [sp, #12]
 800fd34:	b342      	cbz	r2, 800fd88 <__hexnan+0x88>
 800fd36:	4610      	mov	r0, r2
 800fd38:	9105      	str	r1, [sp, #20]
 800fd3a:	9204      	str	r2, [sp, #16]
 800fd3c:	f7ff fd94 	bl	800f868 <__hexdig_fun>
 800fd40:	2800      	cmp	r0, #0
 800fd42:	d151      	bne.n	800fde8 <__hexnan+0xe8>
 800fd44:	9a04      	ldr	r2, [sp, #16]
 800fd46:	9905      	ldr	r1, [sp, #20]
 800fd48:	2a20      	cmp	r2, #32
 800fd4a:	d818      	bhi.n	800fd7e <__hexnan+0x7e>
 800fd4c:	9b02      	ldr	r3, [sp, #8]
 800fd4e:	459b      	cmp	fp, r3
 800fd50:	dd13      	ble.n	800fd7a <__hexnan+0x7a>
 800fd52:	454c      	cmp	r4, r9
 800fd54:	d206      	bcs.n	800fd64 <__hexnan+0x64>
 800fd56:	2d07      	cmp	r5, #7
 800fd58:	dc04      	bgt.n	800fd64 <__hexnan+0x64>
 800fd5a:	462a      	mov	r2, r5
 800fd5c:	4649      	mov	r1, r9
 800fd5e:	4620      	mov	r0, r4
 800fd60:	f7ff ffa8 	bl	800fcb4 <L_shift>
 800fd64:	4544      	cmp	r4, r8
 800fd66:	d952      	bls.n	800fe0e <__hexnan+0x10e>
 800fd68:	2300      	movs	r3, #0
 800fd6a:	f1a4 0904 	sub.w	r9, r4, #4
 800fd6e:	f844 3c04 	str.w	r3, [r4, #-4]
 800fd72:	f8cd b008 	str.w	fp, [sp, #8]
 800fd76:	464c      	mov	r4, r9
 800fd78:	461d      	mov	r5, r3
 800fd7a:	9903      	ldr	r1, [sp, #12]
 800fd7c:	e7d7      	b.n	800fd2e <__hexnan+0x2e>
 800fd7e:	2a29      	cmp	r2, #41	@ 0x29
 800fd80:	d157      	bne.n	800fe32 <__hexnan+0x132>
 800fd82:	3102      	adds	r1, #2
 800fd84:	f8ca 1000 	str.w	r1, [sl]
 800fd88:	f1bb 0f00 	cmp.w	fp, #0
 800fd8c:	d051      	beq.n	800fe32 <__hexnan+0x132>
 800fd8e:	454c      	cmp	r4, r9
 800fd90:	d206      	bcs.n	800fda0 <__hexnan+0xa0>
 800fd92:	2d07      	cmp	r5, #7
 800fd94:	dc04      	bgt.n	800fda0 <__hexnan+0xa0>
 800fd96:	462a      	mov	r2, r5
 800fd98:	4649      	mov	r1, r9
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	f7ff ff8a 	bl	800fcb4 <L_shift>
 800fda0:	4544      	cmp	r4, r8
 800fda2:	d936      	bls.n	800fe12 <__hexnan+0x112>
 800fda4:	f1a8 0204 	sub.w	r2, r8, #4
 800fda8:	4623      	mov	r3, r4
 800fdaa:	f853 1b04 	ldr.w	r1, [r3], #4
 800fdae:	f842 1f04 	str.w	r1, [r2, #4]!
 800fdb2:	429f      	cmp	r7, r3
 800fdb4:	d2f9      	bcs.n	800fdaa <__hexnan+0xaa>
 800fdb6:	1b3b      	subs	r3, r7, r4
 800fdb8:	f023 0303 	bic.w	r3, r3, #3
 800fdbc:	3304      	adds	r3, #4
 800fdbe:	3401      	adds	r4, #1
 800fdc0:	3e03      	subs	r6, #3
 800fdc2:	42b4      	cmp	r4, r6
 800fdc4:	bf88      	it	hi
 800fdc6:	2304      	movhi	r3, #4
 800fdc8:	4443      	add	r3, r8
 800fdca:	2200      	movs	r2, #0
 800fdcc:	f843 2b04 	str.w	r2, [r3], #4
 800fdd0:	429f      	cmp	r7, r3
 800fdd2:	d2fb      	bcs.n	800fdcc <__hexnan+0xcc>
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	b91b      	cbnz	r3, 800fde0 <__hexnan+0xe0>
 800fdd8:	4547      	cmp	r7, r8
 800fdda:	d128      	bne.n	800fe2e <__hexnan+0x12e>
 800fddc:	2301      	movs	r3, #1
 800fdde:	603b      	str	r3, [r7, #0]
 800fde0:	2005      	movs	r0, #5
 800fde2:	b007      	add	sp, #28
 800fde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde8:	3501      	adds	r5, #1
 800fdea:	2d08      	cmp	r5, #8
 800fdec:	f10b 0b01 	add.w	fp, fp, #1
 800fdf0:	dd06      	ble.n	800fe00 <__hexnan+0x100>
 800fdf2:	4544      	cmp	r4, r8
 800fdf4:	d9c1      	bls.n	800fd7a <__hexnan+0x7a>
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	f844 3c04 	str.w	r3, [r4, #-4]
 800fdfc:	2501      	movs	r5, #1
 800fdfe:	3c04      	subs	r4, #4
 800fe00:	6822      	ldr	r2, [r4, #0]
 800fe02:	f000 000f 	and.w	r0, r0, #15
 800fe06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fe0a:	6020      	str	r0, [r4, #0]
 800fe0c:	e7b5      	b.n	800fd7a <__hexnan+0x7a>
 800fe0e:	2508      	movs	r5, #8
 800fe10:	e7b3      	b.n	800fd7a <__hexnan+0x7a>
 800fe12:	9b01      	ldr	r3, [sp, #4]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d0dd      	beq.n	800fdd4 <__hexnan+0xd4>
 800fe18:	f1c3 0320 	rsb	r3, r3, #32
 800fe1c:	f04f 32ff 	mov.w	r2, #4294967295
 800fe20:	40da      	lsrs	r2, r3
 800fe22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fe26:	4013      	ands	r3, r2
 800fe28:	f846 3c04 	str.w	r3, [r6, #-4]
 800fe2c:	e7d2      	b.n	800fdd4 <__hexnan+0xd4>
 800fe2e:	3f04      	subs	r7, #4
 800fe30:	e7d0      	b.n	800fdd4 <__hexnan+0xd4>
 800fe32:	2004      	movs	r0, #4
 800fe34:	e7d5      	b.n	800fde2 <__hexnan+0xe2>

0800fe36 <__ascii_mbtowc>:
 800fe36:	b082      	sub	sp, #8
 800fe38:	b901      	cbnz	r1, 800fe3c <__ascii_mbtowc+0x6>
 800fe3a:	a901      	add	r1, sp, #4
 800fe3c:	b142      	cbz	r2, 800fe50 <__ascii_mbtowc+0x1a>
 800fe3e:	b14b      	cbz	r3, 800fe54 <__ascii_mbtowc+0x1e>
 800fe40:	7813      	ldrb	r3, [r2, #0]
 800fe42:	600b      	str	r3, [r1, #0]
 800fe44:	7812      	ldrb	r2, [r2, #0]
 800fe46:	1e10      	subs	r0, r2, #0
 800fe48:	bf18      	it	ne
 800fe4a:	2001      	movne	r0, #1
 800fe4c:	b002      	add	sp, #8
 800fe4e:	4770      	bx	lr
 800fe50:	4610      	mov	r0, r2
 800fe52:	e7fb      	b.n	800fe4c <__ascii_mbtowc+0x16>
 800fe54:	f06f 0001 	mvn.w	r0, #1
 800fe58:	e7f8      	b.n	800fe4c <__ascii_mbtowc+0x16>

0800fe5a <_realloc_r>:
 800fe5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe5e:	4607      	mov	r7, r0
 800fe60:	4614      	mov	r4, r2
 800fe62:	460d      	mov	r5, r1
 800fe64:	b921      	cbnz	r1, 800fe70 <_realloc_r+0x16>
 800fe66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe6a:	4611      	mov	r1, r2
 800fe6c:	f7fb bd94 	b.w	800b998 <_malloc_r>
 800fe70:	b92a      	cbnz	r2, 800fe7e <_realloc_r+0x24>
 800fe72:	f7fd fced 	bl	800d850 <_free_r>
 800fe76:	4625      	mov	r5, r4
 800fe78:	4628      	mov	r0, r5
 800fe7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe7e:	f000 f8c4 	bl	801000a <_malloc_usable_size_r>
 800fe82:	4284      	cmp	r4, r0
 800fe84:	4606      	mov	r6, r0
 800fe86:	d802      	bhi.n	800fe8e <_realloc_r+0x34>
 800fe88:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe8c:	d8f4      	bhi.n	800fe78 <_realloc_r+0x1e>
 800fe8e:	4621      	mov	r1, r4
 800fe90:	4638      	mov	r0, r7
 800fe92:	f7fb fd81 	bl	800b998 <_malloc_r>
 800fe96:	4680      	mov	r8, r0
 800fe98:	b908      	cbnz	r0, 800fe9e <_realloc_r+0x44>
 800fe9a:	4645      	mov	r5, r8
 800fe9c:	e7ec      	b.n	800fe78 <_realloc_r+0x1e>
 800fe9e:	42b4      	cmp	r4, r6
 800fea0:	4622      	mov	r2, r4
 800fea2:	4629      	mov	r1, r5
 800fea4:	bf28      	it	cs
 800fea6:	4632      	movcs	r2, r6
 800fea8:	f7fc fe65 	bl	800cb76 <memcpy>
 800feac:	4629      	mov	r1, r5
 800feae:	4638      	mov	r0, r7
 800feb0:	f7fd fcce 	bl	800d850 <_free_r>
 800feb4:	e7f1      	b.n	800fe9a <_realloc_r+0x40>

0800feb6 <__ascii_wctomb>:
 800feb6:	4603      	mov	r3, r0
 800feb8:	4608      	mov	r0, r1
 800feba:	b141      	cbz	r1, 800fece <__ascii_wctomb+0x18>
 800febc:	2aff      	cmp	r2, #255	@ 0xff
 800febe:	d904      	bls.n	800feca <__ascii_wctomb+0x14>
 800fec0:	228a      	movs	r2, #138	@ 0x8a
 800fec2:	601a      	str	r2, [r3, #0]
 800fec4:	f04f 30ff 	mov.w	r0, #4294967295
 800fec8:	4770      	bx	lr
 800feca:	700a      	strb	r2, [r1, #0]
 800fecc:	2001      	movs	r0, #1
 800fece:	4770      	bx	lr

0800fed0 <fiprintf>:
 800fed0:	b40e      	push	{r1, r2, r3}
 800fed2:	b503      	push	{r0, r1, lr}
 800fed4:	4601      	mov	r1, r0
 800fed6:	ab03      	add	r3, sp, #12
 800fed8:	4805      	ldr	r0, [pc, #20]	@ (800fef0 <fiprintf+0x20>)
 800feda:	f853 2b04 	ldr.w	r2, [r3], #4
 800fede:	6800      	ldr	r0, [r0, #0]
 800fee0:	9301      	str	r3, [sp, #4]
 800fee2:	f7ff f9b1 	bl	800f248 <_vfiprintf_r>
 800fee6:	b002      	add	sp, #8
 800fee8:	f85d eb04 	ldr.w	lr, [sp], #4
 800feec:	b003      	add	sp, #12
 800feee:	4770      	bx	lr
 800fef0:	20000018 	.word	0x20000018

0800fef4 <__swhatbuf_r>:
 800fef4:	b570      	push	{r4, r5, r6, lr}
 800fef6:	460c      	mov	r4, r1
 800fef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fefc:	2900      	cmp	r1, #0
 800fefe:	b096      	sub	sp, #88	@ 0x58
 800ff00:	4615      	mov	r5, r2
 800ff02:	461e      	mov	r6, r3
 800ff04:	da0d      	bge.n	800ff22 <__swhatbuf_r+0x2e>
 800ff06:	89a3      	ldrh	r3, [r4, #12]
 800ff08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ff0c:	f04f 0100 	mov.w	r1, #0
 800ff10:	bf14      	ite	ne
 800ff12:	2340      	movne	r3, #64	@ 0x40
 800ff14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ff18:	2000      	movs	r0, #0
 800ff1a:	6031      	str	r1, [r6, #0]
 800ff1c:	602b      	str	r3, [r5, #0]
 800ff1e:	b016      	add	sp, #88	@ 0x58
 800ff20:	bd70      	pop	{r4, r5, r6, pc}
 800ff22:	466a      	mov	r2, sp
 800ff24:	f000 f848 	bl	800ffb8 <_fstat_r>
 800ff28:	2800      	cmp	r0, #0
 800ff2a:	dbec      	blt.n	800ff06 <__swhatbuf_r+0x12>
 800ff2c:	9901      	ldr	r1, [sp, #4]
 800ff2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ff32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ff36:	4259      	negs	r1, r3
 800ff38:	4159      	adcs	r1, r3
 800ff3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff3e:	e7eb      	b.n	800ff18 <__swhatbuf_r+0x24>

0800ff40 <__smakebuf_r>:
 800ff40:	898b      	ldrh	r3, [r1, #12]
 800ff42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff44:	079d      	lsls	r5, r3, #30
 800ff46:	4606      	mov	r6, r0
 800ff48:	460c      	mov	r4, r1
 800ff4a:	d507      	bpl.n	800ff5c <__smakebuf_r+0x1c>
 800ff4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ff50:	6023      	str	r3, [r4, #0]
 800ff52:	6123      	str	r3, [r4, #16]
 800ff54:	2301      	movs	r3, #1
 800ff56:	6163      	str	r3, [r4, #20]
 800ff58:	b003      	add	sp, #12
 800ff5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff5c:	ab01      	add	r3, sp, #4
 800ff5e:	466a      	mov	r2, sp
 800ff60:	f7ff ffc8 	bl	800fef4 <__swhatbuf_r>
 800ff64:	9f00      	ldr	r7, [sp, #0]
 800ff66:	4605      	mov	r5, r0
 800ff68:	4639      	mov	r1, r7
 800ff6a:	4630      	mov	r0, r6
 800ff6c:	f7fb fd14 	bl	800b998 <_malloc_r>
 800ff70:	b948      	cbnz	r0, 800ff86 <__smakebuf_r+0x46>
 800ff72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff76:	059a      	lsls	r2, r3, #22
 800ff78:	d4ee      	bmi.n	800ff58 <__smakebuf_r+0x18>
 800ff7a:	f023 0303 	bic.w	r3, r3, #3
 800ff7e:	f043 0302 	orr.w	r3, r3, #2
 800ff82:	81a3      	strh	r3, [r4, #12]
 800ff84:	e7e2      	b.n	800ff4c <__smakebuf_r+0xc>
 800ff86:	89a3      	ldrh	r3, [r4, #12]
 800ff88:	6020      	str	r0, [r4, #0]
 800ff8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff8e:	81a3      	strh	r3, [r4, #12]
 800ff90:	9b01      	ldr	r3, [sp, #4]
 800ff92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ff96:	b15b      	cbz	r3, 800ffb0 <__smakebuf_r+0x70>
 800ff98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff9c:	4630      	mov	r0, r6
 800ff9e:	f000 f81d 	bl	800ffdc <_isatty_r>
 800ffa2:	b128      	cbz	r0, 800ffb0 <__smakebuf_r+0x70>
 800ffa4:	89a3      	ldrh	r3, [r4, #12]
 800ffa6:	f023 0303 	bic.w	r3, r3, #3
 800ffaa:	f043 0301 	orr.w	r3, r3, #1
 800ffae:	81a3      	strh	r3, [r4, #12]
 800ffb0:	89a3      	ldrh	r3, [r4, #12]
 800ffb2:	431d      	orrs	r5, r3
 800ffb4:	81a5      	strh	r5, [r4, #12]
 800ffb6:	e7cf      	b.n	800ff58 <__smakebuf_r+0x18>

0800ffb8 <_fstat_r>:
 800ffb8:	b538      	push	{r3, r4, r5, lr}
 800ffba:	4d07      	ldr	r5, [pc, #28]	@ (800ffd8 <_fstat_r+0x20>)
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	4608      	mov	r0, r1
 800ffc2:	4611      	mov	r1, r2
 800ffc4:	602b      	str	r3, [r5, #0]
 800ffc6:	f7f1 fe67 	bl	8001c98 <_fstat>
 800ffca:	1c43      	adds	r3, r0, #1
 800ffcc:	d102      	bne.n	800ffd4 <_fstat_r+0x1c>
 800ffce:	682b      	ldr	r3, [r5, #0]
 800ffd0:	b103      	cbz	r3, 800ffd4 <_fstat_r+0x1c>
 800ffd2:	6023      	str	r3, [r4, #0]
 800ffd4:	bd38      	pop	{r3, r4, r5, pc}
 800ffd6:	bf00      	nop
 800ffd8:	20001b10 	.word	0x20001b10

0800ffdc <_isatty_r>:
 800ffdc:	b538      	push	{r3, r4, r5, lr}
 800ffde:	4d06      	ldr	r5, [pc, #24]	@ (800fff8 <_isatty_r+0x1c>)
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	4604      	mov	r4, r0
 800ffe4:	4608      	mov	r0, r1
 800ffe6:	602b      	str	r3, [r5, #0]
 800ffe8:	f7f1 fe66 	bl	8001cb8 <_isatty>
 800ffec:	1c43      	adds	r3, r0, #1
 800ffee:	d102      	bne.n	800fff6 <_isatty_r+0x1a>
 800fff0:	682b      	ldr	r3, [r5, #0]
 800fff2:	b103      	cbz	r3, 800fff6 <_isatty_r+0x1a>
 800fff4:	6023      	str	r3, [r4, #0]
 800fff6:	bd38      	pop	{r3, r4, r5, pc}
 800fff8:	20001b10 	.word	0x20001b10

0800fffc <abort>:
 800fffc:	b508      	push	{r3, lr}
 800fffe:	2006      	movs	r0, #6
 8010000:	f000 f834 	bl	801006c <raise>
 8010004:	2001      	movs	r0, #1
 8010006:	f7f1 fdf7 	bl	8001bf8 <_exit>

0801000a <_malloc_usable_size_r>:
 801000a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801000e:	1f18      	subs	r0, r3, #4
 8010010:	2b00      	cmp	r3, #0
 8010012:	bfbc      	itt	lt
 8010014:	580b      	ldrlt	r3, [r1, r0]
 8010016:	18c0      	addlt	r0, r0, r3
 8010018:	4770      	bx	lr

0801001a <_raise_r>:
 801001a:	291f      	cmp	r1, #31
 801001c:	b538      	push	{r3, r4, r5, lr}
 801001e:	4605      	mov	r5, r0
 8010020:	460c      	mov	r4, r1
 8010022:	d904      	bls.n	801002e <_raise_r+0x14>
 8010024:	2316      	movs	r3, #22
 8010026:	6003      	str	r3, [r0, #0]
 8010028:	f04f 30ff 	mov.w	r0, #4294967295
 801002c:	bd38      	pop	{r3, r4, r5, pc}
 801002e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010030:	b112      	cbz	r2, 8010038 <_raise_r+0x1e>
 8010032:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010036:	b94b      	cbnz	r3, 801004c <_raise_r+0x32>
 8010038:	4628      	mov	r0, r5
 801003a:	f000 f831 	bl	80100a0 <_getpid_r>
 801003e:	4622      	mov	r2, r4
 8010040:	4601      	mov	r1, r0
 8010042:	4628      	mov	r0, r5
 8010044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010048:	f000 b818 	b.w	801007c <_kill_r>
 801004c:	2b01      	cmp	r3, #1
 801004e:	d00a      	beq.n	8010066 <_raise_r+0x4c>
 8010050:	1c59      	adds	r1, r3, #1
 8010052:	d103      	bne.n	801005c <_raise_r+0x42>
 8010054:	2316      	movs	r3, #22
 8010056:	6003      	str	r3, [r0, #0]
 8010058:	2001      	movs	r0, #1
 801005a:	e7e7      	b.n	801002c <_raise_r+0x12>
 801005c:	2100      	movs	r1, #0
 801005e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010062:	4620      	mov	r0, r4
 8010064:	4798      	blx	r3
 8010066:	2000      	movs	r0, #0
 8010068:	e7e0      	b.n	801002c <_raise_r+0x12>
	...

0801006c <raise>:
 801006c:	4b02      	ldr	r3, [pc, #8]	@ (8010078 <raise+0xc>)
 801006e:	4601      	mov	r1, r0
 8010070:	6818      	ldr	r0, [r3, #0]
 8010072:	f7ff bfd2 	b.w	801001a <_raise_r>
 8010076:	bf00      	nop
 8010078:	20000018 	.word	0x20000018

0801007c <_kill_r>:
 801007c:	b538      	push	{r3, r4, r5, lr}
 801007e:	4d07      	ldr	r5, [pc, #28]	@ (801009c <_kill_r+0x20>)
 8010080:	2300      	movs	r3, #0
 8010082:	4604      	mov	r4, r0
 8010084:	4608      	mov	r0, r1
 8010086:	4611      	mov	r1, r2
 8010088:	602b      	str	r3, [r5, #0]
 801008a:	f7f1 fda5 	bl	8001bd8 <_kill>
 801008e:	1c43      	adds	r3, r0, #1
 8010090:	d102      	bne.n	8010098 <_kill_r+0x1c>
 8010092:	682b      	ldr	r3, [r5, #0]
 8010094:	b103      	cbz	r3, 8010098 <_kill_r+0x1c>
 8010096:	6023      	str	r3, [r4, #0]
 8010098:	bd38      	pop	{r3, r4, r5, pc}
 801009a:	bf00      	nop
 801009c:	20001b10 	.word	0x20001b10

080100a0 <_getpid_r>:
 80100a0:	f7f1 bd92 	b.w	8001bc8 <_getpid>

080100a4 <_init>:
 80100a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100a6:	bf00      	nop
 80100a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100aa:	bc08      	pop	{r3}
 80100ac:	469e      	mov	lr, r3
 80100ae:	4770      	bx	lr

080100b0 <_fini>:
 80100b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100b2:	bf00      	nop
 80100b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100b6:	bc08      	pop	{r3}
 80100b8:	469e      	mov	lr, r3
 80100ba:	4770      	bx	lr
