
SmartWatchProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08006558  08006558  00007558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006608  08006608  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006608  08006608  00007608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006610  08006610  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006610  08006610  00007610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006614  08006614  00007614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006618  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008dc  20000068  08006680  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000944  08006680  00008944  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151a3  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003385  00000000  00000000  0001d23b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  000205c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d6f  00000000  00000000  00021748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ffd  00000000  00000000  000224b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001751f  00000000  00000000  0004b4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0b7d  00000000  00000000  000629d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153550  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e58  00000000  00000000  00153594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001583ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006540 	.word	0x08006540

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006540 	.word	0x08006540

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b2:	4b22      	ldr	r3, [pc, #136]	@ (800063c <MX_DMA_Init+0x90>)
 80005b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005b6:	4a21      	ldr	r2, [pc, #132]	@ (800063c <MX_DMA_Init+0x90>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80005be:	4b1f      	ldr	r3, [pc, #124]	@ (800063c <MX_DMA_Init+0x90>)
 80005c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005ca:	4b1c      	ldr	r3, [pc, #112]	@ (800063c <MX_DMA_Init+0x90>)
 80005cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ce:	4a1b      	ldr	r2, [pc, #108]	@ (800063c <MX_DMA_Init+0x90>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80005d6:	4b19      	ldr	r3, [pc, #100]	@ (800063c <MX_DMA_Init+0x90>)
 80005d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	200c      	movs	r0, #12
 80005e8:	f001 f9c1 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80005ec:	200c      	movs	r0, #12
 80005ee:	f001 f9da 	bl	80019a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	200d      	movs	r0, #13
 80005f8:	f001 f9b9 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80005fc:	200d      	movs	r0, #13
 80005fe:	f001 f9d2 	bl	80019a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	200e      	movs	r0, #14
 8000608:	f001 f9b1 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800060c:	200e      	movs	r0, #14
 800060e:	f001 f9ca 	bl	80019a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	200f      	movs	r0, #15
 8000618:	f001 f9a9 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800061c:	200f      	movs	r0, #15
 800061e:	f001 f9c2 	bl	80019a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	2045      	movs	r0, #69	@ 0x45
 8000628:	f001 f9a1 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 800062c:	2045      	movs	r0, #69	@ 0x45
 800062e:	f001 f9ba 	bl	80019a6 <HAL_NVIC_EnableIRQ>

}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000

08000640 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000656:	4b62      	ldr	r3, [pc, #392]	@ (80007e0 <MX_GPIO_Init+0x1a0>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	4a61      	ldr	r2, [pc, #388]	@ (80007e0 <MX_GPIO_Init+0x1a0>)
 800065c:	f043 0304 	orr.w	r3, r3, #4
 8000660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000662:	4b5f      	ldr	r3, [pc, #380]	@ (80007e0 <MX_GPIO_Init+0x1a0>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	f003 0304 	and.w	r3, r3, #4
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b5c      	ldr	r3, [pc, #368]	@ (80007e0 <MX_GPIO_Init+0x1a0>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	4a5b      	ldr	r2, [pc, #364]	@ (80007e0 <MX_GPIO_Init+0x1a0>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067a:	4b59      	ldr	r3, [pc, #356]	@ (80007e0 <MX_GPIO_Init+0x1a0>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b56      	ldr	r3, [pc, #344]	@ (80007e0 <MX_GPIO_Init+0x1a0>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	4a55      	ldr	r2, [pc, #340]	@ (80007e0 <MX_GPIO_Init+0x1a0>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000692:	4b53      	ldr	r3, [pc, #332]	@ (80007e0 <MX_GPIO_Init+0x1a0>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_MAX30102_Pin|ST7789_DC_Pin|ST7789_CS_Pin|ST7789_BLK_Pin
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 61b9 	mov.w	r1, #1480	@ 0x5c8
 80006a4:	484f      	ldr	r0, [pc, #316]	@ (80007e4 <MX_GPIO_Init+0x1a4>)
 80006a6:	f001 fdc5 	bl	8002234 <HAL_GPIO_WritePin>
                          |BLE_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_SWD_Pin|LED_ERROR_Pin|LED_STATUS_Pin|LED_BLE_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f640 0164 	movw	r1, #2148	@ 0x864
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b4:	f001 fdbe 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GPS_Pin|LED_LCD_Pin|LED_BMP280_Pin|LED_MPUS6500_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f240 1107 	movw	r1, #263	@ 0x107
 80006be:	484a      	ldr	r0, [pc, #296]	@ (80007e8 <MX_GPIO_Init+0x1a8>)
 80006c0:	f001 fdb8 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006ca:	4847      	ldr	r0, [pc, #284]	@ (80007e8 <MX_GPIO_Init+0x1a8>)
 80006cc:	f001 fdb2 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MAX30102_INT_Pin BUTTON_NEXT_Pin */
  GPIO_InitStruct.Pin = MAX30102_INT_Pin|BUTTON_NEXT_Pin;
 80006d0:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80006d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	4619      	mov	r1, r3
 80006e6:	483f      	ldr	r0, [pc, #252]	@ (80007e4 <MX_GPIO_Init+0x1a4>)
 80006e8:	f001 fbfa 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_MAX30102_Pin ST7789_CS_Pin ST7789_BLK_Pin BLE_EN_Pin */
  GPIO_InitStruct.Pin = LED_MAX30102_Pin|ST7789_CS_Pin|ST7789_BLK_Pin|BLE_EN_Pin;
 80006ec:	f44f 63b1 	mov.w	r3, #1416	@ 0x588
 80006f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	4619      	mov	r1, r3
 8000704:	4837      	ldr	r0, [pc, #220]	@ (80007e4 <MX_GPIO_Init+0x1a4>)
 8000706:	f001 fbeb 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SWD_Pin LED_ERROR_Pin LED_STATUS_Pin LED_BLE_Pin */
  GPIO_InitStruct.Pin = LED_SWD_Pin|LED_ERROR_Pin|LED_STATUS_Pin|LED_BLE_Pin;
 800070a:	f640 0364 	movw	r3, #2148	@ 0x864
 800070e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	2301      	movs	r3, #1
 8000712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	4619      	mov	r1, r3
 8000722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000726:	f001 fbdb 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GPS_Pin LED_LCD_Pin LED_BMP280_Pin ST7789_RST_Pin
                           LED_MPUS6500_Pin */
  GPIO_InitStruct.Pin = LED_GPS_Pin|LED_LCD_Pin|LED_BMP280_Pin|ST7789_RST_Pin
 800072a:	f241 1307 	movw	r3, #4359	@ 0x1107
 800072e:	60fb      	str	r3, [r7, #12]
                          |LED_MPUS6500_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	4619      	mov	r1, r3
 8000742:	4829      	ldr	r0, [pc, #164]	@ (80007e8 <MX_GPIO_Init+0x1a8>)
 8000744:	f001 fbcc 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin;
 8000748:	2340      	movs	r3, #64	@ 0x40
 800074a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000754:	2302      	movs	r3, #2
 8000756:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ST7789_DC_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	4619      	mov	r1, r3
 800075e:	4821      	ldr	r0, [pc, #132]	@ (80007e4 <MX_GPIO_Init+0x1a4>)
 8000760:	f001 fbbe 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_BACK_Pin */
  GPIO_InitStruct.Pin = BUTTON_BACK_Pin;
 8000764:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800076a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800076e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_BACK_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800077e:	f001 fbaf 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STATE_Pin */
  GPIO_InitStruct.Pin = BLE_STATE_Pin;
 8000782:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLE_STATE_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	4813      	ldr	r0, [pc, #76]	@ (80007e4 <MX_GPIO_Init+0x1a4>)
 8000798:	f001 fba2 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6500_INT_Pin */
  GPIO_InitStruct.Pin = MPU6500_INT_Pin;
 800079c:	2320      	movs	r3, #32
 800079e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MPU6500_INT_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <MX_GPIO_Init+0x1a8>)
 80007b2:	f001 fb95 	bl	8001ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	2008      	movs	r0, #8
 80007bc:	f001 f8d7 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007c0:	2008      	movs	r0, #8
 80007c2:	f001 f8f0 	bl	80019a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	2017      	movs	r0, #23
 80007cc:	f001 f8cf 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007d0:	2017      	movs	r0, #23
 80007d2:	f001 f8e8 	bl	80019a6 <HAL_NVIC_EnableIRQ>

}
 80007d6:	bf00      	nop
 80007d8:	3720      	adds	r7, #32
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000
 80007e4:	48000800 	.word	0x48000800
 80007e8:	48000400 	.word	0x48000400

080007ec <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <MX_I2C1_Init+0x74>)
 80007f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000864 <MX_I2C1_Init+0x78>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <MX_I2C1_Init+0x74>)
 80007f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000868 <MX_I2C1_Init+0x7c>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007fc:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <MX_I2C1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000802:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <MX_I2C1_Init+0x74>)
 8000804:	2201      	movs	r2, #1
 8000806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000808:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_I2C1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_I2C1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000826:	480e      	ldr	r0, [pc, #56]	@ (8000860 <MX_I2C1_Init+0x74>)
 8000828:	f001 fd34 	bl	8002294 <HAL_I2C_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000832:	f000 fa89 	bl	8000d48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000836:	2100      	movs	r1, #0
 8000838:	4809      	ldr	r0, [pc, #36]	@ (8000860 <MX_I2C1_Init+0x74>)
 800083a:	f001 fdc6 	bl	80023ca <HAL_I2CEx_ConfigAnalogFilter>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000844:	f000 fa80 	bl	8000d48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_I2C1_Init+0x74>)
 800084c:	f001 fe08 	bl	8002460 <HAL_I2CEx_ConfigDigitalFilter>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 fa77 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000084 	.word	0x20000084
 8000864:	40005400 	.word	0x40005400
 8000868:	10d19ce4 	.word	0x10d19ce4

0800086c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000870:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <MX_I2C2_Init+0x74>)
 8000872:	4a1c      	ldr	r2, [pc, #112]	@ (80008e4 <MX_I2C2_Init+0x78>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000876:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <MX_I2C2_Init+0x74>)
 8000878:	4a1b      	ldr	r2, [pc, #108]	@ (80008e8 <MX_I2C2_Init+0x7c>)
 800087a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800087c:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <MX_I2C2_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000882:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <MX_I2C2_Init+0x74>)
 8000884:	2201      	movs	r2, #1
 8000886:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000888:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <MX_I2C2_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800088e:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_I2C2_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_I2C2_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_I2C2_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_I2C2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008a6:	480e      	ldr	r0, [pc, #56]	@ (80008e0 <MX_I2C2_Init+0x74>)
 80008a8:	f001 fcf4 	bl	8002294 <HAL_I2C_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008b2:	f000 fa49 	bl	8000d48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b6:	2100      	movs	r1, #0
 80008b8:	4809      	ldr	r0, [pc, #36]	@ (80008e0 <MX_I2C2_Init+0x74>)
 80008ba:	f001 fd86 	bl	80023ca <HAL_I2CEx_ConfigAnalogFilter>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008c4:	f000 fa40 	bl	8000d48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008c8:	2100      	movs	r1, #0
 80008ca:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_I2C2_Init+0x74>)
 80008cc:	f001 fdc8 	bl	8002460 <HAL_I2CEx_ConfigDigitalFilter>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008d6:	f000 fa37 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000d8 	.word	0x200000d8
 80008e4:	40005800 	.word	0x40005800
 80008e8:	10d19ce4 	.word	0x10d19ce4

080008ec <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <MX_I2C3_Init+0x74>)
 80008f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000964 <MX_I2C3_Init+0x78>)
 80008f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_I2C3_Init+0x74>)
 80008f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000968 <MX_I2C3_Init+0x7c>)
 80008fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80008fc:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <MX_I2C3_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000902:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_I2C3_Init+0x74>)
 8000904:	2201      	movs	r2, #1
 8000906:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000908:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <MX_I2C3_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_I2C3_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_I2C3_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_I2C3_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_I2C3_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000926:	480e      	ldr	r0, [pc, #56]	@ (8000960 <MX_I2C3_Init+0x74>)
 8000928:	f001 fcb4 	bl	8002294 <HAL_I2C_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000932:	f000 fa09 	bl	8000d48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000936:	2100      	movs	r1, #0
 8000938:	4809      	ldr	r0, [pc, #36]	@ (8000960 <MX_I2C3_Init+0x74>)
 800093a:	f001 fd46 	bl	80023ca <HAL_I2CEx_ConfigAnalogFilter>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000944:	f000 fa00 	bl	8000d48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000948:	2100      	movs	r1, #0
 800094a:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_I2C3_Init+0x74>)
 800094c:	f001 fd88 	bl	8002460 <HAL_I2CEx_ConfigDigitalFilter>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000956:	f000 f9f7 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000012c 	.word	0x2000012c
 8000964:	40005c00 	.word	0x40005c00
 8000968:	10d19ce4 	.word	0x10d19ce4

0800096c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b0b0      	sub	sp, #192	@ 0xc0
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000988:	2288      	movs	r2, #136	@ 0x88
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f005 f860 	bl	8005a52 <memset>
  if(i2cHandle->Instance==I2C1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a63      	ldr	r2, [pc, #396]	@ (8000b24 <HAL_I2C_MspInit+0x1b8>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d13b      	bne.n	8000a14 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800099c:	2340      	movs	r3, #64	@ 0x40
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 fc09 	bl	80031c0 <HAL_RCCEx_PeriphCLKConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009b4:	f000 f9c8 	bl	8000d48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b8:	4b5b      	ldr	r3, [pc, #364]	@ (8000b28 <HAL_I2C_MspInit+0x1bc>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009bc:	4a5a      	ldr	r2, [pc, #360]	@ (8000b28 <HAL_I2C_MspInit+0x1bc>)
 80009be:	f043 0302 	orr.w	r3, r3, #2
 80009c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c4:	4b58      	ldr	r3, [pc, #352]	@ (8000b28 <HAL_I2C_MspInit+0x1bc>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	623b      	str	r3, [r7, #32]
 80009ce:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU6500_SCL_Pin|MPU6500_SDA_Pin;
 80009d0:	23c0      	movs	r3, #192	@ 0xc0
 80009d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d6:	2312      	movs	r3, #18
 80009d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e8:	2304      	movs	r3, #4
 80009ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80009f2:	4619      	mov	r1, r3
 80009f4:	484d      	ldr	r0, [pc, #308]	@ (8000b2c <HAL_I2C_MspInit+0x1c0>)
 80009f6:	f001 fa73 	bl	8001ee0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009fa:	4b4b      	ldr	r3, [pc, #300]	@ (8000b28 <HAL_I2C_MspInit+0x1bc>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fe:	4a4a      	ldr	r2, [pc, #296]	@ (8000b28 <HAL_I2C_MspInit+0x1bc>)
 8000a00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a06:	4b48      	ldr	r3, [pc, #288]	@ (8000b28 <HAL_I2C_MspInit+0x1bc>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a0e:	61fb      	str	r3, [r7, #28]
 8000a10:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000a12:	e082      	b.n	8000b1a <HAL_I2C_MspInit+0x1ae>
  else if(i2cHandle->Instance==I2C2)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a45      	ldr	r2, [pc, #276]	@ (8000b30 <HAL_I2C_MspInit+0x1c4>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d13c      	bne.n	8000a98 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a1e:	2380      	movs	r3, #128	@ 0x80
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 fbc8 	bl	80031c0 <HAL_RCCEx_PeriphCLKConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000a36:	f000 f987 	bl	8000d48 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b28 <HAL_I2C_MspInit+0x1bc>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4a3a      	ldr	r2, [pc, #232]	@ (8000b28 <HAL_I2C_MspInit+0x1bc>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a46:	4b38      	ldr	r3, [pc, #224]	@ (8000b28 <HAL_I2C_MspInit+0x1bc>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = BMP280_SCL_Pin|BMP280_SDA_Pin;
 8000a52:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5a:	2312      	movs	r3, #18
 8000a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000a76:	4619      	mov	r1, r3
 8000a78:	482c      	ldr	r0, [pc, #176]	@ (8000b2c <HAL_I2C_MspInit+0x1c0>)
 8000a7a:	f001 fa31 	bl	8001ee0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b28 <HAL_I2C_MspInit+0x1bc>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a82:	4a29      	ldr	r2, [pc, #164]	@ (8000b28 <HAL_I2C_MspInit+0x1bc>)
 8000a84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a8a:	4b27      	ldr	r3, [pc, #156]	@ (8000b28 <HAL_I2C_MspInit+0x1bc>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697b      	ldr	r3, [r7, #20]
}
 8000a96:	e040      	b.n	8000b1a <HAL_I2C_MspInit+0x1ae>
  else if(i2cHandle->Instance==I2C3)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a25      	ldr	r2, [pc, #148]	@ (8000b34 <HAL_I2C_MspInit+0x1c8>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d13b      	bne.n	8000b1a <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000aa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 fb85 	bl	80031c0 <HAL_RCCEx_PeriphCLKConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8000abc:	f000 f944 	bl	8000d48 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac0:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <HAL_I2C_MspInit+0x1bc>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac4:	4a18      	ldr	r2, [pc, #96]	@ (8000b28 <HAL_I2C_MspInit+0x1bc>)
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000acc:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <HAL_I2C_MspInit+0x1bc>)
 8000ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MAX30102_SCL_Pin|MAX30102_SDA_Pin;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ade:	2312      	movs	r3, #18
 8000ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000af0:	2304      	movs	r3, #4
 8000af2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000afa:	4619      	mov	r1, r3
 8000afc:	480e      	ldr	r0, [pc, #56]	@ (8000b38 <HAL_I2C_MspInit+0x1cc>)
 8000afe:	f001 f9ef 	bl	8001ee0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <HAL_I2C_MspInit+0x1bc>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b06:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <HAL_I2C_MspInit+0x1bc>)
 8000b08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_I2C_MspInit+0x1bc>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
}
 8000b1a:	bf00      	nop
 8000b1c:	37c0      	adds	r7, #192	@ 0xc0
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40005400 	.word	0x40005400
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	48000400 	.word	0x48000400
 8000b30:	40005800 	.word	0x40005800
 8000b34:	40005c00 	.word	0x40005c00
 8000b38:	48000800 	.word	0x48000800

08000b3c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&STLINK_UART, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000b44:	1d39      	adds	r1, r7, #4
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4803      	ldr	r0, [pc, #12]	@ (8000b5c <__io_putchar+0x20>)
 8000b4e:	f003 fa04 	bl	8003f5a <HAL_UART_Transmit>
	return chr;
 8000b52:	687b      	ldr	r3, [r7, #4]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	2000043c 	.word	0x2000043c

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f000 fd8e 	bl	8001686 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f845 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6e:	f7ff fd67 	bl	8000640 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b72:	f7ff fd1b 	bl	80005ac <MX_DMA_Init>
  MX_I2C1_Init();
 8000b76:	f7ff fe39 	bl	80007ec <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b7a:	f7ff fe77 	bl	800086c <MX_I2C2_Init>
  MX_I2C3_Init();
 8000b7e:	f7ff feb5 	bl	80008ec <MX_I2C3_Init>
  MX_USART3_UART_Init();
 8000b82:	f000 fb73 	bl	800126c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8000b86:	f000 f8e5 	bl	8000d54 <MX_SPI2_Init>
  MX_UART4_Init();
 8000b8a:	f000 fb0b 	bl	80011a4 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000b8e:	f000 fb39 	bl	8001204 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

#ifdef BLE_TEST

  //configureHM10();
  char msg[] = "Hello from STM32!\n";
 8000b92:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <main+0x84>)
 8000b94:	1d3c      	adds	r4, r7, #4
 8000b96:	461d      	mov	r5, r3
 8000b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9c:	682b      	ldr	r3, [r5, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	8022      	strh	r2, [r4, #0]
 8000ba2:	3402      	adds	r4, #2
 8000ba4:	0c1b      	lsrs	r3, r3, #16
 8000ba6:	7023      	strb	r3, [r4, #0]
  if (BLE_Send(&BLE_UART, (uint8_t*)msg, strlen(msg), 100) != HAL_OK)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fb10 	bl	80001d0 <strlen>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	1d39      	adds	r1, r7, #4
 8000bb6:	2364      	movs	r3, #100	@ 0x64
 8000bb8:	480b      	ldr	r0, [pc, #44]	@ (8000be8 <main+0x88>)
 8000bba:	f004 fd63 	bl	8005684 <BLE_Send>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d002      	beq.n	8000bca <main+0x6a>
  {
      // Handle error
	  HAL_Delay(20);
 8000bc4:	2014      	movs	r0, #20
 8000bc6:	f000 fdd3 	bl	8001770 <HAL_Delay>
//			printf("--------------------------------------\r\n" );
			Timer = HAL_GetTick();
		}
#endif
#ifdef BLE_TEST
        if (messageReady) {
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <main+0x8c>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0fa      	beq.n	8000bca <main+0x6a>
            // Process the complete message
            printf("Received complete message: %s\r\n", messageBuffer);
 8000bd4:	4906      	ldr	r1, [pc, #24]	@ (8000bf0 <main+0x90>)
 8000bd6:	4807      	ldr	r0, [pc, #28]	@ (8000bf4 <main+0x94>)
 8000bd8:	f004 fee6 	bl	80059a8 <iprintf>
            messageReady = 0;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	@ (8000bec <main+0x8c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
        if (messageReady) {
 8000be2:	e7f2      	b.n	8000bca <main+0x6a>
 8000be4:	08006578 	.word	0x08006578
 8000be8:	200004c4 	.word	0x200004c4
 8000bec:	20000280 	.word	0x20000280
 8000bf0:	20000180 	.word	0x20000180
 8000bf4:	08006558 	.word	0x08006558

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b096      	sub	sp, #88	@ 0x58
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2244      	movs	r2, #68	@ 0x44
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f004 ff23 	bl	8005a52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c1a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c1e:	f001 fc79 	bl	8002514 <HAL_PWREx_ControlVoltageScaling>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c28:	f000 f88e 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c30:	2301      	movs	r3, #1
 8000c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c38:	2360      	movs	r3, #96	@ 0x60
 8000c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c40:	2301      	movs	r3, #1
 8000c42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c44:	2301      	movs	r3, #1
 8000c46:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000c48:	2328      	movs	r3, #40	@ 0x28
 8000c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c54:	2302      	movs	r3, #2
 8000c56:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 fcaf 	bl	80025c0 <HAL_RCC_OscConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000c68:	f000 f86e 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c70:	2303      	movs	r3, #3
 8000c72:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	2104      	movs	r1, #4
 8000c84:	4618      	mov	r0, r3
 8000c86:	f002 f877 	bl	8002d78 <HAL_RCC_ClockConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c90:	f000 f85a 	bl	8000d48 <Error_Handler>
  }
}
 8000c94:	bf00      	nop
 8000c96:	3758      	adds	r7, #88	@ 0x58
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
// This callback is called when idle line is detected or buffer is full
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	807b      	strh	r3, [r7, #2]
	//for BLE
    if (huart == &BLE_UART)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a16      	ldr	r2, [pc, #88]	@ (8000d04 <HAL_UARTEx_RxEventCallback+0x68>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d125      	bne.n	8000cfc <HAL_UARTEx_RxEventCallback+0x60>
    {
        // Copy the data from DMA buffer to message buffer
        memcpy(messageBuffer, rxBuffer, Size);
 8000cb0:	887b      	ldrh	r3, [r7, #2]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4914      	ldr	r1, [pc, #80]	@ (8000d08 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000cb6:	4815      	ldr	r0, [pc, #84]	@ (8000d0c <HAL_UARTEx_RxEventCallback+0x70>)
 8000cb8:	f004 ff57 	bl	8005b6a <memcpy>

        // Null-terminate the string
        messageBuffer[Size] = '\0';
 8000cbc:	887b      	ldrh	r3, [r7, #2]
 8000cbe:	4a13      	ldr	r2, [pc, #76]	@ (8000d0c <HAL_UARTEx_RxEventCallback+0x70>)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	54d1      	strb	r1, [r2, r3]

        // Set flag for main loop
        messageReady = 1;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <HAL_UARTEx_RxEventCallback+0x74>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]

        HAL_UART_AbortReceive(huart);  // Stop DMA
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f003 f9ce 	bl	800406c <HAL_UART_AbortReceive>
        memset(rxBuffer, 0, sizeof(rxBuffer));  // Reset buffer
 8000cd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	480c      	ldr	r0, [pc, #48]	@ (8000d08 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000cd8:	f004 febb 	bl	8005a52 <memset>

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 8000cdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ce0:	4909      	ldr	r1, [pc, #36]	@ (8000d08 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f004 fc7a 	bl	80055dc <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f022 0204 	bic.w	r2, r2, #4
 8000cfa:	601a      	str	r2, [r3, #0]
    }
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200004c4 	.word	0x200004c4
 8000d08:	200006f8 	.word	0x200006f8
 8000d0c:	20000180 	.word	0x20000180
 8000d10:	20000280 	.word	0x20000280

08000d14 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BUTTON_BACK_Pin)
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d24:	d009      	beq.n	8000d3a <HAL_GPIO_EXTI_Callback+0x26>
    {

    }
    else if (GPIO_Pin == BUTTON_NEXT_Pin)
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d2c:	d005      	beq.n	8000d3a <HAL_GPIO_EXTI_Callback+0x26>
    {

    }
    else if (GPIO_Pin == MAX30102_INT_Pin)
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	2b04      	cmp	r3, #4
 8000d32:	d102      	bne.n	8000d3a <HAL_GPIO_EXTI_Callback+0x26>
    {
    	max30102_on_interrupt(&max30102);
 8000d34:	4803      	ldr	r0, [pc, #12]	@ (8000d44 <HAL_GPIO_EXTI_Callback+0x30>)
 8000d36:	f004 fcb8 	bl	80056aa <max30102_on_interrupt>
    }
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000284 	.word	0x20000284

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <Error_Handler+0x8>

08000d54 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d58:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc8 <MX_SPI2_Init+0x74>)
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dcc <MX_SPI2_Init+0x78>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <MX_SPI2_Init+0x74>)
 8000d60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d66:	4b18      	ldr	r3, [pc, #96]	@ (8000dc8 <MX_SPI2_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d6c:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <MX_SPI2_Init+0x74>)
 8000d6e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000d72:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d74:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <MX_SPI2_Init+0x74>)
 8000d76:	2202      	movs	r2, #2
 8000d78:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d7a:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <MX_SPI2_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d80:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <MX_SPI2_Init+0x74>)
 8000d82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d86:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <MX_SPI2_Init+0x74>)
 8000d8a:	2218      	movs	r2, #24
 8000d8c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <MX_SPI2_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <MX_SPI2_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <MX_SPI2_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000da0:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <MX_SPI2_Init+0x74>)
 8000da2:	2207      	movs	r2, #7
 8000da4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000da6:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <MX_SPI2_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dac:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <MX_SPI2_Init+0x74>)
 8000dae:	2208      	movs	r2, #8
 8000db0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <MX_SPI2_Init+0x74>)
 8000db4:	f002 fec0 	bl	8003b38 <HAL_SPI_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000dbe:	f7ff ffc3 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000038c 	.word	0x2000038c
 8000dcc:	40003800 	.word	0x40003800

08000dd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	@ 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a30      	ldr	r2, [pc, #192]	@ (8000eb0 <HAL_SPI_MspInit+0xe0>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d159      	bne.n	8000ea6 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000df2:	4b30      	ldr	r3, [pc, #192]	@ (8000eb4 <HAL_SPI_MspInit+0xe4>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df6:	4a2f      	ldr	r2, [pc, #188]	@ (8000eb4 <HAL_SPI_MspInit+0xe4>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb4 <HAL_SPI_MspInit+0xe4>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb4 <HAL_SPI_MspInit+0xe4>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	4a29      	ldr	r2, [pc, #164]	@ (8000eb4 <HAL_SPI_MspInit+0xe4>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e16:	4b27      	ldr	r3, [pc, #156]	@ (8000eb4 <HAL_SPI_MspInit+0xe4>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ST7789_SCK_Pin|ST7789_MISO_Pin|ST7789_MOSI_Pin;
 8000e22:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e34:	2305      	movs	r3, #5
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	481e      	ldr	r0, [pc, #120]	@ (8000eb8 <HAL_SPI_MspInit+0xe8>)
 8000e40:	f001 f84e 	bl	8001ee0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000e44:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <HAL_SPI_MspInit+0xec>)
 8000e46:	4a1e      	ldr	r2, [pc, #120]	@ (8000ec0 <HAL_SPI_MspInit+0xf0>)
 8000e48:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <HAL_SPI_MspInit+0xec>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e50:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <HAL_SPI_MspInit+0xec>)
 8000e52:	2210      	movs	r2, #16
 8000e54:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e56:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <HAL_SPI_MspInit+0xec>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e5c:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <HAL_SPI_MspInit+0xec>)
 8000e5e:	2280      	movs	r2, #128	@ 0x80
 8000e60:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e62:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <HAL_SPI_MspInit+0xec>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e68:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <HAL_SPI_MspInit+0xec>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <HAL_SPI_MspInit+0xec>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e74:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <HAL_SPI_MspInit+0xec>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000e7a:	4810      	ldr	r0, [pc, #64]	@ (8000ebc <HAL_SPI_MspInit+0xec>)
 8000e7c:	f000 fdae 	bl	80019dc <HAL_DMA_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8000e86:	f7ff ff5f 	bl	8000d48 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000ebc <HAL_SPI_MspInit+0xec>)
 8000e8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e90:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <HAL_SPI_MspInit+0xec>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2024      	movs	r0, #36	@ 0x24
 8000e9c:	f000 fd67 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000ea0:	2024      	movs	r0, #36	@ 0x24
 8000ea2:	f000 fd80 	bl	80019a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	@ 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40003800 	.word	0x40003800
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48000400 	.word	0x48000400
 8000ebc:	200003f0 	.word	0x200003f0
 8000ec0:	40020058 	.word	0x40020058

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <HAL_MspInit+0x44>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ece:	4a0e      	ldr	r2, [pc, #56]	@ (8000f08 <HAL_MspInit+0x44>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <HAL_MspInit+0x44>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <HAL_MspInit+0x44>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee6:	4a08      	ldr	r2, [pc, #32]	@ (8000f08 <HAL_MspInit+0x44>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eee:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_MspInit+0x44>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <NMI_Handler+0x4>

08000f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <MemManage_Handler+0x4>

08000f24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f62:	f000 fbe5 	bl	8001730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAX30102_INT_Pin);
 8000f6e:	2004      	movs	r0, #4
 8000f70:	f001 f978 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <DMA1_Channel2_IRQHandler+0x10>)
 8000f7e:	f000 fec4 	bl	8001d0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200006ac 	.word	0x200006ac

08000f8c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <DMA1_Channel3_IRQHandler+0x10>)
 8000f92:	f000 feba 	bl	8001d0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000664 	.word	0x20000664

08000fa0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <DMA1_Channel4_IRQHandler+0x10>)
 8000fa6:	f000 feb0 	bl	8001d0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000061c 	.word	0x2000061c

08000fb4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000fb8:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <DMA1_Channel5_IRQHandler+0x10>)
 8000fba:	f000 fea6 	bl	8001d0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200003f0 	.word	0x200003f0

08000fc8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU6500_INT_Pin);
 8000fcc:	2020      	movs	r0, #32
 8000fce:	f001 f949 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_BACK_Pin);
 8000fd2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000fd6:	f001 f945 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_NEXT_Pin);
 8000fda:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fde:	f001 f941 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000fec:	4802      	ldr	r0, [pc, #8]	@ (8000ff8 <SPI2_IRQHandler+0x10>)
 8000fee:	f002 fe47 	bl	8003c80 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000038c 	.word	0x2000038c

08000ffc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001000:	4802      	ldr	r0, [pc, #8]	@ (800100c <USART1_IRQHandler+0x10>)
 8001002:	f003 f8e5 	bl	80041d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200004c4 	.word	0x200004c4

08001010 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001014:	4802      	ldr	r0, [pc, #8]	@ (8001020 <USART3_IRQHandler+0x10>)
 8001016:	f003 f8db 	bl	80041d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000054c 	.word	0x2000054c

08001024 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001028:	4802      	ldr	r0, [pc, #8]	@ (8001034 <DMA2_Channel7_IRQHandler+0x10>)
 800102a:	f000 fe6e 	bl	8001d0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200005d4 	.word	0x200005d4

08001038 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	e00a      	b.n	8001060 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800104a:	f3af 8000 	nop.w
 800104e:	4601      	mov	r1, r0
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	60ba      	str	r2, [r7, #8]
 8001056:	b2ca      	uxtb	r2, r1
 8001058:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	429a      	cmp	r2, r3
 8001066:	dbf0      	blt.n	800104a <_read+0x12>
  }

  return len;
 8001068:	687b      	ldr	r3, [r7, #4]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	e009      	b.n	8001098 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	60ba      	str	r2, [r7, #8]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fd55 	bl	8000b3c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	3301      	adds	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	429a      	cmp	r2, r3
 800109e:	dbf1      	blt.n	8001084 <_write+0x12>
  }
  return len;
 80010a0:	687b      	ldr	r3, [r7, #4]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <_close>:

int _close(int file)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010d2:	605a      	str	r2, [r3, #4]
  return 0;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <_isatty>:

int _isatty(int file)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800111c:	4a14      	ldr	r2, [pc, #80]	@ (8001170 <_sbrk+0x5c>)
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <_sbrk+0x60>)
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001128:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001130:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <_sbrk+0x64>)
 8001132:	4a12      	ldr	r2, [pc, #72]	@ (800117c <_sbrk+0x68>)
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001136:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d207      	bcs.n	8001154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001144:	f004 fce4 	bl	8005b10 <__errno>
 8001148:	4603      	mov	r3, r0
 800114a:	220c      	movs	r2, #12
 800114c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e009      	b.n	8001168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	4a05      	ldr	r2, [pc, #20]	@ (8001178 <_sbrk+0x64>)
 8001164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20018000 	.word	0x20018000
 8001174:	00000400 	.word	0x00000400
 8001178:	20000438 	.word	0x20000438
 800117c:	20000948 	.word	0x20000948

08001180 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <SystemInit+0x20>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800118a:	4a05      	ldr	r2, [pc, #20]	@ (80011a0 <SystemInit+0x20>)
 800118c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011a8:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <MX_UART4_Init+0x58>)
 80011aa:	4a15      	ldr	r2, [pc, #84]	@ (8001200 <MX_UART4_Init+0x5c>)
 80011ac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80011ae:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <MX_UART4_Init+0x58>)
 80011b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011b4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <MX_UART4_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <MX_UART4_Init+0x58>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <MX_UART4_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <MX_UART4_Init+0x58>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <MX_UART4_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d4:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <MX_UART4_Init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <MX_UART4_Init+0x58>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <MX_UART4_Init+0x58>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80011e6:	4805      	ldr	r0, [pc, #20]	@ (80011fc <MX_UART4_Init+0x58>)
 80011e8:	f002 fe69 	bl	8003ebe <HAL_UART_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80011f2:	f7ff fda9 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000043c 	.word	0x2000043c
 8001200:	40004c00 	.word	0x40004c00

08001204 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001208:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <MX_USART1_UART_Init+0x60>)
 800120a:	4a17      	ldr	r2, [pc, #92]	@ (8001268 <MX_USART1_UART_Init+0x64>)
 800120c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <MX_USART1_UART_Init+0x60>)
 8001210:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001214:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001216:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <MX_USART1_UART_Init+0x60>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800121c:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <MX_USART1_UART_Init+0x60>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001222:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <MX_USART1_UART_Init+0x60>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001228:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <MX_USART1_UART_Init+0x60>)
 800122a:	220c      	movs	r2, #12
 800122c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122e:	4b0d      	ldr	r3, [pc, #52]	@ (8001264 <MX_USART1_UART_Init+0x60>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001234:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <MX_USART1_UART_Init+0x60>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <MX_USART1_UART_Init+0x60>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <MX_USART1_UART_Init+0x60>)
 8001242:	2208      	movs	r2, #8
 8001244:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <MX_USART1_UART_Init+0x60>)
 8001248:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800124c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800124e:	4805      	ldr	r0, [pc, #20]	@ (8001264 <MX_USART1_UART_Init+0x60>)
 8001250:	f002 fe35 	bl	8003ebe <HAL_UART_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800125a:	f7ff fd75 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200004c4 	.word	0x200004c4
 8001268:	40013800 	.word	0x40013800

0800126c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001270:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <MX_USART3_UART_Init+0x60>)
 8001272:	4a17      	ldr	r2, [pc, #92]	@ (80012d0 <MX_USART3_UART_Init+0x64>)
 8001274:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001276:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <MX_USART3_UART_Init+0x60>)
 8001278:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800127c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <MX_USART3_UART_Init+0x60>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <MX_USART3_UART_Init+0x60>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800128a:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <MX_USART3_UART_Init+0x60>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_USART3_UART_Init+0x60>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b0d      	ldr	r3, [pc, #52]	@ (80012cc <MX_USART3_UART_Init+0x60>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <MX_USART3_UART_Init+0x60>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a2:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <MX_USART3_UART_Init+0x60>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <MX_USART3_UART_Init+0x60>)
 80012aa:	2208      	movs	r2, #8
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80012ae:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <MX_USART3_UART_Init+0x60>)
 80012b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	@ (80012cc <MX_USART3_UART_Init+0x60>)
 80012b8:	f002 fe01 	bl	8003ebe <HAL_UART_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 80012c2:	f7ff fd41 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000054c 	.word	0x2000054c
 80012d0:	40004800 	.word	0x40004800

080012d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b0b0      	sub	sp, #192	@ 0xc0
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f0:	2288      	movs	r2, #136	@ 0x88
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f004 fbac 	bl	8005a52 <memset>
  if(uartHandle->Instance==UART4)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a6f      	ldr	r2, [pc, #444]	@ (80014bc <HAL_UART_MspInit+0x1e8>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d13c      	bne.n	800137e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001304:	2308      	movs	r3, #8
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001308:	2300      	movs	r3, #0
 800130a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001310:	4618      	mov	r0, r3
 8001312:	f001 ff55 	bl	80031c0 <HAL_RCCEx_PeriphCLKConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800131c:	f7ff fd14 	bl	8000d48 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001320:	4b67      	ldr	r3, [pc, #412]	@ (80014c0 <HAL_UART_MspInit+0x1ec>)
 8001322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001324:	4a66      	ldr	r2, [pc, #408]	@ (80014c0 <HAL_UART_MspInit+0x1ec>)
 8001326:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800132a:	6593      	str	r3, [r2, #88]	@ 0x58
 800132c:	4b64      	ldr	r3, [pc, #400]	@ (80014c0 <HAL_UART_MspInit+0x1ec>)
 800132e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001330:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001334:	623b      	str	r3, [r7, #32]
 8001336:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4b61      	ldr	r3, [pc, #388]	@ (80014c0 <HAL_UART_MspInit+0x1ec>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133c:	4a60      	ldr	r2, [pc, #384]	@ (80014c0 <HAL_UART_MspInit+0x1ec>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001344:	4b5e      	ldr	r3, [pc, #376]	@ (80014c0 <HAL_UART_MspInit+0x1ec>)
 8001346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001350:	2303      	movs	r3, #3
 8001352:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001368:	2308      	movs	r3, #8
 800136a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001378:	f000 fdb2 	bl	8001ee0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800137c:	e147      	b.n	800160e <HAL_UART_MspInit+0x33a>
  else if(uartHandle->Instance==USART1)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a50      	ldr	r2, [pc, #320]	@ (80014c4 <HAL_UART_MspInit+0x1f0>)
 8001384:	4293      	cmp	r3, r2
 8001386:	f040 80a7 	bne.w	80014d8 <HAL_UART_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800138a:	2301      	movs	r3, #1
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800138e:	2300      	movs	r3, #0
 8001390:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001396:	4618      	mov	r0, r3
 8001398:	f001 ff12 	bl	80031c0 <HAL_RCCEx_PeriphCLKConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80013a2:	f7ff fcd1 	bl	8000d48 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80013a6:	4b46      	ldr	r3, [pc, #280]	@ (80014c0 <HAL_UART_MspInit+0x1ec>)
 80013a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013aa:	4a45      	ldr	r2, [pc, #276]	@ (80014c0 <HAL_UART_MspInit+0x1ec>)
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013b2:	4b43      	ldr	r3, [pc, #268]	@ (80014c0 <HAL_UART_MspInit+0x1ec>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ba:	61bb      	str	r3, [r7, #24]
 80013bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b40      	ldr	r3, [pc, #256]	@ (80014c0 <HAL_UART_MspInit+0x1ec>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	4a3f      	ldr	r2, [pc, #252]	@ (80014c0 <HAL_UART_MspInit+0x1ec>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ca:	4b3d      	ldr	r3, [pc, #244]	@ (80014c0 <HAL_UART_MspInit+0x1ec>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BLE_TX_Pin|BLE_RX_Pin;
 80013d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013f0:	2307      	movs	r3, #7
 80013f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013fa:	4619      	mov	r1, r3
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001400:	f000 fd6e 	bl	8001ee0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Channel7;
 8001404:	4b30      	ldr	r3, [pc, #192]	@ (80014c8 <HAL_UART_MspInit+0x1f4>)
 8001406:	4a31      	ldr	r2, [pc, #196]	@ (80014cc <HAL_UART_MspInit+0x1f8>)
 8001408:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800140a:	4b2f      	ldr	r3, [pc, #188]	@ (80014c8 <HAL_UART_MspInit+0x1f4>)
 800140c:	2202      	movs	r2, #2
 800140e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001410:	4b2d      	ldr	r3, [pc, #180]	@ (80014c8 <HAL_UART_MspInit+0x1f4>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001416:	4b2c      	ldr	r3, [pc, #176]	@ (80014c8 <HAL_UART_MspInit+0x1f4>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800141c:	4b2a      	ldr	r3, [pc, #168]	@ (80014c8 <HAL_UART_MspInit+0x1f4>)
 800141e:	2280      	movs	r2, #128	@ 0x80
 8001420:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001422:	4b29      	ldr	r3, [pc, #164]	@ (80014c8 <HAL_UART_MspInit+0x1f4>)
 8001424:	2200      	movs	r2, #0
 8001426:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001428:	4b27      	ldr	r3, [pc, #156]	@ (80014c8 <HAL_UART_MspInit+0x1f4>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800142e:	4b26      	ldr	r3, [pc, #152]	@ (80014c8 <HAL_UART_MspInit+0x1f4>)
 8001430:	2220      	movs	r2, #32
 8001432:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001434:	4b24      	ldr	r3, [pc, #144]	@ (80014c8 <HAL_UART_MspInit+0x1f4>)
 8001436:	2200      	movs	r2, #0
 8001438:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800143a:	4823      	ldr	r0, [pc, #140]	@ (80014c8 <HAL_UART_MspInit+0x1f4>)
 800143c:	f000 face 	bl	80019dc <HAL_DMA_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_UART_MspInit+0x176>
      Error_Handler();
 8001446:	f7ff fc7f 	bl	8000d48 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a1e      	ldr	r2, [pc, #120]	@ (80014c8 <HAL_UART_MspInit+0x1f4>)
 800144e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001450:	4a1d      	ldr	r2, [pc, #116]	@ (80014c8 <HAL_UART_MspInit+0x1f4>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001456:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <HAL_UART_MspInit+0x1fc>)
 8001458:	4a1e      	ldr	r2, [pc, #120]	@ (80014d4 <HAL_UART_MspInit+0x200>)
 800145a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 800145c:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <HAL_UART_MspInit+0x1fc>)
 800145e:	2202      	movs	r2, #2
 8001460:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001462:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <HAL_UART_MspInit+0x1fc>)
 8001464:	2210      	movs	r2, #16
 8001466:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001468:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <HAL_UART_MspInit+0x1fc>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800146e:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <HAL_UART_MspInit+0x1fc>)
 8001470:	2280      	movs	r2, #128	@ 0x80
 8001472:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001474:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <HAL_UART_MspInit+0x1fc>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <HAL_UART_MspInit+0x1fc>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001480:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <HAL_UART_MspInit+0x1fc>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001486:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <HAL_UART_MspInit+0x1fc>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800148c:	4810      	ldr	r0, [pc, #64]	@ (80014d0 <HAL_UART_MspInit+0x1fc>)
 800148e:	f000 faa5 	bl	80019dc <HAL_DMA_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_UART_MspInit+0x1c8>
      Error_Handler();
 8001498:	f7ff fc56 	bl	8000d48 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a0c      	ldr	r2, [pc, #48]	@ (80014d0 <HAL_UART_MspInit+0x1fc>)
 80014a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80014a2:	4a0b      	ldr	r2, [pc, #44]	@ (80014d0 <HAL_UART_MspInit+0x1fc>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	2025      	movs	r0, #37	@ 0x25
 80014ae:	f000 fa5e 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014b2:	2025      	movs	r0, #37	@ 0x25
 80014b4:	f000 fa77 	bl	80019a6 <HAL_NVIC_EnableIRQ>
}
 80014b8:	e0a9      	b.n	800160e <HAL_UART_MspInit+0x33a>
 80014ba:	bf00      	nop
 80014bc:	40004c00 	.word	0x40004c00
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40013800 	.word	0x40013800
 80014c8:	200005d4 	.word	0x200005d4
 80014cc:	40020480 	.word	0x40020480
 80014d0:	2000061c 	.word	0x2000061c
 80014d4:	40020044 	.word	0x40020044
  else if(uartHandle->Instance==USART3)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001618 <HAL_UART_MspInit+0x344>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	f040 8095 	bne.w	800160e <HAL_UART_MspInit+0x33a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014e4:	2304      	movs	r3, #4
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f0:	4618      	mov	r0, r3
 80014f2:	f001 fe65 	bl	80031c0 <HAL_RCCEx_PeriphCLKConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 80014fc:	f7ff fc24 	bl	8000d48 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001500:	4b46      	ldr	r3, [pc, #280]	@ (800161c <HAL_UART_MspInit+0x348>)
 8001502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001504:	4a45      	ldr	r2, [pc, #276]	@ (800161c <HAL_UART_MspInit+0x348>)
 8001506:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800150a:	6593      	str	r3, [r2, #88]	@ 0x58
 800150c:	4b43      	ldr	r3, [pc, #268]	@ (800161c <HAL_UART_MspInit+0x348>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001510:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001518:	4b40      	ldr	r3, [pc, #256]	@ (800161c <HAL_UART_MspInit+0x348>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151c:	4a3f      	ldr	r2, [pc, #252]	@ (800161c <HAL_UART_MspInit+0x348>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001524:	4b3d      	ldr	r3, [pc, #244]	@ (800161c <HAL_UART_MspInit+0x348>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001530:	2330      	movs	r3, #48	@ 0x30
 8001532:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001548:	2307      	movs	r3, #7
 800154a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001552:	4619      	mov	r1, r3
 8001554:	4832      	ldr	r0, [pc, #200]	@ (8001620 <HAL_UART_MspInit+0x34c>)
 8001556:	f000 fcc3 	bl	8001ee0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800155a:	4b32      	ldr	r3, [pc, #200]	@ (8001624 <HAL_UART_MspInit+0x350>)
 800155c:	4a32      	ldr	r2, [pc, #200]	@ (8001628 <HAL_UART_MspInit+0x354>)
 800155e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 8001560:	4b30      	ldr	r3, [pc, #192]	@ (8001624 <HAL_UART_MspInit+0x350>)
 8001562:	2202      	movs	r2, #2
 8001564:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001566:	4b2f      	ldr	r3, [pc, #188]	@ (8001624 <HAL_UART_MspInit+0x350>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800156c:	4b2d      	ldr	r3, [pc, #180]	@ (8001624 <HAL_UART_MspInit+0x350>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001572:	4b2c      	ldr	r3, [pc, #176]	@ (8001624 <HAL_UART_MspInit+0x350>)
 8001574:	2280      	movs	r2, #128	@ 0x80
 8001576:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001578:	4b2a      	ldr	r3, [pc, #168]	@ (8001624 <HAL_UART_MspInit+0x350>)
 800157a:	2200      	movs	r2, #0
 800157c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800157e:	4b29      	ldr	r3, [pc, #164]	@ (8001624 <HAL_UART_MspInit+0x350>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001584:	4b27      	ldr	r3, [pc, #156]	@ (8001624 <HAL_UART_MspInit+0x350>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800158a:	4b26      	ldr	r3, [pc, #152]	@ (8001624 <HAL_UART_MspInit+0x350>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001590:	4824      	ldr	r0, [pc, #144]	@ (8001624 <HAL_UART_MspInit+0x350>)
 8001592:	f000 fa23 	bl	80019dc <HAL_DMA_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <HAL_UART_MspInit+0x2cc>
      Error_Handler();
 800159c:	f7ff fbd4 	bl	8000d48 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a20      	ldr	r2, [pc, #128]	@ (8001624 <HAL_UART_MspInit+0x350>)
 80015a4:	675a      	str	r2, [r3, #116]	@ 0x74
 80015a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001624 <HAL_UART_MspInit+0x350>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <HAL_UART_MspInit+0x358>)
 80015ae:	4a20      	ldr	r2, [pc, #128]	@ (8001630 <HAL_UART_MspInit+0x35c>)
 80015b0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 80015b2:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <HAL_UART_MspInit+0x358>)
 80015b4:	2202      	movs	r2, #2
 80015b6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <HAL_UART_MspInit+0x358>)
 80015ba:	2210      	movs	r2, #16
 80015bc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015be:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <HAL_UART_MspInit+0x358>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015c4:	4b19      	ldr	r3, [pc, #100]	@ (800162c <HAL_UART_MspInit+0x358>)
 80015c6:	2280      	movs	r2, #128	@ 0x80
 80015c8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <HAL_UART_MspInit+0x358>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d0:	4b16      	ldr	r3, [pc, #88]	@ (800162c <HAL_UART_MspInit+0x358>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <HAL_UART_MspInit+0x358>)
 80015d8:	2200      	movs	r2, #0
 80015da:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015dc:	4b13      	ldr	r3, [pc, #76]	@ (800162c <HAL_UART_MspInit+0x358>)
 80015de:	2200      	movs	r2, #0
 80015e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80015e2:	4812      	ldr	r0, [pc, #72]	@ (800162c <HAL_UART_MspInit+0x358>)
 80015e4:	f000 f9fa 	bl	80019dc <HAL_DMA_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_UART_MspInit+0x31e>
      Error_Handler();
 80015ee:	f7ff fbab 	bl	8000d48 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a0d      	ldr	r2, [pc, #52]	@ (800162c <HAL_UART_MspInit+0x358>)
 80015f6:	671a      	str	r2, [r3, #112]	@ 0x70
 80015f8:	4a0c      	ldr	r2, [pc, #48]	@ (800162c <HAL_UART_MspInit+0x358>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	2027      	movs	r0, #39	@ 0x27
 8001604:	f000 f9b3 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001608:	2027      	movs	r0, #39	@ 0x27
 800160a:	f000 f9cc 	bl	80019a6 <HAL_NVIC_EnableIRQ>
}
 800160e:	bf00      	nop
 8001610:	37c0      	adds	r7, #192	@ 0xc0
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40004800 	.word	0x40004800
 800161c:	40021000 	.word	0x40021000
 8001620:	48000800 	.word	0x48000800
 8001624:	20000664 	.word	0x20000664
 8001628:	40020030 	.word	0x40020030
 800162c:	200006ac 	.word	0x200006ac
 8001630:	4002001c 	.word	0x4002001c

08001634 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001634:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800166c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001638:	f7ff fda2 	bl	8001180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800163c:	480c      	ldr	r0, [pc, #48]	@ (8001670 <LoopForever+0x6>)
  ldr r1, =_edata
 800163e:	490d      	ldr	r1, [pc, #52]	@ (8001674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001640:	4a0d      	ldr	r2, [pc, #52]	@ (8001678 <LoopForever+0xe>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001644:	e002      	b.n	800164c <LoopCopyDataInit>

08001646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164a:	3304      	adds	r3, #4

0800164c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800164c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001650:	d3f9      	bcc.n	8001646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001654:	4c0a      	ldr	r4, [pc, #40]	@ (8001680 <LoopForever+0x16>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001658:	e001      	b.n	800165e <LoopFillZerobss>

0800165a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800165c:	3204      	adds	r2, #4

0800165e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001660:	d3fb      	bcc.n	800165a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001662:	f004 fa5b 	bl	8005b1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001666:	f7ff fa7b 	bl	8000b60 <main>

0800166a <LoopForever>:

LoopForever:
    b LoopForever
 800166a:	e7fe      	b.n	800166a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800166c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001674:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001678:	08006618 	.word	0x08006618
  ldr r2, =_sbss
 800167c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001680:	20000944 	.word	0x20000944

08001684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC1_2_IRQHandler>

08001686 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 f961 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001696:	200f      	movs	r0, #15
 8001698:	f000 f80e 	bl	80016b8 <HAL_InitTick>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	71fb      	strb	r3, [r7, #7]
 80016a6:	e001      	b.n	80016ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016a8:	f7ff fc0c 	bl	8000ec4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016ac:	79fb      	ldrb	r3, [r7, #7]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016c4:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <HAL_InitTick+0x6c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d023      	beq.n	8001714 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016cc:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <HAL_InitTick+0x70>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <HAL_InitTick+0x6c>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f96d 	bl	80019c2 <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10f      	bne.n	800170e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d809      	bhi.n	8001708 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f000 f937 	bl	800196e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001700:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <HAL_InitTick+0x74>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e007      	b.n	8001718 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	e004      	b.n	8001718 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	73fb      	strb	r3, [r7, #15]
 8001712:	e001      	b.n	8001718 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000008 	.word	0x20000008
 8001728:	20000000 	.word	0x20000000
 800172c:	20000004 	.word	0x20000004

08001730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_IncTick+0x20>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_IncTick+0x24>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a04      	ldr	r2, [pc, #16]	@ (8001754 <HAL_IncTick+0x24>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000008 	.word	0x20000008
 8001754:	200006f4 	.word	0x200006f4

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b03      	ldr	r3, [pc, #12]	@ (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	200006f4 	.word	0x200006f4

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff ffee 	bl	8001758 <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001796:	bf00      	nop
 8001798:	f7ff ffde 	bl	8001758 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000008 	.word	0x20000008

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	@ (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	@ (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	@ (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	@ 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	@ 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f7ff ff8e 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff29 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001980:	f7ff ff3e 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001984:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	6978      	ldr	r0, [r7, #20]
 800198c:	f7ff ff8e 	bl	80018ac <NVIC_EncodePriority>
 8001990:	4602      	mov	r2, r0
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff5d 	bl	8001858 <__NVIC_SetPriority>
}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff31 	bl	800181c <__NVIC_EnableIRQ>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffa2 	bl	8001914 <SysTick_Config>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e098      	b.n	8001b20 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b4d      	ldr	r3, [pc, #308]	@ (8001b2c <HAL_DMA_Init+0x150>)
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d80f      	bhi.n	8001a1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b4b      	ldr	r3, [pc, #300]	@ (8001b30 <HAL_DMA_Init+0x154>)
 8001a02:	4413      	add	r3, r2
 8001a04:	4a4b      	ldr	r2, [pc, #300]	@ (8001b34 <HAL_DMA_Init+0x158>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	091b      	lsrs	r3, r3, #4
 8001a0c:	009a      	lsls	r2, r3, #2
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a48      	ldr	r2, [pc, #288]	@ (8001b38 <HAL_DMA_Init+0x15c>)
 8001a16:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a18:	e00e      	b.n	8001a38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b46      	ldr	r3, [pc, #280]	@ (8001b3c <HAL_DMA_Init+0x160>)
 8001a22:	4413      	add	r3, r2
 8001a24:	4a43      	ldr	r2, [pc, #268]	@ (8001b34 <HAL_DMA_Init+0x158>)
 8001a26:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	009a      	lsls	r2, r3, #2
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a42      	ldr	r2, [pc, #264]	@ (8001b40 <HAL_DMA_Init+0x164>)
 8001a36:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a92:	d039      	beq.n	8001b08 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	4a27      	ldr	r2, [pc, #156]	@ (8001b38 <HAL_DMA_Init+0x15c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d11a      	bne.n	8001ad4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a9e:	4b29      	ldr	r3, [pc, #164]	@ (8001b44 <HAL_DMA_Init+0x168>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa6:	f003 031c 	and.w	r3, r3, #28
 8001aaa:	210f      	movs	r1, #15
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4924      	ldr	r1, [pc, #144]	@ (8001b44 <HAL_DMA_Init+0x168>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001ab8:	4b22      	ldr	r3, [pc, #136]	@ (8001b44 <HAL_DMA_Init+0x168>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6859      	ldr	r1, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac4:	f003 031c 	and.w	r3, r3, #28
 8001ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8001acc:	491d      	ldr	r1, [pc, #116]	@ (8001b44 <HAL_DMA_Init+0x168>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
 8001ad2:	e019      	b.n	8001b08 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b48 <HAL_DMA_Init+0x16c>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001adc:	f003 031c 	and.w	r3, r3, #28
 8001ae0:	210f      	movs	r1, #15
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	4917      	ldr	r1, [pc, #92]	@ (8001b48 <HAL_DMA_Init+0x16c>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001aee:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <HAL_DMA_Init+0x16c>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6859      	ldr	r1, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	f003 031c 	and.w	r3, r3, #28
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	4911      	ldr	r1, [pc, #68]	@ (8001b48 <HAL_DMA_Init+0x16c>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40020407 	.word	0x40020407
 8001b30:	bffdfff8 	.word	0xbffdfff8
 8001b34:	cccccccd 	.word	0xcccccccd
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	bffdfbf8 	.word	0xbffdfbf8
 8001b40:	40020400 	.word	0x40020400
 8001b44:	400200a8 	.word	0x400200a8
 8001b48:	400204a8 	.word	0x400204a8

08001b4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_DMA_Start_IT+0x20>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e04b      	b.n	8001c04 <HAL_DMA_Start_IT+0xb8>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d13a      	bne.n	8001bf6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0201 	bic.w	r2, r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	68b9      	ldr	r1, [r7, #8]
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 f96b 	bl	8001e80 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d008      	beq.n	8001bc4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 020e 	orr.w	r2, r2, #14
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	e00f      	b.n	8001be4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0204 	bic.w	r2, r2, #4
 8001bd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 020a 	orr.w	r2, r2, #10
 8001be2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e005      	b.n	8001c02 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d008      	beq.n	8001c36 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2204      	movs	r2, #4
 8001c28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e022      	b.n	8001c7c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 020e 	bic.w	r2, r2, #14
 8001c44:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0201 	bic.w	r2, r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	f003 021c 	and.w	r2, r3, #28
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	2101      	movs	r1, #1
 8001c64:	fa01 f202 	lsl.w	r2, r1, r2
 8001c68:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d005      	beq.n	8001cac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
 8001caa:	e029      	b.n	8001d00 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 020e 	bic.w	r2, r2, #14
 8001cba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0201 	bic.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd0:	f003 021c 	and.w	r2, r3, #28
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	2101      	movs	r1, #1
 8001cda:	fa01 f202 	lsl.w	r2, r1, r2
 8001cde:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	4798      	blx	r3
    }
  }
  return status;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	f003 031c 	and.w	r3, r3, #28
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d026      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x7a>
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d021      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d107      	bne.n	8001d5e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0204 	bic.w	r2, r2, #4
 8001d5c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	f003 021c 	and.w	r2, r3, #28
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	2104      	movs	r1, #4
 8001d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d70:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d071      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d82:	e06c      	b.n	8001e5e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d88:	f003 031c 	and.w	r3, r3, #28
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d02e      	beq.n	8001df6 <HAL_DMA_IRQHandler+0xec>
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d029      	beq.n	8001df6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0320 	and.w	r3, r3, #32
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10b      	bne.n	8001dc8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 020a 	bic.w	r2, r2, #10
 8001dbe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dcc:	f003 021c 	and.w	r2, r3, #28
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dda:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d038      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001df4:	e033      	b.n	8001e5e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfa:	f003 031c 	and.w	r3, r3, #28
 8001dfe:	2208      	movs	r2, #8
 8001e00:	409a      	lsls	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d02a      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x156>
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d025      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 020e 	bic.w	r2, r2, #14
 8001e22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e28:	f003 021c 	and.w	r2, r3, #28
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	2101      	movs	r1, #1
 8001e32:	fa01 f202 	lsl.w	r2, r1, r2
 8001e36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d004      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e5e:	bf00      	nop
 8001e60:	bf00      	nop
}
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	f003 021c 	and.w	r2, r3, #28
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b10      	cmp	r3, #16
 8001eb0:	d108      	bne.n	8001ec4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ec2:	e007      	b.n	8001ed4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	60da      	str	r2, [r3, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eee:	e17f      	b.n	80021f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8171 	beq.w	80021ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d005      	beq.n	8001f20 <HAL_GPIO_Init+0x40>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d130      	bne.n	8001f82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f56:	2201      	movs	r2, #1
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	f003 0201 	and.w	r2, r3, #1
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d118      	bne.n	8001fc0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f94:	2201      	movs	r2, #1
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	08db      	lsrs	r3, r3, #3
 8001faa:	f003 0201 	and.w	r2, r3, #1
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d017      	beq.n	8001ffc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d123      	bne.n	8002050 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	08da      	lsrs	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3208      	adds	r2, #8
 8002010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	220f      	movs	r2, #15
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	08da      	lsrs	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3208      	adds	r2, #8
 800204a:	6939      	ldr	r1, [r7, #16]
 800204c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0203 	and.w	r2, r3, #3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80ac 	beq.w	80021ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002092:	4b5f      	ldr	r3, [pc, #380]	@ (8002210 <HAL_GPIO_Init+0x330>)
 8002094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002096:	4a5e      	ldr	r2, [pc, #376]	@ (8002210 <HAL_GPIO_Init+0x330>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6613      	str	r3, [r2, #96]	@ 0x60
 800209e:	4b5c      	ldr	r3, [pc, #368]	@ (8002210 <HAL_GPIO_Init+0x330>)
 80020a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020aa:	4a5a      	ldr	r2, [pc, #360]	@ (8002214 <HAL_GPIO_Init+0x334>)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	3302      	adds	r3, #2
 80020b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	220f      	movs	r2, #15
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4013      	ands	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020d4:	d025      	beq.n	8002122 <HAL_GPIO_Init+0x242>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002218 <HAL_GPIO_Init+0x338>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d01f      	beq.n	800211e <HAL_GPIO_Init+0x23e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4e      	ldr	r2, [pc, #312]	@ (800221c <HAL_GPIO_Init+0x33c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d019      	beq.n	800211a <HAL_GPIO_Init+0x23a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002220 <HAL_GPIO_Init+0x340>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0x236>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002224 <HAL_GPIO_Init+0x344>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00d      	beq.n	8002112 <HAL_GPIO_Init+0x232>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002228 <HAL_GPIO_Init+0x348>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d007      	beq.n	800210e <HAL_GPIO_Init+0x22e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4a      	ldr	r2, [pc, #296]	@ (800222c <HAL_GPIO_Init+0x34c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d101      	bne.n	800210a <HAL_GPIO_Init+0x22a>
 8002106:	2306      	movs	r3, #6
 8002108:	e00c      	b.n	8002124 <HAL_GPIO_Init+0x244>
 800210a:	2307      	movs	r3, #7
 800210c:	e00a      	b.n	8002124 <HAL_GPIO_Init+0x244>
 800210e:	2305      	movs	r3, #5
 8002110:	e008      	b.n	8002124 <HAL_GPIO_Init+0x244>
 8002112:	2304      	movs	r3, #4
 8002114:	e006      	b.n	8002124 <HAL_GPIO_Init+0x244>
 8002116:	2303      	movs	r3, #3
 8002118:	e004      	b.n	8002124 <HAL_GPIO_Init+0x244>
 800211a:	2302      	movs	r3, #2
 800211c:	e002      	b.n	8002124 <HAL_GPIO_Init+0x244>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_GPIO_Init+0x244>
 8002122:	2300      	movs	r3, #0
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	f002 0203 	and.w	r2, r2, #3
 800212a:	0092      	lsls	r2, r2, #2
 800212c:	4093      	lsls	r3, r2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002134:	4937      	ldr	r1, [pc, #220]	@ (8002214 <HAL_GPIO_Init+0x334>)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	3302      	adds	r3, #2
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002142:	4b3b      	ldr	r3, [pc, #236]	@ (8002230 <HAL_GPIO_Init+0x350>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	43db      	mvns	r3, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002166:	4a32      	ldr	r2, [pc, #200]	@ (8002230 <HAL_GPIO_Init+0x350>)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800216c:	4b30      	ldr	r3, [pc, #192]	@ (8002230 <HAL_GPIO_Init+0x350>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	43db      	mvns	r3, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002190:	4a27      	ldr	r2, [pc, #156]	@ (8002230 <HAL_GPIO_Init+0x350>)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002196:	4b26      	ldr	r3, [pc, #152]	@ (8002230 <HAL_GPIO_Init+0x350>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	43db      	mvns	r3, r3
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4013      	ands	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002230 <HAL_GPIO_Init+0x350>)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <HAL_GPIO_Init+0x350>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021e4:	4a12      	ldr	r2, [pc, #72]	@ (8002230 <HAL_GPIO_Init+0x350>)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	3301      	adds	r3, #1
 80021ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	fa22 f303 	lsr.w	r3, r2, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f47f ae78 	bne.w	8001ef0 <HAL_GPIO_Init+0x10>
  }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000
 8002214:	40010000 	.word	0x40010000
 8002218:	48000400 	.word	0x48000400
 800221c:	48000800 	.word	0x48000800
 8002220:	48000c00 	.word	0x48000c00
 8002224:	48001000 	.word	0x48001000
 8002228:	48001400 	.word	0x48001400
 800222c:	48001800 	.word	0x48001800
 8002230:	40010400 	.word	0x40010400

08002234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
 8002240:	4613      	mov	r3, r2
 8002242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002244:	787b      	ldrb	r3, [r7, #1]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002250:	e002      	b.n	8002258 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800226e:	4b08      	ldr	r3, [pc, #32]	@ (8002290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d006      	beq.n	8002288 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800227a:	4a05      	ldr	r2, [pc, #20]	@ (8002290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe fd46 	bl	8000d14 <HAL_GPIO_EXTI_Callback>
  }
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40010400 	.word	0x40010400

08002294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e08d      	b.n	80023c2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe fb56 	bl	800096c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2224      	movs	r2, #36	@ 0x24
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d107      	bne.n	800230e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	e006      	b.n	800231c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800231a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d108      	bne.n	8002336 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	e007      	b.n	8002346 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002344:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002358:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002368:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69d9      	ldr	r1, [r3, #28]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1a      	ldr	r2, [r3, #32]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2220      	movs	r2, #32
 80023ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b20      	cmp	r3, #32
 80023de:	d138      	bne.n	8002452 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e032      	b.n	8002454 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2224      	movs	r2, #36	@ 0x24
 80023fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0201 	bic.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800241c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0201 	orr.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2220      	movs	r2, #32
 8002442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	e000      	b.n	8002454 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002452:	2302      	movs	r3, #2
  }
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b20      	cmp	r3, #32
 8002474:	d139      	bne.n	80024ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002480:	2302      	movs	r3, #2
 8002482:	e033      	b.n	80024ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2224      	movs	r2, #36	@ 0x24
 8002490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0201 	bic.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	021b      	lsls	r3, r3, #8
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0201 	orr.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2220      	movs	r2, #32
 80024da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	e000      	b.n	80024ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024ea:	2302      	movs	r3, #2
  }
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024fc:	4b04      	ldr	r3, [pc, #16]	@ (8002510 <HAL_PWREx_GetVoltageRange+0x18>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40007000 	.word	0x40007000

08002514 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002522:	d130      	bne.n	8002586 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002524:	4b23      	ldr	r3, [pc, #140]	@ (80025b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800252c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002530:	d038      	beq.n	80025a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002532:	4b20      	ldr	r3, [pc, #128]	@ (80025b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800253a:	4a1e      	ldr	r2, [pc, #120]	@ (80025b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800253c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002540:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002542:	4b1d      	ldr	r3, [pc, #116]	@ (80025b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2232      	movs	r2, #50	@ 0x32
 8002548:	fb02 f303 	mul.w	r3, r2, r3
 800254c:	4a1b      	ldr	r2, [pc, #108]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	0c9b      	lsrs	r3, r3, #18
 8002554:	3301      	adds	r3, #1
 8002556:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002558:	e002      	b.n	8002560 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	3b01      	subs	r3, #1
 800255e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002560:	4b14      	ldr	r3, [pc, #80]	@ (80025b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800256c:	d102      	bne.n	8002574 <HAL_PWREx_ControlVoltageScaling+0x60>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f2      	bne.n	800255a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002574:	4b0f      	ldr	r3, [pc, #60]	@ (80025b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800257c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002580:	d110      	bne.n	80025a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e00f      	b.n	80025a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002586:	4b0b      	ldr	r3, [pc, #44]	@ (80025b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800258e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002592:	d007      	beq.n	80025a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002594:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800259c:	4a05      	ldr	r2, [pc, #20]	@ (80025b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800259e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40007000 	.word	0x40007000
 80025b8:	20000000 	.word	0x20000000
 80025bc:	431bde83 	.word	0x431bde83

080025c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e3ca      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025d2:	4b97      	ldr	r3, [pc, #604]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025dc:	4b94      	ldr	r3, [pc, #592]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 80e4 	beq.w	80027bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d007      	beq.n	800260a <HAL_RCC_OscConfig+0x4a>
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b0c      	cmp	r3, #12
 80025fe:	f040 808b 	bne.w	8002718 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b01      	cmp	r3, #1
 8002606:	f040 8087 	bne.w	8002718 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800260a:	4b89      	ldr	r3, [pc, #548]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_RCC_OscConfig+0x62>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e3a2      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1a      	ldr	r2, [r3, #32]
 8002626:	4b82      	ldr	r3, [pc, #520]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d004      	beq.n	800263c <HAL_RCC_OscConfig+0x7c>
 8002632:	4b7f      	ldr	r3, [pc, #508]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800263a:	e005      	b.n	8002648 <HAL_RCC_OscConfig+0x88>
 800263c:	4b7c      	ldr	r3, [pc, #496]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 800263e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002648:	4293      	cmp	r3, r2
 800264a:	d223      	bcs.n	8002694 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4618      	mov	r0, r3
 8002652:	f000 fd55 	bl	8003100 <RCC_SetFlashLatencyFromMSIRange>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e383      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002660:	4b73      	ldr	r3, [pc, #460]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a72      	ldr	r2, [pc, #456]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002666:	f043 0308 	orr.w	r3, r3, #8
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b70      	ldr	r3, [pc, #448]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	496d      	ldr	r1, [pc, #436]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800267e:	4b6c      	ldr	r3, [pc, #432]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	4968      	ldr	r1, [pc, #416]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
 8002692:	e025      	b.n	80026e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002694:	4b66      	ldr	r3, [pc, #408]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a65      	ldr	r2, [pc, #404]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 800269a:	f043 0308 	orr.w	r3, r3, #8
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b63      	ldr	r3, [pc, #396]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4960      	ldr	r1, [pc, #384]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	021b      	lsls	r3, r3, #8
 80026c0:	495b      	ldr	r1, [pc, #364]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d109      	bne.n	80026e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fd15 	bl	8003100 <RCC_SetFlashLatencyFromMSIRange>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e343      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026e0:	f000 fc4a 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b52      	ldr	r3, [pc, #328]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	4950      	ldr	r1, [pc, #320]	@ (8002834 <HAL_RCC_OscConfig+0x274>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
 80026fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002838 <HAL_RCC_OscConfig+0x278>)
 80026fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002700:	4b4e      	ldr	r3, [pc, #312]	@ (800283c <HAL_RCC_OscConfig+0x27c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe ffd7 	bl	80016b8 <HAL_InitTick>
 800270a:	4603      	mov	r3, r0
 800270c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d052      	beq.n	80027ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	e327      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d032      	beq.n	8002786 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002720:	4b43      	ldr	r3, [pc, #268]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a42      	ldr	r2, [pc, #264]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800272c:	f7ff f814 	bl	8001758 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002734:	f7ff f810 	bl	8001758 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e310      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002746:	4b3a      	ldr	r3, [pc, #232]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002752:	4b37      	ldr	r3, [pc, #220]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a36      	ldr	r2, [pc, #216]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002758:	f043 0308 	orr.w	r3, r3, #8
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b34      	ldr	r3, [pc, #208]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4931      	ldr	r1, [pc, #196]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 800276c:	4313      	orrs	r3, r2
 800276e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002770:	4b2f      	ldr	r3, [pc, #188]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	492c      	ldr	r1, [pc, #176]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
 8002784:	e01a      	b.n	80027bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002786:	4b2a      	ldr	r3, [pc, #168]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a29      	ldr	r2, [pc, #164]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 800278c:	f023 0301 	bic.w	r3, r3, #1
 8002790:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002792:	f7fe ffe1 	bl	8001758 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800279a:	f7fe ffdd 	bl	8001758 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e2dd      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027ac:	4b20      	ldr	r3, [pc, #128]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f0      	bne.n	800279a <HAL_RCC_OscConfig+0x1da>
 80027b8:	e000      	b.n	80027bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d074      	beq.n	80028b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d005      	beq.n	80027da <HAL_RCC_OscConfig+0x21a>
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2b0c      	cmp	r3, #12
 80027d2:	d10e      	bne.n	80027f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d10b      	bne.n	80027f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027da:	4b15      	ldr	r3, [pc, #84]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d064      	beq.n	80028b0 <HAL_RCC_OscConfig+0x2f0>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d160      	bne.n	80028b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e2ba      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x24a>
 80027fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0b      	ldr	r2, [pc, #44]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002802:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	e026      	b.n	8002858 <HAL_RCC_OscConfig+0x298>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002812:	d115      	bne.n	8002840 <HAL_RCC_OscConfig+0x280>
 8002814:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a05      	ldr	r2, [pc, #20]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 800281a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	4b03      	ldr	r3, [pc, #12]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a02      	ldr	r2, [pc, #8]	@ (8002830 <HAL_RCC_OscConfig+0x270>)
 8002826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	e014      	b.n	8002858 <HAL_RCC_OscConfig+0x298>
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000
 8002834:	0800658c 	.word	0x0800658c
 8002838:	20000000 	.word	0x20000000
 800283c:	20000004 	.word	0x20000004
 8002840:	4ba0      	ldr	r3, [pc, #640]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a9f      	ldr	r2, [pc, #636]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b9d      	ldr	r3, [pc, #628]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a9c      	ldr	r2, [pc, #624]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe ff7a 	bl	8001758 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002868:	f7fe ff76 	bl	8001758 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	@ 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e276      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800287a:	4b92      	ldr	r3, [pc, #584]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x2a8>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe ff66 	bl	8001758 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7fe ff62 	bl	8001758 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	@ 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e262      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028a2:	4b88      	ldr	r3, [pc, #544]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x2d0>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d060      	beq.n	8002980 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_OscConfig+0x310>
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d119      	bne.n	80028fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d116      	bne.n	80028fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d0:	4b7c      	ldr	r3, [pc, #496]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_OscConfig+0x328>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e23f      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e8:	4b76      	ldr	r3, [pc, #472]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	4973      	ldr	r1, [pc, #460]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028fc:	e040      	b.n	8002980 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d023      	beq.n	800294e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002906:	4b6f      	ldr	r3, [pc, #444]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a6e      	ldr	r2, [pc, #440]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002912:	f7fe ff21 	bl	8001758 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800291a:	f7fe ff1d 	bl	8001758 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e21d      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800292c:	4b65      	ldr	r3, [pc, #404]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002938:	4b62      	ldr	r3, [pc, #392]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	495f      	ldr	r1, [pc, #380]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
 800294c:	e018      	b.n	8002980 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800294e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a5c      	ldr	r2, [pc, #368]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295a:	f7fe fefd 	bl	8001758 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002962:	f7fe fef9 	bl	8001758 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e1f9      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002974:	4b53      	ldr	r3, [pc, #332]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f0      	bne.n	8002962 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d03c      	beq.n	8002a06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01c      	beq.n	80029ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002994:	4b4b      	ldr	r3, [pc, #300]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800299a:	4a4a      	ldr	r2, [pc, #296]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a4:	f7fe fed8 	bl	8001758 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ac:	f7fe fed4 	bl	8001758 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e1d4      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029be:	4b41      	ldr	r3, [pc, #260]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 80029c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ef      	beq.n	80029ac <HAL_RCC_OscConfig+0x3ec>
 80029cc:	e01b      	b.n	8002a06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ce:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 80029d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 80029d6:	f023 0301 	bic.w	r3, r3, #1
 80029da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029de:	f7fe febb 	bl	8001758 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e6:	f7fe feb7 	bl	8001758 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1b7      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029f8:	4b32      	ldr	r3, [pc, #200]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 80029fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1ef      	bne.n	80029e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 80a6 	beq.w	8002b60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a14:	2300      	movs	r3, #0
 8002a16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a18:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10d      	bne.n	8002a40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a24:	4b27      	ldr	r3, [pc, #156]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a28:	4a26      	ldr	r2, [pc, #152]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a30:	4b24      	ldr	r3, [pc, #144]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a40:	4b21      	ldr	r3, [pc, #132]	@ (8002ac8 <HAL_RCC_OscConfig+0x508>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d118      	bne.n	8002a7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac8 <HAL_RCC_OscConfig+0x508>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac8 <HAL_RCC_OscConfig+0x508>)
 8002a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a58:	f7fe fe7e 	bl	8001758 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a60:	f7fe fe7a 	bl	8001758 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e17a      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a72:	4b15      	ldr	r3, [pc, #84]	@ (8002ac8 <HAL_RCC_OscConfig+0x508>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d108      	bne.n	8002a98 <HAL_RCC_OscConfig+0x4d8>
 8002a86:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a96:	e029      	b.n	8002aec <HAL_RCC_OscConfig+0x52c>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b05      	cmp	r3, #5
 8002a9e:	d115      	bne.n	8002acc <HAL_RCC_OscConfig+0x50c>
 8002aa0:	4b08      	ldr	r3, [pc, #32]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa6:	4a07      	ldr	r2, [pc, #28]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002aa8:	f043 0304 	orr.w	r3, r3, #4
 8002aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ab0:	4b04      	ldr	r3, [pc, #16]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab6:	4a03      	ldr	r2, [pc, #12]	@ (8002ac4 <HAL_RCC_OscConfig+0x504>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ac0:	e014      	b.n	8002aec <HAL_RCC_OscConfig+0x52c>
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40007000 	.word	0x40007000
 8002acc:	4b9c      	ldr	r3, [pc, #624]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad2:	4a9b      	ldr	r2, [pc, #620]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002adc:	4b98      	ldr	r3, [pc, #608]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae2:	4a97      	ldr	r2, [pc, #604]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002ae4:	f023 0304 	bic.w	r3, r3, #4
 8002ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d016      	beq.n	8002b22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af4:	f7fe fe30 	bl	8001758 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afc:	f7fe fe2c 	bl	8001758 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e12a      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b12:	4b8b      	ldr	r3, [pc, #556]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0ed      	beq.n	8002afc <HAL_RCC_OscConfig+0x53c>
 8002b20:	e015      	b.n	8002b4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b22:	f7fe fe19 	bl	8001758 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b28:	e00a      	b.n	8002b40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7fe fe15 	bl	8001758 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e113      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b40:	4b7f      	ldr	r3, [pc, #508]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1ed      	bne.n	8002b2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b4e:	7ffb      	ldrb	r3, [r7, #31]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d105      	bne.n	8002b60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b54:	4b7a      	ldr	r3, [pc, #488]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b58:	4a79      	ldr	r2, [pc, #484]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002b5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b5e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80fe 	beq.w	8002d66 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	f040 80d0 	bne.w	8002d14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b74:	4b72      	ldr	r3, [pc, #456]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f003 0203 	and.w	r2, r3, #3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d130      	bne.n	8002bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	3b01      	subs	r3, #1
 8002b94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d127      	bne.n	8002bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d11f      	bne.n	8002bea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bb4:	2a07      	cmp	r2, #7
 8002bb6:	bf14      	ite	ne
 8002bb8:	2201      	movne	r2, #1
 8002bba:	2200      	moveq	r2, #0
 8002bbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d113      	bne.n	8002bea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bcc:	085b      	lsrs	r3, r3, #1
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d109      	bne.n	8002bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	3b01      	subs	r3, #1
 8002be4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d06e      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	2b0c      	cmp	r3, #12
 8002bee:	d069      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bf0:	4b53      	ldr	r3, [pc, #332]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d105      	bne.n	8002c08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bfc:	4b50      	ldr	r3, [pc, #320]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0ad      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c0c:	4b4c      	ldr	r3, [pc, #304]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a4b      	ldr	r2, [pc, #300]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002c12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c18:	f7fe fd9e 	bl	8001758 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c20:	f7fe fd9a 	bl	8001758 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e09a      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c32:	4b43      	ldr	r3, [pc, #268]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c3e:	4b40      	ldr	r3, [pc, #256]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	4b40      	ldr	r3, [pc, #256]	@ (8002d44 <HAL_RCC_OscConfig+0x784>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c4e:	3a01      	subs	r2, #1
 8002c50:	0112      	lsls	r2, r2, #4
 8002c52:	4311      	orrs	r1, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c58:	0212      	lsls	r2, r2, #8
 8002c5a:	4311      	orrs	r1, r2
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c60:	0852      	lsrs	r2, r2, #1
 8002c62:	3a01      	subs	r2, #1
 8002c64:	0552      	lsls	r2, r2, #21
 8002c66:	4311      	orrs	r1, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c6c:	0852      	lsrs	r2, r2, #1
 8002c6e:	3a01      	subs	r2, #1
 8002c70:	0652      	lsls	r2, r2, #25
 8002c72:	4311      	orrs	r1, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c78:	0912      	lsrs	r2, r2, #4
 8002c7a:	0452      	lsls	r2, r2, #17
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	4930      	ldr	r1, [pc, #192]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c84:	4b2e      	ldr	r3, [pc, #184]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a2d      	ldr	r2, [pc, #180]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002c8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c90:	4b2b      	ldr	r3, [pc, #172]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a2a      	ldr	r2, [pc, #168]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002c96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c9c:	f7fe fd5c 	bl	8001758 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7fe fd58 	bl	8001758 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e058      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb6:	4b22      	ldr	r3, [pc, #136]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cc2:	e050      	b.n	8002d66 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e04f      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d148      	bne.n	8002d66 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a19      	ldr	r2, [pc, #100]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002cda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ce0:	4b17      	ldr	r3, [pc, #92]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4a16      	ldr	r2, [pc, #88]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cec:	f7fe fd34 	bl	8001758 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe fd30 	bl	8001758 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e030      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d06:	4b0e      	ldr	r3, [pc, #56]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x734>
 8002d12:	e028      	b.n	8002d66 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	d023      	beq.n	8002d62 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1a:	4b09      	ldr	r3, [pc, #36]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a08      	ldr	r2, [pc, #32]	@ (8002d40 <HAL_RCC_OscConfig+0x780>)
 8002d20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7fe fd17 	bl	8001758 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d2c:	e00c      	b.n	8002d48 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2e:	f7fe fd13 	bl	8001758 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d905      	bls.n	8002d48 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e013      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
 8002d40:	40021000 	.word	0x40021000
 8002d44:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d48:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <HAL_RCC_OscConfig+0x7b0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1ec      	bne.n	8002d2e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d54:	4b06      	ldr	r3, [pc, #24]	@ (8002d70 <HAL_RCC_OscConfig+0x7b0>)
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	4905      	ldr	r1, [pc, #20]	@ (8002d70 <HAL_RCC_OscConfig+0x7b0>)
 8002d5a:	4b06      	ldr	r3, [pc, #24]	@ (8002d74 <HAL_RCC_OscConfig+0x7b4>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60cb      	str	r3, [r1, #12]
 8002d60:	e001      	b.n	8002d66 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3720      	adds	r7, #32
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40021000 	.word	0x40021000
 8002d74:	feeefffc 	.word	0xfeeefffc

08002d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0e7      	b.n	8002f5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b75      	ldr	r3, [pc, #468]	@ (8002f64 <HAL_RCC_ClockConfig+0x1ec>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d910      	bls.n	8002dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9a:	4b72      	ldr	r3, [pc, #456]	@ (8002f64 <HAL_RCC_ClockConfig+0x1ec>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 0207 	bic.w	r2, r3, #7
 8002da2:	4970      	ldr	r1, [pc, #448]	@ (8002f64 <HAL_RCC_ClockConfig+0x1ec>)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b6e      	ldr	r3, [pc, #440]	@ (8002f64 <HAL_RCC_ClockConfig+0x1ec>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0cf      	b.n	8002f5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d010      	beq.n	8002dea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	4b66      	ldr	r3, [pc, #408]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f0>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d908      	bls.n	8002dea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd8:	4b63      	ldr	r3, [pc, #396]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f0>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	4960      	ldr	r1, [pc, #384]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f0>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d04c      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d107      	bne.n	8002e0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dfe:	4b5a      	ldr	r3, [pc, #360]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d121      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e0a6      	b.n	8002f5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d107      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e16:	4b54      	ldr	r3, [pc, #336]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d115      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e09a      	b.n	8002f5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e2e:	4b4e      	ldr	r3, [pc, #312]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e08e      	b.n	8002f5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e086      	b.n	8002f5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e4e:	4b46      	ldr	r3, [pc, #280]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f0>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f023 0203 	bic.w	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4943      	ldr	r1, [pc, #268]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e60:	f7fe fc7a 	bl	8001758 <HAL_GetTick>
 8002e64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	e00a      	b.n	8002e7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e68:	f7fe fc76 	bl	8001758 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e06e      	b.n	8002f5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f0>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 020c 	and.w	r2, r3, #12
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d1eb      	bne.n	8002e68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d010      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	4b31      	ldr	r3, [pc, #196]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d208      	bcs.n	8002ebe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eac:	4b2e      	ldr	r3, [pc, #184]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f0>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	492b      	ldr	r1, [pc, #172]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f0>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ebe:	4b29      	ldr	r3, [pc, #164]	@ (8002f64 <HAL_RCC_ClockConfig+0x1ec>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d210      	bcs.n	8002eee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ecc:	4b25      	ldr	r3, [pc, #148]	@ (8002f64 <HAL_RCC_ClockConfig+0x1ec>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 0207 	bic.w	r2, r3, #7
 8002ed4:	4923      	ldr	r1, [pc, #140]	@ (8002f64 <HAL_RCC_ClockConfig+0x1ec>)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002edc:	4b21      	ldr	r3, [pc, #132]	@ (8002f64 <HAL_RCC_ClockConfig+0x1ec>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d001      	beq.n	8002eee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e036      	b.n	8002f5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d008      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efa:	4b1b      	ldr	r3, [pc, #108]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f0>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	4918      	ldr	r1, [pc, #96]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f0>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f18:	4b13      	ldr	r3, [pc, #76]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f0>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4910      	ldr	r1, [pc, #64]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f0>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f2c:	f000 f824 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8002f30:	4602      	mov	r2, r0
 8002f32:	4b0d      	ldr	r3, [pc, #52]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f0>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	490b      	ldr	r1, [pc, #44]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f4>)
 8002f3e:	5ccb      	ldrb	r3, [r1, r3]
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
 8002f48:	4a09      	ldr	r2, [pc, #36]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f8>)
 8002f4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f4c:	4b09      	ldr	r3, [pc, #36]	@ (8002f74 <HAL_RCC_ClockConfig+0x1fc>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fe fbb1 	bl	80016b8 <HAL_InitTick>
 8002f56:	4603      	mov	r3, r0
 8002f58:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f5a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40022000 	.word	0x40022000
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	0800658c 	.word	0x0800658c
 8002f70:	20000000 	.word	0x20000000
 8002f74:	20000004 	.word	0x20000004

08002f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b089      	sub	sp, #36	@ 0x24
 8002f7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f86:	4b3e      	ldr	r3, [pc, #248]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f90:	4b3b      	ldr	r3, [pc, #236]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x34>
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	d121      	bne.n	8002fea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d11e      	bne.n	8002fea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fac:	4b34      	ldr	r3, [pc, #208]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d107      	bne.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fb8:	4b31      	ldr	r3, [pc, #196]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	e005      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fd4:	4a2b      	ldr	r2, [pc, #172]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10d      	bne.n	8003000 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fe8:	e00a      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d102      	bne.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ff0:	4b25      	ldr	r3, [pc, #148]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ff2:	61bb      	str	r3, [r7, #24]
 8002ff4:	e004      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ffc:	4b23      	ldr	r3, [pc, #140]	@ (800308c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ffe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b0c      	cmp	r3, #12
 8003004:	d134      	bne.n	8003070 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003006:	4b1e      	ldr	r3, [pc, #120]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d003      	beq.n	800301e <HAL_RCC_GetSysClockFreq+0xa6>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b03      	cmp	r3, #3
 800301a:	d003      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0xac>
 800301c:	e005      	b.n	800302a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800301e:	4b1a      	ldr	r3, [pc, #104]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x110>)
 8003020:	617b      	str	r3, [r7, #20]
      break;
 8003022:	e005      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003024:	4b19      	ldr	r3, [pc, #100]	@ (800308c <HAL_RCC_GetSysClockFreq+0x114>)
 8003026:	617b      	str	r3, [r7, #20]
      break;
 8003028:	e002      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	617b      	str	r3, [r7, #20]
      break;
 800302e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003030:	4b13      	ldr	r3, [pc, #76]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	3301      	adds	r3, #1
 800303c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800303e:	4b10      	ldr	r3, [pc, #64]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	fb03 f202 	mul.w	r2, r3, r2
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	fbb2 f3f3 	udiv	r3, r2, r3
 8003054:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003056:	4b0a      	ldr	r3, [pc, #40]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	0e5b      	lsrs	r3, r3, #25
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	3301      	adds	r3, #1
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	fbb2 f3f3 	udiv	r3, r2, r3
 800306e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003070:	69bb      	ldr	r3, [r7, #24]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3724      	adds	r7, #36	@ 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000
 8003084:	080065a4 	.word	0x080065a4
 8003088:	00f42400 	.word	0x00f42400
 800308c:	007a1200 	.word	0x007a1200

08003090 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003094:	4b03      	ldr	r3, [pc, #12]	@ (80030a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003096:	681b      	ldr	r3, [r3, #0]
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	20000000 	.word	0x20000000

080030a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030ac:	f7ff fff0 	bl	8003090 <HAL_RCC_GetHCLKFreq>
 80030b0:	4602      	mov	r2, r0
 80030b2:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	0a1b      	lsrs	r3, r3, #8
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	4904      	ldr	r1, [pc, #16]	@ (80030d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030be:	5ccb      	ldrb	r3, [r1, r3]
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40021000 	.word	0x40021000
 80030d0:	0800659c 	.word	0x0800659c

080030d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030d8:	f7ff ffda 	bl	8003090 <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b06      	ldr	r3, [pc, #24]	@ (80030f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	0adb      	lsrs	r3, r3, #11
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4904      	ldr	r1, [pc, #16]	@ (80030fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000
 80030fc:	0800659c 	.word	0x0800659c

08003100 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003108:	2300      	movs	r3, #0
 800310a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800310c:	4b2a      	ldr	r3, [pc, #168]	@ (80031b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800310e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003118:	f7ff f9ee 	bl	80024f8 <HAL_PWREx_GetVoltageRange>
 800311c:	6178      	str	r0, [r7, #20]
 800311e:	e014      	b.n	800314a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003120:	4b25      	ldr	r3, [pc, #148]	@ (80031b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003124:	4a24      	ldr	r2, [pc, #144]	@ (80031b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800312a:	6593      	str	r3, [r2, #88]	@ 0x58
 800312c:	4b22      	ldr	r3, [pc, #136]	@ (80031b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003138:	f7ff f9de 	bl	80024f8 <HAL_PWREx_GetVoltageRange>
 800313c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800313e:	4b1e      	ldr	r3, [pc, #120]	@ (80031b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003142:	4a1d      	ldr	r2, [pc, #116]	@ (80031b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003144:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003148:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003150:	d10b      	bne.n	800316a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b80      	cmp	r3, #128	@ 0x80
 8003156:	d919      	bls.n	800318c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2ba0      	cmp	r3, #160	@ 0xa0
 800315c:	d902      	bls.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800315e:	2302      	movs	r3, #2
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	e013      	b.n	800318c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003164:	2301      	movs	r3, #1
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	e010      	b.n	800318c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b80      	cmp	r3, #128	@ 0x80
 800316e:	d902      	bls.n	8003176 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003170:	2303      	movs	r3, #3
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	e00a      	b.n	800318c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b80      	cmp	r3, #128	@ 0x80
 800317a:	d102      	bne.n	8003182 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800317c:	2302      	movs	r3, #2
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	e004      	b.n	800318c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b70      	cmp	r3, #112	@ 0x70
 8003186:	d101      	bne.n	800318c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003188:	2301      	movs	r3, #1
 800318a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800318c:	4b0b      	ldr	r3, [pc, #44]	@ (80031bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f023 0207 	bic.w	r2, r3, #7
 8003194:	4909      	ldr	r1, [pc, #36]	@ (80031bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800319c:	4b07      	ldr	r3, [pc, #28]	@ (80031bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d001      	beq.n	80031ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40022000 	.word	0x40022000

080031c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031c8:	2300      	movs	r3, #0
 80031ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031cc:	2300      	movs	r3, #0
 80031ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d041      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031e0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80031e4:	d02a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031e6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80031ea:	d824      	bhi.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031f0:	d008      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031f6:	d81e      	bhi.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003200:	d010      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003202:	e018      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003204:	4b86      	ldr	r3, [pc, #536]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4a85      	ldr	r2, [pc, #532]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800320e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003210:	e015      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3304      	adds	r3, #4
 8003216:	2100      	movs	r1, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fabb 	bl	8003794 <RCCEx_PLLSAI1_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003222:	e00c      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3320      	adds	r3, #32
 8003228:	2100      	movs	r1, #0
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fba6 	bl	800397c <RCCEx_PLLSAI2_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003234:	e003      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	74fb      	strb	r3, [r7, #19]
      break;
 800323a:	e000      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800323c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323e:	7cfb      	ldrb	r3, [r7, #19]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10b      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003244:	4b76      	ldr	r3, [pc, #472]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003252:	4973      	ldr	r1, [pc, #460]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800325a:	e001      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325c:	7cfb      	ldrb	r3, [r7, #19]
 800325e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d041      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003270:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003274:	d02a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003276:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800327a:	d824      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800327c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003280:	d008      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003282:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003286:	d81e      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800328c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003290:	d010      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003292:	e018      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003294:	4b62      	ldr	r3, [pc, #392]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4a61      	ldr	r2, [pc, #388]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800329e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032a0:	e015      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	2100      	movs	r1, #0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fa73 	bl	8003794 <RCCEx_PLLSAI1_Config>
 80032ae:	4603      	mov	r3, r0
 80032b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032b2:	e00c      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3320      	adds	r3, #32
 80032b8:	2100      	movs	r1, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fb5e 	bl	800397c <RCCEx_PLLSAI2_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032c4:	e003      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	74fb      	strb	r3, [r7, #19]
      break;
 80032ca:	e000      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ce:	7cfb      	ldrb	r3, [r7, #19]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10b      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032d4:	4b52      	ldr	r3, [pc, #328]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032e2:	494f      	ldr	r1, [pc, #316]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032ea:	e001      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ec:	7cfb      	ldrb	r3, [r7, #19]
 80032ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 80a0 	beq.w	800343e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fe:	2300      	movs	r3, #0
 8003300:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003302:	4b47      	ldr	r3, [pc, #284]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003312:	2300      	movs	r3, #0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00d      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003318:	4b41      	ldr	r3, [pc, #260]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331c:	4a40      	ldr	r2, [pc, #256]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003322:	6593      	str	r3, [r2, #88]	@ 0x58
 8003324:	4b3e      	ldr	r3, [pc, #248]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003330:	2301      	movs	r3, #1
 8003332:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003334:	4b3b      	ldr	r3, [pc, #236]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a3a      	ldr	r2, [pc, #232]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800333a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800333e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003340:	f7fe fa0a 	bl	8001758 <HAL_GetTick>
 8003344:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003346:	e009      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003348:	f7fe fa06 	bl	8001758 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d902      	bls.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	74fb      	strb	r3, [r7, #19]
        break;
 800335a:	e005      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800335c:	4b31      	ldr	r3, [pc, #196]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ef      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d15c      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800336e:	4b2c      	ldr	r3, [pc, #176]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003374:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003378:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01f      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	429a      	cmp	r2, r3
 800338a:	d019      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800338c:	4b24      	ldr	r3, [pc, #144]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003396:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003398:	4b21      	ldr	r3, [pc, #132]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339e:	4a20      	ldr	r2, [pc, #128]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033b8:	4a19      	ldr	r2, [pc, #100]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d016      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ca:	f7fe f9c5 	bl	8001758 <HAL_GetTick>
 80033ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d0:	e00b      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d2:	f7fe f9c1 	bl	8001758 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d902      	bls.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	74fb      	strb	r3, [r7, #19]
            break;
 80033e8:	e006      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ec      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10c      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033fe:	4b08      	ldr	r3, [pc, #32]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003404:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800340e:	4904      	ldr	r1, [pc, #16]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003416:	e009      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003418:	7cfb      	ldrb	r3, [r7, #19]
 800341a:	74bb      	strb	r3, [r7, #18]
 800341c:	e006      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800341e:	bf00      	nop
 8003420:	40021000 	.word	0x40021000
 8003424:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800342c:	7c7b      	ldrb	r3, [r7, #17]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d105      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003432:	4b9e      	ldr	r3, [pc, #632]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003436:	4a9d      	ldr	r2, [pc, #628]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003438:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800343c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800344a:	4b98      	ldr	r3, [pc, #608]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003450:	f023 0203 	bic.w	r2, r3, #3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003458:	4994      	ldr	r1, [pc, #592]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800346c:	4b8f      	ldr	r3, [pc, #572]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003472:	f023 020c 	bic.w	r2, r3, #12
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347a:	498c      	ldr	r1, [pc, #560]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800348e:	4b87      	ldr	r3, [pc, #540]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003494:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349c:	4983      	ldr	r1, [pc, #524]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034b0:	4b7e      	ldr	r3, [pc, #504]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034be:	497b      	ldr	r1, [pc, #492]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034d2:	4b76      	ldr	r3, [pc, #472]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e0:	4972      	ldr	r1, [pc, #456]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0320 	and.w	r3, r3, #32
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034f4:	4b6d      	ldr	r3, [pc, #436]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003502:	496a      	ldr	r1, [pc, #424]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003516:	4b65      	ldr	r3, [pc, #404]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003524:	4961      	ldr	r1, [pc, #388]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003538:	4b5c      	ldr	r3, [pc, #368]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003546:	4959      	ldr	r1, [pc, #356]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800355a:	4b54      	ldr	r3, [pc, #336]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003560:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003568:	4950      	ldr	r1, [pc, #320]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800357c:	4b4b      	ldr	r3, [pc, #300]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003582:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358a:	4948      	ldr	r1, [pc, #288]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800359e:	4b43      	ldr	r3, [pc, #268]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ac:	493f      	ldr	r1, [pc, #252]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d028      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035c0:	4b3a      	ldr	r3, [pc, #232]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035ce:	4937      	ldr	r1, [pc, #220]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035de:	d106      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e0:	4b32      	ldr	r3, [pc, #200]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4a31      	ldr	r2, [pc, #196]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ea:	60d3      	str	r3, [r2, #12]
 80035ec:	e011      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035f6:	d10c      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3304      	adds	r3, #4
 80035fc:	2101      	movs	r1, #1
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 f8c8 	bl	8003794 <RCCEx_PLLSAI1_Config>
 8003604:	4603      	mov	r3, r0
 8003606:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003608:	7cfb      	ldrb	r3, [r7, #19]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800360e:	7cfb      	ldrb	r3, [r7, #19]
 8003610:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d028      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800361e:	4b23      	ldr	r3, [pc, #140]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003624:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362c:	491f      	ldr	r1, [pc, #124]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003638:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800363c:	d106      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800363e:	4b1b      	ldr	r3, [pc, #108]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	4a1a      	ldr	r2, [pc, #104]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003648:	60d3      	str	r3, [r2, #12]
 800364a:	e011      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003650:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003654:	d10c      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3304      	adds	r3, #4
 800365a:	2101      	movs	r1, #1
 800365c:	4618      	mov	r0, r3
 800365e:	f000 f899 	bl	8003794 <RCCEx_PLLSAI1_Config>
 8003662:	4603      	mov	r3, r0
 8003664:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003666:	7cfb      	ldrb	r3, [r7, #19]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800366c:	7cfb      	ldrb	r3, [r7, #19]
 800366e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d02b      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800367c:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003682:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800368a:	4908      	ldr	r1, [pc, #32]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800369a:	d109      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800369c:	4b03      	ldr	r3, [pc, #12]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4a02      	ldr	r2, [pc, #8]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036a6:	60d3      	str	r3, [r2, #12]
 80036a8:	e014      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036aa:	bf00      	nop
 80036ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036b8:	d10c      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3304      	adds	r3, #4
 80036be:	2101      	movs	r1, #1
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 f867 	bl	8003794 <RCCEx_PLLSAI1_Config>
 80036c6:	4603      	mov	r3, r0
 80036c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ca:	7cfb      	ldrb	r3, [r7, #19]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036d0:	7cfb      	ldrb	r3, [r7, #19]
 80036d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d02f      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036ee:	4928      	ldr	r1, [pc, #160]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036fe:	d10d      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3304      	adds	r3, #4
 8003704:	2102      	movs	r1, #2
 8003706:	4618      	mov	r0, r3
 8003708:	f000 f844 	bl	8003794 <RCCEx_PLLSAI1_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003710:	7cfb      	ldrb	r3, [r7, #19]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d014      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003716:	7cfb      	ldrb	r3, [r7, #19]
 8003718:	74bb      	strb	r3, [r7, #18]
 800371a:	e011      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003724:	d10c      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3320      	adds	r3, #32
 800372a:	2102      	movs	r1, #2
 800372c:	4618      	mov	r0, r3
 800372e:	f000 f925 	bl	800397c <RCCEx_PLLSAI2_Config>
 8003732:	4603      	mov	r3, r0
 8003734:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003736:	7cfb      	ldrb	r3, [r7, #19]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800373c:	7cfb      	ldrb	r3, [r7, #19]
 800373e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800374c:	4b10      	ldr	r3, [pc, #64]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003752:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800375a:	490d      	ldr	r1, [pc, #52]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00b      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800376e:	4b08      	ldr	r3, [pc, #32]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003774:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800377e:	4904      	ldr	r1, [pc, #16]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003786:	7cbb      	ldrb	r3, [r7, #18]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021000 	.word	0x40021000

08003794 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037a2:	4b75      	ldr	r3, [pc, #468]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d018      	beq.n	80037e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037ae:	4b72      	ldr	r3, [pc, #456]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f003 0203 	and.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d10d      	bne.n	80037da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
       ||
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d009      	beq.n	80037da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037c6:	4b6c      	ldr	r3, [pc, #432]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	091b      	lsrs	r3, r3, #4
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
       ||
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d047      	beq.n	800386a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
 80037de:	e044      	b.n	800386a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d018      	beq.n	800381a <RCCEx_PLLSAI1_Config+0x86>
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d825      	bhi.n	8003838 <RCCEx_PLLSAI1_Config+0xa4>
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d002      	beq.n	80037f6 <RCCEx_PLLSAI1_Config+0x62>
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d009      	beq.n	8003808 <RCCEx_PLLSAI1_Config+0x74>
 80037f4:	e020      	b.n	8003838 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037f6:	4b60      	ldr	r3, [pc, #384]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d11d      	bne.n	800383e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003806:	e01a      	b.n	800383e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003808:	4b5b      	ldr	r3, [pc, #364]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003810:	2b00      	cmp	r3, #0
 8003812:	d116      	bne.n	8003842 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003818:	e013      	b.n	8003842 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800381a:	4b57      	ldr	r3, [pc, #348]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10f      	bne.n	8003846 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003826:	4b54      	ldr	r3, [pc, #336]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d109      	bne.n	8003846 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003836:	e006      	b.n	8003846 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      break;
 800383c:	e004      	b.n	8003848 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800383e:	bf00      	nop
 8003840:	e002      	b.n	8003848 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003842:	bf00      	nop
 8003844:	e000      	b.n	8003848 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003846:	bf00      	nop
    }

    if(status == HAL_OK)
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10d      	bne.n	800386a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800384e:	4b4a      	ldr	r3, [pc, #296]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6819      	ldr	r1, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	430b      	orrs	r3, r1
 8003864:	4944      	ldr	r1, [pc, #272]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003866:	4313      	orrs	r3, r2
 8003868:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d17d      	bne.n	800396c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003870:	4b41      	ldr	r3, [pc, #260]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a40      	ldr	r2, [pc, #256]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003876:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800387a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800387c:	f7fd ff6c 	bl	8001758 <HAL_GetTick>
 8003880:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003882:	e009      	b.n	8003898 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003884:	f7fd ff68 	bl	8001758 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d902      	bls.n	8003898 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	73fb      	strb	r3, [r7, #15]
        break;
 8003896:	e005      	b.n	80038a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003898:	4b37      	ldr	r3, [pc, #220]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1ef      	bne.n	8003884 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d160      	bne.n	800396c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d111      	bne.n	80038d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038b0:	4b31      	ldr	r3, [pc, #196]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80038b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6892      	ldr	r2, [r2, #8]
 80038c0:	0211      	lsls	r1, r2, #8
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68d2      	ldr	r2, [r2, #12]
 80038c6:	0912      	lsrs	r2, r2, #4
 80038c8:	0452      	lsls	r2, r2, #17
 80038ca:	430a      	orrs	r2, r1
 80038cc:	492a      	ldr	r1, [pc, #168]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	610b      	str	r3, [r1, #16]
 80038d2:	e027      	b.n	8003924 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d112      	bne.n	8003900 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038da:	4b27      	ldr	r3, [pc, #156]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80038e2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6892      	ldr	r2, [r2, #8]
 80038ea:	0211      	lsls	r1, r2, #8
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6912      	ldr	r2, [r2, #16]
 80038f0:	0852      	lsrs	r2, r2, #1
 80038f2:	3a01      	subs	r2, #1
 80038f4:	0552      	lsls	r2, r2, #21
 80038f6:	430a      	orrs	r2, r1
 80038f8:	491f      	ldr	r1, [pc, #124]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	610b      	str	r3, [r1, #16]
 80038fe:	e011      	b.n	8003924 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003900:	4b1d      	ldr	r3, [pc, #116]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003908:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6892      	ldr	r2, [r2, #8]
 8003910:	0211      	lsls	r1, r2, #8
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6952      	ldr	r2, [r2, #20]
 8003916:	0852      	lsrs	r2, r2, #1
 8003918:	3a01      	subs	r2, #1
 800391a:	0652      	lsls	r2, r2, #25
 800391c:	430a      	orrs	r2, r1
 800391e:	4916      	ldr	r1, [pc, #88]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003920:	4313      	orrs	r3, r2
 8003922:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003924:	4b14      	ldr	r3, [pc, #80]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a13      	ldr	r2, [pc, #76]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800392e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fd ff12 	bl	8001758 <HAL_GetTick>
 8003934:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003936:	e009      	b.n	800394c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003938:	f7fd ff0e 	bl	8001758 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d902      	bls.n	800394c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	73fb      	strb	r3, [r7, #15]
          break;
 800394a:	e005      	b.n	8003958 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800394c:	4b0a      	ldr	r3, [pc, #40]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0ef      	beq.n	8003938 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800395e:	4b06      	ldr	r3, [pc, #24]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	4904      	ldr	r1, [pc, #16]	@ (8003978 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003968:	4313      	orrs	r3, r2
 800396a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800396c:	7bfb      	ldrb	r3, [r7, #15]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000

0800397c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800398a:	4b6a      	ldr	r3, [pc, #424]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d018      	beq.n	80039c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003996:	4b67      	ldr	r3, [pc, #412]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0203 	and.w	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d10d      	bne.n	80039c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
       ||
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039ae:	4b61      	ldr	r3, [pc, #388]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
       ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d047      	beq.n	8003a52 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
 80039c6:	e044      	b.n	8003a52 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d018      	beq.n	8003a02 <RCCEx_PLLSAI2_Config+0x86>
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d825      	bhi.n	8003a20 <RCCEx_PLLSAI2_Config+0xa4>
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d002      	beq.n	80039de <RCCEx_PLLSAI2_Config+0x62>
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d009      	beq.n	80039f0 <RCCEx_PLLSAI2_Config+0x74>
 80039dc:	e020      	b.n	8003a20 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039de:	4b55      	ldr	r3, [pc, #340]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11d      	bne.n	8003a26 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ee:	e01a      	b.n	8003a26 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039f0:	4b50      	ldr	r3, [pc, #320]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d116      	bne.n	8003a2a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a00:	e013      	b.n	8003a2a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a02:	4b4c      	ldr	r3, [pc, #304]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10f      	bne.n	8003a2e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a0e:	4b49      	ldr	r3, [pc, #292]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a1e:	e006      	b.n	8003a2e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
      break;
 8003a24:	e004      	b.n	8003a30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a26:	bf00      	nop
 8003a28:	e002      	b.n	8003a30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e000      	b.n	8003a30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10d      	bne.n	8003a52 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a36:	4b3f      	ldr	r3, [pc, #252]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6819      	ldr	r1, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	4939      	ldr	r1, [pc, #228]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d167      	bne.n	8003b28 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a58:	4b36      	ldr	r3, [pc, #216]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a35      	ldr	r2, [pc, #212]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a64:	f7fd fe78 	bl	8001758 <HAL_GetTick>
 8003a68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a6a:	e009      	b.n	8003a80 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a6c:	f7fd fe74 	bl	8001758 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d902      	bls.n	8003a80 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a7e:	e005      	b.n	8003a8c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a80:	4b2c      	ldr	r3, [pc, #176]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1ef      	bne.n	8003a6c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d14a      	bne.n	8003b28 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d111      	bne.n	8003abc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a98:	4b26      	ldr	r3, [pc, #152]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6892      	ldr	r2, [r2, #8]
 8003aa8:	0211      	lsls	r1, r2, #8
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68d2      	ldr	r2, [r2, #12]
 8003aae:	0912      	lsrs	r2, r2, #4
 8003ab0:	0452      	lsls	r2, r2, #17
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	491f      	ldr	r1, [pc, #124]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	614b      	str	r3, [r1, #20]
 8003aba:	e011      	b.n	8003ae0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003abc:	4b1d      	ldr	r3, [pc, #116]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ac4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6892      	ldr	r2, [r2, #8]
 8003acc:	0211      	lsls	r1, r2, #8
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6912      	ldr	r2, [r2, #16]
 8003ad2:	0852      	lsrs	r2, r2, #1
 8003ad4:	3a01      	subs	r2, #1
 8003ad6:	0652      	lsls	r2, r2, #25
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	4916      	ldr	r1, [pc, #88]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ae0:	4b14      	ldr	r3, [pc, #80]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a13      	ldr	r2, [pc, #76]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aec:	f7fd fe34 	bl	8001758 <HAL_GetTick>
 8003af0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003af2:	e009      	b.n	8003b08 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003af4:	f7fd fe30 	bl	8001758 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d902      	bls.n	8003b08 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	73fb      	strb	r3, [r7, #15]
          break;
 8003b06:	e005      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0ef      	beq.n	8003af4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b1a:	4b06      	ldr	r3, [pc, #24]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1c:	695a      	ldr	r2, [r3, #20]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	4904      	ldr	r1, [pc, #16]	@ (8003b34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000

08003b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e095      	b.n	8003c76 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d108      	bne.n	8003b64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b5a:	d009      	beq.n	8003b70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	61da      	str	r2, [r3, #28]
 8003b62:	e005      	b.n	8003b70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fd f920 	bl	8000dd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ba6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bb0:	d902      	bls.n	8003bb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e002      	b.n	8003bbe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bbc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003bc6:	d007      	beq.n	8003bd8 <HAL_SPI_Init+0xa0>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bd0:	d002      	beq.n	8003bd8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1a:	ea42 0103 	orr.w	r1, r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c22:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	0c1b      	lsrs	r3, r3, #16
 8003c34:	f003 0204 	and.w	r2, r3, #4
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003c54:	ea42 0103 	orr.w	r1, r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	099b      	lsrs	r3, r3, #6
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10f      	bne.n	8003cc4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	099b      	lsrs	r3, r3, #6
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d004      	beq.n	8003cc4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
    return;
 8003cc2:	e0d7      	b.n	8003e74 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	085b      	lsrs	r3, r3, #1
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <HAL_SPI_IRQHandler+0x66>
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	09db      	lsrs	r3, r3, #7
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	4798      	blx	r3
    return;
 8003ce4:	e0c6      	b.n	8003e74 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10c      	bne.n	8003d0c <HAL_SPI_IRQHandler+0x8c>
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	099b      	lsrs	r3, r3, #6
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	0a1b      	lsrs	r3, r3, #8
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80b4 	beq.w	8003e74 <HAL_SPI_IRQHandler+0x1f4>
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80ad 	beq.w	8003e74 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	099b      	lsrs	r3, r3, #6
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d023      	beq.n	8003d6e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d011      	beq.n	8003d56 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d36:	f043 0204 	orr.w	r2, r3, #4
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	e00b      	b.n	8003d6e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d56:	2300      	movs	r3, #0
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	693b      	ldr	r3, [r7, #16]
        return;
 8003d6c:	e082      	b.n	8003e74 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d014      	beq.n	8003da4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7e:	f043 0201 	orr.w	r2, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00c      	beq.n	8003dca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db4:	f043 0208 	orr.w	r2, r3, #8
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60bb      	str	r3, [r7, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d04f      	beq.n	8003e72 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003de0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d104      	bne.n	8003dfe <HAL_SPI_IRQHandler+0x17e>
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d034      	beq.n	8003e68 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0203 	bic.w	r2, r2, #3
 8003e0c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d011      	beq.n	8003e3a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1a:	4a18      	ldr	r2, [pc, #96]	@ (8003e7c <HAL_SPI_IRQHandler+0x1fc>)
 8003e1c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fd ff30 	bl	8001c88 <HAL_DMA_Abort_IT>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d016      	beq.n	8003e70 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e46:	4a0d      	ldr	r2, [pc, #52]	@ (8003e7c <HAL_SPI_IRQHandler+0x1fc>)
 8003e48:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fd ff1a 	bl	8001c88 <HAL_DMA_Abort_IT>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003e66:	e003      	b.n	8003e70 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f809 	bl	8003e80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e6e:	e000      	b.n	8003e72 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003e70:	bf00      	nop
    return;
 8003e72:	bf00      	nop
  }
}
 8003e74:	3720      	adds	r7, #32
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	08003e95 	.word	0x08003e95

08003e80 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f7ff ffe5 	bl	8003e80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e040      	b.n	8003f52 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d106      	bne.n	8003ee6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7fd f9f7 	bl	80012d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2224      	movs	r2, #36	@ 0x24
 8003eea:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0201 	bic.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 ff49 	bl	8004d9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fc8e 	bl	800482c <UART_SetConfig>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e01b      	b.n	8003f52 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0201 	orr.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 ffc8 	bl	8004ee0 <UART_CheckIdleState>
 8003f50:	4603      	mov	r3, r0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b08a      	sub	sp, #40	@ 0x28
 8003f5e:	af02      	add	r7, sp, #8
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	4613      	mov	r3, r2
 8003f68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	d177      	bne.n	8004062 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_UART_Transmit+0x24>
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e070      	b.n	8004064 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2221      	movs	r2, #33	@ 0x21
 8003f8e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f90:	f7fd fbe2 	bl	8001758 <HAL_GetTick>
 8003f94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	88fa      	ldrh	r2, [r7, #6]
 8003f9a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	88fa      	ldrh	r2, [r7, #6]
 8003fa2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fae:	d108      	bne.n	8003fc2 <HAL_UART_Transmit+0x68>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d104      	bne.n	8003fc2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	61bb      	str	r3, [r7, #24]
 8003fc0:	e003      	b.n	8003fca <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fca:	e02f      	b.n	800402c <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2180      	movs	r1, #128	@ 0x80
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f001 f82a 	bl	8005030 <UART_WaitOnFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d004      	beq.n	8003fec <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e03b      	b.n	8004064 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10b      	bne.n	800400a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	881a      	ldrh	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ffe:	b292      	uxth	r2, r2
 8004000:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	3302      	adds	r3, #2
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	e007      	b.n	800401a <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	3301      	adds	r3, #1
 8004018:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1c9      	bne.n	8003fcc <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2200      	movs	r2, #0
 8004040:	2140      	movs	r1, #64	@ 0x40
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fff4 	bl	8005030 <UART_WaitOnFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d004      	beq.n	8004058 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e005      	b.n	8004064 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	e000      	b.n	8004064 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004062:	2302      	movs	r3, #2
  }
}
 8004064:	4618      	mov	r0, r3
 8004066:	3720      	adds	r7, #32
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b09a      	sub	sp, #104	@ 0x68
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
#else
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004088:	667b      	str	r3, [r7, #100]	@ 0x64
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004092:	657b      	str	r3, [r7, #84]	@ 0x54
 8004094:	653a      	str	r2, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004098:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80040a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e6      	bne.n	8004074 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3308      	adds	r3, #8
 80040ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b0:	e853 3f00 	ldrex	r3, [r3]
 80040b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3308      	adds	r3, #8
 80040c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80040c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80040c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e5      	bne.n	80040a6 <HAL_UART_AbortReceive+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d118      	bne.n	8004114 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f023 0310 	bic.w	r3, r3, #16
 80040f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004102:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004108:	e841 2300 	strex	r3, r2, [r1]
 800410c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e6      	bne.n	80040e2 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411e:	2b40      	cmp	r3, #64	@ 0x40
 8004120:	d137      	bne.n	8004192 <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3308      	adds	r3, #8
 8004128:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	60bb      	str	r3, [r7, #8]
   return(result);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004138:	65bb      	str	r3, [r7, #88]	@ 0x58
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3308      	adds	r3, #8
 8004140:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004142:	61ba      	str	r2, [r7, #24]
 8004144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	6979      	ldr	r1, [r7, #20]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	613b      	str	r3, [r7, #16]
   return(result);
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1e5      	bne.n	8004122 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415a:	2b00      	cmp	r3, #0
 800415c:	d019      	beq.n	8004192 <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004162:	2200      	movs	r2, #0
 8004164:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800416a:	4618      	mov	r0, r3
 800416c:	f7fd fd4e 	bl	8001c0c <HAL_DMA_Abort>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00d      	beq.n	8004192 <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800417a:	4618      	mov	r0, r3
 800417c:	f7fd fe74 	bl	8001e68 <HAL_DMA_GetError>
 8004180:	4603      	mov	r3, r0
 8004182:	2b20      	cmp	r3, #32
 8004184:	d105      	bne.n	8004192 <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2210      	movs	r2, #16
 800418a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e019      	b.n	80041c6 <HAL_UART_AbortReceive+0x15a>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	220f      	movs	r2, #15
 80041a0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	8b1b      	ldrh	r3, [r3, #24]
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0208 	orr.w	r2, r2, #8
 80041b2:	b292      	uxth	r2, r2
 80041b4:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3768      	adds	r7, #104	@ 0x68
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b0ba      	sub	sp, #232	@ 0xe8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80041fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80041fe:	4013      	ands	r3, r2
 8004200:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004204:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004208:	2b00      	cmp	r3, #0
 800420a:	d115      	bne.n	8004238 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800420c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00f      	beq.n	8004238 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800421c:	f003 0320 	and.w	r3, r3, #32
 8004220:	2b00      	cmp	r3, #0
 8004222:	d009      	beq.n	8004238 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 82ca 	beq.w	80047c2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	4798      	blx	r3
      }
      return;
 8004236:	e2c4      	b.n	80047c2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004238:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8117 	beq.w	8004470 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800424e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004252:	4b85      	ldr	r3, [pc, #532]	@ (8004468 <HAL_UART_IRQHandler+0x298>)
 8004254:	4013      	ands	r3, r2
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 810a 	beq.w	8004470 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800425c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d011      	beq.n	800428c <HAL_UART_IRQHandler+0xbc>
 8004268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800426c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2201      	movs	r2, #1
 800427a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004282:	f043 0201 	orr.w	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800428c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d011      	beq.n	80042bc <HAL_UART_IRQHandler+0xec>
 8004298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00b      	beq.n	80042bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2202      	movs	r2, #2
 80042aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042b2:	f043 0204 	orr.w	r2, r3, #4
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d011      	beq.n	80042ec <HAL_UART_IRQHandler+0x11c>
 80042c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00b      	beq.n	80042ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2204      	movs	r2, #4
 80042da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042e2:	f043 0202 	orr.w	r2, r3, #2
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d017      	beq.n	8004328 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d105      	bne.n	8004310 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004308:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00b      	beq.n	8004328 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2208      	movs	r2, #8
 8004316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800431e:	f043 0208 	orr.w	r2, r3, #8
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800432c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004330:	2b00      	cmp	r3, #0
 8004332:	d012      	beq.n	800435a <HAL_UART_IRQHandler+0x18a>
 8004334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004338:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00c      	beq.n	800435a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004348:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004350:	f043 0220 	orr.w	r2, r3, #32
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8230 	beq.w	80047c6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004394:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a2:	2b40      	cmp	r3, #64	@ 0x40
 80043a4:	d005      	beq.n	80043b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d04f      	beq.n	8004452 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 ff70 	bl	8005298 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c2:	2b40      	cmp	r3, #64	@ 0x40
 80043c4:	d141      	bne.n	800444a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3308      	adds	r3, #8
 80043cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3308      	adds	r3, #8
 80043ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800440a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1d9      	bne.n	80043c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004416:	2b00      	cmp	r3, #0
 8004418:	d013      	beq.n	8004442 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800441e:	4a13      	ldr	r2, [pc, #76]	@ (800446c <HAL_UART_IRQHandler+0x29c>)
 8004420:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004426:	4618      	mov	r0, r3
 8004428:	f7fd fc2e 	bl	8001c88 <HAL_DMA_Abort_IT>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d017      	beq.n	8004462 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800443c:	4610      	mov	r0, r2
 800443e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004440:	e00f      	b.n	8004462 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f9e8 	bl	8004818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004448:	e00b      	b.n	8004462 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f9e4 	bl	8004818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004450:	e007      	b.n	8004462 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f9e0 	bl	8004818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004460:	e1b1      	b.n	80047c6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004462:	bf00      	nop
    return;
 8004464:	e1af      	b.n	80047c6 <HAL_UART_IRQHandler+0x5f6>
 8004466:	bf00      	nop
 8004468:	04000120 	.word	0x04000120
 800446c:	08005549 	.word	0x08005549

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004474:	2b01      	cmp	r3, #1
 8004476:	f040 816a 	bne.w	800474e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800447a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8163 	beq.w	800474e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 815c 	beq.w	800474e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2210      	movs	r2, #16
 800449c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a8:	2b40      	cmp	r3, #64	@ 0x40
 80044aa:	f040 80d4 	bne.w	8004656 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 80ad 	beq.w	800461e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044ce:	429a      	cmp	r2, r3
 80044d0:	f080 80a5 	bcs.w	800461e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f040 8086 	bne.w	80045fc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004504:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800450c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800451a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800451e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004526:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1da      	bne.n	80044f0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3308      	adds	r3, #8
 8004540:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800454a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3308      	adds	r3, #8
 800455a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800455e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004562:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004566:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004570:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e1      	bne.n	800453a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3308      	adds	r3, #8
 800457c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004580:	e853 3f00 	ldrex	r3, [r3]
 8004584:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004586:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800458c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3308      	adds	r3, #8
 8004596:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800459a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800459c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045a2:	e841 2300 	strex	r3, r2, [r1]
 80045a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1e3      	bne.n	8004576 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045cc:	f023 0310 	bic.w	r3, r3, #16
 80045d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045e6:	e841 2300 	strex	r3, r2, [r1]
 80045ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1e4      	bne.n	80045bc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fd fb08 	bl	8001c0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800460e:	b29b      	uxth	r3, r3
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	b29b      	uxth	r3, r3
 8004614:	4619      	mov	r1, r3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fc fb40 	bl	8000c9c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800461c:	e0d5      	b.n	80047ca <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004624:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004628:	429a      	cmp	r2, r3
 800462a:	f040 80ce 	bne.w	80047ca <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b20      	cmp	r3, #32
 800463c:	f040 80c5 	bne.w	80047ca <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800464c:	4619      	mov	r1, r3
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fc fb24 	bl	8000c9c <HAL_UARTEx_RxEventCallback>
      return;
 8004654:	e0b9      	b.n	80047ca <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004662:	b29b      	uxth	r3, r3
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80ab 	beq.w	80047ce <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004678:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80a6 	beq.w	80047ce <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468a:	e853 3f00 	ldrex	r3, [r3]
 800468e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004692:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004696:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80046a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e4      	bne.n	8004682 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3308      	adds	r3, #8
 80046be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	623b      	str	r3, [r7, #32]
   return(result);
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	f023 0301 	bic.w	r3, r3, #1
 80046ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3308      	adds	r3, #8
 80046d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80046de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e3      	bne.n	80046b8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	60fb      	str	r3, [r7, #12]
   return(result);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f023 0310 	bic.w	r3, r3, #16
 8004718:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004726:	61fb      	str	r3, [r7, #28]
 8004728:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472a:	69b9      	ldr	r1, [r7, #24]
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	e841 2300 	strex	r3, r2, [r1]
 8004732:	617b      	str	r3, [r7, #20]
   return(result);
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1e4      	bne.n	8004704 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2202      	movs	r2, #2
 800473e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004744:	4619      	mov	r1, r3
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fc faa8 	bl	8000c9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800474c:	e03f      	b.n	80047ce <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800474e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004752:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00e      	beq.n	8004778 <HAL_UART_IRQHandler+0x5a8>
 800475a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800475e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d008      	beq.n	8004778 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800476e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 ff29 	bl	80055c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004776:	e02d      	b.n	80047d4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800477c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00e      	beq.n	80047a2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800478c:	2b00      	cmp	r3, #0
 800478e:	d008      	beq.n	80047a2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01c      	beq.n	80047d2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	4798      	blx	r3
    }
    return;
 80047a0:	e017      	b.n	80047d2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d012      	beq.n	80047d4 <HAL_UART_IRQHandler+0x604>
 80047ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00c      	beq.n	80047d4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 feda 	bl	8005574 <UART_EndTransmit_IT>
    return;
 80047c0:	e008      	b.n	80047d4 <HAL_UART_IRQHandler+0x604>
      return;
 80047c2:	bf00      	nop
 80047c4:	e006      	b.n	80047d4 <HAL_UART_IRQHandler+0x604>
    return;
 80047c6:	bf00      	nop
 80047c8:	e004      	b.n	80047d4 <HAL_UART_IRQHandler+0x604>
      return;
 80047ca:	bf00      	nop
 80047cc:	e002      	b.n	80047d4 <HAL_UART_IRQHandler+0x604>
      return;
 80047ce:	bf00      	nop
 80047d0:	e000      	b.n	80047d4 <HAL_UART_IRQHandler+0x604>
    return;
 80047d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80047d4:	37e8      	adds	r7, #232	@ 0xe8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop

080047dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800482c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004830:	b08a      	sub	sp, #40	@ 0x28
 8004832:	af00      	add	r7, sp, #0
 8004834:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	431a      	orrs	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	431a      	orrs	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	4313      	orrs	r3, r2
 8004852:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4ba4      	ldr	r3, [pc, #656]	@ (8004aec <UART_SetConfig+0x2c0>)
 800485c:	4013      	ands	r3, r2
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004864:	430b      	orrs	r3, r1
 8004866:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a99      	ldr	r2, [pc, #612]	@ (8004af0 <UART_SetConfig+0x2c4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d004      	beq.n	8004898 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004894:	4313      	orrs	r3, r2
 8004896:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a8:	430a      	orrs	r2, r1
 80048aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a90      	ldr	r2, [pc, #576]	@ (8004af4 <UART_SetConfig+0x2c8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d126      	bne.n	8004904 <UART_SetConfig+0xd8>
 80048b6:	4b90      	ldr	r3, [pc, #576]	@ (8004af8 <UART_SetConfig+0x2cc>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d81b      	bhi.n	80048fc <UART_SetConfig+0xd0>
 80048c4:	a201      	add	r2, pc, #4	@ (adr r2, 80048cc <UART_SetConfig+0xa0>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	080048dd 	.word	0x080048dd
 80048d0:	080048ed 	.word	0x080048ed
 80048d4:	080048e5 	.word	0x080048e5
 80048d8:	080048f5 	.word	0x080048f5
 80048dc:	2301      	movs	r3, #1
 80048de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048e2:	e116      	b.n	8004b12 <UART_SetConfig+0x2e6>
 80048e4:	2302      	movs	r3, #2
 80048e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ea:	e112      	b.n	8004b12 <UART_SetConfig+0x2e6>
 80048ec:	2304      	movs	r3, #4
 80048ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048f2:	e10e      	b.n	8004b12 <UART_SetConfig+0x2e6>
 80048f4:	2308      	movs	r3, #8
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048fa:	e10a      	b.n	8004b12 <UART_SetConfig+0x2e6>
 80048fc:	2310      	movs	r3, #16
 80048fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004902:	e106      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a7c      	ldr	r2, [pc, #496]	@ (8004afc <UART_SetConfig+0x2d0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d138      	bne.n	8004980 <UART_SetConfig+0x154>
 800490e:	4b7a      	ldr	r3, [pc, #488]	@ (8004af8 <UART_SetConfig+0x2cc>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004914:	f003 030c 	and.w	r3, r3, #12
 8004918:	2b0c      	cmp	r3, #12
 800491a:	d82d      	bhi.n	8004978 <UART_SetConfig+0x14c>
 800491c:	a201      	add	r2, pc, #4	@ (adr r2, 8004924 <UART_SetConfig+0xf8>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004959 	.word	0x08004959
 8004928:	08004979 	.word	0x08004979
 800492c:	08004979 	.word	0x08004979
 8004930:	08004979 	.word	0x08004979
 8004934:	08004969 	.word	0x08004969
 8004938:	08004979 	.word	0x08004979
 800493c:	08004979 	.word	0x08004979
 8004940:	08004979 	.word	0x08004979
 8004944:	08004961 	.word	0x08004961
 8004948:	08004979 	.word	0x08004979
 800494c:	08004979 	.word	0x08004979
 8004950:	08004979 	.word	0x08004979
 8004954:	08004971 	.word	0x08004971
 8004958:	2300      	movs	r3, #0
 800495a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800495e:	e0d8      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004960:	2302      	movs	r3, #2
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004966:	e0d4      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004968:	2304      	movs	r3, #4
 800496a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800496e:	e0d0      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004970:	2308      	movs	r3, #8
 8004972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004976:	e0cc      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004978:	2310      	movs	r3, #16
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800497e:	e0c8      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a5e      	ldr	r2, [pc, #376]	@ (8004b00 <UART_SetConfig+0x2d4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d125      	bne.n	80049d6 <UART_SetConfig+0x1aa>
 800498a:	4b5b      	ldr	r3, [pc, #364]	@ (8004af8 <UART_SetConfig+0x2cc>)
 800498c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004990:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004994:	2b30      	cmp	r3, #48	@ 0x30
 8004996:	d016      	beq.n	80049c6 <UART_SetConfig+0x19a>
 8004998:	2b30      	cmp	r3, #48	@ 0x30
 800499a:	d818      	bhi.n	80049ce <UART_SetConfig+0x1a2>
 800499c:	2b20      	cmp	r3, #32
 800499e:	d00a      	beq.n	80049b6 <UART_SetConfig+0x18a>
 80049a0:	2b20      	cmp	r3, #32
 80049a2:	d814      	bhi.n	80049ce <UART_SetConfig+0x1a2>
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <UART_SetConfig+0x182>
 80049a8:	2b10      	cmp	r3, #16
 80049aa:	d008      	beq.n	80049be <UART_SetConfig+0x192>
 80049ac:	e00f      	b.n	80049ce <UART_SetConfig+0x1a2>
 80049ae:	2300      	movs	r3, #0
 80049b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b4:	e0ad      	b.n	8004b12 <UART_SetConfig+0x2e6>
 80049b6:	2302      	movs	r3, #2
 80049b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049bc:	e0a9      	b.n	8004b12 <UART_SetConfig+0x2e6>
 80049be:	2304      	movs	r3, #4
 80049c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049c4:	e0a5      	b.n	8004b12 <UART_SetConfig+0x2e6>
 80049c6:	2308      	movs	r3, #8
 80049c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049cc:	e0a1      	b.n	8004b12 <UART_SetConfig+0x2e6>
 80049ce:	2310      	movs	r3, #16
 80049d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049d4:	e09d      	b.n	8004b12 <UART_SetConfig+0x2e6>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a4a      	ldr	r2, [pc, #296]	@ (8004b04 <UART_SetConfig+0x2d8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d125      	bne.n	8004a2c <UART_SetConfig+0x200>
 80049e0:	4b45      	ldr	r3, [pc, #276]	@ (8004af8 <UART_SetConfig+0x2cc>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80049ec:	d016      	beq.n	8004a1c <UART_SetConfig+0x1f0>
 80049ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80049f0:	d818      	bhi.n	8004a24 <UART_SetConfig+0x1f8>
 80049f2:	2b80      	cmp	r3, #128	@ 0x80
 80049f4:	d00a      	beq.n	8004a0c <UART_SetConfig+0x1e0>
 80049f6:	2b80      	cmp	r3, #128	@ 0x80
 80049f8:	d814      	bhi.n	8004a24 <UART_SetConfig+0x1f8>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <UART_SetConfig+0x1d8>
 80049fe:	2b40      	cmp	r3, #64	@ 0x40
 8004a00:	d008      	beq.n	8004a14 <UART_SetConfig+0x1e8>
 8004a02:	e00f      	b.n	8004a24 <UART_SetConfig+0x1f8>
 8004a04:	2300      	movs	r3, #0
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a0a:	e082      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a12:	e07e      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a14:	2304      	movs	r3, #4
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a1a:	e07a      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a1c:	2308      	movs	r3, #8
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a22:	e076      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a24:	2310      	movs	r3, #16
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a2a:	e072      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a35      	ldr	r2, [pc, #212]	@ (8004b08 <UART_SetConfig+0x2dc>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d12a      	bne.n	8004a8c <UART_SetConfig+0x260>
 8004a36:	4b30      	ldr	r3, [pc, #192]	@ (8004af8 <UART_SetConfig+0x2cc>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a44:	d01a      	beq.n	8004a7c <UART_SetConfig+0x250>
 8004a46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a4a:	d81b      	bhi.n	8004a84 <UART_SetConfig+0x258>
 8004a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a50:	d00c      	beq.n	8004a6c <UART_SetConfig+0x240>
 8004a52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a56:	d815      	bhi.n	8004a84 <UART_SetConfig+0x258>
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <UART_SetConfig+0x238>
 8004a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a60:	d008      	beq.n	8004a74 <UART_SetConfig+0x248>
 8004a62:	e00f      	b.n	8004a84 <UART_SetConfig+0x258>
 8004a64:	2300      	movs	r3, #0
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6a:	e052      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a72:	e04e      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a74:	2304      	movs	r3, #4
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a7a:	e04a      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a7c:	2308      	movs	r3, #8
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a82:	e046      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a84:	2310      	movs	r3, #16
 8004a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a8a:	e042      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a17      	ldr	r2, [pc, #92]	@ (8004af0 <UART_SetConfig+0x2c4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d13a      	bne.n	8004b0c <UART_SetConfig+0x2e0>
 8004a96:	4b18      	ldr	r3, [pc, #96]	@ (8004af8 <UART_SetConfig+0x2cc>)
 8004a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004aa0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004aa4:	d01a      	beq.n	8004adc <UART_SetConfig+0x2b0>
 8004aa6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004aaa:	d81b      	bhi.n	8004ae4 <UART_SetConfig+0x2b8>
 8004aac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ab0:	d00c      	beq.n	8004acc <UART_SetConfig+0x2a0>
 8004ab2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ab6:	d815      	bhi.n	8004ae4 <UART_SetConfig+0x2b8>
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <UART_SetConfig+0x298>
 8004abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ac0:	d008      	beq.n	8004ad4 <UART_SetConfig+0x2a8>
 8004ac2:	e00f      	b.n	8004ae4 <UART_SetConfig+0x2b8>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aca:	e022      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004acc:	2302      	movs	r3, #2
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ad2:	e01e      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ada:	e01a      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004adc:	2308      	movs	r3, #8
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ae2:	e016      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aea:	e012      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004aec:	efff69f3 	.word	0xefff69f3
 8004af0:	40008000 	.word	0x40008000
 8004af4:	40013800 	.word	0x40013800
 8004af8:	40021000 	.word	0x40021000
 8004afc:	40004400 	.word	0x40004400
 8004b00:	40004800 	.word	0x40004800
 8004b04:	40004c00 	.word	0x40004c00
 8004b08:	40005000 	.word	0x40005000
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a9f      	ldr	r2, [pc, #636]	@ (8004d94 <UART_SetConfig+0x568>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d17a      	bne.n	8004c12 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d824      	bhi.n	8004b6e <UART_SetConfig+0x342>
 8004b24:	a201      	add	r2, pc, #4	@ (adr r2, 8004b2c <UART_SetConfig+0x300>)
 8004b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2a:	bf00      	nop
 8004b2c:	08004b51 	.word	0x08004b51
 8004b30:	08004b6f 	.word	0x08004b6f
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b6f 	.word	0x08004b6f
 8004b3c:	08004b5f 	.word	0x08004b5f
 8004b40:	08004b6f 	.word	0x08004b6f
 8004b44:	08004b6f 	.word	0x08004b6f
 8004b48:	08004b6f 	.word	0x08004b6f
 8004b4c:	08004b67 	.word	0x08004b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b50:	f7fe faaa 	bl	80030a8 <HAL_RCC_GetPCLK1Freq>
 8004b54:	61f8      	str	r0, [r7, #28]
        break;
 8004b56:	e010      	b.n	8004b7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b58:	4b8f      	ldr	r3, [pc, #572]	@ (8004d98 <UART_SetConfig+0x56c>)
 8004b5a:	61fb      	str	r3, [r7, #28]
        break;
 8004b5c:	e00d      	b.n	8004b7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b5e:	f7fe fa0b 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8004b62:	61f8      	str	r0, [r7, #28]
        break;
 8004b64:	e009      	b.n	8004b7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b6a:	61fb      	str	r3, [r7, #28]
        break;
 8004b6c:	e005      	b.n	8004b7a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80fb 	beq.w	8004d78 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	4613      	mov	r3, r2
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	4413      	add	r3, r2
 8004b8c:	69fa      	ldr	r2, [r7, #28]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d305      	bcc.n	8004b9e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d903      	bls.n	8004ba6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ba4:	e0e8      	b.n	8004d78 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	461c      	mov	r4, r3
 8004bac:	4615      	mov	r5, r2
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	022b      	lsls	r3, r5, #8
 8004bb8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004bbc:	0222      	lsls	r2, r4, #8
 8004bbe:	68f9      	ldr	r1, [r7, #12]
 8004bc0:	6849      	ldr	r1, [r1, #4]
 8004bc2:	0849      	lsrs	r1, r1, #1
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	4688      	mov	r8, r1
 8004bc8:	4681      	mov	r9, r0
 8004bca:	eb12 0a08 	adds.w	sl, r2, r8
 8004bce:	eb43 0b09 	adc.w	fp, r3, r9
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	603b      	str	r3, [r7, #0]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004be0:	4650      	mov	r0, sl
 8004be2:	4659      	mov	r1, fp
 8004be4:	f7fb fb4c 	bl	8000280 <__aeabi_uldivmod>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4613      	mov	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bf6:	d308      	bcc.n	8004c0a <UART_SetConfig+0x3de>
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bfe:	d204      	bcs.n	8004c0a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	60da      	str	r2, [r3, #12]
 8004c08:	e0b6      	b.n	8004d78 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c10:	e0b2      	b.n	8004d78 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c1a:	d15e      	bne.n	8004cda <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d828      	bhi.n	8004c76 <UART_SetConfig+0x44a>
 8004c24:	a201      	add	r2, pc, #4	@ (adr r2, 8004c2c <UART_SetConfig+0x400>)
 8004c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2a:	bf00      	nop
 8004c2c:	08004c51 	.word	0x08004c51
 8004c30:	08004c59 	.word	0x08004c59
 8004c34:	08004c61 	.word	0x08004c61
 8004c38:	08004c77 	.word	0x08004c77
 8004c3c:	08004c67 	.word	0x08004c67
 8004c40:	08004c77 	.word	0x08004c77
 8004c44:	08004c77 	.word	0x08004c77
 8004c48:	08004c77 	.word	0x08004c77
 8004c4c:	08004c6f 	.word	0x08004c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c50:	f7fe fa2a 	bl	80030a8 <HAL_RCC_GetPCLK1Freq>
 8004c54:	61f8      	str	r0, [r7, #28]
        break;
 8004c56:	e014      	b.n	8004c82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c58:	f7fe fa3c 	bl	80030d4 <HAL_RCC_GetPCLK2Freq>
 8004c5c:	61f8      	str	r0, [r7, #28]
        break;
 8004c5e:	e010      	b.n	8004c82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c60:	4b4d      	ldr	r3, [pc, #308]	@ (8004d98 <UART_SetConfig+0x56c>)
 8004c62:	61fb      	str	r3, [r7, #28]
        break;
 8004c64:	e00d      	b.n	8004c82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c66:	f7fe f987 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8004c6a:	61f8      	str	r0, [r7, #28]
        break;
 8004c6c:	e009      	b.n	8004c82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c72:	61fb      	str	r3, [r7, #28]
        break;
 8004c74:	e005      	b.n	8004c82 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d077      	beq.n	8004d78 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	005a      	lsls	r2, r3, #1
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	085b      	lsrs	r3, r3, #1
 8004c92:	441a      	add	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	2b0f      	cmp	r3, #15
 8004ca2:	d916      	bls.n	8004cd2 <UART_SetConfig+0x4a6>
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004caa:	d212      	bcs.n	8004cd2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	f023 030f 	bic.w	r3, r3, #15
 8004cb4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	085b      	lsrs	r3, r3, #1
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	8afb      	ldrh	r3, [r7, #22]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	8afa      	ldrh	r2, [r7, #22]
 8004cce:	60da      	str	r2, [r3, #12]
 8004cd0:	e052      	b.n	8004d78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004cd8:	e04e      	b.n	8004d78 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cde:	2b08      	cmp	r3, #8
 8004ce0:	d827      	bhi.n	8004d32 <UART_SetConfig+0x506>
 8004ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce8 <UART_SetConfig+0x4bc>)
 8004ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce8:	08004d0d 	.word	0x08004d0d
 8004cec:	08004d15 	.word	0x08004d15
 8004cf0:	08004d1d 	.word	0x08004d1d
 8004cf4:	08004d33 	.word	0x08004d33
 8004cf8:	08004d23 	.word	0x08004d23
 8004cfc:	08004d33 	.word	0x08004d33
 8004d00:	08004d33 	.word	0x08004d33
 8004d04:	08004d33 	.word	0x08004d33
 8004d08:	08004d2b 	.word	0x08004d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d0c:	f7fe f9cc 	bl	80030a8 <HAL_RCC_GetPCLK1Freq>
 8004d10:	61f8      	str	r0, [r7, #28]
        break;
 8004d12:	e014      	b.n	8004d3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d14:	f7fe f9de 	bl	80030d4 <HAL_RCC_GetPCLK2Freq>
 8004d18:	61f8      	str	r0, [r7, #28]
        break;
 8004d1a:	e010      	b.n	8004d3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004d98 <UART_SetConfig+0x56c>)
 8004d1e:	61fb      	str	r3, [r7, #28]
        break;
 8004d20:	e00d      	b.n	8004d3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d22:	f7fe f929 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8004d26:	61f8      	str	r0, [r7, #28]
        break;
 8004d28:	e009      	b.n	8004d3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d2e:	61fb      	str	r3, [r7, #28]
        break;
 8004d30:	e005      	b.n	8004d3e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d3c:	bf00      	nop
    }

    if (pclk != 0U)
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d019      	beq.n	8004d78 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	085a      	lsrs	r2, r3, #1
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	441a      	add	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2b0f      	cmp	r3, #15
 8004d5c:	d909      	bls.n	8004d72 <UART_SetConfig+0x546>
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d64:	d205      	bcs.n	8004d72 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60da      	str	r2, [r3, #12]
 8004d70:	e002      	b.n	8004d78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3728      	adds	r7, #40	@ 0x28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d92:	bf00      	nop
 8004d94:	40008000 	.word	0x40008000
 8004d98:	00f42400 	.word	0x00f42400

08004d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01a      	beq.n	8004eb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e9a:	d10a      	bne.n	8004eb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	605a      	str	r2, [r3, #4]
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b098      	sub	sp, #96	@ 0x60
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ef0:	f7fc fc32 	bl	8001758 <HAL_GetTick>
 8004ef4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d12e      	bne.n	8004f62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f88c 	bl	8005030 <UART_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d021      	beq.n	8004f62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f32:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e6      	bne.n	8004f1e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e062      	b.n	8005028 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d149      	bne.n	8005004 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f856 	bl	8005030 <UART_WaitOnFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d03c      	beq.n	8005004 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	623b      	str	r3, [r7, #32]
   return(result);
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004faa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e6      	bne.n	8004f8a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	e853 3f00 	ldrex	r3, [r3]
 8004fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0301 	bic.w	r3, r3, #1
 8004fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3308      	adds	r3, #8
 8004fda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fdc:	61fa      	str	r2, [r7, #28]
 8004fde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	69b9      	ldr	r1, [r7, #24]
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e5      	bne.n	8004fbc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e011      	b.n	8005028 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2220      	movs	r2, #32
 800500e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3758      	adds	r7, #88	@ 0x58
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005040:	e04f      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005048:	d04b      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504a:	f7fc fb85 	bl	8001758 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	429a      	cmp	r2, r3
 8005058:	d302      	bcc.n	8005060 <UART_WaitOnFlagUntilTimeout+0x30>
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e04e      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	2b00      	cmp	r3, #0
 8005070:	d037      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b80      	cmp	r3, #128	@ 0x80
 8005076:	d034      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b40      	cmp	r3, #64	@ 0x40
 800507c:	d031      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b08      	cmp	r3, #8
 800508a:	d110      	bne.n	80050ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2208      	movs	r2, #8
 8005092:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f8ff 	bl	8005298 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2208      	movs	r2, #8
 800509e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e029      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050bc:	d111      	bne.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f8e5 	bl	8005298 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e00f      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4013      	ands	r3, r2
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	bf0c      	ite	eq
 80050f2:	2301      	moveq	r3, #1
 80050f4:	2300      	movne	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	461a      	mov	r2, r3
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d0a0      	beq.n	8005042 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
	...

0800510c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b096      	sub	sp, #88	@ 0x58
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	4613      	mov	r3, r2
 8005118:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	88fa      	ldrh	r2, [r7, #6]
 8005124:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2222      	movs	r2, #34	@ 0x22
 8005134:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800513c:	2b00      	cmp	r3, #0
 800513e:	d028      	beq.n	8005192 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005144:	4a3e      	ldr	r2, [pc, #248]	@ (8005240 <UART_Start_Receive_DMA+0x134>)
 8005146:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800514c:	4a3d      	ldr	r2, [pc, #244]	@ (8005244 <UART_Start_Receive_DMA+0x138>)
 800514e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005154:	4a3c      	ldr	r2, [pc, #240]	@ (8005248 <UART_Start_Receive_DMA+0x13c>)
 8005156:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800515c:	2200      	movs	r2, #0
 800515e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3324      	adds	r3, #36	@ 0x24
 800516a:	4619      	mov	r1, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005170:	461a      	mov	r2, r3
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	f7fc fcea 	bl	8001b4c <HAL_DMA_Start_IT>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2210      	movs	r2, #16
 8005182:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e051      	b.n	8005236 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d018      	beq.n	80051cc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	461a      	mov	r2, r3
 80051b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051ba:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80051be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051c0:	e841 2300 	strex	r3, r2, [r1]
 80051c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80051c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e6      	bne.n	800519a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3308      	adds	r3, #8
 80051d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d6:	e853 3f00 	ldrex	r3, [r3]
 80051da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	f043 0301 	orr.w	r3, r3, #1
 80051e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3308      	adds	r3, #8
 80051ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80051ec:	637a      	str	r2, [r7, #52]	@ 0x34
 80051ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051f4:	e841 2300 	strex	r3, r2, [r1]
 80051f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80051fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e5      	bne.n	80051cc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3308      	adds	r3, #8
 8005206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	e853 3f00 	ldrex	r3, [r3]
 800520e:	613b      	str	r3, [r7, #16]
   return(result);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3308      	adds	r3, #8
 800521e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005220:	623a      	str	r2, [r7, #32]
 8005222:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	69f9      	ldr	r1, [r7, #28]
 8005226:	6a3a      	ldr	r2, [r7, #32]
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	61bb      	str	r3, [r7, #24]
   return(result);
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e5      	bne.n	8005200 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3758      	adds	r7, #88	@ 0x58
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	08005361 	.word	0x08005361
 8005244:	0800548d 	.word	0x0800548d
 8005248:	080054cb 	.word	0x080054cb

0800524c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800524c:	b480      	push	{r7}
 800524e:	b089      	sub	sp, #36	@ 0x24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	60bb      	str	r3, [r7, #8]
   return(result);
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	61bb      	str	r3, [r7, #24]
 8005274:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	6979      	ldr	r1, [r7, #20]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	613b      	str	r3, [r7, #16]
   return(result);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e6      	bne.n	8005254 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2220      	movs	r2, #32
 800528a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800528c:	bf00      	nop
 800528e:	3724      	adds	r7, #36	@ 0x24
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005298:	b480      	push	{r7}
 800529a:	b095      	sub	sp, #84	@ 0x54
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a8:	e853 3f00 	ldrex	r3, [r3]
 80052ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052be:	643b      	str	r3, [r7, #64]	@ 0x40
 80052c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e6      	bne.n	80052a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3308      	adds	r3, #8
 80052d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	f023 0301 	bic.w	r3, r3, #1
 80052e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3308      	adds	r3, #8
 80052f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e5      	bne.n	80052d2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800530a:	2b01      	cmp	r3, #1
 800530c:	d118      	bne.n	8005340 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	60bb      	str	r3, [r7, #8]
   return(result);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f023 0310 	bic.w	r3, r3, #16
 8005322:	647b      	str	r3, [r7, #68]	@ 0x44
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800532c:	61bb      	str	r3, [r7, #24]
 800532e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6979      	ldr	r1, [r7, #20]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	613b      	str	r3, [r7, #16]
   return(result);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e6      	bne.n	800530e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005354:	bf00      	nop
 8005356:	3754      	adds	r7, #84	@ 0x54
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b09c      	sub	sp, #112	@ 0x70
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d171      	bne.n	8005460 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800537c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800537e:	2200      	movs	r2, #0
 8005380:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005384:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005394:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005398:	66bb      	str	r3, [r7, #104]	@ 0x68
 800539a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e6      	bne.n	8005384 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3308      	adds	r3, #8
 80053bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c8:	f023 0301 	bic.w	r3, r3, #1
 80053cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80053ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3308      	adds	r3, #8
 80053d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80053d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80053d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e5      	bne.n	80053b6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3308      	adds	r3, #8
 80053f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	623b      	str	r3, [r7, #32]
   return(result);
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005400:	663b      	str	r3, [r7, #96]	@ 0x60
 8005402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3308      	adds	r3, #8
 8005408:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800540a:	633a      	str	r2, [r7, #48]	@ 0x30
 800540c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005410:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e5      	bne.n	80053ea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800541e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005420:	2220      	movs	r2, #32
 8005422:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005426:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800542a:	2b01      	cmp	r3, #1
 800542c:	d118      	bne.n	8005460 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800542e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	60fb      	str	r3, [r7, #12]
   return(result);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0310 	bic.w	r3, r3, #16
 8005442:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	461a      	mov	r2, r3
 800544a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800544c:	61fb      	str	r3, [r7, #28]
 800544e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	69b9      	ldr	r1, [r7, #24]
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	e841 2300 	strex	r3, r2, [r1]
 8005458:	617b      	str	r3, [r7, #20]
   return(result);
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e6      	bne.n	800542e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005462:	2200      	movs	r2, #0
 8005464:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800546a:	2b01      	cmp	r3, #1
 800546c:	d107      	bne.n	800547e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800546e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005470:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005474:	4619      	mov	r1, r3
 8005476:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005478:	f7fb fc10 	bl	8000c9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800547c:	e002      	b.n	8005484 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800547e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005480:	f7ff f9b6 	bl	80047f0 <HAL_UART_RxCpltCallback>
}
 8005484:	bf00      	nop
 8005486:	3770      	adds	r7, #112	@ 0x70
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005498:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d109      	bne.n	80054bc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80054ae:	085b      	lsrs	r3, r3, #1
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	4619      	mov	r1, r3
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f7fb fbf1 	bl	8000c9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054ba:	e002      	b.n	80054c2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f7ff f9a1 	bl	8004804 <HAL_UART_RxHalfCpltCallback>
}
 80054c2:	bf00      	nop
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b086      	sub	sp, #24
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054dc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054e4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f0:	2b80      	cmp	r3, #128	@ 0x80
 80054f2:	d109      	bne.n	8005508 <UART_DMAError+0x3e>
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b21      	cmp	r3, #33	@ 0x21
 80054f8:	d106      	bne.n	8005508 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8005502:	6978      	ldr	r0, [r7, #20]
 8005504:	f7ff fea2 	bl	800524c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005512:	2b40      	cmp	r3, #64	@ 0x40
 8005514:	d109      	bne.n	800552a <UART_DMAError+0x60>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b22      	cmp	r3, #34	@ 0x22
 800551a:	d106      	bne.n	800552a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2200      	movs	r2, #0
 8005520:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005524:	6978      	ldr	r0, [r7, #20]
 8005526:	f7ff feb7 	bl	8005298 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005530:	f043 0210 	orr.w	r2, r3, #16
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800553a:	6978      	ldr	r0, [r7, #20]
 800553c:	f7ff f96c 	bl	8004818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005540:	bf00      	nop
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005554:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f7ff f956 	bl	8004818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	60bb      	str	r3, [r7, #8]
   return(result);
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	61bb      	str	r3, [r7, #24]
 800559c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	6979      	ldr	r1, [r7, #20]
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	613b      	str	r3, [r7, #16]
   return(result);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e6      	bne.n	800557c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff f90e 	bl	80047dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055c0:	bf00      	nop
 80055c2:	3720      	adds	r7, #32
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08c      	sub	sp, #48	@ 0x30
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	4613      	mov	r3, r2
 80055e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	d142      	bne.n	800567a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e03b      	b.n	800567c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2201      	movs	r2, #1
 8005608:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	461a      	mov	r2, r3
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f7ff fd78 	bl	800510c <UART_Start_Receive_DMA>
 800561c:	4603      	mov	r3, r0
 800561e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005622:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005626:	2b00      	cmp	r3, #0
 8005628:	d124      	bne.n	8005674 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800562e:	2b01      	cmp	r3, #1
 8005630:	d11d      	bne.n	800566e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2210      	movs	r2, #16
 8005638:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	e853 3f00 	ldrex	r3, [r3]
 8005646:	617b      	str	r3, [r7, #20]
   return(result);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f043 0310 	orr.w	r3, r3, #16
 800564e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005658:	627b      	str	r3, [r7, #36]	@ 0x24
 800565a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565c:	6a39      	ldr	r1, [r7, #32]
 800565e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005660:	e841 2300 	strex	r3, r2, [r1]
 8005664:	61fb      	str	r3, [r7, #28]
   return(result);
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e6      	bne.n	800563a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800566c:	e002      	b.n	8005674 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005674:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005678:	e000      	b.n	800567c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800567a:	2302      	movs	r3, #2
  }
}
 800567c:	4618      	mov	r0, r3
 800567e:	3730      	adds	r7, #48	@ 0x30
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <BLE_Send>:
	// Optionally disable half-transfer interrupt to reduce overhead
	__HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
}

HAL_StatusTypeDef BLE_Send(UART_HandleTypeDef *huart, uint8_t *data, uint16_t len, uint32_t timeout)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	4613      	mov	r3, r2
 8005692:	80fb      	strh	r3, [r7, #6]
    return HAL_UART_Transmit(huart, data, len, timeout);
 8005694:	88fa      	ldrh	r2, [r7, #6]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68b9      	ldr	r1, [r7, #8]
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f7fe fc5d 	bl	8003f5a <HAL_UART_Transmit>
 80056a0:	4603      	mov	r3, r0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
	...

080056c8 <sbrk_aligned>:
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	4e0f      	ldr	r6, [pc, #60]	@ (8005708 <sbrk_aligned+0x40>)
 80056cc:	460c      	mov	r4, r1
 80056ce:	6831      	ldr	r1, [r6, #0]
 80056d0:	4605      	mov	r5, r0
 80056d2:	b911      	cbnz	r1, 80056da <sbrk_aligned+0x12>
 80056d4:	f000 f9fa 	bl	8005acc <_sbrk_r>
 80056d8:	6030      	str	r0, [r6, #0]
 80056da:	4621      	mov	r1, r4
 80056dc:	4628      	mov	r0, r5
 80056de:	f000 f9f5 	bl	8005acc <_sbrk_r>
 80056e2:	1c43      	adds	r3, r0, #1
 80056e4:	d103      	bne.n	80056ee <sbrk_aligned+0x26>
 80056e6:	f04f 34ff 	mov.w	r4, #4294967295
 80056ea:	4620      	mov	r0, r4
 80056ec:	bd70      	pop	{r4, r5, r6, pc}
 80056ee:	1cc4      	adds	r4, r0, #3
 80056f0:	f024 0403 	bic.w	r4, r4, #3
 80056f4:	42a0      	cmp	r0, r4
 80056f6:	d0f8      	beq.n	80056ea <sbrk_aligned+0x22>
 80056f8:	1a21      	subs	r1, r4, r0
 80056fa:	4628      	mov	r0, r5
 80056fc:	f000 f9e6 	bl	8005acc <_sbrk_r>
 8005700:	3001      	adds	r0, #1
 8005702:	d1f2      	bne.n	80056ea <sbrk_aligned+0x22>
 8005704:	e7ef      	b.n	80056e6 <sbrk_aligned+0x1e>
 8005706:	bf00      	nop
 8005708:	200007f8 	.word	0x200007f8

0800570c <_malloc_r>:
 800570c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005710:	1ccd      	adds	r5, r1, #3
 8005712:	f025 0503 	bic.w	r5, r5, #3
 8005716:	3508      	adds	r5, #8
 8005718:	2d0c      	cmp	r5, #12
 800571a:	bf38      	it	cc
 800571c:	250c      	movcc	r5, #12
 800571e:	2d00      	cmp	r5, #0
 8005720:	4606      	mov	r6, r0
 8005722:	db01      	blt.n	8005728 <_malloc_r+0x1c>
 8005724:	42a9      	cmp	r1, r5
 8005726:	d904      	bls.n	8005732 <_malloc_r+0x26>
 8005728:	230c      	movs	r3, #12
 800572a:	6033      	str	r3, [r6, #0]
 800572c:	2000      	movs	r0, #0
 800572e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005732:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005808 <_malloc_r+0xfc>
 8005736:	f000 f869 	bl	800580c <__malloc_lock>
 800573a:	f8d8 3000 	ldr.w	r3, [r8]
 800573e:	461c      	mov	r4, r3
 8005740:	bb44      	cbnz	r4, 8005794 <_malloc_r+0x88>
 8005742:	4629      	mov	r1, r5
 8005744:	4630      	mov	r0, r6
 8005746:	f7ff ffbf 	bl	80056c8 <sbrk_aligned>
 800574a:	1c43      	adds	r3, r0, #1
 800574c:	4604      	mov	r4, r0
 800574e:	d158      	bne.n	8005802 <_malloc_r+0xf6>
 8005750:	f8d8 4000 	ldr.w	r4, [r8]
 8005754:	4627      	mov	r7, r4
 8005756:	2f00      	cmp	r7, #0
 8005758:	d143      	bne.n	80057e2 <_malloc_r+0xd6>
 800575a:	2c00      	cmp	r4, #0
 800575c:	d04b      	beq.n	80057f6 <_malloc_r+0xea>
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	4639      	mov	r1, r7
 8005762:	4630      	mov	r0, r6
 8005764:	eb04 0903 	add.w	r9, r4, r3
 8005768:	f000 f9b0 	bl	8005acc <_sbrk_r>
 800576c:	4581      	cmp	r9, r0
 800576e:	d142      	bne.n	80057f6 <_malloc_r+0xea>
 8005770:	6821      	ldr	r1, [r4, #0]
 8005772:	1a6d      	subs	r5, r5, r1
 8005774:	4629      	mov	r1, r5
 8005776:	4630      	mov	r0, r6
 8005778:	f7ff ffa6 	bl	80056c8 <sbrk_aligned>
 800577c:	3001      	adds	r0, #1
 800577e:	d03a      	beq.n	80057f6 <_malloc_r+0xea>
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	442b      	add	r3, r5
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	f8d8 3000 	ldr.w	r3, [r8]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	bb62      	cbnz	r2, 80057e8 <_malloc_r+0xdc>
 800578e:	f8c8 7000 	str.w	r7, [r8]
 8005792:	e00f      	b.n	80057b4 <_malloc_r+0xa8>
 8005794:	6822      	ldr	r2, [r4, #0]
 8005796:	1b52      	subs	r2, r2, r5
 8005798:	d420      	bmi.n	80057dc <_malloc_r+0xd0>
 800579a:	2a0b      	cmp	r2, #11
 800579c:	d917      	bls.n	80057ce <_malloc_r+0xc2>
 800579e:	1961      	adds	r1, r4, r5
 80057a0:	42a3      	cmp	r3, r4
 80057a2:	6025      	str	r5, [r4, #0]
 80057a4:	bf18      	it	ne
 80057a6:	6059      	strne	r1, [r3, #4]
 80057a8:	6863      	ldr	r3, [r4, #4]
 80057aa:	bf08      	it	eq
 80057ac:	f8c8 1000 	streq.w	r1, [r8]
 80057b0:	5162      	str	r2, [r4, r5]
 80057b2:	604b      	str	r3, [r1, #4]
 80057b4:	4630      	mov	r0, r6
 80057b6:	f000 f82f 	bl	8005818 <__malloc_unlock>
 80057ba:	f104 000b 	add.w	r0, r4, #11
 80057be:	1d23      	adds	r3, r4, #4
 80057c0:	f020 0007 	bic.w	r0, r0, #7
 80057c4:	1ac2      	subs	r2, r0, r3
 80057c6:	bf1c      	itt	ne
 80057c8:	1a1b      	subne	r3, r3, r0
 80057ca:	50a3      	strne	r3, [r4, r2]
 80057cc:	e7af      	b.n	800572e <_malloc_r+0x22>
 80057ce:	6862      	ldr	r2, [r4, #4]
 80057d0:	42a3      	cmp	r3, r4
 80057d2:	bf0c      	ite	eq
 80057d4:	f8c8 2000 	streq.w	r2, [r8]
 80057d8:	605a      	strne	r2, [r3, #4]
 80057da:	e7eb      	b.n	80057b4 <_malloc_r+0xa8>
 80057dc:	4623      	mov	r3, r4
 80057de:	6864      	ldr	r4, [r4, #4]
 80057e0:	e7ae      	b.n	8005740 <_malloc_r+0x34>
 80057e2:	463c      	mov	r4, r7
 80057e4:	687f      	ldr	r7, [r7, #4]
 80057e6:	e7b6      	b.n	8005756 <_malloc_r+0x4a>
 80057e8:	461a      	mov	r2, r3
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	42a3      	cmp	r3, r4
 80057ee:	d1fb      	bne.n	80057e8 <_malloc_r+0xdc>
 80057f0:	2300      	movs	r3, #0
 80057f2:	6053      	str	r3, [r2, #4]
 80057f4:	e7de      	b.n	80057b4 <_malloc_r+0xa8>
 80057f6:	230c      	movs	r3, #12
 80057f8:	6033      	str	r3, [r6, #0]
 80057fa:	4630      	mov	r0, r6
 80057fc:	f000 f80c 	bl	8005818 <__malloc_unlock>
 8005800:	e794      	b.n	800572c <_malloc_r+0x20>
 8005802:	6005      	str	r5, [r0, #0]
 8005804:	e7d6      	b.n	80057b4 <_malloc_r+0xa8>
 8005806:	bf00      	nop
 8005808:	200007fc 	.word	0x200007fc

0800580c <__malloc_lock>:
 800580c:	4801      	ldr	r0, [pc, #4]	@ (8005814 <__malloc_lock+0x8>)
 800580e:	f000 b9aa 	b.w	8005b66 <__retarget_lock_acquire_recursive>
 8005812:	bf00      	nop
 8005814:	20000940 	.word	0x20000940

08005818 <__malloc_unlock>:
 8005818:	4801      	ldr	r0, [pc, #4]	@ (8005820 <__malloc_unlock+0x8>)
 800581a:	f000 b9a5 	b.w	8005b68 <__retarget_lock_release_recursive>
 800581e:	bf00      	nop
 8005820:	20000940 	.word	0x20000940

08005824 <std>:
 8005824:	2300      	movs	r3, #0
 8005826:	b510      	push	{r4, lr}
 8005828:	4604      	mov	r4, r0
 800582a:	e9c0 3300 	strd	r3, r3, [r0]
 800582e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005832:	6083      	str	r3, [r0, #8]
 8005834:	8181      	strh	r1, [r0, #12]
 8005836:	6643      	str	r3, [r0, #100]	@ 0x64
 8005838:	81c2      	strh	r2, [r0, #14]
 800583a:	6183      	str	r3, [r0, #24]
 800583c:	4619      	mov	r1, r3
 800583e:	2208      	movs	r2, #8
 8005840:	305c      	adds	r0, #92	@ 0x5c
 8005842:	f000 f906 	bl	8005a52 <memset>
 8005846:	4b0d      	ldr	r3, [pc, #52]	@ (800587c <std+0x58>)
 8005848:	6263      	str	r3, [r4, #36]	@ 0x24
 800584a:	4b0d      	ldr	r3, [pc, #52]	@ (8005880 <std+0x5c>)
 800584c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800584e:	4b0d      	ldr	r3, [pc, #52]	@ (8005884 <std+0x60>)
 8005850:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005852:	4b0d      	ldr	r3, [pc, #52]	@ (8005888 <std+0x64>)
 8005854:	6323      	str	r3, [r4, #48]	@ 0x30
 8005856:	4b0d      	ldr	r3, [pc, #52]	@ (800588c <std+0x68>)
 8005858:	6224      	str	r4, [r4, #32]
 800585a:	429c      	cmp	r4, r3
 800585c:	d006      	beq.n	800586c <std+0x48>
 800585e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005862:	4294      	cmp	r4, r2
 8005864:	d002      	beq.n	800586c <std+0x48>
 8005866:	33d0      	adds	r3, #208	@ 0xd0
 8005868:	429c      	cmp	r4, r3
 800586a:	d105      	bne.n	8005878 <std+0x54>
 800586c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005874:	f000 b976 	b.w	8005b64 <__retarget_lock_init_recursive>
 8005878:	bd10      	pop	{r4, pc}
 800587a:	bf00      	nop
 800587c:	080059cd 	.word	0x080059cd
 8005880:	080059ef 	.word	0x080059ef
 8005884:	08005a27 	.word	0x08005a27
 8005888:	08005a4b 	.word	0x08005a4b
 800588c:	20000800 	.word	0x20000800

08005890 <stdio_exit_handler>:
 8005890:	4a02      	ldr	r2, [pc, #8]	@ (800589c <stdio_exit_handler+0xc>)
 8005892:	4903      	ldr	r1, [pc, #12]	@ (80058a0 <stdio_exit_handler+0x10>)
 8005894:	4803      	ldr	r0, [pc, #12]	@ (80058a4 <stdio_exit_handler+0x14>)
 8005896:	f000 b869 	b.w	800596c <_fwalk_sglue>
 800589a:	bf00      	nop
 800589c:	2000000c 	.word	0x2000000c
 80058a0:	080062c1 	.word	0x080062c1
 80058a4:	2000001c 	.word	0x2000001c

080058a8 <cleanup_stdio>:
 80058a8:	6841      	ldr	r1, [r0, #4]
 80058aa:	4b0c      	ldr	r3, [pc, #48]	@ (80058dc <cleanup_stdio+0x34>)
 80058ac:	4299      	cmp	r1, r3
 80058ae:	b510      	push	{r4, lr}
 80058b0:	4604      	mov	r4, r0
 80058b2:	d001      	beq.n	80058b8 <cleanup_stdio+0x10>
 80058b4:	f000 fd04 	bl	80062c0 <_fflush_r>
 80058b8:	68a1      	ldr	r1, [r4, #8]
 80058ba:	4b09      	ldr	r3, [pc, #36]	@ (80058e0 <cleanup_stdio+0x38>)
 80058bc:	4299      	cmp	r1, r3
 80058be:	d002      	beq.n	80058c6 <cleanup_stdio+0x1e>
 80058c0:	4620      	mov	r0, r4
 80058c2:	f000 fcfd 	bl	80062c0 <_fflush_r>
 80058c6:	68e1      	ldr	r1, [r4, #12]
 80058c8:	4b06      	ldr	r3, [pc, #24]	@ (80058e4 <cleanup_stdio+0x3c>)
 80058ca:	4299      	cmp	r1, r3
 80058cc:	d004      	beq.n	80058d8 <cleanup_stdio+0x30>
 80058ce:	4620      	mov	r0, r4
 80058d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d4:	f000 bcf4 	b.w	80062c0 <_fflush_r>
 80058d8:	bd10      	pop	{r4, pc}
 80058da:	bf00      	nop
 80058dc:	20000800 	.word	0x20000800
 80058e0:	20000868 	.word	0x20000868
 80058e4:	200008d0 	.word	0x200008d0

080058e8 <global_stdio_init.part.0>:
 80058e8:	b510      	push	{r4, lr}
 80058ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005918 <global_stdio_init.part.0+0x30>)
 80058ec:	4c0b      	ldr	r4, [pc, #44]	@ (800591c <global_stdio_init.part.0+0x34>)
 80058ee:	4a0c      	ldr	r2, [pc, #48]	@ (8005920 <global_stdio_init.part.0+0x38>)
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	4620      	mov	r0, r4
 80058f4:	2200      	movs	r2, #0
 80058f6:	2104      	movs	r1, #4
 80058f8:	f7ff ff94 	bl	8005824 <std>
 80058fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005900:	2201      	movs	r2, #1
 8005902:	2109      	movs	r1, #9
 8005904:	f7ff ff8e 	bl	8005824 <std>
 8005908:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800590c:	2202      	movs	r2, #2
 800590e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005912:	2112      	movs	r1, #18
 8005914:	f7ff bf86 	b.w	8005824 <std>
 8005918:	20000938 	.word	0x20000938
 800591c:	20000800 	.word	0x20000800
 8005920:	08005891 	.word	0x08005891

08005924 <__sfp_lock_acquire>:
 8005924:	4801      	ldr	r0, [pc, #4]	@ (800592c <__sfp_lock_acquire+0x8>)
 8005926:	f000 b91e 	b.w	8005b66 <__retarget_lock_acquire_recursive>
 800592a:	bf00      	nop
 800592c:	20000941 	.word	0x20000941

08005930 <__sfp_lock_release>:
 8005930:	4801      	ldr	r0, [pc, #4]	@ (8005938 <__sfp_lock_release+0x8>)
 8005932:	f000 b919 	b.w	8005b68 <__retarget_lock_release_recursive>
 8005936:	bf00      	nop
 8005938:	20000941 	.word	0x20000941

0800593c <__sinit>:
 800593c:	b510      	push	{r4, lr}
 800593e:	4604      	mov	r4, r0
 8005940:	f7ff fff0 	bl	8005924 <__sfp_lock_acquire>
 8005944:	6a23      	ldr	r3, [r4, #32]
 8005946:	b11b      	cbz	r3, 8005950 <__sinit+0x14>
 8005948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800594c:	f7ff bff0 	b.w	8005930 <__sfp_lock_release>
 8005950:	4b04      	ldr	r3, [pc, #16]	@ (8005964 <__sinit+0x28>)
 8005952:	6223      	str	r3, [r4, #32]
 8005954:	4b04      	ldr	r3, [pc, #16]	@ (8005968 <__sinit+0x2c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1f5      	bne.n	8005948 <__sinit+0xc>
 800595c:	f7ff ffc4 	bl	80058e8 <global_stdio_init.part.0>
 8005960:	e7f2      	b.n	8005948 <__sinit+0xc>
 8005962:	bf00      	nop
 8005964:	080058a9 	.word	0x080058a9
 8005968:	20000938 	.word	0x20000938

0800596c <_fwalk_sglue>:
 800596c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005970:	4607      	mov	r7, r0
 8005972:	4688      	mov	r8, r1
 8005974:	4614      	mov	r4, r2
 8005976:	2600      	movs	r6, #0
 8005978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800597c:	f1b9 0901 	subs.w	r9, r9, #1
 8005980:	d505      	bpl.n	800598e <_fwalk_sglue+0x22>
 8005982:	6824      	ldr	r4, [r4, #0]
 8005984:	2c00      	cmp	r4, #0
 8005986:	d1f7      	bne.n	8005978 <_fwalk_sglue+0xc>
 8005988:	4630      	mov	r0, r6
 800598a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800598e:	89ab      	ldrh	r3, [r5, #12]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d907      	bls.n	80059a4 <_fwalk_sglue+0x38>
 8005994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005998:	3301      	adds	r3, #1
 800599a:	d003      	beq.n	80059a4 <_fwalk_sglue+0x38>
 800599c:	4629      	mov	r1, r5
 800599e:	4638      	mov	r0, r7
 80059a0:	47c0      	blx	r8
 80059a2:	4306      	orrs	r6, r0
 80059a4:	3568      	adds	r5, #104	@ 0x68
 80059a6:	e7e9      	b.n	800597c <_fwalk_sglue+0x10>

080059a8 <iprintf>:
 80059a8:	b40f      	push	{r0, r1, r2, r3}
 80059aa:	b507      	push	{r0, r1, r2, lr}
 80059ac:	4906      	ldr	r1, [pc, #24]	@ (80059c8 <iprintf+0x20>)
 80059ae:	ab04      	add	r3, sp, #16
 80059b0:	6808      	ldr	r0, [r1, #0]
 80059b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80059b6:	6881      	ldr	r1, [r0, #8]
 80059b8:	9301      	str	r3, [sp, #4]
 80059ba:	f000 f959 	bl	8005c70 <_vfiprintf_r>
 80059be:	b003      	add	sp, #12
 80059c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80059c4:	b004      	add	sp, #16
 80059c6:	4770      	bx	lr
 80059c8:	20000018 	.word	0x20000018

080059cc <__sread>:
 80059cc:	b510      	push	{r4, lr}
 80059ce:	460c      	mov	r4, r1
 80059d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d4:	f000 f868 	bl	8005aa8 <_read_r>
 80059d8:	2800      	cmp	r0, #0
 80059da:	bfab      	itete	ge
 80059dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059de:	89a3      	ldrhlt	r3, [r4, #12]
 80059e0:	181b      	addge	r3, r3, r0
 80059e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059e6:	bfac      	ite	ge
 80059e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059ea:	81a3      	strhlt	r3, [r4, #12]
 80059ec:	bd10      	pop	{r4, pc}

080059ee <__swrite>:
 80059ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f2:	461f      	mov	r7, r3
 80059f4:	898b      	ldrh	r3, [r1, #12]
 80059f6:	05db      	lsls	r3, r3, #23
 80059f8:	4605      	mov	r5, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	4616      	mov	r6, r2
 80059fe:	d505      	bpl.n	8005a0c <__swrite+0x1e>
 8005a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a04:	2302      	movs	r3, #2
 8005a06:	2200      	movs	r2, #0
 8005a08:	f000 f83c 	bl	8005a84 <_lseek_r>
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a16:	81a3      	strh	r3, [r4, #12]
 8005a18:	4632      	mov	r2, r6
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a22:	f000 b863 	b.w	8005aec <_write_r>

08005a26 <__sseek>:
 8005a26:	b510      	push	{r4, lr}
 8005a28:	460c      	mov	r4, r1
 8005a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a2e:	f000 f829 	bl	8005a84 <_lseek_r>
 8005a32:	1c43      	adds	r3, r0, #1
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	bf15      	itete	ne
 8005a38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a42:	81a3      	strheq	r3, [r4, #12]
 8005a44:	bf18      	it	ne
 8005a46:	81a3      	strhne	r3, [r4, #12]
 8005a48:	bd10      	pop	{r4, pc}

08005a4a <__sclose>:
 8005a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a4e:	f000 b809 	b.w	8005a64 <_close_r>

08005a52 <memset>:
 8005a52:	4402      	add	r2, r0
 8005a54:	4603      	mov	r3, r0
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d100      	bne.n	8005a5c <memset+0xa>
 8005a5a:	4770      	bx	lr
 8005a5c:	f803 1b01 	strb.w	r1, [r3], #1
 8005a60:	e7f9      	b.n	8005a56 <memset+0x4>
	...

08005a64 <_close_r>:
 8005a64:	b538      	push	{r3, r4, r5, lr}
 8005a66:	4d06      	ldr	r5, [pc, #24]	@ (8005a80 <_close_r+0x1c>)
 8005a68:	2300      	movs	r3, #0
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	602b      	str	r3, [r5, #0]
 8005a70:	f7fb fb1b 	bl	80010aa <_close>
 8005a74:	1c43      	adds	r3, r0, #1
 8005a76:	d102      	bne.n	8005a7e <_close_r+0x1a>
 8005a78:	682b      	ldr	r3, [r5, #0]
 8005a7a:	b103      	cbz	r3, 8005a7e <_close_r+0x1a>
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	bd38      	pop	{r3, r4, r5, pc}
 8005a80:	2000093c 	.word	0x2000093c

08005a84 <_lseek_r>:
 8005a84:	b538      	push	{r3, r4, r5, lr}
 8005a86:	4d07      	ldr	r5, [pc, #28]	@ (8005aa4 <_lseek_r+0x20>)
 8005a88:	4604      	mov	r4, r0
 8005a8a:	4608      	mov	r0, r1
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	2200      	movs	r2, #0
 8005a90:	602a      	str	r2, [r5, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	f7fb fb30 	bl	80010f8 <_lseek>
 8005a98:	1c43      	adds	r3, r0, #1
 8005a9a:	d102      	bne.n	8005aa2 <_lseek_r+0x1e>
 8005a9c:	682b      	ldr	r3, [r5, #0]
 8005a9e:	b103      	cbz	r3, 8005aa2 <_lseek_r+0x1e>
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	bd38      	pop	{r3, r4, r5, pc}
 8005aa4:	2000093c 	.word	0x2000093c

08005aa8 <_read_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4d07      	ldr	r5, [pc, #28]	@ (8005ac8 <_read_r+0x20>)
 8005aac:	4604      	mov	r4, r0
 8005aae:	4608      	mov	r0, r1
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	602a      	str	r2, [r5, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f7fb fabe 	bl	8001038 <_read>
 8005abc:	1c43      	adds	r3, r0, #1
 8005abe:	d102      	bne.n	8005ac6 <_read_r+0x1e>
 8005ac0:	682b      	ldr	r3, [r5, #0]
 8005ac2:	b103      	cbz	r3, 8005ac6 <_read_r+0x1e>
 8005ac4:	6023      	str	r3, [r4, #0]
 8005ac6:	bd38      	pop	{r3, r4, r5, pc}
 8005ac8:	2000093c 	.word	0x2000093c

08005acc <_sbrk_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	4d06      	ldr	r5, [pc, #24]	@ (8005ae8 <_sbrk_r+0x1c>)
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	4608      	mov	r0, r1
 8005ad6:	602b      	str	r3, [r5, #0]
 8005ad8:	f7fb fb1c 	bl	8001114 <_sbrk>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d102      	bne.n	8005ae6 <_sbrk_r+0x1a>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	b103      	cbz	r3, 8005ae6 <_sbrk_r+0x1a>
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	2000093c 	.word	0x2000093c

08005aec <_write_r>:
 8005aec:	b538      	push	{r3, r4, r5, lr}
 8005aee:	4d07      	ldr	r5, [pc, #28]	@ (8005b0c <_write_r+0x20>)
 8005af0:	4604      	mov	r4, r0
 8005af2:	4608      	mov	r0, r1
 8005af4:	4611      	mov	r1, r2
 8005af6:	2200      	movs	r2, #0
 8005af8:	602a      	str	r2, [r5, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	f7fb fab9 	bl	8001072 <_write>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d102      	bne.n	8005b0a <_write_r+0x1e>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	b103      	cbz	r3, 8005b0a <_write_r+0x1e>
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
 8005b0c:	2000093c 	.word	0x2000093c

08005b10 <__errno>:
 8005b10:	4b01      	ldr	r3, [pc, #4]	@ (8005b18 <__errno+0x8>)
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	20000018 	.word	0x20000018

08005b1c <__libc_init_array>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8005b54 <__libc_init_array+0x38>)
 8005b20:	4c0d      	ldr	r4, [pc, #52]	@ (8005b58 <__libc_init_array+0x3c>)
 8005b22:	1b64      	subs	r4, r4, r5
 8005b24:	10a4      	asrs	r4, r4, #2
 8005b26:	2600      	movs	r6, #0
 8005b28:	42a6      	cmp	r6, r4
 8005b2a:	d109      	bne.n	8005b40 <__libc_init_array+0x24>
 8005b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8005b5c <__libc_init_array+0x40>)
 8005b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8005b60 <__libc_init_array+0x44>)
 8005b30:	f000 fd06 	bl	8006540 <_init>
 8005b34:	1b64      	subs	r4, r4, r5
 8005b36:	10a4      	asrs	r4, r4, #2
 8005b38:	2600      	movs	r6, #0
 8005b3a:	42a6      	cmp	r6, r4
 8005b3c:	d105      	bne.n	8005b4a <__libc_init_array+0x2e>
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
 8005b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b44:	4798      	blx	r3
 8005b46:	3601      	adds	r6, #1
 8005b48:	e7ee      	b.n	8005b28 <__libc_init_array+0xc>
 8005b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4e:	4798      	blx	r3
 8005b50:	3601      	adds	r6, #1
 8005b52:	e7f2      	b.n	8005b3a <__libc_init_array+0x1e>
 8005b54:	08006610 	.word	0x08006610
 8005b58:	08006610 	.word	0x08006610
 8005b5c:	08006610 	.word	0x08006610
 8005b60:	08006614 	.word	0x08006614

08005b64 <__retarget_lock_init_recursive>:
 8005b64:	4770      	bx	lr

08005b66 <__retarget_lock_acquire_recursive>:
 8005b66:	4770      	bx	lr

08005b68 <__retarget_lock_release_recursive>:
 8005b68:	4770      	bx	lr

08005b6a <memcpy>:
 8005b6a:	440a      	add	r2, r1
 8005b6c:	4291      	cmp	r1, r2
 8005b6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b72:	d100      	bne.n	8005b76 <memcpy+0xc>
 8005b74:	4770      	bx	lr
 8005b76:	b510      	push	{r4, lr}
 8005b78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b80:	4291      	cmp	r1, r2
 8005b82:	d1f9      	bne.n	8005b78 <memcpy+0xe>
 8005b84:	bd10      	pop	{r4, pc}
	...

08005b88 <_free_r>:
 8005b88:	b538      	push	{r3, r4, r5, lr}
 8005b8a:	4605      	mov	r5, r0
 8005b8c:	2900      	cmp	r1, #0
 8005b8e:	d041      	beq.n	8005c14 <_free_r+0x8c>
 8005b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b94:	1f0c      	subs	r4, r1, #4
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	bfb8      	it	lt
 8005b9a:	18e4      	addlt	r4, r4, r3
 8005b9c:	f7ff fe36 	bl	800580c <__malloc_lock>
 8005ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c18 <_free_r+0x90>)
 8005ba2:	6813      	ldr	r3, [r2, #0]
 8005ba4:	b933      	cbnz	r3, 8005bb4 <_free_r+0x2c>
 8005ba6:	6063      	str	r3, [r4, #4]
 8005ba8:	6014      	str	r4, [r2, #0]
 8005baa:	4628      	mov	r0, r5
 8005bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bb0:	f7ff be32 	b.w	8005818 <__malloc_unlock>
 8005bb4:	42a3      	cmp	r3, r4
 8005bb6:	d908      	bls.n	8005bca <_free_r+0x42>
 8005bb8:	6820      	ldr	r0, [r4, #0]
 8005bba:	1821      	adds	r1, r4, r0
 8005bbc:	428b      	cmp	r3, r1
 8005bbe:	bf01      	itttt	eq
 8005bc0:	6819      	ldreq	r1, [r3, #0]
 8005bc2:	685b      	ldreq	r3, [r3, #4]
 8005bc4:	1809      	addeq	r1, r1, r0
 8005bc6:	6021      	streq	r1, [r4, #0]
 8005bc8:	e7ed      	b.n	8005ba6 <_free_r+0x1e>
 8005bca:	461a      	mov	r2, r3
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	b10b      	cbz	r3, 8005bd4 <_free_r+0x4c>
 8005bd0:	42a3      	cmp	r3, r4
 8005bd2:	d9fa      	bls.n	8005bca <_free_r+0x42>
 8005bd4:	6811      	ldr	r1, [r2, #0]
 8005bd6:	1850      	adds	r0, r2, r1
 8005bd8:	42a0      	cmp	r0, r4
 8005bda:	d10b      	bne.n	8005bf4 <_free_r+0x6c>
 8005bdc:	6820      	ldr	r0, [r4, #0]
 8005bde:	4401      	add	r1, r0
 8005be0:	1850      	adds	r0, r2, r1
 8005be2:	4283      	cmp	r3, r0
 8005be4:	6011      	str	r1, [r2, #0]
 8005be6:	d1e0      	bne.n	8005baa <_free_r+0x22>
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	6053      	str	r3, [r2, #4]
 8005bee:	4408      	add	r0, r1
 8005bf0:	6010      	str	r0, [r2, #0]
 8005bf2:	e7da      	b.n	8005baa <_free_r+0x22>
 8005bf4:	d902      	bls.n	8005bfc <_free_r+0x74>
 8005bf6:	230c      	movs	r3, #12
 8005bf8:	602b      	str	r3, [r5, #0]
 8005bfa:	e7d6      	b.n	8005baa <_free_r+0x22>
 8005bfc:	6820      	ldr	r0, [r4, #0]
 8005bfe:	1821      	adds	r1, r4, r0
 8005c00:	428b      	cmp	r3, r1
 8005c02:	bf04      	itt	eq
 8005c04:	6819      	ldreq	r1, [r3, #0]
 8005c06:	685b      	ldreq	r3, [r3, #4]
 8005c08:	6063      	str	r3, [r4, #4]
 8005c0a:	bf04      	itt	eq
 8005c0c:	1809      	addeq	r1, r1, r0
 8005c0e:	6021      	streq	r1, [r4, #0]
 8005c10:	6054      	str	r4, [r2, #4]
 8005c12:	e7ca      	b.n	8005baa <_free_r+0x22>
 8005c14:	bd38      	pop	{r3, r4, r5, pc}
 8005c16:	bf00      	nop
 8005c18:	200007fc 	.word	0x200007fc

08005c1c <__sfputc_r>:
 8005c1c:	6893      	ldr	r3, [r2, #8]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	b410      	push	{r4}
 8005c24:	6093      	str	r3, [r2, #8]
 8005c26:	da08      	bge.n	8005c3a <__sfputc_r+0x1e>
 8005c28:	6994      	ldr	r4, [r2, #24]
 8005c2a:	42a3      	cmp	r3, r4
 8005c2c:	db01      	blt.n	8005c32 <__sfputc_r+0x16>
 8005c2e:	290a      	cmp	r1, #10
 8005c30:	d103      	bne.n	8005c3a <__sfputc_r+0x1e>
 8005c32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c36:	f000 bb6b 	b.w	8006310 <__swbuf_r>
 8005c3a:	6813      	ldr	r3, [r2, #0]
 8005c3c:	1c58      	adds	r0, r3, #1
 8005c3e:	6010      	str	r0, [r2, #0]
 8005c40:	7019      	strb	r1, [r3, #0]
 8005c42:	4608      	mov	r0, r1
 8005c44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <__sfputs_r>:
 8005c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	460f      	mov	r7, r1
 8005c50:	4614      	mov	r4, r2
 8005c52:	18d5      	adds	r5, r2, r3
 8005c54:	42ac      	cmp	r4, r5
 8005c56:	d101      	bne.n	8005c5c <__sfputs_r+0x12>
 8005c58:	2000      	movs	r0, #0
 8005c5a:	e007      	b.n	8005c6c <__sfputs_r+0x22>
 8005c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c60:	463a      	mov	r2, r7
 8005c62:	4630      	mov	r0, r6
 8005c64:	f7ff ffda 	bl	8005c1c <__sfputc_r>
 8005c68:	1c43      	adds	r3, r0, #1
 8005c6a:	d1f3      	bne.n	8005c54 <__sfputs_r+0xa>
 8005c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c70 <_vfiprintf_r>:
 8005c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c74:	460d      	mov	r5, r1
 8005c76:	b09d      	sub	sp, #116	@ 0x74
 8005c78:	4614      	mov	r4, r2
 8005c7a:	4698      	mov	r8, r3
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	b118      	cbz	r0, 8005c88 <_vfiprintf_r+0x18>
 8005c80:	6a03      	ldr	r3, [r0, #32]
 8005c82:	b90b      	cbnz	r3, 8005c88 <_vfiprintf_r+0x18>
 8005c84:	f7ff fe5a 	bl	800593c <__sinit>
 8005c88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c8a:	07d9      	lsls	r1, r3, #31
 8005c8c:	d405      	bmi.n	8005c9a <_vfiprintf_r+0x2a>
 8005c8e:	89ab      	ldrh	r3, [r5, #12]
 8005c90:	059a      	lsls	r2, r3, #22
 8005c92:	d402      	bmi.n	8005c9a <_vfiprintf_r+0x2a>
 8005c94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c96:	f7ff ff66 	bl	8005b66 <__retarget_lock_acquire_recursive>
 8005c9a:	89ab      	ldrh	r3, [r5, #12]
 8005c9c:	071b      	lsls	r3, r3, #28
 8005c9e:	d501      	bpl.n	8005ca4 <_vfiprintf_r+0x34>
 8005ca0:	692b      	ldr	r3, [r5, #16]
 8005ca2:	b99b      	cbnz	r3, 8005ccc <_vfiprintf_r+0x5c>
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	f000 fb70 	bl	800638c <__swsetup_r>
 8005cac:	b170      	cbz	r0, 8005ccc <_vfiprintf_r+0x5c>
 8005cae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cb0:	07dc      	lsls	r4, r3, #31
 8005cb2:	d504      	bpl.n	8005cbe <_vfiprintf_r+0x4e>
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb8:	b01d      	add	sp, #116	@ 0x74
 8005cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cbe:	89ab      	ldrh	r3, [r5, #12]
 8005cc0:	0598      	lsls	r0, r3, #22
 8005cc2:	d4f7      	bmi.n	8005cb4 <_vfiprintf_r+0x44>
 8005cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cc6:	f7ff ff4f 	bl	8005b68 <__retarget_lock_release_recursive>
 8005cca:	e7f3      	b.n	8005cb4 <_vfiprintf_r+0x44>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cd0:	2320      	movs	r3, #32
 8005cd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cda:	2330      	movs	r3, #48	@ 0x30
 8005cdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e8c <_vfiprintf_r+0x21c>
 8005ce0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ce4:	f04f 0901 	mov.w	r9, #1
 8005ce8:	4623      	mov	r3, r4
 8005cea:	469a      	mov	sl, r3
 8005cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cf0:	b10a      	cbz	r2, 8005cf6 <_vfiprintf_r+0x86>
 8005cf2:	2a25      	cmp	r2, #37	@ 0x25
 8005cf4:	d1f9      	bne.n	8005cea <_vfiprintf_r+0x7a>
 8005cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8005cfa:	d00b      	beq.n	8005d14 <_vfiprintf_r+0xa4>
 8005cfc:	465b      	mov	r3, fp
 8005cfe:	4622      	mov	r2, r4
 8005d00:	4629      	mov	r1, r5
 8005d02:	4630      	mov	r0, r6
 8005d04:	f7ff ffa1 	bl	8005c4a <__sfputs_r>
 8005d08:	3001      	adds	r0, #1
 8005d0a:	f000 80a7 	beq.w	8005e5c <_vfiprintf_r+0x1ec>
 8005d0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d10:	445a      	add	r2, fp
 8005d12:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d14:	f89a 3000 	ldrb.w	r3, [sl]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 809f 	beq.w	8005e5c <_vfiprintf_r+0x1ec>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f04f 32ff 	mov.w	r2, #4294967295
 8005d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d28:	f10a 0a01 	add.w	sl, sl, #1
 8005d2c:	9304      	str	r3, [sp, #16]
 8005d2e:	9307      	str	r3, [sp, #28]
 8005d30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d34:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d36:	4654      	mov	r4, sl
 8005d38:	2205      	movs	r2, #5
 8005d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d3e:	4853      	ldr	r0, [pc, #332]	@ (8005e8c <_vfiprintf_r+0x21c>)
 8005d40:	f7fa fa4e 	bl	80001e0 <memchr>
 8005d44:	9a04      	ldr	r2, [sp, #16]
 8005d46:	b9d8      	cbnz	r0, 8005d80 <_vfiprintf_r+0x110>
 8005d48:	06d1      	lsls	r1, r2, #27
 8005d4a:	bf44      	itt	mi
 8005d4c:	2320      	movmi	r3, #32
 8005d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d52:	0713      	lsls	r3, r2, #28
 8005d54:	bf44      	itt	mi
 8005d56:	232b      	movmi	r3, #43	@ 0x2b
 8005d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d60:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d62:	d015      	beq.n	8005d90 <_vfiprintf_r+0x120>
 8005d64:	9a07      	ldr	r2, [sp, #28]
 8005d66:	4654      	mov	r4, sl
 8005d68:	2000      	movs	r0, #0
 8005d6a:	f04f 0c0a 	mov.w	ip, #10
 8005d6e:	4621      	mov	r1, r4
 8005d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d74:	3b30      	subs	r3, #48	@ 0x30
 8005d76:	2b09      	cmp	r3, #9
 8005d78:	d94b      	bls.n	8005e12 <_vfiprintf_r+0x1a2>
 8005d7a:	b1b0      	cbz	r0, 8005daa <_vfiprintf_r+0x13a>
 8005d7c:	9207      	str	r2, [sp, #28]
 8005d7e:	e014      	b.n	8005daa <_vfiprintf_r+0x13a>
 8005d80:	eba0 0308 	sub.w	r3, r0, r8
 8005d84:	fa09 f303 	lsl.w	r3, r9, r3
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	9304      	str	r3, [sp, #16]
 8005d8c:	46a2      	mov	sl, r4
 8005d8e:	e7d2      	b.n	8005d36 <_vfiprintf_r+0xc6>
 8005d90:	9b03      	ldr	r3, [sp, #12]
 8005d92:	1d19      	adds	r1, r3, #4
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	9103      	str	r1, [sp, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	bfbb      	ittet	lt
 8005d9c:	425b      	neglt	r3, r3
 8005d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8005da2:	9307      	strge	r3, [sp, #28]
 8005da4:	9307      	strlt	r3, [sp, #28]
 8005da6:	bfb8      	it	lt
 8005da8:	9204      	strlt	r2, [sp, #16]
 8005daa:	7823      	ldrb	r3, [r4, #0]
 8005dac:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dae:	d10a      	bne.n	8005dc6 <_vfiprintf_r+0x156>
 8005db0:	7863      	ldrb	r3, [r4, #1]
 8005db2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005db4:	d132      	bne.n	8005e1c <_vfiprintf_r+0x1ac>
 8005db6:	9b03      	ldr	r3, [sp, #12]
 8005db8:	1d1a      	adds	r2, r3, #4
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	9203      	str	r2, [sp, #12]
 8005dbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005dc2:	3402      	adds	r4, #2
 8005dc4:	9305      	str	r3, [sp, #20]
 8005dc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e9c <_vfiprintf_r+0x22c>
 8005dca:	7821      	ldrb	r1, [r4, #0]
 8005dcc:	2203      	movs	r2, #3
 8005dce:	4650      	mov	r0, sl
 8005dd0:	f7fa fa06 	bl	80001e0 <memchr>
 8005dd4:	b138      	cbz	r0, 8005de6 <_vfiprintf_r+0x176>
 8005dd6:	9b04      	ldr	r3, [sp, #16]
 8005dd8:	eba0 000a 	sub.w	r0, r0, sl
 8005ddc:	2240      	movs	r2, #64	@ 0x40
 8005dde:	4082      	lsls	r2, r0
 8005de0:	4313      	orrs	r3, r2
 8005de2:	3401      	adds	r4, #1
 8005de4:	9304      	str	r3, [sp, #16]
 8005de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dea:	4829      	ldr	r0, [pc, #164]	@ (8005e90 <_vfiprintf_r+0x220>)
 8005dec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005df0:	2206      	movs	r2, #6
 8005df2:	f7fa f9f5 	bl	80001e0 <memchr>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d03f      	beq.n	8005e7a <_vfiprintf_r+0x20a>
 8005dfa:	4b26      	ldr	r3, [pc, #152]	@ (8005e94 <_vfiprintf_r+0x224>)
 8005dfc:	bb1b      	cbnz	r3, 8005e46 <_vfiprintf_r+0x1d6>
 8005dfe:	9b03      	ldr	r3, [sp, #12]
 8005e00:	3307      	adds	r3, #7
 8005e02:	f023 0307 	bic.w	r3, r3, #7
 8005e06:	3308      	adds	r3, #8
 8005e08:	9303      	str	r3, [sp, #12]
 8005e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e0c:	443b      	add	r3, r7
 8005e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e10:	e76a      	b.n	8005ce8 <_vfiprintf_r+0x78>
 8005e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e16:	460c      	mov	r4, r1
 8005e18:	2001      	movs	r0, #1
 8005e1a:	e7a8      	b.n	8005d6e <_vfiprintf_r+0xfe>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	3401      	adds	r4, #1
 8005e20:	9305      	str	r3, [sp, #20]
 8005e22:	4619      	mov	r1, r3
 8005e24:	f04f 0c0a 	mov.w	ip, #10
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e2e:	3a30      	subs	r2, #48	@ 0x30
 8005e30:	2a09      	cmp	r2, #9
 8005e32:	d903      	bls.n	8005e3c <_vfiprintf_r+0x1cc>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d0c6      	beq.n	8005dc6 <_vfiprintf_r+0x156>
 8005e38:	9105      	str	r1, [sp, #20]
 8005e3a:	e7c4      	b.n	8005dc6 <_vfiprintf_r+0x156>
 8005e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e40:	4604      	mov	r4, r0
 8005e42:	2301      	movs	r3, #1
 8005e44:	e7f0      	b.n	8005e28 <_vfiprintf_r+0x1b8>
 8005e46:	ab03      	add	r3, sp, #12
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	462a      	mov	r2, r5
 8005e4c:	4b12      	ldr	r3, [pc, #72]	@ (8005e98 <_vfiprintf_r+0x228>)
 8005e4e:	a904      	add	r1, sp, #16
 8005e50:	4630      	mov	r0, r6
 8005e52:	f3af 8000 	nop.w
 8005e56:	4607      	mov	r7, r0
 8005e58:	1c78      	adds	r0, r7, #1
 8005e5a:	d1d6      	bne.n	8005e0a <_vfiprintf_r+0x19a>
 8005e5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e5e:	07d9      	lsls	r1, r3, #31
 8005e60:	d405      	bmi.n	8005e6e <_vfiprintf_r+0x1fe>
 8005e62:	89ab      	ldrh	r3, [r5, #12]
 8005e64:	059a      	lsls	r2, r3, #22
 8005e66:	d402      	bmi.n	8005e6e <_vfiprintf_r+0x1fe>
 8005e68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e6a:	f7ff fe7d 	bl	8005b68 <__retarget_lock_release_recursive>
 8005e6e:	89ab      	ldrh	r3, [r5, #12]
 8005e70:	065b      	lsls	r3, r3, #25
 8005e72:	f53f af1f 	bmi.w	8005cb4 <_vfiprintf_r+0x44>
 8005e76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e78:	e71e      	b.n	8005cb8 <_vfiprintf_r+0x48>
 8005e7a:	ab03      	add	r3, sp, #12
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	462a      	mov	r2, r5
 8005e80:	4b05      	ldr	r3, [pc, #20]	@ (8005e98 <_vfiprintf_r+0x228>)
 8005e82:	a904      	add	r1, sp, #16
 8005e84:	4630      	mov	r0, r6
 8005e86:	f000 f879 	bl	8005f7c <_printf_i>
 8005e8a:	e7e4      	b.n	8005e56 <_vfiprintf_r+0x1e6>
 8005e8c:	080065d4 	.word	0x080065d4
 8005e90:	080065de 	.word	0x080065de
 8005e94:	00000000 	.word	0x00000000
 8005e98:	08005c4b 	.word	0x08005c4b
 8005e9c:	080065da 	.word	0x080065da

08005ea0 <_printf_common>:
 8005ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea4:	4616      	mov	r6, r2
 8005ea6:	4698      	mov	r8, r3
 8005ea8:	688a      	ldr	r2, [r1, #8]
 8005eaa:	690b      	ldr	r3, [r1, #16]
 8005eac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	bfb8      	it	lt
 8005eb4:	4613      	movlt	r3, r2
 8005eb6:	6033      	str	r3, [r6, #0]
 8005eb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ebc:	4607      	mov	r7, r0
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	b10a      	cbz	r2, 8005ec6 <_printf_common+0x26>
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	6033      	str	r3, [r6, #0]
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	0699      	lsls	r1, r3, #26
 8005eca:	bf42      	ittt	mi
 8005ecc:	6833      	ldrmi	r3, [r6, #0]
 8005ece:	3302      	addmi	r3, #2
 8005ed0:	6033      	strmi	r3, [r6, #0]
 8005ed2:	6825      	ldr	r5, [r4, #0]
 8005ed4:	f015 0506 	ands.w	r5, r5, #6
 8005ed8:	d106      	bne.n	8005ee8 <_printf_common+0x48>
 8005eda:	f104 0a19 	add.w	sl, r4, #25
 8005ede:	68e3      	ldr	r3, [r4, #12]
 8005ee0:	6832      	ldr	r2, [r6, #0]
 8005ee2:	1a9b      	subs	r3, r3, r2
 8005ee4:	42ab      	cmp	r3, r5
 8005ee6:	dc26      	bgt.n	8005f36 <_printf_common+0x96>
 8005ee8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005eec:	6822      	ldr	r2, [r4, #0]
 8005eee:	3b00      	subs	r3, #0
 8005ef0:	bf18      	it	ne
 8005ef2:	2301      	movne	r3, #1
 8005ef4:	0692      	lsls	r2, r2, #26
 8005ef6:	d42b      	bmi.n	8005f50 <_printf_common+0xb0>
 8005ef8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005efc:	4641      	mov	r1, r8
 8005efe:	4638      	mov	r0, r7
 8005f00:	47c8      	blx	r9
 8005f02:	3001      	adds	r0, #1
 8005f04:	d01e      	beq.n	8005f44 <_printf_common+0xa4>
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	6922      	ldr	r2, [r4, #16]
 8005f0a:	f003 0306 	and.w	r3, r3, #6
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	bf02      	ittt	eq
 8005f12:	68e5      	ldreq	r5, [r4, #12]
 8005f14:	6833      	ldreq	r3, [r6, #0]
 8005f16:	1aed      	subeq	r5, r5, r3
 8005f18:	68a3      	ldr	r3, [r4, #8]
 8005f1a:	bf0c      	ite	eq
 8005f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f20:	2500      	movne	r5, #0
 8005f22:	4293      	cmp	r3, r2
 8005f24:	bfc4      	itt	gt
 8005f26:	1a9b      	subgt	r3, r3, r2
 8005f28:	18ed      	addgt	r5, r5, r3
 8005f2a:	2600      	movs	r6, #0
 8005f2c:	341a      	adds	r4, #26
 8005f2e:	42b5      	cmp	r5, r6
 8005f30:	d11a      	bne.n	8005f68 <_printf_common+0xc8>
 8005f32:	2000      	movs	r0, #0
 8005f34:	e008      	b.n	8005f48 <_printf_common+0xa8>
 8005f36:	2301      	movs	r3, #1
 8005f38:	4652      	mov	r2, sl
 8005f3a:	4641      	mov	r1, r8
 8005f3c:	4638      	mov	r0, r7
 8005f3e:	47c8      	blx	r9
 8005f40:	3001      	adds	r0, #1
 8005f42:	d103      	bne.n	8005f4c <_printf_common+0xac>
 8005f44:	f04f 30ff 	mov.w	r0, #4294967295
 8005f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4c:	3501      	adds	r5, #1
 8005f4e:	e7c6      	b.n	8005ede <_printf_common+0x3e>
 8005f50:	18e1      	adds	r1, r4, r3
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	2030      	movs	r0, #48	@ 0x30
 8005f56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f5a:	4422      	add	r2, r4
 8005f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f64:	3302      	adds	r3, #2
 8005f66:	e7c7      	b.n	8005ef8 <_printf_common+0x58>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	4622      	mov	r2, r4
 8005f6c:	4641      	mov	r1, r8
 8005f6e:	4638      	mov	r0, r7
 8005f70:	47c8      	blx	r9
 8005f72:	3001      	adds	r0, #1
 8005f74:	d0e6      	beq.n	8005f44 <_printf_common+0xa4>
 8005f76:	3601      	adds	r6, #1
 8005f78:	e7d9      	b.n	8005f2e <_printf_common+0x8e>
	...

08005f7c <_printf_i>:
 8005f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f80:	7e0f      	ldrb	r7, [r1, #24]
 8005f82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f84:	2f78      	cmp	r7, #120	@ 0x78
 8005f86:	4691      	mov	r9, r2
 8005f88:	4680      	mov	r8, r0
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	469a      	mov	sl, r3
 8005f8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f92:	d807      	bhi.n	8005fa4 <_printf_i+0x28>
 8005f94:	2f62      	cmp	r7, #98	@ 0x62
 8005f96:	d80a      	bhi.n	8005fae <_printf_i+0x32>
 8005f98:	2f00      	cmp	r7, #0
 8005f9a:	f000 80d1 	beq.w	8006140 <_printf_i+0x1c4>
 8005f9e:	2f58      	cmp	r7, #88	@ 0x58
 8005fa0:	f000 80b8 	beq.w	8006114 <_printf_i+0x198>
 8005fa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fac:	e03a      	b.n	8006024 <_printf_i+0xa8>
 8005fae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fb2:	2b15      	cmp	r3, #21
 8005fb4:	d8f6      	bhi.n	8005fa4 <_printf_i+0x28>
 8005fb6:	a101      	add	r1, pc, #4	@ (adr r1, 8005fbc <_printf_i+0x40>)
 8005fb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fbc:	08006015 	.word	0x08006015
 8005fc0:	08006029 	.word	0x08006029
 8005fc4:	08005fa5 	.word	0x08005fa5
 8005fc8:	08005fa5 	.word	0x08005fa5
 8005fcc:	08005fa5 	.word	0x08005fa5
 8005fd0:	08005fa5 	.word	0x08005fa5
 8005fd4:	08006029 	.word	0x08006029
 8005fd8:	08005fa5 	.word	0x08005fa5
 8005fdc:	08005fa5 	.word	0x08005fa5
 8005fe0:	08005fa5 	.word	0x08005fa5
 8005fe4:	08005fa5 	.word	0x08005fa5
 8005fe8:	08006127 	.word	0x08006127
 8005fec:	08006053 	.word	0x08006053
 8005ff0:	080060e1 	.word	0x080060e1
 8005ff4:	08005fa5 	.word	0x08005fa5
 8005ff8:	08005fa5 	.word	0x08005fa5
 8005ffc:	08006149 	.word	0x08006149
 8006000:	08005fa5 	.word	0x08005fa5
 8006004:	08006053 	.word	0x08006053
 8006008:	08005fa5 	.word	0x08005fa5
 800600c:	08005fa5 	.word	0x08005fa5
 8006010:	080060e9 	.word	0x080060e9
 8006014:	6833      	ldr	r3, [r6, #0]
 8006016:	1d1a      	adds	r2, r3, #4
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6032      	str	r2, [r6, #0]
 800601c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006020:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006024:	2301      	movs	r3, #1
 8006026:	e09c      	b.n	8006162 <_printf_i+0x1e6>
 8006028:	6833      	ldr	r3, [r6, #0]
 800602a:	6820      	ldr	r0, [r4, #0]
 800602c:	1d19      	adds	r1, r3, #4
 800602e:	6031      	str	r1, [r6, #0]
 8006030:	0606      	lsls	r6, r0, #24
 8006032:	d501      	bpl.n	8006038 <_printf_i+0xbc>
 8006034:	681d      	ldr	r5, [r3, #0]
 8006036:	e003      	b.n	8006040 <_printf_i+0xc4>
 8006038:	0645      	lsls	r5, r0, #25
 800603a:	d5fb      	bpl.n	8006034 <_printf_i+0xb8>
 800603c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006040:	2d00      	cmp	r5, #0
 8006042:	da03      	bge.n	800604c <_printf_i+0xd0>
 8006044:	232d      	movs	r3, #45	@ 0x2d
 8006046:	426d      	negs	r5, r5
 8006048:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800604c:	4858      	ldr	r0, [pc, #352]	@ (80061b0 <_printf_i+0x234>)
 800604e:	230a      	movs	r3, #10
 8006050:	e011      	b.n	8006076 <_printf_i+0xfa>
 8006052:	6821      	ldr	r1, [r4, #0]
 8006054:	6833      	ldr	r3, [r6, #0]
 8006056:	0608      	lsls	r0, r1, #24
 8006058:	f853 5b04 	ldr.w	r5, [r3], #4
 800605c:	d402      	bmi.n	8006064 <_printf_i+0xe8>
 800605e:	0649      	lsls	r1, r1, #25
 8006060:	bf48      	it	mi
 8006062:	b2ad      	uxthmi	r5, r5
 8006064:	2f6f      	cmp	r7, #111	@ 0x6f
 8006066:	4852      	ldr	r0, [pc, #328]	@ (80061b0 <_printf_i+0x234>)
 8006068:	6033      	str	r3, [r6, #0]
 800606a:	bf14      	ite	ne
 800606c:	230a      	movne	r3, #10
 800606e:	2308      	moveq	r3, #8
 8006070:	2100      	movs	r1, #0
 8006072:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006076:	6866      	ldr	r6, [r4, #4]
 8006078:	60a6      	str	r6, [r4, #8]
 800607a:	2e00      	cmp	r6, #0
 800607c:	db05      	blt.n	800608a <_printf_i+0x10e>
 800607e:	6821      	ldr	r1, [r4, #0]
 8006080:	432e      	orrs	r6, r5
 8006082:	f021 0104 	bic.w	r1, r1, #4
 8006086:	6021      	str	r1, [r4, #0]
 8006088:	d04b      	beq.n	8006122 <_printf_i+0x1a6>
 800608a:	4616      	mov	r6, r2
 800608c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006090:	fb03 5711 	mls	r7, r3, r1, r5
 8006094:	5dc7      	ldrb	r7, [r0, r7]
 8006096:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800609a:	462f      	mov	r7, r5
 800609c:	42bb      	cmp	r3, r7
 800609e:	460d      	mov	r5, r1
 80060a0:	d9f4      	bls.n	800608c <_printf_i+0x110>
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d10b      	bne.n	80060be <_printf_i+0x142>
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	07df      	lsls	r7, r3, #31
 80060aa:	d508      	bpl.n	80060be <_printf_i+0x142>
 80060ac:	6923      	ldr	r3, [r4, #16]
 80060ae:	6861      	ldr	r1, [r4, #4]
 80060b0:	4299      	cmp	r1, r3
 80060b2:	bfde      	ittt	le
 80060b4:	2330      	movle	r3, #48	@ 0x30
 80060b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060be:	1b92      	subs	r2, r2, r6
 80060c0:	6122      	str	r2, [r4, #16]
 80060c2:	f8cd a000 	str.w	sl, [sp]
 80060c6:	464b      	mov	r3, r9
 80060c8:	aa03      	add	r2, sp, #12
 80060ca:	4621      	mov	r1, r4
 80060cc:	4640      	mov	r0, r8
 80060ce:	f7ff fee7 	bl	8005ea0 <_printf_common>
 80060d2:	3001      	adds	r0, #1
 80060d4:	d14a      	bne.n	800616c <_printf_i+0x1f0>
 80060d6:	f04f 30ff 	mov.w	r0, #4294967295
 80060da:	b004      	add	sp, #16
 80060dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	f043 0320 	orr.w	r3, r3, #32
 80060e6:	6023      	str	r3, [r4, #0]
 80060e8:	4832      	ldr	r0, [pc, #200]	@ (80061b4 <_printf_i+0x238>)
 80060ea:	2778      	movs	r7, #120	@ 0x78
 80060ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	6831      	ldr	r1, [r6, #0]
 80060f4:	061f      	lsls	r7, r3, #24
 80060f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80060fa:	d402      	bmi.n	8006102 <_printf_i+0x186>
 80060fc:	065f      	lsls	r7, r3, #25
 80060fe:	bf48      	it	mi
 8006100:	b2ad      	uxthmi	r5, r5
 8006102:	6031      	str	r1, [r6, #0]
 8006104:	07d9      	lsls	r1, r3, #31
 8006106:	bf44      	itt	mi
 8006108:	f043 0320 	orrmi.w	r3, r3, #32
 800610c:	6023      	strmi	r3, [r4, #0]
 800610e:	b11d      	cbz	r5, 8006118 <_printf_i+0x19c>
 8006110:	2310      	movs	r3, #16
 8006112:	e7ad      	b.n	8006070 <_printf_i+0xf4>
 8006114:	4826      	ldr	r0, [pc, #152]	@ (80061b0 <_printf_i+0x234>)
 8006116:	e7e9      	b.n	80060ec <_printf_i+0x170>
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	f023 0320 	bic.w	r3, r3, #32
 800611e:	6023      	str	r3, [r4, #0]
 8006120:	e7f6      	b.n	8006110 <_printf_i+0x194>
 8006122:	4616      	mov	r6, r2
 8006124:	e7bd      	b.n	80060a2 <_printf_i+0x126>
 8006126:	6833      	ldr	r3, [r6, #0]
 8006128:	6825      	ldr	r5, [r4, #0]
 800612a:	6961      	ldr	r1, [r4, #20]
 800612c:	1d18      	adds	r0, r3, #4
 800612e:	6030      	str	r0, [r6, #0]
 8006130:	062e      	lsls	r6, r5, #24
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	d501      	bpl.n	800613a <_printf_i+0x1be>
 8006136:	6019      	str	r1, [r3, #0]
 8006138:	e002      	b.n	8006140 <_printf_i+0x1c4>
 800613a:	0668      	lsls	r0, r5, #25
 800613c:	d5fb      	bpl.n	8006136 <_printf_i+0x1ba>
 800613e:	8019      	strh	r1, [r3, #0]
 8006140:	2300      	movs	r3, #0
 8006142:	6123      	str	r3, [r4, #16]
 8006144:	4616      	mov	r6, r2
 8006146:	e7bc      	b.n	80060c2 <_printf_i+0x146>
 8006148:	6833      	ldr	r3, [r6, #0]
 800614a:	1d1a      	adds	r2, r3, #4
 800614c:	6032      	str	r2, [r6, #0]
 800614e:	681e      	ldr	r6, [r3, #0]
 8006150:	6862      	ldr	r2, [r4, #4]
 8006152:	2100      	movs	r1, #0
 8006154:	4630      	mov	r0, r6
 8006156:	f7fa f843 	bl	80001e0 <memchr>
 800615a:	b108      	cbz	r0, 8006160 <_printf_i+0x1e4>
 800615c:	1b80      	subs	r0, r0, r6
 800615e:	6060      	str	r0, [r4, #4]
 8006160:	6863      	ldr	r3, [r4, #4]
 8006162:	6123      	str	r3, [r4, #16]
 8006164:	2300      	movs	r3, #0
 8006166:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800616a:	e7aa      	b.n	80060c2 <_printf_i+0x146>
 800616c:	6923      	ldr	r3, [r4, #16]
 800616e:	4632      	mov	r2, r6
 8006170:	4649      	mov	r1, r9
 8006172:	4640      	mov	r0, r8
 8006174:	47d0      	blx	sl
 8006176:	3001      	adds	r0, #1
 8006178:	d0ad      	beq.n	80060d6 <_printf_i+0x15a>
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	079b      	lsls	r3, r3, #30
 800617e:	d413      	bmi.n	80061a8 <_printf_i+0x22c>
 8006180:	68e0      	ldr	r0, [r4, #12]
 8006182:	9b03      	ldr	r3, [sp, #12]
 8006184:	4298      	cmp	r0, r3
 8006186:	bfb8      	it	lt
 8006188:	4618      	movlt	r0, r3
 800618a:	e7a6      	b.n	80060da <_printf_i+0x15e>
 800618c:	2301      	movs	r3, #1
 800618e:	4632      	mov	r2, r6
 8006190:	4649      	mov	r1, r9
 8006192:	4640      	mov	r0, r8
 8006194:	47d0      	blx	sl
 8006196:	3001      	adds	r0, #1
 8006198:	d09d      	beq.n	80060d6 <_printf_i+0x15a>
 800619a:	3501      	adds	r5, #1
 800619c:	68e3      	ldr	r3, [r4, #12]
 800619e:	9903      	ldr	r1, [sp, #12]
 80061a0:	1a5b      	subs	r3, r3, r1
 80061a2:	42ab      	cmp	r3, r5
 80061a4:	dcf2      	bgt.n	800618c <_printf_i+0x210>
 80061a6:	e7eb      	b.n	8006180 <_printf_i+0x204>
 80061a8:	2500      	movs	r5, #0
 80061aa:	f104 0619 	add.w	r6, r4, #25
 80061ae:	e7f5      	b.n	800619c <_printf_i+0x220>
 80061b0:	080065e5 	.word	0x080065e5
 80061b4:	080065f6 	.word	0x080065f6

080061b8 <__sflush_r>:
 80061b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c0:	0716      	lsls	r6, r2, #28
 80061c2:	4605      	mov	r5, r0
 80061c4:	460c      	mov	r4, r1
 80061c6:	d454      	bmi.n	8006272 <__sflush_r+0xba>
 80061c8:	684b      	ldr	r3, [r1, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	dc02      	bgt.n	80061d4 <__sflush_r+0x1c>
 80061ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	dd48      	ble.n	8006266 <__sflush_r+0xae>
 80061d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061d6:	2e00      	cmp	r6, #0
 80061d8:	d045      	beq.n	8006266 <__sflush_r+0xae>
 80061da:	2300      	movs	r3, #0
 80061dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061e0:	682f      	ldr	r7, [r5, #0]
 80061e2:	6a21      	ldr	r1, [r4, #32]
 80061e4:	602b      	str	r3, [r5, #0]
 80061e6:	d030      	beq.n	800624a <__sflush_r+0x92>
 80061e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061ea:	89a3      	ldrh	r3, [r4, #12]
 80061ec:	0759      	lsls	r1, r3, #29
 80061ee:	d505      	bpl.n	80061fc <__sflush_r+0x44>
 80061f0:	6863      	ldr	r3, [r4, #4]
 80061f2:	1ad2      	subs	r2, r2, r3
 80061f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061f6:	b10b      	cbz	r3, 80061fc <__sflush_r+0x44>
 80061f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061fa:	1ad2      	subs	r2, r2, r3
 80061fc:	2300      	movs	r3, #0
 80061fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006200:	6a21      	ldr	r1, [r4, #32]
 8006202:	4628      	mov	r0, r5
 8006204:	47b0      	blx	r6
 8006206:	1c43      	adds	r3, r0, #1
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	d106      	bne.n	800621a <__sflush_r+0x62>
 800620c:	6829      	ldr	r1, [r5, #0]
 800620e:	291d      	cmp	r1, #29
 8006210:	d82b      	bhi.n	800626a <__sflush_r+0xb2>
 8006212:	4a2a      	ldr	r2, [pc, #168]	@ (80062bc <__sflush_r+0x104>)
 8006214:	40ca      	lsrs	r2, r1
 8006216:	07d6      	lsls	r6, r2, #31
 8006218:	d527      	bpl.n	800626a <__sflush_r+0xb2>
 800621a:	2200      	movs	r2, #0
 800621c:	6062      	str	r2, [r4, #4]
 800621e:	04d9      	lsls	r1, r3, #19
 8006220:	6922      	ldr	r2, [r4, #16]
 8006222:	6022      	str	r2, [r4, #0]
 8006224:	d504      	bpl.n	8006230 <__sflush_r+0x78>
 8006226:	1c42      	adds	r2, r0, #1
 8006228:	d101      	bne.n	800622e <__sflush_r+0x76>
 800622a:	682b      	ldr	r3, [r5, #0]
 800622c:	b903      	cbnz	r3, 8006230 <__sflush_r+0x78>
 800622e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006232:	602f      	str	r7, [r5, #0]
 8006234:	b1b9      	cbz	r1, 8006266 <__sflush_r+0xae>
 8006236:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800623a:	4299      	cmp	r1, r3
 800623c:	d002      	beq.n	8006244 <__sflush_r+0x8c>
 800623e:	4628      	mov	r0, r5
 8006240:	f7ff fca2 	bl	8005b88 <_free_r>
 8006244:	2300      	movs	r3, #0
 8006246:	6363      	str	r3, [r4, #52]	@ 0x34
 8006248:	e00d      	b.n	8006266 <__sflush_r+0xae>
 800624a:	2301      	movs	r3, #1
 800624c:	4628      	mov	r0, r5
 800624e:	47b0      	blx	r6
 8006250:	4602      	mov	r2, r0
 8006252:	1c50      	adds	r0, r2, #1
 8006254:	d1c9      	bne.n	80061ea <__sflush_r+0x32>
 8006256:	682b      	ldr	r3, [r5, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0c6      	beq.n	80061ea <__sflush_r+0x32>
 800625c:	2b1d      	cmp	r3, #29
 800625e:	d001      	beq.n	8006264 <__sflush_r+0xac>
 8006260:	2b16      	cmp	r3, #22
 8006262:	d11e      	bne.n	80062a2 <__sflush_r+0xea>
 8006264:	602f      	str	r7, [r5, #0]
 8006266:	2000      	movs	r0, #0
 8006268:	e022      	b.n	80062b0 <__sflush_r+0xf8>
 800626a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800626e:	b21b      	sxth	r3, r3
 8006270:	e01b      	b.n	80062aa <__sflush_r+0xf2>
 8006272:	690f      	ldr	r7, [r1, #16]
 8006274:	2f00      	cmp	r7, #0
 8006276:	d0f6      	beq.n	8006266 <__sflush_r+0xae>
 8006278:	0793      	lsls	r3, r2, #30
 800627a:	680e      	ldr	r6, [r1, #0]
 800627c:	bf08      	it	eq
 800627e:	694b      	ldreq	r3, [r1, #20]
 8006280:	600f      	str	r7, [r1, #0]
 8006282:	bf18      	it	ne
 8006284:	2300      	movne	r3, #0
 8006286:	eba6 0807 	sub.w	r8, r6, r7
 800628a:	608b      	str	r3, [r1, #8]
 800628c:	f1b8 0f00 	cmp.w	r8, #0
 8006290:	dde9      	ble.n	8006266 <__sflush_r+0xae>
 8006292:	6a21      	ldr	r1, [r4, #32]
 8006294:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006296:	4643      	mov	r3, r8
 8006298:	463a      	mov	r2, r7
 800629a:	4628      	mov	r0, r5
 800629c:	47b0      	blx	r6
 800629e:	2800      	cmp	r0, #0
 80062a0:	dc08      	bgt.n	80062b4 <__sflush_r+0xfc>
 80062a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062aa:	81a3      	strh	r3, [r4, #12]
 80062ac:	f04f 30ff 	mov.w	r0, #4294967295
 80062b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b4:	4407      	add	r7, r0
 80062b6:	eba8 0800 	sub.w	r8, r8, r0
 80062ba:	e7e7      	b.n	800628c <__sflush_r+0xd4>
 80062bc:	20400001 	.word	0x20400001

080062c0 <_fflush_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	690b      	ldr	r3, [r1, #16]
 80062c4:	4605      	mov	r5, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	b913      	cbnz	r3, 80062d0 <_fflush_r+0x10>
 80062ca:	2500      	movs	r5, #0
 80062cc:	4628      	mov	r0, r5
 80062ce:	bd38      	pop	{r3, r4, r5, pc}
 80062d0:	b118      	cbz	r0, 80062da <_fflush_r+0x1a>
 80062d2:	6a03      	ldr	r3, [r0, #32]
 80062d4:	b90b      	cbnz	r3, 80062da <_fflush_r+0x1a>
 80062d6:	f7ff fb31 	bl	800593c <__sinit>
 80062da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d0f3      	beq.n	80062ca <_fflush_r+0xa>
 80062e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062e4:	07d0      	lsls	r0, r2, #31
 80062e6:	d404      	bmi.n	80062f2 <_fflush_r+0x32>
 80062e8:	0599      	lsls	r1, r3, #22
 80062ea:	d402      	bmi.n	80062f2 <_fflush_r+0x32>
 80062ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062ee:	f7ff fc3a 	bl	8005b66 <__retarget_lock_acquire_recursive>
 80062f2:	4628      	mov	r0, r5
 80062f4:	4621      	mov	r1, r4
 80062f6:	f7ff ff5f 	bl	80061b8 <__sflush_r>
 80062fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062fc:	07da      	lsls	r2, r3, #31
 80062fe:	4605      	mov	r5, r0
 8006300:	d4e4      	bmi.n	80062cc <_fflush_r+0xc>
 8006302:	89a3      	ldrh	r3, [r4, #12]
 8006304:	059b      	lsls	r3, r3, #22
 8006306:	d4e1      	bmi.n	80062cc <_fflush_r+0xc>
 8006308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800630a:	f7ff fc2d 	bl	8005b68 <__retarget_lock_release_recursive>
 800630e:	e7dd      	b.n	80062cc <_fflush_r+0xc>

08006310 <__swbuf_r>:
 8006310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006312:	460e      	mov	r6, r1
 8006314:	4614      	mov	r4, r2
 8006316:	4605      	mov	r5, r0
 8006318:	b118      	cbz	r0, 8006322 <__swbuf_r+0x12>
 800631a:	6a03      	ldr	r3, [r0, #32]
 800631c:	b90b      	cbnz	r3, 8006322 <__swbuf_r+0x12>
 800631e:	f7ff fb0d 	bl	800593c <__sinit>
 8006322:	69a3      	ldr	r3, [r4, #24]
 8006324:	60a3      	str	r3, [r4, #8]
 8006326:	89a3      	ldrh	r3, [r4, #12]
 8006328:	071a      	lsls	r2, r3, #28
 800632a:	d501      	bpl.n	8006330 <__swbuf_r+0x20>
 800632c:	6923      	ldr	r3, [r4, #16]
 800632e:	b943      	cbnz	r3, 8006342 <__swbuf_r+0x32>
 8006330:	4621      	mov	r1, r4
 8006332:	4628      	mov	r0, r5
 8006334:	f000 f82a 	bl	800638c <__swsetup_r>
 8006338:	b118      	cbz	r0, 8006342 <__swbuf_r+0x32>
 800633a:	f04f 37ff 	mov.w	r7, #4294967295
 800633e:	4638      	mov	r0, r7
 8006340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	6922      	ldr	r2, [r4, #16]
 8006346:	1a98      	subs	r0, r3, r2
 8006348:	6963      	ldr	r3, [r4, #20]
 800634a:	b2f6      	uxtb	r6, r6
 800634c:	4283      	cmp	r3, r0
 800634e:	4637      	mov	r7, r6
 8006350:	dc05      	bgt.n	800635e <__swbuf_r+0x4e>
 8006352:	4621      	mov	r1, r4
 8006354:	4628      	mov	r0, r5
 8006356:	f7ff ffb3 	bl	80062c0 <_fflush_r>
 800635a:	2800      	cmp	r0, #0
 800635c:	d1ed      	bne.n	800633a <__swbuf_r+0x2a>
 800635e:	68a3      	ldr	r3, [r4, #8]
 8006360:	3b01      	subs	r3, #1
 8006362:	60a3      	str	r3, [r4, #8]
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	1c5a      	adds	r2, r3, #1
 8006368:	6022      	str	r2, [r4, #0]
 800636a:	701e      	strb	r6, [r3, #0]
 800636c:	6962      	ldr	r2, [r4, #20]
 800636e:	1c43      	adds	r3, r0, #1
 8006370:	429a      	cmp	r2, r3
 8006372:	d004      	beq.n	800637e <__swbuf_r+0x6e>
 8006374:	89a3      	ldrh	r3, [r4, #12]
 8006376:	07db      	lsls	r3, r3, #31
 8006378:	d5e1      	bpl.n	800633e <__swbuf_r+0x2e>
 800637a:	2e0a      	cmp	r6, #10
 800637c:	d1df      	bne.n	800633e <__swbuf_r+0x2e>
 800637e:	4621      	mov	r1, r4
 8006380:	4628      	mov	r0, r5
 8006382:	f7ff ff9d 	bl	80062c0 <_fflush_r>
 8006386:	2800      	cmp	r0, #0
 8006388:	d0d9      	beq.n	800633e <__swbuf_r+0x2e>
 800638a:	e7d6      	b.n	800633a <__swbuf_r+0x2a>

0800638c <__swsetup_r>:
 800638c:	b538      	push	{r3, r4, r5, lr}
 800638e:	4b29      	ldr	r3, [pc, #164]	@ (8006434 <__swsetup_r+0xa8>)
 8006390:	4605      	mov	r5, r0
 8006392:	6818      	ldr	r0, [r3, #0]
 8006394:	460c      	mov	r4, r1
 8006396:	b118      	cbz	r0, 80063a0 <__swsetup_r+0x14>
 8006398:	6a03      	ldr	r3, [r0, #32]
 800639a:	b90b      	cbnz	r3, 80063a0 <__swsetup_r+0x14>
 800639c:	f7ff face 	bl	800593c <__sinit>
 80063a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063a4:	0719      	lsls	r1, r3, #28
 80063a6:	d422      	bmi.n	80063ee <__swsetup_r+0x62>
 80063a8:	06da      	lsls	r2, r3, #27
 80063aa:	d407      	bmi.n	80063bc <__swsetup_r+0x30>
 80063ac:	2209      	movs	r2, #9
 80063ae:	602a      	str	r2, [r5, #0]
 80063b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063b4:	81a3      	strh	r3, [r4, #12]
 80063b6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ba:	e033      	b.n	8006424 <__swsetup_r+0x98>
 80063bc:	0758      	lsls	r0, r3, #29
 80063be:	d512      	bpl.n	80063e6 <__swsetup_r+0x5a>
 80063c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063c2:	b141      	cbz	r1, 80063d6 <__swsetup_r+0x4a>
 80063c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063c8:	4299      	cmp	r1, r3
 80063ca:	d002      	beq.n	80063d2 <__swsetup_r+0x46>
 80063cc:	4628      	mov	r0, r5
 80063ce:	f7ff fbdb 	bl	8005b88 <_free_r>
 80063d2:	2300      	movs	r3, #0
 80063d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80063dc:	81a3      	strh	r3, [r4, #12]
 80063de:	2300      	movs	r3, #0
 80063e0:	6063      	str	r3, [r4, #4]
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	89a3      	ldrh	r3, [r4, #12]
 80063e8:	f043 0308 	orr.w	r3, r3, #8
 80063ec:	81a3      	strh	r3, [r4, #12]
 80063ee:	6923      	ldr	r3, [r4, #16]
 80063f0:	b94b      	cbnz	r3, 8006406 <__swsetup_r+0x7a>
 80063f2:	89a3      	ldrh	r3, [r4, #12]
 80063f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80063f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063fc:	d003      	beq.n	8006406 <__swsetup_r+0x7a>
 80063fe:	4621      	mov	r1, r4
 8006400:	4628      	mov	r0, r5
 8006402:	f000 f83f 	bl	8006484 <__smakebuf_r>
 8006406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800640a:	f013 0201 	ands.w	r2, r3, #1
 800640e:	d00a      	beq.n	8006426 <__swsetup_r+0x9a>
 8006410:	2200      	movs	r2, #0
 8006412:	60a2      	str	r2, [r4, #8]
 8006414:	6962      	ldr	r2, [r4, #20]
 8006416:	4252      	negs	r2, r2
 8006418:	61a2      	str	r2, [r4, #24]
 800641a:	6922      	ldr	r2, [r4, #16]
 800641c:	b942      	cbnz	r2, 8006430 <__swsetup_r+0xa4>
 800641e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006422:	d1c5      	bne.n	80063b0 <__swsetup_r+0x24>
 8006424:	bd38      	pop	{r3, r4, r5, pc}
 8006426:	0799      	lsls	r1, r3, #30
 8006428:	bf58      	it	pl
 800642a:	6962      	ldrpl	r2, [r4, #20]
 800642c:	60a2      	str	r2, [r4, #8]
 800642e:	e7f4      	b.n	800641a <__swsetup_r+0x8e>
 8006430:	2000      	movs	r0, #0
 8006432:	e7f7      	b.n	8006424 <__swsetup_r+0x98>
 8006434:	20000018 	.word	0x20000018

08006438 <__swhatbuf_r>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	460c      	mov	r4, r1
 800643c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006440:	2900      	cmp	r1, #0
 8006442:	b096      	sub	sp, #88	@ 0x58
 8006444:	4615      	mov	r5, r2
 8006446:	461e      	mov	r6, r3
 8006448:	da0d      	bge.n	8006466 <__swhatbuf_r+0x2e>
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006450:	f04f 0100 	mov.w	r1, #0
 8006454:	bf14      	ite	ne
 8006456:	2340      	movne	r3, #64	@ 0x40
 8006458:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800645c:	2000      	movs	r0, #0
 800645e:	6031      	str	r1, [r6, #0]
 8006460:	602b      	str	r3, [r5, #0]
 8006462:	b016      	add	sp, #88	@ 0x58
 8006464:	bd70      	pop	{r4, r5, r6, pc}
 8006466:	466a      	mov	r2, sp
 8006468:	f000 f848 	bl	80064fc <_fstat_r>
 800646c:	2800      	cmp	r0, #0
 800646e:	dbec      	blt.n	800644a <__swhatbuf_r+0x12>
 8006470:	9901      	ldr	r1, [sp, #4]
 8006472:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006476:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800647a:	4259      	negs	r1, r3
 800647c:	4159      	adcs	r1, r3
 800647e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006482:	e7eb      	b.n	800645c <__swhatbuf_r+0x24>

08006484 <__smakebuf_r>:
 8006484:	898b      	ldrh	r3, [r1, #12]
 8006486:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006488:	079d      	lsls	r5, r3, #30
 800648a:	4606      	mov	r6, r0
 800648c:	460c      	mov	r4, r1
 800648e:	d507      	bpl.n	80064a0 <__smakebuf_r+0x1c>
 8006490:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	6123      	str	r3, [r4, #16]
 8006498:	2301      	movs	r3, #1
 800649a:	6163      	str	r3, [r4, #20]
 800649c:	b003      	add	sp, #12
 800649e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064a0:	ab01      	add	r3, sp, #4
 80064a2:	466a      	mov	r2, sp
 80064a4:	f7ff ffc8 	bl	8006438 <__swhatbuf_r>
 80064a8:	9f00      	ldr	r7, [sp, #0]
 80064aa:	4605      	mov	r5, r0
 80064ac:	4639      	mov	r1, r7
 80064ae:	4630      	mov	r0, r6
 80064b0:	f7ff f92c 	bl	800570c <_malloc_r>
 80064b4:	b948      	cbnz	r0, 80064ca <__smakebuf_r+0x46>
 80064b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ba:	059a      	lsls	r2, r3, #22
 80064bc:	d4ee      	bmi.n	800649c <__smakebuf_r+0x18>
 80064be:	f023 0303 	bic.w	r3, r3, #3
 80064c2:	f043 0302 	orr.w	r3, r3, #2
 80064c6:	81a3      	strh	r3, [r4, #12]
 80064c8:	e7e2      	b.n	8006490 <__smakebuf_r+0xc>
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	6020      	str	r0, [r4, #0]
 80064ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d2:	81a3      	strh	r3, [r4, #12]
 80064d4:	9b01      	ldr	r3, [sp, #4]
 80064d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064da:	b15b      	cbz	r3, 80064f4 <__smakebuf_r+0x70>
 80064dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064e0:	4630      	mov	r0, r6
 80064e2:	f000 f81d 	bl	8006520 <_isatty_r>
 80064e6:	b128      	cbz	r0, 80064f4 <__smakebuf_r+0x70>
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	f023 0303 	bic.w	r3, r3, #3
 80064ee:	f043 0301 	orr.w	r3, r3, #1
 80064f2:	81a3      	strh	r3, [r4, #12]
 80064f4:	89a3      	ldrh	r3, [r4, #12]
 80064f6:	431d      	orrs	r5, r3
 80064f8:	81a5      	strh	r5, [r4, #12]
 80064fa:	e7cf      	b.n	800649c <__smakebuf_r+0x18>

080064fc <_fstat_r>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	4d07      	ldr	r5, [pc, #28]	@ (800651c <_fstat_r+0x20>)
 8006500:	2300      	movs	r3, #0
 8006502:	4604      	mov	r4, r0
 8006504:	4608      	mov	r0, r1
 8006506:	4611      	mov	r1, r2
 8006508:	602b      	str	r3, [r5, #0]
 800650a:	f7fa fdda 	bl	80010c2 <_fstat>
 800650e:	1c43      	adds	r3, r0, #1
 8006510:	d102      	bne.n	8006518 <_fstat_r+0x1c>
 8006512:	682b      	ldr	r3, [r5, #0]
 8006514:	b103      	cbz	r3, 8006518 <_fstat_r+0x1c>
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	bd38      	pop	{r3, r4, r5, pc}
 800651a:	bf00      	nop
 800651c:	2000093c 	.word	0x2000093c

08006520 <_isatty_r>:
 8006520:	b538      	push	{r3, r4, r5, lr}
 8006522:	4d06      	ldr	r5, [pc, #24]	@ (800653c <_isatty_r+0x1c>)
 8006524:	2300      	movs	r3, #0
 8006526:	4604      	mov	r4, r0
 8006528:	4608      	mov	r0, r1
 800652a:	602b      	str	r3, [r5, #0]
 800652c:	f7fa fdd9 	bl	80010e2 <_isatty>
 8006530:	1c43      	adds	r3, r0, #1
 8006532:	d102      	bne.n	800653a <_isatty_r+0x1a>
 8006534:	682b      	ldr	r3, [r5, #0]
 8006536:	b103      	cbz	r3, 800653a <_isatty_r+0x1a>
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	bd38      	pop	{r3, r4, r5, pc}
 800653c:	2000093c 	.word	0x2000093c

08006540 <_init>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	bf00      	nop
 8006544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006546:	bc08      	pop	{r3}
 8006548:	469e      	mov	lr, r3
 800654a:	4770      	bx	lr

0800654c <_fini>:
 800654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654e:	bf00      	nop
 8006550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006552:	bc08      	pop	{r3}
 8006554:	469e      	mov	lr, r3
 8006556:	4770      	bx	lr
