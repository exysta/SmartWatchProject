
SmartWatchProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c73c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00030024  0800c8d0  0800c8d0  0000d8d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803c8f4  0803c8f4  0003e270  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0803c8f4  0803c8f4  0003d8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803c8fc  0803c8fc  0003e270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803c8fc  0803c8fc  0003d8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803c900  0803c900  0003d900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  0803c904  0003e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa4  20000270  0803cb74  0003e270  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d14  0803cb74  0003ed14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003e270  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197db  00000000  00000000  0003e2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d77  00000000  00000000  00057a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  0005b7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edd  00000000  00000000  0005cb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b83  00000000  00000000  0005da4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a209  00000000  00000000  000875d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1beb  00000000  00000000  000a17d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001933c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000641c  00000000  00000000  00193408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  00199824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c8b4 	.word	0x0800c8b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	0800c8b4 	.word	0x0800c8b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001026:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <MX_DMA_Init+0x90>)
 8001028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800102a:	4a21      	ldr	r2, [pc, #132]	@ (80010b0 <MX_DMA_Init+0x90>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6493      	str	r3, [r2, #72]	@ 0x48
 8001032:	4b1f      	ldr	r3, [pc, #124]	@ (80010b0 <MX_DMA_Init+0x90>)
 8001034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800103e:	4b1c      	ldr	r3, [pc, #112]	@ (80010b0 <MX_DMA_Init+0x90>)
 8001040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001042:	4a1b      	ldr	r2, [pc, #108]	@ (80010b0 <MX_DMA_Init+0x90>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	6493      	str	r3, [r2, #72]	@ 0x48
 800104a:	4b19      	ldr	r3, [pc, #100]	@ (80010b0 <MX_DMA_Init+0x90>)
 800104c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	200c      	movs	r0, #12
 800105c:	f001 fa1d 	bl	800249a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001060:	200c      	movs	r0, #12
 8001062:	f001 fa36 	bl	80024d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	200d      	movs	r0, #13
 800106c:	f001 fa15 	bl	800249a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001070:	200d      	movs	r0, #13
 8001072:	f001 fa2e 	bl	80024d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	200e      	movs	r0, #14
 800107c:	f001 fa0d 	bl	800249a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001080:	200e      	movs	r0, #14
 8001082:	f001 fa26 	bl	80024d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	200f      	movs	r0, #15
 800108c:	f001 fa05 	bl	800249a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001090:	200f      	movs	r0, #15
 8001092:	f001 fa1e 	bl	80024d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	2045      	movs	r0, #69	@ 0x45
 800109c:	f001 f9fd 	bl	800249a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80010a0:	2045      	movs	r0, #69	@ 0x45
 80010a2:	f001 fa16 	bl	80024d2 <HAL_NVIC_EnableIRQ>

}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000

080010b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001288 <MX_GPIO_Init+0x1d4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	4a6e      	ldr	r2, [pc, #440]	@ (8001288 <MX_GPIO_Init+0x1d4>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d6:	4b6c      	ldr	r3, [pc, #432]	@ (8001288 <MX_GPIO_Init+0x1d4>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b69      	ldr	r3, [pc, #420]	@ (8001288 <MX_GPIO_Init+0x1d4>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a68      	ldr	r2, [pc, #416]	@ (8001288 <MX_GPIO_Init+0x1d4>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b66      	ldr	r3, [pc, #408]	@ (8001288 <MX_GPIO_Init+0x1d4>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b63      	ldr	r3, [pc, #396]	@ (8001288 <MX_GPIO_Init+0x1d4>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a62      	ldr	r2, [pc, #392]	@ (8001288 <MX_GPIO_Init+0x1d4>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b60      	ldr	r3, [pc, #384]	@ (8001288 <MX_GPIO_Init+0x1d4>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_MAX30102_Pin|ST7789_DC_Pin|ST7789_CS_Pin|ST7789_BLK_Pin
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 61b9 	mov.w	r1, #1480	@ 0x5c8
 8001118:	485c      	ldr	r0, [pc, #368]	@ (800128c <MX_GPIO_Init+0x1d8>)
 800111a:	f001 fe21 	bl	8002d60 <HAL_GPIO_WritePin>
                          |BLE_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_SWD_Pin|LED_ERROR_Pin|LED_STATUS_Pin|LED_BLE_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f640 0164 	movw	r1, #2148	@ 0x864
 8001124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001128:	f001 fe1a 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GPS_Pin|LED_LCD_Pin|LED_BMP280_Pin|LED_MPUS6500_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f240 1107 	movw	r1, #263	@ 0x107
 8001132:	4857      	ldr	r0, [pc, #348]	@ (8001290 <MX_GPIO_Init+0x1dc>)
 8001134:	f001 fe14 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800113e:	4854      	ldr	r0, [pc, #336]	@ (8001290 <MX_GPIO_Init+0x1dc>)
 8001140:	f001 fe0e 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MAX30102_INT_Pin */
  GPIO_InitStruct.Pin = MAX30102_INT_Pin;
 8001144:	2304      	movs	r3, #4
 8001146:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001148:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800114c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114e:	2301      	movs	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MAX30102_INT_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	4619      	mov	r1, r3
 8001158:	484c      	ldr	r0, [pc, #304]	@ (800128c <MX_GPIO_Init+0x1d8>)
 800115a:	f001 fc57 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_MAX30102_Pin ST7789_CS_Pin ST7789_BLK_Pin BLE_EN_Pin */
  GPIO_InitStruct.Pin = LED_MAX30102_Pin|ST7789_CS_Pin|ST7789_BLK_Pin|BLE_EN_Pin;
 800115e:	f44f 63b1 	mov.w	r3, #1416	@ 0x588
 8001162:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	2301      	movs	r3, #1
 8001166:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	4619      	mov	r1, r3
 8001176:	4845      	ldr	r0, [pc, #276]	@ (800128c <MX_GPIO_Init+0x1d8>)
 8001178:	f001 fc48 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SWD_Pin LED_ERROR_Pin LED_STATUS_Pin LED_BLE_Pin */
  GPIO_InitStruct.Pin = LED_SWD_Pin|LED_ERROR_Pin|LED_STATUS_Pin|LED_BLE_Pin;
 800117c:	f640 0364 	movw	r3, #2148	@ 0x864
 8001180:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	4619      	mov	r1, r3
 8001194:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001198:	f001 fc38 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GPS_Pin LED_LCD_Pin LED_BMP280_Pin ST7789_RST_Pin
                           LED_MPUS6500_Pin */
  GPIO_InitStruct.Pin = LED_GPS_Pin|LED_LCD_Pin|LED_BMP280_Pin|ST7789_RST_Pin
 800119c:	f241 1307 	movw	r3, #4359	@ 0x1107
 80011a0:	60fb      	str	r3, [r7, #12]
                          |LED_MPUS6500_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	4619      	mov	r1, r3
 80011b4:	4836      	ldr	r0, [pc, #216]	@ (8001290 <MX_GPIO_Init+0x1dc>)
 80011b6:	f001 fc29 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c0:	2303      	movs	r3, #3
 80011c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	4830      	ldr	r0, [pc, #192]	@ (8001290 <MX_GPIO_Init+0x1dc>)
 80011d0:	f001 fc1c 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin;
 80011d4:	2340      	movs	r3, #64	@ 0x40
 80011d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ST7789_DC_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4619      	mov	r1, r3
 80011ea:	4828      	ldr	r0, [pc, #160]	@ (800128c <MX_GPIO_Init+0x1d8>)
 80011ec:	f001 fc0e 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_NEXT_Pin */
  GPIO_InitStruct.Pin = BUTTON_NEXT_Pin;
 80011f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_NEXT_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4619      	mov	r1, r3
 8001206:	4821      	ldr	r0, [pc, #132]	@ (800128c <MX_GPIO_Init+0x1d8>)
 8001208:	f001 fc00 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_BACK_Pin */
  GPIO_InitStruct.Pin = BUTTON_BACK_Pin;
 800120c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001212:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_BACK_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	4619      	mov	r1, r3
 8001222:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001226:	f001 fbf1 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STATE_Pin */
  GPIO_InitStruct.Pin = BLE_STATE_Pin;
 800122a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800122e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLE_STATE_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	4619      	mov	r1, r3
 800123e:	4813      	ldr	r0, [pc, #76]	@ (800128c <MX_GPIO_Init+0x1d8>)
 8001240:	f001 fbe4 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6500_INT_Pin */
  GPIO_InitStruct.Pin = MPU6500_INT_Pin;
 8001244:	2320      	movs	r3, #32
 8001246:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001248:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800124c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MPU6500_INT_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 030c 	add.w	r3, r7, #12
 8001256:	4619      	mov	r1, r3
 8001258:	480d      	ldr	r0, [pc, #52]	@ (8001290 <MX_GPIO_Init+0x1dc>)
 800125a:	f001 fbd7 	bl	8002a0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2008      	movs	r0, #8
 8001264:	f001 f919 	bl	800249a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001268:	2008      	movs	r0, #8
 800126a:	f001 f932 	bl	80024d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	2017      	movs	r0, #23
 8001274:	f001 f911 	bl	800249a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001278:	2017      	movs	r0, #23
 800127a:	f001 f92a 	bl	80024d2 <HAL_NVIC_EnableIRQ>

}
 800127e:	bf00      	nop
 8001280:	3720      	adds	r7, #32
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	48000800 	.word	0x48000800
 8001290:	48000400 	.word	0x48000400

08001294 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001298:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <MX_I2C1_Init+0x74>)
 800129a:	4a1c      	ldr	r2, [pc, #112]	@ (800130c <MX_I2C1_Init+0x78>)
 800129c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800129e:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <MX_I2C1_Init+0x74>)
 80012a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001310 <MX_I2C1_Init+0x7c>)
 80012a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012a4:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <MX_I2C1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012aa:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <MX_I2C1_Init+0x74>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b0:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <MX_I2C1_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012b6:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <MX_I2C1_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <MX_I2C1_Init+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c2:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <MX_I2C1_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <MX_I2C1_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ce:	480e      	ldr	r0, [pc, #56]	@ (8001308 <MX_I2C1_Init+0x74>)
 80012d0:	f001 fd76 	bl	8002dc0 <HAL_I2C_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012da:	f000 faa9 	bl	8001830 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012de:	2100      	movs	r1, #0
 80012e0:	4809      	ldr	r0, [pc, #36]	@ (8001308 <MX_I2C1_Init+0x74>)
 80012e2:	f001 fe08 	bl	8002ef6 <HAL_I2CEx_ConfigAnalogFilter>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012ec:	f000 faa0 	bl	8001830 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012f0:	2100      	movs	r1, #0
 80012f2:	4805      	ldr	r0, [pc, #20]	@ (8001308 <MX_I2C1_Init+0x74>)
 80012f4:	f001 fe4a 	bl	8002f8c <HAL_I2CEx_ConfigDigitalFilter>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012fe:	f000 fa97 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000028c 	.word	0x2000028c
 800130c:	40005400 	.word	0x40005400
 8001310:	10d19ce4 	.word	0x10d19ce4

08001314 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001318:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <MX_I2C2_Init+0x74>)
 800131a:	4a1c      	ldr	r2, [pc, #112]	@ (800138c <MX_I2C2_Init+0x78>)
 800131c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800131e:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <MX_I2C2_Init+0x74>)
 8001320:	4a1b      	ldr	r2, [pc, #108]	@ (8001390 <MX_I2C2_Init+0x7c>)
 8001322:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001324:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <MX_I2C2_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132a:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <MX_I2C2_Init+0x74>)
 800132c:	2201      	movs	r2, #1
 800132e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001330:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <MX_I2C2_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <MX_I2C2_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800133c:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <MX_I2C2_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001342:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <MX_I2C2_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001348:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <MX_I2C2_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800134e:	480e      	ldr	r0, [pc, #56]	@ (8001388 <MX_I2C2_Init+0x74>)
 8001350:	f001 fd36 	bl	8002dc0 <HAL_I2C_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800135a:	f000 fa69 	bl	8001830 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800135e:	2100      	movs	r1, #0
 8001360:	4809      	ldr	r0, [pc, #36]	@ (8001388 <MX_I2C2_Init+0x74>)
 8001362:	f001 fdc8 	bl	8002ef6 <HAL_I2CEx_ConfigAnalogFilter>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800136c:	f000 fa60 	bl	8001830 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001370:	2100      	movs	r1, #0
 8001372:	4805      	ldr	r0, [pc, #20]	@ (8001388 <MX_I2C2_Init+0x74>)
 8001374:	f001 fe0a 	bl	8002f8c <HAL_I2CEx_ConfigDigitalFilter>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800137e:	f000 fa57 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200002e0 	.word	0x200002e0
 800138c:	40005800 	.word	0x40005800
 8001390:	10d19ce4 	.word	0x10d19ce4

08001394 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001398:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <MX_I2C3_Init+0x74>)
 800139a:	4a1c      	ldr	r2, [pc, #112]	@ (800140c <MX_I2C3_Init+0x78>)
 800139c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 800139e:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001410 <MX_I2C3_Init+0x7c>)
 80013a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80013a4:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013aa:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b0:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80013b6:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80013ce:	480e      	ldr	r0, [pc, #56]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013d0:	f001 fcf6 	bl	8002dc0 <HAL_I2C_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80013da:	f000 fa29 	bl	8001830 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013de:	2100      	movs	r1, #0
 80013e0:	4809      	ldr	r0, [pc, #36]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013e2:	f001 fd88 	bl	8002ef6 <HAL_I2CEx_ConfigAnalogFilter>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80013ec:	f000 fa20 	bl	8001830 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80013f0:	2100      	movs	r1, #0
 80013f2:	4805      	ldr	r0, [pc, #20]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013f4:	f001 fdca 	bl	8002f8c <HAL_I2CEx_ConfigDigitalFilter>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80013fe:	f000 fa17 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000334 	.word	0x20000334
 800140c:	40005c00 	.word	0x40005c00
 8001410:	10d19ce4 	.word	0x10d19ce4

08001414 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b0b0      	sub	sp, #192	@ 0xc0
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800142c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001430:	2288      	movs	r2, #136	@ 0x88
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f007 ff16 	bl	8009266 <memset>
  if(i2cHandle->Instance==I2C1)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a63      	ldr	r2, [pc, #396]	@ (80015cc <HAL_I2C_MspInit+0x1b8>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d13b      	bne.n	80014bc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001444:	2340      	movs	r3, #64	@ 0x40
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001448:	2300      	movs	r3, #0
 800144a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800144c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001450:	4618      	mov	r0, r3
 8001452:	f002 fc4b 	bl	8003cec <HAL_RCCEx_PeriphCLKConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800145c:	f000 f9e8 	bl	8001830 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b5b      	ldr	r3, [pc, #364]	@ (80015d0 <HAL_I2C_MspInit+0x1bc>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001464:	4a5a      	ldr	r2, [pc, #360]	@ (80015d0 <HAL_I2C_MspInit+0x1bc>)
 8001466:	f043 0302 	orr.w	r3, r3, #2
 800146a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146c:	4b58      	ldr	r3, [pc, #352]	@ (80015d0 <HAL_I2C_MspInit+0x1bc>)
 800146e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	623b      	str	r3, [r7, #32]
 8001476:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU6500_SCL_Pin|MPU6500_SDA_Pin;
 8001478:	23c0      	movs	r3, #192	@ 0xc0
 800147a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147e:	2312      	movs	r3, #18
 8001480:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001490:	2304      	movs	r3, #4
 8001492:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001496:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800149a:	4619      	mov	r1, r3
 800149c:	484d      	ldr	r0, [pc, #308]	@ (80015d4 <HAL_I2C_MspInit+0x1c0>)
 800149e:	f001 fab5 	bl	8002a0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a2:	4b4b      	ldr	r3, [pc, #300]	@ (80015d0 <HAL_I2C_MspInit+0x1bc>)
 80014a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a6:	4a4a      	ldr	r2, [pc, #296]	@ (80015d0 <HAL_I2C_MspInit+0x1bc>)
 80014a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ae:	4b48      	ldr	r3, [pc, #288]	@ (80015d0 <HAL_I2C_MspInit+0x1bc>)
 80014b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80014ba:	e082      	b.n	80015c2 <HAL_I2C_MspInit+0x1ae>
  else if(i2cHandle->Instance==I2C2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a45      	ldr	r2, [pc, #276]	@ (80015d8 <HAL_I2C_MspInit+0x1c4>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d13c      	bne.n	8001540 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014c6:	2380      	movs	r3, #128	@ 0x80
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 fc0a 	bl	8003cec <HAL_RCCEx_PeriphCLKConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 80014de:	f000 f9a7 	bl	8001830 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	4b3b      	ldr	r3, [pc, #236]	@ (80015d0 <HAL_I2C_MspInit+0x1bc>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e6:	4a3a      	ldr	r2, [pc, #232]	@ (80015d0 <HAL_I2C_MspInit+0x1bc>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ee:	4b38      	ldr	r3, [pc, #224]	@ (80015d0 <HAL_I2C_MspInit+0x1bc>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	61bb      	str	r3, [r7, #24]
 80014f8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = BMP280_SCL_Pin|BMP280_SDA_Pin;
 80014fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001502:	2312      	movs	r3, #18
 8001504:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001514:	2304      	movs	r3, #4
 8001516:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800151e:	4619      	mov	r1, r3
 8001520:	482c      	ldr	r0, [pc, #176]	@ (80015d4 <HAL_I2C_MspInit+0x1c0>)
 8001522:	f001 fa73 	bl	8002a0c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001526:	4b2a      	ldr	r3, [pc, #168]	@ (80015d0 <HAL_I2C_MspInit+0x1bc>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152a:	4a29      	ldr	r2, [pc, #164]	@ (80015d0 <HAL_I2C_MspInit+0x1bc>)
 800152c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001530:	6593      	str	r3, [r2, #88]	@ 0x58
 8001532:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <HAL_I2C_MspInit+0x1bc>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
}
 800153e:	e040      	b.n	80015c2 <HAL_I2C_MspInit+0x1ae>
  else if(i2cHandle->Instance==I2C3)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a25      	ldr	r2, [pc, #148]	@ (80015dc <HAL_I2C_MspInit+0x1c8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d13b      	bne.n	80015c2 <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800154a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001550:	2300      	movs	r3, #0
 8001552:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001554:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001558:	4618      	mov	r0, r3
 800155a:	f002 fbc7 	bl	8003cec <HAL_RCCEx_PeriphCLKConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8001564:	f000 f964 	bl	8001830 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001568:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <HAL_I2C_MspInit+0x1bc>)
 800156a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156c:	4a18      	ldr	r2, [pc, #96]	@ (80015d0 <HAL_I2C_MspInit+0x1bc>)
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001574:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <HAL_I2C_MspInit+0x1bc>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MAX30102_SCL_Pin|MAX30102_SDA_Pin;
 8001580:	2303      	movs	r3, #3
 8001582:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001586:	2312      	movs	r3, #18
 8001588:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001598:	2304      	movs	r3, #4
 800159a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80015a2:	4619      	mov	r1, r3
 80015a4:	480e      	ldr	r0, [pc, #56]	@ (80015e0 <HAL_I2C_MspInit+0x1cc>)
 80015a6:	f001 fa31 	bl	8002a0c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <HAL_I2C_MspInit+0x1bc>)
 80015ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ae:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <HAL_I2C_MspInit+0x1bc>)
 80015b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_I2C_MspInit+0x1bc>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
}
 80015c2:	bf00      	nop
 80015c4:	37c0      	adds	r7, #192	@ 0xc0
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40005400 	.word	0x40005400
 80015d0:	40021000 	.word	0x40021000
 80015d4:	48000400 	.word	0x48000400
 80015d8:	40005800 	.word	0x40005800
 80015dc:	40005c00 	.word	0x40005c00
 80015e0:	48000800 	.word	0x48000800

080015e4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&STLINK_UART, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80015ec:	1d39      	adds	r1, r7, #4
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	2201      	movs	r2, #1
 80015f4:	4803      	ldr	r0, [pc, #12]	@ (8001604 <__io_putchar+0x20>)
 80015f6:	f003 fd21 	bl	800503c <HAL_UART_Transmit>
	return chr;
 80015fa:	687b      	ldr	r3, [r7, #4]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000648 	.word	0x20000648

08001608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800160c:	f000 fdd1 	bl	80021b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001610:	f000 f830 	bl	8001674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001614:	f7ff fd4e 	bl	80010b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001618:	f7ff fd02 	bl	8001020 <MX_DMA_Init>
  MX_I2C1_Init();
 800161c:	f7ff fe3a 	bl	8001294 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001620:	f7ff fe78 	bl	8001314 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001624:	f7ff feb6 	bl	8001394 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 8001628:	f000 fbb6 	bl	8001d98 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 800162c:	f000 f906 	bl	800183c <MX_SPI2_Init>
  MX_UART4_Init();
 8001630:	f000 fb4e 	bl	8001cd0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001634:	f000 fb7c 	bl	8001d30 <MX_USART1_UART_Init>
    printf("mpu6500: WHO_AM_I = 0x%02X\r\n", id);

#endif

#ifdef SCREEN_TEST
	SmartWatchScreen_State = SCREEN_CLOCK; // first screen
 8001638:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <main+0x64>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
	Display_Init(SmartWatchScreen_State);
 800163e:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <main+0x64>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	4618      	mov	r0, r3
 8001646:	f005 f88d 	bl	8006764 <Display_Init>
	ST7789_Test();
 800164a:	f006 fbed 	bl	8007e28 <ST7789_Test>
//	    	HAL_Delay(80);
//	    }
//		SmartWatchData_handle.pressure += 1;
//		SmartWatchData_handle.heart_rate += 1;
//		SmartWatchData_handle.spo2 += 1;
		SmartWatchScreen_State = SCREEN_HEART_RATE;
 800164e:	4b07      	ldr	r3, [pc, #28]	@ (800166c <main+0x64>)
 8001650:	2203      	movs	r2, #3
 8001652:	701a      	strb	r2, [r3, #0]
	    Display_Update(SmartWatchScreen_State, &SmartWatchData_handle);
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <main+0x64>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	4905      	ldr	r1, [pc, #20]	@ (8001670 <main+0x68>)
 800165c:	4618      	mov	r0, r3
 800165e:	f005 fc35 	bl	8006ecc <Display_Update>
	    HAL_Delay(20);
 8001662:	2014      	movs	r0, #20
 8001664:	f000 fe1a 	bl	800229c <HAL_Delay>
		SmartWatchScreen_State = SCREEN_HEART_RATE;
 8001668:	bf00      	nop
 800166a:	e7f0      	b.n	800164e <main+0x46>
 800166c:	20000489 	.word	0x20000489
 8001670:	20000a0c 	.word	0x20000a0c

08001674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b096      	sub	sp, #88	@ 0x58
 8001678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	2244      	movs	r2, #68	@ 0x44
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f007 fdef 	bl	8009266 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001688:	463b      	mov	r3, r7
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001696:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800169a:	f001 fcd1 	bl	8003040 <HAL_PWREx_ControlVoltageScaling>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016a4:	f000 f8c4 	bl	8001830 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80016a8:	2310      	movs	r3, #16
 80016aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016ac:	2301      	movs	r3, #1
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016b4:	2360      	movs	r3, #96	@ 0x60
 80016b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b8:	2302      	movs	r3, #2
 80016ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016bc:	2301      	movs	r3, #1
 80016be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80016c4:	2328      	movs	r3, #40	@ 0x28
 80016c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016c8:	2307      	movs	r3, #7
 80016ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016cc:	2302      	movs	r3, #2
 80016ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4618      	mov	r0, r3
 80016da:	f001 fd07 	bl	80030ec <HAL_RCC_OscConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80016e4:	f000 f8a4 	bl	8001830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e8:	230f      	movs	r3, #15
 80016ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ec:	2303      	movs	r3, #3
 80016ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016fc:	463b      	mov	r3, r7
 80016fe:	2104      	movs	r1, #4
 8001700:	4618      	mov	r0, r3
 8001702:	f002 f8cf 	bl	80038a4 <HAL_RCC_ClockConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800170c:	f000 f890 	bl	8001830 <Error_Handler>
  }
}
 8001710:	bf00      	nop
 8001712:	3758      	adds	r7, #88	@ 0x58
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
// This callback is called when idle line is detected or buffer is full
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
	//for BLE
    if (huart == &BLE_UART)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a16      	ldr	r2, [pc, #88]	@ (8001780 <HAL_UARTEx_RxEventCallback+0x68>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d125      	bne.n	8001778 <HAL_UARTEx_RxEventCallback+0x60>
    {
        // Copy the data from DMA buffer to message buffer
        memcpy(messageBuffer, rxBuffer, Size);
 800172c:	887b      	ldrh	r3, [r7, #2]
 800172e:	461a      	mov	r2, r3
 8001730:	4914      	ldr	r1, [pc, #80]	@ (8001784 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001732:	4815      	ldr	r0, [pc, #84]	@ (8001788 <HAL_UARTEx_RxEventCallback+0x70>)
 8001734:	f007 fe27 	bl	8009386 <memcpy>

        // Null-terminate the string
        messageBuffer[Size] = '\0';
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	4a13      	ldr	r2, [pc, #76]	@ (8001788 <HAL_UARTEx_RxEventCallback+0x70>)
 800173c:	2100      	movs	r1, #0
 800173e:	54d1      	strb	r1, [r2, r3]

        // Set flag for main loop
        messageReady = 1;
 8001740:	4b12      	ldr	r3, [pc, #72]	@ (800178c <HAL_UARTEx_RxEventCallback+0x74>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]

        HAL_UART_AbortReceive(huart);  // Stop DMA
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f003 fd01 	bl	800514e <HAL_UART_AbortReceive>
        memset(rxBuffer, 0, sizeof(rxBuffer));  // Reset buffer
 800174c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001750:	2100      	movs	r1, #0
 8001752:	480c      	ldr	r0, [pc, #48]	@ (8001784 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001754:	f007 fd87 	bl	8009266 <memset>

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 8001758:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800175c:	4909      	ldr	r1, [pc, #36]	@ (8001784 <HAL_UARTEx_RxEventCallback+0x6c>)
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f004 ffac 	bl	80066bc <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0204 	bic.w	r2, r2, #4
 8001776:	601a      	str	r2, [r3, #0]
    }
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200006d0 	.word	0x200006d0
 8001784:	20000904 	.word	0x20000904
 8001788:	20000388 	.word	0x20000388
 800178c:	20000488 	.word	0x20000488

08001790 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
    uint32_t now = HAL_GetTick();
 800179a:	f000 fd73 	bl	8002284 <HAL_GetTick>
 800179e:	60f8      	str	r0, [r7, #12]
    if (now - lastBtnTick < 50) return;  // simple debounce
 80017a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <HAL_GPIO_EXTI_Callback+0x90>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b31      	cmp	r3, #49	@ 0x31
 80017aa:	d935      	bls.n	8001818 <HAL_GPIO_EXTI_Callback+0x88>
    lastBtnTick = now;
 80017ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001820 <HAL_GPIO_EXTI_Callback+0x90>)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6013      	str	r3, [r2, #0]
    if (GPIO_Pin == BUTTON_BACK_Pin) {
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017b8:	d111      	bne.n	80017de <HAL_GPIO_EXTI_Callback+0x4e>
        SmartWatchScreen_State = (SmartWatchScreen_State + NUM_SCREENS - 1) % NUM_SCREENS;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001824 <HAL_GPIO_EXTI_Callback+0x94>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	1d1a      	adds	r2, r3, #4
 80017c2:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <HAL_GPIO_EXTI_Callback+0x98>)
 80017c4:	fb83 1302 	smull	r1, r3, r3, r2
 80017c8:	1059      	asrs	r1, r3, #1
 80017ca:	17d3      	asrs	r3, r2, #31
 80017cc:	1ac9      	subs	r1, r1, r3
 80017ce:	460b      	mov	r3, r1
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	1ad1      	subs	r1, r2, r3
 80017d6:	b2ca      	uxtb	r2, r1
 80017d8:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_GPIO_EXTI_Callback+0x94>)
 80017da:	701a      	strb	r2, [r3, #0]
 80017dc:	e01d      	b.n	800181a <HAL_GPIO_EXTI_Callback+0x8a>
    }
    else if (GPIO_Pin == BUTTON_NEXT_Pin) {
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017e4:	d111      	bne.n	800180a <HAL_GPIO_EXTI_Callback+0x7a>
        SmartWatchScreen_State = (SmartWatchScreen_State + 1) % NUM_SCREENS;
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <HAL_GPIO_EXTI_Callback+0x94>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <HAL_GPIO_EXTI_Callback+0x98>)
 80017f0:	fb83 1302 	smull	r1, r3, r3, r2
 80017f4:	1059      	asrs	r1, r3, #1
 80017f6:	17d3      	asrs	r3, r2, #31
 80017f8:	1ac9      	subs	r1, r1, r3
 80017fa:	460b      	mov	r3, r1
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	1ad1      	subs	r1, r2, r3
 8001802:	b2ca      	uxtb	r2, r1
 8001804:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <HAL_GPIO_EXTI_Callback+0x94>)
 8001806:	701a      	strb	r2, [r3, #0]
 8001808:	e007      	b.n	800181a <HAL_GPIO_EXTI_Callback+0x8a>
    }
    else if (GPIO_Pin == MAX30102_INT_Pin)
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	2b04      	cmp	r3, #4
 800180e:	d104      	bne.n	800181a <HAL_GPIO_EXTI_Callback+0x8a>
    {
    	max30102_on_interrupt(&max30102);
 8001810:	4806      	ldr	r0, [pc, #24]	@ (800182c <HAL_GPIO_EXTI_Callback+0x9c>)
 8001812:	f005 fbbd 	bl	8006f90 <max30102_on_interrupt>
 8001816:	e000      	b.n	800181a <HAL_GPIO_EXTI_Callback+0x8a>
    if (now - lastBtnTick < 50) return;  // simple debounce
 8001818:	bf00      	nop
    }
}
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000594 	.word	0x20000594
 8001824:	20000489 	.word	0x20000489
 8001828:	66666667 	.word	0x66666667
 800182c:	2000048c 	.word	0x2000048c

08001830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001834:	b672      	cpsid	i
}
 8001836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <Error_Handler+0x8>

0800183c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001840:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <MX_SPI2_Init+0x74>)
 8001842:	4a1c      	ldr	r2, [pc, #112]	@ (80018b4 <MX_SPI2_Init+0x78>)
 8001844:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001846:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <MX_SPI2_Init+0x74>)
 8001848:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800184c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800184e:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <MX_SPI2_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001854:	4b16      	ldr	r3, [pc, #88]	@ (80018b0 <MX_SPI2_Init+0x74>)
 8001856:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800185a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800185c:	4b14      	ldr	r3, [pc, #80]	@ (80018b0 <MX_SPI2_Init+0x74>)
 800185e:	2202      	movs	r2, #2
 8001860:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001862:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <MX_SPI2_Init+0x74>)
 8001864:	2200      	movs	r2, #0
 8001866:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001868:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <MX_SPI2_Init+0x74>)
 800186a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800186e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001870:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <MX_SPI2_Init+0x74>)
 8001872:	2218      	movs	r2, #24
 8001874:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001876:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <MX_SPI2_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800187c:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <MX_SPI2_Init+0x74>)
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001882:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <MX_SPI2_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001888:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <MX_SPI2_Init+0x74>)
 800188a:	2207      	movs	r2, #7
 800188c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800188e:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <MX_SPI2_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <MX_SPI2_Init+0x74>)
 8001896:	2208      	movs	r2, #8
 8001898:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <MX_SPI2_Init+0x74>)
 800189c:	f002 fee2 	bl	8004664 <HAL_SPI_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80018a6:	f7ff ffc3 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000598 	.word	0x20000598
 80018b4:	40003800 	.word	0x40003800

080018b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	@ 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a30      	ldr	r2, [pc, #192]	@ (8001998 <HAL_SPI_MspInit+0xe0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d159      	bne.n	800198e <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018da:	4b30      	ldr	r3, [pc, #192]	@ (800199c <HAL_SPI_MspInit+0xe4>)
 80018dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018de:	4a2f      	ldr	r2, [pc, #188]	@ (800199c <HAL_SPI_MspInit+0xe4>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80018e6:	4b2d      	ldr	r3, [pc, #180]	@ (800199c <HAL_SPI_MspInit+0xe4>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	4b2a      	ldr	r3, [pc, #168]	@ (800199c <HAL_SPI_MspInit+0xe4>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f6:	4a29      	ldr	r2, [pc, #164]	@ (800199c <HAL_SPI_MspInit+0xe4>)
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018fe:	4b27      	ldr	r3, [pc, #156]	@ (800199c <HAL_SPI_MspInit+0xe4>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ST7789_SCK_Pin|ST7789_MOSI_Pin;
 800190a:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800190e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800191c:	2305      	movs	r3, #5
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4619      	mov	r1, r3
 8001926:	481e      	ldr	r0, [pc, #120]	@ (80019a0 <HAL_SPI_MspInit+0xe8>)
 8001928:	f001 f870 	bl	8002a0c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800192c:	4b1d      	ldr	r3, [pc, #116]	@ (80019a4 <HAL_SPI_MspInit+0xec>)
 800192e:	4a1e      	ldr	r2, [pc, #120]	@ (80019a8 <HAL_SPI_MspInit+0xf0>)
 8001930:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001932:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <HAL_SPI_MspInit+0xec>)
 8001934:	2201      	movs	r2, #1
 8001936:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001938:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <HAL_SPI_MspInit+0xec>)
 800193a:	2210      	movs	r2, #16
 800193c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800193e:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <HAL_SPI_MspInit+0xec>)
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001944:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <HAL_SPI_MspInit+0xec>)
 8001946:	2280      	movs	r2, #128	@ 0x80
 8001948:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800194a:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <HAL_SPI_MspInit+0xec>)
 800194c:	2200      	movs	r2, #0
 800194e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001950:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <HAL_SPI_MspInit+0xec>)
 8001952:	2200      	movs	r2, #0
 8001954:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001956:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <HAL_SPI_MspInit+0xec>)
 8001958:	2200      	movs	r2, #0
 800195a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <HAL_SPI_MspInit+0xec>)
 800195e:	2200      	movs	r2, #0
 8001960:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001962:	4810      	ldr	r0, [pc, #64]	@ (80019a4 <HAL_SPI_MspInit+0xec>)
 8001964:	f000 fdd0 	bl	8002508 <HAL_DMA_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800196e:	f7ff ff5f 	bl	8001830 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a0b      	ldr	r2, [pc, #44]	@ (80019a4 <HAL_SPI_MspInit+0xec>)
 8001976:	655a      	str	r2, [r3, #84]	@ 0x54
 8001978:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <HAL_SPI_MspInit+0xec>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	2024      	movs	r0, #36	@ 0x24
 8001984:	f000 fd89 	bl	800249a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001988:	2024      	movs	r0, #36	@ 0x24
 800198a:	f000 fda2 	bl	80024d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800198e:	bf00      	nop
 8001990:	3728      	adds	r7, #40	@ 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40003800 	.word	0x40003800
 800199c:	40021000 	.word	0x40021000
 80019a0:	48000400 	.word	0x48000400
 80019a4:	200005fc 	.word	0x200005fc
 80019a8:	40020058 	.word	0x40020058

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <HAL_MspInit+0x44>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b6:	4a0e      	ldr	r2, [pc, #56]	@ (80019f0 <HAL_MspInit+0x44>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80019be:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <HAL_MspInit+0x44>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <HAL_MspInit+0x44>)
 80019cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ce:	4a08      	ldr	r2, [pc, #32]	@ (80019f0 <HAL_MspInit+0x44>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_MspInit+0x44>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000

080019f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <NMI_Handler+0x4>

080019fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <HardFault_Handler+0x4>

08001a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <MemManage_Handler+0x4>

08001a0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <BusFault_Handler+0x4>

08001a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <UsageFault_Handler+0x4>

08001a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a4a:	f000 fc07 	bl	800225c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAX30102_INT_Pin);
 8001a56:	2004      	movs	r0, #4
 8001a58:	f001 f99a 	bl	8002d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001a64:	4802      	ldr	r0, [pc, #8]	@ (8001a70 <DMA1_Channel2_IRQHandler+0x10>)
 8001a66:	f000 fee6 	bl	8002836 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200008b8 	.word	0x200008b8

08001a74 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001a78:	4802      	ldr	r0, [pc, #8]	@ (8001a84 <DMA1_Channel3_IRQHandler+0x10>)
 8001a7a:	f000 fedc 	bl	8002836 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000870 	.word	0x20000870

08001a88 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a8c:	4802      	ldr	r0, [pc, #8]	@ (8001a98 <DMA1_Channel4_IRQHandler+0x10>)
 8001a8e:	f000 fed2 	bl	8002836 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000828 	.word	0x20000828

08001a9c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <DMA1_Channel5_IRQHandler+0x10>)
 8001aa2:	f000 fec8 	bl	8002836 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200005fc 	.word	0x200005fc

08001ab0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU6500_INT_Pin);
 8001ab4:	2020      	movs	r0, #32
 8001ab6:	f001 f96b 	bl	8002d90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_BACK_Pin);
 8001aba:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001abe:	f001 f967 	bl	8002d90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_NEXT_Pin);
 8001ac2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ac6:	f001 f963 	bl	8002d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001ad4:	4802      	ldr	r0, [pc, #8]	@ (8001ae0 <SPI2_IRQHandler+0x10>)
 8001ad6:	f002 ffdf 	bl	8004a98 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000598 	.word	0x20000598

08001ae4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ae8:	4802      	ldr	r0, [pc, #8]	@ (8001af4 <USART1_IRQHandler+0x10>)
 8001aea:	f003 fbe1 	bl	80052b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200006d0 	.word	0x200006d0

08001af8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001afc:	4802      	ldr	r0, [pc, #8]	@ (8001b08 <USART3_IRQHandler+0x10>)
 8001afe:	f003 fbd7 	bl	80052b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000758 	.word	0x20000758

08001b0c <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b10:	4802      	ldr	r0, [pc, #8]	@ (8001b1c <DMA2_Channel7_IRQHandler+0x10>)
 8001b12:	f000 fe90 	bl	8002836 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200007e0 	.word	0x200007e0

08001b20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return 1;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_kill>:

int _kill(int pid, int sig)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b3a:	f007 fbf7 	bl	800932c <__errno>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2216      	movs	r2, #22
 8001b42:	601a      	str	r2, [r3, #0]
  return -1;
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_exit>:

void _exit (int status)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ffe7 	bl	8001b30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b62:	bf00      	nop
 8001b64:	e7fd      	b.n	8001b62 <_exit+0x12>

08001b66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	e00a      	b.n	8001b8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b78:	f3af 8000 	nop.w
 8001b7c:	4601      	mov	r1, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	60ba      	str	r2, [r7, #8]
 8001b84:	b2ca      	uxtb	r2, r1
 8001b86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	dbf0      	blt.n	8001b78 <_read+0x12>
  }

  return len;
 8001b96:	687b      	ldr	r3, [r7, #4]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	e009      	b.n	8001bc6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	60ba      	str	r2, [r7, #8]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fd12 	bl	80015e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	dbf1      	blt.n	8001bb2 <_write+0x12>
  }
  return len;
 8001bce:	687b      	ldr	r3, [r7, #4]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_close>:

int _close(int file)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c00:	605a      	str	r2, [r3, #4]
  return 0;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <_isatty>:

int _isatty(int file)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c18:	2301      	movs	r3, #1
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b085      	sub	sp, #20
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c48:	4a14      	ldr	r2, [pc, #80]	@ (8001c9c <_sbrk+0x5c>)
 8001c4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <_sbrk+0x60>)
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c54:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d102      	bne.n	8001c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <_sbrk+0x64>)
 8001c5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ca8 <_sbrk+0x68>)
 8001c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d207      	bcs.n	8001c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c70:	f007 fb5c 	bl	800932c <__errno>
 8001c74:	4603      	mov	r3, r0
 8001c76:	220c      	movs	r2, #12
 8001c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7e:	e009      	b.n	8001c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c80:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <_sbrk+0x64>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c86:	4b07      	ldr	r3, [pc, #28]	@ (8001ca4 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ca4 <_sbrk+0x64>)
 8001c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c92:	68fb      	ldr	r3, [r7, #12]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20018000 	.word	0x20018000
 8001ca0:	00000400 	.word	0x00000400
 8001ca4:	20000644 	.word	0x20000644
 8001ca8:	20000d18 	.word	0x20000d18

08001cac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <SystemInit+0x20>)
 8001cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ccc <SystemInit+0x20>)
 8001cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cd4:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001cd6:	4a15      	ldr	r2, [pc, #84]	@ (8001d2c <MX_UART4_Init+0x5c>)
 8001cd8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001cda:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001cdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ce0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce2:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d12:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001d14:	f003 f944 	bl	8004fa0 <HAL_UART_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d1e:	f7ff fd87 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000648 	.word	0x20000648
 8001d2c:	40004c00 	.word	0x40004c00

08001d30 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d34:	4b16      	ldr	r3, [pc, #88]	@ (8001d90 <MX_USART1_UART_Init+0x60>)
 8001d36:	4a17      	ldr	r2, [pc, #92]	@ (8001d94 <MX_USART1_UART_Init+0x64>)
 8001d38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d3a:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <MX_USART1_UART_Init+0x60>)
 8001d3c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d42:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <MX_USART1_UART_Init+0x60>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d48:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <MX_USART1_UART_Init+0x60>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <MX_USART1_UART_Init+0x60>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d54:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <MX_USART1_UART_Init+0x60>)
 8001d56:	220c      	movs	r2, #12
 8001d58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <MX_USART1_UART_Init+0x60>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d60:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <MX_USART1_UART_Init+0x60>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d66:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <MX_USART1_UART_Init+0x60>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001d6c:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <MX_USART1_UART_Init+0x60>)
 8001d6e:	2208      	movs	r2, #8
 8001d70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001d72:	4b07      	ldr	r3, [pc, #28]	@ (8001d90 <MX_USART1_UART_Init+0x60>)
 8001d74:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d78:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d7a:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <MX_USART1_UART_Init+0x60>)
 8001d7c:	f003 f910 	bl	8004fa0 <HAL_UART_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001d86:	f7ff fd53 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200006d0 	.word	0x200006d0
 8001d94:	40013800 	.word	0x40013800

08001d98 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d9c:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <MX_USART3_UART_Init+0x60>)
 8001d9e:	4a17      	ldr	r2, [pc, #92]	@ (8001dfc <MX_USART3_UART_Init+0x64>)
 8001da0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001da2:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <MX_USART3_UART_Init+0x60>)
 8001da4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001da8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001daa:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <MX_USART3_UART_Init+0x60>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001db0:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <MX_USART3_UART_Init+0x60>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <MX_USART3_UART_Init+0x60>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <MX_USART3_UART_Init+0x60>)
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001df8 <MX_USART3_UART_Init+0x60>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <MX_USART3_UART_Init+0x60>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dce:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <MX_USART3_UART_Init+0x60>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <MX_USART3_UART_Init+0x60>)
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001dda:	4b07      	ldr	r3, [pc, #28]	@ (8001df8 <MX_USART3_UART_Init+0x60>)
 8001ddc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001de0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001de2:	4805      	ldr	r0, [pc, #20]	@ (8001df8 <MX_USART3_UART_Init+0x60>)
 8001de4:	f003 f8dc 	bl	8004fa0 <HAL_UART_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8001dee:	f7ff fd1f 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000758 	.word	0x20000758
 8001dfc:	40004800 	.word	0x40004800

08001e00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b0b0      	sub	sp, #192	@ 0xc0
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e1c:	2288      	movs	r2, #136	@ 0x88
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f007 fa20 	bl	8009266 <memset>
  if(uartHandle->Instance==UART4)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a6f      	ldr	r2, [pc, #444]	@ (8001fe8 <HAL_UART_MspInit+0x1e8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d13c      	bne.n	8001eaa <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e30:	2308      	movs	r3, #8
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f001 ff55 	bl	8003cec <HAL_RCCEx_PeriphCLKConfig>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e48:	f7ff fcf2 	bl	8001830 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e4c:	4b67      	ldr	r3, [pc, #412]	@ (8001fec <HAL_UART_MspInit+0x1ec>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e50:	4a66      	ldr	r2, [pc, #408]	@ (8001fec <HAL_UART_MspInit+0x1ec>)
 8001e52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e56:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e58:	4b64      	ldr	r3, [pc, #400]	@ (8001fec <HAL_UART_MspInit+0x1ec>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e60:	623b      	str	r3, [r7, #32]
 8001e62:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	4b61      	ldr	r3, [pc, #388]	@ (8001fec <HAL_UART_MspInit+0x1ec>)
 8001e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e68:	4a60      	ldr	r2, [pc, #384]	@ (8001fec <HAL_UART_MspInit+0x1ec>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e70:	4b5e      	ldr	r3, [pc, #376]	@ (8001fec <HAL_UART_MspInit+0x1ec>)
 8001e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e94:	2308      	movs	r3, #8
 8001e96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ea4:	f000 fdb2 	bl	8002a0c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ea8:	e147      	b.n	800213a <HAL_UART_MspInit+0x33a>
  else if(uartHandle->Instance==USART1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a50      	ldr	r2, [pc, #320]	@ (8001ff0 <HAL_UART_MspInit+0x1f0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	f040 80a7 	bne.w	8002004 <HAL_UART_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f001 ff12 	bl	8003cec <HAL_RCCEx_PeriphCLKConfig>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001ece:	f7ff fcaf 	bl	8001830 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ed2:	4b46      	ldr	r3, [pc, #280]	@ (8001fec <HAL_UART_MspInit+0x1ec>)
 8001ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed6:	4a45      	ldr	r2, [pc, #276]	@ (8001fec <HAL_UART_MspInit+0x1ec>)
 8001ed8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001edc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ede:	4b43      	ldr	r3, [pc, #268]	@ (8001fec <HAL_UART_MspInit+0x1ec>)
 8001ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	4b40      	ldr	r3, [pc, #256]	@ (8001fec <HAL_UART_MspInit+0x1ec>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eee:	4a3f      	ldr	r2, [pc, #252]	@ (8001fec <HAL_UART_MspInit+0x1ec>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ef6:	4b3d      	ldr	r3, [pc, #244]	@ (8001fec <HAL_UART_MspInit+0x1ec>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BLE_TX_Pin|BLE_RX_Pin;
 8001f02:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f1c:	2307      	movs	r3, #7
 8001f1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f26:	4619      	mov	r1, r3
 8001f28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f2c:	f000 fd6e 	bl	8002a0c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Channel7;
 8001f30:	4b30      	ldr	r3, [pc, #192]	@ (8001ff4 <HAL_UART_MspInit+0x1f4>)
 8001f32:	4a31      	ldr	r2, [pc, #196]	@ (8001ff8 <HAL_UART_MspInit+0x1f8>)
 8001f34:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001f36:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff4 <HAL_UART_MspInit+0x1f4>)
 8001f38:	2202      	movs	r2, #2
 8001f3a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <HAL_UART_MspInit+0x1f4>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f42:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff4 <HAL_UART_MspInit+0x1f4>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f48:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff4 <HAL_UART_MspInit+0x1f4>)
 8001f4a:	2280      	movs	r2, #128	@ 0x80
 8001f4c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f4e:	4b29      	ldr	r3, [pc, #164]	@ (8001ff4 <HAL_UART_MspInit+0x1f4>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f54:	4b27      	ldr	r3, [pc, #156]	@ (8001ff4 <HAL_UART_MspInit+0x1f4>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001f5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ff4 <HAL_UART_MspInit+0x1f4>)
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f60:	4b24      	ldr	r3, [pc, #144]	@ (8001ff4 <HAL_UART_MspInit+0x1f4>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f66:	4823      	ldr	r0, [pc, #140]	@ (8001ff4 <HAL_UART_MspInit+0x1f4>)
 8001f68:	f000 face 	bl	8002508 <HAL_DMA_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_UART_MspInit+0x176>
      Error_Handler();
 8001f72:	f7ff fc5d 	bl	8001830 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff4 <HAL_UART_MspInit+0x1f4>)
 8001f7a:	675a      	str	r2, [r3, #116]	@ 0x74
 8001f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff4 <HAL_UART_MspInit+0x1f4>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001f82:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <HAL_UART_MspInit+0x1fc>)
 8001f84:	4a1e      	ldr	r2, [pc, #120]	@ (8002000 <HAL_UART_MspInit+0x200>)
 8001f86:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001f88:	4b1c      	ldr	r3, [pc, #112]	@ (8001ffc <HAL_UART_MspInit+0x1fc>)
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <HAL_UART_MspInit+0x1fc>)
 8001f90:	2210      	movs	r2, #16
 8001f92:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f94:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <HAL_UART_MspInit+0x1fc>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f9a:	4b18      	ldr	r3, [pc, #96]	@ (8001ffc <HAL_UART_MspInit+0x1fc>)
 8001f9c:	2280      	movs	r2, #128	@ 0x80
 8001f9e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <HAL_UART_MspInit+0x1fc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <HAL_UART_MspInit+0x1fc>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <HAL_UART_MspInit+0x1fc>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fb2:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_UART_MspInit+0x1fc>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001fb8:	4810      	ldr	r0, [pc, #64]	@ (8001ffc <HAL_UART_MspInit+0x1fc>)
 8001fba:	f000 faa5 	bl	8002508 <HAL_DMA_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_UART_MspInit+0x1c8>
      Error_Handler();
 8001fc4:	f7ff fc34 	bl	8001830 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a0c      	ldr	r2, [pc, #48]	@ (8001ffc <HAL_UART_MspInit+0x1fc>)
 8001fcc:	671a      	str	r2, [r3, #112]	@ 0x70
 8001fce:	4a0b      	ldr	r2, [pc, #44]	@ (8001ffc <HAL_UART_MspInit+0x1fc>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	2025      	movs	r0, #37	@ 0x25
 8001fda:	f000 fa5e 	bl	800249a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fde:	2025      	movs	r0, #37	@ 0x25
 8001fe0:	f000 fa77 	bl	80024d2 <HAL_NVIC_EnableIRQ>
}
 8001fe4:	e0a9      	b.n	800213a <HAL_UART_MspInit+0x33a>
 8001fe6:	bf00      	nop
 8001fe8:	40004c00 	.word	0x40004c00
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40013800 	.word	0x40013800
 8001ff4:	200007e0 	.word	0x200007e0
 8001ff8:	40020480 	.word	0x40020480
 8001ffc:	20000828 	.word	0x20000828
 8002000:	40020044 	.word	0x40020044
  else if(uartHandle->Instance==USART3)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a4e      	ldr	r2, [pc, #312]	@ (8002144 <HAL_UART_MspInit+0x344>)
 800200a:	4293      	cmp	r3, r2
 800200c:	f040 8095 	bne.w	800213a <HAL_UART_MspInit+0x33a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002010:	2304      	movs	r3, #4
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002014:	2300      	movs	r3, #0
 8002016:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800201c:	4618      	mov	r0, r3
 800201e:	f001 fe65 	bl	8003cec <HAL_RCCEx_PeriphCLKConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_UART_MspInit+0x22c>
      Error_Handler();
 8002028:	f7ff fc02 	bl	8001830 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800202c:	4b46      	ldr	r3, [pc, #280]	@ (8002148 <HAL_UART_MspInit+0x348>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002030:	4a45      	ldr	r2, [pc, #276]	@ (8002148 <HAL_UART_MspInit+0x348>)
 8002032:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002036:	6593      	str	r3, [r2, #88]	@ 0x58
 8002038:	4b43      	ldr	r3, [pc, #268]	@ (8002148 <HAL_UART_MspInit+0x348>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002044:	4b40      	ldr	r3, [pc, #256]	@ (8002148 <HAL_UART_MspInit+0x348>)
 8002046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002048:	4a3f      	ldr	r2, [pc, #252]	@ (8002148 <HAL_UART_MspInit+0x348>)
 800204a:	f043 0304 	orr.w	r3, r3, #4
 800204e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002050:	4b3d      	ldr	r3, [pc, #244]	@ (8002148 <HAL_UART_MspInit+0x348>)
 8002052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 800205c:	2330      	movs	r3, #48	@ 0x30
 800205e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206e:	2303      	movs	r3, #3
 8002070:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002074:	2307      	movs	r3, #7
 8002076:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800207a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800207e:	4619      	mov	r1, r3
 8002080:	4832      	ldr	r0, [pc, #200]	@ (800214c <HAL_UART_MspInit+0x34c>)
 8002082:	f000 fcc3 	bl	8002a0c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002086:	4b32      	ldr	r3, [pc, #200]	@ (8002150 <HAL_UART_MspInit+0x350>)
 8002088:	4a32      	ldr	r2, [pc, #200]	@ (8002154 <HAL_UART_MspInit+0x354>)
 800208a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 800208c:	4b30      	ldr	r3, [pc, #192]	@ (8002150 <HAL_UART_MspInit+0x350>)
 800208e:	2202      	movs	r2, #2
 8002090:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002092:	4b2f      	ldr	r3, [pc, #188]	@ (8002150 <HAL_UART_MspInit+0x350>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002098:	4b2d      	ldr	r3, [pc, #180]	@ (8002150 <HAL_UART_MspInit+0x350>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800209e:	4b2c      	ldr	r3, [pc, #176]	@ (8002150 <HAL_UART_MspInit+0x350>)
 80020a0:	2280      	movs	r2, #128	@ 0x80
 80020a2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002150 <HAL_UART_MspInit+0x350>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020aa:	4b29      	ldr	r3, [pc, #164]	@ (8002150 <HAL_UART_MspInit+0x350>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80020b0:	4b27      	ldr	r3, [pc, #156]	@ (8002150 <HAL_UART_MspInit+0x350>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020b6:	4b26      	ldr	r3, [pc, #152]	@ (8002150 <HAL_UART_MspInit+0x350>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80020bc:	4824      	ldr	r0, [pc, #144]	@ (8002150 <HAL_UART_MspInit+0x350>)
 80020be:	f000 fa23 	bl	8002508 <HAL_DMA_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_UART_MspInit+0x2cc>
      Error_Handler();
 80020c8:	f7ff fbb2 	bl	8001830 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a20      	ldr	r2, [pc, #128]	@ (8002150 <HAL_UART_MspInit+0x350>)
 80020d0:	675a      	str	r2, [r3, #116]	@ 0x74
 80020d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002150 <HAL_UART_MspInit+0x350>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80020d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002158 <HAL_UART_MspInit+0x358>)
 80020da:	4a20      	ldr	r2, [pc, #128]	@ (800215c <HAL_UART_MspInit+0x35c>)
 80020dc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 80020de:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <HAL_UART_MspInit+0x358>)
 80020e0:	2202      	movs	r2, #2
 80020e2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002158 <HAL_UART_MspInit+0x358>)
 80020e6:	2210      	movs	r2, #16
 80020e8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002158 <HAL_UART_MspInit+0x358>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020f0:	4b19      	ldr	r3, [pc, #100]	@ (8002158 <HAL_UART_MspInit+0x358>)
 80020f2:	2280      	movs	r2, #128	@ 0x80
 80020f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020f6:	4b18      	ldr	r3, [pc, #96]	@ (8002158 <HAL_UART_MspInit+0x358>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020fc:	4b16      	ldr	r3, [pc, #88]	@ (8002158 <HAL_UART_MspInit+0x358>)
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002102:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <HAL_UART_MspInit+0x358>)
 8002104:	2200      	movs	r2, #0
 8002106:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002108:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <HAL_UART_MspInit+0x358>)
 800210a:	2200      	movs	r2, #0
 800210c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800210e:	4812      	ldr	r0, [pc, #72]	@ (8002158 <HAL_UART_MspInit+0x358>)
 8002110:	f000 f9fa 	bl	8002508 <HAL_DMA_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_UART_MspInit+0x31e>
      Error_Handler();
 800211a:	f7ff fb89 	bl	8001830 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a0d      	ldr	r2, [pc, #52]	@ (8002158 <HAL_UART_MspInit+0x358>)
 8002122:	671a      	str	r2, [r3, #112]	@ 0x70
 8002124:	4a0c      	ldr	r2, [pc, #48]	@ (8002158 <HAL_UART_MspInit+0x358>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	2027      	movs	r0, #39	@ 0x27
 8002130:	f000 f9b3 	bl	800249a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002134:	2027      	movs	r0, #39	@ 0x27
 8002136:	f000 f9cc 	bl	80024d2 <HAL_NVIC_EnableIRQ>
}
 800213a:	bf00      	nop
 800213c:	37c0      	adds	r7, #192	@ 0xc0
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40004800 	.word	0x40004800
 8002148:	40021000 	.word	0x40021000
 800214c:	48000800 	.word	0x48000800
 8002150:	20000870 	.word	0x20000870
 8002154:	40020030 	.word	0x40020030
 8002158:	200008b8 	.word	0x200008b8
 800215c:	4002001c 	.word	0x4002001c

08002160 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002160:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002198 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002164:	f7ff fda2 	bl	8001cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002168:	480c      	ldr	r0, [pc, #48]	@ (800219c <LoopForever+0x6>)
  ldr r1, =_edata
 800216a:	490d      	ldr	r1, [pc, #52]	@ (80021a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800216c:	4a0d      	ldr	r2, [pc, #52]	@ (80021a4 <LoopForever+0xe>)
  movs r3, #0
 800216e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002170:	e002      	b.n	8002178 <LoopCopyDataInit>

08002172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002176:	3304      	adds	r3, #4

08002178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800217a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800217c:	d3f9      	bcc.n	8002172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217e:	4a0a      	ldr	r2, [pc, #40]	@ (80021a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002180:	4c0a      	ldr	r4, [pc, #40]	@ (80021ac <LoopForever+0x16>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002184:	e001      	b.n	800218a <LoopFillZerobss>

08002186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002188:	3204      	adds	r2, #4

0800218a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800218a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800218c:	d3fb      	bcc.n	8002186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800218e:	f007 f8d3 	bl	8009338 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002192:	f7ff fa39 	bl	8001608 <main>

08002196 <LoopForever>:

LoopForever:
    b LoopForever
 8002196:	e7fe      	b.n	8002196 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002198:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800219c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a0:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 80021a4:	0803c904 	.word	0x0803c904
  ldr r2, =_sbss
 80021a8:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 80021ac:	20000d14 	.word	0x20000d14

080021b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021b0:	e7fe      	b.n	80021b0 <ADC1_2_IRQHandler>

080021b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021bc:	2003      	movs	r0, #3
 80021be:	f000 f961 	bl	8002484 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021c2:	200f      	movs	r0, #15
 80021c4:	f000 f80e 	bl	80021e4 <HAL_InitTick>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	71fb      	strb	r3, [r7, #7]
 80021d2:	e001      	b.n	80021d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021d4:	f7ff fbea 	bl	80019ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021d8:	79fb      	ldrb	r3, [r7, #7]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021f0:	4b17      	ldr	r3, [pc, #92]	@ (8002250 <HAL_InitTick+0x6c>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d023      	beq.n	8002240 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021f8:	4b16      	ldr	r3, [pc, #88]	@ (8002254 <HAL_InitTick+0x70>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b14      	ldr	r3, [pc, #80]	@ (8002250 <HAL_InitTick+0x6c>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4619      	mov	r1, r3
 8002202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002206:	fbb3 f3f1 	udiv	r3, r3, r1
 800220a:	fbb2 f3f3 	udiv	r3, r2, r3
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f96d 	bl	80024ee <HAL_SYSTICK_Config>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10f      	bne.n	800223a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b0f      	cmp	r3, #15
 800221e:	d809      	bhi.n	8002234 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002220:	2200      	movs	r2, #0
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	f04f 30ff 	mov.w	r0, #4294967295
 8002228:	f000 f937 	bl	800249a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800222c:	4a0a      	ldr	r2, [pc, #40]	@ (8002258 <HAL_InitTick+0x74>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e007      	b.n	8002244 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
 8002238:	e004      	b.n	8002244 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
 800223e:	e001      	b.n	8002244 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002244:	7bfb      	ldrb	r3, [r7, #15]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000008 	.word	0x20000008
 8002254:	20000000 	.word	0x20000000
 8002258:	20000004 	.word	0x20000004

0800225c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002260:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_IncTick+0x20>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <HAL_IncTick+0x24>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4413      	add	r3, r2
 800226c:	4a04      	ldr	r2, [pc, #16]	@ (8002280 <HAL_IncTick+0x24>)
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000008 	.word	0x20000008
 8002280:	20000900 	.word	0x20000900

08002284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return uwTick;
 8002288:	4b03      	ldr	r3, [pc, #12]	@ (8002298 <HAL_GetTick+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000900 	.word	0x20000900

0800229c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a4:	f7ff ffee 	bl	8002284 <HAL_GetTick>
 80022a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d005      	beq.n	80022c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022b6:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <HAL_Delay+0x44>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022c2:	bf00      	nop
 80022c4:	f7ff ffde 	bl	8002284 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d8f7      	bhi.n	80022c4 <HAL_Delay+0x28>
  {
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000008 	.word	0x20000008

080022e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002300:	4013      	ands	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800230c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002316:	4a04      	ldr	r2, [pc, #16]	@ (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	60d3      	str	r3, [r2, #12]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002330:	4b04      	ldr	r3, [pc, #16]	@ (8002344 <__NVIC_GetPriorityGrouping+0x18>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	f003 0307 	and.w	r3, r3, #7
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	2b00      	cmp	r3, #0
 8002358:	db0b      	blt.n	8002372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	f003 021f 	and.w	r2, r3, #31
 8002360:	4907      	ldr	r1, [pc, #28]	@ (8002380 <__NVIC_EnableIRQ+0x38>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	2001      	movs	r0, #1
 800236a:	fa00 f202 	lsl.w	r2, r0, r2
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000e100 	.word	0xe000e100

08002384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	6039      	str	r1, [r7, #0]
 800238e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002394:	2b00      	cmp	r3, #0
 8002396:	db0a      	blt.n	80023ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	b2da      	uxtb	r2, r3
 800239c:	490c      	ldr	r1, [pc, #48]	@ (80023d0 <__NVIC_SetPriority+0x4c>)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	0112      	lsls	r2, r2, #4
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	440b      	add	r3, r1
 80023a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023ac:	e00a      	b.n	80023c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4908      	ldr	r1, [pc, #32]	@ (80023d4 <__NVIC_SetPriority+0x50>)
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	3b04      	subs	r3, #4
 80023bc:	0112      	lsls	r2, r2, #4
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	440b      	add	r3, r1
 80023c2:	761a      	strb	r2, [r3, #24]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000e100 	.word	0xe000e100
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	@ 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f1c3 0307 	rsb	r3, r3, #7
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	bf28      	it	cs
 80023f6:	2304      	movcs	r3, #4
 80023f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3304      	adds	r3, #4
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d902      	bls.n	8002408 <NVIC_EncodePriority+0x30>
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3b03      	subs	r3, #3
 8002406:	e000      	b.n	800240a <NVIC_EncodePriority+0x32>
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800240c:	f04f 32ff 	mov.w	r2, #4294967295
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43da      	mvns	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	401a      	ands	r2, r3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002420:	f04f 31ff 	mov.w	r1, #4294967295
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	fa01 f303 	lsl.w	r3, r1, r3
 800242a:	43d9      	mvns	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	4313      	orrs	r3, r2
         );
}
 8002432:	4618      	mov	r0, r3
 8002434:	3724      	adds	r7, #36	@ 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002450:	d301      	bcc.n	8002456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002452:	2301      	movs	r3, #1
 8002454:	e00f      	b.n	8002476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002456:	4a0a      	ldr	r2, [pc, #40]	@ (8002480 <SysTick_Config+0x40>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800245e:	210f      	movs	r1, #15
 8002460:	f04f 30ff 	mov.w	r0, #4294967295
 8002464:	f7ff ff8e 	bl	8002384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002468:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <SysTick_Config+0x40>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800246e:	4b04      	ldr	r3, [pc, #16]	@ (8002480 <SysTick_Config+0x40>)
 8002470:	2207      	movs	r2, #7
 8002472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	e000e010 	.word	0xe000e010

08002484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff29 	bl	80022e4 <__NVIC_SetPriorityGrouping>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b086      	sub	sp, #24
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024ac:	f7ff ff3e 	bl	800232c <__NVIC_GetPriorityGrouping>
 80024b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	6978      	ldr	r0, [r7, #20]
 80024b8:	f7ff ff8e 	bl	80023d8 <NVIC_EncodePriority>
 80024bc:	4602      	mov	r2, r0
 80024be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff5d 	bl	8002384 <__NVIC_SetPriority>
}
 80024ca:	bf00      	nop
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff31 	bl	8002348 <__NVIC_EnableIRQ>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff ffa2 	bl	8002440 <SysTick_Config>
 80024fc:	4603      	mov	r3, r0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e098      	b.n	800264c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	4b4d      	ldr	r3, [pc, #308]	@ (8002658 <HAL_DMA_Init+0x150>)
 8002522:	429a      	cmp	r2, r3
 8002524:	d80f      	bhi.n	8002546 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	4b4b      	ldr	r3, [pc, #300]	@ (800265c <HAL_DMA_Init+0x154>)
 800252e:	4413      	add	r3, r2
 8002530:	4a4b      	ldr	r2, [pc, #300]	@ (8002660 <HAL_DMA_Init+0x158>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	009a      	lsls	r2, r3, #2
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a48      	ldr	r2, [pc, #288]	@ (8002664 <HAL_DMA_Init+0x15c>)
 8002542:	641a      	str	r2, [r3, #64]	@ 0x40
 8002544:	e00e      	b.n	8002564 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	4b46      	ldr	r3, [pc, #280]	@ (8002668 <HAL_DMA_Init+0x160>)
 800254e:	4413      	add	r3, r2
 8002550:	4a43      	ldr	r2, [pc, #268]	@ (8002660 <HAL_DMA_Init+0x158>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	009a      	lsls	r2, r3, #2
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a42      	ldr	r2, [pc, #264]	@ (800266c <HAL_DMA_Init+0x164>)
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800257a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800257e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002588:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002594:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025be:	d039      	beq.n	8002634 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c4:	4a27      	ldr	r2, [pc, #156]	@ (8002664 <HAL_DMA_Init+0x15c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d11a      	bne.n	8002600 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025ca:	4b29      	ldr	r3, [pc, #164]	@ (8002670 <HAL_DMA_Init+0x168>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	f003 031c 	and.w	r3, r3, #28
 80025d6:	210f      	movs	r1, #15
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	4924      	ldr	r1, [pc, #144]	@ (8002670 <HAL_DMA_Init+0x168>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025e4:	4b22      	ldr	r3, [pc, #136]	@ (8002670 <HAL_DMA_Init+0x168>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6859      	ldr	r1, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f0:	f003 031c 	and.w	r3, r3, #28
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	491d      	ldr	r1, [pc, #116]	@ (8002670 <HAL_DMA_Init+0x168>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
 80025fe:	e019      	b.n	8002634 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002600:	4b1c      	ldr	r3, [pc, #112]	@ (8002674 <HAL_DMA_Init+0x16c>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002608:	f003 031c 	and.w	r3, r3, #28
 800260c:	210f      	movs	r1, #15
 800260e:	fa01 f303 	lsl.w	r3, r1, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	4917      	ldr	r1, [pc, #92]	@ (8002674 <HAL_DMA_Init+0x16c>)
 8002616:	4013      	ands	r3, r2
 8002618:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800261a:	4b16      	ldr	r3, [pc, #88]	@ (8002674 <HAL_DMA_Init+0x16c>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6859      	ldr	r1, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002626:	f003 031c 	and.w	r3, r3, #28
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	4911      	ldr	r1, [pc, #68]	@ (8002674 <HAL_DMA_Init+0x16c>)
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	40020407 	.word	0x40020407
 800265c:	bffdfff8 	.word	0xbffdfff8
 8002660:	cccccccd 	.word	0xcccccccd
 8002664:	40020000 	.word	0x40020000
 8002668:	bffdfbf8 	.word	0xbffdfbf8
 800266c:	40020400 	.word	0x40020400
 8002670:	400200a8 	.word	0x400200a8
 8002674:	400204a8 	.word	0x400204a8

08002678 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_DMA_Start_IT+0x20>
 8002694:	2302      	movs	r3, #2
 8002696:	e04b      	b.n	8002730 <HAL_DMA_Start_IT+0xb8>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d13a      	bne.n	8002722 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0201 	bic.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f96b 	bl	80029ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d008      	beq.n	80026f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 020e 	orr.w	r2, r2, #14
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	e00f      	b.n	8002710 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0204 	bic.w	r2, r2, #4
 80026fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 020a 	orr.w	r2, r2, #10
 800270e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e005      	b.n	800272e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800272a:	2302      	movs	r3, #2
 800272c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800272e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d008      	beq.n	8002762 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2204      	movs	r2, #4
 8002754:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e022      	b.n	80027a8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 020e 	bic.w	r2, r2, #14
 8002770:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	f003 021c 	and.w	r2, r3, #28
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	2101      	movs	r1, #1
 8002790:	fa01 f202 	lsl.w	r2, r1, r2
 8002794:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d005      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2204      	movs	r2, #4
 80027d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	e029      	b.n	800282c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 020e 	bic.w	r2, r2, #14
 80027e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fc:	f003 021c 	and.w	r2, r3, #28
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	2101      	movs	r1, #1
 8002806:	fa01 f202 	lsl.w	r2, r1, r2
 800280a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
    }
  }
  return status;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002852:	f003 031c 	and.w	r3, r3, #28
 8002856:	2204      	movs	r2, #4
 8002858:	409a      	lsls	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4013      	ands	r3, r2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d026      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x7a>
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d021      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b00      	cmp	r3, #0
 8002878:	d107      	bne.n	800288a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0204 	bic.w	r2, r2, #4
 8002888:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288e:	f003 021c 	and.w	r2, r3, #28
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	2104      	movs	r1, #4
 8002898:	fa01 f202 	lsl.w	r2, r1, r2
 800289c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d071      	beq.n	800298a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80028ae:	e06c      	b.n	800298a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b4:	f003 031c 	and.w	r3, r3, #28
 80028b8:	2202      	movs	r2, #2
 80028ba:	409a      	lsls	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4013      	ands	r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d02e      	beq.n	8002922 <HAL_DMA_IRQHandler+0xec>
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d029      	beq.n	8002922 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10b      	bne.n	80028f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 020a 	bic.w	r2, r2, #10
 80028ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f8:	f003 021c 	and.w	r2, r3, #28
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	2102      	movs	r1, #2
 8002902:	fa01 f202 	lsl.w	r2, r1, r2
 8002906:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d038      	beq.n	800298a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002920:	e033      	b.n	800298a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	f003 031c 	and.w	r3, r3, #28
 800292a:	2208      	movs	r2, #8
 800292c:	409a      	lsls	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d02a      	beq.n	800298c <HAL_DMA_IRQHandler+0x156>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d025      	beq.n	800298c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 020e 	bic.w	r2, r2, #14
 800294e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002954:	f003 021c 	and.w	r2, r3, #28
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	2101      	movs	r1, #1
 800295e:	fa01 f202 	lsl.w	r2, r1, r2
 8002962:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297e:	2b00      	cmp	r3, #0
 8002980:	d004      	beq.n	800298c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800298a:	bf00      	nop
 800298c:	bf00      	nop
}
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	f003 021c 	and.w	r2, r3, #28
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	2101      	movs	r1, #1
 80029c8:	fa01 f202 	lsl.w	r2, r1, r2
 80029cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b10      	cmp	r3, #16
 80029dc:	d108      	bne.n	80029f0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029ee:	e007      	b.n	8002a00 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	60da      	str	r2, [r3, #12]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a1a:	e17f      	b.n	8002d1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	2101      	movs	r1, #1
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	fa01 f303 	lsl.w	r3, r1, r3
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8171 	beq.w	8002d16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d005      	beq.n	8002a4c <HAL_GPIO_Init+0x40>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d130      	bne.n	8002aae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	2203      	movs	r2, #3
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a82:	2201      	movs	r2, #1
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	f003 0201 	and.w	r2, r3, #1
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d118      	bne.n	8002aec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	08db      	lsrs	r3, r3, #3
 8002ad6:	f003 0201 	and.w	r2, r3, #1
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d017      	beq.n	8002b28 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d123      	bne.n	8002b7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	08da      	lsrs	r2, r3, #3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3208      	adds	r2, #8
 8002b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	220f      	movs	r2, #15
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	08da      	lsrs	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3208      	adds	r2, #8
 8002b76:	6939      	ldr	r1, [r7, #16]
 8002b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	2203      	movs	r2, #3
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0203 	and.w	r2, r3, #3
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80ac 	beq.w	8002d16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bbe:	4b5f      	ldr	r3, [pc, #380]	@ (8002d3c <HAL_GPIO_Init+0x330>)
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc2:	4a5e      	ldr	r2, [pc, #376]	@ (8002d3c <HAL_GPIO_Init+0x330>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bca:	4b5c      	ldr	r3, [pc, #368]	@ (8002d3c <HAL_GPIO_Init+0x330>)
 8002bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bd6:	4a5a      	ldr	r2, [pc, #360]	@ (8002d40 <HAL_GPIO_Init+0x334>)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	220f      	movs	r2, #15
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c00:	d025      	beq.n	8002c4e <HAL_GPIO_Init+0x242>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a4f      	ldr	r2, [pc, #316]	@ (8002d44 <HAL_GPIO_Init+0x338>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01f      	beq.n	8002c4a <HAL_GPIO_Init+0x23e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a4e      	ldr	r2, [pc, #312]	@ (8002d48 <HAL_GPIO_Init+0x33c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d019      	beq.n	8002c46 <HAL_GPIO_Init+0x23a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a4d      	ldr	r2, [pc, #308]	@ (8002d4c <HAL_GPIO_Init+0x340>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d013      	beq.n	8002c42 <HAL_GPIO_Init+0x236>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a4c      	ldr	r2, [pc, #304]	@ (8002d50 <HAL_GPIO_Init+0x344>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00d      	beq.n	8002c3e <HAL_GPIO_Init+0x232>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a4b      	ldr	r2, [pc, #300]	@ (8002d54 <HAL_GPIO_Init+0x348>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <HAL_GPIO_Init+0x22e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a4a      	ldr	r2, [pc, #296]	@ (8002d58 <HAL_GPIO_Init+0x34c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_GPIO_Init+0x22a>
 8002c32:	2306      	movs	r3, #6
 8002c34:	e00c      	b.n	8002c50 <HAL_GPIO_Init+0x244>
 8002c36:	2307      	movs	r3, #7
 8002c38:	e00a      	b.n	8002c50 <HAL_GPIO_Init+0x244>
 8002c3a:	2305      	movs	r3, #5
 8002c3c:	e008      	b.n	8002c50 <HAL_GPIO_Init+0x244>
 8002c3e:	2304      	movs	r3, #4
 8002c40:	e006      	b.n	8002c50 <HAL_GPIO_Init+0x244>
 8002c42:	2303      	movs	r3, #3
 8002c44:	e004      	b.n	8002c50 <HAL_GPIO_Init+0x244>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e002      	b.n	8002c50 <HAL_GPIO_Init+0x244>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_GPIO_Init+0x244>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	f002 0203 	and.w	r2, r2, #3
 8002c56:	0092      	lsls	r2, r2, #2
 8002c58:	4093      	lsls	r3, r2
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c60:	4937      	ldr	r1, [pc, #220]	@ (8002d40 <HAL_GPIO_Init+0x334>)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	3302      	adds	r3, #2
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d5c <HAL_GPIO_Init+0x350>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c92:	4a32      	ldr	r2, [pc, #200]	@ (8002d5c <HAL_GPIO_Init+0x350>)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c98:	4b30      	ldr	r3, [pc, #192]	@ (8002d5c <HAL_GPIO_Init+0x350>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cbc:	4a27      	ldr	r2, [pc, #156]	@ (8002d5c <HAL_GPIO_Init+0x350>)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002cc2:	4b26      	ldr	r3, [pc, #152]	@ (8002d5c <HAL_GPIO_Init+0x350>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ce6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d5c <HAL_GPIO_Init+0x350>)
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002cec:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <HAL_GPIO_Init+0x350>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d10:	4a12      	ldr	r2, [pc, #72]	@ (8002d5c <HAL_GPIO_Init+0x350>)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	fa22 f303 	lsr.w	r3, r2, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f47f ae78 	bne.w	8002a1c <HAL_GPIO_Init+0x10>
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	371c      	adds	r7, #28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40010000 	.word	0x40010000
 8002d44:	48000400 	.word	0x48000400
 8002d48:	48000800 	.word	0x48000800
 8002d4c:	48000c00 	.word	0x48000c00
 8002d50:	48001000 	.word	0x48001000
 8002d54:	48001400 	.word	0x48001400
 8002d58:	48001800 	.word	0x48001800
 8002d5c:	40010400 	.word	0x40010400

08002d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d70:	787b      	ldrb	r3, [r7, #1]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d76:	887a      	ldrh	r2, [r7, #2]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d7c:	e002      	b.n	8002d84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d7e:	887a      	ldrh	r2, [r7, #2]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d9a:	4b08      	ldr	r3, [pc, #32]	@ (8002dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d006      	beq.n	8002db4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002da6:	4a05      	ldr	r2, [pc, #20]	@ (8002dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe fcee 	bl	8001790 <HAL_GPIO_EXTI_Callback>
  }
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40010400 	.word	0x40010400

08002dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e08d      	b.n	8002eee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fe fb14 	bl	8001414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2224      	movs	r2, #36	@ 0x24
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0201 	bic.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d107      	bne.n	8002e3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	e006      	b.n	8002e48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d108      	bne.n	8002e62 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	e007      	b.n	8002e72 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69d9      	ldr	r1, [r3, #28]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1a      	ldr	r2, [r3, #32]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d138      	bne.n	8002f7e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e032      	b.n	8002f80 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2224      	movs	r2, #36	@ 0x24
 8002f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0201 	bic.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f48:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6819      	ldr	r1, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0201 	orr.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e000      	b.n	8002f80 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f7e:	2302      	movs	r3, #2
  }
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d139      	bne.n	8003016 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e033      	b.n	8003018 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2224      	movs	r2, #36	@ 0x24
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002fde:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	021b      	lsls	r3, r3, #8
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e000      	b.n	8003018 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003016:	2302      	movs	r3, #2
  }
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003028:	4b04      	ldr	r3, [pc, #16]	@ (800303c <HAL_PWREx_GetVoltageRange+0x18>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40007000 	.word	0x40007000

08003040 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800304e:	d130      	bne.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003050:	4b23      	ldr	r3, [pc, #140]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800305c:	d038      	beq.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800305e:	4b20      	ldr	r3, [pc, #128]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003066:	4a1e      	ldr	r2, [pc, #120]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003068:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800306c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800306e:	4b1d      	ldr	r3, [pc, #116]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2232      	movs	r2, #50	@ 0x32
 8003074:	fb02 f303 	mul.w	r3, r2, r3
 8003078:	4a1b      	ldr	r2, [pc, #108]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	0c9b      	lsrs	r3, r3, #18
 8003080:	3301      	adds	r3, #1
 8003082:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003084:	e002      	b.n	800308c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3b01      	subs	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800308c:	4b14      	ldr	r3, [pc, #80]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003098:	d102      	bne.n	80030a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f2      	bne.n	8003086 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030a0:	4b0f      	ldr	r3, [pc, #60]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ac:	d110      	bne.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e00f      	b.n	80030d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030b2:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030be:	d007      	beq.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030c0:	4b07      	ldr	r3, [pc, #28]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030c8:	4a05      	ldr	r2, [pc, #20]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40007000 	.word	0x40007000
 80030e4:	20000000 	.word	0x20000000
 80030e8:	431bde83 	.word	0x431bde83

080030ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e3ca      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030fe:	4b97      	ldr	r3, [pc, #604]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003108:	4b94      	ldr	r3, [pc, #592]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 80e4 	beq.w	80032e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d007      	beq.n	8003136 <HAL_RCC_OscConfig+0x4a>
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b0c      	cmp	r3, #12
 800312a:	f040 808b 	bne.w	8003244 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b01      	cmp	r3, #1
 8003132:	f040 8087 	bne.w	8003244 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003136:	4b89      	ldr	r3, [pc, #548]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d005      	beq.n	800314e <HAL_RCC_OscConfig+0x62>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e3a2      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1a      	ldr	r2, [r3, #32]
 8003152:	4b82      	ldr	r3, [pc, #520]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d004      	beq.n	8003168 <HAL_RCC_OscConfig+0x7c>
 800315e:	4b7f      	ldr	r3, [pc, #508]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003166:	e005      	b.n	8003174 <HAL_RCC_OscConfig+0x88>
 8003168:	4b7c      	ldr	r3, [pc, #496]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800316a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003174:	4293      	cmp	r3, r2
 8003176:	d223      	bcs.n	80031c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fd55 	bl	8003c2c <RCC_SetFlashLatencyFromMSIRange>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e383      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800318c:	4b73      	ldr	r3, [pc, #460]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a72      	ldr	r2, [pc, #456]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003192:	f043 0308 	orr.w	r3, r3, #8
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	4b70      	ldr	r3, [pc, #448]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	496d      	ldr	r1, [pc, #436]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031aa:	4b6c      	ldr	r3, [pc, #432]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	4968      	ldr	r1, [pc, #416]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	604b      	str	r3, [r1, #4]
 80031be:	e025      	b.n	800320c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031c0:	4b66      	ldr	r3, [pc, #408]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a65      	ldr	r2, [pc, #404]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80031c6:	f043 0308 	orr.w	r3, r3, #8
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b63      	ldr	r3, [pc, #396]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	4960      	ldr	r1, [pc, #384]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031de:	4b5f      	ldr	r3, [pc, #380]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	495b      	ldr	r1, [pc, #364]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d109      	bne.n	800320c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fd15 	bl	8003c2c <RCC_SetFlashLatencyFromMSIRange>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e343      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800320c:	f000 fc4a 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8003210:	4602      	mov	r2, r0
 8003212:	4b52      	ldr	r3, [pc, #328]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	4950      	ldr	r1, [pc, #320]	@ (8003360 <HAL_RCC_OscConfig+0x274>)
 800321e:	5ccb      	ldrb	r3, [r1, r3]
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	fa22 f303 	lsr.w	r3, r2, r3
 8003228:	4a4e      	ldr	r2, [pc, #312]	@ (8003364 <HAL_RCC_OscConfig+0x278>)
 800322a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800322c:	4b4e      	ldr	r3, [pc, #312]	@ (8003368 <HAL_RCC_OscConfig+0x27c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7fe ffd7 	bl	80021e4 <HAL_InitTick>
 8003236:	4603      	mov	r3, r0
 8003238:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d052      	beq.n	80032e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	e327      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d032      	beq.n	80032b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800324c:	4b43      	ldr	r3, [pc, #268]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a42      	ldr	r2, [pc, #264]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003258:	f7ff f814 	bl	8002284 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003260:	f7ff f810 	bl	8002284 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e310      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003272:	4b3a      	ldr	r3, [pc, #232]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800327e:	4b37      	ldr	r3, [pc, #220]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a36      	ldr	r2, [pc, #216]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003284:	f043 0308 	orr.w	r3, r3, #8
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	4b34      	ldr	r3, [pc, #208]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	4931      	ldr	r1, [pc, #196]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003298:	4313      	orrs	r3, r2
 800329a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800329c:	4b2f      	ldr	r3, [pc, #188]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	021b      	lsls	r3, r3, #8
 80032aa:	492c      	ldr	r1, [pc, #176]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
 80032b0:	e01a      	b.n	80032e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032b2:	4b2a      	ldr	r3, [pc, #168]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a29      	ldr	r2, [pc, #164]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032be:	f7fe ffe1 	bl	8002284 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032c6:	f7fe ffdd 	bl	8002284 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e2dd      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032d8:	4b20      	ldr	r3, [pc, #128]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x1da>
 80032e4:	e000      	b.n	80032e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d074      	beq.n	80033de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d005      	beq.n	8003306 <HAL_RCC_OscConfig+0x21a>
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b0c      	cmp	r3, #12
 80032fe:	d10e      	bne.n	800331e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b03      	cmp	r3, #3
 8003304:	d10b      	bne.n	800331e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003306:	4b15      	ldr	r3, [pc, #84]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d064      	beq.n	80033dc <HAL_RCC_OscConfig+0x2f0>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d160      	bne.n	80033dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e2ba      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003326:	d106      	bne.n	8003336 <HAL_RCC_OscConfig+0x24a>
 8003328:	4b0c      	ldr	r3, [pc, #48]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0b      	ldr	r2, [pc, #44]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800332e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	e026      	b.n	8003384 <HAL_RCC_OscConfig+0x298>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800333e:	d115      	bne.n	800336c <HAL_RCC_OscConfig+0x280>
 8003340:	4b06      	ldr	r3, [pc, #24]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a05      	ldr	r2, [pc, #20]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003346:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	4b03      	ldr	r3, [pc, #12]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a02      	ldr	r2, [pc, #8]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	e014      	b.n	8003384 <HAL_RCC_OscConfig+0x298>
 800335a:	bf00      	nop
 800335c:	40021000 	.word	0x40021000
 8003360:	0800ca5c 	.word	0x0800ca5c
 8003364:	20000000 	.word	0x20000000
 8003368:	20000004 	.word	0x20000004
 800336c:	4ba0      	ldr	r3, [pc, #640]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a9f      	ldr	r2, [pc, #636]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	4b9d      	ldr	r3, [pc, #628]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a9c      	ldr	r2, [pc, #624]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 800337e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d013      	beq.n	80033b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fe ff7a 	bl	8002284 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003394:	f7fe ff76 	bl	8002284 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	@ 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e276      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a6:	4b92      	ldr	r3, [pc, #584]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0x2a8>
 80033b2:	e014      	b.n	80033de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe ff66 	bl	8002284 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fe ff62 	bl	8002284 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	@ 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e262      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ce:	4b88      	ldr	r3, [pc, #544]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x2d0>
 80033da:	e000      	b.n	80033de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d060      	beq.n	80034ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_OscConfig+0x310>
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2b0c      	cmp	r3, #12
 80033f4:	d119      	bne.n	800342a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d116      	bne.n	800342a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033fc:	4b7c      	ldr	r3, [pc, #496]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_OscConfig+0x328>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e23f      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003414:	4b76      	ldr	r3, [pc, #472]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	061b      	lsls	r3, r3, #24
 8003422:	4973      	ldr	r1, [pc, #460]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003428:	e040      	b.n	80034ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d023      	beq.n	800347a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003432:	4b6f      	ldr	r3, [pc, #444]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a6e      	ldr	r2, [pc, #440]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800343c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fe ff21 	bl	8002284 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003446:	f7fe ff1d 	bl	8002284 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e21d      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003458:	4b65      	ldr	r3, [pc, #404]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003464:	4b62      	ldr	r3, [pc, #392]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	495f      	ldr	r1, [pc, #380]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]
 8003478:	e018      	b.n	80034ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800347a:	4b5d      	ldr	r3, [pc, #372]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a5c      	ldr	r2, [pc, #368]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7fe fefd 	bl	8002284 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800348e:	f7fe fef9 	bl	8002284 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e1f9      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034a0:	4b53      	ldr	r3, [pc, #332]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f0      	bne.n	800348e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d03c      	beq.n	8003532 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01c      	beq.n	80034fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c0:	4b4b      	ldr	r3, [pc, #300]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80034c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034c6:	4a4a      	ldr	r2, [pc, #296]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fe fed8 	bl	8002284 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d8:	f7fe fed4 	bl	8002284 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e1d4      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034ea:	4b41      	ldr	r3, [pc, #260]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80034ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ef      	beq.n	80034d8 <HAL_RCC_OscConfig+0x3ec>
 80034f8:	e01b      	b.n	8003532 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034fa:	4b3d      	ldr	r3, [pc, #244]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80034fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003500:	4a3b      	ldr	r2, [pc, #236]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003502:	f023 0301 	bic.w	r3, r3, #1
 8003506:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350a:	f7fe febb 	bl	8002284 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003512:	f7fe feb7 	bl	8002284 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e1b7      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003524:	4b32      	ldr	r3, [pc, #200]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1ef      	bne.n	8003512 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 80a6 	beq.w	800368c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003540:	2300      	movs	r3, #0
 8003542:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003544:	4b2a      	ldr	r3, [pc, #168]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10d      	bne.n	800356c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003550:	4b27      	ldr	r3, [pc, #156]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003554:	4a26      	ldr	r2, [pc, #152]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800355a:	6593      	str	r3, [r2, #88]	@ 0x58
 800355c:	4b24      	ldr	r3, [pc, #144]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 800355e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003568:	2301      	movs	r3, #1
 800356a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800356c:	4b21      	ldr	r3, [pc, #132]	@ (80035f4 <HAL_RCC_OscConfig+0x508>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d118      	bne.n	80035aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003578:	4b1e      	ldr	r3, [pc, #120]	@ (80035f4 <HAL_RCC_OscConfig+0x508>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1d      	ldr	r2, [pc, #116]	@ (80035f4 <HAL_RCC_OscConfig+0x508>)
 800357e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003582:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003584:	f7fe fe7e 	bl	8002284 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358c:	f7fe fe7a 	bl	8002284 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e17a      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359e:	4b15      	ldr	r3, [pc, #84]	@ (80035f4 <HAL_RCC_OscConfig+0x508>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d108      	bne.n	80035c4 <HAL_RCC_OscConfig+0x4d8>
 80035b2:	4b0f      	ldr	r3, [pc, #60]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b8:	4a0d      	ldr	r2, [pc, #52]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035c2:	e029      	b.n	8003618 <HAL_RCC_OscConfig+0x52c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b05      	cmp	r3, #5
 80035ca:	d115      	bne.n	80035f8 <HAL_RCC_OscConfig+0x50c>
 80035cc:	4b08      	ldr	r3, [pc, #32]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d2:	4a07      	ldr	r2, [pc, #28]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80035d4:	f043 0304 	orr.w	r3, r3, #4
 80035d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035dc:	4b04      	ldr	r3, [pc, #16]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e2:	4a03      	ldr	r2, [pc, #12]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035ec:	e014      	b.n	8003618 <HAL_RCC_OscConfig+0x52c>
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40007000 	.word	0x40007000
 80035f8:	4b9c      	ldr	r3, [pc, #624]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fe:	4a9b      	ldr	r2, [pc, #620]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003608:	4b98      	ldr	r3, [pc, #608]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360e:	4a97      	ldr	r2, [pc, #604]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003610:	f023 0304 	bic.w	r3, r3, #4
 8003614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d016      	beq.n	800364e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003620:	f7fe fe30 	bl	8002284 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003626:	e00a      	b.n	800363e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003628:	f7fe fe2c 	bl	8002284 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e12a      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363e:	4b8b      	ldr	r3, [pc, #556]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0ed      	beq.n	8003628 <HAL_RCC_OscConfig+0x53c>
 800364c:	e015      	b.n	800367a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364e:	f7fe fe19 	bl	8002284 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003654:	e00a      	b.n	800366c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003656:	f7fe fe15 	bl	8002284 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003664:	4293      	cmp	r3, r2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e113      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800366c:	4b7f      	ldr	r3, [pc, #508]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ed      	bne.n	8003656 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800367a:	7ffb      	ldrb	r3, [r7, #31]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d105      	bne.n	800368c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003680:	4b7a      	ldr	r3, [pc, #488]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003684:	4a79      	ldr	r2, [pc, #484]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800368a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80fe 	beq.w	8003892 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369a:	2b02      	cmp	r3, #2
 800369c:	f040 80d0 	bne.w	8003840 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036a0:	4b72      	ldr	r3, [pc, #456]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f003 0203 	and.w	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d130      	bne.n	8003716 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036be:	3b01      	subs	r3, #1
 80036c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d127      	bne.n	8003716 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d11f      	bne.n	8003716 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036e0:	2a07      	cmp	r2, #7
 80036e2:	bf14      	ite	ne
 80036e4:	2201      	movne	r2, #1
 80036e6:	2200      	moveq	r2, #0
 80036e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d113      	bne.n	8003716 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f8:	085b      	lsrs	r3, r3, #1
 80036fa:	3b01      	subs	r3, #1
 80036fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d109      	bne.n	8003716 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	3b01      	subs	r3, #1
 8003710:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d06e      	beq.n	80037f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	2b0c      	cmp	r3, #12
 800371a:	d069      	beq.n	80037f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800371c:	4b53      	ldr	r3, [pc, #332]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d105      	bne.n	8003734 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003728:	4b50      	ldr	r3, [pc, #320]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0ad      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003738:	4b4c      	ldr	r3, [pc, #304]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a4b      	ldr	r2, [pc, #300]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800373e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003742:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003744:	f7fe fd9e 	bl	8002284 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374c:	f7fe fd9a 	bl	8002284 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e09a      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800375e:	4b43      	ldr	r3, [pc, #268]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800376a:	4b40      	ldr	r3, [pc, #256]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	4b40      	ldr	r3, [pc, #256]	@ (8003870 <HAL_RCC_OscConfig+0x784>)
 8003770:	4013      	ands	r3, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800377a:	3a01      	subs	r2, #1
 800377c:	0112      	lsls	r2, r2, #4
 800377e:	4311      	orrs	r1, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003784:	0212      	lsls	r2, r2, #8
 8003786:	4311      	orrs	r1, r2
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800378c:	0852      	lsrs	r2, r2, #1
 800378e:	3a01      	subs	r2, #1
 8003790:	0552      	lsls	r2, r2, #21
 8003792:	4311      	orrs	r1, r2
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003798:	0852      	lsrs	r2, r2, #1
 800379a:	3a01      	subs	r2, #1
 800379c:	0652      	lsls	r2, r2, #25
 800379e:	4311      	orrs	r1, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037a4:	0912      	lsrs	r2, r2, #4
 80037a6:	0452      	lsls	r2, r2, #17
 80037a8:	430a      	orrs	r2, r1
 80037aa:	4930      	ldr	r1, [pc, #192]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037b0:	4b2e      	ldr	r3, [pc, #184]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a2d      	ldr	r2, [pc, #180]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 80037b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037bc:	4b2b      	ldr	r3, [pc, #172]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4a2a      	ldr	r2, [pc, #168]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 80037c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037c8:	f7fe fd5c 	bl	8002284 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fe fd58 	bl	8002284 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e058      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e2:	4b22      	ldr	r3, [pc, #136]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037ee:	e050      	b.n	8003892 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e04f      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f4:	4b1d      	ldr	r3, [pc, #116]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d148      	bne.n	8003892 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003800:	4b1a      	ldr	r3, [pc, #104]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a19      	ldr	r2, [pc, #100]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003806:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800380a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800380c:	4b17      	ldr	r3, [pc, #92]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	4a16      	ldr	r2, [pc, #88]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003812:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003816:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003818:	f7fe fd34 	bl	8002284 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003820:	f7fe fd30 	bl	8002284 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e030      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003832:	4b0e      	ldr	r3, [pc, #56]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0x734>
 800383e:	e028      	b.n	8003892 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	2b0c      	cmp	r3, #12
 8003844:	d023      	beq.n	800388e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003846:	4b09      	ldr	r3, [pc, #36]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a08      	ldr	r2, [pc, #32]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800384c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003852:	f7fe fd17 	bl	8002284 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003858:	e00c      	b.n	8003874 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385a:	f7fe fd13 	bl	8002284 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d905      	bls.n	8003874 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e013      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
 800386c:	40021000 	.word	0x40021000
 8003870:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003874:	4b09      	ldr	r3, [pc, #36]	@ (800389c <HAL_RCC_OscConfig+0x7b0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1ec      	bne.n	800385a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <HAL_RCC_OscConfig+0x7b0>)
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	4905      	ldr	r1, [pc, #20]	@ (800389c <HAL_RCC_OscConfig+0x7b0>)
 8003886:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <HAL_RCC_OscConfig+0x7b4>)
 8003888:	4013      	ands	r3, r2
 800388a:	60cb      	str	r3, [r1, #12]
 800388c:	e001      	b.n	8003892 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3720      	adds	r7, #32
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000
 80038a0:	feeefffc 	.word	0xfeeefffc

080038a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0e7      	b.n	8003a88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038b8:	4b75      	ldr	r3, [pc, #468]	@ (8003a90 <HAL_RCC_ClockConfig+0x1ec>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d910      	bls.n	80038e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	4b72      	ldr	r3, [pc, #456]	@ (8003a90 <HAL_RCC_ClockConfig+0x1ec>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 0207 	bic.w	r2, r3, #7
 80038ce:	4970      	ldr	r1, [pc, #448]	@ (8003a90 <HAL_RCC_ClockConfig+0x1ec>)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d6:	4b6e      	ldr	r3, [pc, #440]	@ (8003a90 <HAL_RCC_ClockConfig+0x1ec>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d001      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0cf      	b.n	8003a88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d010      	beq.n	8003916 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	4b66      	ldr	r3, [pc, #408]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003900:	429a      	cmp	r2, r3
 8003902:	d908      	bls.n	8003916 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003904:	4b63      	ldr	r3, [pc, #396]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	4960      	ldr	r1, [pc, #384]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d04c      	beq.n	80039bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b03      	cmp	r3, #3
 8003928:	d107      	bne.n	800393a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392a:	4b5a      	ldr	r3, [pc, #360]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d121      	bne.n	800397a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e0a6      	b.n	8003a88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b02      	cmp	r3, #2
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003942:	4b54      	ldr	r3, [pc, #336]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d115      	bne.n	800397a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e09a      	b.n	8003a88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800395a:	4b4e      	ldr	r3, [pc, #312]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e08e      	b.n	8003a88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800396a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e086      	b.n	8003a88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800397a:	4b46      	ldr	r3, [pc, #280]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f023 0203 	bic.w	r2, r3, #3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4943      	ldr	r1, [pc, #268]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 8003988:	4313      	orrs	r3, r2
 800398a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398c:	f7fe fc7a 	bl	8002284 <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003992:	e00a      	b.n	80039aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003994:	f7fe fc76 	bl	8002284 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e06e      	b.n	8003a88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 020c 	and.w	r2, r3, #12
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d1eb      	bne.n	8003994 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d010      	beq.n	80039ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	4b31      	ldr	r3, [pc, #196]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d208      	bcs.n	80039ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	492b      	ldr	r1, [pc, #172]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039ea:	4b29      	ldr	r3, [pc, #164]	@ (8003a90 <HAL_RCC_ClockConfig+0x1ec>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d210      	bcs.n	8003a1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f8:	4b25      	ldr	r3, [pc, #148]	@ (8003a90 <HAL_RCC_ClockConfig+0x1ec>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f023 0207 	bic.w	r2, r3, #7
 8003a00:	4923      	ldr	r1, [pc, #140]	@ (8003a90 <HAL_RCC_ClockConfig+0x1ec>)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a08:	4b21      	ldr	r3, [pc, #132]	@ (8003a90 <HAL_RCC_ClockConfig+0x1ec>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d001      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e036      	b.n	8003a88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d008      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a26:	4b1b      	ldr	r3, [pc, #108]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	4918      	ldr	r1, [pc, #96]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d009      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a44:	4b13      	ldr	r3, [pc, #76]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4910      	ldr	r1, [pc, #64]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a58:	f000 f824 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	490b      	ldr	r1, [pc, #44]	@ (8003a98 <HAL_RCC_ClockConfig+0x1f4>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
 8003a74:	4a09      	ldr	r2, [pc, #36]	@ (8003a9c <HAL_RCC_ClockConfig+0x1f8>)
 8003a76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a78:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1fc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fe fbb1 	bl	80021e4 <HAL_InitTick>
 8003a82:	4603      	mov	r3, r0
 8003a84:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a86:	7afb      	ldrb	r3, [r7, #11]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40022000 	.word	0x40022000
 8003a94:	40021000 	.word	0x40021000
 8003a98:	0800ca5c 	.word	0x0800ca5c
 8003a9c:	20000000 	.word	0x20000000
 8003aa0:	20000004 	.word	0x20000004

08003aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b089      	sub	sp, #36	@ 0x24
 8003aa8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003abc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b0c      	cmp	r3, #12
 8003ad0:	d121      	bne.n	8003b16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d11e      	bne.n	8003b16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ad8:	4b34      	ldr	r3, [pc, #208]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d107      	bne.n	8003af4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ae4:	4b31      	ldr	r3, [pc, #196]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aea:	0a1b      	lsrs	r3, r3, #8
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	61fb      	str	r3, [r7, #28]
 8003af2:	e005      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003af4:	4b2d      	ldr	r3, [pc, #180]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b00:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10d      	bne.n	8003b2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b14:	e00a      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d102      	bne.n	8003b22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b1c:	4b25      	ldr	r3, [pc, #148]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	e004      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b28:	4b23      	ldr	r3, [pc, #140]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	d134      	bne.n	8003b9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b32:	4b1e      	ldr	r3, [pc, #120]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d003      	beq.n	8003b4a <HAL_RCC_GetSysClockFreq+0xa6>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d003      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0xac>
 8003b48:	e005      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b4c:	617b      	str	r3, [r7, #20]
      break;
 8003b4e:	e005      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b50:	4b19      	ldr	r3, [pc, #100]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b52:	617b      	str	r3, [r7, #20]
      break;
 8003b54:	e002      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	617b      	str	r3, [r7, #20]
      break;
 8003b5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b5c:	4b13      	ldr	r3, [pc, #76]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	3301      	adds	r3, #1
 8003b68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b6a:	4b10      	ldr	r3, [pc, #64]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	fb03 f202 	mul.w	r2, r3, r2
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b82:	4b0a      	ldr	r3, [pc, #40]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	0e5b      	lsrs	r3, r3, #25
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b9c:	69bb      	ldr	r3, [r7, #24]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3724      	adds	r7, #36	@ 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	0800ca74 	.word	0x0800ca74
 8003bb4:	00f42400 	.word	0x00f42400
 8003bb8:	007a1200 	.word	0x007a1200

08003bbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	@ (8003bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000000 	.word	0x20000000

08003bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bd8:	f7ff fff0 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	4904      	ldr	r1, [pc, #16]	@ (8003bfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bea:	5ccb      	ldrb	r3, [r1, r3]
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	0800ca6c 	.word	0x0800ca6c

08003c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c04:	f7ff ffda 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b06      	ldr	r3, [pc, #24]	@ (8003c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	0adb      	lsrs	r3, r3, #11
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	4904      	ldr	r1, [pc, #16]	@ (8003c28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000
 8003c28:	0800ca6c 	.word	0x0800ca6c

08003c2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c38:	4b2a      	ldr	r3, [pc, #168]	@ (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c44:	f7ff f9ee 	bl	8003024 <HAL_PWREx_GetVoltageRange>
 8003c48:	6178      	str	r0, [r7, #20]
 8003c4a:	e014      	b.n	8003c76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c4c:	4b25      	ldr	r3, [pc, #148]	@ (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c50:	4a24      	ldr	r2, [pc, #144]	@ (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c56:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c58:	4b22      	ldr	r3, [pc, #136]	@ (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c64:	f7ff f9de 	bl	8003024 <HAL_PWREx_GetVoltageRange>
 8003c68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c7c:	d10b      	bne.n	8003c96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b80      	cmp	r3, #128	@ 0x80
 8003c82:	d919      	bls.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c88:	d902      	bls.n	8003c90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	e013      	b.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c90:	2301      	movs	r3, #1
 8003c92:	613b      	str	r3, [r7, #16]
 8003c94:	e010      	b.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b80      	cmp	r3, #128	@ 0x80
 8003c9a:	d902      	bls.n	8003ca2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	e00a      	b.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b80      	cmp	r3, #128	@ 0x80
 8003ca6:	d102      	bne.n	8003cae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ca8:	2302      	movs	r3, #2
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	e004      	b.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b70      	cmp	r3, #112	@ 0x70
 8003cb2:	d101      	bne.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f023 0207 	bic.w	r2, r3, #7
 8003cc0:	4909      	ldr	r1, [pc, #36]	@ (8003ce8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cc8:	4b07      	ldr	r3, [pc, #28]	@ (8003ce8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d001      	beq.n	8003cda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40022000 	.word	0x40022000

08003cec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d041      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d0c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d10:	d02a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d12:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d16:	d824      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d1c:	d008      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d22:	d81e      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d2c:	d010      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d2e:	e018      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d30:	4b86      	ldr	r3, [pc, #536]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4a85      	ldr	r2, [pc, #532]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d3c:	e015      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3304      	adds	r3, #4
 8003d42:	2100      	movs	r1, #0
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fabb 	bl	80042c0 <RCCEx_PLLSAI1_Config>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d4e:	e00c      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3320      	adds	r3, #32
 8003d54:	2100      	movs	r1, #0
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fba6 	bl	80044a8 <RCCEx_PLLSAI2_Config>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d60:	e003      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	74fb      	strb	r3, [r7, #19]
      break;
 8003d66:	e000      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d6a:	7cfb      	ldrb	r3, [r7, #19]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10b      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d70:	4b76      	ldr	r3, [pc, #472]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d7e:	4973      	ldr	r1, [pc, #460]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d86:	e001      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d041      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003da0:	d02a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003da2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003da6:	d824      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003da8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dac:	d008      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003db2:	d81e      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003db8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dbc:	d010      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dbe:	e018      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dc0:	4b62      	ldr	r3, [pc, #392]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a61      	ldr	r2, [pc, #388]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003dcc:	e015      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fa73 	bl	80042c0 <RCCEx_PLLSAI1_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003dde:	e00c      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3320      	adds	r3, #32
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fb5e 	bl	80044a8 <RCCEx_PLLSAI2_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003df0:	e003      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	74fb      	strb	r3, [r7, #19]
      break;
 8003df6:	e000      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dfa:	7cfb      	ldrb	r3, [r7, #19]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10b      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e00:	4b52      	ldr	r3, [pc, #328]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e0e:	494f      	ldr	r1, [pc, #316]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e16:	e001      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80a0 	beq.w	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e2e:	4b47      	ldr	r3, [pc, #284]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00d      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e44:	4b41      	ldr	r3, [pc, #260]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e48:	4a40      	ldr	r2, [pc, #256]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e50:	4b3e      	ldr	r3, [pc, #248]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e60:	4b3b      	ldr	r3, [pc, #236]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a3a      	ldr	r2, [pc, #232]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e6c:	f7fe fa0a 	bl	8002284 <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e72:	e009      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e74:	f7fe fa06 	bl	8002284 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d902      	bls.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	74fb      	strb	r3, [r7, #19]
        break;
 8003e86:	e005      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e88:	4b31      	ldr	r3, [pc, #196]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ef      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e94:	7cfb      	ldrb	r3, [r7, #19]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d15c      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01f      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d019      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003eb8:	4b24      	ldr	r3, [pc, #144]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ec2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ec4:	4b21      	ldr	r3, [pc, #132]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eca:	4a20      	ldr	r2, [pc, #128]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eda:	4a1c      	ldr	r2, [pc, #112]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003edc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ee4:	4a19      	ldr	r2, [pc, #100]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d016      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef6:	f7fe f9c5 	bl	8002284 <HAL_GetTick>
 8003efa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efc:	e00b      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fe f9c1 	bl	8002284 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d902      	bls.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	74fb      	strb	r3, [r7, #19]
            break;
 8003f14:	e006      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f16:	4b0d      	ldr	r3, [pc, #52]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0ec      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003f24:	7cfb      	ldrb	r3, [r7, #19]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10c      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f2a:	4b08      	ldr	r3, [pc, #32]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f3a:	4904      	ldr	r1, [pc, #16]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f42:	e009      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f44:	7cfb      	ldrb	r3, [r7, #19]
 8003f46:	74bb      	strb	r3, [r7, #18]
 8003f48:	e006      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f4a:	bf00      	nop
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f54:	7cfb      	ldrb	r3, [r7, #19]
 8003f56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f58:	7c7b      	ldrb	r3, [r7, #17]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d105      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5e:	4b9e      	ldr	r3, [pc, #632]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f62:	4a9d      	ldr	r2, [pc, #628]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f76:	4b98      	ldr	r3, [pc, #608]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7c:	f023 0203 	bic.w	r2, r3, #3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f84:	4994      	ldr	r1, [pc, #592]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f98:	4b8f      	ldr	r3, [pc, #572]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9e:	f023 020c 	bic.w	r2, r3, #12
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa6:	498c      	ldr	r1, [pc, #560]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fba:	4b87      	ldr	r3, [pc, #540]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	4983      	ldr	r1, [pc, #524]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fea:	497b      	ldr	r1, [pc, #492]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ffe:	4b76      	ldr	r3, [pc, #472]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004004:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800400c:	4972      	ldr	r1, [pc, #456]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004020:	4b6d      	ldr	r3, [pc, #436]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004026:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800402e:	496a      	ldr	r1, [pc, #424]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004042:	4b65      	ldr	r3, [pc, #404]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004048:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004050:	4961      	ldr	r1, [pc, #388]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004064:	4b5c      	ldr	r3, [pc, #368]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004072:	4959      	ldr	r1, [pc, #356]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004086:	4b54      	ldr	r3, [pc, #336]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004094:	4950      	ldr	r1, [pc, #320]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040a8:	4b4b      	ldr	r3, [pc, #300]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b6:	4948      	ldr	r1, [pc, #288]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040ca:	4b43      	ldr	r3, [pc, #268]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d8:	493f      	ldr	r1, [pc, #252]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d028      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040ec:	4b3a      	ldr	r3, [pc, #232]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040fa:	4937      	ldr	r1, [pc, #220]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004106:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800410a:	d106      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800410c:	4b32      	ldr	r3, [pc, #200]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	4a31      	ldr	r2, [pc, #196]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004112:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004116:	60d3      	str	r3, [r2, #12]
 8004118:	e011      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800411e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004122:	d10c      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3304      	adds	r3, #4
 8004128:	2101      	movs	r1, #1
 800412a:	4618      	mov	r0, r3
 800412c:	f000 f8c8 	bl	80042c0 <RCCEx_PLLSAI1_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800413a:	7cfb      	ldrb	r3, [r7, #19]
 800413c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d028      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800414a:	4b23      	ldr	r3, [pc, #140]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004150:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004158:	491f      	ldr	r1, [pc, #124]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004164:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004168:	d106      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800416a:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	4a1a      	ldr	r2, [pc, #104]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004170:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004174:	60d3      	str	r3, [r2, #12]
 8004176:	e011      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004180:	d10c      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3304      	adds	r3, #4
 8004186:	2101      	movs	r1, #1
 8004188:	4618      	mov	r0, r3
 800418a:	f000 f899 	bl	80042c0 <RCCEx_PLLSAI1_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004192:	7cfb      	ldrb	r3, [r7, #19]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d02b      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041a8:	4b0b      	ldr	r3, [pc, #44]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041b6:	4908      	ldr	r1, [pc, #32]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041c6:	d109      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041c8:	4b03      	ldr	r3, [pc, #12]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4a02      	ldr	r2, [pc, #8]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041d2:	60d3      	str	r3, [r2, #12]
 80041d4:	e014      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041e4:	d10c      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3304      	adds	r3, #4
 80041ea:	2101      	movs	r1, #1
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 f867 	bl	80042c0 <RCCEx_PLLSAI1_Config>
 80041f2:	4603      	mov	r3, r0
 80041f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041f6:	7cfb      	ldrb	r3, [r7, #19]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80041fc:	7cfb      	ldrb	r3, [r7, #19]
 80041fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d02f      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800420c:	4b2b      	ldr	r3, [pc, #172]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004212:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800421a:	4928      	ldr	r1, [pc, #160]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004226:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800422a:	d10d      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3304      	adds	r3, #4
 8004230:	2102      	movs	r1, #2
 8004232:	4618      	mov	r0, r3
 8004234:	f000 f844 	bl	80042c0 <RCCEx_PLLSAI1_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800423c:	7cfb      	ldrb	r3, [r7, #19]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d014      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004242:	7cfb      	ldrb	r3, [r7, #19]
 8004244:	74bb      	strb	r3, [r7, #18]
 8004246:	e011      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800424c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004250:	d10c      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3320      	adds	r3, #32
 8004256:	2102      	movs	r1, #2
 8004258:	4618      	mov	r0, r3
 800425a:	f000 f925 	bl	80044a8 <RCCEx_PLLSAI2_Config>
 800425e:	4603      	mov	r3, r0
 8004260:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004262:	7cfb      	ldrb	r3, [r7, #19]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004268:	7cfb      	ldrb	r3, [r7, #19]
 800426a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004278:	4b10      	ldr	r3, [pc, #64]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004286:	490d      	ldr	r1, [pc, #52]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00b      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800429a:	4b08      	ldr	r3, [pc, #32]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042aa:	4904      	ldr	r1, [pc, #16]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40021000 	.word	0x40021000

080042c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042ce:	4b75      	ldr	r3, [pc, #468]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d018      	beq.n	800430c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042da:	4b72      	ldr	r3, [pc, #456]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f003 0203 	and.w	r2, r3, #3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d10d      	bne.n	8004306 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
       ||
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80042f2:	4b6c      	ldr	r3, [pc, #432]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	091b      	lsrs	r3, r3, #4
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
       ||
 8004302:	429a      	cmp	r2, r3
 8004304:	d047      	beq.n	8004396 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	73fb      	strb	r3, [r7, #15]
 800430a:	e044      	b.n	8004396 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b03      	cmp	r3, #3
 8004312:	d018      	beq.n	8004346 <RCCEx_PLLSAI1_Config+0x86>
 8004314:	2b03      	cmp	r3, #3
 8004316:	d825      	bhi.n	8004364 <RCCEx_PLLSAI1_Config+0xa4>
 8004318:	2b01      	cmp	r3, #1
 800431a:	d002      	beq.n	8004322 <RCCEx_PLLSAI1_Config+0x62>
 800431c:	2b02      	cmp	r3, #2
 800431e:	d009      	beq.n	8004334 <RCCEx_PLLSAI1_Config+0x74>
 8004320:	e020      	b.n	8004364 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004322:	4b60      	ldr	r3, [pc, #384]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d11d      	bne.n	800436a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004332:	e01a      	b.n	800436a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004334:	4b5b      	ldr	r3, [pc, #364]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800433c:	2b00      	cmp	r3, #0
 800433e:	d116      	bne.n	800436e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004344:	e013      	b.n	800436e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004346:	4b57      	ldr	r3, [pc, #348]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10f      	bne.n	8004372 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004352:	4b54      	ldr	r3, [pc, #336]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d109      	bne.n	8004372 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004362:	e006      	b.n	8004372 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	73fb      	strb	r3, [r7, #15]
      break;
 8004368:	e004      	b.n	8004374 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800436a:	bf00      	nop
 800436c:	e002      	b.n	8004374 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800436e:	bf00      	nop
 8004370:	e000      	b.n	8004374 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004372:	bf00      	nop
    }

    if(status == HAL_OK)
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10d      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800437a:	4b4a      	ldr	r3, [pc, #296]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6819      	ldr	r1, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	3b01      	subs	r3, #1
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	430b      	orrs	r3, r1
 8004390:	4944      	ldr	r1, [pc, #272]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004392:	4313      	orrs	r3, r2
 8004394:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d17d      	bne.n	8004498 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800439c:	4b41      	ldr	r3, [pc, #260]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a40      	ldr	r2, [pc, #256]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a8:	f7fd ff6c 	bl	8002284 <HAL_GetTick>
 80043ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043ae:	e009      	b.n	80043c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043b0:	f7fd ff68 	bl	8002284 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d902      	bls.n	80043c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	73fb      	strb	r3, [r7, #15]
        break;
 80043c2:	e005      	b.n	80043d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043c4:	4b37      	ldr	r3, [pc, #220]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1ef      	bne.n	80043b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d160      	bne.n	8004498 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d111      	bne.n	8004400 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043dc:	4b31      	ldr	r3, [pc, #196]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80043e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6892      	ldr	r2, [r2, #8]
 80043ec:	0211      	lsls	r1, r2, #8
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68d2      	ldr	r2, [r2, #12]
 80043f2:	0912      	lsrs	r2, r2, #4
 80043f4:	0452      	lsls	r2, r2, #17
 80043f6:	430a      	orrs	r2, r1
 80043f8:	492a      	ldr	r1, [pc, #168]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	610b      	str	r3, [r1, #16]
 80043fe:	e027      	b.n	8004450 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d112      	bne.n	800442c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004406:	4b27      	ldr	r3, [pc, #156]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800440e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6892      	ldr	r2, [r2, #8]
 8004416:	0211      	lsls	r1, r2, #8
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6912      	ldr	r2, [r2, #16]
 800441c:	0852      	lsrs	r2, r2, #1
 800441e:	3a01      	subs	r2, #1
 8004420:	0552      	lsls	r2, r2, #21
 8004422:	430a      	orrs	r2, r1
 8004424:	491f      	ldr	r1, [pc, #124]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004426:	4313      	orrs	r3, r2
 8004428:	610b      	str	r3, [r1, #16]
 800442a:	e011      	b.n	8004450 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800442c:	4b1d      	ldr	r3, [pc, #116]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004434:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6892      	ldr	r2, [r2, #8]
 800443c:	0211      	lsls	r1, r2, #8
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6952      	ldr	r2, [r2, #20]
 8004442:	0852      	lsrs	r2, r2, #1
 8004444:	3a01      	subs	r2, #1
 8004446:	0652      	lsls	r2, r2, #25
 8004448:	430a      	orrs	r2, r1
 800444a:	4916      	ldr	r1, [pc, #88]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800444c:	4313      	orrs	r3, r2
 800444e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004450:	4b14      	ldr	r3, [pc, #80]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a13      	ldr	r2, [pc, #76]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004456:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800445a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445c:	f7fd ff12 	bl	8002284 <HAL_GetTick>
 8004460:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004462:	e009      	b.n	8004478 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004464:	f7fd ff0e 	bl	8002284 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d902      	bls.n	8004478 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	73fb      	strb	r3, [r7, #15]
          break;
 8004476:	e005      	b.n	8004484 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004478:	4b0a      	ldr	r3, [pc, #40]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0ef      	beq.n	8004464 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800448a:	4b06      	ldr	r3, [pc, #24]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800448c:	691a      	ldr	r2, [r3, #16]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	4904      	ldr	r1, [pc, #16]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004494:	4313      	orrs	r3, r2
 8004496:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004498:	7bfb      	ldrb	r3, [r7, #15]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000

080044a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d018      	beq.n	80044f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044c2:	4b67      	ldr	r3, [pc, #412]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f003 0203 	and.w	r2, r3, #3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d10d      	bne.n	80044ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
       ||
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d009      	beq.n	80044ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044da:	4b61      	ldr	r3, [pc, #388]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	091b      	lsrs	r3, r3, #4
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
       ||
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d047      	beq.n	800457e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
 80044f2:	e044      	b.n	800457e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d018      	beq.n	800452e <RCCEx_PLLSAI2_Config+0x86>
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d825      	bhi.n	800454c <RCCEx_PLLSAI2_Config+0xa4>
 8004500:	2b01      	cmp	r3, #1
 8004502:	d002      	beq.n	800450a <RCCEx_PLLSAI2_Config+0x62>
 8004504:	2b02      	cmp	r3, #2
 8004506:	d009      	beq.n	800451c <RCCEx_PLLSAI2_Config+0x74>
 8004508:	e020      	b.n	800454c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800450a:	4b55      	ldr	r3, [pc, #340]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d11d      	bne.n	8004552 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800451a:	e01a      	b.n	8004552 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800451c:	4b50      	ldr	r3, [pc, #320]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004524:	2b00      	cmp	r3, #0
 8004526:	d116      	bne.n	8004556 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800452c:	e013      	b.n	8004556 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800452e:	4b4c      	ldr	r3, [pc, #304]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10f      	bne.n	800455a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800453a:	4b49      	ldr	r3, [pc, #292]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800454a:	e006      	b.n	800455a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
      break;
 8004550:	e004      	b.n	800455c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004552:	bf00      	nop
 8004554:	e002      	b.n	800455c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800455a:	bf00      	nop
    }

    if(status == HAL_OK)
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10d      	bne.n	800457e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004562:	4b3f      	ldr	r3, [pc, #252]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6819      	ldr	r1, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	3b01      	subs	r3, #1
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	430b      	orrs	r3, r1
 8004578:	4939      	ldr	r1, [pc, #228]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 800457a:	4313      	orrs	r3, r2
 800457c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d167      	bne.n	8004654 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004584:	4b36      	ldr	r3, [pc, #216]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a35      	ldr	r2, [pc, #212]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 800458a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800458e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004590:	f7fd fe78 	bl	8002284 <HAL_GetTick>
 8004594:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004596:	e009      	b.n	80045ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004598:	f7fd fe74 	bl	8002284 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d902      	bls.n	80045ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	73fb      	strb	r3, [r7, #15]
        break;
 80045aa:	e005      	b.n	80045b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045ac:	4b2c      	ldr	r3, [pc, #176]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ef      	bne.n	8004598 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d14a      	bne.n	8004654 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d111      	bne.n	80045e8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045c4:	4b26      	ldr	r3, [pc, #152]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80045cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6892      	ldr	r2, [r2, #8]
 80045d4:	0211      	lsls	r1, r2, #8
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	68d2      	ldr	r2, [r2, #12]
 80045da:	0912      	lsrs	r2, r2, #4
 80045dc:	0452      	lsls	r2, r2, #17
 80045de:	430a      	orrs	r2, r1
 80045e0:	491f      	ldr	r1, [pc, #124]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	614b      	str	r3, [r1, #20]
 80045e6:	e011      	b.n	800460c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80045f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6892      	ldr	r2, [r2, #8]
 80045f8:	0211      	lsls	r1, r2, #8
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6912      	ldr	r2, [r2, #16]
 80045fe:	0852      	lsrs	r2, r2, #1
 8004600:	3a01      	subs	r2, #1
 8004602:	0652      	lsls	r2, r2, #25
 8004604:	430a      	orrs	r2, r1
 8004606:	4916      	ldr	r1, [pc, #88]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004608:	4313      	orrs	r3, r2
 800460a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800460c:	4b14      	ldr	r3, [pc, #80]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a13      	ldr	r2, [pc, #76]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004616:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004618:	f7fd fe34 	bl	8002284 <HAL_GetTick>
 800461c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800461e:	e009      	b.n	8004634 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004620:	f7fd fe30 	bl	8002284 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d902      	bls.n	8004634 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	73fb      	strb	r3, [r7, #15]
          break;
 8004632:	e005      	b.n	8004640 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004634:	4b0a      	ldr	r3, [pc, #40]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ef      	beq.n	8004620 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004646:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004648:	695a      	ldr	r2, [r3, #20]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	4904      	ldr	r1, [pc, #16]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004650:	4313      	orrs	r3, r2
 8004652:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004654:	7bfb      	ldrb	r3, [r7, #15]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000

08004664 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e095      	b.n	80047a2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467a:	2b00      	cmp	r3, #0
 800467c:	d108      	bne.n	8004690 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004686:	d009      	beq.n	800469c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	61da      	str	r2, [r3, #28]
 800468e:	e005      	b.n	800469c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fd f8fe 	bl	80018b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046dc:	d902      	bls.n	80046e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e002      	b.n	80046ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80046e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80046f2:	d007      	beq.n	8004704 <HAL_SPI_Init+0xa0>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046fc:	d002      	beq.n	8004704 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004746:	ea42 0103 	orr.w	r1, r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	0c1b      	lsrs	r3, r3, #16
 8004760:	f003 0204 	and.w	r2, r3, #4
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004780:	ea42 0103 	orr.w	r1, r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b088      	sub	sp, #32
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	4613      	mov	r3, r2
 80047b8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047ba:	f7fd fd63 	bl	8002284 <HAL_GetTick>
 80047be:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d001      	beq.n	80047d4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80047d0:	2302      	movs	r3, #2
 80047d2:	e15c      	b.n	8004a8e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_SPI_Transmit+0x36>
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e154      	b.n	8004a8e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d101      	bne.n	80047f2 <HAL_SPI_Transmit+0x48>
 80047ee:	2302      	movs	r3, #2
 80047f0:	e14d      	b.n	8004a8e <HAL_SPI_Transmit+0x2e4>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2203      	movs	r2, #3
 80047fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	88fa      	ldrh	r2, [r7, #6]
 8004812:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	88fa      	ldrh	r2, [r7, #6]
 8004818:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004844:	d10f      	bne.n	8004866 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004854:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004864:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004870:	2b40      	cmp	r3, #64	@ 0x40
 8004872:	d007      	beq.n	8004884 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004882:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800488c:	d952      	bls.n	8004934 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_SPI_Transmit+0xf2>
 8004896:	8b7b      	ldrh	r3, [r7, #26]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d145      	bne.n	8004928 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a0:	881a      	ldrh	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ac:	1c9a      	adds	r2, r3, #2
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048c0:	e032      	b.n	8004928 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d112      	bne.n	80048f6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d4:	881a      	ldrh	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e0:	1c9a      	adds	r2, r3, #2
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048f4:	e018      	b.n	8004928 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048f6:	f7fd fcc5 	bl	8002284 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d803      	bhi.n	800490e <HAL_SPI_Transmit+0x164>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490c:	d102      	bne.n	8004914 <HAL_SPI_Transmit+0x16a>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d109      	bne.n	8004928 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e0b2      	b.n	8004a8e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1c7      	bne.n	80048c2 <HAL_SPI_Transmit+0x118>
 8004932:	e083      	b.n	8004a3c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <HAL_SPI_Transmit+0x198>
 800493c:	8b7b      	ldrh	r3, [r7, #26]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d177      	bne.n	8004a32 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004946:	b29b      	uxth	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	d912      	bls.n	8004972 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004950:	881a      	ldrh	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495c:	1c9a      	adds	r2, r3, #2
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b02      	subs	r3, #2
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004970:	e05f      	b.n	8004a32 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	7812      	ldrb	r2, [r2, #0]
 800497e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800498e:	b29b      	uxth	r3, r3
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004998:	e04b      	b.n	8004a32 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d12b      	bne.n	8004a00 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d912      	bls.n	80049d8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b6:	881a      	ldrh	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c2:	1c9a      	adds	r2, r3, #2
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b02      	subs	r3, #2
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049d6:	e02c      	b.n	8004a32 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	330c      	adds	r3, #12
 80049e2:	7812      	ldrb	r2, [r2, #0]
 80049e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049fe:	e018      	b.n	8004a32 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a00:	f7fd fc40 	bl	8002284 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d803      	bhi.n	8004a18 <HAL_SPI_Transmit+0x26e>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a16:	d102      	bne.n	8004a1e <HAL_SPI_Transmit+0x274>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e02d      	b.n	8004a8e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1ae      	bne.n	800499a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	6839      	ldr	r1, [r7, #0]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 fa67 	bl	8004f14 <SPI_EndRxTxTransaction>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
  }
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3720      	adds	r7, #32
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	099b      	lsrs	r3, r3, #6
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10f      	bne.n	8004adc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	099b      	lsrs	r3, r3, #6
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d004      	beq.n	8004adc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4798      	blx	r3
    return;
 8004ada:	e0d7      	b.n	8004c8c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	085b      	lsrs	r3, r3, #1
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <HAL_SPI_IRQHandler+0x66>
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	09db      	lsrs	r3, r3, #7
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d004      	beq.n	8004afe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
    return;
 8004afc:	e0c6      	b.n	8004c8c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10c      	bne.n	8004b24 <HAL_SPI_IRQHandler+0x8c>
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	099b      	lsrs	r3, r3, #6
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	0a1b      	lsrs	r3, r3, #8
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 80b4 	beq.w	8004c8c <HAL_SPI_IRQHandler+0x1f4>
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80ad 	beq.w	8004c8c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	099b      	lsrs	r3, r3, #6
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d023      	beq.n	8004b86 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d011      	beq.n	8004b6e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b4e:	f043 0204 	orr.w	r2, r3, #4
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	e00b      	b.n	8004b86 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b6e:	2300      	movs	r3, #0
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	613b      	str	r3, [r7, #16]
 8004b82:	693b      	ldr	r3, [r7, #16]
        return;
 8004b84:	e082      	b.n	8004c8c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d014      	beq.n	8004bbc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b96:	f043 0201 	orr.w	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	0a1b      	lsrs	r3, r3, #8
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00c      	beq.n	8004be2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bcc:	f043 0208 	orr.w	r2, r3, #8
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d04f      	beq.n	8004c8a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004bf8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d104      	bne.n	8004c16 <HAL_SPI_IRQHandler+0x17e>
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d034      	beq.n	8004c80 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0203 	bic.w	r2, r2, #3
 8004c24:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d011      	beq.n	8004c52 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c32:	4a18      	ldr	r2, [pc, #96]	@ (8004c94 <HAL_SPI_IRQHandler+0x1fc>)
 8004c34:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fd fdba 	bl	80027b4 <HAL_DMA_Abort_IT>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d016      	beq.n	8004c88 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8004c94 <HAL_SPI_IRQHandler+0x1fc>)
 8004c60:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fd fda4 	bl	80027b4 <HAL_DMA_Abort_IT>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004c7e:	e003      	b.n	8004c88 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f809 	bl	8004c98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004c86:	e000      	b.n	8004c8a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004c88:	bf00      	nop
    return;
 8004c8a:	bf00      	nop
  }
}
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	08004cad 	.word	0x08004cad

08004c98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f7ff ffe5 	bl	8004c98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cce:	bf00      	nop
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
	...

08004cd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	603b      	str	r3, [r7, #0]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ce8:	f7fd facc 	bl	8002284 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cf8:	f7fd fac4 	bl	8002284 <HAL_GetTick>
 8004cfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cfe:	4b39      	ldr	r3, [pc, #228]	@ (8004de4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	015b      	lsls	r3, r3, #5
 8004d04:	0d1b      	lsrs	r3, r3, #20
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	fb02 f303 	mul.w	r3, r2, r3
 8004d0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d0e:	e054      	b.n	8004dba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d16:	d050      	beq.n	8004dba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d18:	f7fd fab4 	bl	8002284 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d902      	bls.n	8004d2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d13d      	bne.n	8004daa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d46:	d111      	bne.n	8004d6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d50:	d004      	beq.n	8004d5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d5a:	d107      	bne.n	8004d6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d74:	d10f      	bne.n	8004d96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e017      	b.n	8004dda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	bf0c      	ite	eq
 8004dca:	2301      	moveq	r3, #1
 8004dcc:	2300      	movne	r3, #0
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	79fb      	ldrb	r3, [r7, #7]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d19b      	bne.n	8004d10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3720      	adds	r7, #32
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000000 	.word	0x20000000

08004de8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	@ 0x28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004df6:	2300      	movs	r3, #0
 8004df8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004dfa:	f7fd fa43 	bl	8002284 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e02:	1a9b      	subs	r3, r3, r2
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	4413      	add	r3, r2
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004e0a:	f7fd fa3b 	bl	8002284 <HAL_GetTick>
 8004e0e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	330c      	adds	r3, #12
 8004e16:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e18:	4b3d      	ldr	r3, [pc, #244]	@ (8004f10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	00da      	lsls	r2, r3, #3
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	0d1b      	lsrs	r3, r3, #20
 8004e28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e2a:	fb02 f303 	mul.w	r3, r2, r3
 8004e2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e30:	e060      	b.n	8004ef4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004e38:	d107      	bne.n	8004e4a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d104      	bne.n	8004e4a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d050      	beq.n	8004ef4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e52:	f7fd fa17 	bl	8002284 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d902      	bls.n	8004e68 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d13d      	bne.n	8004ee4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e80:	d111      	bne.n	8004ea6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e8a:	d004      	beq.n	8004e96 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e94:	d107      	bne.n	8004ea6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ea4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eae:	d10f      	bne.n	8004ed0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ece:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e010      	b.n	8004f06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4013      	ands	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d196      	bne.n	8004e32 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3728      	adds	r7, #40	@ 0x28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000000 	.word	0x20000000

08004f14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7ff ff5b 	bl	8004de8 <SPI_WaitFifoStateUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d007      	beq.n	8004f48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f3c:	f043 0220 	orr.w	r2, r3, #32
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e027      	b.n	8004f98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2180      	movs	r1, #128	@ 0x80
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7ff fec0 	bl	8004cd8 <SPI_WaitFlagStateUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f62:	f043 0220 	orr.w	r2, r3, #32
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e014      	b.n	8004f98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f7ff ff34 	bl	8004de8 <SPI_WaitFifoStateUntilTimeout>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f8a:	f043 0220 	orr.w	r2, r3, #32
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e000      	b.n	8004f98 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e040      	b.n	8005034 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fc ff1c 	bl	8001e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2224      	movs	r2, #36	@ 0x24
 8004fcc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0201 	bic.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 ff48 	bl	8005e7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fc8d 	bl	800590c <UART_SetConfig>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e01b      	b.n	8005034 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800500a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800501a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 ffc7 	bl	8005fc0 <UART_CheckIdleState>
 8005032:	4603      	mov	r3, r0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	@ 0x28
 8005040:	af02      	add	r7, sp, #8
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	4613      	mov	r3, r2
 800504a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005050:	2b20      	cmp	r3, #32
 8005052:	d177      	bne.n	8005144 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_UART_Transmit+0x24>
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e070      	b.n	8005146 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2221      	movs	r2, #33	@ 0x21
 8005070:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005072:	f7fd f907 	bl	8002284 <HAL_GetTick>
 8005076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	88fa      	ldrh	r2, [r7, #6]
 800507c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	88fa      	ldrh	r2, [r7, #6]
 8005084:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005090:	d108      	bne.n	80050a4 <HAL_UART_Transmit+0x68>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d104      	bne.n	80050a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	e003      	b.n	80050ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050a8:	2300      	movs	r3, #0
 80050aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050ac:	e02f      	b.n	800510e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2200      	movs	r2, #0
 80050b6:	2180      	movs	r1, #128	@ 0x80
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f001 f829 	bl	8006110 <UART_WaitOnFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d004      	beq.n	80050ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e03b      	b.n	8005146 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10b      	bne.n	80050ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	881a      	ldrh	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050e0:	b292      	uxth	r2, r2
 80050e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	3302      	adds	r3, #2
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	e007      	b.n	80050fc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	781a      	ldrb	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	3301      	adds	r3, #1
 80050fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1c9      	bne.n	80050ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2200      	movs	r2, #0
 8005122:	2140      	movs	r1, #64	@ 0x40
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 fff3 	bl	8006110 <UART_WaitOnFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d004      	beq.n	800513a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e005      	b.n	8005146 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	e000      	b.n	8005146 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005144:	2302      	movs	r3, #2
  }
}
 8005146:	4618      	mov	r0, r3
 8005148:	3720      	adds	r7, #32
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b09a      	sub	sp, #104	@ 0x68
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
#else
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005166:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800516a:	667b      	str	r3, [r7, #100]	@ 0x64
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005174:	657b      	str	r3, [r7, #84]	@ 0x54
 8005176:	653a      	str	r2, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800517a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e6      	bne.n	8005156 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3308      	adds	r3, #8
 800518e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005192:	e853 3f00 	ldrex	r3, [r3]
 8005196:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519a:	f023 0301 	bic.w	r3, r3, #1
 800519e:	663b      	str	r3, [r7, #96]	@ 0x60
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3308      	adds	r3, #8
 80051a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80051a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80051aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051b0:	e841 2300 	strex	r3, r2, [r1]
 80051b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1e5      	bne.n	8005188 <HAL_UART_AbortReceive+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d118      	bne.n	80051f6 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f023 0310 	bic.w	r3, r3, #16
 80051d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051e4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e6      	bne.n	80051c4 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005200:	2b40      	cmp	r3, #64	@ 0x40
 8005202:	d137      	bne.n	8005274 <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3308      	adds	r3, #8
 800520a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	60bb      	str	r3, [r7, #8]
   return(result);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800521a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3308      	adds	r3, #8
 8005222:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005224:	61ba      	str	r2, [r7, #24]
 8005226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	6979      	ldr	r1, [r7, #20]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	613b      	str	r3, [r7, #16]
   return(result);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e5      	bne.n	8005204 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800523c:	2b00      	cmp	r3, #0
 800523e:	d019      	beq.n	8005274 <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005244:	2200      	movs	r2, #0
 8005246:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800524c:	4618      	mov	r0, r3
 800524e:	f7fd fa73 	bl	8002738 <HAL_DMA_Abort>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00d      	beq.n	8005274 <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800525c:	4618      	mov	r0, r3
 800525e:	f7fd fb99 	bl	8002994 <HAL_DMA_GetError>
 8005262:	4603      	mov	r3, r0
 8005264:	2b20      	cmp	r3, #32
 8005266:	d105      	bne.n	8005274 <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2210      	movs	r2, #16
 800526c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e019      	b.n	80052a8 <HAL_UART_AbortReceive+0x15a>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	220f      	movs	r2, #15
 8005282:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	8b1b      	ldrh	r3, [r3, #24]
 800528a:	b29a      	uxth	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f042 0208 	orr.w	r2, r2, #8
 8005294:	b292      	uxth	r2, r2
 8005296:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2220      	movs	r2, #32
 800529c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3768      	adds	r7, #104	@ 0x68
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b0ba      	sub	sp, #232	@ 0xe8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80052da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80052de:	4013      	ands	r3, r2
 80052e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80052e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d115      	bne.n	8005318 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80052ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f0:	f003 0320 	and.w	r3, r3, #32
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00f      	beq.n	8005318 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d009      	beq.n	8005318 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 82ca 	beq.w	80058a2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	4798      	blx	r3
      }
      return;
 8005316:	e2c4      	b.n	80058a2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 8117 	beq.w	8005550 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800532e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005332:	4b85      	ldr	r3, [pc, #532]	@ (8005548 <HAL_UART_IRQHandler+0x298>)
 8005334:	4013      	ands	r3, r2
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 810a 	beq.w	8005550 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800533c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d011      	beq.n	800536c <HAL_UART_IRQHandler+0xbc>
 8005348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800534c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00b      	beq.n	800536c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2201      	movs	r2, #1
 800535a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005362:	f043 0201 	orr.w	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800536c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d011      	beq.n	800539c <HAL_UART_IRQHandler+0xec>
 8005378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00b      	beq.n	800539c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2202      	movs	r2, #2
 800538a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005392:	f043 0204 	orr.w	r2, r3, #4
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800539c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d011      	beq.n	80053cc <HAL_UART_IRQHandler+0x11c>
 80053a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00b      	beq.n	80053cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2204      	movs	r2, #4
 80053ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053c2:	f043 0202 	orr.w	r2, r3, #2
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d017      	beq.n	8005408 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d105      	bne.n	80053f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80053e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00b      	beq.n	8005408 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2208      	movs	r2, #8
 80053f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053fe:	f043 0208 	orr.w	r2, r3, #8
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800540c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005410:	2b00      	cmp	r3, #0
 8005412:	d012      	beq.n	800543a <HAL_UART_IRQHandler+0x18a>
 8005414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005418:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00c      	beq.n	800543a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005428:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005430:	f043 0220 	orr.w	r2, r3, #32
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 8230 	beq.w	80058a6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00d      	beq.n	800546e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b00      	cmp	r3, #0
 800545c:	d007      	beq.n	800546e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005474:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005482:	2b40      	cmp	r3, #64	@ 0x40
 8005484:	d005      	beq.n	8005492 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800548a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800548e:	2b00      	cmp	r3, #0
 8005490:	d04f      	beq.n	8005532 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 ff70 	bl	8006378 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a2:	2b40      	cmp	r3, #64	@ 0x40
 80054a4:	d141      	bne.n	800552a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3308      	adds	r3, #8
 80054ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054b4:	e853 3f00 	ldrex	r3, [r3]
 80054b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80054bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3308      	adds	r3, #8
 80054ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80054d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80054d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80054de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1d9      	bne.n	80054a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d013      	beq.n	8005522 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054fe:	4a13      	ldr	r2, [pc, #76]	@ (800554c <HAL_UART_IRQHandler+0x29c>)
 8005500:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005506:	4618      	mov	r0, r3
 8005508:	f7fd f954 	bl	80027b4 <HAL_DMA_Abort_IT>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d017      	beq.n	8005542 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800551c:	4610      	mov	r0, r2
 800551e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005520:	e00f      	b.n	8005542 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f9e8 	bl	80058f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005528:	e00b      	b.n	8005542 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f9e4 	bl	80058f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005530:	e007      	b.n	8005542 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f9e0 	bl	80058f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005540:	e1b1      	b.n	80058a6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005542:	bf00      	nop
    return;
 8005544:	e1af      	b.n	80058a6 <HAL_UART_IRQHandler+0x5f6>
 8005546:	bf00      	nop
 8005548:	04000120 	.word	0x04000120
 800554c:	08006629 	.word	0x08006629

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005554:	2b01      	cmp	r3, #1
 8005556:	f040 816a 	bne.w	800582e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800555a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800555e:	f003 0310 	and.w	r3, r3, #16
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 8163 	beq.w	800582e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 815c 	beq.w	800582e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2210      	movs	r2, #16
 800557c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005588:	2b40      	cmp	r3, #64	@ 0x40
 800558a:	f040 80d4 	bne.w	8005736 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800559a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 80ad 	beq.w	80056fe <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80055aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055ae:	429a      	cmp	r2, r3
 80055b0:	f080 80a5 	bcs.w	80056fe <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f040 8086 	bne.w	80056dc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005606:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005612:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1da      	bne.n	80055d0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3308      	adds	r3, #8
 8005620:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005622:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005624:	e853 3f00 	ldrex	r3, [r3]
 8005628:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800562a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800562c:	f023 0301 	bic.w	r3, r3, #1
 8005630:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3308      	adds	r3, #8
 800563a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800563e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005642:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005646:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005650:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e1      	bne.n	800561a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3308      	adds	r3, #8
 800565c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005668:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800566c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3308      	adds	r3, #8
 8005676:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800567a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800567c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005680:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005688:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e3      	bne.n	8005656 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2220      	movs	r2, #32
 8005692:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056ac:	f023 0310 	bic.w	r3, r3, #16
 80056b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e4      	bne.n	800569c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fd f82e 	bl	8002738 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	4619      	mov	r1, r3
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fc f80e 	bl	8001718 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80056fc:	e0d5      	b.n	80058aa <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005704:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005708:	429a      	cmp	r2, r3
 800570a:	f040 80ce 	bne.w	80058aa <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b20      	cmp	r3, #32
 800571c:	f040 80c5 	bne.w	80058aa <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fb fff2 	bl	8001718 <HAL_UARTEx_RxEventCallback>
      return;
 8005734:	e0b9      	b.n	80058aa <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005742:	b29b      	uxth	r3, r3
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 80ab 	beq.w	80058ae <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 80a6 	beq.w	80058ae <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576a:	e853 3f00 	ldrex	r3, [r3]
 800576e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005772:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005776:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005784:	647b      	str	r3, [r7, #68]	@ 0x44
 8005786:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800578a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e4      	bne.n	8005762 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3308      	adds	r3, #8
 800579e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a2:	e853 3f00 	ldrex	r3, [r3]
 80057a6:	623b      	str	r3, [r7, #32]
   return(result);
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	f023 0301 	bic.w	r3, r3, #1
 80057ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3308      	adds	r3, #8
 80057b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80057be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e3      	bne.n	8005798 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f023 0310 	bic.w	r3, r3, #16
 80057f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005806:	61fb      	str	r3, [r7, #28]
 8005808:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	69b9      	ldr	r1, [r7, #24]
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	617b      	str	r3, [r7, #20]
   return(result);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e4      	bne.n	80057e4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2202      	movs	r2, #2
 800581e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005820:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005824:	4619      	mov	r1, r3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fb ff76 	bl	8001718 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800582c:	e03f      	b.n	80058ae <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800582e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00e      	beq.n	8005858 <HAL_UART_IRQHandler+0x5a8>
 800583a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800583e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d008      	beq.n	8005858 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800584e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 ff29 	bl	80066a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005856:	e02d      	b.n	80058b4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800585c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00e      	beq.n	8005882 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005868:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800586c:	2b00      	cmp	r3, #0
 800586e:	d008      	beq.n	8005882 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01c      	beq.n	80058b2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	4798      	blx	r3
    }
    return;
 8005880:	e017      	b.n	80058b2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	d012      	beq.n	80058b4 <HAL_UART_IRQHandler+0x604>
 800588e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00c      	beq.n	80058b4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 feda 	bl	8006654 <UART_EndTransmit_IT>
    return;
 80058a0:	e008      	b.n	80058b4 <HAL_UART_IRQHandler+0x604>
      return;
 80058a2:	bf00      	nop
 80058a4:	e006      	b.n	80058b4 <HAL_UART_IRQHandler+0x604>
    return;
 80058a6:	bf00      	nop
 80058a8:	e004      	b.n	80058b4 <HAL_UART_IRQHandler+0x604>
      return;
 80058aa:	bf00      	nop
 80058ac:	e002      	b.n	80058b4 <HAL_UART_IRQHandler+0x604>
      return;
 80058ae:	bf00      	nop
 80058b0:	e000      	b.n	80058b4 <HAL_UART_IRQHandler+0x604>
    return;
 80058b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80058b4:	37e8      	adds	r7, #232	@ 0xe8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop

080058bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800590c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005910:	b08a      	sub	sp, #40	@ 0x28
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	431a      	orrs	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	431a      	orrs	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	4313      	orrs	r3, r2
 8005932:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	4ba4      	ldr	r3, [pc, #656]	@ (8005bcc <UART_SetConfig+0x2c0>)
 800593c:	4013      	ands	r3, r2
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	6812      	ldr	r2, [r2, #0]
 8005942:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005944:	430b      	orrs	r3, r1
 8005946:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a99      	ldr	r2, [pc, #612]	@ (8005bd0 <UART_SetConfig+0x2c4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d004      	beq.n	8005978 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005974:	4313      	orrs	r3, r2
 8005976:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005988:	430a      	orrs	r2, r1
 800598a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a90      	ldr	r2, [pc, #576]	@ (8005bd4 <UART_SetConfig+0x2c8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d126      	bne.n	80059e4 <UART_SetConfig+0xd8>
 8005996:	4b90      	ldr	r3, [pc, #576]	@ (8005bd8 <UART_SetConfig+0x2cc>)
 8005998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800599c:	f003 0303 	and.w	r3, r3, #3
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	d81b      	bhi.n	80059dc <UART_SetConfig+0xd0>
 80059a4:	a201      	add	r2, pc, #4	@ (adr r2, 80059ac <UART_SetConfig+0xa0>)
 80059a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059aa:	bf00      	nop
 80059ac:	080059bd 	.word	0x080059bd
 80059b0:	080059cd 	.word	0x080059cd
 80059b4:	080059c5 	.word	0x080059c5
 80059b8:	080059d5 	.word	0x080059d5
 80059bc:	2301      	movs	r3, #1
 80059be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059c2:	e116      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 80059c4:	2302      	movs	r3, #2
 80059c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ca:	e112      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 80059cc:	2304      	movs	r3, #4
 80059ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059d2:	e10e      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 80059d4:	2308      	movs	r3, #8
 80059d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059da:	e10a      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 80059dc:	2310      	movs	r3, #16
 80059de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059e2:	e106      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a7c      	ldr	r2, [pc, #496]	@ (8005bdc <UART_SetConfig+0x2d0>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d138      	bne.n	8005a60 <UART_SetConfig+0x154>
 80059ee:	4b7a      	ldr	r3, [pc, #488]	@ (8005bd8 <UART_SetConfig+0x2cc>)
 80059f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f4:	f003 030c 	and.w	r3, r3, #12
 80059f8:	2b0c      	cmp	r3, #12
 80059fa:	d82d      	bhi.n	8005a58 <UART_SetConfig+0x14c>
 80059fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005a04 <UART_SetConfig+0xf8>)
 80059fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a02:	bf00      	nop
 8005a04:	08005a39 	.word	0x08005a39
 8005a08:	08005a59 	.word	0x08005a59
 8005a0c:	08005a59 	.word	0x08005a59
 8005a10:	08005a59 	.word	0x08005a59
 8005a14:	08005a49 	.word	0x08005a49
 8005a18:	08005a59 	.word	0x08005a59
 8005a1c:	08005a59 	.word	0x08005a59
 8005a20:	08005a59 	.word	0x08005a59
 8005a24:	08005a41 	.word	0x08005a41
 8005a28:	08005a59 	.word	0x08005a59
 8005a2c:	08005a59 	.word	0x08005a59
 8005a30:	08005a59 	.word	0x08005a59
 8005a34:	08005a51 	.word	0x08005a51
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a3e:	e0d8      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005a40:	2302      	movs	r3, #2
 8005a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a46:	e0d4      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a4e:	e0d0      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005a50:	2308      	movs	r3, #8
 8005a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a56:	e0cc      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005a58:	2310      	movs	r3, #16
 8005a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a5e:	e0c8      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a5e      	ldr	r2, [pc, #376]	@ (8005be0 <UART_SetConfig+0x2d4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d125      	bne.n	8005ab6 <UART_SetConfig+0x1aa>
 8005a6a:	4b5b      	ldr	r3, [pc, #364]	@ (8005bd8 <UART_SetConfig+0x2cc>)
 8005a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a74:	2b30      	cmp	r3, #48	@ 0x30
 8005a76:	d016      	beq.n	8005aa6 <UART_SetConfig+0x19a>
 8005a78:	2b30      	cmp	r3, #48	@ 0x30
 8005a7a:	d818      	bhi.n	8005aae <UART_SetConfig+0x1a2>
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	d00a      	beq.n	8005a96 <UART_SetConfig+0x18a>
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d814      	bhi.n	8005aae <UART_SetConfig+0x1a2>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <UART_SetConfig+0x182>
 8005a88:	2b10      	cmp	r3, #16
 8005a8a:	d008      	beq.n	8005a9e <UART_SetConfig+0x192>
 8005a8c:	e00f      	b.n	8005aae <UART_SetConfig+0x1a2>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a94:	e0ad      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005a96:	2302      	movs	r3, #2
 8005a98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a9c:	e0a9      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005a9e:	2304      	movs	r3, #4
 8005aa0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aa4:	e0a5      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005aa6:	2308      	movs	r3, #8
 8005aa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aac:	e0a1      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005aae:	2310      	movs	r3, #16
 8005ab0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ab4:	e09d      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a4a      	ldr	r2, [pc, #296]	@ (8005be4 <UART_SetConfig+0x2d8>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d125      	bne.n	8005b0c <UART_SetConfig+0x200>
 8005ac0:	4b45      	ldr	r3, [pc, #276]	@ (8005bd8 <UART_SetConfig+0x2cc>)
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005aca:	2bc0      	cmp	r3, #192	@ 0xc0
 8005acc:	d016      	beq.n	8005afc <UART_SetConfig+0x1f0>
 8005ace:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ad0:	d818      	bhi.n	8005b04 <UART_SetConfig+0x1f8>
 8005ad2:	2b80      	cmp	r3, #128	@ 0x80
 8005ad4:	d00a      	beq.n	8005aec <UART_SetConfig+0x1e0>
 8005ad6:	2b80      	cmp	r3, #128	@ 0x80
 8005ad8:	d814      	bhi.n	8005b04 <UART_SetConfig+0x1f8>
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <UART_SetConfig+0x1d8>
 8005ade:	2b40      	cmp	r3, #64	@ 0x40
 8005ae0:	d008      	beq.n	8005af4 <UART_SetConfig+0x1e8>
 8005ae2:	e00f      	b.n	8005b04 <UART_SetConfig+0x1f8>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aea:	e082      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005aec:	2302      	movs	r3, #2
 8005aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005af2:	e07e      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005af4:	2304      	movs	r3, #4
 8005af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005afa:	e07a      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005afc:	2308      	movs	r3, #8
 8005afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b02:	e076      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005b04:	2310      	movs	r3, #16
 8005b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b0a:	e072      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a35      	ldr	r2, [pc, #212]	@ (8005be8 <UART_SetConfig+0x2dc>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d12a      	bne.n	8005b6c <UART_SetConfig+0x260>
 8005b16:	4b30      	ldr	r3, [pc, #192]	@ (8005bd8 <UART_SetConfig+0x2cc>)
 8005b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b24:	d01a      	beq.n	8005b5c <UART_SetConfig+0x250>
 8005b26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b2a:	d81b      	bhi.n	8005b64 <UART_SetConfig+0x258>
 8005b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b30:	d00c      	beq.n	8005b4c <UART_SetConfig+0x240>
 8005b32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b36:	d815      	bhi.n	8005b64 <UART_SetConfig+0x258>
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <UART_SetConfig+0x238>
 8005b3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b40:	d008      	beq.n	8005b54 <UART_SetConfig+0x248>
 8005b42:	e00f      	b.n	8005b64 <UART_SetConfig+0x258>
 8005b44:	2300      	movs	r3, #0
 8005b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b4a:	e052      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b52:	e04e      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005b54:	2304      	movs	r3, #4
 8005b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b5a:	e04a      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005b5c:	2308      	movs	r3, #8
 8005b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b62:	e046      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005b64:	2310      	movs	r3, #16
 8005b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b6a:	e042      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a17      	ldr	r2, [pc, #92]	@ (8005bd0 <UART_SetConfig+0x2c4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d13a      	bne.n	8005bec <UART_SetConfig+0x2e0>
 8005b76:	4b18      	ldr	r3, [pc, #96]	@ (8005bd8 <UART_SetConfig+0x2cc>)
 8005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b84:	d01a      	beq.n	8005bbc <UART_SetConfig+0x2b0>
 8005b86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b8a:	d81b      	bhi.n	8005bc4 <UART_SetConfig+0x2b8>
 8005b8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b90:	d00c      	beq.n	8005bac <UART_SetConfig+0x2a0>
 8005b92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b96:	d815      	bhi.n	8005bc4 <UART_SetConfig+0x2b8>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <UART_SetConfig+0x298>
 8005b9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ba0:	d008      	beq.n	8005bb4 <UART_SetConfig+0x2a8>
 8005ba2:	e00f      	b.n	8005bc4 <UART_SetConfig+0x2b8>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005baa:	e022      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005bac:	2302      	movs	r3, #2
 8005bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bb2:	e01e      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005bb4:	2304      	movs	r3, #4
 8005bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bba:	e01a      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005bbc:	2308      	movs	r3, #8
 8005bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bc2:	e016      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bca:	e012      	b.n	8005bf2 <UART_SetConfig+0x2e6>
 8005bcc:	efff69f3 	.word	0xefff69f3
 8005bd0:	40008000 	.word	0x40008000
 8005bd4:	40013800 	.word	0x40013800
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	40004400 	.word	0x40004400
 8005be0:	40004800 	.word	0x40004800
 8005be4:	40004c00 	.word	0x40004c00
 8005be8:	40005000 	.word	0x40005000
 8005bec:	2310      	movs	r3, #16
 8005bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a9f      	ldr	r2, [pc, #636]	@ (8005e74 <UART_SetConfig+0x568>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d17a      	bne.n	8005cf2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bfc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d824      	bhi.n	8005c4e <UART_SetConfig+0x342>
 8005c04:	a201      	add	r2, pc, #4	@ (adr r2, 8005c0c <UART_SetConfig+0x300>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005c31 	.word	0x08005c31
 8005c10:	08005c4f 	.word	0x08005c4f
 8005c14:	08005c39 	.word	0x08005c39
 8005c18:	08005c4f 	.word	0x08005c4f
 8005c1c:	08005c3f 	.word	0x08005c3f
 8005c20:	08005c4f 	.word	0x08005c4f
 8005c24:	08005c4f 	.word	0x08005c4f
 8005c28:	08005c4f 	.word	0x08005c4f
 8005c2c:	08005c47 	.word	0x08005c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c30:	f7fd ffd0 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 8005c34:	61f8      	str	r0, [r7, #28]
        break;
 8005c36:	e010      	b.n	8005c5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c38:	4b8f      	ldr	r3, [pc, #572]	@ (8005e78 <UART_SetConfig+0x56c>)
 8005c3a:	61fb      	str	r3, [r7, #28]
        break;
 8005c3c:	e00d      	b.n	8005c5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c3e:	f7fd ff31 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8005c42:	61f8      	str	r0, [r7, #28]
        break;
 8005c44:	e009      	b.n	8005c5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c4a:	61fb      	str	r3, [r7, #28]
        break;
 8005c4c:	e005      	b.n	8005c5a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 80fb 	beq.w	8005e58 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	4613      	mov	r3, r2
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	4413      	add	r3, r2
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d305      	bcc.n	8005c7e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d903      	bls.n	8005c86 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c84:	e0e8      	b.n	8005e58 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	461c      	mov	r4, r3
 8005c8c:	4615      	mov	r5, r2
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	f04f 0300 	mov.w	r3, #0
 8005c96:	022b      	lsls	r3, r5, #8
 8005c98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c9c:	0222      	lsls	r2, r4, #8
 8005c9e:	68f9      	ldr	r1, [r7, #12]
 8005ca0:	6849      	ldr	r1, [r1, #4]
 8005ca2:	0849      	lsrs	r1, r1, #1
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	4688      	mov	r8, r1
 8005ca8:	4681      	mov	r9, r0
 8005caa:	eb12 0a08 	adds.w	sl, r2, r8
 8005cae:	eb43 0b09 	adc.w	fp, r3, r9
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	603b      	str	r3, [r7, #0]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cc0:	4650      	mov	r0, sl
 8005cc2:	4659      	mov	r1, fp
 8005cc4:	f7fa ffe0 	bl	8000c88 <__aeabi_uldivmod>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4613      	mov	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cd6:	d308      	bcc.n	8005cea <UART_SetConfig+0x3de>
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cde:	d204      	bcs.n	8005cea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	60da      	str	r2, [r3, #12]
 8005ce8:	e0b6      	b.n	8005e58 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005cf0:	e0b2      	b.n	8005e58 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cfa:	d15e      	bne.n	8005dba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005cfc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d828      	bhi.n	8005d56 <UART_SetConfig+0x44a>
 8005d04:	a201      	add	r2, pc, #4	@ (adr r2, 8005d0c <UART_SetConfig+0x400>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d31 	.word	0x08005d31
 8005d10:	08005d39 	.word	0x08005d39
 8005d14:	08005d41 	.word	0x08005d41
 8005d18:	08005d57 	.word	0x08005d57
 8005d1c:	08005d47 	.word	0x08005d47
 8005d20:	08005d57 	.word	0x08005d57
 8005d24:	08005d57 	.word	0x08005d57
 8005d28:	08005d57 	.word	0x08005d57
 8005d2c:	08005d4f 	.word	0x08005d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d30:	f7fd ff50 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 8005d34:	61f8      	str	r0, [r7, #28]
        break;
 8005d36:	e014      	b.n	8005d62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d38:	f7fd ff62 	bl	8003c00 <HAL_RCC_GetPCLK2Freq>
 8005d3c:	61f8      	str	r0, [r7, #28]
        break;
 8005d3e:	e010      	b.n	8005d62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d40:	4b4d      	ldr	r3, [pc, #308]	@ (8005e78 <UART_SetConfig+0x56c>)
 8005d42:	61fb      	str	r3, [r7, #28]
        break;
 8005d44:	e00d      	b.n	8005d62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d46:	f7fd fead 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8005d4a:	61f8      	str	r0, [r7, #28]
        break;
 8005d4c:	e009      	b.n	8005d62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d52:	61fb      	str	r3, [r7, #28]
        break;
 8005d54:	e005      	b.n	8005d62 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005d60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d077      	beq.n	8005e58 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	005a      	lsls	r2, r3, #1
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	085b      	lsrs	r3, r3, #1
 8005d72:	441a      	add	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	2b0f      	cmp	r3, #15
 8005d82:	d916      	bls.n	8005db2 <UART_SetConfig+0x4a6>
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d8a:	d212      	bcs.n	8005db2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	f023 030f 	bic.w	r3, r3, #15
 8005d94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	085b      	lsrs	r3, r3, #1
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	8afb      	ldrh	r3, [r7, #22]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	8afa      	ldrh	r2, [r7, #22]
 8005dae:	60da      	str	r2, [r3, #12]
 8005db0:	e052      	b.n	8005e58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005db8:	e04e      	b.n	8005e58 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005dbe:	2b08      	cmp	r3, #8
 8005dc0:	d827      	bhi.n	8005e12 <UART_SetConfig+0x506>
 8005dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc8 <UART_SetConfig+0x4bc>)
 8005dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc8:	08005ded 	.word	0x08005ded
 8005dcc:	08005df5 	.word	0x08005df5
 8005dd0:	08005dfd 	.word	0x08005dfd
 8005dd4:	08005e13 	.word	0x08005e13
 8005dd8:	08005e03 	.word	0x08005e03
 8005ddc:	08005e13 	.word	0x08005e13
 8005de0:	08005e13 	.word	0x08005e13
 8005de4:	08005e13 	.word	0x08005e13
 8005de8:	08005e0b 	.word	0x08005e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dec:	f7fd fef2 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 8005df0:	61f8      	str	r0, [r7, #28]
        break;
 8005df2:	e014      	b.n	8005e1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005df4:	f7fd ff04 	bl	8003c00 <HAL_RCC_GetPCLK2Freq>
 8005df8:	61f8      	str	r0, [r7, #28]
        break;
 8005dfa:	e010      	b.n	8005e1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8005e78 <UART_SetConfig+0x56c>)
 8005dfe:	61fb      	str	r3, [r7, #28]
        break;
 8005e00:	e00d      	b.n	8005e1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e02:	f7fd fe4f 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8005e06:	61f8      	str	r0, [r7, #28]
        break;
 8005e08:	e009      	b.n	8005e1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e0e:	61fb      	str	r3, [r7, #28]
        break;
 8005e10:	e005      	b.n	8005e1e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e1c:	bf00      	nop
    }

    if (pclk != 0U)
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d019      	beq.n	8005e58 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	085a      	lsrs	r2, r3, #1
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	441a      	add	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	2b0f      	cmp	r3, #15
 8005e3c:	d909      	bls.n	8005e52 <UART_SetConfig+0x546>
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e44:	d205      	bcs.n	8005e52 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60da      	str	r2, [r3, #12]
 8005e50:	e002      	b.n	8005e58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005e64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3728      	adds	r7, #40	@ 0x28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e72:	bf00      	nop
 8005e74:	40008000 	.word	0x40008000
 8005e78:	00f42400 	.word	0x00f42400

08005e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eee:	f003 0304 	and.w	r3, r3, #4
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00a      	beq.n	8005f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00a      	beq.n	8005f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f32:	f003 0320 	and.w	r3, r3, #32
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01a      	beq.n	8005f92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f7a:	d10a      	bne.n	8005f92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00a      	beq.n	8005fb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	605a      	str	r2, [r3, #4]
  }
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b098      	sub	sp, #96	@ 0x60
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fd0:	f7fc f958 	bl	8002284 <HAL_GetTick>
 8005fd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d12e      	bne.n	8006042 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fe4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fec:	2200      	movs	r2, #0
 8005fee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f88c 	bl	8006110 <UART_WaitOnFlagUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d021      	beq.n	8006042 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800600c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800600e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006012:	653b      	str	r3, [r7, #80]	@ 0x50
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800601c:	647b      	str	r3, [r7, #68]	@ 0x44
 800601e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006022:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800602a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e6      	bne.n	8005ffe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2220      	movs	r2, #32
 8006034:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e062      	b.n	8006108 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b04      	cmp	r3, #4
 800604e:	d149      	bne.n	80060e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006050:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006058:	2200      	movs	r2, #0
 800605a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f856 	bl	8006110 <UART_WaitOnFlagUntilTimeout>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d03c      	beq.n	80060e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	623b      	str	r3, [r7, #32]
   return(result);
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800607e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006088:	633b      	str	r3, [r7, #48]	@ 0x30
 800608a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800608e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e6      	bne.n	800606a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3308      	adds	r3, #8
 80060a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	e853 3f00 	ldrex	r3, [r3]
 80060aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 0301 	bic.w	r3, r3, #1
 80060b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	3308      	adds	r3, #8
 80060ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060bc:	61fa      	str	r2, [r7, #28]
 80060be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c0:	69b9      	ldr	r1, [r7, #24]
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	e841 2300 	strex	r3, r2, [r1]
 80060c8:	617b      	str	r3, [r7, #20]
   return(result);
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1e5      	bne.n	800609c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e011      	b.n	8006108 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2220      	movs	r2, #32
 80060e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3758      	adds	r7, #88	@ 0x58
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	4613      	mov	r3, r2
 800611e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006120:	e04f      	b.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006128:	d04b      	beq.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612a:	f7fc f8ab 	bl	8002284 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	429a      	cmp	r2, r3
 8006138:	d302      	bcc.n	8006140 <UART_WaitOnFlagUntilTimeout+0x30>
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e04e      	b.n	80061e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b00      	cmp	r3, #0
 8006150:	d037      	beq.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b80      	cmp	r3, #128	@ 0x80
 8006156:	d034      	beq.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b40      	cmp	r3, #64	@ 0x40
 800615c:	d031      	beq.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b08      	cmp	r3, #8
 800616a:	d110      	bne.n	800618e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2208      	movs	r2, #8
 8006172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 f8ff 	bl	8006378 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2208      	movs	r2, #8
 800617e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e029      	b.n	80061e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800619c:	d111      	bne.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 f8e5 	bl	8006378 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e00f      	b.n	80061e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4013      	ands	r3, r2
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	bf0c      	ite	eq
 80061d2:	2301      	moveq	r3, #1
 80061d4:	2300      	movne	r3, #0
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	79fb      	ldrb	r3, [r7, #7]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d0a0      	beq.n	8006122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b096      	sub	sp, #88	@ 0x58
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	4613      	mov	r3, r2
 80061f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	88fa      	ldrh	r2, [r7, #6]
 8006204:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2222      	movs	r2, #34	@ 0x22
 8006214:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800621c:	2b00      	cmp	r3, #0
 800621e:	d028      	beq.n	8006272 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006224:	4a3e      	ldr	r2, [pc, #248]	@ (8006320 <UART_Start_Receive_DMA+0x134>)
 8006226:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800622c:	4a3d      	ldr	r2, [pc, #244]	@ (8006324 <UART_Start_Receive_DMA+0x138>)
 800622e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006234:	4a3c      	ldr	r2, [pc, #240]	@ (8006328 <UART_Start_Receive_DMA+0x13c>)
 8006236:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800623c:	2200      	movs	r2, #0
 800623e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3324      	adds	r3, #36	@ 0x24
 800624a:	4619      	mov	r1, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006250:	461a      	mov	r2, r3
 8006252:	88fb      	ldrh	r3, [r7, #6]
 8006254:	f7fc fa10 	bl	8002678 <HAL_DMA_Start_IT>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d009      	beq.n	8006272 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2210      	movs	r2, #16
 8006262:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2220      	movs	r2, #32
 800626a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e051      	b.n	8006316 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d018      	beq.n	80062ac <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800628e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	461a      	mov	r2, r3
 8006296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006298:	64bb      	str	r3, [r7, #72]	@ 0x48
 800629a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800629e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80062a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e6      	bne.n	800627a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3308      	adds	r3, #8
 80062b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	f043 0301 	orr.w	r3, r3, #1
 80062c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3308      	adds	r3, #8
 80062ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80062cc:	637a      	str	r2, [r7, #52]	@ 0x34
 80062ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80062d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80062da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e5      	bne.n	80062ac <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3308      	adds	r3, #8
 80062e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	e853 3f00 	ldrex	r3, [r3]
 80062ee:	613b      	str	r3, [r7, #16]
   return(result);
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3308      	adds	r3, #8
 80062fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006300:	623a      	str	r2, [r7, #32]
 8006302:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006304:	69f9      	ldr	r1, [r7, #28]
 8006306:	6a3a      	ldr	r2, [r7, #32]
 8006308:	e841 2300 	strex	r3, r2, [r1]
 800630c:	61bb      	str	r3, [r7, #24]
   return(result);
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1e5      	bne.n	80062e0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3758      	adds	r7, #88	@ 0x58
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	08006441 	.word	0x08006441
 8006324:	0800656d 	.word	0x0800656d
 8006328:	080065ab 	.word	0x080065ab

0800632c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800632c:	b480      	push	{r7}
 800632e:	b089      	sub	sp, #36	@ 0x24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	60bb      	str	r3, [r7, #8]
   return(result);
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006348:	61fb      	str	r3, [r7, #28]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	61bb      	str	r3, [r7, #24]
 8006354:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	6979      	ldr	r1, [r7, #20]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	e841 2300 	strex	r3, r2, [r1]
 800635e:	613b      	str	r3, [r7, #16]
   return(result);
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e6      	bne.n	8006334 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2220      	movs	r2, #32
 800636a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800636c:	bf00      	nop
 800636e:	3724      	adds	r7, #36	@ 0x24
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006378:	b480      	push	{r7}
 800637a:	b095      	sub	sp, #84	@ 0x54
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800638e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006390:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006394:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800639e:	643b      	str	r3, [r7, #64]	@ 0x40
 80063a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1e6      	bne.n	8006380 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3308      	adds	r3, #8
 80063b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	e853 3f00 	ldrex	r3, [r3]
 80063c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	f023 0301 	bic.w	r3, r3, #1
 80063c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3308      	adds	r3, #8
 80063d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063da:	e841 2300 	strex	r3, r2, [r1]
 80063de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1e5      	bne.n	80063b2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d118      	bne.n	8006420 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f023 0310 	bic.w	r3, r3, #16
 8006402:	647b      	str	r3, [r7, #68]	@ 0x44
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	461a      	mov	r2, r3
 800640a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800640c:	61bb      	str	r3, [r7, #24]
 800640e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	6979      	ldr	r1, [r7, #20]
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	613b      	str	r3, [r7, #16]
   return(result);
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e6      	bne.n	80063ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2220      	movs	r2, #32
 8006424:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006434:	bf00      	nop
 8006436:	3754      	adds	r7, #84	@ 0x54
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b09c      	sub	sp, #112	@ 0x70
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800644c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0320 	and.w	r3, r3, #32
 8006458:	2b00      	cmp	r3, #0
 800645a:	d171      	bne.n	8006540 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800645c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800645e:	2200      	movs	r2, #0
 8006460:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006478:	66bb      	str	r3, [r7, #104]	@ 0x68
 800647a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006482:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006484:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006488:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006490:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e6      	bne.n	8006464 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006496:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3308      	adds	r3, #8
 800649c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a8:	f023 0301 	bic.w	r3, r3, #1
 80064ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80064ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3308      	adds	r3, #8
 80064b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80064b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80064b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e5      	bne.n	8006496 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3308      	adds	r3, #8
 80064d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	623b      	str	r3, [r7, #32]
   return(result);
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80064e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3308      	adds	r3, #8
 80064e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80064ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80064ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e5      	bne.n	80064ca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006500:	2220      	movs	r2, #32
 8006502:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006506:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800650a:	2b01      	cmp	r3, #1
 800650c:	d118      	bne.n	8006540 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800650e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	e853 3f00 	ldrex	r3, [r3]
 800651a:	60fb      	str	r3, [r7, #12]
   return(result);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0310 	bic.w	r3, r3, #16
 8006522:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	461a      	mov	r2, r3
 800652a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800652c:	61fb      	str	r3, [r7, #28]
 800652e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006530:	69b9      	ldr	r1, [r7, #24]
 8006532:	69fa      	ldr	r2, [r7, #28]
 8006534:	e841 2300 	strex	r3, r2, [r1]
 8006538:	617b      	str	r3, [r7, #20]
   return(result);
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1e6      	bne.n	800650e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006542:	2200      	movs	r2, #0
 8006544:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800654a:	2b01      	cmp	r3, #1
 800654c:	d107      	bne.n	800655e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800654e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006550:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006554:	4619      	mov	r1, r3
 8006556:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006558:	f7fb f8de 	bl	8001718 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800655c:	e002      	b.n	8006564 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800655e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006560:	f7ff f9b6 	bl	80058d0 <HAL_UART_RxCpltCallback>
}
 8006564:	bf00      	nop
 8006566:	3770      	adds	r7, #112	@ 0x70
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006578:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2201      	movs	r2, #1
 800657e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006584:	2b01      	cmp	r3, #1
 8006586:	d109      	bne.n	800659c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800658e:	085b      	lsrs	r3, r3, #1
 8006590:	b29b      	uxth	r3, r3
 8006592:	4619      	mov	r1, r3
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f7fb f8bf 	bl	8001718 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800659a:	e002      	b.n	80065a2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f7ff f9a1 	bl	80058e4 <HAL_UART_RxHalfCpltCallback>
}
 80065a2:	bf00      	nop
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b086      	sub	sp, #24
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065bc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d0:	2b80      	cmp	r3, #128	@ 0x80
 80065d2:	d109      	bne.n	80065e8 <UART_DMAError+0x3e>
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b21      	cmp	r3, #33	@ 0x21
 80065d8:	d106      	bne.n	80065e8 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2200      	movs	r2, #0
 80065de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80065e2:	6978      	ldr	r0, [r7, #20]
 80065e4:	f7ff fea2 	bl	800632c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f2:	2b40      	cmp	r3, #64	@ 0x40
 80065f4:	d109      	bne.n	800660a <UART_DMAError+0x60>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b22      	cmp	r3, #34	@ 0x22
 80065fa:	d106      	bne.n	800660a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8006604:	6978      	ldr	r0, [r7, #20]
 8006606:	f7ff feb7 	bl	8006378 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006610:	f043 0210 	orr.w	r2, r3, #16
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800661a:	6978      	ldr	r0, [r7, #20]
 800661c:	f7ff f96c 	bl	80058f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006620:	bf00      	nop
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006634:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f7ff f956 	bl	80058f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800664c:	bf00      	nop
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	60bb      	str	r3, [r7, #8]
   return(result);
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	61bb      	str	r3, [r7, #24]
 800667c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	6979      	ldr	r1, [r7, #20]
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	613b      	str	r3, [r7, #16]
   return(result);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e6      	bne.n	800665c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2220      	movs	r2, #32
 8006692:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff f90e 	bl	80058bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066a0:	bf00      	nop
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08c      	sub	sp, #48	@ 0x30
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	4613      	mov	r3, r2
 80066c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066d0:	2b20      	cmp	r3, #32
 80066d2:	d142      	bne.n	800675a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80066da:	88fb      	ldrh	r3, [r7, #6]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e03b      	b.n	800675c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2201      	movs	r2, #1
 80066e8:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80066f0:	88fb      	ldrh	r3, [r7, #6]
 80066f2:	461a      	mov	r2, r3
 80066f4:	68b9      	ldr	r1, [r7, #8]
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7ff fd78 	bl	80061ec <UART_Start_Receive_DMA>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006702:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006706:	2b00      	cmp	r3, #0
 8006708:	d124      	bne.n	8006754 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800670e:	2b01      	cmp	r3, #1
 8006710:	d11d      	bne.n	800674e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2210      	movs	r2, #16
 8006718:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	617b      	str	r3, [r7, #20]
   return(result);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f043 0310 	orr.w	r3, r3, #16
 800672e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006738:	627b      	str	r3, [r7, #36]	@ 0x24
 800673a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	6a39      	ldr	r1, [r7, #32]
 800673e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	61fb      	str	r3, [r7, #28]
   return(result);
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e6      	bne.n	800671a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800674c:	e002      	b.n	8006754 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006754:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006758:	e000      	b.n	800675c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800675a:	2302      	movs	r3, #2
  }
}
 800675c:	4618      	mov	r0, r3
 800675e:	3730      	adds	r7, #48	@ 0x30
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <Display_Init>:
static uint8_t  s_animation_current_frame = 0;
static uint32_t s_animation_last_update_tick = 0;
#define ANIMATION_FRAME_DELAY_MS 80 // Adjust for desired speed (milliseconds)

void Display_Init(UI_Screen_State_t screenState)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	71fb      	strb	r3, [r7, #7]
	ST7789_Init();
 800676e:	f000 fd25 	bl	80071bc <ST7789_Init>
	HAL_GPIO_WritePin(ST7789_BLK_GPIO_Port  , ST7789_BLK_Pin, GPIO_PIN_SET);
 8006772:	2201      	movs	r2, #1
 8006774:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006778:	4806      	ldr	r0, [pc, #24]	@ (8006794 <Display_Init+0x30>)
 800677a:	f7fc faf1 	bl	8002d60 <HAL_GPIO_WritePin>

	previous_screenState = screenState;
 800677e:	4a06      	ldr	r2, [pc, #24]	@ (8006798 <Display_Init+0x34>)
 8006780:	79fb      	ldrb	r3, [r7, #7]
 8006782:	7013      	strb	r3, [r2, #0]
	current_screenState = screenState;
 8006784:	4a05      	ldr	r2, [pc, #20]	@ (800679c <Display_Init+0x38>)
 8006786:	79fb      	ldrb	r3, [r7, #7]
 8006788:	7013      	strb	r3, [r2, #0]
}
 800678a:	bf00      	nop
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	48000800 	.word	0x48000800
 8006798:	20000a04 	.word	0x20000a04
 800679c:	20000a05 	.word	0x20000a05

080067a0 <split_color_array>:

//this shit is need to have the output image with the right color
void split_color_array(const uint16_t *input, uint8_t *output, size_t length)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
	for (size_t i = 0; i < length; ++i)
 80067ac:	2300      	movs	r3, #0
 80067ae:	617b      	str	r3, [r7, #20]
 80067b0:	e01b      	b.n	80067ea <split_color_array+0x4a>
	{
		output[2 * i] = COLOR_HIGH_BYTE(input[i]);  // High byte first
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4413      	add	r3, r2
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	0a1b      	lsrs	r3, r3, #8
 80067be:	b299      	uxth	r1, r3
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	005b      	lsls	r3, r3, #1
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	4413      	add	r3, r2
 80067c8:	b2ca      	uxtb	r2, r1
 80067ca:	701a      	strb	r2, [r3, #0]
		output[2 * i + 1] = COLOR_LOW_BYTE(input[i]);   // Then low byte
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4413      	add	r3, r2
 80067d4:	8819      	ldrh	r1, [r3, #0]
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	3301      	adds	r3, #1
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	4413      	add	r3, r2
 80067e0:	b2ca      	uxtb	r2, r1
 80067e2:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < length; ++i)
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	3301      	adds	r3, #1
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d3df      	bcc.n	80067b2 <split_color_array+0x12>
	}
}
 80067f2:	bf00      	nop
 80067f4:	bf00      	nop
 80067f6:	371c      	adds	r7, #28
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <Display_Image>:

void Display_Image(uint16_t x_center, uint16_t y_center,uint16_t x_width, uint16_t y_width,const uint16_t *img,size_t pixel_count)
{
 8006800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006804:	b089      	sub	sp, #36	@ 0x24
 8006806:	af02      	add	r7, sp, #8
 8006808:	4606      	mov	r6, r0
 800680a:	4608      	mov	r0, r1
 800680c:	4611      	mov	r1, r2
 800680e:	461a      	mov	r2, r3
 8006810:	4633      	mov	r3, r6
 8006812:	80fb      	strh	r3, [r7, #6]
 8006814:	4603      	mov	r3, r0
 8006816:	80bb      	strh	r3, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	807b      	strh	r3, [r7, #2]
 800681c:	4613      	mov	r3, r2
 800681e:	803b      	strh	r3, [r7, #0]
 8006820:	466b      	mov	r3, sp
 8006822:	461e      	mov	r6, r3
	// We use the fixed size from the image data now
	uint16_t img_x = x_center - (x_width / 2);
 8006824:	887b      	ldrh	r3, [r7, #2]
 8006826:	085b      	lsrs	r3, r3, #1
 8006828:	b29b      	uxth	r3, r3
 800682a:	88fa      	ldrh	r2, [r7, #6]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	82fb      	strh	r3, [r7, #22]
	uint16_t img_y = y_center - (y_width / 2);
 8006830:	883b      	ldrh	r3, [r7, #0]
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	b29b      	uxth	r3, r3
 8006836:	88ba      	ldrh	r2, [r7, #4]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	82bb      	strh	r3, [r7, #20]

	uint8_t result[pixel_count * 2];
 800683c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800683e:	0059      	lsls	r1, r3, #1
 8006840:	460b      	mov	r3, r1
 8006842:	3b01      	subs	r3, #1
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	2300      	movs	r3, #0
 8006848:	4688      	mov	r8, r1
 800684a:	4699      	mov	r9, r3
 800684c:	f04f 0200 	mov.w	r2, #0
 8006850:	f04f 0300 	mov.w	r3, #0
 8006854:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006858:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800685c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006860:	2300      	movs	r3, #0
 8006862:	460c      	mov	r4, r1
 8006864:	461d      	mov	r5, r3
 8006866:	f04f 0200 	mov.w	r2, #0
 800686a:	f04f 0300 	mov.w	r3, #0
 800686e:	00eb      	lsls	r3, r5, #3
 8006870:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006874:	00e2      	lsls	r2, r4, #3
 8006876:	1dcb      	adds	r3, r1, #7
 8006878:	08db      	lsrs	r3, r3, #3
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	ebad 0d03 	sub.w	sp, sp, r3
 8006880:	ab02      	add	r3, sp, #8
 8006882:	3300      	adds	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]

	//lenght of the array
	split_color_array(img, result,
 8006886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006888:	085b      	lsrs	r3, r3, #1
 800688a:	461a      	mov	r2, r3
 800688c:	68f9      	ldr	r1, [r7, #12]
 800688e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006890:	f7ff ff86 	bl	80067a0 <split_color_array>
			pixel_count/ sizeof(uint16_t));

	ST7789_DrawImage(img_x, img_y, x_width, y_width, result);
 8006894:	883c      	ldrh	r4, [r7, #0]
 8006896:	887a      	ldrh	r2, [r7, #2]
 8006898:	8ab9      	ldrh	r1, [r7, #20]
 800689a:	8af8      	ldrh	r0, [r7, #22]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	4623      	mov	r3, r4
 80068a2:	f000 ff57 	bl	8007754 <ST7789_DrawImage>
 80068a6:	46b5      	mov	sp, r6
}
 80068a8:	bf00      	nop
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080068b4 <Display_HeartRate>:
{
	Display_Image(x_center,y_center,thermometer_icon_width,thermometer_icon_height,thermometer_icon_data,sizeof(thermometer_icon_data) );
}

void Display_HeartRate(uint16_t x_center, uint16_t y_center,const SmartWatchData_t* pData)
{
 80068b4:	b5b0      	push	{r4, r5, r7, lr}
 80068b6:	b098      	sub	sp, #96	@ 0x60
 80068b8:	af04      	add	r7, sp, #16
 80068ba:	4603      	mov	r3, r0
 80068bc:	603a      	str	r2, [r7, #0]
 80068be:	80fb      	strh	r3, [r7, #6]
 80068c0:	460b      	mov	r3, r1
 80068c2:	80bb      	strh	r3, [r7, #4]
	uint8_t hr = pData->heart_rate;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	@ 0x104
 80068ca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint16_t spo2 = pData->spo2;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	edd3 7a42 	vldr	s15, [r3, #264]	@ 0x108
 80068d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068d8:	ee17 3a90 	vmov	r3, s15
 80068dc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

	char hr_buf[32];
	char spo2_buf[32];

	snprintf(hr_buf, sizeof(hr_buf), " HeartRate : %u", (unsigned) hr);
 80068e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80068e4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80068e8:	4a23      	ldr	r2, [pc, #140]	@ (8006978 <Display_HeartRate+0xc4>)
 80068ea:	2120      	movs	r1, #32
 80068ec:	f002 fc20 	bl	8009130 <sniprintf>
	snprintf(spo2_buf, sizeof(spo2_buf), " SPO2 : %u", (unsigned) spo2);
 80068f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80068f4:	f107 0008 	add.w	r0, r7, #8
 80068f8:	4a20      	ldr	r2, [pc, #128]	@ (800697c <Display_HeartRate+0xc8>)
 80068fa:	2120      	movs	r1, #32
 80068fc:	f002 fc18 	bl	8009130 <sniprintf>

	//space between lines of text
	int text_y_offset = 30;
 8006900:	231e      	movs	r3, #30
 8006902:	64bb      	str	r3, [r7, #72]	@ 0x48

	ST7789_WriteString(x_center, y_center , hr_buf, Font_11x18, RED, BLACK);
 8006904:	4b1e      	ldr	r3, [pc, #120]	@ (8006980 <Display_HeartRate+0xcc>)
 8006906:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800690a:	88b9      	ldrh	r1, [r7, #4]
 800690c:	88f8      	ldrh	r0, [r7, #6]
 800690e:	2200      	movs	r2, #0
 8006910:	9202      	str	r2, [sp, #8]
 8006912:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8006916:	9201      	str	r2, [sp, #4]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	9200      	str	r2, [sp, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4622      	mov	r2, r4
 8006920:	f000 ffe6 	bl	80078f0 <ST7789_WriteString>
	ST7789_WriteString(x_center, y_center + text_y_offset, spo2_buf, Font_11x18, RED, BLACK);
 8006924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006926:	b29a      	uxth	r2, r3
 8006928:	88bb      	ldrh	r3, [r7, #4]
 800692a:	4413      	add	r3, r2
 800692c:	b299      	uxth	r1, r3
 800692e:	4b14      	ldr	r3, [pc, #80]	@ (8006980 <Display_HeartRate+0xcc>)
 8006930:	f107 0408 	add.w	r4, r7, #8
 8006934:	88f8      	ldrh	r0, [r7, #6]
 8006936:	2200      	movs	r2, #0
 8006938:	9202      	str	r2, [sp, #8]
 800693a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800693e:	9201      	str	r2, [sp, #4]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	9200      	str	r2, [sp, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4622      	mov	r2, r4
 8006948:	f000 ffd2 	bl	80078f0 <ST7789_WriteString>


	Display_RenderAnimation(gif_center_x,gif_center_y,heart_animation_width,heart_animation_height,heart_gif_array,heart_gif_array_LEN,heart_gif_frame_pixel_count);
 800694c:	20a0      	movs	r0, #160	@ 0xa0
 800694e:	211e      	movs	r1, #30
 8006950:	2430      	movs	r4, #48	@ 0x30
 8006952:	2530      	movs	r5, #48	@ 0x30
 8006954:	4b0b      	ldr	r3, [pc, #44]	@ (8006984 <Display_HeartRate+0xd0>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	4a0b      	ldr	r2, [pc, #44]	@ (8006988 <Display_HeartRate+0xd4>)
 800695c:	6812      	ldr	r2, [r2, #0]
 800695e:	9202      	str	r2, [sp, #8]
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	4b0a      	ldr	r3, [pc, #40]	@ (800698c <Display_HeartRate+0xd8>)
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	462b      	mov	r3, r5
 8006968:	4622      	mov	r2, r4
 800696a:	f000 fa29 	bl	8006dc0 <Display_RenderAnimation>
}
 800696e:	bf00      	nop
 8006970:	3750      	adds	r7, #80	@ 0x50
 8006972:	46bd      	mov	sp, r7
 8006974:	bdb0      	pop	{r4, r5, r7, pc}
 8006976:	bf00      	nop
 8006978:	0800c8d0 	.word	0x0800c8d0
 800697c:	0800c8e0 	.word	0x0800c8e0
 8006980:	20000098 	.word	0x20000098
 8006984:	0803c4c0 	.word	0x0803c4c0
 8006988:	0803c4c4 	.word	0x0803c4c4
 800698c:	20000058 	.word	0x20000058

08006990 <Display_Clock>:

void Display_Clock(uint16_t x_center, uint16_t y_center,const SmartWatchData_t* pData)
{
 8006990:	b590      	push	{r4, r7, lr}
 8006992:	b0a3      	sub	sp, #140	@ 0x8c
 8006994:	af04      	add	r7, sp, #16
 8006996:	4603      	mov	r3, r0
 8006998:	603a      	str	r2, [r7, #0]
 800699a:	80fb      	strh	r3, [r7, #6]
 800699c:	460b      	mov	r3, r1
 800699e:	80bb      	strh	r3, [r7, #4]
	uint16_t year = pData->gps_data.year;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	f8b3 317a 	ldrh.w	r3, [r3, #378]	@ 0x17a
 80069a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	uint8_t month = pData->gps_data.month;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	f893 317e 	ldrb.w	r3, [r3, #382]	@ 0x17e
 80069b0:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	uint8_t day = pData->gps_data.day;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	f893 317f 	ldrb.w	r3, [r3, #383]	@ 0x17f
 80069ba:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
	uint8_t hour = pData->gps_data.hour;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 80069c4:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	uint8_t min = pData->gps_data.min;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	f893 3181 	ldrb.w	r3, [r3, #385]	@ 0x181
 80069ce:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
	uint8_t sec = pData->gps_data.sec;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	f893 3182 	ldrb.w	r3, [r3, #386]	@ 0x182
 80069d8:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71

	hour = (hour +3 )%24; // for UTC
 80069dc:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80069e0:	1cda      	adds	r2, r3, #3
 80069e2:	4b2b      	ldr	r3, [pc, #172]	@ (8006a90 <Display_Clock+0x100>)
 80069e4:	fb83 1302 	smull	r1, r3, r3, r2
 80069e8:	1099      	asrs	r1, r3, #2
 80069ea:	17d3      	asrs	r3, r2, #31
 80069ec:	1ac9      	subs	r1, r1, r3
 80069ee:	460b      	mov	r3, r1
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	440b      	add	r3, r1
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	1ad1      	subs	r1, r2, r3
 80069f8:	460b      	mov	r3, r1
 80069fa:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	char date_buf[64];
	char clock_buf[32];

	snprintf(date_buf, sizeof(date_buf), "  %d. %u. %u", (unsigned) year, (unsigned) month, (unsigned) day);
 80069fe:	f8b7 1076 	ldrh.w	r1, [r7, #118]	@ 0x76
 8006a02:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8006a06:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 8006a0a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8006a0e:	9201      	str	r2, [sp, #4]
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	460b      	mov	r3, r1
 8006a14:	4a1f      	ldr	r2, [pc, #124]	@ (8006a94 <Display_Clock+0x104>)
 8006a16:	2140      	movs	r1, #64	@ 0x40
 8006a18:	f002 fb8a 	bl	8009130 <sniprintf>
	snprintf(clock_buf, sizeof(clock_buf), " %u h %u min %u sec",  (unsigned) hour, (unsigned) min, (unsigned) sec);
 8006a1c:	f897 1073 	ldrb.w	r1, [r7, #115]	@ 0x73
 8006a20:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8006a24:	f897 2071 	ldrb.w	r2, [r7, #113]	@ 0x71
 8006a28:	f107 000c 	add.w	r0, r7, #12
 8006a2c:	9201      	str	r2, [sp, #4]
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	460b      	mov	r3, r1
 8006a32:	4a19      	ldr	r2, [pc, #100]	@ (8006a98 <Display_Clock+0x108>)
 8006a34:	2120      	movs	r1, #32
 8006a36:	f002 fb7b 	bl	8009130 <sniprintf>

	//space between lines of text
	int text_y_offset = 30;
 8006a3a:	231e      	movs	r3, #30
 8006a3c:	66fb      	str	r3, [r7, #108]	@ 0x6c

	ST7789_WriteString(x_center, y_center , date_buf, Font_11x18, GREEN, BLACK);
 8006a3e:	4b17      	ldr	r3, [pc, #92]	@ (8006a9c <Display_Clock+0x10c>)
 8006a40:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8006a44:	88b9      	ldrh	r1, [r7, #4]
 8006a46:	88f8      	ldrh	r0, [r7, #6]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	9202      	str	r2, [sp, #8]
 8006a4c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8006a50:	9201      	str	r2, [sp, #4]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	9200      	str	r2, [sp, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4622      	mov	r2, r4
 8006a5a:	f000 ff49 	bl	80078f0 <ST7789_WriteString>
	ST7789_WriteString(x_center, y_center + text_y_offset, clock_buf, Font_11x18, GREEN, BLACK);
 8006a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	88bb      	ldrh	r3, [r7, #4]
 8006a64:	4413      	add	r3, r2
 8006a66:	b299      	uxth	r1, r3
 8006a68:	4b0c      	ldr	r3, [pc, #48]	@ (8006a9c <Display_Clock+0x10c>)
 8006a6a:	f107 040c 	add.w	r4, r7, #12
 8006a6e:	88f8      	ldrh	r0, [r7, #6]
 8006a70:	2200      	movs	r2, #0
 8006a72:	9202      	str	r2, [sp, #8]
 8006a74:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8006a78:	9201      	str	r2, [sp, #4]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	9200      	str	r2, [sp, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4622      	mov	r2, r4
 8006a82:	f000 ff35 	bl	80078f0 <ST7789_WriteString>

}
 8006a86:	bf00      	nop
 8006a88:	377c      	adds	r7, #124	@ 0x7c
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd90      	pop	{r4, r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	2aaaaaab 	.word	0x2aaaaaab
 8006a94:	0800c8ec 	.word	0x0800c8ec
 8006a98:	0800c8fc 	.word	0x0800c8fc
 8006a9c:	20000098 	.word	0x20000098

08006aa0 <Display_Position>:



void Display_Position(uint16_t x_center, uint16_t y_center,const SmartWatchData_t* pData)
{
 8006aa0:	b590      	push	{r4, r7, lr}
 8006aa2:	b0af      	sub	sp, #188	@ 0xbc
 8006aa4:	af04      	add	r7, sp, #16
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	603a      	str	r2, [r7, #0]
 8006aaa:	80fb      	strh	r3, [r7, #6]
 8006aac:	460b      	mov	r3, r1
 8006aae:	80bb      	strh	r3, [r7, #4]
	int32_t lat = pData->gps_data.lat;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8006ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	int32_t lon = pData->gps_data.lon;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8006ac0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	int32_t height = pData->gps_data.height;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8006aca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c


	char pos_buf[80];
	char height_buf[64];

	snprintf(pos_buf, sizeof(pos_buf), "  latitude %ld longitude : %ld", lat, lon);
 8006ace:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8006ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006adc:	4a1b      	ldr	r2, [pc, #108]	@ (8006b4c <Display_Position+0xac>)
 8006ade:	2150      	movs	r1, #80	@ 0x50
 8006ae0:	f002 fb26 	bl	8009130 <sniprintf>
	snprintf(height_buf, sizeof(height_buf), "  height %ld ", height);
 8006ae4:	f107 0008 	add.w	r0, r7, #8
 8006ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006aec:	4a18      	ldr	r2, [pc, #96]	@ (8006b50 <Display_Position+0xb0>)
 8006aee:	2140      	movs	r1, #64	@ 0x40
 8006af0:	f002 fb1e 	bl	8009130 <sniprintf>

	//space between lines of text
	int text_y_offset = 30;
 8006af4:	231e      	movs	r3, #30
 8006af6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

	ST7789_WriteString(x_center, y_center , pos_buf, Font_11x18, GREEN, BLACK);
 8006afa:	4b16      	ldr	r3, [pc, #88]	@ (8006b54 <Display_Position+0xb4>)
 8006afc:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8006b00:	88b9      	ldrh	r1, [r7, #4]
 8006b02:	88f8      	ldrh	r0, [r7, #6]
 8006b04:	2200      	movs	r2, #0
 8006b06:	9202      	str	r2, [sp, #8]
 8006b08:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8006b0c:	9201      	str	r2, [sp, #4]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	9200      	str	r2, [sp, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4622      	mov	r2, r4
 8006b16:	f000 feeb 	bl	80078f0 <ST7789_WriteString>
	ST7789_WriteString(x_center, y_center + text_y_offset, height_buf, Font_11x18, GREEN, BLACK);
 8006b1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	88bb      	ldrh	r3, [r7, #4]
 8006b22:	4413      	add	r3, r2
 8006b24:	b299      	uxth	r1, r3
 8006b26:	4b0b      	ldr	r3, [pc, #44]	@ (8006b54 <Display_Position+0xb4>)
 8006b28:	f107 0408 	add.w	r4, r7, #8
 8006b2c:	88f8      	ldrh	r0, [r7, #6]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	9202      	str	r2, [sp, #8]
 8006b32:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8006b36:	9201      	str	r2, [sp, #4]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	9200      	str	r2, [sp, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4622      	mov	r2, r4
 8006b40:	f000 fed6 	bl	80078f0 <ST7789_WriteString>

}
 8006b44:	bf00      	nop
 8006b46:	37ac      	adds	r7, #172	@ 0xac
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd90      	pop	{r4, r7, pc}
 8006b4c:	0800c910 	.word	0x0800c910
 8006b50:	0800c930 	.word	0x0800c930
 8006b54:	20000098 	.word	0x20000098

08006b58 <Display_Motion>:

void Display_Motion(uint16_t x_center, uint16_t y_center,const SmartWatchData_t* pData)
{
 8006b58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006b5c:	b0b0      	sub	sp, #192	@ 0xc0
 8006b5e:	af06      	add	r7, sp, #24
 8006b60:	4603      	mov	r3, r0
 8006b62:	603a      	str	r2, [r7, #0]
 8006b64:	80fb      	strh	r3, [r7, #6]
 8006b66:	460b      	mov	r3, r1
 8006b68:	80bb      	strh	r3, [r7, #4]
	float accel_x = pData->accel_g[0][0];
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	float accel_y = pData->accel_g[0][1];
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	float accel_z = pData->accel_g[0][2];
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c


	float gyro_x = pData->gyro_dps[0][0];
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	float gyro_y = pData->gyro_dps[0][1];
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	float gyro_z = pData->gyro_dps[0][2];
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	char accel_buf[64];
	char gyro_buf[64];

	snprintf(accel_buf, sizeof(accel_buf), "  accel x:%.4f y :%.4f z: %.4f",  accel_x, accel_y, accel_z);
 8006ba0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8006ba4:	f7f9 fcd0 	bl	8000548 <__aeabi_f2d>
 8006ba8:	4604      	mov	r4, r0
 8006baa:	460d      	mov	r5, r1
 8006bac:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8006bb0:	f7f9 fcca 	bl	8000548 <__aeabi_f2d>
 8006bb4:	4680      	mov	r8, r0
 8006bb6:	4689      	mov	r9, r1
 8006bb8:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8006bbc:	f7f9 fcc4 	bl	8000548 <__aeabi_f2d>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8006bc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006bcc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006bd0:	e9cd 4500 	strd	r4, r5, [sp]
 8006bd4:	4a27      	ldr	r2, [pc, #156]	@ (8006c74 <Display_Motion+0x11c>)
 8006bd6:	2140      	movs	r1, #64	@ 0x40
 8006bd8:	f002 faaa 	bl	8009130 <sniprintf>
	snprintf(gyro_buf, sizeof(gyro_buf), "  gyro x:%.4f y :%.4f z: %.4f",  gyro_x, gyro_y, gyro_z);
 8006bdc:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8006be0:	f7f9 fcb2 	bl	8000548 <__aeabi_f2d>
 8006be4:	4604      	mov	r4, r0
 8006be6:	460d      	mov	r5, r1
 8006be8:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8006bec:	f7f9 fcac 	bl	8000548 <__aeabi_f2d>
 8006bf0:	4680      	mov	r8, r0
 8006bf2:	4689      	mov	r9, r1
 8006bf4:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8006bf8:	f7f9 fca6 	bl	8000548 <__aeabi_f2d>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	f107 000c 	add.w	r0, r7, #12
 8006c04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c08:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006c0c:	e9cd 4500 	strd	r4, r5, [sp]
 8006c10:	4a19      	ldr	r2, [pc, #100]	@ (8006c78 <Display_Motion+0x120>)
 8006c12:	2140      	movs	r1, #64	@ 0x40
 8006c14:	f002 fa8c 	bl	8009130 <sniprintf>

	//space between lines of text
	int text_y_offset = 30;
 8006c18:	231e      	movs	r3, #30
 8006c1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	ST7789_WriteString(x_center, y_center , accel_buf, Font_11x18, GREEN, BLACK);
 8006c1e:	4b17      	ldr	r3, [pc, #92]	@ (8006c7c <Display_Motion+0x124>)
 8006c20:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8006c24:	88b9      	ldrh	r1, [r7, #4]
 8006c26:	88f8      	ldrh	r0, [r7, #6]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	9202      	str	r2, [sp, #8]
 8006c2c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8006c30:	9201      	str	r2, [sp, #4]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	9200      	str	r2, [sp, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4622      	mov	r2, r4
 8006c3a:	f000 fe59 	bl	80078f0 <ST7789_WriteString>
	ST7789_WriteString(x_center, y_center + text_y_offset, gyro_buf, Font_11x18, GREEN, BLACK);
 8006c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	88bb      	ldrh	r3, [r7, #4]
 8006c46:	4413      	add	r3, r2
 8006c48:	b299      	uxth	r1, r3
 8006c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006c7c <Display_Motion+0x124>)
 8006c4c:	f107 040c 	add.w	r4, r7, #12
 8006c50:	88f8      	ldrh	r0, [r7, #6]
 8006c52:	2200      	movs	r2, #0
 8006c54:	9202      	str	r2, [sp, #8]
 8006c56:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8006c5a:	9201      	str	r2, [sp, #4]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	9200      	str	r2, [sp, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4622      	mov	r2, r4
 8006c64:	f000 fe44 	bl	80078f0 <ST7789_WriteString>

}
 8006c68:	bf00      	nop
 8006c6a:	37a8      	adds	r7, #168	@ 0xa8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006c72:	bf00      	nop
 8006c74:	0800c940 	.word	0x0800c940
 8006c78:	0800c960 	.word	0x0800c960
 8006c7c:	20000098 	.word	0x20000098

08006c80 <Display_EnvironnementData>:

void Display_EnvironnementData(uint16_t x, uint16_t y,const SmartWatchData_t* pData)
{
 8006c80:	b5b0      	push	{r4, r5, r7, lr}
 8006c82:	b0a2      	sub	sp, #136	@ 0x88
 8006c84:	af04      	add	r7, sp, #16
 8006c86:	4603      	mov	r3, r0
 8006c88:	603a      	str	r2, [r7, #0]
 8006c8a:	80fb      	strh	r3, [r7, #6]
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	80bb      	strh	r3, [r7, #4]


	//uint8_t hr = SmartWatchData_handle.heart_rate;
	uint16_t temp = pData->temperature;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	edd3 7a00 	vldr	s15, [r3]
 8006c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c9a:	ee17 3a90 	vmov	r3, s15
 8006c9e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	uint16_t pressure = pData->pressure;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cac:	ee17 3a90 	vmov	r3, s15
 8006cb0:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
	uint16_t humidity = pData->humidity;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	edd3 7a02 	vldr	s15, [r3, #8]
 8006cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cbe:	ee17 3a90 	vmov	r3, s15
 8006cc2:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72


	temp = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	//pressure = 0;
	humidity = 0;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

	char buf_temp[32];
	char buf_pressure[32];
	char buf_humidity[32];

	snprintf(buf_temp, sizeof(buf_temp), " Temperature : %d", temp);
 8006cd2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8006cd6:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8006cda:	4a32      	ldr	r2, [pc, #200]	@ (8006da4 <Display_EnvironnementData+0x124>)
 8006cdc:	2120      	movs	r1, #32
 8006cde:	f002 fa27 	bl	8009130 <sniprintf>
	snprintf(buf_pressure, sizeof(buf_pressure), " Pressure : %d", pressure);
 8006ce2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8006ce6:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8006cea:	4a2f      	ldr	r2, [pc, #188]	@ (8006da8 <Display_EnvironnementData+0x128>)
 8006cec:	2120      	movs	r1, #32
 8006cee:	f002 fa1f 	bl	8009130 <sniprintf>
	snprintf(buf_humidity, sizeof(buf_humidity), " Humidity : %d", humidity);
 8006cf2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8006cf6:	f107 000c 	add.w	r0, r7, #12
 8006cfa:	4a2c      	ldr	r2, [pc, #176]	@ (8006dac <Display_EnvironnementData+0x12c>)
 8006cfc:	2120      	movs	r1, #32
 8006cfe:	f002 fa17 	bl	8009130 <sniprintf>

	//space between lines of text
	int text_y_offset = 30;
 8006d02:	231e      	movs	r3, #30
 8006d04:	66fb      	str	r3, [r7, #108]	@ 0x6c

	// no border checking so be careful when calling this
	ST7789_WriteString(x , y , buf_temp, Font_11x18, GREEN, BLACK);
 8006d06:	4b2a      	ldr	r3, [pc, #168]	@ (8006db0 <Display_EnvironnementData+0x130>)
 8006d08:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8006d0c:	88b9      	ldrh	r1, [r7, #4]
 8006d0e:	88f8      	ldrh	r0, [r7, #6]
 8006d10:	2200      	movs	r2, #0
 8006d12:	9202      	str	r2, [sp, #8]
 8006d14:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8006d18:	9201      	str	r2, [sp, #4]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	9200      	str	r2, [sp, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4622      	mov	r2, r4
 8006d22:	f000 fde5 	bl	80078f0 <ST7789_WriteString>
	ST7789_WriteString(x , y + text_y_offset , buf_pressure, Font_11x18, GREEN, BLACK);
 8006d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	88bb      	ldrh	r3, [r7, #4]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	b299      	uxth	r1, r3
 8006d30:	4b1f      	ldr	r3, [pc, #124]	@ (8006db0 <Display_EnvironnementData+0x130>)
 8006d32:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8006d36:	88f8      	ldrh	r0, [r7, #6]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	9202      	str	r2, [sp, #8]
 8006d3c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8006d40:	9201      	str	r2, [sp, #4]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	9200      	str	r2, [sp, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4622      	mov	r2, r4
 8006d4a:	f000 fdd1 	bl	80078f0 <ST7789_WriteString>
	ST7789_WriteString(x , y + 2 * text_y_offset , buf_humidity, Font_11x18, GREEN, BLACK);
 8006d4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	88bb      	ldrh	r3, [r7, #4]
 8006d58:	4413      	add	r3, r2
 8006d5a:	b299      	uxth	r1, r3
 8006d5c:	4b14      	ldr	r3, [pc, #80]	@ (8006db0 <Display_EnvironnementData+0x130>)
 8006d5e:	f107 040c 	add.w	r4, r7, #12
 8006d62:	88f8      	ldrh	r0, [r7, #6]
 8006d64:	2200      	movs	r2, #0
 8006d66:	9202      	str	r2, [sp, #8]
 8006d68:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8006d6c:	9201      	str	r2, [sp, #4]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	9200      	str	r2, [sp, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4622      	mov	r2, r4
 8006d76:	f000 fdbb 	bl	80078f0 <ST7789_WriteString>

//	Display_DrawThermo(x,y);
	Display_RenderAnimation(gif_center_x,gif_center_y,weather_animation_width,weather_animation_height,weather_gif_array,weather_gif_array_LEN,weather_gif_frame_pixel_count);
 8006d7a:	20a0      	movs	r0, #160	@ 0xa0
 8006d7c:	211e      	movs	r1, #30
 8006d7e:	2430      	movs	r4, #48	@ 0x30
 8006d80:	2530      	movs	r5, #48	@ 0x30
 8006d82:	4b0c      	ldr	r3, [pc, #48]	@ (8006db4 <Display_EnvironnementData+0x134>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	4a0b      	ldr	r2, [pc, #44]	@ (8006db8 <Display_EnvironnementData+0x138>)
 8006d8a:	6812      	ldr	r2, [r2, #0]
 8006d8c:	9202      	str	r2, [sp, #8]
 8006d8e:	9301      	str	r3, [sp, #4]
 8006d90:	4b0a      	ldr	r3, [pc, #40]	@ (8006dbc <Display_EnvironnementData+0x13c>)
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	462b      	mov	r3, r5
 8006d96:	4622      	mov	r2, r4
 8006d98:	f000 f812 	bl	8006dc0 <Display_RenderAnimation>

}
 8006d9c:	bf00      	nop
 8006d9e:	3778      	adds	r7, #120	@ 0x78
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bdb0      	pop	{r4, r5, r7, pc}
 8006da4:	0800c980 	.word	0x0800c980
 8006da8:	0800c994 	.word	0x0800c994
 8006dac:	0800c9a4 	.word	0x0800c9a4
 8006db0:	20000098 	.word	0x20000098
 8006db4:	0802c8b8 	.word	0x0802c8b8
 8006db8:	0802c8bc 	.word	0x0802c8bc
 8006dbc:	2000000c 	.word	0x2000000c

08006dc0 <Display_RenderAnimation>:

// --- Animation Function ---
// This function should be called repeatedly (e.g., from the main loop or Display_Update)
// when the animation needs to be displayed.
void Display_RenderAnimation(uint16_t x_center, uint16_t y_center,uint16_t x_width, uint16_t y_width,const uint16_t **frame_array,uint8_t animation_frame_array_len,size_t pixel_count)
{
 8006dc0:	b590      	push	{r4, r7, lr}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af02      	add	r7, sp, #8
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	4608      	mov	r0, r1
 8006dca:	4611      	mov	r1, r2
 8006dcc:	461a      	mov	r2, r3
 8006dce:	4623      	mov	r3, r4
 8006dd0:	80fb      	strh	r3, [r7, #6]
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	80bb      	strh	r3, [r7, #4]
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	807b      	strh	r3, [r7, #2]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	803b      	strh	r3, [r7, #0]
    uint32_t current_tick = HAL_GetTick();
 8006dde:	f7fb fa51 	bl	8002284 <HAL_GetTick>
 8006de2:	60f8      	str	r0, [r7, #12]

    // Check if it's time to update the frame
    if (current_tick - s_animation_last_update_tick >= ANIMATION_FRAME_DELAY_MS) {
 8006de4:	4b16      	ldr	r3, [pc, #88]	@ (8006e40 <Display_RenderAnimation+0x80>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	2b4f      	cmp	r3, #79	@ 0x4f
 8006dee:	d923      	bls.n	8006e38 <Display_RenderAnimation+0x78>
        s_animation_last_update_tick = current_tick;
 8006df0:	4a13      	ldr	r2, [pc, #76]	@ (8006e40 <Display_RenderAnimation+0x80>)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6013      	str	r3, [r2, #0]

        // Get the pointer to the current frame data
        const uint16_t* frame_data = frame_array[s_animation_current_frame];
 8006df6:	4b13      	ldr	r3, [pc, #76]	@ (8006e44 <Display_RenderAnimation+0x84>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	6a3a      	ldr	r2, [r7, #32]
 8006dfe:	4413      	add	r3, r2
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	60bb      	str	r3, [r7, #8]
    	Display_Image(x_center,y_center,x_width,y_width,frame_data,pixel_count );
 8006e04:	883c      	ldrh	r4, [r7, #0]
 8006e06:	887a      	ldrh	r2, [r7, #2]
 8006e08:	88b9      	ldrh	r1, [r7, #4]
 8006e0a:	88f8      	ldrh	r0, [r7, #6]
 8006e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	4623      	mov	r3, r4
 8006e16:	f7ff fcf3 	bl	8006800 <Display_Image>

        // Advance to the next frame
        s_animation_current_frame++;
 8006e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e44 <Display_RenderAnimation+0x84>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	4b08      	ldr	r3, [pc, #32]	@ (8006e44 <Display_RenderAnimation+0x84>)
 8006e24:	701a      	strb	r2, [r3, #0]
        if (s_animation_current_frame >= animation_frame_array_len) {
 8006e26:	4b07      	ldr	r3, [pc, #28]	@ (8006e44 <Display_RenderAnimation+0x84>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d802      	bhi.n	8006e38 <Display_RenderAnimation+0x78>
            s_animation_current_frame = 0; // Loop back to the beginning
 8006e32:	4b04      	ldr	r3, [pc, #16]	@ (8006e44 <Display_RenderAnimation+0x84>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	701a      	strb	r2, [r3, #0]
        }
    }
    // If not enough time has passed, do nothing, the previous frame remains displayed.
}
 8006e38:	bf00      	nop
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd90      	pop	{r4, r7, pc}
 8006e40:	20000a08 	.word	0x20000a08
 8006e44:	20000a06 	.word	0x20000a06

08006e48 <Display_RenderClock>:


void Display_RenderClock(const SmartWatchData_t* pData)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
	Display_Clock(40,60,pData);
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	213c      	movs	r1, #60	@ 0x3c
 8006e54:	2028      	movs	r0, #40	@ 0x28
 8006e56:	f7ff fd9b 	bl	8006990 <Display_Clock>

}
 8006e5a:	bf00      	nop
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <Display_RenderEnvironmental>:

void Display_RenderEnvironmental(const SmartWatchData_t* pData)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b082      	sub	sp, #8
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
	Display_EnvironnementData(40,60,pData);
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	213c      	movs	r1, #60	@ 0x3c
 8006e6e:	2028      	movs	r0, #40	@ 0x28
 8006e70:	f7ff ff06 	bl	8006c80 <Display_EnvironnementData>
}
 8006e74:	bf00      	nop
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <Display_RenderMotion>:

void Display_RenderMotion(const SmartWatchData_t* pData)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
	Display_Motion(40,60,pData);
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	213c      	movs	r1, #60	@ 0x3c
 8006e88:	2028      	movs	r0, #40	@ 0x28
 8006e8a:	f7ff fe65 	bl	8006b58 <Display_Motion>
}
 8006e8e:	bf00      	nop
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <Display_RenderHeartRate>:

void Display_RenderHeartRate(const SmartWatchData_t* pData)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b082      	sub	sp, #8
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
	Display_HeartRate(40, 60, pData);
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	213c      	movs	r1, #60	@ 0x3c
 8006ea2:	2028      	movs	r0, #40	@ 0x28
 8006ea4:	f7ff fd06 	bl	80068b4 <Display_HeartRate>

}
 8006ea8:	bf00      	nop
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <Display_RenderGPS>:

void Display_RenderGPS(const SmartWatchData_t* pData)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
	Display_Position(40,50,pData);
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	2132      	movs	r1, #50	@ 0x32
 8006ebc:	2028      	movs	r0, #40	@ 0x28
 8006ebe:	f7ff fdef 	bl	8006aa0 <Display_Position>
}
 8006ec2:	bf00      	nop
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <Display_Update>:


// --- Update the main Display_Update function ---
void Display_Update(UI_Screen_State_t screen, const SmartWatchData_t* pData) {
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af04      	add	r7, sp, #16
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	6039      	str	r1, [r7, #0]
 8006ed6:	71fb      	strb	r3, [r7, #7]

	previous_screenState = current_screenState;
 8006ed8:	4b27      	ldr	r3, [pc, #156]	@ (8006f78 <Display_Update+0xac>)
 8006eda:	781a      	ldrb	r2, [r3, #0]
 8006edc:	4b27      	ldr	r3, [pc, #156]	@ (8006f7c <Display_Update+0xb0>)
 8006ede:	701a      	strb	r2, [r3, #0]
	current_screenState = screen;
 8006ee0:	4a25      	ldr	r2, [pc, #148]	@ (8006f78 <Display_Update+0xac>)
 8006ee2:	79fb      	ldrb	r3, [r7, #7]
 8006ee4:	7013      	strb	r3, [r2, #0]
    // OPTIONAL: Clear screen only when changing screen state, not every frame of animation.
    if (current_screenState != previous_screenState) {
 8006ee6:	4b24      	ldr	r3, [pc, #144]	@ (8006f78 <Display_Update+0xac>)
 8006ee8:	781a      	ldrb	r2, [r3, #0]
 8006eea:	4b24      	ldr	r3, [pc, #144]	@ (8006f7c <Display_Update+0xb0>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d00a      	beq.n	8006f08 <Display_Update+0x3c>
        ST7789_Fill_Color(BLACK); // Clear only when screen changes
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	f000 fa04 	bl	8007300 <ST7789_Fill_Color>
        s_animation_current_frame = 0; // Reset animation frame when switching to it
 8006ef8:	4b21      	ldr	r3, [pc, #132]	@ (8006f80 <Display_Update+0xb4>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	701a      	strb	r2, [r3, #0]
        s_animation_last_update_tick = HAL_GetTick(); // Reset timer to draw first frame immediately
 8006efe:	f7fb f9c1 	bl	8002284 <HAL_GetTick>
 8006f02:	4603      	mov	r3, r0
 8006f04:	4a1f      	ldr	r2, [pc, #124]	@ (8006f84 <Display_Update+0xb8>)
 8006f06:	6013      	str	r3, [r2, #0]
    }

    switch (screen) {
 8006f08:	79fb      	ldrb	r3, [r7, #7]
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	d820      	bhi.n	8006f50 <Display_Update+0x84>
 8006f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f14 <Display_Update+0x48>)
 8006f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f14:	08006f29 	.word	0x08006f29
 8006f18:	08006f31 	.word	0x08006f31
 8006f1c:	08006f39 	.word	0x08006f39
 8006f20:	08006f41 	.word	0x08006f41
 8006f24:	08006f49 	.word	0x08006f49
        case SCREEN_CLOCK:
            Display_RenderClock(pData);
 8006f28:	6838      	ldr	r0, [r7, #0]
 8006f2a:	f7ff ff8d 	bl	8006e48 <Display_RenderClock>
            break;
 8006f2e:	e01e      	b.n	8006f6e <Display_Update+0xa2>
        case SCREEN_ENVIRONMENTAL:
            Display_RenderEnvironmental(pData);
 8006f30:	6838      	ldr	r0, [r7, #0]
 8006f32:	f7ff ff96 	bl	8006e62 <Display_RenderEnvironmental>
            break;
 8006f36:	e01a      	b.n	8006f6e <Display_Update+0xa2>
        case SCREEN_MOTION:
            Display_RenderMotion(pData);
 8006f38:	6838      	ldr	r0, [r7, #0]
 8006f3a:	f7ff ff9f 	bl	8006e7c <Display_RenderMotion>
            break;
 8006f3e:	e016      	b.n	8006f6e <Display_Update+0xa2>
        case SCREEN_HEART_RATE: // Example: Show static heart + text here
             Display_RenderHeartRate(pData); // Assuming this renders text + static heart
 8006f40:	6838      	ldr	r0, [r7, #0]
 8006f42:	f7ff ffa8 	bl	8006e96 <Display_RenderHeartRate>
             break;
 8006f46:	e012      	b.n	8006f6e <Display_Update+0xa2>
        case SCREEN_GPS_STATUS:
            Display_RenderGPS(pData);
 8006f48:	6838      	ldr	r0, [r7, #0]
 8006f4a:	f7ff ffb1 	bl	8006eb0 <Display_RenderGPS>
            break;
 8006f4e:	e00e      	b.n	8006f6e <Display_Update+0xa2>

        // ... other cases ...
        default:
            ST7789_WriteString(30, 20, "Unknown Screen", Font_11x18, RED, BLACK);
 8006f50:	4b0d      	ldr	r3, [pc, #52]	@ (8006f88 <Display_Update+0xbc>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	9202      	str	r2, [sp, #8]
 8006f56:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8006f5a:	9201      	str	r2, [sp, #4]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	9200      	str	r2, [sp, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a0a      	ldr	r2, [pc, #40]	@ (8006f8c <Display_Update+0xc0>)
 8006f64:	2114      	movs	r1, #20
 8006f66:	201e      	movs	r0, #30
 8006f68:	f000 fcc2 	bl	80078f0 <ST7789_WriteString>
            break;
 8006f6c:	bf00      	nop
    }
}
 8006f6e:	bf00      	nop
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20000a05 	.word	0x20000a05
 8006f7c:	20000a04 	.word	0x20000a04
 8006f80:	20000a06 	.word	0x20000a06
 8006f84:	20000a08 	.word	0x20000a08
 8006f88:	20000098 	.word	0x20000098
 8006f8c:	0800c9b4 	.word	0x0800c9b4

08006f90 <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	2180      	movs	r1, #128	@ 0x80
 8006fba:	480c      	ldr	r0, [pc, #48]	@ (8006fec <ST7789_WriteCommand+0x40>)
 8006fbc:	f7fb fed0 	bl	8002d60 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2140      	movs	r1, #64	@ 0x40
 8006fc4:	4809      	ldr	r0, [pc, #36]	@ (8006fec <ST7789_WriteCommand+0x40>)
 8006fc6:	f7fb fecb 	bl	8002d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006fca:	1df9      	adds	r1, r7, #7
 8006fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	4807      	ldr	r0, [pc, #28]	@ (8006ff0 <ST7789_WriteCommand+0x44>)
 8006fd4:	f7fd fbe9 	bl	80047aa <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8006fd8:	2201      	movs	r2, #1
 8006fda:	2180      	movs	r1, #128	@ 0x80
 8006fdc:	4803      	ldr	r0, [pc, #12]	@ (8006fec <ST7789_WriteCommand+0x40>)
 8006fde:	f7fb febf 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	48000800 	.word	0x48000800
 8006ff0:	20000598 	.word	0x20000598

08006ff4 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8006ffe:	2200      	movs	r2, #0
 8007000:	2180      	movs	r1, #128	@ 0x80
 8007002:	4815      	ldr	r0, [pc, #84]	@ (8007058 <ST7789_WriteData+0x64>)
 8007004:	f7fb feac 	bl	8002d60 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8007008:	2201      	movs	r2, #1
 800700a:	2140      	movs	r1, #64	@ 0x40
 800700c:	4812      	ldr	r0, [pc, #72]	@ (8007058 <ST7789_WriteData+0x64>)
 800700e:	f7fb fea7 	bl	8002d60 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8007012:	e015      	b.n	8007040 <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800701a:	4293      	cmp	r3, r2
 800701c:	bf28      	it	cs
 800701e:	4613      	movcs	r3, r2
 8007020:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8007022:	89fa      	ldrh	r2, [r7, #14]
 8007024:	f04f 33ff 	mov.w	r3, #4294967295
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	480c      	ldr	r0, [pc, #48]	@ (800705c <ST7789_WriteData+0x68>)
 800702c:	f7fd fbbd 	bl	80047aa <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8007030:	89fb      	ldrh	r3, [r7, #14]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	4413      	add	r3, r2
 8007036:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8007038:	89fb      	ldrh	r3, [r7, #14]
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e6      	bne.n	8007014 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 8007046:	2201      	movs	r2, #1
 8007048:	2180      	movs	r1, #128	@ 0x80
 800704a:	4803      	ldr	r0, [pc, #12]	@ (8007058 <ST7789_WriteData+0x64>)
 800704c:	f7fb fe88 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8007050:	bf00      	nop
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	48000800 	.word	0x48000800
 800705c:	20000598 	.word	0x20000598

08007060 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	4603      	mov	r3, r0
 8007068:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800706a:	2200      	movs	r2, #0
 800706c:	2180      	movs	r1, #128	@ 0x80
 800706e:	480c      	ldr	r0, [pc, #48]	@ (80070a0 <ST7789_WriteSmallData+0x40>)
 8007070:	f7fb fe76 	bl	8002d60 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8007074:	2201      	movs	r2, #1
 8007076:	2140      	movs	r1, #64	@ 0x40
 8007078:	4809      	ldr	r0, [pc, #36]	@ (80070a0 <ST7789_WriteSmallData+0x40>)
 800707a:	f7fb fe71 	bl	8002d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 800707e:	1df9      	adds	r1, r7, #7
 8007080:	f04f 33ff 	mov.w	r3, #4294967295
 8007084:	2201      	movs	r2, #1
 8007086:	4807      	ldr	r0, [pc, #28]	@ (80070a4 <ST7789_WriteSmallData+0x44>)
 8007088:	f7fd fb8f 	bl	80047aa <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800708c:	2201      	movs	r2, #1
 800708e:	2180      	movs	r1, #128	@ 0x80
 8007090:	4803      	ldr	r0, [pc, #12]	@ (80070a0 <ST7789_WriteSmallData+0x40>)
 8007092:	f7fb fe65 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8007096:	bf00      	nop
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	48000800 	.word	0x48000800
 80070a4:	20000598 	.word	0x20000598

080070a8 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 80070b2:	2036      	movs	r0, #54	@ 0x36
 80070b4:	f7ff ff7a 	bl	8006fac <ST7789_WriteCommand>
	switch (m) {
 80070b8:	79fb      	ldrb	r3, [r7, #7]
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d81a      	bhi.n	80070f4 <ST7789_SetRotation+0x4c>
 80070be:	a201      	add	r2, pc, #4	@ (adr r2, 80070c4 <ST7789_SetRotation+0x1c>)
 80070c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c4:	080070d5 	.word	0x080070d5
 80070c8:	080070dd 	.word	0x080070dd
 80070cc:	080070e5 	.word	0x080070e5
 80070d0:	080070ed 	.word	0x080070ed
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80070d4:	20c0      	movs	r0, #192	@ 0xc0
 80070d6:	f7ff ffc3 	bl	8007060 <ST7789_WriteSmallData>
		break;
 80070da:	e00c      	b.n	80070f6 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80070dc:	20a0      	movs	r0, #160	@ 0xa0
 80070de:	f7ff ffbf 	bl	8007060 <ST7789_WriteSmallData>
		break;
 80070e2:	e008      	b.n	80070f6 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80070e4:	2000      	movs	r0, #0
 80070e6:	f7ff ffbb 	bl	8007060 <ST7789_WriteSmallData>
		break;
 80070ea:	e004      	b.n	80070f6 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80070ec:	2060      	movs	r0, #96	@ 0x60
 80070ee:	f7ff ffb7 	bl	8007060 <ST7789_WriteSmallData>
		break;
 80070f2:	e000      	b.n	80070f6 <ST7789_SetRotation+0x4e>
	default:
		break;
 80070f4:	bf00      	nop
	}
}
 80070f6:	bf00      	nop
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop

08007100 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8007100:	b590      	push	{r4, r7, lr}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	4604      	mov	r4, r0
 8007108:	4608      	mov	r0, r1
 800710a:	4611      	mov	r1, r2
 800710c:	461a      	mov	r2, r3
 800710e:	4623      	mov	r3, r4
 8007110:	80fb      	strh	r3, [r7, #6]
 8007112:	4603      	mov	r3, r0
 8007114:	80bb      	strh	r3, [r7, #4]
 8007116:	460b      	mov	r3, r1
 8007118:	807b      	strh	r3, [r7, #2]
 800711a:	4613      	mov	r3, r2
 800711c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800711e:	2200      	movs	r2, #0
 8007120:	2180      	movs	r1, #128	@ 0x80
 8007122:	4825      	ldr	r0, [pc, #148]	@ (80071b8 <ST7789_SetAddressWindow+0xb8>)
 8007124:	f7fb fe1c 	bl	8002d60 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8007128:	88fb      	ldrh	r3, [r7, #6]
 800712a:	82fb      	strh	r3, [r7, #22]
 800712c:	887b      	ldrh	r3, [r7, #2]
 800712e:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8007130:	88bb      	ldrh	r3, [r7, #4]
 8007132:	3323      	adds	r3, #35	@ 0x23
 8007134:	827b      	strh	r3, [r7, #18]
 8007136:	883b      	ldrh	r3, [r7, #0]
 8007138:	3323      	adds	r3, #35	@ 0x23
 800713a:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 800713c:	202a      	movs	r0, #42	@ 0x2a
 800713e:	f7ff ff35 	bl	8006fac <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8007142:	8afb      	ldrh	r3, [r7, #22]
 8007144:	0a1b      	lsrs	r3, r3, #8
 8007146:	b29b      	uxth	r3, r3
 8007148:	b2db      	uxtb	r3, r3
 800714a:	733b      	strb	r3, [r7, #12]
 800714c:	8afb      	ldrh	r3, [r7, #22]
 800714e:	b2db      	uxtb	r3, r3
 8007150:	737b      	strb	r3, [r7, #13]
 8007152:	8abb      	ldrh	r3, [r7, #20]
 8007154:	0a1b      	lsrs	r3, r3, #8
 8007156:	b29b      	uxth	r3, r3
 8007158:	b2db      	uxtb	r3, r3
 800715a:	73bb      	strb	r3, [r7, #14]
 800715c:	8abb      	ldrh	r3, [r7, #20]
 800715e:	b2db      	uxtb	r3, r3
 8007160:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8007162:	f107 030c 	add.w	r3, r7, #12
 8007166:	2104      	movs	r1, #4
 8007168:	4618      	mov	r0, r3
 800716a:	f7ff ff43 	bl	8006ff4 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800716e:	202b      	movs	r0, #43	@ 0x2b
 8007170:	f7ff ff1c 	bl	8006fac <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8007174:	8a7b      	ldrh	r3, [r7, #18]
 8007176:	0a1b      	lsrs	r3, r3, #8
 8007178:	b29b      	uxth	r3, r3
 800717a:	b2db      	uxtb	r3, r3
 800717c:	723b      	strb	r3, [r7, #8]
 800717e:	8a7b      	ldrh	r3, [r7, #18]
 8007180:	b2db      	uxtb	r3, r3
 8007182:	727b      	strb	r3, [r7, #9]
 8007184:	8a3b      	ldrh	r3, [r7, #16]
 8007186:	0a1b      	lsrs	r3, r3, #8
 8007188:	b29b      	uxth	r3, r3
 800718a:	b2db      	uxtb	r3, r3
 800718c:	72bb      	strb	r3, [r7, #10]
 800718e:	8a3b      	ldrh	r3, [r7, #16]
 8007190:	b2db      	uxtb	r3, r3
 8007192:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8007194:	f107 0308 	add.w	r3, r7, #8
 8007198:	2104      	movs	r1, #4
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff ff2a 	bl	8006ff4 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 80071a0:	202c      	movs	r0, #44	@ 0x2c
 80071a2:	f7ff ff03 	bl	8006fac <ST7789_WriteCommand>
	ST7789_UnSelect();
 80071a6:	2201      	movs	r2, #1
 80071a8:	2180      	movs	r1, #128	@ 0x80
 80071aa:	4803      	ldr	r0, [pc, #12]	@ (80071b8 <ST7789_SetAddressWindow+0xb8>)
 80071ac:	f7fb fdd8 	bl	8002d60 <HAL_GPIO_WritePin>
}
 80071b0:	bf00      	nop
 80071b2:	371c      	adds	r7, #28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd90      	pop	{r4, r7, pc}
 80071b8:	48000800 	.word	0x48000800

080071bc <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 80071bc:	b590      	push	{r4, r7, lr}
 80071be:	b08b      	sub	sp, #44	@ 0x2c
 80071c0:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(10);
 80071c2:	200a      	movs	r0, #10
 80071c4:	f7fb f86a 	bl	800229c <HAL_Delay>
    ST7789_RST_Clr();
 80071c8:	2200      	movs	r2, #0
 80071ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80071ce:	4848      	ldr	r0, [pc, #288]	@ (80072f0 <ST7789_Init+0x134>)
 80071d0:	f7fb fdc6 	bl	8002d60 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80071d4:	200a      	movs	r0, #10
 80071d6:	f7fb f861 	bl	800229c <HAL_Delay>
    ST7789_RST_Set();
 80071da:	2201      	movs	r2, #1
 80071dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80071e0:	4843      	ldr	r0, [pc, #268]	@ (80072f0 <ST7789_Init+0x134>)
 80071e2:	f7fb fdbd 	bl	8002d60 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80071e6:	2014      	movs	r0, #20
 80071e8:	f7fb f858 	bl	800229c <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80071ec:	203a      	movs	r0, #58	@ 0x3a
 80071ee:	f7ff fedd 	bl	8006fac <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 80071f2:	2055      	movs	r0, #85	@ 0x55
 80071f4:	f7ff ff34 	bl	8007060 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80071f8:	20b2      	movs	r0, #178	@ 0xb2
 80071fa:	f7ff fed7 	bl	8006fac <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80071fe:	4a3d      	ldr	r2, [pc, #244]	@ (80072f4 <ST7789_Init+0x138>)
 8007200:	f107 0320 	add.w	r3, r7, #32
 8007204:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007208:	6018      	str	r0, [r3, #0]
 800720a:	3304      	adds	r3, #4
 800720c:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 800720e:	f107 0320 	add.w	r3, r7, #32
 8007212:	2105      	movs	r1, #5
 8007214:	4618      	mov	r0, r3
 8007216:	f7ff feed 	bl	8006ff4 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 800721a:	2003      	movs	r0, #3
 800721c:	f7ff ff44 	bl	80070a8 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8007220:	20b7      	movs	r0, #183	@ 0xb7
 8007222:	f7ff fec3 	bl	8006fac <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8007226:	2035      	movs	r0, #53	@ 0x35
 8007228:	f7ff ff1a 	bl	8007060 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 800722c:	20bb      	movs	r0, #187	@ 0xbb
 800722e:	f7ff febd 	bl	8006fac <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8007232:	2019      	movs	r0, #25
 8007234:	f7ff ff14 	bl	8007060 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8007238:	20c0      	movs	r0, #192	@ 0xc0
 800723a:	f7ff feb7 	bl	8006fac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 800723e:	202c      	movs	r0, #44	@ 0x2c
 8007240:	f7ff ff0e 	bl	8007060 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8007244:	20c2      	movs	r0, #194	@ 0xc2
 8007246:	f7ff feb1 	bl	8006fac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 800724a:	2001      	movs	r0, #1
 800724c:	f7ff ff08 	bl	8007060 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8007250:	20c3      	movs	r0, #195	@ 0xc3
 8007252:	f7ff feab 	bl	8006fac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8007256:	2012      	movs	r0, #18
 8007258:	f7ff ff02 	bl	8007060 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 800725c:	20c4      	movs	r0, #196	@ 0xc4
 800725e:	f7ff fea5 	bl	8006fac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8007262:	2020      	movs	r0, #32
 8007264:	f7ff fefc 	bl	8007060 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8007268:	20c6      	movs	r0, #198	@ 0xc6
 800726a:	f7ff fe9f 	bl	8006fac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 800726e:	200f      	movs	r0, #15
 8007270:	f7ff fef6 	bl	8007060 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8007274:	20d0      	movs	r0, #208	@ 0xd0
 8007276:	f7ff fe99 	bl	8006fac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800727a:	20a4      	movs	r0, #164	@ 0xa4
 800727c:	f7ff fef0 	bl	8007060 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8007280:	20a1      	movs	r0, #161	@ 0xa1
 8007282:	f7ff feed 	bl	8007060 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8007286:	20e0      	movs	r0, #224	@ 0xe0
 8007288:	f7ff fe90 	bl	8006fac <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 800728c:	4b1a      	ldr	r3, [pc, #104]	@ (80072f8 <ST7789_Init+0x13c>)
 800728e:	f107 0410 	add.w	r4, r7, #16
 8007292:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007294:	c407      	stmia	r4!, {r0, r1, r2}
 8007296:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8007298:	f107 0310 	add.w	r3, r7, #16
 800729c:	210e      	movs	r1, #14
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff fea8 	bl	8006ff4 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 80072a4:	20e1      	movs	r0, #225	@ 0xe1
 80072a6:	f7ff fe81 	bl	8006fac <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80072aa:	4b14      	ldr	r3, [pc, #80]	@ (80072fc <ST7789_Init+0x140>)
 80072ac:	463c      	mov	r4, r7
 80072ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072b0:	c407      	stmia	r4!, {r0, r1, r2}
 80072b2:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80072b4:	463b      	mov	r3, r7
 80072b6:	210e      	movs	r1, #14
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7ff fe9b 	bl	8006ff4 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 80072be:	2021      	movs	r0, #33	@ 0x21
 80072c0:	f7ff fe74 	bl	8006fac <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 80072c4:	2011      	movs	r0, #17
 80072c6:	f7ff fe71 	bl	8006fac <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 80072ca:	2013      	movs	r0, #19
 80072cc:	f7ff fe6e 	bl	8006fac <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 80072d0:	2029      	movs	r0, #41	@ 0x29
 80072d2:	f7ff fe6b 	bl	8006fac <ST7789_WriteCommand>

	HAL_Delay(50);
 80072d6:	2032      	movs	r0, #50	@ 0x32
 80072d8:	f7fa ffe0 	bl	800229c <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 80072dc:	2000      	movs	r0, #0
 80072de:	f000 f80f 	bl	8007300 <ST7789_Fill_Color>
	HAL_Delay(50);
 80072e2:	2032      	movs	r0, #50	@ 0x32
 80072e4:	f7fa ffda 	bl	800229c <HAL_Delay>

}
 80072e8:	bf00      	nop
 80072ea:	372c      	adds	r7, #44	@ 0x2c
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd90      	pop	{r4, r7, pc}
 80072f0:	48000400 	.word	0x48000400
 80072f4:	0800c9c4 	.word	0x0800c9c4
 80072f8:	0800c9cc 	.word	0x0800c9cc
 80072fc:	0800c9dc 	.word	0x0800c9dc

08007300 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	4603      	mov	r3, r0
 8007308:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800730a:	23a9      	movs	r3, #169	@ 0xa9
 800730c:	f240 123f 	movw	r2, #319	@ 0x13f
 8007310:	2100      	movs	r1, #0
 8007312:	2000      	movs	r0, #0
 8007314:	f7ff fef4 	bl	8007100 <ST7789_SetAddressWindow>
	ST7789_Select();
 8007318:	2200      	movs	r2, #0
 800731a:	2180      	movs	r1, #128	@ 0x80
 800731c:	4816      	ldr	r0, [pc, #88]	@ (8007378 <ST7789_Fill_Color+0x78>)
 800731e:	f7fb fd1f 	bl	8002d60 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 8007322:	2300      	movs	r3, #0
 8007324:	81fb      	strh	r3, [r7, #14]
 8007326:	e019      	b.n	800735c <ST7789_Fill_Color+0x5c>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8007328:	2300      	movs	r3, #0
 800732a:	81bb      	strh	r3, [r7, #12]
 800732c:	e010      	b.n	8007350 <ST7789_Fill_Color+0x50>
					uint8_t data[] = {color >> 8, color & 0xFF};
 800732e:	88fb      	ldrh	r3, [r7, #6]
 8007330:	0a1b      	lsrs	r3, r3, #8
 8007332:	b29b      	uxth	r3, r3
 8007334:	b2db      	uxtb	r3, r3
 8007336:	723b      	strb	r3, [r7, #8]
 8007338:	88fb      	ldrh	r3, [r7, #6]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 800733e:	f107 0308 	add.w	r3, r7, #8
 8007342:	2102      	movs	r1, #2
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff fe55 	bl	8006ff4 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 800734a:	89bb      	ldrh	r3, [r7, #12]
 800734c:	3301      	adds	r3, #1
 800734e:	81bb      	strh	r3, [r7, #12]
 8007350:	89bb      	ldrh	r3, [r7, #12]
 8007352:	2ba9      	cmp	r3, #169	@ 0xa9
 8007354:	d9eb      	bls.n	800732e <ST7789_Fill_Color+0x2e>
		for (i = 0; i < ST7789_WIDTH; i++)
 8007356:	89fb      	ldrh	r3, [r7, #14]
 8007358:	3301      	adds	r3, #1
 800735a:	81fb      	strh	r3, [r7, #14]
 800735c:	89fb      	ldrh	r3, [r7, #14]
 800735e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007362:	d3e1      	bcc.n	8007328 <ST7789_Fill_Color+0x28>
				}
	#endif
	ST7789_UnSelect();
 8007364:	2201      	movs	r2, #1
 8007366:	2180      	movs	r1, #128	@ 0x80
 8007368:	4803      	ldr	r0, [pc, #12]	@ (8007378 <ST7789_Fill_Color+0x78>)
 800736a:	f7fb fcf9 	bl	8002d60 <HAL_GPIO_WritePin>
}
 800736e:	bf00      	nop
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	48000800 	.word	0x48000800

0800737c <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	4603      	mov	r3, r0
 8007384:	80fb      	strh	r3, [r7, #6]
 8007386:	460b      	mov	r3, r1
 8007388:	80bb      	strh	r3, [r7, #4]
 800738a:	4613      	mov	r3, r2
 800738c:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 800738e:	88fb      	ldrh	r3, [r7, #6]
 8007390:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007394:	d221      	bcs.n	80073da <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8007396:	88bb      	ldrh	r3, [r7, #4]
 8007398:	2ba9      	cmp	r3, #169	@ 0xa9
 800739a:	d81e      	bhi.n	80073da <ST7789_DrawPixel+0x5e>
	
	ST7789_SetAddressWindow(x, y, x, y);
 800739c:	88bb      	ldrh	r3, [r7, #4]
 800739e:	88fa      	ldrh	r2, [r7, #6]
 80073a0:	88b9      	ldrh	r1, [r7, #4]
 80073a2:	88f8      	ldrh	r0, [r7, #6]
 80073a4:	f7ff feac 	bl	8007100 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 80073a8:	887b      	ldrh	r3, [r7, #2]
 80073aa:	0a1b      	lsrs	r3, r3, #8
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	733b      	strb	r3, [r7, #12]
 80073b2:	887b      	ldrh	r3, [r7, #2]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 80073b8:	2200      	movs	r2, #0
 80073ba:	2180      	movs	r1, #128	@ 0x80
 80073bc:	4809      	ldr	r0, [pc, #36]	@ (80073e4 <ST7789_DrawPixel+0x68>)
 80073be:	f7fb fccf 	bl	8002d60 <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 80073c2:	f107 030c 	add.w	r3, r7, #12
 80073c6:	2102      	movs	r1, #2
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7ff fe13 	bl	8006ff4 <ST7789_WriteData>
	ST7789_UnSelect();
 80073ce:	2201      	movs	r2, #1
 80073d0:	2180      	movs	r1, #128	@ 0x80
 80073d2:	4804      	ldr	r0, [pc, #16]	@ (80073e4 <ST7789_DrawPixel+0x68>)
 80073d4:	f7fb fcc4 	bl	8002d60 <HAL_GPIO_WritePin>
 80073d8:	e000      	b.n	80073dc <ST7789_DrawPixel+0x60>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80073da:	bf00      	nop
}
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	48000800 	.word	0x48000800

080073e8 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 80073e8:	b590      	push	{r4, r7, lr}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	4604      	mov	r4, r0
 80073f0:	4608      	mov	r0, r1
 80073f2:	4611      	mov	r1, r2
 80073f4:	461a      	mov	r2, r3
 80073f6:	4623      	mov	r3, r4
 80073f8:	80fb      	strh	r3, [r7, #6]
 80073fa:	4603      	mov	r3, r0
 80073fc:	80bb      	strh	r3, [r7, #4]
 80073fe:	460b      	mov	r3, r1
 8007400:	807b      	strh	r3, [r7, #2]
 8007402:	4613      	mov	r3, r2
 8007404:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8007406:	883a      	ldrh	r2, [r7, #0]
 8007408:	88bb      	ldrh	r3, [r7, #4]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8007410:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8007414:	8879      	ldrh	r1, [r7, #2]
 8007416:	88fb      	ldrh	r3, [r7, #6]
 8007418:	1acb      	subs	r3, r1, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	bfb8      	it	lt
 800741e:	425b      	neglt	r3, r3
 8007420:	429a      	cmp	r2, r3
 8007422:	bfcc      	ite	gt
 8007424:	2301      	movgt	r3, #1
 8007426:	2300      	movle	r3, #0
 8007428:	b2db      	uxtb	r3, r3
 800742a:	827b      	strh	r3, [r7, #18]
    if (steep) {
 800742c:	8a7b      	ldrh	r3, [r7, #18]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00b      	beq.n	800744a <ST7789_DrawLine+0x62>
		swap = x0;
 8007432:	88fb      	ldrh	r3, [r7, #6]
 8007434:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 8007436:	88bb      	ldrh	r3, [r7, #4]
 8007438:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 800743a:	8a3b      	ldrh	r3, [r7, #16]
 800743c:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 800743e:	887b      	ldrh	r3, [r7, #2]
 8007440:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 8007442:	883b      	ldrh	r3, [r7, #0]
 8007444:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 8007446:	8a3b      	ldrh	r3, [r7, #16]
 8007448:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 800744a:	88fa      	ldrh	r2, [r7, #6]
 800744c:	887b      	ldrh	r3, [r7, #2]
 800744e:	429a      	cmp	r2, r3
 8007450:	d90b      	bls.n	800746a <ST7789_DrawLine+0x82>
		swap = x0;
 8007452:	88fb      	ldrh	r3, [r7, #6]
 8007454:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 8007456:	887b      	ldrh	r3, [r7, #2]
 8007458:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 800745a:	8a3b      	ldrh	r3, [r7, #16]
 800745c:	807b      	strh	r3, [r7, #2]

		swap = y0;
 800745e:	88bb      	ldrh	r3, [r7, #4]
 8007460:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 8007462:	883b      	ldrh	r3, [r7, #0]
 8007464:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 8007466:	8a3b      	ldrh	r3, [r7, #16]
 8007468:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 800746a:	887a      	ldrh	r2, [r7, #2]
 800746c:	88fb      	ldrh	r3, [r7, #6]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	b29b      	uxth	r3, r3
 8007472:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 8007474:	883a      	ldrh	r2, [r7, #0]
 8007476:	88bb      	ldrh	r3, [r7, #4]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	bfb8      	it	lt
 800747e:	425b      	neglt	r3, r3
 8007480:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8007482:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007486:	0fda      	lsrs	r2, r3, #31
 8007488:	4413      	add	r3, r2
 800748a:	105b      	asrs	r3, r3, #1
 800748c:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 800748e:	88ba      	ldrh	r2, [r7, #4]
 8007490:	883b      	ldrh	r3, [r7, #0]
 8007492:	429a      	cmp	r2, r3
 8007494:	d202      	bcs.n	800749c <ST7789_DrawLine+0xb4>
        ystep = 1;
 8007496:	2301      	movs	r3, #1
 8007498:	82bb      	strh	r3, [r7, #20]
 800749a:	e028      	b.n	80074ee <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 800749c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80074a0:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 80074a2:	e024      	b.n	80074ee <ST7789_DrawLine+0x106>
        if (steep) {
 80074a4:	8a7b      	ldrh	r3, [r7, #18]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d006      	beq.n	80074b8 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 80074aa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80074ac:	88f9      	ldrh	r1, [r7, #6]
 80074ae:	88bb      	ldrh	r3, [r7, #4]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7ff ff63 	bl	800737c <ST7789_DrawPixel>
 80074b6:	e005      	b.n	80074c4 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 80074b8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80074ba:	88b9      	ldrh	r1, [r7, #4]
 80074bc:	88fb      	ldrh	r3, [r7, #6]
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff ff5c 	bl	800737c <ST7789_DrawPixel>
        }
        err -= dy;
 80074c4:	8afa      	ldrh	r2, [r7, #22]
 80074c6:	89bb      	ldrh	r3, [r7, #12]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 80074ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	da08      	bge.n	80074e8 <ST7789_DrawLine+0x100>
            y0 += ystep;
 80074d6:	8aba      	ldrh	r2, [r7, #20]
 80074d8:	88bb      	ldrh	r3, [r7, #4]
 80074da:	4413      	add	r3, r2
 80074dc:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80074de:	8afa      	ldrh	r2, [r7, #22]
 80074e0:	89fb      	ldrh	r3, [r7, #14]
 80074e2:	4413      	add	r3, r2
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 80074e8:	88fb      	ldrh	r3, [r7, #6]
 80074ea:	3301      	adds	r3, #1
 80074ec:	80fb      	strh	r3, [r7, #6]
 80074ee:	88fa      	ldrh	r2, [r7, #6]
 80074f0:	887b      	ldrh	r3, [r7, #2]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d9d6      	bls.n	80074a4 <ST7789_DrawLine+0xbc>
        }
    }
}
 80074f6:	bf00      	nop
 80074f8:	bf00      	nop
 80074fa:	371c      	adds	r7, #28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd90      	pop	{r4, r7, pc}

08007500 <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8007500:	b590      	push	{r4, r7, lr}
 8007502:	b085      	sub	sp, #20
 8007504:	af02      	add	r7, sp, #8
 8007506:	4604      	mov	r4, r0
 8007508:	4608      	mov	r0, r1
 800750a:	4611      	mov	r1, r2
 800750c:	461a      	mov	r2, r3
 800750e:	4623      	mov	r3, r4
 8007510:	80fb      	strh	r3, [r7, #6]
 8007512:	4603      	mov	r3, r0
 8007514:	80bb      	strh	r3, [r7, #4]
 8007516:	460b      	mov	r3, r1
 8007518:	807b      	strh	r3, [r7, #2]
 800751a:	4613      	mov	r3, r2
 800751c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800751e:	2200      	movs	r2, #0
 8007520:	2180      	movs	r1, #128	@ 0x80
 8007522:	4818      	ldr	r0, [pc, #96]	@ (8007584 <ST7789_DrawRectangle+0x84>)
 8007524:	f7fb fc1c 	bl	8002d60 <HAL_GPIO_WritePin>
	ST7789_DrawLine(x1, y1, x2, y1, color);
 8007528:	88bc      	ldrh	r4, [r7, #4]
 800752a:	887a      	ldrh	r2, [r7, #2]
 800752c:	88b9      	ldrh	r1, [r7, #4]
 800752e:	88f8      	ldrh	r0, [r7, #6]
 8007530:	8b3b      	ldrh	r3, [r7, #24]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	4623      	mov	r3, r4
 8007536:	f7ff ff57 	bl	80073e8 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 800753a:	883c      	ldrh	r4, [r7, #0]
 800753c:	88fa      	ldrh	r2, [r7, #6]
 800753e:	88b9      	ldrh	r1, [r7, #4]
 8007540:	88f8      	ldrh	r0, [r7, #6]
 8007542:	8b3b      	ldrh	r3, [r7, #24]
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	4623      	mov	r3, r4
 8007548:	f7ff ff4e 	bl	80073e8 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 800754c:	883c      	ldrh	r4, [r7, #0]
 800754e:	887a      	ldrh	r2, [r7, #2]
 8007550:	8839      	ldrh	r1, [r7, #0]
 8007552:	88f8      	ldrh	r0, [r7, #6]
 8007554:	8b3b      	ldrh	r3, [r7, #24]
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	4623      	mov	r3, r4
 800755a:	f7ff ff45 	bl	80073e8 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 800755e:	883c      	ldrh	r4, [r7, #0]
 8007560:	887a      	ldrh	r2, [r7, #2]
 8007562:	88b9      	ldrh	r1, [r7, #4]
 8007564:	8878      	ldrh	r0, [r7, #2]
 8007566:	8b3b      	ldrh	r3, [r7, #24]
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	4623      	mov	r3, r4
 800756c:	f7ff ff3c 	bl	80073e8 <ST7789_DrawLine>
	ST7789_UnSelect();
 8007570:	2201      	movs	r2, #1
 8007572:	2180      	movs	r1, #128	@ 0x80
 8007574:	4803      	ldr	r0, [pc, #12]	@ (8007584 <ST7789_DrawRectangle+0x84>)
 8007576:	f7fb fbf3 	bl	8002d60 <HAL_GPIO_WritePin>
}
 800757a:	bf00      	nop
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	bd90      	pop	{r4, r7, pc}
 8007582:	bf00      	nop
 8007584:	48000800 	.word	0x48000800

08007588 <ST7789_DrawCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle line
 * @return  none
 */
void ST7789_DrawCircle(uint16_t x0, uint16_t y0, uint8_t r, uint16_t color)
{
 8007588:	b590      	push	{r4, r7, lr}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	4604      	mov	r4, r0
 8007590:	4608      	mov	r0, r1
 8007592:	4611      	mov	r1, r2
 8007594:	461a      	mov	r2, r3
 8007596:	4623      	mov	r3, r4
 8007598:	80fb      	strh	r3, [r7, #6]
 800759a:	4603      	mov	r3, r0
 800759c:	80bb      	strh	r3, [r7, #4]
 800759e:	460b      	mov	r3, r1
 80075a0:	70fb      	strb	r3, [r7, #3]
 80075a2:	4613      	mov	r3, r2
 80075a4:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 80075a6:	78fb      	ldrb	r3, [r7, #3]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	f1c3 0301 	rsb	r3, r3, #1
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80075b2:	2301      	movs	r3, #1
 80075b4:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80075b6:	78fb      	ldrb	r3, [r7, #3]
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	461a      	mov	r2, r3
 80075bc:	03d2      	lsls	r2, r2, #15
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80075c6:	2300      	movs	r3, #0
 80075c8:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80075ca:	78fb      	ldrb	r3, [r7, #3]
 80075cc:	81fb      	strh	r3, [r7, #14]

	ST7789_Select();
 80075ce:	2200      	movs	r2, #0
 80075d0:	2180      	movs	r1, #128	@ 0x80
 80075d2:	485f      	ldr	r0, [pc, #380]	@ (8007750 <ST7789_DrawCircle+0x1c8>)
 80075d4:	f7fb fbc4 	bl	8002d60 <HAL_GPIO_WritePin>
	ST7789_DrawPixel(x0, y0 + r, color);
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	b29a      	uxth	r2, r3
 80075dc:	88bb      	ldrh	r3, [r7, #4]
 80075de:	4413      	add	r3, r2
 80075e0:	b299      	uxth	r1, r3
 80075e2:	883a      	ldrh	r2, [r7, #0]
 80075e4:	88fb      	ldrh	r3, [r7, #6]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7ff fec8 	bl	800737c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 80075ec:	78fb      	ldrb	r3, [r7, #3]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	88ba      	ldrh	r2, [r7, #4]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	b299      	uxth	r1, r3
 80075f6:	883a      	ldrh	r2, [r7, #0]
 80075f8:	88fb      	ldrh	r3, [r7, #6]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff febe 	bl	800737c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	b29a      	uxth	r2, r3
 8007604:	88fb      	ldrh	r3, [r7, #6]
 8007606:	4413      	add	r3, r2
 8007608:	b29b      	uxth	r3, r3
 800760a:	883a      	ldrh	r2, [r7, #0]
 800760c:	88b9      	ldrh	r1, [r7, #4]
 800760e:	4618      	mov	r0, r3
 8007610:	f7ff feb4 	bl	800737c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8007614:	78fb      	ldrb	r3, [r7, #3]
 8007616:	b29b      	uxth	r3, r3
 8007618:	88fa      	ldrh	r2, [r7, #6]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	b29b      	uxth	r3, r3
 800761e:	883a      	ldrh	r2, [r7, #0]
 8007620:	88b9      	ldrh	r1, [r7, #4]
 8007622:	4618      	mov	r0, r3
 8007624:	f7ff feaa 	bl	800737c <ST7789_DrawPixel>

	while (x < y) {
 8007628:	e081      	b.n	800772e <ST7789_DrawCircle+0x1a6>
		if (f >= 0) {
 800762a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800762e:	2b00      	cmp	r3, #0
 8007630:	db0e      	blt.n	8007650 <ST7789_DrawCircle+0xc8>
			y--;
 8007632:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007636:	b29b      	uxth	r3, r3
 8007638:	3b01      	subs	r3, #1
 800763a:	b29b      	uxth	r3, r3
 800763c:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 800763e:	8a7b      	ldrh	r3, [r7, #18]
 8007640:	3302      	adds	r3, #2
 8007642:	b29b      	uxth	r3, r3
 8007644:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8007646:	8afa      	ldrh	r2, [r7, #22]
 8007648:	8a7b      	ldrh	r3, [r7, #18]
 800764a:	4413      	add	r3, r2
 800764c:	b29b      	uxth	r3, r3
 800764e:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8007650:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007654:	b29b      	uxth	r3, r3
 8007656:	3301      	adds	r3, #1
 8007658:	b29b      	uxth	r3, r3
 800765a:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 800765c:	8abb      	ldrh	r3, [r7, #20]
 800765e:	3302      	adds	r3, #2
 8007660:	b29b      	uxth	r3, r3
 8007662:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8007664:	8afa      	ldrh	r2, [r7, #22]
 8007666:	8abb      	ldrh	r3, [r7, #20]
 8007668:	4413      	add	r3, r2
 800766a:	b29b      	uxth	r3, r3
 800766c:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawPixel(x0 + x, y0 + y, color);
 800766e:	8a3a      	ldrh	r2, [r7, #16]
 8007670:	88fb      	ldrh	r3, [r7, #6]
 8007672:	4413      	add	r3, r2
 8007674:	b298      	uxth	r0, r3
 8007676:	89fa      	ldrh	r2, [r7, #14]
 8007678:	88bb      	ldrh	r3, [r7, #4]
 800767a:	4413      	add	r3, r2
 800767c:	b29b      	uxth	r3, r3
 800767e:	883a      	ldrh	r2, [r7, #0]
 8007680:	4619      	mov	r1, r3
 8007682:	f7ff fe7b 	bl	800737c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 + y, color);
 8007686:	8a3b      	ldrh	r3, [r7, #16]
 8007688:	88fa      	ldrh	r2, [r7, #6]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	b298      	uxth	r0, r3
 800768e:	89fa      	ldrh	r2, [r7, #14]
 8007690:	88bb      	ldrh	r3, [r7, #4]
 8007692:	4413      	add	r3, r2
 8007694:	b29b      	uxth	r3, r3
 8007696:	883a      	ldrh	r2, [r7, #0]
 8007698:	4619      	mov	r1, r3
 800769a:	f7ff fe6f 	bl	800737c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + x, y0 - y, color);
 800769e:	8a3a      	ldrh	r2, [r7, #16]
 80076a0:	88fb      	ldrh	r3, [r7, #6]
 80076a2:	4413      	add	r3, r2
 80076a4:	b298      	uxth	r0, r3
 80076a6:	89fb      	ldrh	r3, [r7, #14]
 80076a8:	88ba      	ldrh	r2, [r7, #4]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	883a      	ldrh	r2, [r7, #0]
 80076b0:	4619      	mov	r1, r3
 80076b2:	f7ff fe63 	bl	800737c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 - y, color);
 80076b6:	8a3b      	ldrh	r3, [r7, #16]
 80076b8:	88fa      	ldrh	r2, [r7, #6]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	b298      	uxth	r0, r3
 80076be:	89fb      	ldrh	r3, [r7, #14]
 80076c0:	88ba      	ldrh	r2, [r7, #4]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	883a      	ldrh	r2, [r7, #0]
 80076c8:	4619      	mov	r1, r3
 80076ca:	f7ff fe57 	bl	800737c <ST7789_DrawPixel>

		ST7789_DrawPixel(x0 + y, y0 + x, color);
 80076ce:	89fa      	ldrh	r2, [r7, #14]
 80076d0:	88fb      	ldrh	r3, [r7, #6]
 80076d2:	4413      	add	r3, r2
 80076d4:	b298      	uxth	r0, r3
 80076d6:	8a3a      	ldrh	r2, [r7, #16]
 80076d8:	88bb      	ldrh	r3, [r7, #4]
 80076da:	4413      	add	r3, r2
 80076dc:	b29b      	uxth	r3, r3
 80076de:	883a      	ldrh	r2, [r7, #0]
 80076e0:	4619      	mov	r1, r3
 80076e2:	f7ff fe4b 	bl	800737c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 + x, color);
 80076e6:	89fb      	ldrh	r3, [r7, #14]
 80076e8:	88fa      	ldrh	r2, [r7, #6]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	b298      	uxth	r0, r3
 80076ee:	8a3a      	ldrh	r2, [r7, #16]
 80076f0:	88bb      	ldrh	r3, [r7, #4]
 80076f2:	4413      	add	r3, r2
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	883a      	ldrh	r2, [r7, #0]
 80076f8:	4619      	mov	r1, r3
 80076fa:	f7ff fe3f 	bl	800737c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + y, y0 - x, color);
 80076fe:	89fa      	ldrh	r2, [r7, #14]
 8007700:	88fb      	ldrh	r3, [r7, #6]
 8007702:	4413      	add	r3, r2
 8007704:	b298      	uxth	r0, r3
 8007706:	8a3b      	ldrh	r3, [r7, #16]
 8007708:	88ba      	ldrh	r2, [r7, #4]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	b29b      	uxth	r3, r3
 800770e:	883a      	ldrh	r2, [r7, #0]
 8007710:	4619      	mov	r1, r3
 8007712:	f7ff fe33 	bl	800737c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 - x, color);
 8007716:	89fb      	ldrh	r3, [r7, #14]
 8007718:	88fa      	ldrh	r2, [r7, #6]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	b298      	uxth	r0, r3
 800771e:	8a3b      	ldrh	r3, [r7, #16]
 8007720:	88ba      	ldrh	r2, [r7, #4]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	b29b      	uxth	r3, r3
 8007726:	883a      	ldrh	r2, [r7, #0]
 8007728:	4619      	mov	r1, r3
 800772a:	f7ff fe27 	bl	800737c <ST7789_DrawPixel>
	while (x < y) {
 800772e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007732:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007736:	429a      	cmp	r2, r3
 8007738:	f6ff af77 	blt.w	800762a <ST7789_DrawCircle+0xa2>
	}
	ST7789_UnSelect();
 800773c:	2201      	movs	r2, #1
 800773e:	2180      	movs	r1, #128	@ 0x80
 8007740:	4803      	ldr	r0, [pc, #12]	@ (8007750 <ST7789_DrawCircle+0x1c8>)
 8007742:	f7fb fb0d 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8007746:	bf00      	nop
 8007748:	371c      	adds	r7, #28
 800774a:	46bd      	mov	sp, r7
 800774c:	bd90      	pop	{r4, r7, pc}
 800774e:	bf00      	nop
 8007750:	48000800 	.word	0x48000800

08007754 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 8007754:	b590      	push	{r4, r7, lr}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	4604      	mov	r4, r0
 800775c:	4608      	mov	r0, r1
 800775e:	4611      	mov	r1, r2
 8007760:	461a      	mov	r2, r3
 8007762:	4623      	mov	r3, r4
 8007764:	80fb      	strh	r3, [r7, #6]
 8007766:	4603      	mov	r3, r0
 8007768:	80bb      	strh	r3, [r7, #4]
 800776a:	460b      	mov	r3, r1
 800776c:	807b      	strh	r3, [r7, #2]
 800776e:	4613      	mov	r3, r2
 8007770:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 8007772:	88fb      	ldrh	r3, [r7, #6]
 8007774:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007778:	d232      	bcs.n	80077e0 <ST7789_DrawImage+0x8c>
 800777a:	88bb      	ldrh	r3, [r7, #4]
 800777c:	2ba9      	cmp	r3, #169	@ 0xa9
 800777e:	d82f      	bhi.n	80077e0 <ST7789_DrawImage+0x8c>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 8007780:	88fa      	ldrh	r2, [r7, #6]
 8007782:	887b      	ldrh	r3, [r7, #2]
 8007784:	4413      	add	r3, r2
 8007786:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800778a:	dc2b      	bgt.n	80077e4 <ST7789_DrawImage+0x90>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 800778c:	88ba      	ldrh	r2, [r7, #4]
 800778e:	883b      	ldrh	r3, [r7, #0]
 8007790:	4413      	add	r3, r2
 8007792:	2baa      	cmp	r3, #170	@ 0xaa
 8007794:	dc28      	bgt.n	80077e8 <ST7789_DrawImage+0x94>
		return;

	ST7789_Select();
 8007796:	2200      	movs	r2, #0
 8007798:	2180      	movs	r1, #128	@ 0x80
 800779a:	4815      	ldr	r0, [pc, #84]	@ (80077f0 <ST7789_DrawImage+0x9c>)
 800779c:	f7fb fae0 	bl	8002d60 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80077a0:	88fa      	ldrh	r2, [r7, #6]
 80077a2:	887b      	ldrh	r3, [r7, #2]
 80077a4:	4413      	add	r3, r2
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b29c      	uxth	r4, r3
 80077ac:	88ba      	ldrh	r2, [r7, #4]
 80077ae:	883b      	ldrh	r3, [r7, #0]
 80077b0:	4413      	add	r3, r2
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	3b01      	subs	r3, #1
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	88b9      	ldrh	r1, [r7, #4]
 80077ba:	88f8      	ldrh	r0, [r7, #6]
 80077bc:	4622      	mov	r2, r4
 80077be:	f7ff fc9f 	bl	8007100 <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 80077c2:	887b      	ldrh	r3, [r7, #2]
 80077c4:	883a      	ldrh	r2, [r7, #0]
 80077c6:	fb02 f303 	mul.w	r3, r2, r3
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	4619      	mov	r1, r3
 80077ce:	69b8      	ldr	r0, [r7, #24]
 80077d0:	f7ff fc10 	bl	8006ff4 <ST7789_WriteData>
	ST7789_UnSelect();
 80077d4:	2201      	movs	r2, #1
 80077d6:	2180      	movs	r1, #128	@ 0x80
 80077d8:	4805      	ldr	r0, [pc, #20]	@ (80077f0 <ST7789_DrawImage+0x9c>)
 80077da:	f7fb fac1 	bl	8002d60 <HAL_GPIO_WritePin>
 80077de:	e004      	b.n	80077ea <ST7789_DrawImage+0x96>
		return;
 80077e0:	bf00      	nop
 80077e2:	e002      	b.n	80077ea <ST7789_DrawImage+0x96>
		return;
 80077e4:	bf00      	nop
 80077e6:	e000      	b.n	80077ea <ST7789_DrawImage+0x96>
		return;
 80077e8:	bf00      	nop
}
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd90      	pop	{r4, r7, pc}
 80077f0:	48000800 	.word	0x48000800

080077f4 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80077f4:	b082      	sub	sp, #8
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b088      	sub	sp, #32
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077fe:	4603      	mov	r3, r0
 8007800:	80fb      	strh	r3, [r7, #6]
 8007802:	460b      	mov	r3, r1
 8007804:	80bb      	strh	r3, [r7, #4]
 8007806:	4613      	mov	r3, r2
 8007808:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 800780a:	2200      	movs	r2, #0
 800780c:	2180      	movs	r1, #128	@ 0x80
 800780e:	4837      	ldr	r0, [pc, #220]	@ (80078ec <ST7789_WriteChar+0xf8>)
 8007810:	f7fb faa6 	bl	8002d60 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8007814:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007818:	461a      	mov	r2, r3
 800781a:	88fb      	ldrh	r3, [r7, #6]
 800781c:	4413      	add	r3, r2
 800781e:	b29b      	uxth	r3, r3
 8007820:	3b01      	subs	r3, #1
 8007822:	b29a      	uxth	r2, r3
 8007824:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007828:	4619      	mov	r1, r3
 800782a:	88bb      	ldrh	r3, [r7, #4]
 800782c:	440b      	add	r3, r1
 800782e:	b29b      	uxth	r3, r3
 8007830:	3b01      	subs	r3, #1
 8007832:	b29b      	uxth	r3, r3
 8007834:	88b9      	ldrh	r1, [r7, #4]
 8007836:	88f8      	ldrh	r0, [r7, #6]
 8007838:	f7ff fc62 	bl	8007100 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 800783c:	2300      	movs	r3, #0
 800783e:	61fb      	str	r3, [r7, #28]
 8007840:	e041      	b.n	80078c6 <ST7789_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8007842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007844:	78fb      	ldrb	r3, [r7, #3]
 8007846:	3b20      	subs	r3, #32
 8007848:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800784c:	fb01 f303 	mul.w	r3, r1, r3
 8007850:	4619      	mov	r1, r3
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	440b      	add	r3, r1
 8007856:	005b      	lsls	r3, r3, #1
 8007858:	4413      	add	r3, r2
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 800785e:	2300      	movs	r3, #0
 8007860:	61bb      	str	r3, [r7, #24]
 8007862:	e027      	b.n	80078b4 <ST7789_WriteChar+0xc0>
			if ((b << j) & 0x8000) {
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	fa02 f303 	lsl.w	r3, r2, r3
 800786c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00e      	beq.n	8007892 <ST7789_WriteChar+0x9e>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8007874:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007876:	0a1b      	lsrs	r3, r3, #8
 8007878:	b29b      	uxth	r3, r3
 800787a:	b2db      	uxtb	r3, r3
 800787c:	743b      	strb	r3, [r7, #16]
 800787e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007880:	b2db      	uxtb	r3, r3
 8007882:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8007884:	f107 0310 	add.w	r3, r7, #16
 8007888:	2102      	movs	r1, #2
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff fbb2 	bl	8006ff4 <ST7789_WriteData>
 8007890:	e00d      	b.n	80078ae <ST7789_WriteChar+0xba>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8007892:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007894:	0a1b      	lsrs	r3, r3, #8
 8007896:	b29b      	uxth	r3, r3
 8007898:	b2db      	uxtb	r3, r3
 800789a:	733b      	strb	r3, [r7, #12]
 800789c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 80078a2:	f107 030c 	add.w	r3, r7, #12
 80078a6:	2102      	movs	r1, #2
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7ff fba3 	bl	8006ff4 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	3301      	adds	r3, #1
 80078b2:	61bb      	str	r3, [r7, #24]
 80078b4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80078b8:	461a      	mov	r2, r3
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	4293      	cmp	r3, r2
 80078be:	d3d1      	bcc.n	8007864 <ST7789_WriteChar+0x70>
	for (i = 0; i < font.height; i++) {
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	3301      	adds	r3, #1
 80078c4:	61fb      	str	r3, [r7, #28]
 80078c6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80078ca:	461a      	mov	r2, r3
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d3b7      	bcc.n	8007842 <ST7789_WriteChar+0x4e>
			}
		}
	}
	ST7789_UnSelect();
 80078d2:	2201      	movs	r2, #1
 80078d4:	2180      	movs	r1, #128	@ 0x80
 80078d6:	4805      	ldr	r0, [pc, #20]	@ (80078ec <ST7789_WriteChar+0xf8>)
 80078d8:	f7fb fa42 	bl	8002d60 <HAL_GPIO_WritePin>
}
 80078dc:	bf00      	nop
 80078de:	3720      	adds	r7, #32
 80078e0:	46bd      	mov	sp, r7
 80078e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078e6:	b002      	add	sp, #8
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	48000800 	.word	0x48000800

080078f0 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80078f0:	b082      	sub	sp, #8
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b086      	sub	sp, #24
 80078f6:	af04      	add	r7, sp, #16
 80078f8:	603a      	str	r2, [r7, #0]
 80078fa:	617b      	str	r3, [r7, #20]
 80078fc:	4603      	mov	r3, r0
 80078fe:	80fb      	strh	r3, [r7, #6]
 8007900:	460b      	mov	r3, r1
 8007902:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8007904:	2200      	movs	r2, #0
 8007906:	2180      	movs	r1, #128	@ 0x80
 8007908:	4822      	ldr	r0, [pc, #136]	@ (8007994 <ST7789_WriteString+0xa4>)
 800790a:	f7fb fa29 	bl	8002d60 <HAL_GPIO_WritePin>
	while (*str) {
 800790e:	e02e      	b.n	800796e <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 8007910:	88fb      	ldrh	r3, [r7, #6]
 8007912:	7d3a      	ldrb	r2, [r7, #20]
 8007914:	4413      	add	r3, r2
 8007916:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800791a:	db13      	blt.n	8007944 <ST7789_WriteString+0x54>
			x = 0;
 800791c:	2300      	movs	r3, #0
 800791e:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8007920:	7d7b      	ldrb	r3, [r7, #21]
 8007922:	461a      	mov	r2, r3
 8007924:	88bb      	ldrh	r3, [r7, #4]
 8007926:	4413      	add	r3, r2
 8007928:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 800792a:	88bb      	ldrh	r3, [r7, #4]
 800792c:	7d7a      	ldrb	r2, [r7, #21]
 800792e:	4413      	add	r3, r2
 8007930:	2ba9      	cmp	r3, #169	@ 0xa9
 8007932:	dc21      	bgt.n	8007978 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	2b20      	cmp	r3, #32
 800793a:	d103      	bne.n	8007944 <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	3301      	adds	r3, #1
 8007940:	603b      	str	r3, [r7, #0]
				continue;
 8007942:	e014      	b.n	800796e <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	781a      	ldrb	r2, [r3, #0]
 8007948:	88b9      	ldrh	r1, [r7, #4]
 800794a:	88f8      	ldrh	r0, [r7, #6]
 800794c:	8c3b      	ldrh	r3, [r7, #32]
 800794e:	9302      	str	r3, [sp, #8]
 8007950:	8bbb      	ldrh	r3, [r7, #28]
 8007952:	9301      	str	r3, [sp, #4]
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f7ff ff4b 	bl	80077f4 <ST7789_WriteChar>
		x += font.width;
 800795e:	7d3b      	ldrb	r3, [r7, #20]
 8007960:	461a      	mov	r2, r3
 8007962:	88fb      	ldrh	r3, [r7, #6]
 8007964:	4413      	add	r3, r2
 8007966:	80fb      	strh	r3, [r7, #6]
		str++;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	3301      	adds	r3, #1
 800796c:	603b      	str	r3, [r7, #0]
	while (*str) {
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1cc      	bne.n	8007910 <ST7789_WriteString+0x20>
 8007976:	e000      	b.n	800797a <ST7789_WriteString+0x8a>
				break;
 8007978:	bf00      	nop
	}
	ST7789_UnSelect();
 800797a:	2201      	movs	r2, #1
 800797c:	2180      	movs	r1, #128	@ 0x80
 800797e:	4805      	ldr	r0, [pc, #20]	@ (8007994 <ST7789_WriteString+0xa4>)
 8007980:	f7fb f9ee 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8007984:	bf00      	nop
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800798e:	b002      	add	sp, #8
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	48000800 	.word	0x48000800

08007998 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8007998:	b590      	push	{r4, r7, lr}
 800799a:	b087      	sub	sp, #28
 800799c:	af02      	add	r7, sp, #8
 800799e:	4604      	mov	r4, r0
 80079a0:	4608      	mov	r0, r1
 80079a2:	4611      	mov	r1, r2
 80079a4:	461a      	mov	r2, r3
 80079a6:	4623      	mov	r3, r4
 80079a8:	80fb      	strh	r3, [r7, #6]
 80079aa:	4603      	mov	r3, r0
 80079ac:	80bb      	strh	r3, [r7, #4]
 80079ae:	460b      	mov	r3, r1
 80079b0:	807b      	strh	r3, [r7, #2]
 80079b2:	4613      	mov	r3, r2
 80079b4:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80079b6:	2200      	movs	r2, #0
 80079b8:	2180      	movs	r1, #128	@ 0x80
 80079ba:	4823      	ldr	r0, [pc, #140]	@ (8007a48 <ST7789_DrawFilledRectangle+0xb0>)
 80079bc:	f7fb f9d0 	bl	8002d60 <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80079c6:	d23b      	bcs.n	8007a40 <ST7789_DrawFilledRectangle+0xa8>
 80079c8:	88bb      	ldrh	r3, [r7, #4]
 80079ca:	2ba9      	cmp	r3, #169	@ 0xa9
 80079cc:	d838      	bhi.n	8007a40 <ST7789_DrawFilledRectangle+0xa8>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 80079ce:	88fa      	ldrh	r2, [r7, #6]
 80079d0:	887b      	ldrh	r3, [r7, #2]
 80079d2:	4413      	add	r3, r2
 80079d4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80079d8:	db03      	blt.n	80079e2 <ST7789_DrawFilledRectangle+0x4a>
		w = ST7789_WIDTH - x;
 80079da:	88fb      	ldrh	r3, [r7, #6]
 80079dc:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80079e0:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 80079e2:	88ba      	ldrh	r2, [r7, #4]
 80079e4:	883b      	ldrh	r3, [r7, #0]
 80079e6:	4413      	add	r3, r2
 80079e8:	2ba9      	cmp	r3, #169	@ 0xa9
 80079ea:	dd03      	ble.n	80079f4 <ST7789_DrawFilledRectangle+0x5c>
		h = ST7789_HEIGHT - y;
 80079ec:	88bb      	ldrh	r3, [r7, #4]
 80079ee:	f1c3 03aa 	rsb	r3, r3, #170	@ 0xaa
 80079f2:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80079f4:	2300      	movs	r3, #0
 80079f6:	73fb      	strb	r3, [r7, #15]
 80079f8:	e017      	b.n	8007a2a <ST7789_DrawFilledRectangle+0x92>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	88bb      	ldrh	r3, [r7, #4]
 8007a00:	4413      	add	r3, r2
 8007a02:	b299      	uxth	r1, r3
 8007a04:	88fa      	ldrh	r2, [r7, #6]
 8007a06:	887b      	ldrh	r3, [r7, #2]
 8007a08:	4413      	add	r3, r2
 8007a0a:	b29c      	uxth	r4, r3
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	88bb      	ldrh	r3, [r7, #4]
 8007a12:	4413      	add	r3, r2
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	88f8      	ldrh	r0, [r7, #6]
 8007a18:	8c3b      	ldrh	r3, [r7, #32]
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	4622      	mov	r2, r4
 8007a20:	f7ff fce2 	bl	80073e8 <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
 8007a26:	3301      	adds	r3, #1
 8007a28:	73fb      	strb	r3, [r7, #15]
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	883a      	ldrh	r2, [r7, #0]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d2e2      	bcs.n	80079fa <ST7789_DrawFilledRectangle+0x62>
	}
	ST7789_UnSelect();
 8007a34:	2201      	movs	r2, #1
 8007a36:	2180      	movs	r1, #128	@ 0x80
 8007a38:	4803      	ldr	r0, [pc, #12]	@ (8007a48 <ST7789_DrawFilledRectangle+0xb0>)
 8007a3a:	f7fb f991 	bl	8002d60 <HAL_GPIO_WritePin>
 8007a3e:	e000      	b.n	8007a42 <ST7789_DrawFilledRectangle+0xaa>
		return;
 8007a40:	bf00      	nop
}
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd90      	pop	{r4, r7, pc}
 8007a48:	48000800 	.word	0x48000800

08007a4c <ST7789_DrawTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the lines
 * @return  none
 */
void ST7789_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8007a4c:	b590      	push	{r4, r7, lr}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af02      	add	r7, sp, #8
 8007a52:	4604      	mov	r4, r0
 8007a54:	4608      	mov	r0, r1
 8007a56:	4611      	mov	r1, r2
 8007a58:	461a      	mov	r2, r3
 8007a5a:	4623      	mov	r3, r4
 8007a5c:	80fb      	strh	r3, [r7, #6]
 8007a5e:	4603      	mov	r3, r0
 8007a60:	80bb      	strh	r3, [r7, #4]
 8007a62:	460b      	mov	r3, r1
 8007a64:	807b      	strh	r3, [r7, #2]
 8007a66:	4613      	mov	r3, r2
 8007a68:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	2180      	movs	r1, #128	@ 0x80
 8007a6e:	4813      	ldr	r0, [pc, #76]	@ (8007abc <ST7789_DrawTriangle+0x70>)
 8007a70:	f7fb f976 	bl	8002d60 <HAL_GPIO_WritePin>
	/* Draw lines */
	ST7789_DrawLine(x1, y1, x2, y2, color);
 8007a74:	883c      	ldrh	r4, [r7, #0]
 8007a76:	887a      	ldrh	r2, [r7, #2]
 8007a78:	88b9      	ldrh	r1, [r7, #4]
 8007a7a:	88f8      	ldrh	r0, [r7, #6]
 8007a7c:	8c3b      	ldrh	r3, [r7, #32]
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	4623      	mov	r3, r4
 8007a82:	f7ff fcb1 	bl	80073e8 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y2, x3, y3, color);
 8007a86:	8bbc      	ldrh	r4, [r7, #28]
 8007a88:	8b3a      	ldrh	r2, [r7, #24]
 8007a8a:	8839      	ldrh	r1, [r7, #0]
 8007a8c:	8878      	ldrh	r0, [r7, #2]
 8007a8e:	8c3b      	ldrh	r3, [r7, #32]
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	4623      	mov	r3, r4
 8007a94:	f7ff fca8 	bl	80073e8 <ST7789_DrawLine>
	ST7789_DrawLine(x3, y3, x1, y1, color);
 8007a98:	88bc      	ldrh	r4, [r7, #4]
 8007a9a:	88fa      	ldrh	r2, [r7, #6]
 8007a9c:	8bb9      	ldrh	r1, [r7, #28]
 8007a9e:	8b38      	ldrh	r0, [r7, #24]
 8007aa0:	8c3b      	ldrh	r3, [r7, #32]
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	4623      	mov	r3, r4
 8007aa6:	f7ff fc9f 	bl	80073e8 <ST7789_DrawLine>
	ST7789_UnSelect();
 8007aaa:	2201      	movs	r2, #1
 8007aac:	2180      	movs	r1, #128	@ 0x80
 8007aae:	4803      	ldr	r0, [pc, #12]	@ (8007abc <ST7789_DrawTriangle+0x70>)
 8007ab0:	f7fb f956 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd90      	pop	{r4, r7, pc}
 8007abc:	48000800 	.word	0x48000800

08007ac0 <ST7789_DrawFilledTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the triangle
 * @return  none
 */
void ST7789_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8007ac0:	b590      	push	{r4, r7, lr}
 8007ac2:	b08d      	sub	sp, #52	@ 0x34
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	4608      	mov	r0, r1
 8007aca:	4611      	mov	r1, r2
 8007acc:	461a      	mov	r2, r3
 8007ace:	4623      	mov	r3, r4
 8007ad0:	80fb      	strh	r3, [r7, #6]
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	80bb      	strh	r3, [r7, #4]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	807b      	strh	r3, [r7, #2]
 8007ada:	4613      	mov	r3, r2
 8007adc:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2180      	movs	r1, #128	@ 0x80
 8007ae2:	485d      	ldr	r0, [pc, #372]	@ (8007c58 <ST7789_DrawFilledTriangle+0x198>)
 8007ae4:	f7fb f93c 	bl	8002d60 <HAL_GPIO_WritePin>
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8007ae8:	2300      	movs	r3, #0
 8007aea:	823b      	strh	r3, [r7, #16]
 8007aec:	2300      	movs	r3, #0
 8007aee:	81fb      	strh	r3, [r7, #14]
 8007af0:	2300      	movs	r3, #0
 8007af2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007af4:	2300      	movs	r3, #0
 8007af6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007af8:	2300      	movs	r3, #0
 8007afa:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007afc:	2300      	movs	r3, #0
 8007afe:	843b      	strh	r3, [r7, #32]
			yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8007b00:	2300      	movs	r3, #0
 8007b02:	83fb      	strh	r3, [r7, #30]
 8007b04:	2300      	movs	r3, #0
 8007b06:	83bb      	strh	r3, [r7, #28]
 8007b08:	2300      	movs	r3, #0
 8007b0a:	837b      	strh	r3, [r7, #26]
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	833b      	strh	r3, [r7, #24]
 8007b10:	2300      	movs	r3, #0
 8007b12:	82fb      	strh	r3, [r7, #22]
 8007b14:	2300      	movs	r3, #0
 8007b16:	82bb      	strh	r3, [r7, #20]
			curpixel = 0;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 8007b1c:	887a      	ldrh	r2, [r7, #2]
 8007b1e:	88fb      	ldrh	r3, [r7, #6]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	bfb8      	it	lt
 8007b26:	425b      	neglt	r3, r3
 8007b28:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8007b2a:	883a      	ldrh	r2, [r7, #0]
 8007b2c:	88bb      	ldrh	r3, [r7, #4]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	bfb8      	it	lt
 8007b34:	425b      	neglt	r3, r3
 8007b36:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8007b38:	88fb      	ldrh	r3, [r7, #6]
 8007b3a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	y = y1;
 8007b3c:	88bb      	ldrh	r3, [r7, #4]
 8007b3e:	84bb      	strh	r3, [r7, #36]	@ 0x24

	if (x2 >= x1) {
 8007b40:	887a      	ldrh	r2, [r7, #2]
 8007b42:	88fb      	ldrh	r3, [r7, #6]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d304      	bcc.n	8007b52 <ST7789_DrawFilledTriangle+0x92>
		xinc1 = 1;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	847b      	strh	r3, [r7, #34]	@ 0x22
		xinc2 = 1;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	843b      	strh	r3, [r7, #32]
 8007b50:	e005      	b.n	8007b5e <ST7789_DrawFilledTriangle+0x9e>
	}
	else {
		xinc1 = -1;
 8007b52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b56:	847b      	strh	r3, [r7, #34]	@ 0x22
		xinc2 = -1;
 8007b58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b5c:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8007b5e:	883a      	ldrh	r2, [r7, #0]
 8007b60:	88bb      	ldrh	r3, [r7, #4]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d304      	bcc.n	8007b70 <ST7789_DrawFilledTriangle+0xb0>
		yinc1 = 1;
 8007b66:	2301      	movs	r3, #1
 8007b68:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	83bb      	strh	r3, [r7, #28]
 8007b6e:	e005      	b.n	8007b7c <ST7789_DrawFilledTriangle+0xbc>
	}
	else {
		yinc1 = -1;
 8007b70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b74:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8007b76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b7a:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) {
 8007b7c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007b80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	db10      	blt.n	8007baa <ST7789_DrawFilledTriangle+0xea>
		xinc1 = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	847b      	strh	r3, [r7, #34]	@ 0x22
		yinc2 = 0;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8007b90:	8a3b      	ldrh	r3, [r7, #16]
 8007b92:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8007b94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007b98:	0fda      	lsrs	r2, r3, #31
 8007b9a:	4413      	add	r3, r2
 8007b9c:	105b      	asrs	r3, r3, #1
 8007b9e:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8007ba0:	89fb      	ldrh	r3, [r7, #14]
 8007ba2:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8007ba4:	8a3b      	ldrh	r3, [r7, #16]
 8007ba6:	82bb      	strh	r3, [r7, #20]
 8007ba8:	e00f      	b.n	8007bca <ST7789_DrawFilledTriangle+0x10a>
	}
	else {
		xinc2 = 0;
 8007baa:	2300      	movs	r3, #0
 8007bac:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8007bb2:	89fb      	ldrh	r3, [r7, #14]
 8007bb4:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8007bb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007bba:	0fda      	lsrs	r2, r3, #31
 8007bbc:	4413      	add	r3, r2
 8007bbe:	105b      	asrs	r3, r3, #1
 8007bc0:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8007bc2:	8a3b      	ldrh	r3, [r7, #16]
 8007bc4:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8007bc6:	89fb      	ldrh	r3, [r7, #14]
 8007bc8:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8007bca:	2300      	movs	r3, #0
 8007bcc:	827b      	strh	r3, [r7, #18]
 8007bce:	e033      	b.n	8007c38 <ST7789_DrawFilledTriangle+0x178>
		ST7789_DrawLine(x, y, x3, y3, color);
 8007bd0:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8007bd2:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8007bd4:	8fbc      	ldrh	r4, [r7, #60]	@ 0x3c
 8007bd6:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8007bd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	4623      	mov	r3, r4
 8007be0:	f7ff fc02 	bl	80073e8 <ST7789_DrawLine>

		num += numadd;
 8007be4:	8b3a      	ldrh	r2, [r7, #24]
 8007be6:	8afb      	ldrh	r3, [r7, #22]
 8007be8:	4413      	add	r3, r2
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8007bee:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007bf2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	db0e      	blt.n	8007c18 <ST7789_DrawFilledTriangle+0x158>
			num -= den;
 8007bfa:	8b3a      	ldrh	r2, [r7, #24]
 8007bfc:	8b7b      	ldrh	r3, [r7, #26]
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8007c04:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007c06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007c08:	4413      	add	r3, r2
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	84fb      	strh	r3, [r7, #38]	@ 0x26
			y += yinc1;
 8007c0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007c10:	8bfb      	ldrh	r3, [r7, #30]
 8007c12:	4413      	add	r3, r2
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	84bb      	strh	r3, [r7, #36]	@ 0x24
		}
		x += xinc2;
 8007c18:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007c1a:	8c3b      	ldrh	r3, [r7, #32]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	84fb      	strh	r3, [r7, #38]	@ 0x26
		y += yinc2;
 8007c22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007c24:	8bbb      	ldrh	r3, [r7, #28]
 8007c26:	4413      	add	r3, r2
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8007c2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	3301      	adds	r3, #1
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	827b      	strh	r3, [r7, #18]
 8007c38:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007c3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	ddc5      	ble.n	8007bd0 <ST7789_DrawFilledTriangle+0x110>
	}
	ST7789_UnSelect();
 8007c44:	2201      	movs	r2, #1
 8007c46:	2180      	movs	r1, #128	@ 0x80
 8007c48:	4803      	ldr	r0, [pc, #12]	@ (8007c58 <ST7789_DrawFilledTriangle+0x198>)
 8007c4a:	f7fb f889 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8007c4e:	bf00      	nop
 8007c50:	372c      	adds	r7, #44	@ 0x2c
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd90      	pop	{r4, r7, pc}
 8007c56:	bf00      	nop
 8007c58:	48000800 	.word	0x48000800

08007c5c <ST7789_DrawFilledCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle
 * @return  none
 */
void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8007c5c:	b590      	push	{r4, r7, lr}
 8007c5e:	b089      	sub	sp, #36	@ 0x24
 8007c60:	af02      	add	r7, sp, #8
 8007c62:	4604      	mov	r4, r0
 8007c64:	4608      	mov	r0, r1
 8007c66:	4611      	mov	r1, r2
 8007c68:	461a      	mov	r2, r3
 8007c6a:	4623      	mov	r3, r4
 8007c6c:	80fb      	strh	r3, [r7, #6]
 8007c6e:	4603      	mov	r3, r0
 8007c70:	80bb      	strh	r3, [r7, #4]
 8007c72:	460b      	mov	r3, r1
 8007c74:	807b      	strh	r3, [r7, #2]
 8007c76:	4613      	mov	r3, r2
 8007c78:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2180      	movs	r1, #128	@ 0x80
 8007c7e:	4869      	ldr	r0, [pc, #420]	@ (8007e24 <ST7789_DrawFilledCircle+0x1c8>)
 8007c80:	f7fb f86e 	bl	8002d60 <HAL_GPIO_WritePin>
	int16_t f = 1 - r;
 8007c84:	887b      	ldrh	r3, [r7, #2]
 8007c86:	f1c3 0301 	rsb	r3, r3, #1
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8007c92:	887b      	ldrh	r3, [r7, #2]
 8007c94:	461a      	mov	r2, r3
 8007c96:	03d2      	lsls	r2, r2, #15
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8007ca4:	887b      	ldrh	r3, [r7, #2]
 8007ca6:	81fb      	strh	r3, [r7, #14]

	ST7789_DrawPixel(x0, y0 + r, color);
 8007ca8:	88f8      	ldrh	r0, [r7, #6]
 8007caa:	88ba      	ldrh	r2, [r7, #4]
 8007cac:	887b      	ldrh	r3, [r7, #2]
 8007cae:	4413      	add	r3, r2
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	883a      	ldrh	r2, [r7, #0]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	f7ff fb61 	bl	800737c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 8007cba:	88f8      	ldrh	r0, [r7, #6]
 8007cbc:	88ba      	ldrh	r2, [r7, #4]
 8007cbe:	887b      	ldrh	r3, [r7, #2]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	883a      	ldrh	r2, [r7, #0]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	f7ff fb58 	bl	800737c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8007ccc:	88fa      	ldrh	r2, [r7, #6]
 8007cce:	887b      	ldrh	r3, [r7, #2]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	88b9      	ldrh	r1, [r7, #4]
 8007cd6:	883a      	ldrh	r2, [r7, #0]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7ff fb4f 	bl	800737c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8007cde:	88fa      	ldrh	r2, [r7, #6]
 8007ce0:	887b      	ldrh	r3, [r7, #2]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	88b9      	ldrh	r1, [r7, #4]
 8007ce8:	883a      	ldrh	r2, [r7, #0]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7ff fb46 	bl	800737c <ST7789_DrawPixel>
	ST7789_DrawLine(x0 - r, y0, x0 + r, y0, color);
 8007cf0:	88fa      	ldrh	r2, [r7, #6]
 8007cf2:	887b      	ldrh	r3, [r7, #2]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	b298      	uxth	r0, r3
 8007cf8:	88b9      	ldrh	r1, [r7, #4]
 8007cfa:	88fa      	ldrh	r2, [r7, #6]
 8007cfc:	887b      	ldrh	r3, [r7, #2]
 8007cfe:	4413      	add	r3, r2
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	88bc      	ldrh	r4, [r7, #4]
 8007d04:	883b      	ldrh	r3, [r7, #0]
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	4623      	mov	r3, r4
 8007d0a:	f7ff fb6d 	bl	80073e8 <ST7789_DrawLine>

	while (x < y) {
 8007d0e:	e079      	b.n	8007e04 <ST7789_DrawFilledCircle+0x1a8>
		if (f >= 0) {
 8007d10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	db0e      	blt.n	8007d36 <ST7789_DrawFilledCircle+0xda>
			y--;
 8007d18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8007d24:	8a7b      	ldrh	r3, [r7, #18]
 8007d26:	3302      	adds	r3, #2
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8007d2c:	8afa      	ldrh	r2, [r7, #22]
 8007d2e:	8a7b      	ldrh	r3, [r7, #18]
 8007d30:	4413      	add	r3, r2
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8007d36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8007d42:	8abb      	ldrh	r3, [r7, #20]
 8007d44:	3302      	adds	r3, #2
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8007d4a:	8afa      	ldrh	r2, [r7, #22]
 8007d4c:	8abb      	ldrh	r3, [r7, #20]
 8007d4e:	4413      	add	r3, r2
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 8007d54:	88fa      	ldrh	r2, [r7, #6]
 8007d56:	8a3b      	ldrh	r3, [r7, #16]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	b298      	uxth	r0, r3
 8007d5c:	88ba      	ldrh	r2, [r7, #4]
 8007d5e:	89fb      	ldrh	r3, [r7, #14]
 8007d60:	4413      	add	r3, r2
 8007d62:	b299      	uxth	r1, r3
 8007d64:	88fa      	ldrh	r2, [r7, #6]
 8007d66:	8a3b      	ldrh	r3, [r7, #16]
 8007d68:	4413      	add	r3, r2
 8007d6a:	b29c      	uxth	r4, r3
 8007d6c:	88ba      	ldrh	r2, [r7, #4]
 8007d6e:	89fb      	ldrh	r3, [r7, #14]
 8007d70:	4413      	add	r3, r2
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	883b      	ldrh	r3, [r7, #0]
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	4622      	mov	r2, r4
 8007d7c:	f7ff fb34 	bl	80073e8 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 8007d80:	88fa      	ldrh	r2, [r7, #6]
 8007d82:	8a3b      	ldrh	r3, [r7, #16]
 8007d84:	4413      	add	r3, r2
 8007d86:	b298      	uxth	r0, r3
 8007d88:	88ba      	ldrh	r2, [r7, #4]
 8007d8a:	89fb      	ldrh	r3, [r7, #14]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	b299      	uxth	r1, r3
 8007d90:	88fa      	ldrh	r2, [r7, #6]
 8007d92:	8a3b      	ldrh	r3, [r7, #16]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	b29c      	uxth	r4, r3
 8007d98:	88ba      	ldrh	r2, [r7, #4]
 8007d9a:	89fb      	ldrh	r3, [r7, #14]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	883b      	ldrh	r3, [r7, #0]
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	4613      	mov	r3, r2
 8007da6:	4622      	mov	r2, r4
 8007da8:	f7ff fb1e 	bl	80073e8 <ST7789_DrawLine>

		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 8007dac:	88fa      	ldrh	r2, [r7, #6]
 8007dae:	89fb      	ldrh	r3, [r7, #14]
 8007db0:	4413      	add	r3, r2
 8007db2:	b298      	uxth	r0, r3
 8007db4:	88ba      	ldrh	r2, [r7, #4]
 8007db6:	8a3b      	ldrh	r3, [r7, #16]
 8007db8:	4413      	add	r3, r2
 8007dba:	b299      	uxth	r1, r3
 8007dbc:	88fa      	ldrh	r2, [r7, #6]
 8007dbe:	89fb      	ldrh	r3, [r7, #14]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	b29c      	uxth	r4, r3
 8007dc4:	88ba      	ldrh	r2, [r7, #4]
 8007dc6:	8a3b      	ldrh	r3, [r7, #16]
 8007dc8:	4413      	add	r3, r2
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	883b      	ldrh	r3, [r7, #0]
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	4622      	mov	r2, r4
 8007dd4:	f7ff fb08 	bl	80073e8 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 8007dd8:	88fa      	ldrh	r2, [r7, #6]
 8007dda:	89fb      	ldrh	r3, [r7, #14]
 8007ddc:	4413      	add	r3, r2
 8007dde:	b298      	uxth	r0, r3
 8007de0:	88ba      	ldrh	r2, [r7, #4]
 8007de2:	8a3b      	ldrh	r3, [r7, #16]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	b299      	uxth	r1, r3
 8007de8:	88fa      	ldrh	r2, [r7, #6]
 8007dea:	89fb      	ldrh	r3, [r7, #14]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	b29c      	uxth	r4, r3
 8007df0:	88ba      	ldrh	r2, [r7, #4]
 8007df2:	8a3b      	ldrh	r3, [r7, #16]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	883b      	ldrh	r3, [r7, #0]
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	4622      	mov	r2, r4
 8007e00:	f7ff faf2 	bl	80073e8 <ST7789_DrawLine>
	while (x < y) {
 8007e04:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007e08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	f6ff af7f 	blt.w	8007d10 <ST7789_DrawFilledCircle+0xb4>
	}
	ST7789_UnSelect();
 8007e12:	2201      	movs	r2, #1
 8007e14:	2180      	movs	r1, #128	@ 0x80
 8007e16:	4803      	ldr	r0, [pc, #12]	@ (8007e24 <ST7789_DrawFilledCircle+0x1c8>)
 8007e18:	f7fa ffa2 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8007e1c:	bf00      	nop
 8007e1e:	371c      	adds	r7, #28
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd90      	pop	{r4, r7, pc}
 8007e24:	48000800 	.word	0x48000800

08007e28 <ST7789_Test>:
 * @brief A Simple test function for ST7789
 * @param  none
 * @return  none
 */
void ST7789_Test(void)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af04      	add	r7, sp, #16
	ST7789_Fill_Color(WHITE);
 8007e2e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007e32:	f7ff fa65 	bl	8007300 <ST7789_Fill_Color>
	HAL_Delay(1000);
 8007e36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007e3a:	f7fa fa2f 	bl	800229c <HAL_Delay>
	ST7789_WriteString(10, 20, "Speed Test", Font_11x18, RED, WHITE);
 8007e3e:	4bc1      	ldr	r3, [pc, #772]	@ (8008144 <ST7789_Test+0x31c>)
 8007e40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e44:	9202      	str	r2, [sp, #8]
 8007e46:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8007e4a:	9201      	str	r2, [sp, #4]
 8007e4c:	685a      	ldr	r2, [r3, #4]
 8007e4e:	9200      	str	r2, [sp, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4abd      	ldr	r2, [pc, #756]	@ (8008148 <ST7789_Test+0x320>)
 8007e54:	2114      	movs	r1, #20
 8007e56:	200a      	movs	r0, #10
 8007e58:	f7ff fd4a 	bl	80078f0 <ST7789_WriteString>
	HAL_Delay(1000);
 8007e5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007e60:	f7fa fa1c 	bl	800229c <HAL_Delay>
	ST7789_Fill_Color(CYAN);
 8007e64:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 8007e68:	f7ff fa4a 	bl	8007300 <ST7789_Fill_Color>
    HAL_Delay(500);
 8007e6c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007e70:	f7fa fa14 	bl	800229c <HAL_Delay>
	ST7789_Fill_Color(RED);
 8007e74:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8007e78:	f7ff fa42 	bl	8007300 <ST7789_Fill_Color>
    HAL_Delay(500);
 8007e7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007e80:	f7fa fa0c 	bl	800229c <HAL_Delay>
	ST7789_Fill_Color(BLUE);
 8007e84:	201f      	movs	r0, #31
 8007e86:	f7ff fa3b 	bl	8007300 <ST7789_Fill_Color>
    HAL_Delay(500);
 8007e8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007e8e:	f7fa fa05 	bl	800229c <HAL_Delay>
	ST7789_Fill_Color(GREEN);
 8007e92:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8007e96:	f7ff fa33 	bl	8007300 <ST7789_Fill_Color>
    HAL_Delay(500);
 8007e9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007e9e:	f7fa f9fd 	bl	800229c <HAL_Delay>
	ST7789_Fill_Color(YELLOW);
 8007ea2:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8007ea6:	f7ff fa2b 	bl	8007300 <ST7789_Fill_Color>
    HAL_Delay(500);
 8007eaa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007eae:	f7fa f9f5 	bl	800229c <HAL_Delay>
	ST7789_Fill_Color(BROWN);
 8007eb2:	f64b 4040 	movw	r0, #48192	@ 0xbc40
 8007eb6:	f7ff fa23 	bl	8007300 <ST7789_Fill_Color>
    HAL_Delay(500);
 8007eba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007ebe:	f7fa f9ed 	bl	800229c <HAL_Delay>
	ST7789_Fill_Color(DARKBLUE);
 8007ec2:	f240 10cf 	movw	r0, #463	@ 0x1cf
 8007ec6:	f7ff fa1b 	bl	8007300 <ST7789_Fill_Color>
    HAL_Delay(500);
 8007eca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007ece:	f7fa f9e5 	bl	800229c <HAL_Delay>
	ST7789_Fill_Color(MAGENTA);
 8007ed2:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8007ed6:	f7ff fa13 	bl	8007300 <ST7789_Fill_Color>
    HAL_Delay(500);
 8007eda:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007ede:	f7fa f9dd 	bl	800229c <HAL_Delay>
	ST7789_Fill_Color(LIGHTGREEN);
 8007ee2:	f248 401f 	movw	r0, #33823	@ 0x841f
 8007ee6:	f7ff fa0b 	bl	8007300 <ST7789_Fill_Color>
    HAL_Delay(500);
 8007eea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007eee:	f7fa f9d5 	bl	800229c <HAL_Delay>
	ST7789_Fill_Color(LGRAY);
 8007ef2:	f24c 6018 	movw	r0, #50712	@ 0xc618
 8007ef6:	f7ff fa03 	bl	8007300 <ST7789_Fill_Color>
    HAL_Delay(500);
 8007efa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007efe:	f7fa f9cd 	bl	800229c <HAL_Delay>
	ST7789_Fill_Color(LBBLUE);
 8007f02:	f642 3012 	movw	r0, #11026	@ 0x2b12
 8007f06:	f7ff f9fb 	bl	8007300 <ST7789_Fill_Color>
    HAL_Delay(500);
 8007f0a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007f0e:	f7fa f9c5 	bl	800229c <HAL_Delay>
	ST7789_Fill_Color(WHITE);
 8007f12:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007f16:	f7ff f9f3 	bl	8007300 <ST7789_Fill_Color>
	HAL_Delay(500);
 8007f1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007f1e:	f7fa f9bd 	bl	800229c <HAL_Delay>

	ST7789_WriteString(10, 10, "Font test.", Font_16x26, GBLUE, WHITE);
 8007f22:	4b8a      	ldr	r3, [pc, #552]	@ (800814c <ST7789_Test+0x324>)
 8007f24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f28:	9202      	str	r2, [sp, #8]
 8007f2a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007f2e:	9201      	str	r2, [sp, #4]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	9200      	str	r2, [sp, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a86      	ldr	r2, [pc, #536]	@ (8008150 <ST7789_Test+0x328>)
 8007f38:	210a      	movs	r1, #10
 8007f3a:	200a      	movs	r0, #10
 8007f3c:	f7ff fcd8 	bl	80078f0 <ST7789_WriteString>
	ST7789_WriteString(10, 50, "Hello Steve!", Font_7x10, RED, WHITE);
 8007f40:	4b84      	ldr	r3, [pc, #528]	@ (8008154 <ST7789_Test+0x32c>)
 8007f42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f46:	9202      	str	r2, [sp, #8]
 8007f48:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8007f4c:	9201      	str	r2, [sp, #4]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	9200      	str	r2, [sp, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a80      	ldr	r2, [pc, #512]	@ (8008158 <ST7789_Test+0x330>)
 8007f56:	2132      	movs	r1, #50	@ 0x32
 8007f58:	200a      	movs	r0, #10
 8007f5a:	f7ff fcc9 	bl	80078f0 <ST7789_WriteString>
	ST7789_WriteString(10, 75, "Hello Steve!", Font_11x18, YELLOW, WHITE);
 8007f5e:	4b79      	ldr	r3, [pc, #484]	@ (8008144 <ST7789_Test+0x31c>)
 8007f60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f64:	9202      	str	r2, [sp, #8]
 8007f66:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8007f6a:	9201      	str	r2, [sp, #4]
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	9200      	str	r2, [sp, #0]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a79      	ldr	r2, [pc, #484]	@ (8008158 <ST7789_Test+0x330>)
 8007f74:	214b      	movs	r1, #75	@ 0x4b
 8007f76:	200a      	movs	r0, #10
 8007f78:	f7ff fcba 	bl	80078f0 <ST7789_WriteString>
	ST7789_WriteString(10, 100, "Hello Steve!", Font_16x26, MAGENTA, WHITE);
 8007f7c:	4b73      	ldr	r3, [pc, #460]	@ (800814c <ST7789_Test+0x324>)
 8007f7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f82:	9202      	str	r2, [sp, #8]
 8007f84:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8007f88:	9201      	str	r2, [sp, #4]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	9200      	str	r2, [sp, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a71      	ldr	r2, [pc, #452]	@ (8008158 <ST7789_Test+0x330>)
 8007f92:	2164      	movs	r1, #100	@ 0x64
 8007f94:	200a      	movs	r0, #10
 8007f96:	f7ff fcab 	bl	80078f0 <ST7789_WriteString>
	HAL_Delay(1000);
 8007f9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007f9e:	f7fa f97d 	bl	800229c <HAL_Delay>

	ST7789_Fill_Color(RED);
 8007fa2:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8007fa6:	f7ff f9ab 	bl	8007300 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Rect./Line.", Font_11x18, YELLOW, BLACK);
 8007faa:	4b66      	ldr	r3, [pc, #408]	@ (8008144 <ST7789_Test+0x31c>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	9202      	str	r2, [sp, #8]
 8007fb0:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8007fb4:	9201      	str	r2, [sp, #4]
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	9200      	str	r2, [sp, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a67      	ldr	r2, [pc, #412]	@ (800815c <ST7789_Test+0x334>)
 8007fbe:	210a      	movs	r1, #10
 8007fc0:	200a      	movs	r0, #10
 8007fc2:	f7ff fc95 	bl	80078f0 <ST7789_WriteString>
	ST7789_DrawRectangle(30, 30, 100, 100, WHITE);
 8007fc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fca:	9300      	str	r3, [sp, #0]
 8007fcc:	2364      	movs	r3, #100	@ 0x64
 8007fce:	2264      	movs	r2, #100	@ 0x64
 8007fd0:	211e      	movs	r1, #30
 8007fd2:	201e      	movs	r0, #30
 8007fd4:	f7ff fa94 	bl	8007500 <ST7789_DrawRectangle>
	HAL_Delay(1000);
 8007fd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007fdc:	f7fa f95e 	bl	800229c <HAL_Delay>

	ST7789_Fill_Color(RED);
 8007fe0:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8007fe4:	f7ff f98c 	bl	8007300 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Rect.", Font_11x18, YELLOW, BLACK);
 8007fe8:	4b56      	ldr	r3, [pc, #344]	@ (8008144 <ST7789_Test+0x31c>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	9202      	str	r2, [sp, #8]
 8007fee:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8007ff2:	9201      	str	r2, [sp, #4]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	9200      	str	r2, [sp, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a59      	ldr	r2, [pc, #356]	@ (8008160 <ST7789_Test+0x338>)
 8007ffc:	210a      	movs	r1, #10
 8007ffe:	200a      	movs	r0, #10
 8008000:	f7ff fc76 	bl	80078f0 <ST7789_WriteString>
	ST7789_DrawFilledRectangle(30, 30, 50, 50, WHITE);
 8008004:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	2332      	movs	r3, #50	@ 0x32
 800800c:	2232      	movs	r2, #50	@ 0x32
 800800e:	211e      	movs	r1, #30
 8008010:	201e      	movs	r0, #30
 8008012:	f7ff fcc1 	bl	8007998 <ST7789_DrawFilledRectangle>
	HAL_Delay(1000);
 8008016:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800801a:	f7fa f93f 	bl	800229c <HAL_Delay>

	ST7789_Fill_Color(RED);
 800801e:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8008022:	f7ff f96d 	bl	8007300 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Circle.", Font_11x18, YELLOW, BLACK);
 8008026:	4b47      	ldr	r3, [pc, #284]	@ (8008144 <ST7789_Test+0x31c>)
 8008028:	2200      	movs	r2, #0
 800802a:	9202      	str	r2, [sp, #8]
 800802c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8008030:	9201      	str	r2, [sp, #4]
 8008032:	685a      	ldr	r2, [r3, #4]
 8008034:	9200      	str	r2, [sp, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a4a      	ldr	r2, [pc, #296]	@ (8008164 <ST7789_Test+0x33c>)
 800803a:	210a      	movs	r1, #10
 800803c:	200a      	movs	r0, #10
 800803e:	f7ff fc57 	bl	80078f0 <ST7789_WriteString>
	ST7789_DrawCircle(60, 60, 25, WHITE);
 8008042:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008046:	2219      	movs	r2, #25
 8008048:	213c      	movs	r1, #60	@ 0x3c
 800804a:	203c      	movs	r0, #60	@ 0x3c
 800804c:	f7ff fa9c 	bl	8007588 <ST7789_DrawCircle>
	HAL_Delay(1000);
 8008050:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008054:	f7fa f922 	bl	800229c <HAL_Delay>

	ST7789_Fill_Color(RED);
 8008058:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800805c:	f7ff f950 	bl	8007300 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Cir.", Font_11x18, YELLOW, BLACK);
 8008060:	4b38      	ldr	r3, [pc, #224]	@ (8008144 <ST7789_Test+0x31c>)
 8008062:	2200      	movs	r2, #0
 8008064:	9202      	str	r2, [sp, #8]
 8008066:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800806a:	9201      	str	r2, [sp, #4]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	9200      	str	r2, [sp, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a3d      	ldr	r2, [pc, #244]	@ (8008168 <ST7789_Test+0x340>)
 8008074:	210a      	movs	r1, #10
 8008076:	200a      	movs	r0, #10
 8008078:	f7ff fc3a 	bl	80078f0 <ST7789_WriteString>
	ST7789_DrawFilledCircle(60, 60, 25, WHITE);
 800807c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008080:	2219      	movs	r2, #25
 8008082:	213c      	movs	r1, #60	@ 0x3c
 8008084:	203c      	movs	r0, #60	@ 0x3c
 8008086:	f7ff fde9 	bl	8007c5c <ST7789_DrawFilledCircle>
	HAL_Delay(1000);
 800808a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800808e:	f7fa f905 	bl	800229c <HAL_Delay>

	ST7789_Fill_Color(RED);
 8008092:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8008096:	f7ff f933 	bl	8007300 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Triangle", Font_11x18, YELLOW, BLACK);
 800809a:	4b2a      	ldr	r3, [pc, #168]	@ (8008144 <ST7789_Test+0x31c>)
 800809c:	2200      	movs	r2, #0
 800809e:	9202      	str	r2, [sp, #8]
 80080a0:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80080a4:	9201      	str	r2, [sp, #4]
 80080a6:	685a      	ldr	r2, [r3, #4]
 80080a8:	9200      	str	r2, [sp, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a2f      	ldr	r2, [pc, #188]	@ (800816c <ST7789_Test+0x344>)
 80080ae:	210a      	movs	r1, #10
 80080b0:	200a      	movs	r0, #10
 80080b2:	f7ff fc1d 	bl	80078f0 <ST7789_WriteString>
	ST7789_DrawTriangle(30, 30, 30, 70, 60, 40, WHITE);
 80080b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80080ba:	9302      	str	r3, [sp, #8]
 80080bc:	2328      	movs	r3, #40	@ 0x28
 80080be:	9301      	str	r3, [sp, #4]
 80080c0:	233c      	movs	r3, #60	@ 0x3c
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	2346      	movs	r3, #70	@ 0x46
 80080c6:	221e      	movs	r2, #30
 80080c8:	211e      	movs	r1, #30
 80080ca:	201e      	movs	r0, #30
 80080cc:	f7ff fcbe 	bl	8007a4c <ST7789_DrawTriangle>
	HAL_Delay(1000);
 80080d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80080d4:	f7fa f8e2 	bl	800229c <HAL_Delay>

	ST7789_Fill_Color(RED);
 80080d8:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80080dc:	f7ff f910 	bl	8007300 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Tri", Font_11x18, YELLOW, BLACK);
 80080e0:	4b18      	ldr	r3, [pc, #96]	@ (8008144 <ST7789_Test+0x31c>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	9202      	str	r2, [sp, #8]
 80080e6:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80080ea:	9201      	str	r2, [sp, #4]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	9200      	str	r2, [sp, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a1f      	ldr	r2, [pc, #124]	@ (8008170 <ST7789_Test+0x348>)
 80080f4:	210a      	movs	r1, #10
 80080f6:	200a      	movs	r0, #10
 80080f8:	f7ff fbfa 	bl	80078f0 <ST7789_WriteString>
	ST7789_DrawFilledTriangle(30, 30, 30, 70, 60, 40, WHITE);
 80080fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008100:	9302      	str	r3, [sp, #8]
 8008102:	2328      	movs	r3, #40	@ 0x28
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	233c      	movs	r3, #60	@ 0x3c
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	2346      	movs	r3, #70	@ 0x46
 800810c:	221e      	movs	r2, #30
 800810e:	211e      	movs	r1, #30
 8008110:	201e      	movs	r0, #30
 8008112:	f7ff fcd5 	bl	8007ac0 <ST7789_DrawFilledTriangle>
	HAL_Delay(1000);
 8008116:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800811a:	f7fa f8bf 	bl	800229c <HAL_Delay>

	//	If FLASH cannot storage anymore datas, please delete codes below.
	ST7789_Fill_Color(WHITE);
 800811e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8008122:	f7ff f8ed 	bl	8007300 <ST7789_Fill_Color>
	ST7789_DrawImage(0, 0, 128, 128, (uint16_t *)saber);
 8008126:	4b13      	ldr	r3, [pc, #76]	@ (8008174 <ST7789_Test+0x34c>)
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	2380      	movs	r3, #128	@ 0x80
 800812c:	2280      	movs	r2, #128	@ 0x80
 800812e:	2100      	movs	r1, #0
 8008130:	2000      	movs	r0, #0
 8008132:	f7ff fb0f 	bl	8007754 <ST7789_DrawImage>
	HAL_Delay(3000);
 8008136:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800813a:	f7fa f8af 	bl	800229c <HAL_Delay>
}
 800813e:	bf00      	nop
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	20000098 	.word	0x20000098
 8008148:	0800c9ec 	.word	0x0800c9ec
 800814c:	200000a0 	.word	0x200000a0
 8008150:	0800c9f8 	.word	0x0800c9f8
 8008154:	20000090 	.word	0x20000090
 8008158:	0800ca04 	.word	0x0800ca04
 800815c:	0800ca14 	.word	0x0800ca14
 8008160:	0800ca20 	.word	0x0800ca20
 8008164:	0800ca30 	.word	0x0800ca30
 8008168:	0800ca38 	.word	0x0800ca38
 800816c:	0800ca44 	.word	0x0800ca44
 8008170:	0800ca50 	.word	0x0800ca50
 8008174:	0800f2b8 	.word	0x0800f2b8

08008178 <malloc>:
 8008178:	4b02      	ldr	r3, [pc, #8]	@ (8008184 <malloc+0xc>)
 800817a:	4601      	mov	r1, r0
 800817c:	6818      	ldr	r0, [r3, #0]
 800817e:	f000 b825 	b.w	80081cc <_malloc_r>
 8008182:	bf00      	nop
 8008184:	200000b4 	.word	0x200000b4

08008188 <sbrk_aligned>:
 8008188:	b570      	push	{r4, r5, r6, lr}
 800818a:	4e0f      	ldr	r6, [pc, #60]	@ (80081c8 <sbrk_aligned+0x40>)
 800818c:	460c      	mov	r4, r1
 800818e:	6831      	ldr	r1, [r6, #0]
 8008190:	4605      	mov	r5, r0
 8008192:	b911      	cbnz	r1, 800819a <sbrk_aligned+0x12>
 8008194:	f001 f8a8 	bl	80092e8 <_sbrk_r>
 8008198:	6030      	str	r0, [r6, #0]
 800819a:	4621      	mov	r1, r4
 800819c:	4628      	mov	r0, r5
 800819e:	f001 f8a3 	bl	80092e8 <_sbrk_r>
 80081a2:	1c43      	adds	r3, r0, #1
 80081a4:	d103      	bne.n	80081ae <sbrk_aligned+0x26>
 80081a6:	f04f 34ff 	mov.w	r4, #4294967295
 80081aa:	4620      	mov	r0, r4
 80081ac:	bd70      	pop	{r4, r5, r6, pc}
 80081ae:	1cc4      	adds	r4, r0, #3
 80081b0:	f024 0403 	bic.w	r4, r4, #3
 80081b4:	42a0      	cmp	r0, r4
 80081b6:	d0f8      	beq.n	80081aa <sbrk_aligned+0x22>
 80081b8:	1a21      	subs	r1, r4, r0
 80081ba:	4628      	mov	r0, r5
 80081bc:	f001 f894 	bl	80092e8 <_sbrk_r>
 80081c0:	3001      	adds	r0, #1
 80081c2:	d1f2      	bne.n	80081aa <sbrk_aligned+0x22>
 80081c4:	e7ef      	b.n	80081a6 <sbrk_aligned+0x1e>
 80081c6:	bf00      	nop
 80081c8:	20000bc8 	.word	0x20000bc8

080081cc <_malloc_r>:
 80081cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d0:	1ccd      	adds	r5, r1, #3
 80081d2:	f025 0503 	bic.w	r5, r5, #3
 80081d6:	3508      	adds	r5, #8
 80081d8:	2d0c      	cmp	r5, #12
 80081da:	bf38      	it	cc
 80081dc:	250c      	movcc	r5, #12
 80081de:	2d00      	cmp	r5, #0
 80081e0:	4606      	mov	r6, r0
 80081e2:	db01      	blt.n	80081e8 <_malloc_r+0x1c>
 80081e4:	42a9      	cmp	r1, r5
 80081e6:	d904      	bls.n	80081f2 <_malloc_r+0x26>
 80081e8:	230c      	movs	r3, #12
 80081ea:	6033      	str	r3, [r6, #0]
 80081ec:	2000      	movs	r0, #0
 80081ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082c8 <_malloc_r+0xfc>
 80081f6:	f000 f869 	bl	80082cc <__malloc_lock>
 80081fa:	f8d8 3000 	ldr.w	r3, [r8]
 80081fe:	461c      	mov	r4, r3
 8008200:	bb44      	cbnz	r4, 8008254 <_malloc_r+0x88>
 8008202:	4629      	mov	r1, r5
 8008204:	4630      	mov	r0, r6
 8008206:	f7ff ffbf 	bl	8008188 <sbrk_aligned>
 800820a:	1c43      	adds	r3, r0, #1
 800820c:	4604      	mov	r4, r0
 800820e:	d158      	bne.n	80082c2 <_malloc_r+0xf6>
 8008210:	f8d8 4000 	ldr.w	r4, [r8]
 8008214:	4627      	mov	r7, r4
 8008216:	2f00      	cmp	r7, #0
 8008218:	d143      	bne.n	80082a2 <_malloc_r+0xd6>
 800821a:	2c00      	cmp	r4, #0
 800821c:	d04b      	beq.n	80082b6 <_malloc_r+0xea>
 800821e:	6823      	ldr	r3, [r4, #0]
 8008220:	4639      	mov	r1, r7
 8008222:	4630      	mov	r0, r6
 8008224:	eb04 0903 	add.w	r9, r4, r3
 8008228:	f001 f85e 	bl	80092e8 <_sbrk_r>
 800822c:	4581      	cmp	r9, r0
 800822e:	d142      	bne.n	80082b6 <_malloc_r+0xea>
 8008230:	6821      	ldr	r1, [r4, #0]
 8008232:	1a6d      	subs	r5, r5, r1
 8008234:	4629      	mov	r1, r5
 8008236:	4630      	mov	r0, r6
 8008238:	f7ff ffa6 	bl	8008188 <sbrk_aligned>
 800823c:	3001      	adds	r0, #1
 800823e:	d03a      	beq.n	80082b6 <_malloc_r+0xea>
 8008240:	6823      	ldr	r3, [r4, #0]
 8008242:	442b      	add	r3, r5
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	f8d8 3000 	ldr.w	r3, [r8]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	bb62      	cbnz	r2, 80082a8 <_malloc_r+0xdc>
 800824e:	f8c8 7000 	str.w	r7, [r8]
 8008252:	e00f      	b.n	8008274 <_malloc_r+0xa8>
 8008254:	6822      	ldr	r2, [r4, #0]
 8008256:	1b52      	subs	r2, r2, r5
 8008258:	d420      	bmi.n	800829c <_malloc_r+0xd0>
 800825a:	2a0b      	cmp	r2, #11
 800825c:	d917      	bls.n	800828e <_malloc_r+0xc2>
 800825e:	1961      	adds	r1, r4, r5
 8008260:	42a3      	cmp	r3, r4
 8008262:	6025      	str	r5, [r4, #0]
 8008264:	bf18      	it	ne
 8008266:	6059      	strne	r1, [r3, #4]
 8008268:	6863      	ldr	r3, [r4, #4]
 800826a:	bf08      	it	eq
 800826c:	f8c8 1000 	streq.w	r1, [r8]
 8008270:	5162      	str	r2, [r4, r5]
 8008272:	604b      	str	r3, [r1, #4]
 8008274:	4630      	mov	r0, r6
 8008276:	f000 f82f 	bl	80082d8 <__malloc_unlock>
 800827a:	f104 000b 	add.w	r0, r4, #11
 800827e:	1d23      	adds	r3, r4, #4
 8008280:	f020 0007 	bic.w	r0, r0, #7
 8008284:	1ac2      	subs	r2, r0, r3
 8008286:	bf1c      	itt	ne
 8008288:	1a1b      	subne	r3, r3, r0
 800828a:	50a3      	strne	r3, [r4, r2]
 800828c:	e7af      	b.n	80081ee <_malloc_r+0x22>
 800828e:	6862      	ldr	r2, [r4, #4]
 8008290:	42a3      	cmp	r3, r4
 8008292:	bf0c      	ite	eq
 8008294:	f8c8 2000 	streq.w	r2, [r8]
 8008298:	605a      	strne	r2, [r3, #4]
 800829a:	e7eb      	b.n	8008274 <_malloc_r+0xa8>
 800829c:	4623      	mov	r3, r4
 800829e:	6864      	ldr	r4, [r4, #4]
 80082a0:	e7ae      	b.n	8008200 <_malloc_r+0x34>
 80082a2:	463c      	mov	r4, r7
 80082a4:	687f      	ldr	r7, [r7, #4]
 80082a6:	e7b6      	b.n	8008216 <_malloc_r+0x4a>
 80082a8:	461a      	mov	r2, r3
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	42a3      	cmp	r3, r4
 80082ae:	d1fb      	bne.n	80082a8 <_malloc_r+0xdc>
 80082b0:	2300      	movs	r3, #0
 80082b2:	6053      	str	r3, [r2, #4]
 80082b4:	e7de      	b.n	8008274 <_malloc_r+0xa8>
 80082b6:	230c      	movs	r3, #12
 80082b8:	6033      	str	r3, [r6, #0]
 80082ba:	4630      	mov	r0, r6
 80082bc:	f000 f80c 	bl	80082d8 <__malloc_unlock>
 80082c0:	e794      	b.n	80081ec <_malloc_r+0x20>
 80082c2:	6005      	str	r5, [r0, #0]
 80082c4:	e7d6      	b.n	8008274 <_malloc_r+0xa8>
 80082c6:	bf00      	nop
 80082c8:	20000bcc 	.word	0x20000bcc

080082cc <__malloc_lock>:
 80082cc:	4801      	ldr	r0, [pc, #4]	@ (80082d4 <__malloc_lock+0x8>)
 80082ce:	f001 b858 	b.w	8009382 <__retarget_lock_acquire_recursive>
 80082d2:	bf00      	nop
 80082d4:	20000d10 	.word	0x20000d10

080082d8 <__malloc_unlock>:
 80082d8:	4801      	ldr	r0, [pc, #4]	@ (80082e0 <__malloc_unlock+0x8>)
 80082da:	f001 b853 	b.w	8009384 <__retarget_lock_release_recursive>
 80082de:	bf00      	nop
 80082e0:	20000d10 	.word	0x20000d10

080082e4 <__cvt>:
 80082e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082e8:	ec57 6b10 	vmov	r6, r7, d0
 80082ec:	2f00      	cmp	r7, #0
 80082ee:	460c      	mov	r4, r1
 80082f0:	4619      	mov	r1, r3
 80082f2:	463b      	mov	r3, r7
 80082f4:	bfbb      	ittet	lt
 80082f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80082fa:	461f      	movlt	r7, r3
 80082fc:	2300      	movge	r3, #0
 80082fe:	232d      	movlt	r3, #45	@ 0x2d
 8008300:	700b      	strb	r3, [r1, #0]
 8008302:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008304:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008308:	4691      	mov	r9, r2
 800830a:	f023 0820 	bic.w	r8, r3, #32
 800830e:	bfbc      	itt	lt
 8008310:	4632      	movlt	r2, r6
 8008312:	4616      	movlt	r6, r2
 8008314:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008318:	d005      	beq.n	8008326 <__cvt+0x42>
 800831a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800831e:	d100      	bne.n	8008322 <__cvt+0x3e>
 8008320:	3401      	adds	r4, #1
 8008322:	2102      	movs	r1, #2
 8008324:	e000      	b.n	8008328 <__cvt+0x44>
 8008326:	2103      	movs	r1, #3
 8008328:	ab03      	add	r3, sp, #12
 800832a:	9301      	str	r3, [sp, #4]
 800832c:	ab02      	add	r3, sp, #8
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	ec47 6b10 	vmov	d0, r6, r7
 8008334:	4653      	mov	r3, sl
 8008336:	4622      	mov	r2, r4
 8008338:	f001 f8c2 	bl	80094c0 <_dtoa_r>
 800833c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008340:	4605      	mov	r5, r0
 8008342:	d119      	bne.n	8008378 <__cvt+0x94>
 8008344:	f019 0f01 	tst.w	r9, #1
 8008348:	d00e      	beq.n	8008368 <__cvt+0x84>
 800834a:	eb00 0904 	add.w	r9, r0, r4
 800834e:	2200      	movs	r2, #0
 8008350:	2300      	movs	r3, #0
 8008352:	4630      	mov	r0, r6
 8008354:	4639      	mov	r1, r7
 8008356:	f7f8 fbb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800835a:	b108      	cbz	r0, 8008360 <__cvt+0x7c>
 800835c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008360:	2230      	movs	r2, #48	@ 0x30
 8008362:	9b03      	ldr	r3, [sp, #12]
 8008364:	454b      	cmp	r3, r9
 8008366:	d31e      	bcc.n	80083a6 <__cvt+0xc2>
 8008368:	9b03      	ldr	r3, [sp, #12]
 800836a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800836c:	1b5b      	subs	r3, r3, r5
 800836e:	4628      	mov	r0, r5
 8008370:	6013      	str	r3, [r2, #0]
 8008372:	b004      	add	sp, #16
 8008374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008378:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800837c:	eb00 0904 	add.w	r9, r0, r4
 8008380:	d1e5      	bne.n	800834e <__cvt+0x6a>
 8008382:	7803      	ldrb	r3, [r0, #0]
 8008384:	2b30      	cmp	r3, #48	@ 0x30
 8008386:	d10a      	bne.n	800839e <__cvt+0xba>
 8008388:	2200      	movs	r2, #0
 800838a:	2300      	movs	r3, #0
 800838c:	4630      	mov	r0, r6
 800838e:	4639      	mov	r1, r7
 8008390:	f7f8 fb9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008394:	b918      	cbnz	r0, 800839e <__cvt+0xba>
 8008396:	f1c4 0401 	rsb	r4, r4, #1
 800839a:	f8ca 4000 	str.w	r4, [sl]
 800839e:	f8da 3000 	ldr.w	r3, [sl]
 80083a2:	4499      	add	r9, r3
 80083a4:	e7d3      	b.n	800834e <__cvt+0x6a>
 80083a6:	1c59      	adds	r1, r3, #1
 80083a8:	9103      	str	r1, [sp, #12]
 80083aa:	701a      	strb	r2, [r3, #0]
 80083ac:	e7d9      	b.n	8008362 <__cvt+0x7e>

080083ae <__exponent>:
 80083ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083b0:	2900      	cmp	r1, #0
 80083b2:	bfba      	itte	lt
 80083b4:	4249      	neglt	r1, r1
 80083b6:	232d      	movlt	r3, #45	@ 0x2d
 80083b8:	232b      	movge	r3, #43	@ 0x2b
 80083ba:	2909      	cmp	r1, #9
 80083bc:	7002      	strb	r2, [r0, #0]
 80083be:	7043      	strb	r3, [r0, #1]
 80083c0:	dd29      	ble.n	8008416 <__exponent+0x68>
 80083c2:	f10d 0307 	add.w	r3, sp, #7
 80083c6:	461d      	mov	r5, r3
 80083c8:	270a      	movs	r7, #10
 80083ca:	461a      	mov	r2, r3
 80083cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80083d0:	fb07 1416 	mls	r4, r7, r6, r1
 80083d4:	3430      	adds	r4, #48	@ 0x30
 80083d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80083da:	460c      	mov	r4, r1
 80083dc:	2c63      	cmp	r4, #99	@ 0x63
 80083de:	f103 33ff 	add.w	r3, r3, #4294967295
 80083e2:	4631      	mov	r1, r6
 80083e4:	dcf1      	bgt.n	80083ca <__exponent+0x1c>
 80083e6:	3130      	adds	r1, #48	@ 0x30
 80083e8:	1e94      	subs	r4, r2, #2
 80083ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80083ee:	1c41      	adds	r1, r0, #1
 80083f0:	4623      	mov	r3, r4
 80083f2:	42ab      	cmp	r3, r5
 80083f4:	d30a      	bcc.n	800840c <__exponent+0x5e>
 80083f6:	f10d 0309 	add.w	r3, sp, #9
 80083fa:	1a9b      	subs	r3, r3, r2
 80083fc:	42ac      	cmp	r4, r5
 80083fe:	bf88      	it	hi
 8008400:	2300      	movhi	r3, #0
 8008402:	3302      	adds	r3, #2
 8008404:	4403      	add	r3, r0
 8008406:	1a18      	subs	r0, r3, r0
 8008408:	b003      	add	sp, #12
 800840a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800840c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008410:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008414:	e7ed      	b.n	80083f2 <__exponent+0x44>
 8008416:	2330      	movs	r3, #48	@ 0x30
 8008418:	3130      	adds	r1, #48	@ 0x30
 800841a:	7083      	strb	r3, [r0, #2]
 800841c:	70c1      	strb	r1, [r0, #3]
 800841e:	1d03      	adds	r3, r0, #4
 8008420:	e7f1      	b.n	8008406 <__exponent+0x58>
	...

08008424 <_printf_float>:
 8008424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008428:	b08d      	sub	sp, #52	@ 0x34
 800842a:	460c      	mov	r4, r1
 800842c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008430:	4616      	mov	r6, r2
 8008432:	461f      	mov	r7, r3
 8008434:	4605      	mov	r5, r0
 8008436:	f000 ff1f 	bl	8009278 <_localeconv_r>
 800843a:	6803      	ldr	r3, [r0, #0]
 800843c:	9304      	str	r3, [sp, #16]
 800843e:	4618      	mov	r0, r3
 8008440:	f7f7 ff16 	bl	8000270 <strlen>
 8008444:	2300      	movs	r3, #0
 8008446:	930a      	str	r3, [sp, #40]	@ 0x28
 8008448:	f8d8 3000 	ldr.w	r3, [r8]
 800844c:	9005      	str	r0, [sp, #20]
 800844e:	3307      	adds	r3, #7
 8008450:	f023 0307 	bic.w	r3, r3, #7
 8008454:	f103 0208 	add.w	r2, r3, #8
 8008458:	f894 a018 	ldrb.w	sl, [r4, #24]
 800845c:	f8d4 b000 	ldr.w	fp, [r4]
 8008460:	f8c8 2000 	str.w	r2, [r8]
 8008464:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008468:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800846c:	9307      	str	r3, [sp, #28]
 800846e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008472:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008476:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800847a:	4b9c      	ldr	r3, [pc, #624]	@ (80086ec <_printf_float+0x2c8>)
 800847c:	f04f 32ff 	mov.w	r2, #4294967295
 8008480:	f7f8 fb54 	bl	8000b2c <__aeabi_dcmpun>
 8008484:	bb70      	cbnz	r0, 80084e4 <_printf_float+0xc0>
 8008486:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800848a:	4b98      	ldr	r3, [pc, #608]	@ (80086ec <_printf_float+0x2c8>)
 800848c:	f04f 32ff 	mov.w	r2, #4294967295
 8008490:	f7f8 fb2e 	bl	8000af0 <__aeabi_dcmple>
 8008494:	bb30      	cbnz	r0, 80084e4 <_printf_float+0xc0>
 8008496:	2200      	movs	r2, #0
 8008498:	2300      	movs	r3, #0
 800849a:	4640      	mov	r0, r8
 800849c:	4649      	mov	r1, r9
 800849e:	f7f8 fb1d 	bl	8000adc <__aeabi_dcmplt>
 80084a2:	b110      	cbz	r0, 80084aa <_printf_float+0x86>
 80084a4:	232d      	movs	r3, #45	@ 0x2d
 80084a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084aa:	4a91      	ldr	r2, [pc, #580]	@ (80086f0 <_printf_float+0x2cc>)
 80084ac:	4b91      	ldr	r3, [pc, #580]	@ (80086f4 <_printf_float+0x2d0>)
 80084ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80084b2:	bf8c      	ite	hi
 80084b4:	4690      	movhi	r8, r2
 80084b6:	4698      	movls	r8, r3
 80084b8:	2303      	movs	r3, #3
 80084ba:	6123      	str	r3, [r4, #16]
 80084bc:	f02b 0304 	bic.w	r3, fp, #4
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	f04f 0900 	mov.w	r9, #0
 80084c6:	9700      	str	r7, [sp, #0]
 80084c8:	4633      	mov	r3, r6
 80084ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80084cc:	4621      	mov	r1, r4
 80084ce:	4628      	mov	r0, r5
 80084d0:	f000 f9d2 	bl	8008878 <_printf_common>
 80084d4:	3001      	adds	r0, #1
 80084d6:	f040 808d 	bne.w	80085f4 <_printf_float+0x1d0>
 80084da:	f04f 30ff 	mov.w	r0, #4294967295
 80084de:	b00d      	add	sp, #52	@ 0x34
 80084e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e4:	4642      	mov	r2, r8
 80084e6:	464b      	mov	r3, r9
 80084e8:	4640      	mov	r0, r8
 80084ea:	4649      	mov	r1, r9
 80084ec:	f7f8 fb1e 	bl	8000b2c <__aeabi_dcmpun>
 80084f0:	b140      	cbz	r0, 8008504 <_printf_float+0xe0>
 80084f2:	464b      	mov	r3, r9
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	bfbc      	itt	lt
 80084f8:	232d      	movlt	r3, #45	@ 0x2d
 80084fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80084fe:	4a7e      	ldr	r2, [pc, #504]	@ (80086f8 <_printf_float+0x2d4>)
 8008500:	4b7e      	ldr	r3, [pc, #504]	@ (80086fc <_printf_float+0x2d8>)
 8008502:	e7d4      	b.n	80084ae <_printf_float+0x8a>
 8008504:	6863      	ldr	r3, [r4, #4]
 8008506:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800850a:	9206      	str	r2, [sp, #24]
 800850c:	1c5a      	adds	r2, r3, #1
 800850e:	d13b      	bne.n	8008588 <_printf_float+0x164>
 8008510:	2306      	movs	r3, #6
 8008512:	6063      	str	r3, [r4, #4]
 8008514:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008518:	2300      	movs	r3, #0
 800851a:	6022      	str	r2, [r4, #0]
 800851c:	9303      	str	r3, [sp, #12]
 800851e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008520:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008524:	ab09      	add	r3, sp, #36	@ 0x24
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	6861      	ldr	r1, [r4, #4]
 800852a:	ec49 8b10 	vmov	d0, r8, r9
 800852e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008532:	4628      	mov	r0, r5
 8008534:	f7ff fed6 	bl	80082e4 <__cvt>
 8008538:	9b06      	ldr	r3, [sp, #24]
 800853a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800853c:	2b47      	cmp	r3, #71	@ 0x47
 800853e:	4680      	mov	r8, r0
 8008540:	d129      	bne.n	8008596 <_printf_float+0x172>
 8008542:	1cc8      	adds	r0, r1, #3
 8008544:	db02      	blt.n	800854c <_printf_float+0x128>
 8008546:	6863      	ldr	r3, [r4, #4]
 8008548:	4299      	cmp	r1, r3
 800854a:	dd41      	ble.n	80085d0 <_printf_float+0x1ac>
 800854c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008550:	fa5f fa8a 	uxtb.w	sl, sl
 8008554:	3901      	subs	r1, #1
 8008556:	4652      	mov	r2, sl
 8008558:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800855c:	9109      	str	r1, [sp, #36]	@ 0x24
 800855e:	f7ff ff26 	bl	80083ae <__exponent>
 8008562:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008564:	1813      	adds	r3, r2, r0
 8008566:	2a01      	cmp	r2, #1
 8008568:	4681      	mov	r9, r0
 800856a:	6123      	str	r3, [r4, #16]
 800856c:	dc02      	bgt.n	8008574 <_printf_float+0x150>
 800856e:	6822      	ldr	r2, [r4, #0]
 8008570:	07d2      	lsls	r2, r2, #31
 8008572:	d501      	bpl.n	8008578 <_printf_float+0x154>
 8008574:	3301      	adds	r3, #1
 8008576:	6123      	str	r3, [r4, #16]
 8008578:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800857c:	2b00      	cmp	r3, #0
 800857e:	d0a2      	beq.n	80084c6 <_printf_float+0xa2>
 8008580:	232d      	movs	r3, #45	@ 0x2d
 8008582:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008586:	e79e      	b.n	80084c6 <_printf_float+0xa2>
 8008588:	9a06      	ldr	r2, [sp, #24]
 800858a:	2a47      	cmp	r2, #71	@ 0x47
 800858c:	d1c2      	bne.n	8008514 <_printf_float+0xf0>
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1c0      	bne.n	8008514 <_printf_float+0xf0>
 8008592:	2301      	movs	r3, #1
 8008594:	e7bd      	b.n	8008512 <_printf_float+0xee>
 8008596:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800859a:	d9db      	bls.n	8008554 <_printf_float+0x130>
 800859c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80085a0:	d118      	bne.n	80085d4 <_printf_float+0x1b0>
 80085a2:	2900      	cmp	r1, #0
 80085a4:	6863      	ldr	r3, [r4, #4]
 80085a6:	dd0b      	ble.n	80085c0 <_printf_float+0x19c>
 80085a8:	6121      	str	r1, [r4, #16]
 80085aa:	b913      	cbnz	r3, 80085b2 <_printf_float+0x18e>
 80085ac:	6822      	ldr	r2, [r4, #0]
 80085ae:	07d0      	lsls	r0, r2, #31
 80085b0:	d502      	bpl.n	80085b8 <_printf_float+0x194>
 80085b2:	3301      	adds	r3, #1
 80085b4:	440b      	add	r3, r1
 80085b6:	6123      	str	r3, [r4, #16]
 80085b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80085ba:	f04f 0900 	mov.w	r9, #0
 80085be:	e7db      	b.n	8008578 <_printf_float+0x154>
 80085c0:	b913      	cbnz	r3, 80085c8 <_printf_float+0x1a4>
 80085c2:	6822      	ldr	r2, [r4, #0]
 80085c4:	07d2      	lsls	r2, r2, #31
 80085c6:	d501      	bpl.n	80085cc <_printf_float+0x1a8>
 80085c8:	3302      	adds	r3, #2
 80085ca:	e7f4      	b.n	80085b6 <_printf_float+0x192>
 80085cc:	2301      	movs	r3, #1
 80085ce:	e7f2      	b.n	80085b6 <_printf_float+0x192>
 80085d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80085d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085d6:	4299      	cmp	r1, r3
 80085d8:	db05      	blt.n	80085e6 <_printf_float+0x1c2>
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	6121      	str	r1, [r4, #16]
 80085de:	07d8      	lsls	r0, r3, #31
 80085e0:	d5ea      	bpl.n	80085b8 <_printf_float+0x194>
 80085e2:	1c4b      	adds	r3, r1, #1
 80085e4:	e7e7      	b.n	80085b6 <_printf_float+0x192>
 80085e6:	2900      	cmp	r1, #0
 80085e8:	bfd4      	ite	le
 80085ea:	f1c1 0202 	rsble	r2, r1, #2
 80085ee:	2201      	movgt	r2, #1
 80085f0:	4413      	add	r3, r2
 80085f2:	e7e0      	b.n	80085b6 <_printf_float+0x192>
 80085f4:	6823      	ldr	r3, [r4, #0]
 80085f6:	055a      	lsls	r2, r3, #21
 80085f8:	d407      	bmi.n	800860a <_printf_float+0x1e6>
 80085fa:	6923      	ldr	r3, [r4, #16]
 80085fc:	4642      	mov	r2, r8
 80085fe:	4631      	mov	r1, r6
 8008600:	4628      	mov	r0, r5
 8008602:	47b8      	blx	r7
 8008604:	3001      	adds	r0, #1
 8008606:	d12b      	bne.n	8008660 <_printf_float+0x23c>
 8008608:	e767      	b.n	80084da <_printf_float+0xb6>
 800860a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800860e:	f240 80dd 	bls.w	80087cc <_printf_float+0x3a8>
 8008612:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008616:	2200      	movs	r2, #0
 8008618:	2300      	movs	r3, #0
 800861a:	f7f8 fa55 	bl	8000ac8 <__aeabi_dcmpeq>
 800861e:	2800      	cmp	r0, #0
 8008620:	d033      	beq.n	800868a <_printf_float+0x266>
 8008622:	4a37      	ldr	r2, [pc, #220]	@ (8008700 <_printf_float+0x2dc>)
 8008624:	2301      	movs	r3, #1
 8008626:	4631      	mov	r1, r6
 8008628:	4628      	mov	r0, r5
 800862a:	47b8      	blx	r7
 800862c:	3001      	adds	r0, #1
 800862e:	f43f af54 	beq.w	80084da <_printf_float+0xb6>
 8008632:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008636:	4543      	cmp	r3, r8
 8008638:	db02      	blt.n	8008640 <_printf_float+0x21c>
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	07d8      	lsls	r0, r3, #31
 800863e:	d50f      	bpl.n	8008660 <_printf_float+0x23c>
 8008640:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008644:	4631      	mov	r1, r6
 8008646:	4628      	mov	r0, r5
 8008648:	47b8      	blx	r7
 800864a:	3001      	adds	r0, #1
 800864c:	f43f af45 	beq.w	80084da <_printf_float+0xb6>
 8008650:	f04f 0900 	mov.w	r9, #0
 8008654:	f108 38ff 	add.w	r8, r8, #4294967295
 8008658:	f104 0a1a 	add.w	sl, r4, #26
 800865c:	45c8      	cmp	r8, r9
 800865e:	dc09      	bgt.n	8008674 <_printf_float+0x250>
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	079b      	lsls	r3, r3, #30
 8008664:	f100 8103 	bmi.w	800886e <_printf_float+0x44a>
 8008668:	68e0      	ldr	r0, [r4, #12]
 800866a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800866c:	4298      	cmp	r0, r3
 800866e:	bfb8      	it	lt
 8008670:	4618      	movlt	r0, r3
 8008672:	e734      	b.n	80084de <_printf_float+0xba>
 8008674:	2301      	movs	r3, #1
 8008676:	4652      	mov	r2, sl
 8008678:	4631      	mov	r1, r6
 800867a:	4628      	mov	r0, r5
 800867c:	47b8      	blx	r7
 800867e:	3001      	adds	r0, #1
 8008680:	f43f af2b 	beq.w	80084da <_printf_float+0xb6>
 8008684:	f109 0901 	add.w	r9, r9, #1
 8008688:	e7e8      	b.n	800865c <_printf_float+0x238>
 800868a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800868c:	2b00      	cmp	r3, #0
 800868e:	dc39      	bgt.n	8008704 <_printf_float+0x2e0>
 8008690:	4a1b      	ldr	r2, [pc, #108]	@ (8008700 <_printf_float+0x2dc>)
 8008692:	2301      	movs	r3, #1
 8008694:	4631      	mov	r1, r6
 8008696:	4628      	mov	r0, r5
 8008698:	47b8      	blx	r7
 800869a:	3001      	adds	r0, #1
 800869c:	f43f af1d 	beq.w	80084da <_printf_float+0xb6>
 80086a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80086a4:	ea59 0303 	orrs.w	r3, r9, r3
 80086a8:	d102      	bne.n	80086b0 <_printf_float+0x28c>
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	07d9      	lsls	r1, r3, #31
 80086ae:	d5d7      	bpl.n	8008660 <_printf_float+0x23c>
 80086b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086b4:	4631      	mov	r1, r6
 80086b6:	4628      	mov	r0, r5
 80086b8:	47b8      	blx	r7
 80086ba:	3001      	adds	r0, #1
 80086bc:	f43f af0d 	beq.w	80084da <_printf_float+0xb6>
 80086c0:	f04f 0a00 	mov.w	sl, #0
 80086c4:	f104 0b1a 	add.w	fp, r4, #26
 80086c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ca:	425b      	negs	r3, r3
 80086cc:	4553      	cmp	r3, sl
 80086ce:	dc01      	bgt.n	80086d4 <_printf_float+0x2b0>
 80086d0:	464b      	mov	r3, r9
 80086d2:	e793      	b.n	80085fc <_printf_float+0x1d8>
 80086d4:	2301      	movs	r3, #1
 80086d6:	465a      	mov	r2, fp
 80086d8:	4631      	mov	r1, r6
 80086da:	4628      	mov	r0, r5
 80086dc:	47b8      	blx	r7
 80086de:	3001      	adds	r0, #1
 80086e0:	f43f aefb 	beq.w	80084da <_printf_float+0xb6>
 80086e4:	f10a 0a01 	add.w	sl, sl, #1
 80086e8:	e7ee      	b.n	80086c8 <_printf_float+0x2a4>
 80086ea:	bf00      	nop
 80086ec:	7fefffff 	.word	0x7fefffff
 80086f0:	0803c4cc 	.word	0x0803c4cc
 80086f4:	0803c4c8 	.word	0x0803c4c8
 80086f8:	0803c4d4 	.word	0x0803c4d4
 80086fc:	0803c4d0 	.word	0x0803c4d0
 8008700:	0803c4d8 	.word	0x0803c4d8
 8008704:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008706:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800870a:	4553      	cmp	r3, sl
 800870c:	bfa8      	it	ge
 800870e:	4653      	movge	r3, sl
 8008710:	2b00      	cmp	r3, #0
 8008712:	4699      	mov	r9, r3
 8008714:	dc36      	bgt.n	8008784 <_printf_float+0x360>
 8008716:	f04f 0b00 	mov.w	fp, #0
 800871a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800871e:	f104 021a 	add.w	r2, r4, #26
 8008722:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008724:	9306      	str	r3, [sp, #24]
 8008726:	eba3 0309 	sub.w	r3, r3, r9
 800872a:	455b      	cmp	r3, fp
 800872c:	dc31      	bgt.n	8008792 <_printf_float+0x36e>
 800872e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008730:	459a      	cmp	sl, r3
 8008732:	dc3a      	bgt.n	80087aa <_printf_float+0x386>
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	07da      	lsls	r2, r3, #31
 8008738:	d437      	bmi.n	80087aa <_printf_float+0x386>
 800873a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800873c:	ebaa 0903 	sub.w	r9, sl, r3
 8008740:	9b06      	ldr	r3, [sp, #24]
 8008742:	ebaa 0303 	sub.w	r3, sl, r3
 8008746:	4599      	cmp	r9, r3
 8008748:	bfa8      	it	ge
 800874a:	4699      	movge	r9, r3
 800874c:	f1b9 0f00 	cmp.w	r9, #0
 8008750:	dc33      	bgt.n	80087ba <_printf_float+0x396>
 8008752:	f04f 0800 	mov.w	r8, #0
 8008756:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800875a:	f104 0b1a 	add.w	fp, r4, #26
 800875e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008760:	ebaa 0303 	sub.w	r3, sl, r3
 8008764:	eba3 0309 	sub.w	r3, r3, r9
 8008768:	4543      	cmp	r3, r8
 800876a:	f77f af79 	ble.w	8008660 <_printf_float+0x23c>
 800876e:	2301      	movs	r3, #1
 8008770:	465a      	mov	r2, fp
 8008772:	4631      	mov	r1, r6
 8008774:	4628      	mov	r0, r5
 8008776:	47b8      	blx	r7
 8008778:	3001      	adds	r0, #1
 800877a:	f43f aeae 	beq.w	80084da <_printf_float+0xb6>
 800877e:	f108 0801 	add.w	r8, r8, #1
 8008782:	e7ec      	b.n	800875e <_printf_float+0x33a>
 8008784:	4642      	mov	r2, r8
 8008786:	4631      	mov	r1, r6
 8008788:	4628      	mov	r0, r5
 800878a:	47b8      	blx	r7
 800878c:	3001      	adds	r0, #1
 800878e:	d1c2      	bne.n	8008716 <_printf_float+0x2f2>
 8008790:	e6a3      	b.n	80084da <_printf_float+0xb6>
 8008792:	2301      	movs	r3, #1
 8008794:	4631      	mov	r1, r6
 8008796:	4628      	mov	r0, r5
 8008798:	9206      	str	r2, [sp, #24]
 800879a:	47b8      	blx	r7
 800879c:	3001      	adds	r0, #1
 800879e:	f43f ae9c 	beq.w	80084da <_printf_float+0xb6>
 80087a2:	9a06      	ldr	r2, [sp, #24]
 80087a4:	f10b 0b01 	add.w	fp, fp, #1
 80087a8:	e7bb      	b.n	8008722 <_printf_float+0x2fe>
 80087aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087ae:	4631      	mov	r1, r6
 80087b0:	4628      	mov	r0, r5
 80087b2:	47b8      	blx	r7
 80087b4:	3001      	adds	r0, #1
 80087b6:	d1c0      	bne.n	800873a <_printf_float+0x316>
 80087b8:	e68f      	b.n	80084da <_printf_float+0xb6>
 80087ba:	9a06      	ldr	r2, [sp, #24]
 80087bc:	464b      	mov	r3, r9
 80087be:	4442      	add	r2, r8
 80087c0:	4631      	mov	r1, r6
 80087c2:	4628      	mov	r0, r5
 80087c4:	47b8      	blx	r7
 80087c6:	3001      	adds	r0, #1
 80087c8:	d1c3      	bne.n	8008752 <_printf_float+0x32e>
 80087ca:	e686      	b.n	80084da <_printf_float+0xb6>
 80087cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80087d0:	f1ba 0f01 	cmp.w	sl, #1
 80087d4:	dc01      	bgt.n	80087da <_printf_float+0x3b6>
 80087d6:	07db      	lsls	r3, r3, #31
 80087d8:	d536      	bpl.n	8008848 <_printf_float+0x424>
 80087da:	2301      	movs	r3, #1
 80087dc:	4642      	mov	r2, r8
 80087de:	4631      	mov	r1, r6
 80087e0:	4628      	mov	r0, r5
 80087e2:	47b8      	blx	r7
 80087e4:	3001      	adds	r0, #1
 80087e6:	f43f ae78 	beq.w	80084da <_printf_float+0xb6>
 80087ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087ee:	4631      	mov	r1, r6
 80087f0:	4628      	mov	r0, r5
 80087f2:	47b8      	blx	r7
 80087f4:	3001      	adds	r0, #1
 80087f6:	f43f ae70 	beq.w	80084da <_printf_float+0xb6>
 80087fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80087fe:	2200      	movs	r2, #0
 8008800:	2300      	movs	r3, #0
 8008802:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008806:	f7f8 f95f 	bl	8000ac8 <__aeabi_dcmpeq>
 800880a:	b9c0      	cbnz	r0, 800883e <_printf_float+0x41a>
 800880c:	4653      	mov	r3, sl
 800880e:	f108 0201 	add.w	r2, r8, #1
 8008812:	4631      	mov	r1, r6
 8008814:	4628      	mov	r0, r5
 8008816:	47b8      	blx	r7
 8008818:	3001      	adds	r0, #1
 800881a:	d10c      	bne.n	8008836 <_printf_float+0x412>
 800881c:	e65d      	b.n	80084da <_printf_float+0xb6>
 800881e:	2301      	movs	r3, #1
 8008820:	465a      	mov	r2, fp
 8008822:	4631      	mov	r1, r6
 8008824:	4628      	mov	r0, r5
 8008826:	47b8      	blx	r7
 8008828:	3001      	adds	r0, #1
 800882a:	f43f ae56 	beq.w	80084da <_printf_float+0xb6>
 800882e:	f108 0801 	add.w	r8, r8, #1
 8008832:	45d0      	cmp	r8, sl
 8008834:	dbf3      	blt.n	800881e <_printf_float+0x3fa>
 8008836:	464b      	mov	r3, r9
 8008838:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800883c:	e6df      	b.n	80085fe <_printf_float+0x1da>
 800883e:	f04f 0800 	mov.w	r8, #0
 8008842:	f104 0b1a 	add.w	fp, r4, #26
 8008846:	e7f4      	b.n	8008832 <_printf_float+0x40e>
 8008848:	2301      	movs	r3, #1
 800884a:	4642      	mov	r2, r8
 800884c:	e7e1      	b.n	8008812 <_printf_float+0x3ee>
 800884e:	2301      	movs	r3, #1
 8008850:	464a      	mov	r2, r9
 8008852:	4631      	mov	r1, r6
 8008854:	4628      	mov	r0, r5
 8008856:	47b8      	blx	r7
 8008858:	3001      	adds	r0, #1
 800885a:	f43f ae3e 	beq.w	80084da <_printf_float+0xb6>
 800885e:	f108 0801 	add.w	r8, r8, #1
 8008862:	68e3      	ldr	r3, [r4, #12]
 8008864:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008866:	1a5b      	subs	r3, r3, r1
 8008868:	4543      	cmp	r3, r8
 800886a:	dcf0      	bgt.n	800884e <_printf_float+0x42a>
 800886c:	e6fc      	b.n	8008668 <_printf_float+0x244>
 800886e:	f04f 0800 	mov.w	r8, #0
 8008872:	f104 0919 	add.w	r9, r4, #25
 8008876:	e7f4      	b.n	8008862 <_printf_float+0x43e>

08008878 <_printf_common>:
 8008878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800887c:	4616      	mov	r6, r2
 800887e:	4698      	mov	r8, r3
 8008880:	688a      	ldr	r2, [r1, #8]
 8008882:	690b      	ldr	r3, [r1, #16]
 8008884:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008888:	4293      	cmp	r3, r2
 800888a:	bfb8      	it	lt
 800888c:	4613      	movlt	r3, r2
 800888e:	6033      	str	r3, [r6, #0]
 8008890:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008894:	4607      	mov	r7, r0
 8008896:	460c      	mov	r4, r1
 8008898:	b10a      	cbz	r2, 800889e <_printf_common+0x26>
 800889a:	3301      	adds	r3, #1
 800889c:	6033      	str	r3, [r6, #0]
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	0699      	lsls	r1, r3, #26
 80088a2:	bf42      	ittt	mi
 80088a4:	6833      	ldrmi	r3, [r6, #0]
 80088a6:	3302      	addmi	r3, #2
 80088a8:	6033      	strmi	r3, [r6, #0]
 80088aa:	6825      	ldr	r5, [r4, #0]
 80088ac:	f015 0506 	ands.w	r5, r5, #6
 80088b0:	d106      	bne.n	80088c0 <_printf_common+0x48>
 80088b2:	f104 0a19 	add.w	sl, r4, #25
 80088b6:	68e3      	ldr	r3, [r4, #12]
 80088b8:	6832      	ldr	r2, [r6, #0]
 80088ba:	1a9b      	subs	r3, r3, r2
 80088bc:	42ab      	cmp	r3, r5
 80088be:	dc26      	bgt.n	800890e <_printf_common+0x96>
 80088c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088c4:	6822      	ldr	r2, [r4, #0]
 80088c6:	3b00      	subs	r3, #0
 80088c8:	bf18      	it	ne
 80088ca:	2301      	movne	r3, #1
 80088cc:	0692      	lsls	r2, r2, #26
 80088ce:	d42b      	bmi.n	8008928 <_printf_common+0xb0>
 80088d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80088d4:	4641      	mov	r1, r8
 80088d6:	4638      	mov	r0, r7
 80088d8:	47c8      	blx	r9
 80088da:	3001      	adds	r0, #1
 80088dc:	d01e      	beq.n	800891c <_printf_common+0xa4>
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	6922      	ldr	r2, [r4, #16]
 80088e2:	f003 0306 	and.w	r3, r3, #6
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	bf02      	ittt	eq
 80088ea:	68e5      	ldreq	r5, [r4, #12]
 80088ec:	6833      	ldreq	r3, [r6, #0]
 80088ee:	1aed      	subeq	r5, r5, r3
 80088f0:	68a3      	ldr	r3, [r4, #8]
 80088f2:	bf0c      	ite	eq
 80088f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088f8:	2500      	movne	r5, #0
 80088fa:	4293      	cmp	r3, r2
 80088fc:	bfc4      	itt	gt
 80088fe:	1a9b      	subgt	r3, r3, r2
 8008900:	18ed      	addgt	r5, r5, r3
 8008902:	2600      	movs	r6, #0
 8008904:	341a      	adds	r4, #26
 8008906:	42b5      	cmp	r5, r6
 8008908:	d11a      	bne.n	8008940 <_printf_common+0xc8>
 800890a:	2000      	movs	r0, #0
 800890c:	e008      	b.n	8008920 <_printf_common+0xa8>
 800890e:	2301      	movs	r3, #1
 8008910:	4652      	mov	r2, sl
 8008912:	4641      	mov	r1, r8
 8008914:	4638      	mov	r0, r7
 8008916:	47c8      	blx	r9
 8008918:	3001      	adds	r0, #1
 800891a:	d103      	bne.n	8008924 <_printf_common+0xac>
 800891c:	f04f 30ff 	mov.w	r0, #4294967295
 8008920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008924:	3501      	adds	r5, #1
 8008926:	e7c6      	b.n	80088b6 <_printf_common+0x3e>
 8008928:	18e1      	adds	r1, r4, r3
 800892a:	1c5a      	adds	r2, r3, #1
 800892c:	2030      	movs	r0, #48	@ 0x30
 800892e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008932:	4422      	add	r2, r4
 8008934:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008938:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800893c:	3302      	adds	r3, #2
 800893e:	e7c7      	b.n	80088d0 <_printf_common+0x58>
 8008940:	2301      	movs	r3, #1
 8008942:	4622      	mov	r2, r4
 8008944:	4641      	mov	r1, r8
 8008946:	4638      	mov	r0, r7
 8008948:	47c8      	blx	r9
 800894a:	3001      	adds	r0, #1
 800894c:	d0e6      	beq.n	800891c <_printf_common+0xa4>
 800894e:	3601      	adds	r6, #1
 8008950:	e7d9      	b.n	8008906 <_printf_common+0x8e>
	...

08008954 <_printf_i>:
 8008954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008958:	7e0f      	ldrb	r7, [r1, #24]
 800895a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800895c:	2f78      	cmp	r7, #120	@ 0x78
 800895e:	4691      	mov	r9, r2
 8008960:	4680      	mov	r8, r0
 8008962:	460c      	mov	r4, r1
 8008964:	469a      	mov	sl, r3
 8008966:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800896a:	d807      	bhi.n	800897c <_printf_i+0x28>
 800896c:	2f62      	cmp	r7, #98	@ 0x62
 800896e:	d80a      	bhi.n	8008986 <_printf_i+0x32>
 8008970:	2f00      	cmp	r7, #0
 8008972:	f000 80d1 	beq.w	8008b18 <_printf_i+0x1c4>
 8008976:	2f58      	cmp	r7, #88	@ 0x58
 8008978:	f000 80b8 	beq.w	8008aec <_printf_i+0x198>
 800897c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008980:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008984:	e03a      	b.n	80089fc <_printf_i+0xa8>
 8008986:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800898a:	2b15      	cmp	r3, #21
 800898c:	d8f6      	bhi.n	800897c <_printf_i+0x28>
 800898e:	a101      	add	r1, pc, #4	@ (adr r1, 8008994 <_printf_i+0x40>)
 8008990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008994:	080089ed 	.word	0x080089ed
 8008998:	08008a01 	.word	0x08008a01
 800899c:	0800897d 	.word	0x0800897d
 80089a0:	0800897d 	.word	0x0800897d
 80089a4:	0800897d 	.word	0x0800897d
 80089a8:	0800897d 	.word	0x0800897d
 80089ac:	08008a01 	.word	0x08008a01
 80089b0:	0800897d 	.word	0x0800897d
 80089b4:	0800897d 	.word	0x0800897d
 80089b8:	0800897d 	.word	0x0800897d
 80089bc:	0800897d 	.word	0x0800897d
 80089c0:	08008aff 	.word	0x08008aff
 80089c4:	08008a2b 	.word	0x08008a2b
 80089c8:	08008ab9 	.word	0x08008ab9
 80089cc:	0800897d 	.word	0x0800897d
 80089d0:	0800897d 	.word	0x0800897d
 80089d4:	08008b21 	.word	0x08008b21
 80089d8:	0800897d 	.word	0x0800897d
 80089dc:	08008a2b 	.word	0x08008a2b
 80089e0:	0800897d 	.word	0x0800897d
 80089e4:	0800897d 	.word	0x0800897d
 80089e8:	08008ac1 	.word	0x08008ac1
 80089ec:	6833      	ldr	r3, [r6, #0]
 80089ee:	1d1a      	adds	r2, r3, #4
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6032      	str	r2, [r6, #0]
 80089f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80089fc:	2301      	movs	r3, #1
 80089fe:	e09c      	b.n	8008b3a <_printf_i+0x1e6>
 8008a00:	6833      	ldr	r3, [r6, #0]
 8008a02:	6820      	ldr	r0, [r4, #0]
 8008a04:	1d19      	adds	r1, r3, #4
 8008a06:	6031      	str	r1, [r6, #0]
 8008a08:	0606      	lsls	r6, r0, #24
 8008a0a:	d501      	bpl.n	8008a10 <_printf_i+0xbc>
 8008a0c:	681d      	ldr	r5, [r3, #0]
 8008a0e:	e003      	b.n	8008a18 <_printf_i+0xc4>
 8008a10:	0645      	lsls	r5, r0, #25
 8008a12:	d5fb      	bpl.n	8008a0c <_printf_i+0xb8>
 8008a14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a18:	2d00      	cmp	r5, #0
 8008a1a:	da03      	bge.n	8008a24 <_printf_i+0xd0>
 8008a1c:	232d      	movs	r3, #45	@ 0x2d
 8008a1e:	426d      	negs	r5, r5
 8008a20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a24:	4858      	ldr	r0, [pc, #352]	@ (8008b88 <_printf_i+0x234>)
 8008a26:	230a      	movs	r3, #10
 8008a28:	e011      	b.n	8008a4e <_printf_i+0xfa>
 8008a2a:	6821      	ldr	r1, [r4, #0]
 8008a2c:	6833      	ldr	r3, [r6, #0]
 8008a2e:	0608      	lsls	r0, r1, #24
 8008a30:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a34:	d402      	bmi.n	8008a3c <_printf_i+0xe8>
 8008a36:	0649      	lsls	r1, r1, #25
 8008a38:	bf48      	it	mi
 8008a3a:	b2ad      	uxthmi	r5, r5
 8008a3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a3e:	4852      	ldr	r0, [pc, #328]	@ (8008b88 <_printf_i+0x234>)
 8008a40:	6033      	str	r3, [r6, #0]
 8008a42:	bf14      	ite	ne
 8008a44:	230a      	movne	r3, #10
 8008a46:	2308      	moveq	r3, #8
 8008a48:	2100      	movs	r1, #0
 8008a4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a4e:	6866      	ldr	r6, [r4, #4]
 8008a50:	60a6      	str	r6, [r4, #8]
 8008a52:	2e00      	cmp	r6, #0
 8008a54:	db05      	blt.n	8008a62 <_printf_i+0x10e>
 8008a56:	6821      	ldr	r1, [r4, #0]
 8008a58:	432e      	orrs	r6, r5
 8008a5a:	f021 0104 	bic.w	r1, r1, #4
 8008a5e:	6021      	str	r1, [r4, #0]
 8008a60:	d04b      	beq.n	8008afa <_printf_i+0x1a6>
 8008a62:	4616      	mov	r6, r2
 8008a64:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a68:	fb03 5711 	mls	r7, r3, r1, r5
 8008a6c:	5dc7      	ldrb	r7, [r0, r7]
 8008a6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a72:	462f      	mov	r7, r5
 8008a74:	42bb      	cmp	r3, r7
 8008a76:	460d      	mov	r5, r1
 8008a78:	d9f4      	bls.n	8008a64 <_printf_i+0x110>
 8008a7a:	2b08      	cmp	r3, #8
 8008a7c:	d10b      	bne.n	8008a96 <_printf_i+0x142>
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	07df      	lsls	r7, r3, #31
 8008a82:	d508      	bpl.n	8008a96 <_printf_i+0x142>
 8008a84:	6923      	ldr	r3, [r4, #16]
 8008a86:	6861      	ldr	r1, [r4, #4]
 8008a88:	4299      	cmp	r1, r3
 8008a8a:	bfde      	ittt	le
 8008a8c:	2330      	movle	r3, #48	@ 0x30
 8008a8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a96:	1b92      	subs	r2, r2, r6
 8008a98:	6122      	str	r2, [r4, #16]
 8008a9a:	f8cd a000 	str.w	sl, [sp]
 8008a9e:	464b      	mov	r3, r9
 8008aa0:	aa03      	add	r2, sp, #12
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	4640      	mov	r0, r8
 8008aa6:	f7ff fee7 	bl	8008878 <_printf_common>
 8008aaa:	3001      	adds	r0, #1
 8008aac:	d14a      	bne.n	8008b44 <_printf_i+0x1f0>
 8008aae:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab2:	b004      	add	sp, #16
 8008ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	f043 0320 	orr.w	r3, r3, #32
 8008abe:	6023      	str	r3, [r4, #0]
 8008ac0:	4832      	ldr	r0, [pc, #200]	@ (8008b8c <_printf_i+0x238>)
 8008ac2:	2778      	movs	r7, #120	@ 0x78
 8008ac4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ac8:	6823      	ldr	r3, [r4, #0]
 8008aca:	6831      	ldr	r1, [r6, #0]
 8008acc:	061f      	lsls	r7, r3, #24
 8008ace:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ad2:	d402      	bmi.n	8008ada <_printf_i+0x186>
 8008ad4:	065f      	lsls	r7, r3, #25
 8008ad6:	bf48      	it	mi
 8008ad8:	b2ad      	uxthmi	r5, r5
 8008ada:	6031      	str	r1, [r6, #0]
 8008adc:	07d9      	lsls	r1, r3, #31
 8008ade:	bf44      	itt	mi
 8008ae0:	f043 0320 	orrmi.w	r3, r3, #32
 8008ae4:	6023      	strmi	r3, [r4, #0]
 8008ae6:	b11d      	cbz	r5, 8008af0 <_printf_i+0x19c>
 8008ae8:	2310      	movs	r3, #16
 8008aea:	e7ad      	b.n	8008a48 <_printf_i+0xf4>
 8008aec:	4826      	ldr	r0, [pc, #152]	@ (8008b88 <_printf_i+0x234>)
 8008aee:	e7e9      	b.n	8008ac4 <_printf_i+0x170>
 8008af0:	6823      	ldr	r3, [r4, #0]
 8008af2:	f023 0320 	bic.w	r3, r3, #32
 8008af6:	6023      	str	r3, [r4, #0]
 8008af8:	e7f6      	b.n	8008ae8 <_printf_i+0x194>
 8008afa:	4616      	mov	r6, r2
 8008afc:	e7bd      	b.n	8008a7a <_printf_i+0x126>
 8008afe:	6833      	ldr	r3, [r6, #0]
 8008b00:	6825      	ldr	r5, [r4, #0]
 8008b02:	6961      	ldr	r1, [r4, #20]
 8008b04:	1d18      	adds	r0, r3, #4
 8008b06:	6030      	str	r0, [r6, #0]
 8008b08:	062e      	lsls	r6, r5, #24
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	d501      	bpl.n	8008b12 <_printf_i+0x1be>
 8008b0e:	6019      	str	r1, [r3, #0]
 8008b10:	e002      	b.n	8008b18 <_printf_i+0x1c4>
 8008b12:	0668      	lsls	r0, r5, #25
 8008b14:	d5fb      	bpl.n	8008b0e <_printf_i+0x1ba>
 8008b16:	8019      	strh	r1, [r3, #0]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	6123      	str	r3, [r4, #16]
 8008b1c:	4616      	mov	r6, r2
 8008b1e:	e7bc      	b.n	8008a9a <_printf_i+0x146>
 8008b20:	6833      	ldr	r3, [r6, #0]
 8008b22:	1d1a      	adds	r2, r3, #4
 8008b24:	6032      	str	r2, [r6, #0]
 8008b26:	681e      	ldr	r6, [r3, #0]
 8008b28:	6862      	ldr	r2, [r4, #4]
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	f7f7 fb4f 	bl	80001d0 <memchr>
 8008b32:	b108      	cbz	r0, 8008b38 <_printf_i+0x1e4>
 8008b34:	1b80      	subs	r0, r0, r6
 8008b36:	6060      	str	r0, [r4, #4]
 8008b38:	6863      	ldr	r3, [r4, #4]
 8008b3a:	6123      	str	r3, [r4, #16]
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b42:	e7aa      	b.n	8008a9a <_printf_i+0x146>
 8008b44:	6923      	ldr	r3, [r4, #16]
 8008b46:	4632      	mov	r2, r6
 8008b48:	4649      	mov	r1, r9
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	47d0      	blx	sl
 8008b4e:	3001      	adds	r0, #1
 8008b50:	d0ad      	beq.n	8008aae <_printf_i+0x15a>
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	079b      	lsls	r3, r3, #30
 8008b56:	d413      	bmi.n	8008b80 <_printf_i+0x22c>
 8008b58:	68e0      	ldr	r0, [r4, #12]
 8008b5a:	9b03      	ldr	r3, [sp, #12]
 8008b5c:	4298      	cmp	r0, r3
 8008b5e:	bfb8      	it	lt
 8008b60:	4618      	movlt	r0, r3
 8008b62:	e7a6      	b.n	8008ab2 <_printf_i+0x15e>
 8008b64:	2301      	movs	r3, #1
 8008b66:	4632      	mov	r2, r6
 8008b68:	4649      	mov	r1, r9
 8008b6a:	4640      	mov	r0, r8
 8008b6c:	47d0      	blx	sl
 8008b6e:	3001      	adds	r0, #1
 8008b70:	d09d      	beq.n	8008aae <_printf_i+0x15a>
 8008b72:	3501      	adds	r5, #1
 8008b74:	68e3      	ldr	r3, [r4, #12]
 8008b76:	9903      	ldr	r1, [sp, #12]
 8008b78:	1a5b      	subs	r3, r3, r1
 8008b7a:	42ab      	cmp	r3, r5
 8008b7c:	dcf2      	bgt.n	8008b64 <_printf_i+0x210>
 8008b7e:	e7eb      	b.n	8008b58 <_printf_i+0x204>
 8008b80:	2500      	movs	r5, #0
 8008b82:	f104 0619 	add.w	r6, r4, #25
 8008b86:	e7f5      	b.n	8008b74 <_printf_i+0x220>
 8008b88:	0803c4da 	.word	0x0803c4da
 8008b8c:	0803c4eb 	.word	0x0803c4eb

08008b90 <_scanf_float>:
 8008b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b94:	b087      	sub	sp, #28
 8008b96:	4691      	mov	r9, r2
 8008b98:	9303      	str	r3, [sp, #12]
 8008b9a:	688b      	ldr	r3, [r1, #8]
 8008b9c:	1e5a      	subs	r2, r3, #1
 8008b9e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008ba2:	bf81      	itttt	hi
 8008ba4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008ba8:	eb03 0b05 	addhi.w	fp, r3, r5
 8008bac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008bb0:	608b      	strhi	r3, [r1, #8]
 8008bb2:	680b      	ldr	r3, [r1, #0]
 8008bb4:	460a      	mov	r2, r1
 8008bb6:	f04f 0500 	mov.w	r5, #0
 8008bba:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008bbe:	f842 3b1c 	str.w	r3, [r2], #28
 8008bc2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008bc6:	4680      	mov	r8, r0
 8008bc8:	460c      	mov	r4, r1
 8008bca:	bf98      	it	ls
 8008bcc:	f04f 0b00 	movls.w	fp, #0
 8008bd0:	9201      	str	r2, [sp, #4]
 8008bd2:	4616      	mov	r6, r2
 8008bd4:	46aa      	mov	sl, r5
 8008bd6:	462f      	mov	r7, r5
 8008bd8:	9502      	str	r5, [sp, #8]
 8008bda:	68a2      	ldr	r2, [r4, #8]
 8008bdc:	b15a      	cbz	r2, 8008bf6 <_scanf_float+0x66>
 8008bde:	f8d9 3000 	ldr.w	r3, [r9]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	2b4e      	cmp	r3, #78	@ 0x4e
 8008be6:	d863      	bhi.n	8008cb0 <_scanf_float+0x120>
 8008be8:	2b40      	cmp	r3, #64	@ 0x40
 8008bea:	d83b      	bhi.n	8008c64 <_scanf_float+0xd4>
 8008bec:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008bf0:	b2c8      	uxtb	r0, r1
 8008bf2:	280e      	cmp	r0, #14
 8008bf4:	d939      	bls.n	8008c6a <_scanf_float+0xda>
 8008bf6:	b11f      	cbz	r7, 8008c00 <_scanf_float+0x70>
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bfe:	6023      	str	r3, [r4, #0]
 8008c00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c04:	f1ba 0f01 	cmp.w	sl, #1
 8008c08:	f200 8114 	bhi.w	8008e34 <_scanf_float+0x2a4>
 8008c0c:	9b01      	ldr	r3, [sp, #4]
 8008c0e:	429e      	cmp	r6, r3
 8008c10:	f200 8105 	bhi.w	8008e1e <_scanf_float+0x28e>
 8008c14:	2001      	movs	r0, #1
 8008c16:	b007      	add	sp, #28
 8008c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008c20:	2a0d      	cmp	r2, #13
 8008c22:	d8e8      	bhi.n	8008bf6 <_scanf_float+0x66>
 8008c24:	a101      	add	r1, pc, #4	@ (adr r1, 8008c2c <_scanf_float+0x9c>)
 8008c26:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008c2a:	bf00      	nop
 8008c2c:	08008d75 	.word	0x08008d75
 8008c30:	08008bf7 	.word	0x08008bf7
 8008c34:	08008bf7 	.word	0x08008bf7
 8008c38:	08008bf7 	.word	0x08008bf7
 8008c3c:	08008dd1 	.word	0x08008dd1
 8008c40:	08008dab 	.word	0x08008dab
 8008c44:	08008bf7 	.word	0x08008bf7
 8008c48:	08008bf7 	.word	0x08008bf7
 8008c4c:	08008d83 	.word	0x08008d83
 8008c50:	08008bf7 	.word	0x08008bf7
 8008c54:	08008bf7 	.word	0x08008bf7
 8008c58:	08008bf7 	.word	0x08008bf7
 8008c5c:	08008bf7 	.word	0x08008bf7
 8008c60:	08008d3f 	.word	0x08008d3f
 8008c64:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008c68:	e7da      	b.n	8008c20 <_scanf_float+0x90>
 8008c6a:	290e      	cmp	r1, #14
 8008c6c:	d8c3      	bhi.n	8008bf6 <_scanf_float+0x66>
 8008c6e:	a001      	add	r0, pc, #4	@ (adr r0, 8008c74 <_scanf_float+0xe4>)
 8008c70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008c74:	08008d2f 	.word	0x08008d2f
 8008c78:	08008bf7 	.word	0x08008bf7
 8008c7c:	08008d2f 	.word	0x08008d2f
 8008c80:	08008dbf 	.word	0x08008dbf
 8008c84:	08008bf7 	.word	0x08008bf7
 8008c88:	08008cd1 	.word	0x08008cd1
 8008c8c:	08008d15 	.word	0x08008d15
 8008c90:	08008d15 	.word	0x08008d15
 8008c94:	08008d15 	.word	0x08008d15
 8008c98:	08008d15 	.word	0x08008d15
 8008c9c:	08008d15 	.word	0x08008d15
 8008ca0:	08008d15 	.word	0x08008d15
 8008ca4:	08008d15 	.word	0x08008d15
 8008ca8:	08008d15 	.word	0x08008d15
 8008cac:	08008d15 	.word	0x08008d15
 8008cb0:	2b6e      	cmp	r3, #110	@ 0x6e
 8008cb2:	d809      	bhi.n	8008cc8 <_scanf_float+0x138>
 8008cb4:	2b60      	cmp	r3, #96	@ 0x60
 8008cb6:	d8b1      	bhi.n	8008c1c <_scanf_float+0x8c>
 8008cb8:	2b54      	cmp	r3, #84	@ 0x54
 8008cba:	d07b      	beq.n	8008db4 <_scanf_float+0x224>
 8008cbc:	2b59      	cmp	r3, #89	@ 0x59
 8008cbe:	d19a      	bne.n	8008bf6 <_scanf_float+0x66>
 8008cc0:	2d07      	cmp	r5, #7
 8008cc2:	d198      	bne.n	8008bf6 <_scanf_float+0x66>
 8008cc4:	2508      	movs	r5, #8
 8008cc6:	e02f      	b.n	8008d28 <_scanf_float+0x198>
 8008cc8:	2b74      	cmp	r3, #116	@ 0x74
 8008cca:	d073      	beq.n	8008db4 <_scanf_float+0x224>
 8008ccc:	2b79      	cmp	r3, #121	@ 0x79
 8008cce:	e7f6      	b.n	8008cbe <_scanf_float+0x12e>
 8008cd0:	6821      	ldr	r1, [r4, #0]
 8008cd2:	05c8      	lsls	r0, r1, #23
 8008cd4:	d51e      	bpl.n	8008d14 <_scanf_float+0x184>
 8008cd6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008cda:	6021      	str	r1, [r4, #0]
 8008cdc:	3701      	adds	r7, #1
 8008cde:	f1bb 0f00 	cmp.w	fp, #0
 8008ce2:	d003      	beq.n	8008cec <_scanf_float+0x15c>
 8008ce4:	3201      	adds	r2, #1
 8008ce6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008cea:	60a2      	str	r2, [r4, #8]
 8008cec:	68a3      	ldr	r3, [r4, #8]
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	60a3      	str	r3, [r4, #8]
 8008cf2:	6923      	ldr	r3, [r4, #16]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	6123      	str	r3, [r4, #16]
 8008cf8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f8c9 3004 	str.w	r3, [r9, #4]
 8008d04:	f340 8082 	ble.w	8008e0c <_scanf_float+0x27c>
 8008d08:	f8d9 3000 	ldr.w	r3, [r9]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	f8c9 3000 	str.w	r3, [r9]
 8008d12:	e762      	b.n	8008bda <_scanf_float+0x4a>
 8008d14:	eb1a 0105 	adds.w	r1, sl, r5
 8008d18:	f47f af6d 	bne.w	8008bf6 <_scanf_float+0x66>
 8008d1c:	6822      	ldr	r2, [r4, #0]
 8008d1e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008d22:	6022      	str	r2, [r4, #0]
 8008d24:	460d      	mov	r5, r1
 8008d26:	468a      	mov	sl, r1
 8008d28:	f806 3b01 	strb.w	r3, [r6], #1
 8008d2c:	e7de      	b.n	8008cec <_scanf_float+0x15c>
 8008d2e:	6822      	ldr	r2, [r4, #0]
 8008d30:	0610      	lsls	r0, r2, #24
 8008d32:	f57f af60 	bpl.w	8008bf6 <_scanf_float+0x66>
 8008d36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008d3a:	6022      	str	r2, [r4, #0]
 8008d3c:	e7f4      	b.n	8008d28 <_scanf_float+0x198>
 8008d3e:	f1ba 0f00 	cmp.w	sl, #0
 8008d42:	d10c      	bne.n	8008d5e <_scanf_float+0x1ce>
 8008d44:	b977      	cbnz	r7, 8008d64 <_scanf_float+0x1d4>
 8008d46:	6822      	ldr	r2, [r4, #0]
 8008d48:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008d4c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008d50:	d108      	bne.n	8008d64 <_scanf_float+0x1d4>
 8008d52:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d56:	6022      	str	r2, [r4, #0]
 8008d58:	f04f 0a01 	mov.w	sl, #1
 8008d5c:	e7e4      	b.n	8008d28 <_scanf_float+0x198>
 8008d5e:	f1ba 0f02 	cmp.w	sl, #2
 8008d62:	d050      	beq.n	8008e06 <_scanf_float+0x276>
 8008d64:	2d01      	cmp	r5, #1
 8008d66:	d002      	beq.n	8008d6e <_scanf_float+0x1de>
 8008d68:	2d04      	cmp	r5, #4
 8008d6a:	f47f af44 	bne.w	8008bf6 <_scanf_float+0x66>
 8008d6e:	3501      	adds	r5, #1
 8008d70:	b2ed      	uxtb	r5, r5
 8008d72:	e7d9      	b.n	8008d28 <_scanf_float+0x198>
 8008d74:	f1ba 0f01 	cmp.w	sl, #1
 8008d78:	f47f af3d 	bne.w	8008bf6 <_scanf_float+0x66>
 8008d7c:	f04f 0a02 	mov.w	sl, #2
 8008d80:	e7d2      	b.n	8008d28 <_scanf_float+0x198>
 8008d82:	b975      	cbnz	r5, 8008da2 <_scanf_float+0x212>
 8008d84:	2f00      	cmp	r7, #0
 8008d86:	f47f af37 	bne.w	8008bf8 <_scanf_float+0x68>
 8008d8a:	6822      	ldr	r2, [r4, #0]
 8008d8c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008d90:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008d94:	f040 8103 	bne.w	8008f9e <_scanf_float+0x40e>
 8008d98:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d9c:	6022      	str	r2, [r4, #0]
 8008d9e:	2501      	movs	r5, #1
 8008da0:	e7c2      	b.n	8008d28 <_scanf_float+0x198>
 8008da2:	2d03      	cmp	r5, #3
 8008da4:	d0e3      	beq.n	8008d6e <_scanf_float+0x1de>
 8008da6:	2d05      	cmp	r5, #5
 8008da8:	e7df      	b.n	8008d6a <_scanf_float+0x1da>
 8008daa:	2d02      	cmp	r5, #2
 8008dac:	f47f af23 	bne.w	8008bf6 <_scanf_float+0x66>
 8008db0:	2503      	movs	r5, #3
 8008db2:	e7b9      	b.n	8008d28 <_scanf_float+0x198>
 8008db4:	2d06      	cmp	r5, #6
 8008db6:	f47f af1e 	bne.w	8008bf6 <_scanf_float+0x66>
 8008dba:	2507      	movs	r5, #7
 8008dbc:	e7b4      	b.n	8008d28 <_scanf_float+0x198>
 8008dbe:	6822      	ldr	r2, [r4, #0]
 8008dc0:	0591      	lsls	r1, r2, #22
 8008dc2:	f57f af18 	bpl.w	8008bf6 <_scanf_float+0x66>
 8008dc6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008dca:	6022      	str	r2, [r4, #0]
 8008dcc:	9702      	str	r7, [sp, #8]
 8008dce:	e7ab      	b.n	8008d28 <_scanf_float+0x198>
 8008dd0:	6822      	ldr	r2, [r4, #0]
 8008dd2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008dd6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008dda:	d005      	beq.n	8008de8 <_scanf_float+0x258>
 8008ddc:	0550      	lsls	r0, r2, #21
 8008dde:	f57f af0a 	bpl.w	8008bf6 <_scanf_float+0x66>
 8008de2:	2f00      	cmp	r7, #0
 8008de4:	f000 80db 	beq.w	8008f9e <_scanf_float+0x40e>
 8008de8:	0591      	lsls	r1, r2, #22
 8008dea:	bf58      	it	pl
 8008dec:	9902      	ldrpl	r1, [sp, #8]
 8008dee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008df2:	bf58      	it	pl
 8008df4:	1a79      	subpl	r1, r7, r1
 8008df6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008dfa:	bf58      	it	pl
 8008dfc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008e00:	6022      	str	r2, [r4, #0]
 8008e02:	2700      	movs	r7, #0
 8008e04:	e790      	b.n	8008d28 <_scanf_float+0x198>
 8008e06:	f04f 0a03 	mov.w	sl, #3
 8008e0a:	e78d      	b.n	8008d28 <_scanf_float+0x198>
 8008e0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008e10:	4649      	mov	r1, r9
 8008e12:	4640      	mov	r0, r8
 8008e14:	4798      	blx	r3
 8008e16:	2800      	cmp	r0, #0
 8008e18:	f43f aedf 	beq.w	8008bda <_scanf_float+0x4a>
 8008e1c:	e6eb      	b.n	8008bf6 <_scanf_float+0x66>
 8008e1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e26:	464a      	mov	r2, r9
 8008e28:	4640      	mov	r0, r8
 8008e2a:	4798      	blx	r3
 8008e2c:	6923      	ldr	r3, [r4, #16]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	6123      	str	r3, [r4, #16]
 8008e32:	e6eb      	b.n	8008c0c <_scanf_float+0x7c>
 8008e34:	1e6b      	subs	r3, r5, #1
 8008e36:	2b06      	cmp	r3, #6
 8008e38:	d824      	bhi.n	8008e84 <_scanf_float+0x2f4>
 8008e3a:	2d02      	cmp	r5, #2
 8008e3c:	d836      	bhi.n	8008eac <_scanf_float+0x31c>
 8008e3e:	9b01      	ldr	r3, [sp, #4]
 8008e40:	429e      	cmp	r6, r3
 8008e42:	f67f aee7 	bls.w	8008c14 <_scanf_float+0x84>
 8008e46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e4e:	464a      	mov	r2, r9
 8008e50:	4640      	mov	r0, r8
 8008e52:	4798      	blx	r3
 8008e54:	6923      	ldr	r3, [r4, #16]
 8008e56:	3b01      	subs	r3, #1
 8008e58:	6123      	str	r3, [r4, #16]
 8008e5a:	e7f0      	b.n	8008e3e <_scanf_float+0x2ae>
 8008e5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e60:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008e64:	464a      	mov	r2, r9
 8008e66:	4640      	mov	r0, r8
 8008e68:	4798      	blx	r3
 8008e6a:	6923      	ldr	r3, [r4, #16]
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	6123      	str	r3, [r4, #16]
 8008e70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e74:	fa5f fa8a 	uxtb.w	sl, sl
 8008e78:	f1ba 0f02 	cmp.w	sl, #2
 8008e7c:	d1ee      	bne.n	8008e5c <_scanf_float+0x2cc>
 8008e7e:	3d03      	subs	r5, #3
 8008e80:	b2ed      	uxtb	r5, r5
 8008e82:	1b76      	subs	r6, r6, r5
 8008e84:	6823      	ldr	r3, [r4, #0]
 8008e86:	05da      	lsls	r2, r3, #23
 8008e88:	d530      	bpl.n	8008eec <_scanf_float+0x35c>
 8008e8a:	055b      	lsls	r3, r3, #21
 8008e8c:	d511      	bpl.n	8008eb2 <_scanf_float+0x322>
 8008e8e:	9b01      	ldr	r3, [sp, #4]
 8008e90:	429e      	cmp	r6, r3
 8008e92:	f67f aebf 	bls.w	8008c14 <_scanf_float+0x84>
 8008e96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e9e:	464a      	mov	r2, r9
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	4798      	blx	r3
 8008ea4:	6923      	ldr	r3, [r4, #16]
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	6123      	str	r3, [r4, #16]
 8008eaa:	e7f0      	b.n	8008e8e <_scanf_float+0x2fe>
 8008eac:	46aa      	mov	sl, r5
 8008eae:	46b3      	mov	fp, r6
 8008eb0:	e7de      	b.n	8008e70 <_scanf_float+0x2e0>
 8008eb2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008eb6:	6923      	ldr	r3, [r4, #16]
 8008eb8:	2965      	cmp	r1, #101	@ 0x65
 8008eba:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ebe:	f106 35ff 	add.w	r5, r6, #4294967295
 8008ec2:	6123      	str	r3, [r4, #16]
 8008ec4:	d00c      	beq.n	8008ee0 <_scanf_float+0x350>
 8008ec6:	2945      	cmp	r1, #69	@ 0x45
 8008ec8:	d00a      	beq.n	8008ee0 <_scanf_float+0x350>
 8008eca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ece:	464a      	mov	r2, r9
 8008ed0:	4640      	mov	r0, r8
 8008ed2:	4798      	blx	r3
 8008ed4:	6923      	ldr	r3, [r4, #16]
 8008ed6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008eda:	3b01      	subs	r3, #1
 8008edc:	1eb5      	subs	r5, r6, #2
 8008ede:	6123      	str	r3, [r4, #16]
 8008ee0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ee4:	464a      	mov	r2, r9
 8008ee6:	4640      	mov	r0, r8
 8008ee8:	4798      	blx	r3
 8008eea:	462e      	mov	r6, r5
 8008eec:	6822      	ldr	r2, [r4, #0]
 8008eee:	f012 0210 	ands.w	r2, r2, #16
 8008ef2:	d001      	beq.n	8008ef8 <_scanf_float+0x368>
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	e68e      	b.n	8008c16 <_scanf_float+0x86>
 8008ef8:	7032      	strb	r2, [r6, #0]
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008f00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f04:	d125      	bne.n	8008f52 <_scanf_float+0x3c2>
 8008f06:	9b02      	ldr	r3, [sp, #8]
 8008f08:	429f      	cmp	r7, r3
 8008f0a:	d00a      	beq.n	8008f22 <_scanf_float+0x392>
 8008f0c:	1bda      	subs	r2, r3, r7
 8008f0e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008f12:	429e      	cmp	r6, r3
 8008f14:	bf28      	it	cs
 8008f16:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008f1a:	4922      	ldr	r1, [pc, #136]	@ (8008fa4 <_scanf_float+0x414>)
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	f000 f93d 	bl	800919c <siprintf>
 8008f22:	9901      	ldr	r1, [sp, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	4640      	mov	r0, r8
 8008f28:	f002 fb92 	bl	800b650 <_strtod_r>
 8008f2c:	9b03      	ldr	r3, [sp, #12]
 8008f2e:	6821      	ldr	r1, [r4, #0]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f011 0f02 	tst.w	r1, #2
 8008f36:	ec57 6b10 	vmov	r6, r7, d0
 8008f3a:	f103 0204 	add.w	r2, r3, #4
 8008f3e:	d015      	beq.n	8008f6c <_scanf_float+0x3dc>
 8008f40:	9903      	ldr	r1, [sp, #12]
 8008f42:	600a      	str	r2, [r1, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	e9c3 6700 	strd	r6, r7, [r3]
 8008f4a:	68e3      	ldr	r3, [r4, #12]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	60e3      	str	r3, [r4, #12]
 8008f50:	e7d0      	b.n	8008ef4 <_scanf_float+0x364>
 8008f52:	9b04      	ldr	r3, [sp, #16]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d0e4      	beq.n	8008f22 <_scanf_float+0x392>
 8008f58:	9905      	ldr	r1, [sp, #20]
 8008f5a:	230a      	movs	r3, #10
 8008f5c:	3101      	adds	r1, #1
 8008f5e:	4640      	mov	r0, r8
 8008f60:	f002 fbf6 	bl	800b750 <_strtol_r>
 8008f64:	9b04      	ldr	r3, [sp, #16]
 8008f66:	9e05      	ldr	r6, [sp, #20]
 8008f68:	1ac2      	subs	r2, r0, r3
 8008f6a:	e7d0      	b.n	8008f0e <_scanf_float+0x37e>
 8008f6c:	f011 0f04 	tst.w	r1, #4
 8008f70:	9903      	ldr	r1, [sp, #12]
 8008f72:	600a      	str	r2, [r1, #0]
 8008f74:	d1e6      	bne.n	8008f44 <_scanf_float+0x3b4>
 8008f76:	681d      	ldr	r5, [r3, #0]
 8008f78:	4632      	mov	r2, r6
 8008f7a:	463b      	mov	r3, r7
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	4639      	mov	r1, r7
 8008f80:	f7f7 fdd4 	bl	8000b2c <__aeabi_dcmpun>
 8008f84:	b128      	cbz	r0, 8008f92 <_scanf_float+0x402>
 8008f86:	4808      	ldr	r0, [pc, #32]	@ (8008fa8 <_scanf_float+0x418>)
 8008f88:	f000 fa0c 	bl	80093a4 <nanf>
 8008f8c:	ed85 0a00 	vstr	s0, [r5]
 8008f90:	e7db      	b.n	8008f4a <_scanf_float+0x3ba>
 8008f92:	4630      	mov	r0, r6
 8008f94:	4639      	mov	r1, r7
 8008f96:	f7f7 fe27 	bl	8000be8 <__aeabi_d2f>
 8008f9a:	6028      	str	r0, [r5, #0]
 8008f9c:	e7d5      	b.n	8008f4a <_scanf_float+0x3ba>
 8008f9e:	2700      	movs	r7, #0
 8008fa0:	e62e      	b.n	8008c00 <_scanf_float+0x70>
 8008fa2:	bf00      	nop
 8008fa4:	0803c4fc 	.word	0x0803c4fc
 8008fa8:	0803c63d 	.word	0x0803c63d

08008fac <std>:
 8008fac:	2300      	movs	r3, #0
 8008fae:	b510      	push	{r4, lr}
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	e9c0 3300 	strd	r3, r3, [r0]
 8008fb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fba:	6083      	str	r3, [r0, #8]
 8008fbc:	8181      	strh	r1, [r0, #12]
 8008fbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8008fc0:	81c2      	strh	r2, [r0, #14]
 8008fc2:	6183      	str	r3, [r0, #24]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	2208      	movs	r2, #8
 8008fc8:	305c      	adds	r0, #92	@ 0x5c
 8008fca:	f000 f94c 	bl	8009266 <memset>
 8008fce:	4b0d      	ldr	r3, [pc, #52]	@ (8009004 <std+0x58>)
 8008fd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8008fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8009008 <std+0x5c>)
 8008fd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800900c <std+0x60>)
 8008fd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008fda:	4b0d      	ldr	r3, [pc, #52]	@ (8009010 <std+0x64>)
 8008fdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8008fde:	4b0d      	ldr	r3, [pc, #52]	@ (8009014 <std+0x68>)
 8008fe0:	6224      	str	r4, [r4, #32]
 8008fe2:	429c      	cmp	r4, r3
 8008fe4:	d006      	beq.n	8008ff4 <std+0x48>
 8008fe6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008fea:	4294      	cmp	r4, r2
 8008fec:	d002      	beq.n	8008ff4 <std+0x48>
 8008fee:	33d0      	adds	r3, #208	@ 0xd0
 8008ff0:	429c      	cmp	r4, r3
 8008ff2:	d105      	bne.n	8009000 <std+0x54>
 8008ff4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ffc:	f000 b9c0 	b.w	8009380 <__retarget_lock_init_recursive>
 8009000:	bd10      	pop	{r4, pc}
 8009002:	bf00      	nop
 8009004:	080091e1 	.word	0x080091e1
 8009008:	08009203 	.word	0x08009203
 800900c:	0800923b 	.word	0x0800923b
 8009010:	0800925f 	.word	0x0800925f
 8009014:	20000bd0 	.word	0x20000bd0

08009018 <stdio_exit_handler>:
 8009018:	4a02      	ldr	r2, [pc, #8]	@ (8009024 <stdio_exit_handler+0xc>)
 800901a:	4903      	ldr	r1, [pc, #12]	@ (8009028 <stdio_exit_handler+0x10>)
 800901c:	4803      	ldr	r0, [pc, #12]	@ (800902c <stdio_exit_handler+0x14>)
 800901e:	f000 b869 	b.w	80090f4 <_fwalk_sglue>
 8009022:	bf00      	nop
 8009024:	200000a8 	.word	0x200000a8
 8009028:	0800bd91 	.word	0x0800bd91
 800902c:	200000b8 	.word	0x200000b8

08009030 <cleanup_stdio>:
 8009030:	6841      	ldr	r1, [r0, #4]
 8009032:	4b0c      	ldr	r3, [pc, #48]	@ (8009064 <cleanup_stdio+0x34>)
 8009034:	4299      	cmp	r1, r3
 8009036:	b510      	push	{r4, lr}
 8009038:	4604      	mov	r4, r0
 800903a:	d001      	beq.n	8009040 <cleanup_stdio+0x10>
 800903c:	f002 fea8 	bl	800bd90 <_fflush_r>
 8009040:	68a1      	ldr	r1, [r4, #8]
 8009042:	4b09      	ldr	r3, [pc, #36]	@ (8009068 <cleanup_stdio+0x38>)
 8009044:	4299      	cmp	r1, r3
 8009046:	d002      	beq.n	800904e <cleanup_stdio+0x1e>
 8009048:	4620      	mov	r0, r4
 800904a:	f002 fea1 	bl	800bd90 <_fflush_r>
 800904e:	68e1      	ldr	r1, [r4, #12]
 8009050:	4b06      	ldr	r3, [pc, #24]	@ (800906c <cleanup_stdio+0x3c>)
 8009052:	4299      	cmp	r1, r3
 8009054:	d004      	beq.n	8009060 <cleanup_stdio+0x30>
 8009056:	4620      	mov	r0, r4
 8009058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800905c:	f002 be98 	b.w	800bd90 <_fflush_r>
 8009060:	bd10      	pop	{r4, pc}
 8009062:	bf00      	nop
 8009064:	20000bd0 	.word	0x20000bd0
 8009068:	20000c38 	.word	0x20000c38
 800906c:	20000ca0 	.word	0x20000ca0

08009070 <global_stdio_init.part.0>:
 8009070:	b510      	push	{r4, lr}
 8009072:	4b0b      	ldr	r3, [pc, #44]	@ (80090a0 <global_stdio_init.part.0+0x30>)
 8009074:	4c0b      	ldr	r4, [pc, #44]	@ (80090a4 <global_stdio_init.part.0+0x34>)
 8009076:	4a0c      	ldr	r2, [pc, #48]	@ (80090a8 <global_stdio_init.part.0+0x38>)
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	4620      	mov	r0, r4
 800907c:	2200      	movs	r2, #0
 800907e:	2104      	movs	r1, #4
 8009080:	f7ff ff94 	bl	8008fac <std>
 8009084:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009088:	2201      	movs	r2, #1
 800908a:	2109      	movs	r1, #9
 800908c:	f7ff ff8e 	bl	8008fac <std>
 8009090:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009094:	2202      	movs	r2, #2
 8009096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800909a:	2112      	movs	r1, #18
 800909c:	f7ff bf86 	b.w	8008fac <std>
 80090a0:	20000d08 	.word	0x20000d08
 80090a4:	20000bd0 	.word	0x20000bd0
 80090a8:	08009019 	.word	0x08009019

080090ac <__sfp_lock_acquire>:
 80090ac:	4801      	ldr	r0, [pc, #4]	@ (80090b4 <__sfp_lock_acquire+0x8>)
 80090ae:	f000 b968 	b.w	8009382 <__retarget_lock_acquire_recursive>
 80090b2:	bf00      	nop
 80090b4:	20000d11 	.word	0x20000d11

080090b8 <__sfp_lock_release>:
 80090b8:	4801      	ldr	r0, [pc, #4]	@ (80090c0 <__sfp_lock_release+0x8>)
 80090ba:	f000 b963 	b.w	8009384 <__retarget_lock_release_recursive>
 80090be:	bf00      	nop
 80090c0:	20000d11 	.word	0x20000d11

080090c4 <__sinit>:
 80090c4:	b510      	push	{r4, lr}
 80090c6:	4604      	mov	r4, r0
 80090c8:	f7ff fff0 	bl	80090ac <__sfp_lock_acquire>
 80090cc:	6a23      	ldr	r3, [r4, #32]
 80090ce:	b11b      	cbz	r3, 80090d8 <__sinit+0x14>
 80090d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d4:	f7ff bff0 	b.w	80090b8 <__sfp_lock_release>
 80090d8:	4b04      	ldr	r3, [pc, #16]	@ (80090ec <__sinit+0x28>)
 80090da:	6223      	str	r3, [r4, #32]
 80090dc:	4b04      	ldr	r3, [pc, #16]	@ (80090f0 <__sinit+0x2c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1f5      	bne.n	80090d0 <__sinit+0xc>
 80090e4:	f7ff ffc4 	bl	8009070 <global_stdio_init.part.0>
 80090e8:	e7f2      	b.n	80090d0 <__sinit+0xc>
 80090ea:	bf00      	nop
 80090ec:	08009031 	.word	0x08009031
 80090f0:	20000d08 	.word	0x20000d08

080090f4 <_fwalk_sglue>:
 80090f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090f8:	4607      	mov	r7, r0
 80090fa:	4688      	mov	r8, r1
 80090fc:	4614      	mov	r4, r2
 80090fe:	2600      	movs	r6, #0
 8009100:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009104:	f1b9 0901 	subs.w	r9, r9, #1
 8009108:	d505      	bpl.n	8009116 <_fwalk_sglue+0x22>
 800910a:	6824      	ldr	r4, [r4, #0]
 800910c:	2c00      	cmp	r4, #0
 800910e:	d1f7      	bne.n	8009100 <_fwalk_sglue+0xc>
 8009110:	4630      	mov	r0, r6
 8009112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009116:	89ab      	ldrh	r3, [r5, #12]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d907      	bls.n	800912c <_fwalk_sglue+0x38>
 800911c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009120:	3301      	adds	r3, #1
 8009122:	d003      	beq.n	800912c <_fwalk_sglue+0x38>
 8009124:	4629      	mov	r1, r5
 8009126:	4638      	mov	r0, r7
 8009128:	47c0      	blx	r8
 800912a:	4306      	orrs	r6, r0
 800912c:	3568      	adds	r5, #104	@ 0x68
 800912e:	e7e9      	b.n	8009104 <_fwalk_sglue+0x10>

08009130 <sniprintf>:
 8009130:	b40c      	push	{r2, r3}
 8009132:	b530      	push	{r4, r5, lr}
 8009134:	4b18      	ldr	r3, [pc, #96]	@ (8009198 <sniprintf+0x68>)
 8009136:	1e0c      	subs	r4, r1, #0
 8009138:	681d      	ldr	r5, [r3, #0]
 800913a:	b09d      	sub	sp, #116	@ 0x74
 800913c:	da08      	bge.n	8009150 <sniprintf+0x20>
 800913e:	238b      	movs	r3, #139	@ 0x8b
 8009140:	602b      	str	r3, [r5, #0]
 8009142:	f04f 30ff 	mov.w	r0, #4294967295
 8009146:	b01d      	add	sp, #116	@ 0x74
 8009148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800914c:	b002      	add	sp, #8
 800914e:	4770      	bx	lr
 8009150:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009154:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009158:	f04f 0300 	mov.w	r3, #0
 800915c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800915e:	bf14      	ite	ne
 8009160:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009164:	4623      	moveq	r3, r4
 8009166:	9304      	str	r3, [sp, #16]
 8009168:	9307      	str	r3, [sp, #28]
 800916a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800916e:	9002      	str	r0, [sp, #8]
 8009170:	9006      	str	r0, [sp, #24]
 8009172:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009176:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009178:	ab21      	add	r3, sp, #132	@ 0x84
 800917a:	a902      	add	r1, sp, #8
 800917c:	4628      	mov	r0, r5
 800917e:	9301      	str	r3, [sp, #4]
 8009180:	f002 fb44 	bl	800b80c <_svfiprintf_r>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	bfbc      	itt	lt
 8009188:	238b      	movlt	r3, #139	@ 0x8b
 800918a:	602b      	strlt	r3, [r5, #0]
 800918c:	2c00      	cmp	r4, #0
 800918e:	d0da      	beq.n	8009146 <sniprintf+0x16>
 8009190:	9b02      	ldr	r3, [sp, #8]
 8009192:	2200      	movs	r2, #0
 8009194:	701a      	strb	r2, [r3, #0]
 8009196:	e7d6      	b.n	8009146 <sniprintf+0x16>
 8009198:	200000b4 	.word	0x200000b4

0800919c <siprintf>:
 800919c:	b40e      	push	{r1, r2, r3}
 800919e:	b510      	push	{r4, lr}
 80091a0:	b09d      	sub	sp, #116	@ 0x74
 80091a2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80091a4:	9002      	str	r0, [sp, #8]
 80091a6:	9006      	str	r0, [sp, #24]
 80091a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80091ac:	480a      	ldr	r0, [pc, #40]	@ (80091d8 <siprintf+0x3c>)
 80091ae:	9107      	str	r1, [sp, #28]
 80091b0:	9104      	str	r1, [sp, #16]
 80091b2:	490a      	ldr	r1, [pc, #40]	@ (80091dc <siprintf+0x40>)
 80091b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80091b8:	9105      	str	r1, [sp, #20]
 80091ba:	2400      	movs	r4, #0
 80091bc:	a902      	add	r1, sp, #8
 80091be:	6800      	ldr	r0, [r0, #0]
 80091c0:	9301      	str	r3, [sp, #4]
 80091c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80091c4:	f002 fb22 	bl	800b80c <_svfiprintf_r>
 80091c8:	9b02      	ldr	r3, [sp, #8]
 80091ca:	701c      	strb	r4, [r3, #0]
 80091cc:	b01d      	add	sp, #116	@ 0x74
 80091ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091d2:	b003      	add	sp, #12
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	200000b4 	.word	0x200000b4
 80091dc:	ffff0208 	.word	0xffff0208

080091e0 <__sread>:
 80091e0:	b510      	push	{r4, lr}
 80091e2:	460c      	mov	r4, r1
 80091e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e8:	f000 f86c 	bl	80092c4 <_read_r>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	bfab      	itete	ge
 80091f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80091f2:	89a3      	ldrhlt	r3, [r4, #12]
 80091f4:	181b      	addge	r3, r3, r0
 80091f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80091fa:	bfac      	ite	ge
 80091fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80091fe:	81a3      	strhlt	r3, [r4, #12]
 8009200:	bd10      	pop	{r4, pc}

08009202 <__swrite>:
 8009202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009206:	461f      	mov	r7, r3
 8009208:	898b      	ldrh	r3, [r1, #12]
 800920a:	05db      	lsls	r3, r3, #23
 800920c:	4605      	mov	r5, r0
 800920e:	460c      	mov	r4, r1
 8009210:	4616      	mov	r6, r2
 8009212:	d505      	bpl.n	8009220 <__swrite+0x1e>
 8009214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009218:	2302      	movs	r3, #2
 800921a:	2200      	movs	r2, #0
 800921c:	f000 f840 	bl	80092a0 <_lseek_r>
 8009220:	89a3      	ldrh	r3, [r4, #12]
 8009222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009226:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800922a:	81a3      	strh	r3, [r4, #12]
 800922c:	4632      	mov	r2, r6
 800922e:	463b      	mov	r3, r7
 8009230:	4628      	mov	r0, r5
 8009232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009236:	f000 b867 	b.w	8009308 <_write_r>

0800923a <__sseek>:
 800923a:	b510      	push	{r4, lr}
 800923c:	460c      	mov	r4, r1
 800923e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009242:	f000 f82d 	bl	80092a0 <_lseek_r>
 8009246:	1c43      	adds	r3, r0, #1
 8009248:	89a3      	ldrh	r3, [r4, #12]
 800924a:	bf15      	itete	ne
 800924c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800924e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009252:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009256:	81a3      	strheq	r3, [r4, #12]
 8009258:	bf18      	it	ne
 800925a:	81a3      	strhne	r3, [r4, #12]
 800925c:	bd10      	pop	{r4, pc}

0800925e <__sclose>:
 800925e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009262:	f000 b80d 	b.w	8009280 <_close_r>

08009266 <memset>:
 8009266:	4402      	add	r2, r0
 8009268:	4603      	mov	r3, r0
 800926a:	4293      	cmp	r3, r2
 800926c:	d100      	bne.n	8009270 <memset+0xa>
 800926e:	4770      	bx	lr
 8009270:	f803 1b01 	strb.w	r1, [r3], #1
 8009274:	e7f9      	b.n	800926a <memset+0x4>
	...

08009278 <_localeconv_r>:
 8009278:	4800      	ldr	r0, [pc, #0]	@ (800927c <_localeconv_r+0x4>)
 800927a:	4770      	bx	lr
 800927c:	200001f4 	.word	0x200001f4

08009280 <_close_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4d06      	ldr	r5, [pc, #24]	@ (800929c <_close_r+0x1c>)
 8009284:	2300      	movs	r3, #0
 8009286:	4604      	mov	r4, r0
 8009288:	4608      	mov	r0, r1
 800928a:	602b      	str	r3, [r5, #0]
 800928c:	f7f8 fca4 	bl	8001bd8 <_close>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d102      	bne.n	800929a <_close_r+0x1a>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	b103      	cbz	r3, 800929a <_close_r+0x1a>
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	20000d0c 	.word	0x20000d0c

080092a0 <_lseek_r>:
 80092a0:	b538      	push	{r3, r4, r5, lr}
 80092a2:	4d07      	ldr	r5, [pc, #28]	@ (80092c0 <_lseek_r+0x20>)
 80092a4:	4604      	mov	r4, r0
 80092a6:	4608      	mov	r0, r1
 80092a8:	4611      	mov	r1, r2
 80092aa:	2200      	movs	r2, #0
 80092ac:	602a      	str	r2, [r5, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	f7f8 fcb9 	bl	8001c26 <_lseek>
 80092b4:	1c43      	adds	r3, r0, #1
 80092b6:	d102      	bne.n	80092be <_lseek_r+0x1e>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	b103      	cbz	r3, 80092be <_lseek_r+0x1e>
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	bd38      	pop	{r3, r4, r5, pc}
 80092c0:	20000d0c 	.word	0x20000d0c

080092c4 <_read_r>:
 80092c4:	b538      	push	{r3, r4, r5, lr}
 80092c6:	4d07      	ldr	r5, [pc, #28]	@ (80092e4 <_read_r+0x20>)
 80092c8:	4604      	mov	r4, r0
 80092ca:	4608      	mov	r0, r1
 80092cc:	4611      	mov	r1, r2
 80092ce:	2200      	movs	r2, #0
 80092d0:	602a      	str	r2, [r5, #0]
 80092d2:	461a      	mov	r2, r3
 80092d4:	f7f8 fc47 	bl	8001b66 <_read>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d102      	bne.n	80092e2 <_read_r+0x1e>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	b103      	cbz	r3, 80092e2 <_read_r+0x1e>
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	20000d0c 	.word	0x20000d0c

080092e8 <_sbrk_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	4d06      	ldr	r5, [pc, #24]	@ (8009304 <_sbrk_r+0x1c>)
 80092ec:	2300      	movs	r3, #0
 80092ee:	4604      	mov	r4, r0
 80092f0:	4608      	mov	r0, r1
 80092f2:	602b      	str	r3, [r5, #0]
 80092f4:	f7f8 fca4 	bl	8001c40 <_sbrk>
 80092f8:	1c43      	adds	r3, r0, #1
 80092fa:	d102      	bne.n	8009302 <_sbrk_r+0x1a>
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	b103      	cbz	r3, 8009302 <_sbrk_r+0x1a>
 8009300:	6023      	str	r3, [r4, #0]
 8009302:	bd38      	pop	{r3, r4, r5, pc}
 8009304:	20000d0c 	.word	0x20000d0c

08009308 <_write_r>:
 8009308:	b538      	push	{r3, r4, r5, lr}
 800930a:	4d07      	ldr	r5, [pc, #28]	@ (8009328 <_write_r+0x20>)
 800930c:	4604      	mov	r4, r0
 800930e:	4608      	mov	r0, r1
 8009310:	4611      	mov	r1, r2
 8009312:	2200      	movs	r2, #0
 8009314:	602a      	str	r2, [r5, #0]
 8009316:	461a      	mov	r2, r3
 8009318:	f7f8 fc42 	bl	8001ba0 <_write>
 800931c:	1c43      	adds	r3, r0, #1
 800931e:	d102      	bne.n	8009326 <_write_r+0x1e>
 8009320:	682b      	ldr	r3, [r5, #0]
 8009322:	b103      	cbz	r3, 8009326 <_write_r+0x1e>
 8009324:	6023      	str	r3, [r4, #0]
 8009326:	bd38      	pop	{r3, r4, r5, pc}
 8009328:	20000d0c 	.word	0x20000d0c

0800932c <__errno>:
 800932c:	4b01      	ldr	r3, [pc, #4]	@ (8009334 <__errno+0x8>)
 800932e:	6818      	ldr	r0, [r3, #0]
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	200000b4 	.word	0x200000b4

08009338 <__libc_init_array>:
 8009338:	b570      	push	{r4, r5, r6, lr}
 800933a:	4d0d      	ldr	r5, [pc, #52]	@ (8009370 <__libc_init_array+0x38>)
 800933c:	4c0d      	ldr	r4, [pc, #52]	@ (8009374 <__libc_init_array+0x3c>)
 800933e:	1b64      	subs	r4, r4, r5
 8009340:	10a4      	asrs	r4, r4, #2
 8009342:	2600      	movs	r6, #0
 8009344:	42a6      	cmp	r6, r4
 8009346:	d109      	bne.n	800935c <__libc_init_array+0x24>
 8009348:	4d0b      	ldr	r5, [pc, #44]	@ (8009378 <__libc_init_array+0x40>)
 800934a:	4c0c      	ldr	r4, [pc, #48]	@ (800937c <__libc_init_array+0x44>)
 800934c:	f003 fab2 	bl	800c8b4 <_init>
 8009350:	1b64      	subs	r4, r4, r5
 8009352:	10a4      	asrs	r4, r4, #2
 8009354:	2600      	movs	r6, #0
 8009356:	42a6      	cmp	r6, r4
 8009358:	d105      	bne.n	8009366 <__libc_init_array+0x2e>
 800935a:	bd70      	pop	{r4, r5, r6, pc}
 800935c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009360:	4798      	blx	r3
 8009362:	3601      	adds	r6, #1
 8009364:	e7ee      	b.n	8009344 <__libc_init_array+0xc>
 8009366:	f855 3b04 	ldr.w	r3, [r5], #4
 800936a:	4798      	blx	r3
 800936c:	3601      	adds	r6, #1
 800936e:	e7f2      	b.n	8009356 <__libc_init_array+0x1e>
 8009370:	0803c8fc 	.word	0x0803c8fc
 8009374:	0803c8fc 	.word	0x0803c8fc
 8009378:	0803c8fc 	.word	0x0803c8fc
 800937c:	0803c900 	.word	0x0803c900

08009380 <__retarget_lock_init_recursive>:
 8009380:	4770      	bx	lr

08009382 <__retarget_lock_acquire_recursive>:
 8009382:	4770      	bx	lr

08009384 <__retarget_lock_release_recursive>:
 8009384:	4770      	bx	lr

08009386 <memcpy>:
 8009386:	440a      	add	r2, r1
 8009388:	4291      	cmp	r1, r2
 800938a:	f100 33ff 	add.w	r3, r0, #4294967295
 800938e:	d100      	bne.n	8009392 <memcpy+0xc>
 8009390:	4770      	bx	lr
 8009392:	b510      	push	{r4, lr}
 8009394:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009398:	f803 4f01 	strb.w	r4, [r3, #1]!
 800939c:	4291      	cmp	r1, r2
 800939e:	d1f9      	bne.n	8009394 <memcpy+0xe>
 80093a0:	bd10      	pop	{r4, pc}
	...

080093a4 <nanf>:
 80093a4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80093ac <nanf+0x8>
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	7fc00000 	.word	0x7fc00000

080093b0 <quorem>:
 80093b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b4:	6903      	ldr	r3, [r0, #16]
 80093b6:	690c      	ldr	r4, [r1, #16]
 80093b8:	42a3      	cmp	r3, r4
 80093ba:	4607      	mov	r7, r0
 80093bc:	db7e      	blt.n	80094bc <quorem+0x10c>
 80093be:	3c01      	subs	r4, #1
 80093c0:	f101 0814 	add.w	r8, r1, #20
 80093c4:	00a3      	lsls	r3, r4, #2
 80093c6:	f100 0514 	add.w	r5, r0, #20
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093d0:	9301      	str	r3, [sp, #4]
 80093d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093da:	3301      	adds	r3, #1
 80093dc:	429a      	cmp	r2, r3
 80093de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80093e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80093e6:	d32e      	bcc.n	8009446 <quorem+0x96>
 80093e8:	f04f 0a00 	mov.w	sl, #0
 80093ec:	46c4      	mov	ip, r8
 80093ee:	46ae      	mov	lr, r5
 80093f0:	46d3      	mov	fp, sl
 80093f2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80093f6:	b298      	uxth	r0, r3
 80093f8:	fb06 a000 	mla	r0, r6, r0, sl
 80093fc:	0c02      	lsrs	r2, r0, #16
 80093fe:	0c1b      	lsrs	r3, r3, #16
 8009400:	fb06 2303 	mla	r3, r6, r3, r2
 8009404:	f8de 2000 	ldr.w	r2, [lr]
 8009408:	b280      	uxth	r0, r0
 800940a:	b292      	uxth	r2, r2
 800940c:	1a12      	subs	r2, r2, r0
 800940e:	445a      	add	r2, fp
 8009410:	f8de 0000 	ldr.w	r0, [lr]
 8009414:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009418:	b29b      	uxth	r3, r3
 800941a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800941e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009422:	b292      	uxth	r2, r2
 8009424:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009428:	45e1      	cmp	r9, ip
 800942a:	f84e 2b04 	str.w	r2, [lr], #4
 800942e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009432:	d2de      	bcs.n	80093f2 <quorem+0x42>
 8009434:	9b00      	ldr	r3, [sp, #0]
 8009436:	58eb      	ldr	r3, [r5, r3]
 8009438:	b92b      	cbnz	r3, 8009446 <quorem+0x96>
 800943a:	9b01      	ldr	r3, [sp, #4]
 800943c:	3b04      	subs	r3, #4
 800943e:	429d      	cmp	r5, r3
 8009440:	461a      	mov	r2, r3
 8009442:	d32f      	bcc.n	80094a4 <quorem+0xf4>
 8009444:	613c      	str	r4, [r7, #16]
 8009446:	4638      	mov	r0, r7
 8009448:	f001 f910 	bl	800a66c <__mcmp>
 800944c:	2800      	cmp	r0, #0
 800944e:	db25      	blt.n	800949c <quorem+0xec>
 8009450:	4629      	mov	r1, r5
 8009452:	2000      	movs	r0, #0
 8009454:	f858 2b04 	ldr.w	r2, [r8], #4
 8009458:	f8d1 c000 	ldr.w	ip, [r1]
 800945c:	fa1f fe82 	uxth.w	lr, r2
 8009460:	fa1f f38c 	uxth.w	r3, ip
 8009464:	eba3 030e 	sub.w	r3, r3, lr
 8009468:	4403      	add	r3, r0
 800946a:	0c12      	lsrs	r2, r2, #16
 800946c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009470:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009474:	b29b      	uxth	r3, r3
 8009476:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800947a:	45c1      	cmp	r9, r8
 800947c:	f841 3b04 	str.w	r3, [r1], #4
 8009480:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009484:	d2e6      	bcs.n	8009454 <quorem+0xa4>
 8009486:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800948a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800948e:	b922      	cbnz	r2, 800949a <quorem+0xea>
 8009490:	3b04      	subs	r3, #4
 8009492:	429d      	cmp	r5, r3
 8009494:	461a      	mov	r2, r3
 8009496:	d30b      	bcc.n	80094b0 <quorem+0x100>
 8009498:	613c      	str	r4, [r7, #16]
 800949a:	3601      	adds	r6, #1
 800949c:	4630      	mov	r0, r6
 800949e:	b003      	add	sp, #12
 80094a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a4:	6812      	ldr	r2, [r2, #0]
 80094a6:	3b04      	subs	r3, #4
 80094a8:	2a00      	cmp	r2, #0
 80094aa:	d1cb      	bne.n	8009444 <quorem+0x94>
 80094ac:	3c01      	subs	r4, #1
 80094ae:	e7c6      	b.n	800943e <quorem+0x8e>
 80094b0:	6812      	ldr	r2, [r2, #0]
 80094b2:	3b04      	subs	r3, #4
 80094b4:	2a00      	cmp	r2, #0
 80094b6:	d1ef      	bne.n	8009498 <quorem+0xe8>
 80094b8:	3c01      	subs	r4, #1
 80094ba:	e7ea      	b.n	8009492 <quorem+0xe2>
 80094bc:	2000      	movs	r0, #0
 80094be:	e7ee      	b.n	800949e <quorem+0xee>

080094c0 <_dtoa_r>:
 80094c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c4:	69c7      	ldr	r7, [r0, #28]
 80094c6:	b097      	sub	sp, #92	@ 0x5c
 80094c8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80094cc:	ec55 4b10 	vmov	r4, r5, d0
 80094d0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80094d2:	9107      	str	r1, [sp, #28]
 80094d4:	4681      	mov	r9, r0
 80094d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80094d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80094da:	b97f      	cbnz	r7, 80094fc <_dtoa_r+0x3c>
 80094dc:	2010      	movs	r0, #16
 80094de:	f7fe fe4b 	bl	8008178 <malloc>
 80094e2:	4602      	mov	r2, r0
 80094e4:	f8c9 001c 	str.w	r0, [r9, #28]
 80094e8:	b920      	cbnz	r0, 80094f4 <_dtoa_r+0x34>
 80094ea:	4ba9      	ldr	r3, [pc, #676]	@ (8009790 <_dtoa_r+0x2d0>)
 80094ec:	21ef      	movs	r1, #239	@ 0xef
 80094ee:	48a9      	ldr	r0, [pc, #676]	@ (8009794 <_dtoa_r+0x2d4>)
 80094f0:	f002 fd3e 	bl	800bf70 <__assert_func>
 80094f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80094f8:	6007      	str	r7, [r0, #0]
 80094fa:	60c7      	str	r7, [r0, #12]
 80094fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009500:	6819      	ldr	r1, [r3, #0]
 8009502:	b159      	cbz	r1, 800951c <_dtoa_r+0x5c>
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	604a      	str	r2, [r1, #4]
 8009508:	2301      	movs	r3, #1
 800950a:	4093      	lsls	r3, r2
 800950c:	608b      	str	r3, [r1, #8]
 800950e:	4648      	mov	r0, r9
 8009510:	f000 fe30 	bl	800a174 <_Bfree>
 8009514:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009518:	2200      	movs	r2, #0
 800951a:	601a      	str	r2, [r3, #0]
 800951c:	1e2b      	subs	r3, r5, #0
 800951e:	bfb9      	ittee	lt
 8009520:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009524:	9305      	strlt	r3, [sp, #20]
 8009526:	2300      	movge	r3, #0
 8009528:	6033      	strge	r3, [r6, #0]
 800952a:	9f05      	ldr	r7, [sp, #20]
 800952c:	4b9a      	ldr	r3, [pc, #616]	@ (8009798 <_dtoa_r+0x2d8>)
 800952e:	bfbc      	itt	lt
 8009530:	2201      	movlt	r2, #1
 8009532:	6032      	strlt	r2, [r6, #0]
 8009534:	43bb      	bics	r3, r7
 8009536:	d112      	bne.n	800955e <_dtoa_r+0x9e>
 8009538:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800953a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800953e:	6013      	str	r3, [r2, #0]
 8009540:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009544:	4323      	orrs	r3, r4
 8009546:	f000 855a 	beq.w	8009ffe <_dtoa_r+0xb3e>
 800954a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800954c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80097ac <_dtoa_r+0x2ec>
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 855c 	beq.w	800a00e <_dtoa_r+0xb4e>
 8009556:	f10a 0303 	add.w	r3, sl, #3
 800955a:	f000 bd56 	b.w	800a00a <_dtoa_r+0xb4a>
 800955e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009562:	2200      	movs	r2, #0
 8009564:	ec51 0b17 	vmov	r0, r1, d7
 8009568:	2300      	movs	r3, #0
 800956a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800956e:	f7f7 faab 	bl	8000ac8 <__aeabi_dcmpeq>
 8009572:	4680      	mov	r8, r0
 8009574:	b158      	cbz	r0, 800958e <_dtoa_r+0xce>
 8009576:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009578:	2301      	movs	r3, #1
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800957e:	b113      	cbz	r3, 8009586 <_dtoa_r+0xc6>
 8009580:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009582:	4b86      	ldr	r3, [pc, #536]	@ (800979c <_dtoa_r+0x2dc>)
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80097b0 <_dtoa_r+0x2f0>
 800958a:	f000 bd40 	b.w	800a00e <_dtoa_r+0xb4e>
 800958e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009592:	aa14      	add	r2, sp, #80	@ 0x50
 8009594:	a915      	add	r1, sp, #84	@ 0x54
 8009596:	4648      	mov	r0, r9
 8009598:	f001 f988 	bl	800a8ac <__d2b>
 800959c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80095a0:	9002      	str	r0, [sp, #8]
 80095a2:	2e00      	cmp	r6, #0
 80095a4:	d078      	beq.n	8009698 <_dtoa_r+0x1d8>
 80095a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095a8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80095ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80095b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80095b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80095bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80095c0:	4619      	mov	r1, r3
 80095c2:	2200      	movs	r2, #0
 80095c4:	4b76      	ldr	r3, [pc, #472]	@ (80097a0 <_dtoa_r+0x2e0>)
 80095c6:	f7f6 fe5f 	bl	8000288 <__aeabi_dsub>
 80095ca:	a36b      	add	r3, pc, #428	@ (adr r3, 8009778 <_dtoa_r+0x2b8>)
 80095cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d0:	f7f7 f812 	bl	80005f8 <__aeabi_dmul>
 80095d4:	a36a      	add	r3, pc, #424	@ (adr r3, 8009780 <_dtoa_r+0x2c0>)
 80095d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095da:	f7f6 fe57 	bl	800028c <__adddf3>
 80095de:	4604      	mov	r4, r0
 80095e0:	4630      	mov	r0, r6
 80095e2:	460d      	mov	r5, r1
 80095e4:	f7f6 ff9e 	bl	8000524 <__aeabi_i2d>
 80095e8:	a367      	add	r3, pc, #412	@ (adr r3, 8009788 <_dtoa_r+0x2c8>)
 80095ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ee:	f7f7 f803 	bl	80005f8 <__aeabi_dmul>
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	4620      	mov	r0, r4
 80095f8:	4629      	mov	r1, r5
 80095fa:	f7f6 fe47 	bl	800028c <__adddf3>
 80095fe:	4604      	mov	r4, r0
 8009600:	460d      	mov	r5, r1
 8009602:	f7f7 faa9 	bl	8000b58 <__aeabi_d2iz>
 8009606:	2200      	movs	r2, #0
 8009608:	4607      	mov	r7, r0
 800960a:	2300      	movs	r3, #0
 800960c:	4620      	mov	r0, r4
 800960e:	4629      	mov	r1, r5
 8009610:	f7f7 fa64 	bl	8000adc <__aeabi_dcmplt>
 8009614:	b140      	cbz	r0, 8009628 <_dtoa_r+0x168>
 8009616:	4638      	mov	r0, r7
 8009618:	f7f6 ff84 	bl	8000524 <__aeabi_i2d>
 800961c:	4622      	mov	r2, r4
 800961e:	462b      	mov	r3, r5
 8009620:	f7f7 fa52 	bl	8000ac8 <__aeabi_dcmpeq>
 8009624:	b900      	cbnz	r0, 8009628 <_dtoa_r+0x168>
 8009626:	3f01      	subs	r7, #1
 8009628:	2f16      	cmp	r7, #22
 800962a:	d852      	bhi.n	80096d2 <_dtoa_r+0x212>
 800962c:	4b5d      	ldr	r3, [pc, #372]	@ (80097a4 <_dtoa_r+0x2e4>)
 800962e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009636:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800963a:	f7f7 fa4f 	bl	8000adc <__aeabi_dcmplt>
 800963e:	2800      	cmp	r0, #0
 8009640:	d049      	beq.n	80096d6 <_dtoa_r+0x216>
 8009642:	3f01      	subs	r7, #1
 8009644:	2300      	movs	r3, #0
 8009646:	9310      	str	r3, [sp, #64]	@ 0x40
 8009648:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800964a:	1b9b      	subs	r3, r3, r6
 800964c:	1e5a      	subs	r2, r3, #1
 800964e:	bf45      	ittet	mi
 8009650:	f1c3 0301 	rsbmi	r3, r3, #1
 8009654:	9300      	strmi	r3, [sp, #0]
 8009656:	2300      	movpl	r3, #0
 8009658:	2300      	movmi	r3, #0
 800965a:	9206      	str	r2, [sp, #24]
 800965c:	bf54      	ite	pl
 800965e:	9300      	strpl	r3, [sp, #0]
 8009660:	9306      	strmi	r3, [sp, #24]
 8009662:	2f00      	cmp	r7, #0
 8009664:	db39      	blt.n	80096da <_dtoa_r+0x21a>
 8009666:	9b06      	ldr	r3, [sp, #24]
 8009668:	970d      	str	r7, [sp, #52]	@ 0x34
 800966a:	443b      	add	r3, r7
 800966c:	9306      	str	r3, [sp, #24]
 800966e:	2300      	movs	r3, #0
 8009670:	9308      	str	r3, [sp, #32]
 8009672:	9b07      	ldr	r3, [sp, #28]
 8009674:	2b09      	cmp	r3, #9
 8009676:	d863      	bhi.n	8009740 <_dtoa_r+0x280>
 8009678:	2b05      	cmp	r3, #5
 800967a:	bfc4      	itt	gt
 800967c:	3b04      	subgt	r3, #4
 800967e:	9307      	strgt	r3, [sp, #28]
 8009680:	9b07      	ldr	r3, [sp, #28]
 8009682:	f1a3 0302 	sub.w	r3, r3, #2
 8009686:	bfcc      	ite	gt
 8009688:	2400      	movgt	r4, #0
 800968a:	2401      	movle	r4, #1
 800968c:	2b03      	cmp	r3, #3
 800968e:	d863      	bhi.n	8009758 <_dtoa_r+0x298>
 8009690:	e8df f003 	tbb	[pc, r3]
 8009694:	2b375452 	.word	0x2b375452
 8009698:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800969c:	441e      	add	r6, r3
 800969e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80096a2:	2b20      	cmp	r3, #32
 80096a4:	bfc1      	itttt	gt
 80096a6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80096aa:	409f      	lslgt	r7, r3
 80096ac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80096b0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80096b4:	bfd6      	itet	le
 80096b6:	f1c3 0320 	rsble	r3, r3, #32
 80096ba:	ea47 0003 	orrgt.w	r0, r7, r3
 80096be:	fa04 f003 	lslle.w	r0, r4, r3
 80096c2:	f7f6 ff1f 	bl	8000504 <__aeabi_ui2d>
 80096c6:	2201      	movs	r2, #1
 80096c8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80096cc:	3e01      	subs	r6, #1
 80096ce:	9212      	str	r2, [sp, #72]	@ 0x48
 80096d0:	e776      	b.n	80095c0 <_dtoa_r+0x100>
 80096d2:	2301      	movs	r3, #1
 80096d4:	e7b7      	b.n	8009646 <_dtoa_r+0x186>
 80096d6:	9010      	str	r0, [sp, #64]	@ 0x40
 80096d8:	e7b6      	b.n	8009648 <_dtoa_r+0x188>
 80096da:	9b00      	ldr	r3, [sp, #0]
 80096dc:	1bdb      	subs	r3, r3, r7
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	427b      	negs	r3, r7
 80096e2:	9308      	str	r3, [sp, #32]
 80096e4:	2300      	movs	r3, #0
 80096e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80096e8:	e7c3      	b.n	8009672 <_dtoa_r+0x1b2>
 80096ea:	2301      	movs	r3, #1
 80096ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096f0:	eb07 0b03 	add.w	fp, r7, r3
 80096f4:	f10b 0301 	add.w	r3, fp, #1
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	9303      	str	r3, [sp, #12]
 80096fc:	bfb8      	it	lt
 80096fe:	2301      	movlt	r3, #1
 8009700:	e006      	b.n	8009710 <_dtoa_r+0x250>
 8009702:	2301      	movs	r3, #1
 8009704:	9309      	str	r3, [sp, #36]	@ 0x24
 8009706:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009708:	2b00      	cmp	r3, #0
 800970a:	dd28      	ble.n	800975e <_dtoa_r+0x29e>
 800970c:	469b      	mov	fp, r3
 800970e:	9303      	str	r3, [sp, #12]
 8009710:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009714:	2100      	movs	r1, #0
 8009716:	2204      	movs	r2, #4
 8009718:	f102 0514 	add.w	r5, r2, #20
 800971c:	429d      	cmp	r5, r3
 800971e:	d926      	bls.n	800976e <_dtoa_r+0x2ae>
 8009720:	6041      	str	r1, [r0, #4]
 8009722:	4648      	mov	r0, r9
 8009724:	f000 fce6 	bl	800a0f4 <_Balloc>
 8009728:	4682      	mov	sl, r0
 800972a:	2800      	cmp	r0, #0
 800972c:	d142      	bne.n	80097b4 <_dtoa_r+0x2f4>
 800972e:	4b1e      	ldr	r3, [pc, #120]	@ (80097a8 <_dtoa_r+0x2e8>)
 8009730:	4602      	mov	r2, r0
 8009732:	f240 11af 	movw	r1, #431	@ 0x1af
 8009736:	e6da      	b.n	80094ee <_dtoa_r+0x2e>
 8009738:	2300      	movs	r3, #0
 800973a:	e7e3      	b.n	8009704 <_dtoa_r+0x244>
 800973c:	2300      	movs	r3, #0
 800973e:	e7d5      	b.n	80096ec <_dtoa_r+0x22c>
 8009740:	2401      	movs	r4, #1
 8009742:	2300      	movs	r3, #0
 8009744:	9307      	str	r3, [sp, #28]
 8009746:	9409      	str	r4, [sp, #36]	@ 0x24
 8009748:	f04f 3bff 	mov.w	fp, #4294967295
 800974c:	2200      	movs	r2, #0
 800974e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009752:	2312      	movs	r3, #18
 8009754:	920c      	str	r2, [sp, #48]	@ 0x30
 8009756:	e7db      	b.n	8009710 <_dtoa_r+0x250>
 8009758:	2301      	movs	r3, #1
 800975a:	9309      	str	r3, [sp, #36]	@ 0x24
 800975c:	e7f4      	b.n	8009748 <_dtoa_r+0x288>
 800975e:	f04f 0b01 	mov.w	fp, #1
 8009762:	f8cd b00c 	str.w	fp, [sp, #12]
 8009766:	465b      	mov	r3, fp
 8009768:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800976c:	e7d0      	b.n	8009710 <_dtoa_r+0x250>
 800976e:	3101      	adds	r1, #1
 8009770:	0052      	lsls	r2, r2, #1
 8009772:	e7d1      	b.n	8009718 <_dtoa_r+0x258>
 8009774:	f3af 8000 	nop.w
 8009778:	636f4361 	.word	0x636f4361
 800977c:	3fd287a7 	.word	0x3fd287a7
 8009780:	8b60c8b3 	.word	0x8b60c8b3
 8009784:	3fc68a28 	.word	0x3fc68a28
 8009788:	509f79fb 	.word	0x509f79fb
 800978c:	3fd34413 	.word	0x3fd34413
 8009790:	0803c50e 	.word	0x0803c50e
 8009794:	0803c525 	.word	0x0803c525
 8009798:	7ff00000 	.word	0x7ff00000
 800979c:	0803c4d9 	.word	0x0803c4d9
 80097a0:	3ff80000 	.word	0x3ff80000
 80097a4:	0803c6d8 	.word	0x0803c6d8
 80097a8:	0803c57d 	.word	0x0803c57d
 80097ac:	0803c50a 	.word	0x0803c50a
 80097b0:	0803c4d8 	.word	0x0803c4d8
 80097b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80097b8:	6018      	str	r0, [r3, #0]
 80097ba:	9b03      	ldr	r3, [sp, #12]
 80097bc:	2b0e      	cmp	r3, #14
 80097be:	f200 80a1 	bhi.w	8009904 <_dtoa_r+0x444>
 80097c2:	2c00      	cmp	r4, #0
 80097c4:	f000 809e 	beq.w	8009904 <_dtoa_r+0x444>
 80097c8:	2f00      	cmp	r7, #0
 80097ca:	dd33      	ble.n	8009834 <_dtoa_r+0x374>
 80097cc:	4b9c      	ldr	r3, [pc, #624]	@ (8009a40 <_dtoa_r+0x580>)
 80097ce:	f007 020f 	and.w	r2, r7, #15
 80097d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097d6:	ed93 7b00 	vldr	d7, [r3]
 80097da:	05f8      	lsls	r0, r7, #23
 80097dc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80097e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80097e4:	d516      	bpl.n	8009814 <_dtoa_r+0x354>
 80097e6:	4b97      	ldr	r3, [pc, #604]	@ (8009a44 <_dtoa_r+0x584>)
 80097e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80097ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097f0:	f7f7 f82c 	bl	800084c <__aeabi_ddiv>
 80097f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097f8:	f004 040f 	and.w	r4, r4, #15
 80097fc:	2603      	movs	r6, #3
 80097fe:	4d91      	ldr	r5, [pc, #580]	@ (8009a44 <_dtoa_r+0x584>)
 8009800:	b954      	cbnz	r4, 8009818 <_dtoa_r+0x358>
 8009802:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009806:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800980a:	f7f7 f81f 	bl	800084c <__aeabi_ddiv>
 800980e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009812:	e028      	b.n	8009866 <_dtoa_r+0x3a6>
 8009814:	2602      	movs	r6, #2
 8009816:	e7f2      	b.n	80097fe <_dtoa_r+0x33e>
 8009818:	07e1      	lsls	r1, r4, #31
 800981a:	d508      	bpl.n	800982e <_dtoa_r+0x36e>
 800981c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009820:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009824:	f7f6 fee8 	bl	80005f8 <__aeabi_dmul>
 8009828:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800982c:	3601      	adds	r6, #1
 800982e:	1064      	asrs	r4, r4, #1
 8009830:	3508      	adds	r5, #8
 8009832:	e7e5      	b.n	8009800 <_dtoa_r+0x340>
 8009834:	f000 80af 	beq.w	8009996 <_dtoa_r+0x4d6>
 8009838:	427c      	negs	r4, r7
 800983a:	4b81      	ldr	r3, [pc, #516]	@ (8009a40 <_dtoa_r+0x580>)
 800983c:	4d81      	ldr	r5, [pc, #516]	@ (8009a44 <_dtoa_r+0x584>)
 800983e:	f004 020f 	and.w	r2, r4, #15
 8009842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800984e:	f7f6 fed3 	bl	80005f8 <__aeabi_dmul>
 8009852:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009856:	1124      	asrs	r4, r4, #4
 8009858:	2300      	movs	r3, #0
 800985a:	2602      	movs	r6, #2
 800985c:	2c00      	cmp	r4, #0
 800985e:	f040 808f 	bne.w	8009980 <_dtoa_r+0x4c0>
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1d3      	bne.n	800980e <_dtoa_r+0x34e>
 8009866:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009868:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800986c:	2b00      	cmp	r3, #0
 800986e:	f000 8094 	beq.w	800999a <_dtoa_r+0x4da>
 8009872:	4b75      	ldr	r3, [pc, #468]	@ (8009a48 <_dtoa_r+0x588>)
 8009874:	2200      	movs	r2, #0
 8009876:	4620      	mov	r0, r4
 8009878:	4629      	mov	r1, r5
 800987a:	f7f7 f92f 	bl	8000adc <__aeabi_dcmplt>
 800987e:	2800      	cmp	r0, #0
 8009880:	f000 808b 	beq.w	800999a <_dtoa_r+0x4da>
 8009884:	9b03      	ldr	r3, [sp, #12]
 8009886:	2b00      	cmp	r3, #0
 8009888:	f000 8087 	beq.w	800999a <_dtoa_r+0x4da>
 800988c:	f1bb 0f00 	cmp.w	fp, #0
 8009890:	dd34      	ble.n	80098fc <_dtoa_r+0x43c>
 8009892:	4620      	mov	r0, r4
 8009894:	4b6d      	ldr	r3, [pc, #436]	@ (8009a4c <_dtoa_r+0x58c>)
 8009896:	2200      	movs	r2, #0
 8009898:	4629      	mov	r1, r5
 800989a:	f7f6 fead 	bl	80005f8 <__aeabi_dmul>
 800989e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098a2:	f107 38ff 	add.w	r8, r7, #4294967295
 80098a6:	3601      	adds	r6, #1
 80098a8:	465c      	mov	r4, fp
 80098aa:	4630      	mov	r0, r6
 80098ac:	f7f6 fe3a 	bl	8000524 <__aeabi_i2d>
 80098b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098b4:	f7f6 fea0 	bl	80005f8 <__aeabi_dmul>
 80098b8:	4b65      	ldr	r3, [pc, #404]	@ (8009a50 <_dtoa_r+0x590>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	f7f6 fce6 	bl	800028c <__adddf3>
 80098c0:	4605      	mov	r5, r0
 80098c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80098c6:	2c00      	cmp	r4, #0
 80098c8:	d16a      	bne.n	80099a0 <_dtoa_r+0x4e0>
 80098ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098ce:	4b61      	ldr	r3, [pc, #388]	@ (8009a54 <_dtoa_r+0x594>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	f7f6 fcd9 	bl	8000288 <__aeabi_dsub>
 80098d6:	4602      	mov	r2, r0
 80098d8:	460b      	mov	r3, r1
 80098da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80098de:	462a      	mov	r2, r5
 80098e0:	4633      	mov	r3, r6
 80098e2:	f7f7 f919 	bl	8000b18 <__aeabi_dcmpgt>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	f040 8298 	bne.w	8009e1c <_dtoa_r+0x95c>
 80098ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098f0:	462a      	mov	r2, r5
 80098f2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80098f6:	f7f7 f8f1 	bl	8000adc <__aeabi_dcmplt>
 80098fa:	bb38      	cbnz	r0, 800994c <_dtoa_r+0x48c>
 80098fc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009900:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009904:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009906:	2b00      	cmp	r3, #0
 8009908:	f2c0 8157 	blt.w	8009bba <_dtoa_r+0x6fa>
 800990c:	2f0e      	cmp	r7, #14
 800990e:	f300 8154 	bgt.w	8009bba <_dtoa_r+0x6fa>
 8009912:	4b4b      	ldr	r3, [pc, #300]	@ (8009a40 <_dtoa_r+0x580>)
 8009914:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009918:	ed93 7b00 	vldr	d7, [r3]
 800991c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800991e:	2b00      	cmp	r3, #0
 8009920:	ed8d 7b00 	vstr	d7, [sp]
 8009924:	f280 80e5 	bge.w	8009af2 <_dtoa_r+0x632>
 8009928:	9b03      	ldr	r3, [sp, #12]
 800992a:	2b00      	cmp	r3, #0
 800992c:	f300 80e1 	bgt.w	8009af2 <_dtoa_r+0x632>
 8009930:	d10c      	bne.n	800994c <_dtoa_r+0x48c>
 8009932:	4b48      	ldr	r3, [pc, #288]	@ (8009a54 <_dtoa_r+0x594>)
 8009934:	2200      	movs	r2, #0
 8009936:	ec51 0b17 	vmov	r0, r1, d7
 800993a:	f7f6 fe5d 	bl	80005f8 <__aeabi_dmul>
 800993e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009942:	f7f7 f8df 	bl	8000b04 <__aeabi_dcmpge>
 8009946:	2800      	cmp	r0, #0
 8009948:	f000 8266 	beq.w	8009e18 <_dtoa_r+0x958>
 800994c:	2400      	movs	r4, #0
 800994e:	4625      	mov	r5, r4
 8009950:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009952:	4656      	mov	r6, sl
 8009954:	ea6f 0803 	mvn.w	r8, r3
 8009958:	2700      	movs	r7, #0
 800995a:	4621      	mov	r1, r4
 800995c:	4648      	mov	r0, r9
 800995e:	f000 fc09 	bl	800a174 <_Bfree>
 8009962:	2d00      	cmp	r5, #0
 8009964:	f000 80bd 	beq.w	8009ae2 <_dtoa_r+0x622>
 8009968:	b12f      	cbz	r7, 8009976 <_dtoa_r+0x4b6>
 800996a:	42af      	cmp	r7, r5
 800996c:	d003      	beq.n	8009976 <_dtoa_r+0x4b6>
 800996e:	4639      	mov	r1, r7
 8009970:	4648      	mov	r0, r9
 8009972:	f000 fbff 	bl	800a174 <_Bfree>
 8009976:	4629      	mov	r1, r5
 8009978:	4648      	mov	r0, r9
 800997a:	f000 fbfb 	bl	800a174 <_Bfree>
 800997e:	e0b0      	b.n	8009ae2 <_dtoa_r+0x622>
 8009980:	07e2      	lsls	r2, r4, #31
 8009982:	d505      	bpl.n	8009990 <_dtoa_r+0x4d0>
 8009984:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009988:	f7f6 fe36 	bl	80005f8 <__aeabi_dmul>
 800998c:	3601      	adds	r6, #1
 800998e:	2301      	movs	r3, #1
 8009990:	1064      	asrs	r4, r4, #1
 8009992:	3508      	adds	r5, #8
 8009994:	e762      	b.n	800985c <_dtoa_r+0x39c>
 8009996:	2602      	movs	r6, #2
 8009998:	e765      	b.n	8009866 <_dtoa_r+0x3a6>
 800999a:	9c03      	ldr	r4, [sp, #12]
 800999c:	46b8      	mov	r8, r7
 800999e:	e784      	b.n	80098aa <_dtoa_r+0x3ea>
 80099a0:	4b27      	ldr	r3, [pc, #156]	@ (8009a40 <_dtoa_r+0x580>)
 80099a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80099a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80099ac:	4454      	add	r4, sl
 80099ae:	2900      	cmp	r1, #0
 80099b0:	d054      	beq.n	8009a5c <_dtoa_r+0x59c>
 80099b2:	4929      	ldr	r1, [pc, #164]	@ (8009a58 <_dtoa_r+0x598>)
 80099b4:	2000      	movs	r0, #0
 80099b6:	f7f6 ff49 	bl	800084c <__aeabi_ddiv>
 80099ba:	4633      	mov	r3, r6
 80099bc:	462a      	mov	r2, r5
 80099be:	f7f6 fc63 	bl	8000288 <__aeabi_dsub>
 80099c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80099c6:	4656      	mov	r6, sl
 80099c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099cc:	f7f7 f8c4 	bl	8000b58 <__aeabi_d2iz>
 80099d0:	4605      	mov	r5, r0
 80099d2:	f7f6 fda7 	bl	8000524 <__aeabi_i2d>
 80099d6:	4602      	mov	r2, r0
 80099d8:	460b      	mov	r3, r1
 80099da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099de:	f7f6 fc53 	bl	8000288 <__aeabi_dsub>
 80099e2:	3530      	adds	r5, #48	@ 0x30
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80099ec:	f806 5b01 	strb.w	r5, [r6], #1
 80099f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80099f4:	f7f7 f872 	bl	8000adc <__aeabi_dcmplt>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d172      	bne.n	8009ae2 <_dtoa_r+0x622>
 80099fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a00:	4911      	ldr	r1, [pc, #68]	@ (8009a48 <_dtoa_r+0x588>)
 8009a02:	2000      	movs	r0, #0
 8009a04:	f7f6 fc40 	bl	8000288 <__aeabi_dsub>
 8009a08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a0c:	f7f7 f866 	bl	8000adc <__aeabi_dcmplt>
 8009a10:	2800      	cmp	r0, #0
 8009a12:	f040 80b4 	bne.w	8009b7e <_dtoa_r+0x6be>
 8009a16:	42a6      	cmp	r6, r4
 8009a18:	f43f af70 	beq.w	80098fc <_dtoa_r+0x43c>
 8009a1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009a20:	4b0a      	ldr	r3, [pc, #40]	@ (8009a4c <_dtoa_r+0x58c>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	f7f6 fde8 	bl	80005f8 <__aeabi_dmul>
 8009a28:	4b08      	ldr	r3, [pc, #32]	@ (8009a4c <_dtoa_r+0x58c>)
 8009a2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009a2e:	2200      	movs	r2, #0
 8009a30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a34:	f7f6 fde0 	bl	80005f8 <__aeabi_dmul>
 8009a38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a3c:	e7c4      	b.n	80099c8 <_dtoa_r+0x508>
 8009a3e:	bf00      	nop
 8009a40:	0803c6d8 	.word	0x0803c6d8
 8009a44:	0803c6b0 	.word	0x0803c6b0
 8009a48:	3ff00000 	.word	0x3ff00000
 8009a4c:	40240000 	.word	0x40240000
 8009a50:	401c0000 	.word	0x401c0000
 8009a54:	40140000 	.word	0x40140000
 8009a58:	3fe00000 	.word	0x3fe00000
 8009a5c:	4631      	mov	r1, r6
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f7f6 fdca 	bl	80005f8 <__aeabi_dmul>
 8009a64:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009a68:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009a6a:	4656      	mov	r6, sl
 8009a6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a70:	f7f7 f872 	bl	8000b58 <__aeabi_d2iz>
 8009a74:	4605      	mov	r5, r0
 8009a76:	f7f6 fd55 	bl	8000524 <__aeabi_i2d>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a82:	f7f6 fc01 	bl	8000288 <__aeabi_dsub>
 8009a86:	3530      	adds	r5, #48	@ 0x30
 8009a88:	f806 5b01 	strb.w	r5, [r6], #1
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	42a6      	cmp	r6, r4
 8009a92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a96:	f04f 0200 	mov.w	r2, #0
 8009a9a:	d124      	bne.n	8009ae6 <_dtoa_r+0x626>
 8009a9c:	4baf      	ldr	r3, [pc, #700]	@ (8009d5c <_dtoa_r+0x89c>)
 8009a9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009aa2:	f7f6 fbf3 	bl	800028c <__adddf3>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009aae:	f7f7 f833 	bl	8000b18 <__aeabi_dcmpgt>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d163      	bne.n	8009b7e <_dtoa_r+0x6be>
 8009ab6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009aba:	49a8      	ldr	r1, [pc, #672]	@ (8009d5c <_dtoa_r+0x89c>)
 8009abc:	2000      	movs	r0, #0
 8009abe:	f7f6 fbe3 	bl	8000288 <__aeabi_dsub>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009aca:	f7f7 f807 	bl	8000adc <__aeabi_dcmplt>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	f43f af14 	beq.w	80098fc <_dtoa_r+0x43c>
 8009ad4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009ad6:	1e73      	subs	r3, r6, #1
 8009ad8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ada:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ade:	2b30      	cmp	r3, #48	@ 0x30
 8009ae0:	d0f8      	beq.n	8009ad4 <_dtoa_r+0x614>
 8009ae2:	4647      	mov	r7, r8
 8009ae4:	e03b      	b.n	8009b5e <_dtoa_r+0x69e>
 8009ae6:	4b9e      	ldr	r3, [pc, #632]	@ (8009d60 <_dtoa_r+0x8a0>)
 8009ae8:	f7f6 fd86 	bl	80005f8 <__aeabi_dmul>
 8009aec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009af0:	e7bc      	b.n	8009a6c <_dtoa_r+0x5ac>
 8009af2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009af6:	4656      	mov	r6, sl
 8009af8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009afc:	4620      	mov	r0, r4
 8009afe:	4629      	mov	r1, r5
 8009b00:	f7f6 fea4 	bl	800084c <__aeabi_ddiv>
 8009b04:	f7f7 f828 	bl	8000b58 <__aeabi_d2iz>
 8009b08:	4680      	mov	r8, r0
 8009b0a:	f7f6 fd0b 	bl	8000524 <__aeabi_i2d>
 8009b0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b12:	f7f6 fd71 	bl	80005f8 <__aeabi_dmul>
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009b22:	f7f6 fbb1 	bl	8000288 <__aeabi_dsub>
 8009b26:	f806 4b01 	strb.w	r4, [r6], #1
 8009b2a:	9d03      	ldr	r5, [sp, #12]
 8009b2c:	eba6 040a 	sub.w	r4, r6, sl
 8009b30:	42a5      	cmp	r5, r4
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	d133      	bne.n	8009ba0 <_dtoa_r+0x6e0>
 8009b38:	f7f6 fba8 	bl	800028c <__adddf3>
 8009b3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b40:	4604      	mov	r4, r0
 8009b42:	460d      	mov	r5, r1
 8009b44:	f7f6 ffe8 	bl	8000b18 <__aeabi_dcmpgt>
 8009b48:	b9c0      	cbnz	r0, 8009b7c <_dtoa_r+0x6bc>
 8009b4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b4e:	4620      	mov	r0, r4
 8009b50:	4629      	mov	r1, r5
 8009b52:	f7f6 ffb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b56:	b110      	cbz	r0, 8009b5e <_dtoa_r+0x69e>
 8009b58:	f018 0f01 	tst.w	r8, #1
 8009b5c:	d10e      	bne.n	8009b7c <_dtoa_r+0x6bc>
 8009b5e:	9902      	ldr	r1, [sp, #8]
 8009b60:	4648      	mov	r0, r9
 8009b62:	f000 fb07 	bl	800a174 <_Bfree>
 8009b66:	2300      	movs	r3, #0
 8009b68:	7033      	strb	r3, [r6, #0]
 8009b6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009b6c:	3701      	adds	r7, #1
 8009b6e:	601f      	str	r7, [r3, #0]
 8009b70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f000 824b 	beq.w	800a00e <_dtoa_r+0xb4e>
 8009b78:	601e      	str	r6, [r3, #0]
 8009b7a:	e248      	b.n	800a00e <_dtoa_r+0xb4e>
 8009b7c:	46b8      	mov	r8, r7
 8009b7e:	4633      	mov	r3, r6
 8009b80:	461e      	mov	r6, r3
 8009b82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b86:	2a39      	cmp	r2, #57	@ 0x39
 8009b88:	d106      	bne.n	8009b98 <_dtoa_r+0x6d8>
 8009b8a:	459a      	cmp	sl, r3
 8009b8c:	d1f8      	bne.n	8009b80 <_dtoa_r+0x6c0>
 8009b8e:	2230      	movs	r2, #48	@ 0x30
 8009b90:	f108 0801 	add.w	r8, r8, #1
 8009b94:	f88a 2000 	strb.w	r2, [sl]
 8009b98:	781a      	ldrb	r2, [r3, #0]
 8009b9a:	3201      	adds	r2, #1
 8009b9c:	701a      	strb	r2, [r3, #0]
 8009b9e:	e7a0      	b.n	8009ae2 <_dtoa_r+0x622>
 8009ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8009d60 <_dtoa_r+0x8a0>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f7f6 fd28 	bl	80005f8 <__aeabi_dmul>
 8009ba8:	2200      	movs	r2, #0
 8009baa:	2300      	movs	r3, #0
 8009bac:	4604      	mov	r4, r0
 8009bae:	460d      	mov	r5, r1
 8009bb0:	f7f6 ff8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d09f      	beq.n	8009af8 <_dtoa_r+0x638>
 8009bb8:	e7d1      	b.n	8009b5e <_dtoa_r+0x69e>
 8009bba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bbc:	2a00      	cmp	r2, #0
 8009bbe:	f000 80ea 	beq.w	8009d96 <_dtoa_r+0x8d6>
 8009bc2:	9a07      	ldr	r2, [sp, #28]
 8009bc4:	2a01      	cmp	r2, #1
 8009bc6:	f300 80cd 	bgt.w	8009d64 <_dtoa_r+0x8a4>
 8009bca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009bcc:	2a00      	cmp	r2, #0
 8009bce:	f000 80c1 	beq.w	8009d54 <_dtoa_r+0x894>
 8009bd2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009bd6:	9c08      	ldr	r4, [sp, #32]
 8009bd8:	9e00      	ldr	r6, [sp, #0]
 8009bda:	9a00      	ldr	r2, [sp, #0]
 8009bdc:	441a      	add	r2, r3
 8009bde:	9200      	str	r2, [sp, #0]
 8009be0:	9a06      	ldr	r2, [sp, #24]
 8009be2:	2101      	movs	r1, #1
 8009be4:	441a      	add	r2, r3
 8009be6:	4648      	mov	r0, r9
 8009be8:	9206      	str	r2, [sp, #24]
 8009bea:	f000 fbc1 	bl	800a370 <__i2b>
 8009bee:	4605      	mov	r5, r0
 8009bf0:	b166      	cbz	r6, 8009c0c <_dtoa_r+0x74c>
 8009bf2:	9b06      	ldr	r3, [sp, #24]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	dd09      	ble.n	8009c0c <_dtoa_r+0x74c>
 8009bf8:	42b3      	cmp	r3, r6
 8009bfa:	9a00      	ldr	r2, [sp, #0]
 8009bfc:	bfa8      	it	ge
 8009bfe:	4633      	movge	r3, r6
 8009c00:	1ad2      	subs	r2, r2, r3
 8009c02:	9200      	str	r2, [sp, #0]
 8009c04:	9a06      	ldr	r2, [sp, #24]
 8009c06:	1af6      	subs	r6, r6, r3
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	9306      	str	r3, [sp, #24]
 8009c0c:	9b08      	ldr	r3, [sp, #32]
 8009c0e:	b30b      	cbz	r3, 8009c54 <_dtoa_r+0x794>
 8009c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f000 80c6 	beq.w	8009da4 <_dtoa_r+0x8e4>
 8009c18:	2c00      	cmp	r4, #0
 8009c1a:	f000 80c0 	beq.w	8009d9e <_dtoa_r+0x8de>
 8009c1e:	4629      	mov	r1, r5
 8009c20:	4622      	mov	r2, r4
 8009c22:	4648      	mov	r0, r9
 8009c24:	f000 fc5c 	bl	800a4e0 <__pow5mult>
 8009c28:	9a02      	ldr	r2, [sp, #8]
 8009c2a:	4601      	mov	r1, r0
 8009c2c:	4605      	mov	r5, r0
 8009c2e:	4648      	mov	r0, r9
 8009c30:	f000 fbb4 	bl	800a39c <__multiply>
 8009c34:	9902      	ldr	r1, [sp, #8]
 8009c36:	4680      	mov	r8, r0
 8009c38:	4648      	mov	r0, r9
 8009c3a:	f000 fa9b 	bl	800a174 <_Bfree>
 8009c3e:	9b08      	ldr	r3, [sp, #32]
 8009c40:	1b1b      	subs	r3, r3, r4
 8009c42:	9308      	str	r3, [sp, #32]
 8009c44:	f000 80b1 	beq.w	8009daa <_dtoa_r+0x8ea>
 8009c48:	9a08      	ldr	r2, [sp, #32]
 8009c4a:	4641      	mov	r1, r8
 8009c4c:	4648      	mov	r0, r9
 8009c4e:	f000 fc47 	bl	800a4e0 <__pow5mult>
 8009c52:	9002      	str	r0, [sp, #8]
 8009c54:	2101      	movs	r1, #1
 8009c56:	4648      	mov	r0, r9
 8009c58:	f000 fb8a 	bl	800a370 <__i2b>
 8009c5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c5e:	4604      	mov	r4, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f000 81d8 	beq.w	800a016 <_dtoa_r+0xb56>
 8009c66:	461a      	mov	r2, r3
 8009c68:	4601      	mov	r1, r0
 8009c6a:	4648      	mov	r0, r9
 8009c6c:	f000 fc38 	bl	800a4e0 <__pow5mult>
 8009c70:	9b07      	ldr	r3, [sp, #28]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	4604      	mov	r4, r0
 8009c76:	f300 809f 	bgt.w	8009db8 <_dtoa_r+0x8f8>
 8009c7a:	9b04      	ldr	r3, [sp, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f040 8097 	bne.w	8009db0 <_dtoa_r+0x8f0>
 8009c82:	9b05      	ldr	r3, [sp, #20]
 8009c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f040 8093 	bne.w	8009db4 <_dtoa_r+0x8f4>
 8009c8e:	9b05      	ldr	r3, [sp, #20]
 8009c90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c94:	0d1b      	lsrs	r3, r3, #20
 8009c96:	051b      	lsls	r3, r3, #20
 8009c98:	b133      	cbz	r3, 8009ca8 <_dtoa_r+0x7e8>
 8009c9a:	9b00      	ldr	r3, [sp, #0]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	9b06      	ldr	r3, [sp, #24]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	9306      	str	r3, [sp, #24]
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	9308      	str	r3, [sp, #32]
 8009caa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 81b8 	beq.w	800a022 <_dtoa_r+0xb62>
 8009cb2:	6923      	ldr	r3, [r4, #16]
 8009cb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009cb8:	6918      	ldr	r0, [r3, #16]
 8009cba:	f000 fb0d 	bl	800a2d8 <__hi0bits>
 8009cbe:	f1c0 0020 	rsb	r0, r0, #32
 8009cc2:	9b06      	ldr	r3, [sp, #24]
 8009cc4:	4418      	add	r0, r3
 8009cc6:	f010 001f 	ands.w	r0, r0, #31
 8009cca:	f000 8082 	beq.w	8009dd2 <_dtoa_r+0x912>
 8009cce:	f1c0 0320 	rsb	r3, r0, #32
 8009cd2:	2b04      	cmp	r3, #4
 8009cd4:	dd73      	ble.n	8009dbe <_dtoa_r+0x8fe>
 8009cd6:	9b00      	ldr	r3, [sp, #0]
 8009cd8:	f1c0 001c 	rsb	r0, r0, #28
 8009cdc:	4403      	add	r3, r0
 8009cde:	9300      	str	r3, [sp, #0]
 8009ce0:	9b06      	ldr	r3, [sp, #24]
 8009ce2:	4403      	add	r3, r0
 8009ce4:	4406      	add	r6, r0
 8009ce6:	9306      	str	r3, [sp, #24]
 8009ce8:	9b00      	ldr	r3, [sp, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	dd05      	ble.n	8009cfa <_dtoa_r+0x83a>
 8009cee:	9902      	ldr	r1, [sp, #8]
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	4648      	mov	r0, r9
 8009cf4:	f000 fc4e 	bl	800a594 <__lshift>
 8009cf8:	9002      	str	r0, [sp, #8]
 8009cfa:	9b06      	ldr	r3, [sp, #24]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	dd05      	ble.n	8009d0c <_dtoa_r+0x84c>
 8009d00:	4621      	mov	r1, r4
 8009d02:	461a      	mov	r2, r3
 8009d04:	4648      	mov	r0, r9
 8009d06:	f000 fc45 	bl	800a594 <__lshift>
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d061      	beq.n	8009dd6 <_dtoa_r+0x916>
 8009d12:	9802      	ldr	r0, [sp, #8]
 8009d14:	4621      	mov	r1, r4
 8009d16:	f000 fca9 	bl	800a66c <__mcmp>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	da5b      	bge.n	8009dd6 <_dtoa_r+0x916>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	9902      	ldr	r1, [sp, #8]
 8009d22:	220a      	movs	r2, #10
 8009d24:	4648      	mov	r0, r9
 8009d26:	f000 fa47 	bl	800a1b8 <__multadd>
 8009d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d2c:	9002      	str	r0, [sp, #8]
 8009d2e:	f107 38ff 	add.w	r8, r7, #4294967295
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f000 8177 	beq.w	800a026 <_dtoa_r+0xb66>
 8009d38:	4629      	mov	r1, r5
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	220a      	movs	r2, #10
 8009d3e:	4648      	mov	r0, r9
 8009d40:	f000 fa3a 	bl	800a1b8 <__multadd>
 8009d44:	f1bb 0f00 	cmp.w	fp, #0
 8009d48:	4605      	mov	r5, r0
 8009d4a:	dc6f      	bgt.n	8009e2c <_dtoa_r+0x96c>
 8009d4c:	9b07      	ldr	r3, [sp, #28]
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	dc49      	bgt.n	8009de6 <_dtoa_r+0x926>
 8009d52:	e06b      	b.n	8009e2c <_dtoa_r+0x96c>
 8009d54:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009d5a:	e73c      	b.n	8009bd6 <_dtoa_r+0x716>
 8009d5c:	3fe00000 	.word	0x3fe00000
 8009d60:	40240000 	.word	0x40240000
 8009d64:	9b03      	ldr	r3, [sp, #12]
 8009d66:	1e5c      	subs	r4, r3, #1
 8009d68:	9b08      	ldr	r3, [sp, #32]
 8009d6a:	42a3      	cmp	r3, r4
 8009d6c:	db09      	blt.n	8009d82 <_dtoa_r+0x8c2>
 8009d6e:	1b1c      	subs	r4, r3, r4
 8009d70:	9b03      	ldr	r3, [sp, #12]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f6bf af30 	bge.w	8009bd8 <_dtoa_r+0x718>
 8009d78:	9b00      	ldr	r3, [sp, #0]
 8009d7a:	9a03      	ldr	r2, [sp, #12]
 8009d7c:	1a9e      	subs	r6, r3, r2
 8009d7e:	2300      	movs	r3, #0
 8009d80:	e72b      	b.n	8009bda <_dtoa_r+0x71a>
 8009d82:	9b08      	ldr	r3, [sp, #32]
 8009d84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009d86:	9408      	str	r4, [sp, #32]
 8009d88:	1ae3      	subs	r3, r4, r3
 8009d8a:	441a      	add	r2, r3
 8009d8c:	9e00      	ldr	r6, [sp, #0]
 8009d8e:	9b03      	ldr	r3, [sp, #12]
 8009d90:	920d      	str	r2, [sp, #52]	@ 0x34
 8009d92:	2400      	movs	r4, #0
 8009d94:	e721      	b.n	8009bda <_dtoa_r+0x71a>
 8009d96:	9c08      	ldr	r4, [sp, #32]
 8009d98:	9e00      	ldr	r6, [sp, #0]
 8009d9a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009d9c:	e728      	b.n	8009bf0 <_dtoa_r+0x730>
 8009d9e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009da2:	e751      	b.n	8009c48 <_dtoa_r+0x788>
 8009da4:	9a08      	ldr	r2, [sp, #32]
 8009da6:	9902      	ldr	r1, [sp, #8]
 8009da8:	e750      	b.n	8009c4c <_dtoa_r+0x78c>
 8009daa:	f8cd 8008 	str.w	r8, [sp, #8]
 8009dae:	e751      	b.n	8009c54 <_dtoa_r+0x794>
 8009db0:	2300      	movs	r3, #0
 8009db2:	e779      	b.n	8009ca8 <_dtoa_r+0x7e8>
 8009db4:	9b04      	ldr	r3, [sp, #16]
 8009db6:	e777      	b.n	8009ca8 <_dtoa_r+0x7e8>
 8009db8:	2300      	movs	r3, #0
 8009dba:	9308      	str	r3, [sp, #32]
 8009dbc:	e779      	b.n	8009cb2 <_dtoa_r+0x7f2>
 8009dbe:	d093      	beq.n	8009ce8 <_dtoa_r+0x828>
 8009dc0:	9a00      	ldr	r2, [sp, #0]
 8009dc2:	331c      	adds	r3, #28
 8009dc4:	441a      	add	r2, r3
 8009dc6:	9200      	str	r2, [sp, #0]
 8009dc8:	9a06      	ldr	r2, [sp, #24]
 8009dca:	441a      	add	r2, r3
 8009dcc:	441e      	add	r6, r3
 8009dce:	9206      	str	r2, [sp, #24]
 8009dd0:	e78a      	b.n	8009ce8 <_dtoa_r+0x828>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	e7f4      	b.n	8009dc0 <_dtoa_r+0x900>
 8009dd6:	9b03      	ldr	r3, [sp, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	46b8      	mov	r8, r7
 8009ddc:	dc20      	bgt.n	8009e20 <_dtoa_r+0x960>
 8009dde:	469b      	mov	fp, r3
 8009de0:	9b07      	ldr	r3, [sp, #28]
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	dd1e      	ble.n	8009e24 <_dtoa_r+0x964>
 8009de6:	f1bb 0f00 	cmp.w	fp, #0
 8009dea:	f47f adb1 	bne.w	8009950 <_dtoa_r+0x490>
 8009dee:	4621      	mov	r1, r4
 8009df0:	465b      	mov	r3, fp
 8009df2:	2205      	movs	r2, #5
 8009df4:	4648      	mov	r0, r9
 8009df6:	f000 f9df 	bl	800a1b8 <__multadd>
 8009dfa:	4601      	mov	r1, r0
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	9802      	ldr	r0, [sp, #8]
 8009e00:	f000 fc34 	bl	800a66c <__mcmp>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	f77f ada3 	ble.w	8009950 <_dtoa_r+0x490>
 8009e0a:	4656      	mov	r6, sl
 8009e0c:	2331      	movs	r3, #49	@ 0x31
 8009e0e:	f806 3b01 	strb.w	r3, [r6], #1
 8009e12:	f108 0801 	add.w	r8, r8, #1
 8009e16:	e59f      	b.n	8009958 <_dtoa_r+0x498>
 8009e18:	9c03      	ldr	r4, [sp, #12]
 8009e1a:	46b8      	mov	r8, r7
 8009e1c:	4625      	mov	r5, r4
 8009e1e:	e7f4      	b.n	8009e0a <_dtoa_r+0x94a>
 8009e20:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f000 8101 	beq.w	800a02e <_dtoa_r+0xb6e>
 8009e2c:	2e00      	cmp	r6, #0
 8009e2e:	dd05      	ble.n	8009e3c <_dtoa_r+0x97c>
 8009e30:	4629      	mov	r1, r5
 8009e32:	4632      	mov	r2, r6
 8009e34:	4648      	mov	r0, r9
 8009e36:	f000 fbad 	bl	800a594 <__lshift>
 8009e3a:	4605      	mov	r5, r0
 8009e3c:	9b08      	ldr	r3, [sp, #32]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d05c      	beq.n	8009efc <_dtoa_r+0xa3c>
 8009e42:	6869      	ldr	r1, [r5, #4]
 8009e44:	4648      	mov	r0, r9
 8009e46:	f000 f955 	bl	800a0f4 <_Balloc>
 8009e4a:	4606      	mov	r6, r0
 8009e4c:	b928      	cbnz	r0, 8009e5a <_dtoa_r+0x99a>
 8009e4e:	4b82      	ldr	r3, [pc, #520]	@ (800a058 <_dtoa_r+0xb98>)
 8009e50:	4602      	mov	r2, r0
 8009e52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009e56:	f7ff bb4a 	b.w	80094ee <_dtoa_r+0x2e>
 8009e5a:	692a      	ldr	r2, [r5, #16]
 8009e5c:	3202      	adds	r2, #2
 8009e5e:	0092      	lsls	r2, r2, #2
 8009e60:	f105 010c 	add.w	r1, r5, #12
 8009e64:	300c      	adds	r0, #12
 8009e66:	f7ff fa8e 	bl	8009386 <memcpy>
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	4648      	mov	r0, r9
 8009e70:	f000 fb90 	bl	800a594 <__lshift>
 8009e74:	f10a 0301 	add.w	r3, sl, #1
 8009e78:	9300      	str	r3, [sp, #0]
 8009e7a:	eb0a 030b 	add.w	r3, sl, fp
 8009e7e:	9308      	str	r3, [sp, #32]
 8009e80:	9b04      	ldr	r3, [sp, #16]
 8009e82:	f003 0301 	and.w	r3, r3, #1
 8009e86:	462f      	mov	r7, r5
 8009e88:	9306      	str	r3, [sp, #24]
 8009e8a:	4605      	mov	r5, r0
 8009e8c:	9b00      	ldr	r3, [sp, #0]
 8009e8e:	9802      	ldr	r0, [sp, #8]
 8009e90:	4621      	mov	r1, r4
 8009e92:	f103 3bff 	add.w	fp, r3, #4294967295
 8009e96:	f7ff fa8b 	bl	80093b0 <quorem>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	3330      	adds	r3, #48	@ 0x30
 8009e9e:	9003      	str	r0, [sp, #12]
 8009ea0:	4639      	mov	r1, r7
 8009ea2:	9802      	ldr	r0, [sp, #8]
 8009ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ea6:	f000 fbe1 	bl	800a66c <__mcmp>
 8009eaa:	462a      	mov	r2, r5
 8009eac:	9004      	str	r0, [sp, #16]
 8009eae:	4621      	mov	r1, r4
 8009eb0:	4648      	mov	r0, r9
 8009eb2:	f000 fbf7 	bl	800a6a4 <__mdiff>
 8009eb6:	68c2      	ldr	r2, [r0, #12]
 8009eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eba:	4606      	mov	r6, r0
 8009ebc:	bb02      	cbnz	r2, 8009f00 <_dtoa_r+0xa40>
 8009ebe:	4601      	mov	r1, r0
 8009ec0:	9802      	ldr	r0, [sp, #8]
 8009ec2:	f000 fbd3 	bl	800a66c <__mcmp>
 8009ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec8:	4602      	mov	r2, r0
 8009eca:	4631      	mov	r1, r6
 8009ecc:	4648      	mov	r0, r9
 8009ece:	920c      	str	r2, [sp, #48]	@ 0x30
 8009ed0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ed2:	f000 f94f 	bl	800a174 <_Bfree>
 8009ed6:	9b07      	ldr	r3, [sp, #28]
 8009ed8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009eda:	9e00      	ldr	r6, [sp, #0]
 8009edc:	ea42 0103 	orr.w	r1, r2, r3
 8009ee0:	9b06      	ldr	r3, [sp, #24]
 8009ee2:	4319      	orrs	r1, r3
 8009ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ee6:	d10d      	bne.n	8009f04 <_dtoa_r+0xa44>
 8009ee8:	2b39      	cmp	r3, #57	@ 0x39
 8009eea:	d027      	beq.n	8009f3c <_dtoa_r+0xa7c>
 8009eec:	9a04      	ldr	r2, [sp, #16]
 8009eee:	2a00      	cmp	r2, #0
 8009ef0:	dd01      	ble.n	8009ef6 <_dtoa_r+0xa36>
 8009ef2:	9b03      	ldr	r3, [sp, #12]
 8009ef4:	3331      	adds	r3, #49	@ 0x31
 8009ef6:	f88b 3000 	strb.w	r3, [fp]
 8009efa:	e52e      	b.n	800995a <_dtoa_r+0x49a>
 8009efc:	4628      	mov	r0, r5
 8009efe:	e7b9      	b.n	8009e74 <_dtoa_r+0x9b4>
 8009f00:	2201      	movs	r2, #1
 8009f02:	e7e2      	b.n	8009eca <_dtoa_r+0xa0a>
 8009f04:	9904      	ldr	r1, [sp, #16]
 8009f06:	2900      	cmp	r1, #0
 8009f08:	db04      	blt.n	8009f14 <_dtoa_r+0xa54>
 8009f0a:	9807      	ldr	r0, [sp, #28]
 8009f0c:	4301      	orrs	r1, r0
 8009f0e:	9806      	ldr	r0, [sp, #24]
 8009f10:	4301      	orrs	r1, r0
 8009f12:	d120      	bne.n	8009f56 <_dtoa_r+0xa96>
 8009f14:	2a00      	cmp	r2, #0
 8009f16:	ddee      	ble.n	8009ef6 <_dtoa_r+0xa36>
 8009f18:	9902      	ldr	r1, [sp, #8]
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	4648      	mov	r0, r9
 8009f20:	f000 fb38 	bl	800a594 <__lshift>
 8009f24:	4621      	mov	r1, r4
 8009f26:	9002      	str	r0, [sp, #8]
 8009f28:	f000 fba0 	bl	800a66c <__mcmp>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	9b00      	ldr	r3, [sp, #0]
 8009f30:	dc02      	bgt.n	8009f38 <_dtoa_r+0xa78>
 8009f32:	d1e0      	bne.n	8009ef6 <_dtoa_r+0xa36>
 8009f34:	07da      	lsls	r2, r3, #31
 8009f36:	d5de      	bpl.n	8009ef6 <_dtoa_r+0xa36>
 8009f38:	2b39      	cmp	r3, #57	@ 0x39
 8009f3a:	d1da      	bne.n	8009ef2 <_dtoa_r+0xa32>
 8009f3c:	2339      	movs	r3, #57	@ 0x39
 8009f3e:	f88b 3000 	strb.w	r3, [fp]
 8009f42:	4633      	mov	r3, r6
 8009f44:	461e      	mov	r6, r3
 8009f46:	3b01      	subs	r3, #1
 8009f48:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009f4c:	2a39      	cmp	r2, #57	@ 0x39
 8009f4e:	d04e      	beq.n	8009fee <_dtoa_r+0xb2e>
 8009f50:	3201      	adds	r2, #1
 8009f52:	701a      	strb	r2, [r3, #0]
 8009f54:	e501      	b.n	800995a <_dtoa_r+0x49a>
 8009f56:	2a00      	cmp	r2, #0
 8009f58:	dd03      	ble.n	8009f62 <_dtoa_r+0xaa2>
 8009f5a:	2b39      	cmp	r3, #57	@ 0x39
 8009f5c:	d0ee      	beq.n	8009f3c <_dtoa_r+0xa7c>
 8009f5e:	3301      	adds	r3, #1
 8009f60:	e7c9      	b.n	8009ef6 <_dtoa_r+0xa36>
 8009f62:	9a00      	ldr	r2, [sp, #0]
 8009f64:	9908      	ldr	r1, [sp, #32]
 8009f66:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009f6a:	428a      	cmp	r2, r1
 8009f6c:	d028      	beq.n	8009fc0 <_dtoa_r+0xb00>
 8009f6e:	9902      	ldr	r1, [sp, #8]
 8009f70:	2300      	movs	r3, #0
 8009f72:	220a      	movs	r2, #10
 8009f74:	4648      	mov	r0, r9
 8009f76:	f000 f91f 	bl	800a1b8 <__multadd>
 8009f7a:	42af      	cmp	r7, r5
 8009f7c:	9002      	str	r0, [sp, #8]
 8009f7e:	f04f 0300 	mov.w	r3, #0
 8009f82:	f04f 020a 	mov.w	r2, #10
 8009f86:	4639      	mov	r1, r7
 8009f88:	4648      	mov	r0, r9
 8009f8a:	d107      	bne.n	8009f9c <_dtoa_r+0xadc>
 8009f8c:	f000 f914 	bl	800a1b8 <__multadd>
 8009f90:	4607      	mov	r7, r0
 8009f92:	4605      	mov	r5, r0
 8009f94:	9b00      	ldr	r3, [sp, #0]
 8009f96:	3301      	adds	r3, #1
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	e777      	b.n	8009e8c <_dtoa_r+0x9cc>
 8009f9c:	f000 f90c 	bl	800a1b8 <__multadd>
 8009fa0:	4629      	mov	r1, r5
 8009fa2:	4607      	mov	r7, r0
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	220a      	movs	r2, #10
 8009fa8:	4648      	mov	r0, r9
 8009faa:	f000 f905 	bl	800a1b8 <__multadd>
 8009fae:	4605      	mov	r5, r0
 8009fb0:	e7f0      	b.n	8009f94 <_dtoa_r+0xad4>
 8009fb2:	f1bb 0f00 	cmp.w	fp, #0
 8009fb6:	bfcc      	ite	gt
 8009fb8:	465e      	movgt	r6, fp
 8009fba:	2601      	movle	r6, #1
 8009fbc:	4456      	add	r6, sl
 8009fbe:	2700      	movs	r7, #0
 8009fc0:	9902      	ldr	r1, [sp, #8]
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	4648      	mov	r0, r9
 8009fc8:	f000 fae4 	bl	800a594 <__lshift>
 8009fcc:	4621      	mov	r1, r4
 8009fce:	9002      	str	r0, [sp, #8]
 8009fd0:	f000 fb4c 	bl	800a66c <__mcmp>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	dcb4      	bgt.n	8009f42 <_dtoa_r+0xa82>
 8009fd8:	d102      	bne.n	8009fe0 <_dtoa_r+0xb20>
 8009fda:	9b00      	ldr	r3, [sp, #0]
 8009fdc:	07db      	lsls	r3, r3, #31
 8009fde:	d4b0      	bmi.n	8009f42 <_dtoa_r+0xa82>
 8009fe0:	4633      	mov	r3, r6
 8009fe2:	461e      	mov	r6, r3
 8009fe4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fe8:	2a30      	cmp	r2, #48	@ 0x30
 8009fea:	d0fa      	beq.n	8009fe2 <_dtoa_r+0xb22>
 8009fec:	e4b5      	b.n	800995a <_dtoa_r+0x49a>
 8009fee:	459a      	cmp	sl, r3
 8009ff0:	d1a8      	bne.n	8009f44 <_dtoa_r+0xa84>
 8009ff2:	2331      	movs	r3, #49	@ 0x31
 8009ff4:	f108 0801 	add.w	r8, r8, #1
 8009ff8:	f88a 3000 	strb.w	r3, [sl]
 8009ffc:	e4ad      	b.n	800995a <_dtoa_r+0x49a>
 8009ffe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a000:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a05c <_dtoa_r+0xb9c>
 800a004:	b11b      	cbz	r3, 800a00e <_dtoa_r+0xb4e>
 800a006:	f10a 0308 	add.w	r3, sl, #8
 800a00a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a00c:	6013      	str	r3, [r2, #0]
 800a00e:	4650      	mov	r0, sl
 800a010:	b017      	add	sp, #92	@ 0x5c
 800a012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a016:	9b07      	ldr	r3, [sp, #28]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	f77f ae2e 	ble.w	8009c7a <_dtoa_r+0x7ba>
 800a01e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a020:	9308      	str	r3, [sp, #32]
 800a022:	2001      	movs	r0, #1
 800a024:	e64d      	b.n	8009cc2 <_dtoa_r+0x802>
 800a026:	f1bb 0f00 	cmp.w	fp, #0
 800a02a:	f77f aed9 	ble.w	8009de0 <_dtoa_r+0x920>
 800a02e:	4656      	mov	r6, sl
 800a030:	9802      	ldr	r0, [sp, #8]
 800a032:	4621      	mov	r1, r4
 800a034:	f7ff f9bc 	bl	80093b0 <quorem>
 800a038:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a03c:	f806 3b01 	strb.w	r3, [r6], #1
 800a040:	eba6 020a 	sub.w	r2, r6, sl
 800a044:	4593      	cmp	fp, r2
 800a046:	ddb4      	ble.n	8009fb2 <_dtoa_r+0xaf2>
 800a048:	9902      	ldr	r1, [sp, #8]
 800a04a:	2300      	movs	r3, #0
 800a04c:	220a      	movs	r2, #10
 800a04e:	4648      	mov	r0, r9
 800a050:	f000 f8b2 	bl	800a1b8 <__multadd>
 800a054:	9002      	str	r0, [sp, #8]
 800a056:	e7eb      	b.n	800a030 <_dtoa_r+0xb70>
 800a058:	0803c57d 	.word	0x0803c57d
 800a05c:	0803c501 	.word	0x0803c501

0800a060 <_free_r>:
 800a060:	b538      	push	{r3, r4, r5, lr}
 800a062:	4605      	mov	r5, r0
 800a064:	2900      	cmp	r1, #0
 800a066:	d041      	beq.n	800a0ec <_free_r+0x8c>
 800a068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a06c:	1f0c      	subs	r4, r1, #4
 800a06e:	2b00      	cmp	r3, #0
 800a070:	bfb8      	it	lt
 800a072:	18e4      	addlt	r4, r4, r3
 800a074:	f7fe f92a 	bl	80082cc <__malloc_lock>
 800a078:	4a1d      	ldr	r2, [pc, #116]	@ (800a0f0 <_free_r+0x90>)
 800a07a:	6813      	ldr	r3, [r2, #0]
 800a07c:	b933      	cbnz	r3, 800a08c <_free_r+0x2c>
 800a07e:	6063      	str	r3, [r4, #4]
 800a080:	6014      	str	r4, [r2, #0]
 800a082:	4628      	mov	r0, r5
 800a084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a088:	f7fe b926 	b.w	80082d8 <__malloc_unlock>
 800a08c:	42a3      	cmp	r3, r4
 800a08e:	d908      	bls.n	800a0a2 <_free_r+0x42>
 800a090:	6820      	ldr	r0, [r4, #0]
 800a092:	1821      	adds	r1, r4, r0
 800a094:	428b      	cmp	r3, r1
 800a096:	bf01      	itttt	eq
 800a098:	6819      	ldreq	r1, [r3, #0]
 800a09a:	685b      	ldreq	r3, [r3, #4]
 800a09c:	1809      	addeq	r1, r1, r0
 800a09e:	6021      	streq	r1, [r4, #0]
 800a0a0:	e7ed      	b.n	800a07e <_free_r+0x1e>
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	b10b      	cbz	r3, 800a0ac <_free_r+0x4c>
 800a0a8:	42a3      	cmp	r3, r4
 800a0aa:	d9fa      	bls.n	800a0a2 <_free_r+0x42>
 800a0ac:	6811      	ldr	r1, [r2, #0]
 800a0ae:	1850      	adds	r0, r2, r1
 800a0b0:	42a0      	cmp	r0, r4
 800a0b2:	d10b      	bne.n	800a0cc <_free_r+0x6c>
 800a0b4:	6820      	ldr	r0, [r4, #0]
 800a0b6:	4401      	add	r1, r0
 800a0b8:	1850      	adds	r0, r2, r1
 800a0ba:	4283      	cmp	r3, r0
 800a0bc:	6011      	str	r1, [r2, #0]
 800a0be:	d1e0      	bne.n	800a082 <_free_r+0x22>
 800a0c0:	6818      	ldr	r0, [r3, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	6053      	str	r3, [r2, #4]
 800a0c6:	4408      	add	r0, r1
 800a0c8:	6010      	str	r0, [r2, #0]
 800a0ca:	e7da      	b.n	800a082 <_free_r+0x22>
 800a0cc:	d902      	bls.n	800a0d4 <_free_r+0x74>
 800a0ce:	230c      	movs	r3, #12
 800a0d0:	602b      	str	r3, [r5, #0]
 800a0d2:	e7d6      	b.n	800a082 <_free_r+0x22>
 800a0d4:	6820      	ldr	r0, [r4, #0]
 800a0d6:	1821      	adds	r1, r4, r0
 800a0d8:	428b      	cmp	r3, r1
 800a0da:	bf04      	itt	eq
 800a0dc:	6819      	ldreq	r1, [r3, #0]
 800a0de:	685b      	ldreq	r3, [r3, #4]
 800a0e0:	6063      	str	r3, [r4, #4]
 800a0e2:	bf04      	itt	eq
 800a0e4:	1809      	addeq	r1, r1, r0
 800a0e6:	6021      	streq	r1, [r4, #0]
 800a0e8:	6054      	str	r4, [r2, #4]
 800a0ea:	e7ca      	b.n	800a082 <_free_r+0x22>
 800a0ec:	bd38      	pop	{r3, r4, r5, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000bcc 	.word	0x20000bcc

0800a0f4 <_Balloc>:
 800a0f4:	b570      	push	{r4, r5, r6, lr}
 800a0f6:	69c6      	ldr	r6, [r0, #28]
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	460d      	mov	r5, r1
 800a0fc:	b976      	cbnz	r6, 800a11c <_Balloc+0x28>
 800a0fe:	2010      	movs	r0, #16
 800a100:	f7fe f83a 	bl	8008178 <malloc>
 800a104:	4602      	mov	r2, r0
 800a106:	61e0      	str	r0, [r4, #28]
 800a108:	b920      	cbnz	r0, 800a114 <_Balloc+0x20>
 800a10a:	4b18      	ldr	r3, [pc, #96]	@ (800a16c <_Balloc+0x78>)
 800a10c:	4818      	ldr	r0, [pc, #96]	@ (800a170 <_Balloc+0x7c>)
 800a10e:	216b      	movs	r1, #107	@ 0x6b
 800a110:	f001 ff2e 	bl	800bf70 <__assert_func>
 800a114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a118:	6006      	str	r6, [r0, #0]
 800a11a:	60c6      	str	r6, [r0, #12]
 800a11c:	69e6      	ldr	r6, [r4, #28]
 800a11e:	68f3      	ldr	r3, [r6, #12]
 800a120:	b183      	cbz	r3, 800a144 <_Balloc+0x50>
 800a122:	69e3      	ldr	r3, [r4, #28]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a12a:	b9b8      	cbnz	r0, 800a15c <_Balloc+0x68>
 800a12c:	2101      	movs	r1, #1
 800a12e:	fa01 f605 	lsl.w	r6, r1, r5
 800a132:	1d72      	adds	r2, r6, #5
 800a134:	0092      	lsls	r2, r2, #2
 800a136:	4620      	mov	r0, r4
 800a138:	f001 ff38 	bl	800bfac <_calloc_r>
 800a13c:	b160      	cbz	r0, 800a158 <_Balloc+0x64>
 800a13e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a142:	e00e      	b.n	800a162 <_Balloc+0x6e>
 800a144:	2221      	movs	r2, #33	@ 0x21
 800a146:	2104      	movs	r1, #4
 800a148:	4620      	mov	r0, r4
 800a14a:	f001 ff2f 	bl	800bfac <_calloc_r>
 800a14e:	69e3      	ldr	r3, [r4, #28]
 800a150:	60f0      	str	r0, [r6, #12]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1e4      	bne.n	800a122 <_Balloc+0x2e>
 800a158:	2000      	movs	r0, #0
 800a15a:	bd70      	pop	{r4, r5, r6, pc}
 800a15c:	6802      	ldr	r2, [r0, #0]
 800a15e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a162:	2300      	movs	r3, #0
 800a164:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a168:	e7f7      	b.n	800a15a <_Balloc+0x66>
 800a16a:	bf00      	nop
 800a16c:	0803c50e 	.word	0x0803c50e
 800a170:	0803c58e 	.word	0x0803c58e

0800a174 <_Bfree>:
 800a174:	b570      	push	{r4, r5, r6, lr}
 800a176:	69c6      	ldr	r6, [r0, #28]
 800a178:	4605      	mov	r5, r0
 800a17a:	460c      	mov	r4, r1
 800a17c:	b976      	cbnz	r6, 800a19c <_Bfree+0x28>
 800a17e:	2010      	movs	r0, #16
 800a180:	f7fd fffa 	bl	8008178 <malloc>
 800a184:	4602      	mov	r2, r0
 800a186:	61e8      	str	r0, [r5, #28]
 800a188:	b920      	cbnz	r0, 800a194 <_Bfree+0x20>
 800a18a:	4b09      	ldr	r3, [pc, #36]	@ (800a1b0 <_Bfree+0x3c>)
 800a18c:	4809      	ldr	r0, [pc, #36]	@ (800a1b4 <_Bfree+0x40>)
 800a18e:	218f      	movs	r1, #143	@ 0x8f
 800a190:	f001 feee 	bl	800bf70 <__assert_func>
 800a194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a198:	6006      	str	r6, [r0, #0]
 800a19a:	60c6      	str	r6, [r0, #12]
 800a19c:	b13c      	cbz	r4, 800a1ae <_Bfree+0x3a>
 800a19e:	69eb      	ldr	r3, [r5, #28]
 800a1a0:	6862      	ldr	r2, [r4, #4]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1a8:	6021      	str	r1, [r4, #0]
 800a1aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	0803c50e 	.word	0x0803c50e
 800a1b4:	0803c58e 	.word	0x0803c58e

0800a1b8 <__multadd>:
 800a1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1bc:	690d      	ldr	r5, [r1, #16]
 800a1be:	4607      	mov	r7, r0
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	461e      	mov	r6, r3
 800a1c4:	f101 0c14 	add.w	ip, r1, #20
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	f8dc 3000 	ldr.w	r3, [ip]
 800a1ce:	b299      	uxth	r1, r3
 800a1d0:	fb02 6101 	mla	r1, r2, r1, r6
 800a1d4:	0c1e      	lsrs	r6, r3, #16
 800a1d6:	0c0b      	lsrs	r3, r1, #16
 800a1d8:	fb02 3306 	mla	r3, r2, r6, r3
 800a1dc:	b289      	uxth	r1, r1
 800a1de:	3001      	adds	r0, #1
 800a1e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1e4:	4285      	cmp	r5, r0
 800a1e6:	f84c 1b04 	str.w	r1, [ip], #4
 800a1ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1ee:	dcec      	bgt.n	800a1ca <__multadd+0x12>
 800a1f0:	b30e      	cbz	r6, 800a236 <__multadd+0x7e>
 800a1f2:	68a3      	ldr	r3, [r4, #8]
 800a1f4:	42ab      	cmp	r3, r5
 800a1f6:	dc19      	bgt.n	800a22c <__multadd+0x74>
 800a1f8:	6861      	ldr	r1, [r4, #4]
 800a1fa:	4638      	mov	r0, r7
 800a1fc:	3101      	adds	r1, #1
 800a1fe:	f7ff ff79 	bl	800a0f4 <_Balloc>
 800a202:	4680      	mov	r8, r0
 800a204:	b928      	cbnz	r0, 800a212 <__multadd+0x5a>
 800a206:	4602      	mov	r2, r0
 800a208:	4b0c      	ldr	r3, [pc, #48]	@ (800a23c <__multadd+0x84>)
 800a20a:	480d      	ldr	r0, [pc, #52]	@ (800a240 <__multadd+0x88>)
 800a20c:	21ba      	movs	r1, #186	@ 0xba
 800a20e:	f001 feaf 	bl	800bf70 <__assert_func>
 800a212:	6922      	ldr	r2, [r4, #16]
 800a214:	3202      	adds	r2, #2
 800a216:	f104 010c 	add.w	r1, r4, #12
 800a21a:	0092      	lsls	r2, r2, #2
 800a21c:	300c      	adds	r0, #12
 800a21e:	f7ff f8b2 	bl	8009386 <memcpy>
 800a222:	4621      	mov	r1, r4
 800a224:	4638      	mov	r0, r7
 800a226:	f7ff ffa5 	bl	800a174 <_Bfree>
 800a22a:	4644      	mov	r4, r8
 800a22c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a230:	3501      	adds	r5, #1
 800a232:	615e      	str	r6, [r3, #20]
 800a234:	6125      	str	r5, [r4, #16]
 800a236:	4620      	mov	r0, r4
 800a238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a23c:	0803c57d 	.word	0x0803c57d
 800a240:	0803c58e 	.word	0x0803c58e

0800a244 <__s2b>:
 800a244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a248:	460c      	mov	r4, r1
 800a24a:	4615      	mov	r5, r2
 800a24c:	461f      	mov	r7, r3
 800a24e:	2209      	movs	r2, #9
 800a250:	3308      	adds	r3, #8
 800a252:	4606      	mov	r6, r0
 800a254:	fb93 f3f2 	sdiv	r3, r3, r2
 800a258:	2100      	movs	r1, #0
 800a25a:	2201      	movs	r2, #1
 800a25c:	429a      	cmp	r2, r3
 800a25e:	db09      	blt.n	800a274 <__s2b+0x30>
 800a260:	4630      	mov	r0, r6
 800a262:	f7ff ff47 	bl	800a0f4 <_Balloc>
 800a266:	b940      	cbnz	r0, 800a27a <__s2b+0x36>
 800a268:	4602      	mov	r2, r0
 800a26a:	4b19      	ldr	r3, [pc, #100]	@ (800a2d0 <__s2b+0x8c>)
 800a26c:	4819      	ldr	r0, [pc, #100]	@ (800a2d4 <__s2b+0x90>)
 800a26e:	21d3      	movs	r1, #211	@ 0xd3
 800a270:	f001 fe7e 	bl	800bf70 <__assert_func>
 800a274:	0052      	lsls	r2, r2, #1
 800a276:	3101      	adds	r1, #1
 800a278:	e7f0      	b.n	800a25c <__s2b+0x18>
 800a27a:	9b08      	ldr	r3, [sp, #32]
 800a27c:	6143      	str	r3, [r0, #20]
 800a27e:	2d09      	cmp	r5, #9
 800a280:	f04f 0301 	mov.w	r3, #1
 800a284:	6103      	str	r3, [r0, #16]
 800a286:	dd16      	ble.n	800a2b6 <__s2b+0x72>
 800a288:	f104 0909 	add.w	r9, r4, #9
 800a28c:	46c8      	mov	r8, r9
 800a28e:	442c      	add	r4, r5
 800a290:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a294:	4601      	mov	r1, r0
 800a296:	3b30      	subs	r3, #48	@ 0x30
 800a298:	220a      	movs	r2, #10
 800a29a:	4630      	mov	r0, r6
 800a29c:	f7ff ff8c 	bl	800a1b8 <__multadd>
 800a2a0:	45a0      	cmp	r8, r4
 800a2a2:	d1f5      	bne.n	800a290 <__s2b+0x4c>
 800a2a4:	f1a5 0408 	sub.w	r4, r5, #8
 800a2a8:	444c      	add	r4, r9
 800a2aa:	1b2d      	subs	r5, r5, r4
 800a2ac:	1963      	adds	r3, r4, r5
 800a2ae:	42bb      	cmp	r3, r7
 800a2b0:	db04      	blt.n	800a2bc <__s2b+0x78>
 800a2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2b6:	340a      	adds	r4, #10
 800a2b8:	2509      	movs	r5, #9
 800a2ba:	e7f6      	b.n	800a2aa <__s2b+0x66>
 800a2bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a2c0:	4601      	mov	r1, r0
 800a2c2:	3b30      	subs	r3, #48	@ 0x30
 800a2c4:	220a      	movs	r2, #10
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	f7ff ff76 	bl	800a1b8 <__multadd>
 800a2cc:	e7ee      	b.n	800a2ac <__s2b+0x68>
 800a2ce:	bf00      	nop
 800a2d0:	0803c57d 	.word	0x0803c57d
 800a2d4:	0803c58e 	.word	0x0803c58e

0800a2d8 <__hi0bits>:
 800a2d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a2dc:	4603      	mov	r3, r0
 800a2de:	bf36      	itet	cc
 800a2e0:	0403      	lslcc	r3, r0, #16
 800a2e2:	2000      	movcs	r0, #0
 800a2e4:	2010      	movcc	r0, #16
 800a2e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2ea:	bf3c      	itt	cc
 800a2ec:	021b      	lslcc	r3, r3, #8
 800a2ee:	3008      	addcc	r0, #8
 800a2f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2f4:	bf3c      	itt	cc
 800a2f6:	011b      	lslcc	r3, r3, #4
 800a2f8:	3004      	addcc	r0, #4
 800a2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2fe:	bf3c      	itt	cc
 800a300:	009b      	lslcc	r3, r3, #2
 800a302:	3002      	addcc	r0, #2
 800a304:	2b00      	cmp	r3, #0
 800a306:	db05      	blt.n	800a314 <__hi0bits+0x3c>
 800a308:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a30c:	f100 0001 	add.w	r0, r0, #1
 800a310:	bf08      	it	eq
 800a312:	2020      	moveq	r0, #32
 800a314:	4770      	bx	lr

0800a316 <__lo0bits>:
 800a316:	6803      	ldr	r3, [r0, #0]
 800a318:	4602      	mov	r2, r0
 800a31a:	f013 0007 	ands.w	r0, r3, #7
 800a31e:	d00b      	beq.n	800a338 <__lo0bits+0x22>
 800a320:	07d9      	lsls	r1, r3, #31
 800a322:	d421      	bmi.n	800a368 <__lo0bits+0x52>
 800a324:	0798      	lsls	r0, r3, #30
 800a326:	bf49      	itett	mi
 800a328:	085b      	lsrmi	r3, r3, #1
 800a32a:	089b      	lsrpl	r3, r3, #2
 800a32c:	2001      	movmi	r0, #1
 800a32e:	6013      	strmi	r3, [r2, #0]
 800a330:	bf5c      	itt	pl
 800a332:	6013      	strpl	r3, [r2, #0]
 800a334:	2002      	movpl	r0, #2
 800a336:	4770      	bx	lr
 800a338:	b299      	uxth	r1, r3
 800a33a:	b909      	cbnz	r1, 800a340 <__lo0bits+0x2a>
 800a33c:	0c1b      	lsrs	r3, r3, #16
 800a33e:	2010      	movs	r0, #16
 800a340:	b2d9      	uxtb	r1, r3
 800a342:	b909      	cbnz	r1, 800a348 <__lo0bits+0x32>
 800a344:	3008      	adds	r0, #8
 800a346:	0a1b      	lsrs	r3, r3, #8
 800a348:	0719      	lsls	r1, r3, #28
 800a34a:	bf04      	itt	eq
 800a34c:	091b      	lsreq	r3, r3, #4
 800a34e:	3004      	addeq	r0, #4
 800a350:	0799      	lsls	r1, r3, #30
 800a352:	bf04      	itt	eq
 800a354:	089b      	lsreq	r3, r3, #2
 800a356:	3002      	addeq	r0, #2
 800a358:	07d9      	lsls	r1, r3, #31
 800a35a:	d403      	bmi.n	800a364 <__lo0bits+0x4e>
 800a35c:	085b      	lsrs	r3, r3, #1
 800a35e:	f100 0001 	add.w	r0, r0, #1
 800a362:	d003      	beq.n	800a36c <__lo0bits+0x56>
 800a364:	6013      	str	r3, [r2, #0]
 800a366:	4770      	bx	lr
 800a368:	2000      	movs	r0, #0
 800a36a:	4770      	bx	lr
 800a36c:	2020      	movs	r0, #32
 800a36e:	4770      	bx	lr

0800a370 <__i2b>:
 800a370:	b510      	push	{r4, lr}
 800a372:	460c      	mov	r4, r1
 800a374:	2101      	movs	r1, #1
 800a376:	f7ff febd 	bl	800a0f4 <_Balloc>
 800a37a:	4602      	mov	r2, r0
 800a37c:	b928      	cbnz	r0, 800a38a <__i2b+0x1a>
 800a37e:	4b05      	ldr	r3, [pc, #20]	@ (800a394 <__i2b+0x24>)
 800a380:	4805      	ldr	r0, [pc, #20]	@ (800a398 <__i2b+0x28>)
 800a382:	f240 1145 	movw	r1, #325	@ 0x145
 800a386:	f001 fdf3 	bl	800bf70 <__assert_func>
 800a38a:	2301      	movs	r3, #1
 800a38c:	6144      	str	r4, [r0, #20]
 800a38e:	6103      	str	r3, [r0, #16]
 800a390:	bd10      	pop	{r4, pc}
 800a392:	bf00      	nop
 800a394:	0803c57d 	.word	0x0803c57d
 800a398:	0803c58e 	.word	0x0803c58e

0800a39c <__multiply>:
 800a39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a0:	4617      	mov	r7, r2
 800a3a2:	690a      	ldr	r2, [r1, #16]
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	bfa8      	it	ge
 800a3aa:	463b      	movge	r3, r7
 800a3ac:	4689      	mov	r9, r1
 800a3ae:	bfa4      	itt	ge
 800a3b0:	460f      	movge	r7, r1
 800a3b2:	4699      	movge	r9, r3
 800a3b4:	693d      	ldr	r5, [r7, #16]
 800a3b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	6879      	ldr	r1, [r7, #4]
 800a3be:	eb05 060a 	add.w	r6, r5, sl
 800a3c2:	42b3      	cmp	r3, r6
 800a3c4:	b085      	sub	sp, #20
 800a3c6:	bfb8      	it	lt
 800a3c8:	3101      	addlt	r1, #1
 800a3ca:	f7ff fe93 	bl	800a0f4 <_Balloc>
 800a3ce:	b930      	cbnz	r0, 800a3de <__multiply+0x42>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	4b41      	ldr	r3, [pc, #260]	@ (800a4d8 <__multiply+0x13c>)
 800a3d4:	4841      	ldr	r0, [pc, #260]	@ (800a4dc <__multiply+0x140>)
 800a3d6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a3da:	f001 fdc9 	bl	800bf70 <__assert_func>
 800a3de:	f100 0414 	add.w	r4, r0, #20
 800a3e2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a3e6:	4623      	mov	r3, r4
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	4573      	cmp	r3, lr
 800a3ec:	d320      	bcc.n	800a430 <__multiply+0x94>
 800a3ee:	f107 0814 	add.w	r8, r7, #20
 800a3f2:	f109 0114 	add.w	r1, r9, #20
 800a3f6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a3fa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a3fe:	9302      	str	r3, [sp, #8]
 800a400:	1beb      	subs	r3, r5, r7
 800a402:	3b15      	subs	r3, #21
 800a404:	f023 0303 	bic.w	r3, r3, #3
 800a408:	3304      	adds	r3, #4
 800a40a:	3715      	adds	r7, #21
 800a40c:	42bd      	cmp	r5, r7
 800a40e:	bf38      	it	cc
 800a410:	2304      	movcc	r3, #4
 800a412:	9301      	str	r3, [sp, #4]
 800a414:	9b02      	ldr	r3, [sp, #8]
 800a416:	9103      	str	r1, [sp, #12]
 800a418:	428b      	cmp	r3, r1
 800a41a:	d80c      	bhi.n	800a436 <__multiply+0x9a>
 800a41c:	2e00      	cmp	r6, #0
 800a41e:	dd03      	ble.n	800a428 <__multiply+0x8c>
 800a420:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a424:	2b00      	cmp	r3, #0
 800a426:	d055      	beq.n	800a4d4 <__multiply+0x138>
 800a428:	6106      	str	r6, [r0, #16]
 800a42a:	b005      	add	sp, #20
 800a42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a430:	f843 2b04 	str.w	r2, [r3], #4
 800a434:	e7d9      	b.n	800a3ea <__multiply+0x4e>
 800a436:	f8b1 a000 	ldrh.w	sl, [r1]
 800a43a:	f1ba 0f00 	cmp.w	sl, #0
 800a43e:	d01f      	beq.n	800a480 <__multiply+0xe4>
 800a440:	46c4      	mov	ip, r8
 800a442:	46a1      	mov	r9, r4
 800a444:	2700      	movs	r7, #0
 800a446:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a44a:	f8d9 3000 	ldr.w	r3, [r9]
 800a44e:	fa1f fb82 	uxth.w	fp, r2
 800a452:	b29b      	uxth	r3, r3
 800a454:	fb0a 330b 	mla	r3, sl, fp, r3
 800a458:	443b      	add	r3, r7
 800a45a:	f8d9 7000 	ldr.w	r7, [r9]
 800a45e:	0c12      	lsrs	r2, r2, #16
 800a460:	0c3f      	lsrs	r7, r7, #16
 800a462:	fb0a 7202 	mla	r2, sl, r2, r7
 800a466:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a470:	4565      	cmp	r5, ip
 800a472:	f849 3b04 	str.w	r3, [r9], #4
 800a476:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a47a:	d8e4      	bhi.n	800a446 <__multiply+0xaa>
 800a47c:	9b01      	ldr	r3, [sp, #4]
 800a47e:	50e7      	str	r7, [r4, r3]
 800a480:	9b03      	ldr	r3, [sp, #12]
 800a482:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a486:	3104      	adds	r1, #4
 800a488:	f1b9 0f00 	cmp.w	r9, #0
 800a48c:	d020      	beq.n	800a4d0 <__multiply+0x134>
 800a48e:	6823      	ldr	r3, [r4, #0]
 800a490:	4647      	mov	r7, r8
 800a492:	46a4      	mov	ip, r4
 800a494:	f04f 0a00 	mov.w	sl, #0
 800a498:	f8b7 b000 	ldrh.w	fp, [r7]
 800a49c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a4a0:	fb09 220b 	mla	r2, r9, fp, r2
 800a4a4:	4452      	add	r2, sl
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4ac:	f84c 3b04 	str.w	r3, [ip], #4
 800a4b0:	f857 3b04 	ldr.w	r3, [r7], #4
 800a4b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4b8:	f8bc 3000 	ldrh.w	r3, [ip]
 800a4bc:	fb09 330a 	mla	r3, r9, sl, r3
 800a4c0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a4c4:	42bd      	cmp	r5, r7
 800a4c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4ca:	d8e5      	bhi.n	800a498 <__multiply+0xfc>
 800a4cc:	9a01      	ldr	r2, [sp, #4]
 800a4ce:	50a3      	str	r3, [r4, r2]
 800a4d0:	3404      	adds	r4, #4
 800a4d2:	e79f      	b.n	800a414 <__multiply+0x78>
 800a4d4:	3e01      	subs	r6, #1
 800a4d6:	e7a1      	b.n	800a41c <__multiply+0x80>
 800a4d8:	0803c57d 	.word	0x0803c57d
 800a4dc:	0803c58e 	.word	0x0803c58e

0800a4e0 <__pow5mult>:
 800a4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4e4:	4615      	mov	r5, r2
 800a4e6:	f012 0203 	ands.w	r2, r2, #3
 800a4ea:	4607      	mov	r7, r0
 800a4ec:	460e      	mov	r6, r1
 800a4ee:	d007      	beq.n	800a500 <__pow5mult+0x20>
 800a4f0:	4c25      	ldr	r4, [pc, #148]	@ (800a588 <__pow5mult+0xa8>)
 800a4f2:	3a01      	subs	r2, #1
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4fa:	f7ff fe5d 	bl	800a1b8 <__multadd>
 800a4fe:	4606      	mov	r6, r0
 800a500:	10ad      	asrs	r5, r5, #2
 800a502:	d03d      	beq.n	800a580 <__pow5mult+0xa0>
 800a504:	69fc      	ldr	r4, [r7, #28]
 800a506:	b97c      	cbnz	r4, 800a528 <__pow5mult+0x48>
 800a508:	2010      	movs	r0, #16
 800a50a:	f7fd fe35 	bl	8008178 <malloc>
 800a50e:	4602      	mov	r2, r0
 800a510:	61f8      	str	r0, [r7, #28]
 800a512:	b928      	cbnz	r0, 800a520 <__pow5mult+0x40>
 800a514:	4b1d      	ldr	r3, [pc, #116]	@ (800a58c <__pow5mult+0xac>)
 800a516:	481e      	ldr	r0, [pc, #120]	@ (800a590 <__pow5mult+0xb0>)
 800a518:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a51c:	f001 fd28 	bl	800bf70 <__assert_func>
 800a520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a524:	6004      	str	r4, [r0, #0]
 800a526:	60c4      	str	r4, [r0, #12]
 800a528:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a52c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a530:	b94c      	cbnz	r4, 800a546 <__pow5mult+0x66>
 800a532:	f240 2171 	movw	r1, #625	@ 0x271
 800a536:	4638      	mov	r0, r7
 800a538:	f7ff ff1a 	bl	800a370 <__i2b>
 800a53c:	2300      	movs	r3, #0
 800a53e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a542:	4604      	mov	r4, r0
 800a544:	6003      	str	r3, [r0, #0]
 800a546:	f04f 0900 	mov.w	r9, #0
 800a54a:	07eb      	lsls	r3, r5, #31
 800a54c:	d50a      	bpl.n	800a564 <__pow5mult+0x84>
 800a54e:	4631      	mov	r1, r6
 800a550:	4622      	mov	r2, r4
 800a552:	4638      	mov	r0, r7
 800a554:	f7ff ff22 	bl	800a39c <__multiply>
 800a558:	4631      	mov	r1, r6
 800a55a:	4680      	mov	r8, r0
 800a55c:	4638      	mov	r0, r7
 800a55e:	f7ff fe09 	bl	800a174 <_Bfree>
 800a562:	4646      	mov	r6, r8
 800a564:	106d      	asrs	r5, r5, #1
 800a566:	d00b      	beq.n	800a580 <__pow5mult+0xa0>
 800a568:	6820      	ldr	r0, [r4, #0]
 800a56a:	b938      	cbnz	r0, 800a57c <__pow5mult+0x9c>
 800a56c:	4622      	mov	r2, r4
 800a56e:	4621      	mov	r1, r4
 800a570:	4638      	mov	r0, r7
 800a572:	f7ff ff13 	bl	800a39c <__multiply>
 800a576:	6020      	str	r0, [r4, #0]
 800a578:	f8c0 9000 	str.w	r9, [r0]
 800a57c:	4604      	mov	r4, r0
 800a57e:	e7e4      	b.n	800a54a <__pow5mult+0x6a>
 800a580:	4630      	mov	r0, r6
 800a582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a586:	bf00      	nop
 800a588:	0803c6a0 	.word	0x0803c6a0
 800a58c:	0803c50e 	.word	0x0803c50e
 800a590:	0803c58e 	.word	0x0803c58e

0800a594 <__lshift>:
 800a594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a598:	460c      	mov	r4, r1
 800a59a:	6849      	ldr	r1, [r1, #4]
 800a59c:	6923      	ldr	r3, [r4, #16]
 800a59e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5a2:	68a3      	ldr	r3, [r4, #8]
 800a5a4:	4607      	mov	r7, r0
 800a5a6:	4691      	mov	r9, r2
 800a5a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5ac:	f108 0601 	add.w	r6, r8, #1
 800a5b0:	42b3      	cmp	r3, r6
 800a5b2:	db0b      	blt.n	800a5cc <__lshift+0x38>
 800a5b4:	4638      	mov	r0, r7
 800a5b6:	f7ff fd9d 	bl	800a0f4 <_Balloc>
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	b948      	cbnz	r0, 800a5d2 <__lshift+0x3e>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	4b28      	ldr	r3, [pc, #160]	@ (800a664 <__lshift+0xd0>)
 800a5c2:	4829      	ldr	r0, [pc, #164]	@ (800a668 <__lshift+0xd4>)
 800a5c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a5c8:	f001 fcd2 	bl	800bf70 <__assert_func>
 800a5cc:	3101      	adds	r1, #1
 800a5ce:	005b      	lsls	r3, r3, #1
 800a5d0:	e7ee      	b.n	800a5b0 <__lshift+0x1c>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	f100 0114 	add.w	r1, r0, #20
 800a5d8:	f100 0210 	add.w	r2, r0, #16
 800a5dc:	4618      	mov	r0, r3
 800a5de:	4553      	cmp	r3, sl
 800a5e0:	db33      	blt.n	800a64a <__lshift+0xb6>
 800a5e2:	6920      	ldr	r0, [r4, #16]
 800a5e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5e8:	f104 0314 	add.w	r3, r4, #20
 800a5ec:	f019 091f 	ands.w	r9, r9, #31
 800a5f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5f8:	d02b      	beq.n	800a652 <__lshift+0xbe>
 800a5fa:	f1c9 0e20 	rsb	lr, r9, #32
 800a5fe:	468a      	mov	sl, r1
 800a600:	2200      	movs	r2, #0
 800a602:	6818      	ldr	r0, [r3, #0]
 800a604:	fa00 f009 	lsl.w	r0, r0, r9
 800a608:	4310      	orrs	r0, r2
 800a60a:	f84a 0b04 	str.w	r0, [sl], #4
 800a60e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a612:	459c      	cmp	ip, r3
 800a614:	fa22 f20e 	lsr.w	r2, r2, lr
 800a618:	d8f3      	bhi.n	800a602 <__lshift+0x6e>
 800a61a:	ebac 0304 	sub.w	r3, ip, r4
 800a61e:	3b15      	subs	r3, #21
 800a620:	f023 0303 	bic.w	r3, r3, #3
 800a624:	3304      	adds	r3, #4
 800a626:	f104 0015 	add.w	r0, r4, #21
 800a62a:	4560      	cmp	r0, ip
 800a62c:	bf88      	it	hi
 800a62e:	2304      	movhi	r3, #4
 800a630:	50ca      	str	r2, [r1, r3]
 800a632:	b10a      	cbz	r2, 800a638 <__lshift+0xa4>
 800a634:	f108 0602 	add.w	r6, r8, #2
 800a638:	3e01      	subs	r6, #1
 800a63a:	4638      	mov	r0, r7
 800a63c:	612e      	str	r6, [r5, #16]
 800a63e:	4621      	mov	r1, r4
 800a640:	f7ff fd98 	bl	800a174 <_Bfree>
 800a644:	4628      	mov	r0, r5
 800a646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a64a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a64e:	3301      	adds	r3, #1
 800a650:	e7c5      	b.n	800a5de <__lshift+0x4a>
 800a652:	3904      	subs	r1, #4
 800a654:	f853 2b04 	ldr.w	r2, [r3], #4
 800a658:	f841 2f04 	str.w	r2, [r1, #4]!
 800a65c:	459c      	cmp	ip, r3
 800a65e:	d8f9      	bhi.n	800a654 <__lshift+0xc0>
 800a660:	e7ea      	b.n	800a638 <__lshift+0xa4>
 800a662:	bf00      	nop
 800a664:	0803c57d 	.word	0x0803c57d
 800a668:	0803c58e 	.word	0x0803c58e

0800a66c <__mcmp>:
 800a66c:	690a      	ldr	r2, [r1, #16]
 800a66e:	4603      	mov	r3, r0
 800a670:	6900      	ldr	r0, [r0, #16]
 800a672:	1a80      	subs	r0, r0, r2
 800a674:	b530      	push	{r4, r5, lr}
 800a676:	d10e      	bne.n	800a696 <__mcmp+0x2a>
 800a678:	3314      	adds	r3, #20
 800a67a:	3114      	adds	r1, #20
 800a67c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a680:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a684:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a688:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a68c:	4295      	cmp	r5, r2
 800a68e:	d003      	beq.n	800a698 <__mcmp+0x2c>
 800a690:	d205      	bcs.n	800a69e <__mcmp+0x32>
 800a692:	f04f 30ff 	mov.w	r0, #4294967295
 800a696:	bd30      	pop	{r4, r5, pc}
 800a698:	42a3      	cmp	r3, r4
 800a69a:	d3f3      	bcc.n	800a684 <__mcmp+0x18>
 800a69c:	e7fb      	b.n	800a696 <__mcmp+0x2a>
 800a69e:	2001      	movs	r0, #1
 800a6a0:	e7f9      	b.n	800a696 <__mcmp+0x2a>
	...

0800a6a4 <__mdiff>:
 800a6a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a8:	4689      	mov	r9, r1
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	4611      	mov	r1, r2
 800a6ae:	4648      	mov	r0, r9
 800a6b0:	4614      	mov	r4, r2
 800a6b2:	f7ff ffdb 	bl	800a66c <__mcmp>
 800a6b6:	1e05      	subs	r5, r0, #0
 800a6b8:	d112      	bne.n	800a6e0 <__mdiff+0x3c>
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f7ff fd19 	bl	800a0f4 <_Balloc>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	b928      	cbnz	r0, 800a6d2 <__mdiff+0x2e>
 800a6c6:	4b3f      	ldr	r3, [pc, #252]	@ (800a7c4 <__mdiff+0x120>)
 800a6c8:	f240 2137 	movw	r1, #567	@ 0x237
 800a6cc:	483e      	ldr	r0, [pc, #248]	@ (800a7c8 <__mdiff+0x124>)
 800a6ce:	f001 fc4f 	bl	800bf70 <__assert_func>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6d8:	4610      	mov	r0, r2
 800a6da:	b003      	add	sp, #12
 800a6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e0:	bfbc      	itt	lt
 800a6e2:	464b      	movlt	r3, r9
 800a6e4:	46a1      	movlt	r9, r4
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a6ec:	bfba      	itte	lt
 800a6ee:	461c      	movlt	r4, r3
 800a6f0:	2501      	movlt	r5, #1
 800a6f2:	2500      	movge	r5, #0
 800a6f4:	f7ff fcfe 	bl	800a0f4 <_Balloc>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	b918      	cbnz	r0, 800a704 <__mdiff+0x60>
 800a6fc:	4b31      	ldr	r3, [pc, #196]	@ (800a7c4 <__mdiff+0x120>)
 800a6fe:	f240 2145 	movw	r1, #581	@ 0x245
 800a702:	e7e3      	b.n	800a6cc <__mdiff+0x28>
 800a704:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a708:	6926      	ldr	r6, [r4, #16]
 800a70a:	60c5      	str	r5, [r0, #12]
 800a70c:	f109 0310 	add.w	r3, r9, #16
 800a710:	f109 0514 	add.w	r5, r9, #20
 800a714:	f104 0e14 	add.w	lr, r4, #20
 800a718:	f100 0b14 	add.w	fp, r0, #20
 800a71c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a720:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a724:	9301      	str	r3, [sp, #4]
 800a726:	46d9      	mov	r9, fp
 800a728:	f04f 0c00 	mov.w	ip, #0
 800a72c:	9b01      	ldr	r3, [sp, #4]
 800a72e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a732:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	fa1f f38a 	uxth.w	r3, sl
 800a73c:	4619      	mov	r1, r3
 800a73e:	b283      	uxth	r3, r0
 800a740:	1acb      	subs	r3, r1, r3
 800a742:	0c00      	lsrs	r0, r0, #16
 800a744:	4463      	add	r3, ip
 800a746:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a74a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a74e:	b29b      	uxth	r3, r3
 800a750:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a754:	4576      	cmp	r6, lr
 800a756:	f849 3b04 	str.w	r3, [r9], #4
 800a75a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a75e:	d8e5      	bhi.n	800a72c <__mdiff+0x88>
 800a760:	1b33      	subs	r3, r6, r4
 800a762:	3b15      	subs	r3, #21
 800a764:	f023 0303 	bic.w	r3, r3, #3
 800a768:	3415      	adds	r4, #21
 800a76a:	3304      	adds	r3, #4
 800a76c:	42a6      	cmp	r6, r4
 800a76e:	bf38      	it	cc
 800a770:	2304      	movcc	r3, #4
 800a772:	441d      	add	r5, r3
 800a774:	445b      	add	r3, fp
 800a776:	461e      	mov	r6, r3
 800a778:	462c      	mov	r4, r5
 800a77a:	4544      	cmp	r4, r8
 800a77c:	d30e      	bcc.n	800a79c <__mdiff+0xf8>
 800a77e:	f108 0103 	add.w	r1, r8, #3
 800a782:	1b49      	subs	r1, r1, r5
 800a784:	f021 0103 	bic.w	r1, r1, #3
 800a788:	3d03      	subs	r5, #3
 800a78a:	45a8      	cmp	r8, r5
 800a78c:	bf38      	it	cc
 800a78e:	2100      	movcc	r1, #0
 800a790:	440b      	add	r3, r1
 800a792:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a796:	b191      	cbz	r1, 800a7be <__mdiff+0x11a>
 800a798:	6117      	str	r7, [r2, #16]
 800a79a:	e79d      	b.n	800a6d8 <__mdiff+0x34>
 800a79c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a7a0:	46e6      	mov	lr, ip
 800a7a2:	0c08      	lsrs	r0, r1, #16
 800a7a4:	fa1c fc81 	uxtah	ip, ip, r1
 800a7a8:	4471      	add	r1, lr
 800a7aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a7ae:	b289      	uxth	r1, r1
 800a7b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a7b4:	f846 1b04 	str.w	r1, [r6], #4
 800a7b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7bc:	e7dd      	b.n	800a77a <__mdiff+0xd6>
 800a7be:	3f01      	subs	r7, #1
 800a7c0:	e7e7      	b.n	800a792 <__mdiff+0xee>
 800a7c2:	bf00      	nop
 800a7c4:	0803c57d 	.word	0x0803c57d
 800a7c8:	0803c58e 	.word	0x0803c58e

0800a7cc <__ulp>:
 800a7cc:	b082      	sub	sp, #8
 800a7ce:	ed8d 0b00 	vstr	d0, [sp]
 800a7d2:	9a01      	ldr	r2, [sp, #4]
 800a7d4:	4b0f      	ldr	r3, [pc, #60]	@ (800a814 <__ulp+0x48>)
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	dc08      	bgt.n	800a7f2 <__ulp+0x26>
 800a7e0:	425b      	negs	r3, r3
 800a7e2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a7e6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a7ea:	da04      	bge.n	800a7f6 <__ulp+0x2a>
 800a7ec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a7f0:	4113      	asrs	r3, r2
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	e008      	b.n	800a808 <__ulp+0x3c>
 800a7f6:	f1a2 0314 	sub.w	r3, r2, #20
 800a7fa:	2b1e      	cmp	r3, #30
 800a7fc:	bfda      	itte	le
 800a7fe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a802:	40da      	lsrle	r2, r3
 800a804:	2201      	movgt	r2, #1
 800a806:	2300      	movs	r3, #0
 800a808:	4619      	mov	r1, r3
 800a80a:	4610      	mov	r0, r2
 800a80c:	ec41 0b10 	vmov	d0, r0, r1
 800a810:	b002      	add	sp, #8
 800a812:	4770      	bx	lr
 800a814:	7ff00000 	.word	0x7ff00000

0800a818 <__b2d>:
 800a818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a81c:	6906      	ldr	r6, [r0, #16]
 800a81e:	f100 0814 	add.w	r8, r0, #20
 800a822:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a826:	1f37      	subs	r7, r6, #4
 800a828:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a82c:	4610      	mov	r0, r2
 800a82e:	f7ff fd53 	bl	800a2d8 <__hi0bits>
 800a832:	f1c0 0320 	rsb	r3, r0, #32
 800a836:	280a      	cmp	r0, #10
 800a838:	600b      	str	r3, [r1, #0]
 800a83a:	491b      	ldr	r1, [pc, #108]	@ (800a8a8 <__b2d+0x90>)
 800a83c:	dc15      	bgt.n	800a86a <__b2d+0x52>
 800a83e:	f1c0 0c0b 	rsb	ip, r0, #11
 800a842:	fa22 f30c 	lsr.w	r3, r2, ip
 800a846:	45b8      	cmp	r8, r7
 800a848:	ea43 0501 	orr.w	r5, r3, r1
 800a84c:	bf34      	ite	cc
 800a84e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a852:	2300      	movcs	r3, #0
 800a854:	3015      	adds	r0, #21
 800a856:	fa02 f000 	lsl.w	r0, r2, r0
 800a85a:	fa23 f30c 	lsr.w	r3, r3, ip
 800a85e:	4303      	orrs	r3, r0
 800a860:	461c      	mov	r4, r3
 800a862:	ec45 4b10 	vmov	d0, r4, r5
 800a866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a86a:	45b8      	cmp	r8, r7
 800a86c:	bf3a      	itte	cc
 800a86e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a872:	f1a6 0708 	subcc.w	r7, r6, #8
 800a876:	2300      	movcs	r3, #0
 800a878:	380b      	subs	r0, #11
 800a87a:	d012      	beq.n	800a8a2 <__b2d+0x8a>
 800a87c:	f1c0 0120 	rsb	r1, r0, #32
 800a880:	fa23 f401 	lsr.w	r4, r3, r1
 800a884:	4082      	lsls	r2, r0
 800a886:	4322      	orrs	r2, r4
 800a888:	4547      	cmp	r7, r8
 800a88a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a88e:	bf8c      	ite	hi
 800a890:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a894:	2200      	movls	r2, #0
 800a896:	4083      	lsls	r3, r0
 800a898:	40ca      	lsrs	r2, r1
 800a89a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	e7de      	b.n	800a860 <__b2d+0x48>
 800a8a2:	ea42 0501 	orr.w	r5, r2, r1
 800a8a6:	e7db      	b.n	800a860 <__b2d+0x48>
 800a8a8:	3ff00000 	.word	0x3ff00000

0800a8ac <__d2b>:
 800a8ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8b0:	460f      	mov	r7, r1
 800a8b2:	2101      	movs	r1, #1
 800a8b4:	ec59 8b10 	vmov	r8, r9, d0
 800a8b8:	4616      	mov	r6, r2
 800a8ba:	f7ff fc1b 	bl	800a0f4 <_Balloc>
 800a8be:	4604      	mov	r4, r0
 800a8c0:	b930      	cbnz	r0, 800a8d0 <__d2b+0x24>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	4b23      	ldr	r3, [pc, #140]	@ (800a954 <__d2b+0xa8>)
 800a8c6:	4824      	ldr	r0, [pc, #144]	@ (800a958 <__d2b+0xac>)
 800a8c8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a8cc:	f001 fb50 	bl	800bf70 <__assert_func>
 800a8d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8d8:	b10d      	cbz	r5, 800a8de <__d2b+0x32>
 800a8da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8de:	9301      	str	r3, [sp, #4]
 800a8e0:	f1b8 0300 	subs.w	r3, r8, #0
 800a8e4:	d023      	beq.n	800a92e <__d2b+0x82>
 800a8e6:	4668      	mov	r0, sp
 800a8e8:	9300      	str	r3, [sp, #0]
 800a8ea:	f7ff fd14 	bl	800a316 <__lo0bits>
 800a8ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a8f2:	b1d0      	cbz	r0, 800a92a <__d2b+0x7e>
 800a8f4:	f1c0 0320 	rsb	r3, r0, #32
 800a8f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8fc:	430b      	orrs	r3, r1
 800a8fe:	40c2      	lsrs	r2, r0
 800a900:	6163      	str	r3, [r4, #20]
 800a902:	9201      	str	r2, [sp, #4]
 800a904:	9b01      	ldr	r3, [sp, #4]
 800a906:	61a3      	str	r3, [r4, #24]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	bf0c      	ite	eq
 800a90c:	2201      	moveq	r2, #1
 800a90e:	2202      	movne	r2, #2
 800a910:	6122      	str	r2, [r4, #16]
 800a912:	b1a5      	cbz	r5, 800a93e <__d2b+0x92>
 800a914:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a918:	4405      	add	r5, r0
 800a91a:	603d      	str	r5, [r7, #0]
 800a91c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a920:	6030      	str	r0, [r6, #0]
 800a922:	4620      	mov	r0, r4
 800a924:	b003      	add	sp, #12
 800a926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a92a:	6161      	str	r1, [r4, #20]
 800a92c:	e7ea      	b.n	800a904 <__d2b+0x58>
 800a92e:	a801      	add	r0, sp, #4
 800a930:	f7ff fcf1 	bl	800a316 <__lo0bits>
 800a934:	9b01      	ldr	r3, [sp, #4]
 800a936:	6163      	str	r3, [r4, #20]
 800a938:	3020      	adds	r0, #32
 800a93a:	2201      	movs	r2, #1
 800a93c:	e7e8      	b.n	800a910 <__d2b+0x64>
 800a93e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a942:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a946:	6038      	str	r0, [r7, #0]
 800a948:	6918      	ldr	r0, [r3, #16]
 800a94a:	f7ff fcc5 	bl	800a2d8 <__hi0bits>
 800a94e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a952:	e7e5      	b.n	800a920 <__d2b+0x74>
 800a954:	0803c57d 	.word	0x0803c57d
 800a958:	0803c58e 	.word	0x0803c58e

0800a95c <__ratio>:
 800a95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a960:	b085      	sub	sp, #20
 800a962:	e9cd 1000 	strd	r1, r0, [sp]
 800a966:	a902      	add	r1, sp, #8
 800a968:	f7ff ff56 	bl	800a818 <__b2d>
 800a96c:	9800      	ldr	r0, [sp, #0]
 800a96e:	a903      	add	r1, sp, #12
 800a970:	ec55 4b10 	vmov	r4, r5, d0
 800a974:	f7ff ff50 	bl	800a818 <__b2d>
 800a978:	9b01      	ldr	r3, [sp, #4]
 800a97a:	6919      	ldr	r1, [r3, #16]
 800a97c:	9b00      	ldr	r3, [sp, #0]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	1ac9      	subs	r1, r1, r3
 800a982:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a986:	1a9b      	subs	r3, r3, r2
 800a988:	ec5b ab10 	vmov	sl, fp, d0
 800a98c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a990:	2b00      	cmp	r3, #0
 800a992:	bfce      	itee	gt
 800a994:	462a      	movgt	r2, r5
 800a996:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a99a:	465a      	movle	r2, fp
 800a99c:	462f      	mov	r7, r5
 800a99e:	46d9      	mov	r9, fp
 800a9a0:	bfcc      	ite	gt
 800a9a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a9a6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a9aa:	464b      	mov	r3, r9
 800a9ac:	4652      	mov	r2, sl
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	4639      	mov	r1, r7
 800a9b2:	f7f5 ff4b 	bl	800084c <__aeabi_ddiv>
 800a9b6:	ec41 0b10 	vmov	d0, r0, r1
 800a9ba:	b005      	add	sp, #20
 800a9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9c0 <__copybits>:
 800a9c0:	3901      	subs	r1, #1
 800a9c2:	b570      	push	{r4, r5, r6, lr}
 800a9c4:	1149      	asrs	r1, r1, #5
 800a9c6:	6914      	ldr	r4, [r2, #16]
 800a9c8:	3101      	adds	r1, #1
 800a9ca:	f102 0314 	add.w	r3, r2, #20
 800a9ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a9d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9d6:	1f05      	subs	r5, r0, #4
 800a9d8:	42a3      	cmp	r3, r4
 800a9da:	d30c      	bcc.n	800a9f6 <__copybits+0x36>
 800a9dc:	1aa3      	subs	r3, r4, r2
 800a9de:	3b11      	subs	r3, #17
 800a9e0:	f023 0303 	bic.w	r3, r3, #3
 800a9e4:	3211      	adds	r2, #17
 800a9e6:	42a2      	cmp	r2, r4
 800a9e8:	bf88      	it	hi
 800a9ea:	2300      	movhi	r3, #0
 800a9ec:	4418      	add	r0, r3
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	4288      	cmp	r0, r1
 800a9f2:	d305      	bcc.n	800aa00 <__copybits+0x40>
 800a9f4:	bd70      	pop	{r4, r5, r6, pc}
 800a9f6:	f853 6b04 	ldr.w	r6, [r3], #4
 800a9fa:	f845 6f04 	str.w	r6, [r5, #4]!
 800a9fe:	e7eb      	b.n	800a9d8 <__copybits+0x18>
 800aa00:	f840 3b04 	str.w	r3, [r0], #4
 800aa04:	e7f4      	b.n	800a9f0 <__copybits+0x30>

0800aa06 <__any_on>:
 800aa06:	f100 0214 	add.w	r2, r0, #20
 800aa0a:	6900      	ldr	r0, [r0, #16]
 800aa0c:	114b      	asrs	r3, r1, #5
 800aa0e:	4298      	cmp	r0, r3
 800aa10:	b510      	push	{r4, lr}
 800aa12:	db11      	blt.n	800aa38 <__any_on+0x32>
 800aa14:	dd0a      	ble.n	800aa2c <__any_on+0x26>
 800aa16:	f011 011f 	ands.w	r1, r1, #31
 800aa1a:	d007      	beq.n	800aa2c <__any_on+0x26>
 800aa1c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aa20:	fa24 f001 	lsr.w	r0, r4, r1
 800aa24:	fa00 f101 	lsl.w	r1, r0, r1
 800aa28:	428c      	cmp	r4, r1
 800aa2a:	d10b      	bne.n	800aa44 <__any_on+0x3e>
 800aa2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d803      	bhi.n	800aa3c <__any_on+0x36>
 800aa34:	2000      	movs	r0, #0
 800aa36:	bd10      	pop	{r4, pc}
 800aa38:	4603      	mov	r3, r0
 800aa3a:	e7f7      	b.n	800aa2c <__any_on+0x26>
 800aa3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa40:	2900      	cmp	r1, #0
 800aa42:	d0f5      	beq.n	800aa30 <__any_on+0x2a>
 800aa44:	2001      	movs	r0, #1
 800aa46:	e7f6      	b.n	800aa36 <__any_on+0x30>

0800aa48 <sulp>:
 800aa48:	b570      	push	{r4, r5, r6, lr}
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	460d      	mov	r5, r1
 800aa4e:	ec45 4b10 	vmov	d0, r4, r5
 800aa52:	4616      	mov	r6, r2
 800aa54:	f7ff feba 	bl	800a7cc <__ulp>
 800aa58:	ec51 0b10 	vmov	r0, r1, d0
 800aa5c:	b17e      	cbz	r6, 800aa7e <sulp+0x36>
 800aa5e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aa62:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	dd09      	ble.n	800aa7e <sulp+0x36>
 800aa6a:	051b      	lsls	r3, r3, #20
 800aa6c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800aa70:	2400      	movs	r4, #0
 800aa72:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800aa76:	4622      	mov	r2, r4
 800aa78:	462b      	mov	r3, r5
 800aa7a:	f7f5 fdbd 	bl	80005f8 <__aeabi_dmul>
 800aa7e:	ec41 0b10 	vmov	d0, r0, r1
 800aa82:	bd70      	pop	{r4, r5, r6, pc}
 800aa84:	0000      	movs	r0, r0
	...

0800aa88 <_strtod_l>:
 800aa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8c:	b09f      	sub	sp, #124	@ 0x7c
 800aa8e:	460c      	mov	r4, r1
 800aa90:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aa92:	2200      	movs	r2, #0
 800aa94:	921a      	str	r2, [sp, #104]	@ 0x68
 800aa96:	9005      	str	r0, [sp, #20]
 800aa98:	f04f 0a00 	mov.w	sl, #0
 800aa9c:	f04f 0b00 	mov.w	fp, #0
 800aaa0:	460a      	mov	r2, r1
 800aaa2:	9219      	str	r2, [sp, #100]	@ 0x64
 800aaa4:	7811      	ldrb	r1, [r2, #0]
 800aaa6:	292b      	cmp	r1, #43	@ 0x2b
 800aaa8:	d04a      	beq.n	800ab40 <_strtod_l+0xb8>
 800aaaa:	d838      	bhi.n	800ab1e <_strtod_l+0x96>
 800aaac:	290d      	cmp	r1, #13
 800aaae:	d832      	bhi.n	800ab16 <_strtod_l+0x8e>
 800aab0:	2908      	cmp	r1, #8
 800aab2:	d832      	bhi.n	800ab1a <_strtod_l+0x92>
 800aab4:	2900      	cmp	r1, #0
 800aab6:	d03b      	beq.n	800ab30 <_strtod_l+0xa8>
 800aab8:	2200      	movs	r2, #0
 800aaba:	920e      	str	r2, [sp, #56]	@ 0x38
 800aabc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800aabe:	782a      	ldrb	r2, [r5, #0]
 800aac0:	2a30      	cmp	r2, #48	@ 0x30
 800aac2:	f040 80b2 	bne.w	800ac2a <_strtod_l+0x1a2>
 800aac6:	786a      	ldrb	r2, [r5, #1]
 800aac8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aacc:	2a58      	cmp	r2, #88	@ 0x58
 800aace:	d16e      	bne.n	800abae <_strtod_l+0x126>
 800aad0:	9302      	str	r3, [sp, #8]
 800aad2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aad4:	9301      	str	r3, [sp, #4]
 800aad6:	ab1a      	add	r3, sp, #104	@ 0x68
 800aad8:	9300      	str	r3, [sp, #0]
 800aada:	4a8f      	ldr	r2, [pc, #572]	@ (800ad18 <_strtod_l+0x290>)
 800aadc:	9805      	ldr	r0, [sp, #20]
 800aade:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aae0:	a919      	add	r1, sp, #100	@ 0x64
 800aae2:	f001 fadf 	bl	800c0a4 <__gethex>
 800aae6:	f010 060f 	ands.w	r6, r0, #15
 800aaea:	4604      	mov	r4, r0
 800aaec:	d005      	beq.n	800aafa <_strtod_l+0x72>
 800aaee:	2e06      	cmp	r6, #6
 800aaf0:	d128      	bne.n	800ab44 <_strtod_l+0xbc>
 800aaf2:	3501      	adds	r5, #1
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	9519      	str	r5, [sp, #100]	@ 0x64
 800aaf8:	930e      	str	r3, [sp, #56]	@ 0x38
 800aafa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f040 858e 	bne.w	800b61e <_strtod_l+0xb96>
 800ab02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab04:	b1cb      	cbz	r3, 800ab3a <_strtod_l+0xb2>
 800ab06:	4652      	mov	r2, sl
 800ab08:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ab0c:	ec43 2b10 	vmov	d0, r2, r3
 800ab10:	b01f      	add	sp, #124	@ 0x7c
 800ab12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab16:	2920      	cmp	r1, #32
 800ab18:	d1ce      	bne.n	800aab8 <_strtod_l+0x30>
 800ab1a:	3201      	adds	r2, #1
 800ab1c:	e7c1      	b.n	800aaa2 <_strtod_l+0x1a>
 800ab1e:	292d      	cmp	r1, #45	@ 0x2d
 800ab20:	d1ca      	bne.n	800aab8 <_strtod_l+0x30>
 800ab22:	2101      	movs	r1, #1
 800ab24:	910e      	str	r1, [sp, #56]	@ 0x38
 800ab26:	1c51      	adds	r1, r2, #1
 800ab28:	9119      	str	r1, [sp, #100]	@ 0x64
 800ab2a:	7852      	ldrb	r2, [r2, #1]
 800ab2c:	2a00      	cmp	r2, #0
 800ab2e:	d1c5      	bne.n	800aabc <_strtod_l+0x34>
 800ab30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab32:	9419      	str	r4, [sp, #100]	@ 0x64
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f040 8570 	bne.w	800b61a <_strtod_l+0xb92>
 800ab3a:	4652      	mov	r2, sl
 800ab3c:	465b      	mov	r3, fp
 800ab3e:	e7e5      	b.n	800ab0c <_strtod_l+0x84>
 800ab40:	2100      	movs	r1, #0
 800ab42:	e7ef      	b.n	800ab24 <_strtod_l+0x9c>
 800ab44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ab46:	b13a      	cbz	r2, 800ab58 <_strtod_l+0xd0>
 800ab48:	2135      	movs	r1, #53	@ 0x35
 800ab4a:	a81c      	add	r0, sp, #112	@ 0x70
 800ab4c:	f7ff ff38 	bl	800a9c0 <__copybits>
 800ab50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab52:	9805      	ldr	r0, [sp, #20]
 800ab54:	f7ff fb0e 	bl	800a174 <_Bfree>
 800ab58:	3e01      	subs	r6, #1
 800ab5a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ab5c:	2e04      	cmp	r6, #4
 800ab5e:	d806      	bhi.n	800ab6e <_strtod_l+0xe6>
 800ab60:	e8df f006 	tbb	[pc, r6]
 800ab64:	201d0314 	.word	0x201d0314
 800ab68:	14          	.byte	0x14
 800ab69:	00          	.byte	0x00
 800ab6a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ab6e:	05e1      	lsls	r1, r4, #23
 800ab70:	bf48      	it	mi
 800ab72:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ab76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab7a:	0d1b      	lsrs	r3, r3, #20
 800ab7c:	051b      	lsls	r3, r3, #20
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1bb      	bne.n	800aafa <_strtod_l+0x72>
 800ab82:	f7fe fbd3 	bl	800932c <__errno>
 800ab86:	2322      	movs	r3, #34	@ 0x22
 800ab88:	6003      	str	r3, [r0, #0]
 800ab8a:	e7b6      	b.n	800aafa <_strtod_l+0x72>
 800ab8c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ab90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ab94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ab98:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ab9c:	e7e7      	b.n	800ab6e <_strtod_l+0xe6>
 800ab9e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ad20 <_strtod_l+0x298>
 800aba2:	e7e4      	b.n	800ab6e <_strtod_l+0xe6>
 800aba4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aba8:	f04f 3aff 	mov.w	sl, #4294967295
 800abac:	e7df      	b.n	800ab6e <_strtod_l+0xe6>
 800abae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abb0:	1c5a      	adds	r2, r3, #1
 800abb2:	9219      	str	r2, [sp, #100]	@ 0x64
 800abb4:	785b      	ldrb	r3, [r3, #1]
 800abb6:	2b30      	cmp	r3, #48	@ 0x30
 800abb8:	d0f9      	beq.n	800abae <_strtod_l+0x126>
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d09d      	beq.n	800aafa <_strtod_l+0x72>
 800abbe:	2301      	movs	r3, #1
 800abc0:	2700      	movs	r7, #0
 800abc2:	9308      	str	r3, [sp, #32]
 800abc4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abc6:	930c      	str	r3, [sp, #48]	@ 0x30
 800abc8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800abca:	46b9      	mov	r9, r7
 800abcc:	220a      	movs	r2, #10
 800abce:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800abd0:	7805      	ldrb	r5, [r0, #0]
 800abd2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800abd6:	b2d9      	uxtb	r1, r3
 800abd8:	2909      	cmp	r1, #9
 800abda:	d928      	bls.n	800ac2e <_strtod_l+0x1a6>
 800abdc:	494f      	ldr	r1, [pc, #316]	@ (800ad1c <_strtod_l+0x294>)
 800abde:	2201      	movs	r2, #1
 800abe0:	f001 f9ac 	bl	800bf3c <strncmp>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	d032      	beq.n	800ac4e <_strtod_l+0x1c6>
 800abe8:	2000      	movs	r0, #0
 800abea:	462a      	mov	r2, r5
 800abec:	900a      	str	r0, [sp, #40]	@ 0x28
 800abee:	464d      	mov	r5, r9
 800abf0:	4603      	mov	r3, r0
 800abf2:	2a65      	cmp	r2, #101	@ 0x65
 800abf4:	d001      	beq.n	800abfa <_strtod_l+0x172>
 800abf6:	2a45      	cmp	r2, #69	@ 0x45
 800abf8:	d114      	bne.n	800ac24 <_strtod_l+0x19c>
 800abfa:	b91d      	cbnz	r5, 800ac04 <_strtod_l+0x17c>
 800abfc:	9a08      	ldr	r2, [sp, #32]
 800abfe:	4302      	orrs	r2, r0
 800ac00:	d096      	beq.n	800ab30 <_strtod_l+0xa8>
 800ac02:	2500      	movs	r5, #0
 800ac04:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ac06:	1c62      	adds	r2, r4, #1
 800ac08:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac0a:	7862      	ldrb	r2, [r4, #1]
 800ac0c:	2a2b      	cmp	r2, #43	@ 0x2b
 800ac0e:	d07a      	beq.n	800ad06 <_strtod_l+0x27e>
 800ac10:	2a2d      	cmp	r2, #45	@ 0x2d
 800ac12:	d07e      	beq.n	800ad12 <_strtod_l+0x28a>
 800ac14:	f04f 0c00 	mov.w	ip, #0
 800ac18:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ac1c:	2909      	cmp	r1, #9
 800ac1e:	f240 8085 	bls.w	800ad2c <_strtod_l+0x2a4>
 800ac22:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac24:	f04f 0800 	mov.w	r8, #0
 800ac28:	e0a5      	b.n	800ad76 <_strtod_l+0x2ee>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	e7c8      	b.n	800abc0 <_strtod_l+0x138>
 800ac2e:	f1b9 0f08 	cmp.w	r9, #8
 800ac32:	bfd8      	it	le
 800ac34:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ac36:	f100 0001 	add.w	r0, r0, #1
 800ac3a:	bfda      	itte	le
 800ac3c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac40:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ac42:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ac46:	f109 0901 	add.w	r9, r9, #1
 800ac4a:	9019      	str	r0, [sp, #100]	@ 0x64
 800ac4c:	e7bf      	b.n	800abce <_strtod_l+0x146>
 800ac4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac50:	1c5a      	adds	r2, r3, #1
 800ac52:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac54:	785a      	ldrb	r2, [r3, #1]
 800ac56:	f1b9 0f00 	cmp.w	r9, #0
 800ac5a:	d03b      	beq.n	800acd4 <_strtod_l+0x24c>
 800ac5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac5e:	464d      	mov	r5, r9
 800ac60:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ac64:	2b09      	cmp	r3, #9
 800ac66:	d912      	bls.n	800ac8e <_strtod_l+0x206>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e7c2      	b.n	800abf2 <_strtod_l+0x16a>
 800ac6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac6e:	1c5a      	adds	r2, r3, #1
 800ac70:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac72:	785a      	ldrb	r2, [r3, #1]
 800ac74:	3001      	adds	r0, #1
 800ac76:	2a30      	cmp	r2, #48	@ 0x30
 800ac78:	d0f8      	beq.n	800ac6c <_strtod_l+0x1e4>
 800ac7a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ac7e:	2b08      	cmp	r3, #8
 800ac80:	f200 84d2 	bhi.w	800b628 <_strtod_l+0xba0>
 800ac84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac86:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac88:	2000      	movs	r0, #0
 800ac8a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	3a30      	subs	r2, #48	@ 0x30
 800ac90:	f100 0301 	add.w	r3, r0, #1
 800ac94:	d018      	beq.n	800acc8 <_strtod_l+0x240>
 800ac96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac98:	4419      	add	r1, r3
 800ac9a:	910a      	str	r1, [sp, #40]	@ 0x28
 800ac9c:	462e      	mov	r6, r5
 800ac9e:	f04f 0e0a 	mov.w	lr, #10
 800aca2:	1c71      	adds	r1, r6, #1
 800aca4:	eba1 0c05 	sub.w	ip, r1, r5
 800aca8:	4563      	cmp	r3, ip
 800acaa:	dc15      	bgt.n	800acd8 <_strtod_l+0x250>
 800acac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800acb0:	182b      	adds	r3, r5, r0
 800acb2:	2b08      	cmp	r3, #8
 800acb4:	f105 0501 	add.w	r5, r5, #1
 800acb8:	4405      	add	r5, r0
 800acba:	dc1a      	bgt.n	800acf2 <_strtod_l+0x26a>
 800acbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800acbe:	230a      	movs	r3, #10
 800acc0:	fb03 2301 	mla	r3, r3, r1, r2
 800acc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acc6:	2300      	movs	r3, #0
 800acc8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800acca:	1c51      	adds	r1, r2, #1
 800accc:	9119      	str	r1, [sp, #100]	@ 0x64
 800acce:	7852      	ldrb	r2, [r2, #1]
 800acd0:	4618      	mov	r0, r3
 800acd2:	e7c5      	b.n	800ac60 <_strtod_l+0x1d8>
 800acd4:	4648      	mov	r0, r9
 800acd6:	e7ce      	b.n	800ac76 <_strtod_l+0x1ee>
 800acd8:	2e08      	cmp	r6, #8
 800acda:	dc05      	bgt.n	800ace8 <_strtod_l+0x260>
 800acdc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800acde:	fb0e f606 	mul.w	r6, lr, r6
 800ace2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ace4:	460e      	mov	r6, r1
 800ace6:	e7dc      	b.n	800aca2 <_strtod_l+0x21a>
 800ace8:	2910      	cmp	r1, #16
 800acea:	bfd8      	it	le
 800acec:	fb0e f707 	mulle.w	r7, lr, r7
 800acf0:	e7f8      	b.n	800ace4 <_strtod_l+0x25c>
 800acf2:	2b0f      	cmp	r3, #15
 800acf4:	bfdc      	itt	le
 800acf6:	230a      	movle	r3, #10
 800acf8:	fb03 2707 	mlale	r7, r3, r7, r2
 800acfc:	e7e3      	b.n	800acc6 <_strtod_l+0x23e>
 800acfe:	2300      	movs	r3, #0
 800ad00:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad02:	2301      	movs	r3, #1
 800ad04:	e77a      	b.n	800abfc <_strtod_l+0x174>
 800ad06:	f04f 0c00 	mov.w	ip, #0
 800ad0a:	1ca2      	adds	r2, r4, #2
 800ad0c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad0e:	78a2      	ldrb	r2, [r4, #2]
 800ad10:	e782      	b.n	800ac18 <_strtod_l+0x190>
 800ad12:	f04f 0c01 	mov.w	ip, #1
 800ad16:	e7f8      	b.n	800ad0a <_strtod_l+0x282>
 800ad18:	0803c7b4 	.word	0x0803c7b4
 800ad1c:	0803c5e7 	.word	0x0803c5e7
 800ad20:	7ff00000 	.word	0x7ff00000
 800ad24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad26:	1c51      	adds	r1, r2, #1
 800ad28:	9119      	str	r1, [sp, #100]	@ 0x64
 800ad2a:	7852      	ldrb	r2, [r2, #1]
 800ad2c:	2a30      	cmp	r2, #48	@ 0x30
 800ad2e:	d0f9      	beq.n	800ad24 <_strtod_l+0x29c>
 800ad30:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ad34:	2908      	cmp	r1, #8
 800ad36:	f63f af75 	bhi.w	800ac24 <_strtod_l+0x19c>
 800ad3a:	3a30      	subs	r2, #48	@ 0x30
 800ad3c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad40:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ad42:	f04f 080a 	mov.w	r8, #10
 800ad46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad48:	1c56      	adds	r6, r2, #1
 800ad4a:	9619      	str	r6, [sp, #100]	@ 0x64
 800ad4c:	7852      	ldrb	r2, [r2, #1]
 800ad4e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ad52:	f1be 0f09 	cmp.w	lr, #9
 800ad56:	d939      	bls.n	800adcc <_strtod_l+0x344>
 800ad58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ad5a:	1a76      	subs	r6, r6, r1
 800ad5c:	2e08      	cmp	r6, #8
 800ad5e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ad62:	dc03      	bgt.n	800ad6c <_strtod_l+0x2e4>
 800ad64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad66:	4588      	cmp	r8, r1
 800ad68:	bfa8      	it	ge
 800ad6a:	4688      	movge	r8, r1
 800ad6c:	f1bc 0f00 	cmp.w	ip, #0
 800ad70:	d001      	beq.n	800ad76 <_strtod_l+0x2ee>
 800ad72:	f1c8 0800 	rsb	r8, r8, #0
 800ad76:	2d00      	cmp	r5, #0
 800ad78:	d14e      	bne.n	800ae18 <_strtod_l+0x390>
 800ad7a:	9908      	ldr	r1, [sp, #32]
 800ad7c:	4308      	orrs	r0, r1
 800ad7e:	f47f aebc 	bne.w	800aafa <_strtod_l+0x72>
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f47f aed4 	bne.w	800ab30 <_strtod_l+0xa8>
 800ad88:	2a69      	cmp	r2, #105	@ 0x69
 800ad8a:	d028      	beq.n	800adde <_strtod_l+0x356>
 800ad8c:	dc25      	bgt.n	800adda <_strtod_l+0x352>
 800ad8e:	2a49      	cmp	r2, #73	@ 0x49
 800ad90:	d025      	beq.n	800adde <_strtod_l+0x356>
 800ad92:	2a4e      	cmp	r2, #78	@ 0x4e
 800ad94:	f47f aecc 	bne.w	800ab30 <_strtod_l+0xa8>
 800ad98:	499a      	ldr	r1, [pc, #616]	@ (800b004 <_strtod_l+0x57c>)
 800ad9a:	a819      	add	r0, sp, #100	@ 0x64
 800ad9c:	f001 fba4 	bl	800c4e8 <__match>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	f43f aec5 	beq.w	800ab30 <_strtod_l+0xa8>
 800ada6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	2b28      	cmp	r3, #40	@ 0x28
 800adac:	d12e      	bne.n	800ae0c <_strtod_l+0x384>
 800adae:	4996      	ldr	r1, [pc, #600]	@ (800b008 <_strtod_l+0x580>)
 800adb0:	aa1c      	add	r2, sp, #112	@ 0x70
 800adb2:	a819      	add	r0, sp, #100	@ 0x64
 800adb4:	f001 fbac 	bl	800c510 <__hexnan>
 800adb8:	2805      	cmp	r0, #5
 800adba:	d127      	bne.n	800ae0c <_strtod_l+0x384>
 800adbc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800adbe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800adc2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800adc6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800adca:	e696      	b.n	800aafa <_strtod_l+0x72>
 800adcc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800adce:	fb08 2101 	mla	r1, r8, r1, r2
 800add2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800add6:	9209      	str	r2, [sp, #36]	@ 0x24
 800add8:	e7b5      	b.n	800ad46 <_strtod_l+0x2be>
 800adda:	2a6e      	cmp	r2, #110	@ 0x6e
 800addc:	e7da      	b.n	800ad94 <_strtod_l+0x30c>
 800adde:	498b      	ldr	r1, [pc, #556]	@ (800b00c <_strtod_l+0x584>)
 800ade0:	a819      	add	r0, sp, #100	@ 0x64
 800ade2:	f001 fb81 	bl	800c4e8 <__match>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	f43f aea2 	beq.w	800ab30 <_strtod_l+0xa8>
 800adec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adee:	4988      	ldr	r1, [pc, #544]	@ (800b010 <_strtod_l+0x588>)
 800adf0:	3b01      	subs	r3, #1
 800adf2:	a819      	add	r0, sp, #100	@ 0x64
 800adf4:	9319      	str	r3, [sp, #100]	@ 0x64
 800adf6:	f001 fb77 	bl	800c4e8 <__match>
 800adfa:	b910      	cbnz	r0, 800ae02 <_strtod_l+0x37a>
 800adfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adfe:	3301      	adds	r3, #1
 800ae00:	9319      	str	r3, [sp, #100]	@ 0x64
 800ae02:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b020 <_strtod_l+0x598>
 800ae06:	f04f 0a00 	mov.w	sl, #0
 800ae0a:	e676      	b.n	800aafa <_strtod_l+0x72>
 800ae0c:	4881      	ldr	r0, [pc, #516]	@ (800b014 <_strtod_l+0x58c>)
 800ae0e:	f001 f8a7 	bl	800bf60 <nan>
 800ae12:	ec5b ab10 	vmov	sl, fp, d0
 800ae16:	e670      	b.n	800aafa <_strtod_l+0x72>
 800ae18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae1a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ae1c:	eba8 0303 	sub.w	r3, r8, r3
 800ae20:	f1b9 0f00 	cmp.w	r9, #0
 800ae24:	bf08      	it	eq
 800ae26:	46a9      	moveq	r9, r5
 800ae28:	2d10      	cmp	r5, #16
 800ae2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae2c:	462c      	mov	r4, r5
 800ae2e:	bfa8      	it	ge
 800ae30:	2410      	movge	r4, #16
 800ae32:	f7f5 fb67 	bl	8000504 <__aeabi_ui2d>
 800ae36:	2d09      	cmp	r5, #9
 800ae38:	4682      	mov	sl, r0
 800ae3a:	468b      	mov	fp, r1
 800ae3c:	dc13      	bgt.n	800ae66 <_strtod_l+0x3de>
 800ae3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	f43f ae5a 	beq.w	800aafa <_strtod_l+0x72>
 800ae46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae48:	dd78      	ble.n	800af3c <_strtod_l+0x4b4>
 800ae4a:	2b16      	cmp	r3, #22
 800ae4c:	dc5f      	bgt.n	800af0e <_strtod_l+0x486>
 800ae4e:	4972      	ldr	r1, [pc, #456]	@ (800b018 <_strtod_l+0x590>)
 800ae50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae58:	4652      	mov	r2, sl
 800ae5a:	465b      	mov	r3, fp
 800ae5c:	f7f5 fbcc 	bl	80005f8 <__aeabi_dmul>
 800ae60:	4682      	mov	sl, r0
 800ae62:	468b      	mov	fp, r1
 800ae64:	e649      	b.n	800aafa <_strtod_l+0x72>
 800ae66:	4b6c      	ldr	r3, [pc, #432]	@ (800b018 <_strtod_l+0x590>)
 800ae68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ae70:	f7f5 fbc2 	bl	80005f8 <__aeabi_dmul>
 800ae74:	4682      	mov	sl, r0
 800ae76:	4638      	mov	r0, r7
 800ae78:	468b      	mov	fp, r1
 800ae7a:	f7f5 fb43 	bl	8000504 <__aeabi_ui2d>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	460b      	mov	r3, r1
 800ae82:	4650      	mov	r0, sl
 800ae84:	4659      	mov	r1, fp
 800ae86:	f7f5 fa01 	bl	800028c <__adddf3>
 800ae8a:	2d0f      	cmp	r5, #15
 800ae8c:	4682      	mov	sl, r0
 800ae8e:	468b      	mov	fp, r1
 800ae90:	ddd5      	ble.n	800ae3e <_strtod_l+0x3b6>
 800ae92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae94:	1b2c      	subs	r4, r5, r4
 800ae96:	441c      	add	r4, r3
 800ae98:	2c00      	cmp	r4, #0
 800ae9a:	f340 8093 	ble.w	800afc4 <_strtod_l+0x53c>
 800ae9e:	f014 030f 	ands.w	r3, r4, #15
 800aea2:	d00a      	beq.n	800aeba <_strtod_l+0x432>
 800aea4:	495c      	ldr	r1, [pc, #368]	@ (800b018 <_strtod_l+0x590>)
 800aea6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aeaa:	4652      	mov	r2, sl
 800aeac:	465b      	mov	r3, fp
 800aeae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeb2:	f7f5 fba1 	bl	80005f8 <__aeabi_dmul>
 800aeb6:	4682      	mov	sl, r0
 800aeb8:	468b      	mov	fp, r1
 800aeba:	f034 040f 	bics.w	r4, r4, #15
 800aebe:	d073      	beq.n	800afa8 <_strtod_l+0x520>
 800aec0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aec4:	dd49      	ble.n	800af5a <_strtod_l+0x4d2>
 800aec6:	2400      	movs	r4, #0
 800aec8:	46a0      	mov	r8, r4
 800aeca:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aecc:	46a1      	mov	r9, r4
 800aece:	9a05      	ldr	r2, [sp, #20]
 800aed0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b020 <_strtod_l+0x598>
 800aed4:	2322      	movs	r3, #34	@ 0x22
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	f04f 0a00 	mov.w	sl, #0
 800aedc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f43f ae0b 	beq.w	800aafa <_strtod_l+0x72>
 800aee4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aee6:	9805      	ldr	r0, [sp, #20]
 800aee8:	f7ff f944 	bl	800a174 <_Bfree>
 800aeec:	9805      	ldr	r0, [sp, #20]
 800aeee:	4649      	mov	r1, r9
 800aef0:	f7ff f940 	bl	800a174 <_Bfree>
 800aef4:	9805      	ldr	r0, [sp, #20]
 800aef6:	4641      	mov	r1, r8
 800aef8:	f7ff f93c 	bl	800a174 <_Bfree>
 800aefc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aefe:	9805      	ldr	r0, [sp, #20]
 800af00:	f7ff f938 	bl	800a174 <_Bfree>
 800af04:	9805      	ldr	r0, [sp, #20]
 800af06:	4621      	mov	r1, r4
 800af08:	f7ff f934 	bl	800a174 <_Bfree>
 800af0c:	e5f5      	b.n	800aafa <_strtod_l+0x72>
 800af0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800af14:	4293      	cmp	r3, r2
 800af16:	dbbc      	blt.n	800ae92 <_strtod_l+0x40a>
 800af18:	4c3f      	ldr	r4, [pc, #252]	@ (800b018 <_strtod_l+0x590>)
 800af1a:	f1c5 050f 	rsb	r5, r5, #15
 800af1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800af22:	4652      	mov	r2, sl
 800af24:	465b      	mov	r3, fp
 800af26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af2a:	f7f5 fb65 	bl	80005f8 <__aeabi_dmul>
 800af2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af30:	1b5d      	subs	r5, r3, r5
 800af32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800af36:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af3a:	e78f      	b.n	800ae5c <_strtod_l+0x3d4>
 800af3c:	3316      	adds	r3, #22
 800af3e:	dba8      	blt.n	800ae92 <_strtod_l+0x40a>
 800af40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af42:	eba3 0808 	sub.w	r8, r3, r8
 800af46:	4b34      	ldr	r3, [pc, #208]	@ (800b018 <_strtod_l+0x590>)
 800af48:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800af4c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800af50:	4650      	mov	r0, sl
 800af52:	4659      	mov	r1, fp
 800af54:	f7f5 fc7a 	bl	800084c <__aeabi_ddiv>
 800af58:	e782      	b.n	800ae60 <_strtod_l+0x3d8>
 800af5a:	2300      	movs	r3, #0
 800af5c:	4f2f      	ldr	r7, [pc, #188]	@ (800b01c <_strtod_l+0x594>)
 800af5e:	1124      	asrs	r4, r4, #4
 800af60:	4650      	mov	r0, sl
 800af62:	4659      	mov	r1, fp
 800af64:	461e      	mov	r6, r3
 800af66:	2c01      	cmp	r4, #1
 800af68:	dc21      	bgt.n	800afae <_strtod_l+0x526>
 800af6a:	b10b      	cbz	r3, 800af70 <_strtod_l+0x4e8>
 800af6c:	4682      	mov	sl, r0
 800af6e:	468b      	mov	fp, r1
 800af70:	492a      	ldr	r1, [pc, #168]	@ (800b01c <_strtod_l+0x594>)
 800af72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800af76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800af7a:	4652      	mov	r2, sl
 800af7c:	465b      	mov	r3, fp
 800af7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af82:	f7f5 fb39 	bl	80005f8 <__aeabi_dmul>
 800af86:	4b26      	ldr	r3, [pc, #152]	@ (800b020 <_strtod_l+0x598>)
 800af88:	460a      	mov	r2, r1
 800af8a:	400b      	ands	r3, r1
 800af8c:	4925      	ldr	r1, [pc, #148]	@ (800b024 <_strtod_l+0x59c>)
 800af8e:	428b      	cmp	r3, r1
 800af90:	4682      	mov	sl, r0
 800af92:	d898      	bhi.n	800aec6 <_strtod_l+0x43e>
 800af94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800af98:	428b      	cmp	r3, r1
 800af9a:	bf86      	itte	hi
 800af9c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b028 <_strtod_l+0x5a0>
 800afa0:	f04f 3aff 	movhi.w	sl, #4294967295
 800afa4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800afa8:	2300      	movs	r3, #0
 800afaa:	9308      	str	r3, [sp, #32]
 800afac:	e076      	b.n	800b09c <_strtod_l+0x614>
 800afae:	07e2      	lsls	r2, r4, #31
 800afb0:	d504      	bpl.n	800afbc <_strtod_l+0x534>
 800afb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afb6:	f7f5 fb1f 	bl	80005f8 <__aeabi_dmul>
 800afba:	2301      	movs	r3, #1
 800afbc:	3601      	adds	r6, #1
 800afbe:	1064      	asrs	r4, r4, #1
 800afc0:	3708      	adds	r7, #8
 800afc2:	e7d0      	b.n	800af66 <_strtod_l+0x4de>
 800afc4:	d0f0      	beq.n	800afa8 <_strtod_l+0x520>
 800afc6:	4264      	negs	r4, r4
 800afc8:	f014 020f 	ands.w	r2, r4, #15
 800afcc:	d00a      	beq.n	800afe4 <_strtod_l+0x55c>
 800afce:	4b12      	ldr	r3, [pc, #72]	@ (800b018 <_strtod_l+0x590>)
 800afd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afd4:	4650      	mov	r0, sl
 800afd6:	4659      	mov	r1, fp
 800afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afdc:	f7f5 fc36 	bl	800084c <__aeabi_ddiv>
 800afe0:	4682      	mov	sl, r0
 800afe2:	468b      	mov	fp, r1
 800afe4:	1124      	asrs	r4, r4, #4
 800afe6:	d0df      	beq.n	800afa8 <_strtod_l+0x520>
 800afe8:	2c1f      	cmp	r4, #31
 800afea:	dd1f      	ble.n	800b02c <_strtod_l+0x5a4>
 800afec:	2400      	movs	r4, #0
 800afee:	46a0      	mov	r8, r4
 800aff0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aff2:	46a1      	mov	r9, r4
 800aff4:	9a05      	ldr	r2, [sp, #20]
 800aff6:	2322      	movs	r3, #34	@ 0x22
 800aff8:	f04f 0a00 	mov.w	sl, #0
 800affc:	f04f 0b00 	mov.w	fp, #0
 800b000:	6013      	str	r3, [r2, #0]
 800b002:	e76b      	b.n	800aedc <_strtod_l+0x454>
 800b004:	0803c4d5 	.word	0x0803c4d5
 800b008:	0803c7a0 	.word	0x0803c7a0
 800b00c:	0803c4cd 	.word	0x0803c4cd
 800b010:	0803c504 	.word	0x0803c504
 800b014:	0803c63d 	.word	0x0803c63d
 800b018:	0803c6d8 	.word	0x0803c6d8
 800b01c:	0803c6b0 	.word	0x0803c6b0
 800b020:	7ff00000 	.word	0x7ff00000
 800b024:	7ca00000 	.word	0x7ca00000
 800b028:	7fefffff 	.word	0x7fefffff
 800b02c:	f014 0310 	ands.w	r3, r4, #16
 800b030:	bf18      	it	ne
 800b032:	236a      	movne	r3, #106	@ 0x6a
 800b034:	4ea9      	ldr	r6, [pc, #676]	@ (800b2dc <_strtod_l+0x854>)
 800b036:	9308      	str	r3, [sp, #32]
 800b038:	4650      	mov	r0, sl
 800b03a:	4659      	mov	r1, fp
 800b03c:	2300      	movs	r3, #0
 800b03e:	07e7      	lsls	r7, r4, #31
 800b040:	d504      	bpl.n	800b04c <_strtod_l+0x5c4>
 800b042:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b046:	f7f5 fad7 	bl	80005f8 <__aeabi_dmul>
 800b04a:	2301      	movs	r3, #1
 800b04c:	1064      	asrs	r4, r4, #1
 800b04e:	f106 0608 	add.w	r6, r6, #8
 800b052:	d1f4      	bne.n	800b03e <_strtod_l+0x5b6>
 800b054:	b10b      	cbz	r3, 800b05a <_strtod_l+0x5d2>
 800b056:	4682      	mov	sl, r0
 800b058:	468b      	mov	fp, r1
 800b05a:	9b08      	ldr	r3, [sp, #32]
 800b05c:	b1b3      	cbz	r3, 800b08c <_strtod_l+0x604>
 800b05e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b062:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b066:	2b00      	cmp	r3, #0
 800b068:	4659      	mov	r1, fp
 800b06a:	dd0f      	ble.n	800b08c <_strtod_l+0x604>
 800b06c:	2b1f      	cmp	r3, #31
 800b06e:	dd56      	ble.n	800b11e <_strtod_l+0x696>
 800b070:	2b34      	cmp	r3, #52	@ 0x34
 800b072:	bfde      	ittt	le
 800b074:	f04f 33ff 	movle.w	r3, #4294967295
 800b078:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b07c:	4093      	lslle	r3, r2
 800b07e:	f04f 0a00 	mov.w	sl, #0
 800b082:	bfcc      	ite	gt
 800b084:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b088:	ea03 0b01 	andle.w	fp, r3, r1
 800b08c:	2200      	movs	r2, #0
 800b08e:	2300      	movs	r3, #0
 800b090:	4650      	mov	r0, sl
 800b092:	4659      	mov	r1, fp
 800b094:	f7f5 fd18 	bl	8000ac8 <__aeabi_dcmpeq>
 800b098:	2800      	cmp	r0, #0
 800b09a:	d1a7      	bne.n	800afec <_strtod_l+0x564>
 800b09c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b09e:	9300      	str	r3, [sp, #0]
 800b0a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b0a2:	9805      	ldr	r0, [sp, #20]
 800b0a4:	462b      	mov	r3, r5
 800b0a6:	464a      	mov	r2, r9
 800b0a8:	f7ff f8cc 	bl	800a244 <__s2b>
 800b0ac:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	f43f af09 	beq.w	800aec6 <_strtod_l+0x43e>
 800b0b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0b8:	2a00      	cmp	r2, #0
 800b0ba:	eba3 0308 	sub.w	r3, r3, r8
 800b0be:	bfa8      	it	ge
 800b0c0:	2300      	movge	r3, #0
 800b0c2:	9312      	str	r3, [sp, #72]	@ 0x48
 800b0c4:	2400      	movs	r4, #0
 800b0c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b0ca:	9316      	str	r3, [sp, #88]	@ 0x58
 800b0cc:	46a0      	mov	r8, r4
 800b0ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0d0:	9805      	ldr	r0, [sp, #20]
 800b0d2:	6859      	ldr	r1, [r3, #4]
 800b0d4:	f7ff f80e 	bl	800a0f4 <_Balloc>
 800b0d8:	4681      	mov	r9, r0
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	f43f aef7 	beq.w	800aece <_strtod_l+0x446>
 800b0e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0e2:	691a      	ldr	r2, [r3, #16]
 800b0e4:	3202      	adds	r2, #2
 800b0e6:	f103 010c 	add.w	r1, r3, #12
 800b0ea:	0092      	lsls	r2, r2, #2
 800b0ec:	300c      	adds	r0, #12
 800b0ee:	f7fe f94a 	bl	8009386 <memcpy>
 800b0f2:	ec4b ab10 	vmov	d0, sl, fp
 800b0f6:	9805      	ldr	r0, [sp, #20]
 800b0f8:	aa1c      	add	r2, sp, #112	@ 0x70
 800b0fa:	a91b      	add	r1, sp, #108	@ 0x6c
 800b0fc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b100:	f7ff fbd4 	bl	800a8ac <__d2b>
 800b104:	901a      	str	r0, [sp, #104]	@ 0x68
 800b106:	2800      	cmp	r0, #0
 800b108:	f43f aee1 	beq.w	800aece <_strtod_l+0x446>
 800b10c:	9805      	ldr	r0, [sp, #20]
 800b10e:	2101      	movs	r1, #1
 800b110:	f7ff f92e 	bl	800a370 <__i2b>
 800b114:	4680      	mov	r8, r0
 800b116:	b948      	cbnz	r0, 800b12c <_strtod_l+0x6a4>
 800b118:	f04f 0800 	mov.w	r8, #0
 800b11c:	e6d7      	b.n	800aece <_strtod_l+0x446>
 800b11e:	f04f 32ff 	mov.w	r2, #4294967295
 800b122:	fa02 f303 	lsl.w	r3, r2, r3
 800b126:	ea03 0a0a 	and.w	sl, r3, sl
 800b12a:	e7af      	b.n	800b08c <_strtod_l+0x604>
 800b12c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b12e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b130:	2d00      	cmp	r5, #0
 800b132:	bfab      	itete	ge
 800b134:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b136:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b138:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b13a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b13c:	bfac      	ite	ge
 800b13e:	18ef      	addge	r7, r5, r3
 800b140:	1b5e      	sublt	r6, r3, r5
 800b142:	9b08      	ldr	r3, [sp, #32]
 800b144:	1aed      	subs	r5, r5, r3
 800b146:	4415      	add	r5, r2
 800b148:	4b65      	ldr	r3, [pc, #404]	@ (800b2e0 <_strtod_l+0x858>)
 800b14a:	3d01      	subs	r5, #1
 800b14c:	429d      	cmp	r5, r3
 800b14e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b152:	da50      	bge.n	800b1f6 <_strtod_l+0x76e>
 800b154:	1b5b      	subs	r3, r3, r5
 800b156:	2b1f      	cmp	r3, #31
 800b158:	eba2 0203 	sub.w	r2, r2, r3
 800b15c:	f04f 0101 	mov.w	r1, #1
 800b160:	dc3d      	bgt.n	800b1de <_strtod_l+0x756>
 800b162:	fa01 f303 	lsl.w	r3, r1, r3
 800b166:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b168:	2300      	movs	r3, #0
 800b16a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b16c:	18bd      	adds	r5, r7, r2
 800b16e:	9b08      	ldr	r3, [sp, #32]
 800b170:	42af      	cmp	r7, r5
 800b172:	4416      	add	r6, r2
 800b174:	441e      	add	r6, r3
 800b176:	463b      	mov	r3, r7
 800b178:	bfa8      	it	ge
 800b17a:	462b      	movge	r3, r5
 800b17c:	42b3      	cmp	r3, r6
 800b17e:	bfa8      	it	ge
 800b180:	4633      	movge	r3, r6
 800b182:	2b00      	cmp	r3, #0
 800b184:	bfc2      	ittt	gt
 800b186:	1aed      	subgt	r5, r5, r3
 800b188:	1af6      	subgt	r6, r6, r3
 800b18a:	1aff      	subgt	r7, r7, r3
 800b18c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b18e:	2b00      	cmp	r3, #0
 800b190:	dd16      	ble.n	800b1c0 <_strtod_l+0x738>
 800b192:	4641      	mov	r1, r8
 800b194:	9805      	ldr	r0, [sp, #20]
 800b196:	461a      	mov	r2, r3
 800b198:	f7ff f9a2 	bl	800a4e0 <__pow5mult>
 800b19c:	4680      	mov	r8, r0
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d0ba      	beq.n	800b118 <_strtod_l+0x690>
 800b1a2:	4601      	mov	r1, r0
 800b1a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b1a6:	9805      	ldr	r0, [sp, #20]
 800b1a8:	f7ff f8f8 	bl	800a39c <__multiply>
 800b1ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	f43f ae8d 	beq.w	800aece <_strtod_l+0x446>
 800b1b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1b6:	9805      	ldr	r0, [sp, #20]
 800b1b8:	f7fe ffdc 	bl	800a174 <_Bfree>
 800b1bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1be:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1c0:	2d00      	cmp	r5, #0
 800b1c2:	dc1d      	bgt.n	800b200 <_strtod_l+0x778>
 800b1c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	dd23      	ble.n	800b212 <_strtod_l+0x78a>
 800b1ca:	4649      	mov	r1, r9
 800b1cc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b1ce:	9805      	ldr	r0, [sp, #20]
 800b1d0:	f7ff f986 	bl	800a4e0 <__pow5mult>
 800b1d4:	4681      	mov	r9, r0
 800b1d6:	b9e0      	cbnz	r0, 800b212 <_strtod_l+0x78a>
 800b1d8:	f04f 0900 	mov.w	r9, #0
 800b1dc:	e677      	b.n	800aece <_strtod_l+0x446>
 800b1de:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b1e2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b1e6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b1ea:	35e2      	adds	r5, #226	@ 0xe2
 800b1ec:	fa01 f305 	lsl.w	r3, r1, r5
 800b1f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1f2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b1f4:	e7ba      	b.n	800b16c <_strtod_l+0x6e4>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1fe:	e7b5      	b.n	800b16c <_strtod_l+0x6e4>
 800b200:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b202:	9805      	ldr	r0, [sp, #20]
 800b204:	462a      	mov	r2, r5
 800b206:	f7ff f9c5 	bl	800a594 <__lshift>
 800b20a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b20c:	2800      	cmp	r0, #0
 800b20e:	d1d9      	bne.n	800b1c4 <_strtod_l+0x73c>
 800b210:	e65d      	b.n	800aece <_strtod_l+0x446>
 800b212:	2e00      	cmp	r6, #0
 800b214:	dd07      	ble.n	800b226 <_strtod_l+0x79e>
 800b216:	4649      	mov	r1, r9
 800b218:	9805      	ldr	r0, [sp, #20]
 800b21a:	4632      	mov	r2, r6
 800b21c:	f7ff f9ba 	bl	800a594 <__lshift>
 800b220:	4681      	mov	r9, r0
 800b222:	2800      	cmp	r0, #0
 800b224:	d0d8      	beq.n	800b1d8 <_strtod_l+0x750>
 800b226:	2f00      	cmp	r7, #0
 800b228:	dd08      	ble.n	800b23c <_strtod_l+0x7b4>
 800b22a:	4641      	mov	r1, r8
 800b22c:	9805      	ldr	r0, [sp, #20]
 800b22e:	463a      	mov	r2, r7
 800b230:	f7ff f9b0 	bl	800a594 <__lshift>
 800b234:	4680      	mov	r8, r0
 800b236:	2800      	cmp	r0, #0
 800b238:	f43f ae49 	beq.w	800aece <_strtod_l+0x446>
 800b23c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b23e:	9805      	ldr	r0, [sp, #20]
 800b240:	464a      	mov	r2, r9
 800b242:	f7ff fa2f 	bl	800a6a4 <__mdiff>
 800b246:	4604      	mov	r4, r0
 800b248:	2800      	cmp	r0, #0
 800b24a:	f43f ae40 	beq.w	800aece <_strtod_l+0x446>
 800b24e:	68c3      	ldr	r3, [r0, #12]
 800b250:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b252:	2300      	movs	r3, #0
 800b254:	60c3      	str	r3, [r0, #12]
 800b256:	4641      	mov	r1, r8
 800b258:	f7ff fa08 	bl	800a66c <__mcmp>
 800b25c:	2800      	cmp	r0, #0
 800b25e:	da45      	bge.n	800b2ec <_strtod_l+0x864>
 800b260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b262:	ea53 030a 	orrs.w	r3, r3, sl
 800b266:	d16b      	bne.n	800b340 <_strtod_l+0x8b8>
 800b268:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d167      	bne.n	800b340 <_strtod_l+0x8b8>
 800b270:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b274:	0d1b      	lsrs	r3, r3, #20
 800b276:	051b      	lsls	r3, r3, #20
 800b278:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b27c:	d960      	bls.n	800b340 <_strtod_l+0x8b8>
 800b27e:	6963      	ldr	r3, [r4, #20]
 800b280:	b913      	cbnz	r3, 800b288 <_strtod_l+0x800>
 800b282:	6923      	ldr	r3, [r4, #16]
 800b284:	2b01      	cmp	r3, #1
 800b286:	dd5b      	ble.n	800b340 <_strtod_l+0x8b8>
 800b288:	4621      	mov	r1, r4
 800b28a:	2201      	movs	r2, #1
 800b28c:	9805      	ldr	r0, [sp, #20]
 800b28e:	f7ff f981 	bl	800a594 <__lshift>
 800b292:	4641      	mov	r1, r8
 800b294:	4604      	mov	r4, r0
 800b296:	f7ff f9e9 	bl	800a66c <__mcmp>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	dd50      	ble.n	800b340 <_strtod_l+0x8b8>
 800b29e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b2a2:	9a08      	ldr	r2, [sp, #32]
 800b2a4:	0d1b      	lsrs	r3, r3, #20
 800b2a6:	051b      	lsls	r3, r3, #20
 800b2a8:	2a00      	cmp	r2, #0
 800b2aa:	d06a      	beq.n	800b382 <_strtod_l+0x8fa>
 800b2ac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b2b0:	d867      	bhi.n	800b382 <_strtod_l+0x8fa>
 800b2b2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b2b6:	f67f ae9d 	bls.w	800aff4 <_strtod_l+0x56c>
 800b2ba:	4b0a      	ldr	r3, [pc, #40]	@ (800b2e4 <_strtod_l+0x85c>)
 800b2bc:	4650      	mov	r0, sl
 800b2be:	4659      	mov	r1, fp
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f7f5 f999 	bl	80005f8 <__aeabi_dmul>
 800b2c6:	4b08      	ldr	r3, [pc, #32]	@ (800b2e8 <_strtod_l+0x860>)
 800b2c8:	400b      	ands	r3, r1
 800b2ca:	4682      	mov	sl, r0
 800b2cc:	468b      	mov	fp, r1
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f47f ae08 	bne.w	800aee4 <_strtod_l+0x45c>
 800b2d4:	9a05      	ldr	r2, [sp, #20]
 800b2d6:	2322      	movs	r3, #34	@ 0x22
 800b2d8:	6013      	str	r3, [r2, #0]
 800b2da:	e603      	b.n	800aee4 <_strtod_l+0x45c>
 800b2dc:	0803c7c8 	.word	0x0803c7c8
 800b2e0:	fffffc02 	.word	0xfffffc02
 800b2e4:	39500000 	.word	0x39500000
 800b2e8:	7ff00000 	.word	0x7ff00000
 800b2ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b2f0:	d165      	bne.n	800b3be <_strtod_l+0x936>
 800b2f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b2f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2f8:	b35a      	cbz	r2, 800b352 <_strtod_l+0x8ca>
 800b2fa:	4a9f      	ldr	r2, [pc, #636]	@ (800b578 <_strtod_l+0xaf0>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d12b      	bne.n	800b358 <_strtod_l+0x8d0>
 800b300:	9b08      	ldr	r3, [sp, #32]
 800b302:	4651      	mov	r1, sl
 800b304:	b303      	cbz	r3, 800b348 <_strtod_l+0x8c0>
 800b306:	4b9d      	ldr	r3, [pc, #628]	@ (800b57c <_strtod_l+0xaf4>)
 800b308:	465a      	mov	r2, fp
 800b30a:	4013      	ands	r3, r2
 800b30c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b310:	f04f 32ff 	mov.w	r2, #4294967295
 800b314:	d81b      	bhi.n	800b34e <_strtod_l+0x8c6>
 800b316:	0d1b      	lsrs	r3, r3, #20
 800b318:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b31c:	fa02 f303 	lsl.w	r3, r2, r3
 800b320:	4299      	cmp	r1, r3
 800b322:	d119      	bne.n	800b358 <_strtod_l+0x8d0>
 800b324:	4b96      	ldr	r3, [pc, #600]	@ (800b580 <_strtod_l+0xaf8>)
 800b326:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b328:	429a      	cmp	r2, r3
 800b32a:	d102      	bne.n	800b332 <_strtod_l+0x8aa>
 800b32c:	3101      	adds	r1, #1
 800b32e:	f43f adce 	beq.w	800aece <_strtod_l+0x446>
 800b332:	4b92      	ldr	r3, [pc, #584]	@ (800b57c <_strtod_l+0xaf4>)
 800b334:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b336:	401a      	ands	r2, r3
 800b338:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b33c:	f04f 0a00 	mov.w	sl, #0
 800b340:	9b08      	ldr	r3, [sp, #32]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1b9      	bne.n	800b2ba <_strtod_l+0x832>
 800b346:	e5cd      	b.n	800aee4 <_strtod_l+0x45c>
 800b348:	f04f 33ff 	mov.w	r3, #4294967295
 800b34c:	e7e8      	b.n	800b320 <_strtod_l+0x898>
 800b34e:	4613      	mov	r3, r2
 800b350:	e7e6      	b.n	800b320 <_strtod_l+0x898>
 800b352:	ea53 030a 	orrs.w	r3, r3, sl
 800b356:	d0a2      	beq.n	800b29e <_strtod_l+0x816>
 800b358:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b35a:	b1db      	cbz	r3, 800b394 <_strtod_l+0x90c>
 800b35c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b35e:	4213      	tst	r3, r2
 800b360:	d0ee      	beq.n	800b340 <_strtod_l+0x8b8>
 800b362:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b364:	9a08      	ldr	r2, [sp, #32]
 800b366:	4650      	mov	r0, sl
 800b368:	4659      	mov	r1, fp
 800b36a:	b1bb      	cbz	r3, 800b39c <_strtod_l+0x914>
 800b36c:	f7ff fb6c 	bl	800aa48 <sulp>
 800b370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b374:	ec53 2b10 	vmov	r2, r3, d0
 800b378:	f7f4 ff88 	bl	800028c <__adddf3>
 800b37c:	4682      	mov	sl, r0
 800b37e:	468b      	mov	fp, r1
 800b380:	e7de      	b.n	800b340 <_strtod_l+0x8b8>
 800b382:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b386:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b38a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b38e:	f04f 3aff 	mov.w	sl, #4294967295
 800b392:	e7d5      	b.n	800b340 <_strtod_l+0x8b8>
 800b394:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b396:	ea13 0f0a 	tst.w	r3, sl
 800b39a:	e7e1      	b.n	800b360 <_strtod_l+0x8d8>
 800b39c:	f7ff fb54 	bl	800aa48 <sulp>
 800b3a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3a4:	ec53 2b10 	vmov	r2, r3, d0
 800b3a8:	f7f4 ff6e 	bl	8000288 <__aeabi_dsub>
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	4682      	mov	sl, r0
 800b3b2:	468b      	mov	fp, r1
 800b3b4:	f7f5 fb88 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	d0c1      	beq.n	800b340 <_strtod_l+0x8b8>
 800b3bc:	e61a      	b.n	800aff4 <_strtod_l+0x56c>
 800b3be:	4641      	mov	r1, r8
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f7ff facb 	bl	800a95c <__ratio>
 800b3c6:	ec57 6b10 	vmov	r6, r7, d0
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	4639      	mov	r1, r7
 800b3d4:	f7f5 fb8c 	bl	8000af0 <__aeabi_dcmple>
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	d06f      	beq.n	800b4bc <_strtod_l+0xa34>
 800b3dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d17a      	bne.n	800b4d8 <_strtod_l+0xa50>
 800b3e2:	f1ba 0f00 	cmp.w	sl, #0
 800b3e6:	d158      	bne.n	800b49a <_strtod_l+0xa12>
 800b3e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d15a      	bne.n	800b4a8 <_strtod_l+0xa20>
 800b3f2:	4b64      	ldr	r3, [pc, #400]	@ (800b584 <_strtod_l+0xafc>)
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	4639      	mov	r1, r7
 800b3fa:	f7f5 fb6f 	bl	8000adc <__aeabi_dcmplt>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	d159      	bne.n	800b4b6 <_strtod_l+0xa2e>
 800b402:	4630      	mov	r0, r6
 800b404:	4639      	mov	r1, r7
 800b406:	4b60      	ldr	r3, [pc, #384]	@ (800b588 <_strtod_l+0xb00>)
 800b408:	2200      	movs	r2, #0
 800b40a:	f7f5 f8f5 	bl	80005f8 <__aeabi_dmul>
 800b40e:	4606      	mov	r6, r0
 800b410:	460f      	mov	r7, r1
 800b412:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b416:	9606      	str	r6, [sp, #24]
 800b418:	9307      	str	r3, [sp, #28]
 800b41a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b41e:	4d57      	ldr	r5, [pc, #348]	@ (800b57c <_strtod_l+0xaf4>)
 800b420:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b426:	401d      	ands	r5, r3
 800b428:	4b58      	ldr	r3, [pc, #352]	@ (800b58c <_strtod_l+0xb04>)
 800b42a:	429d      	cmp	r5, r3
 800b42c:	f040 80b2 	bne.w	800b594 <_strtod_l+0xb0c>
 800b430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b432:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b436:	ec4b ab10 	vmov	d0, sl, fp
 800b43a:	f7ff f9c7 	bl	800a7cc <__ulp>
 800b43e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b442:	ec51 0b10 	vmov	r0, r1, d0
 800b446:	f7f5 f8d7 	bl	80005f8 <__aeabi_dmul>
 800b44a:	4652      	mov	r2, sl
 800b44c:	465b      	mov	r3, fp
 800b44e:	f7f4 ff1d 	bl	800028c <__adddf3>
 800b452:	460b      	mov	r3, r1
 800b454:	4949      	ldr	r1, [pc, #292]	@ (800b57c <_strtod_l+0xaf4>)
 800b456:	4a4e      	ldr	r2, [pc, #312]	@ (800b590 <_strtod_l+0xb08>)
 800b458:	4019      	ands	r1, r3
 800b45a:	4291      	cmp	r1, r2
 800b45c:	4682      	mov	sl, r0
 800b45e:	d942      	bls.n	800b4e6 <_strtod_l+0xa5e>
 800b460:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b462:	4b47      	ldr	r3, [pc, #284]	@ (800b580 <_strtod_l+0xaf8>)
 800b464:	429a      	cmp	r2, r3
 800b466:	d103      	bne.n	800b470 <_strtod_l+0x9e8>
 800b468:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b46a:	3301      	adds	r3, #1
 800b46c:	f43f ad2f 	beq.w	800aece <_strtod_l+0x446>
 800b470:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b580 <_strtod_l+0xaf8>
 800b474:	f04f 3aff 	mov.w	sl, #4294967295
 800b478:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b47a:	9805      	ldr	r0, [sp, #20]
 800b47c:	f7fe fe7a 	bl	800a174 <_Bfree>
 800b480:	9805      	ldr	r0, [sp, #20]
 800b482:	4649      	mov	r1, r9
 800b484:	f7fe fe76 	bl	800a174 <_Bfree>
 800b488:	9805      	ldr	r0, [sp, #20]
 800b48a:	4641      	mov	r1, r8
 800b48c:	f7fe fe72 	bl	800a174 <_Bfree>
 800b490:	9805      	ldr	r0, [sp, #20]
 800b492:	4621      	mov	r1, r4
 800b494:	f7fe fe6e 	bl	800a174 <_Bfree>
 800b498:	e619      	b.n	800b0ce <_strtod_l+0x646>
 800b49a:	f1ba 0f01 	cmp.w	sl, #1
 800b49e:	d103      	bne.n	800b4a8 <_strtod_l+0xa20>
 800b4a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	f43f ada6 	beq.w	800aff4 <_strtod_l+0x56c>
 800b4a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b558 <_strtod_l+0xad0>
 800b4ac:	4f35      	ldr	r7, [pc, #212]	@ (800b584 <_strtod_l+0xafc>)
 800b4ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4b2:	2600      	movs	r6, #0
 800b4b4:	e7b1      	b.n	800b41a <_strtod_l+0x992>
 800b4b6:	4f34      	ldr	r7, [pc, #208]	@ (800b588 <_strtod_l+0xb00>)
 800b4b8:	2600      	movs	r6, #0
 800b4ba:	e7aa      	b.n	800b412 <_strtod_l+0x98a>
 800b4bc:	4b32      	ldr	r3, [pc, #200]	@ (800b588 <_strtod_l+0xb00>)
 800b4be:	4630      	mov	r0, r6
 800b4c0:	4639      	mov	r1, r7
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f7f5 f898 	bl	80005f8 <__aeabi_dmul>
 800b4c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4ca:	4606      	mov	r6, r0
 800b4cc:	460f      	mov	r7, r1
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d09f      	beq.n	800b412 <_strtod_l+0x98a>
 800b4d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b4d6:	e7a0      	b.n	800b41a <_strtod_l+0x992>
 800b4d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b560 <_strtod_l+0xad8>
 800b4dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4e0:	ec57 6b17 	vmov	r6, r7, d7
 800b4e4:	e799      	b.n	800b41a <_strtod_l+0x992>
 800b4e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b4ea:	9b08      	ldr	r3, [sp, #32]
 800b4ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1c1      	bne.n	800b478 <_strtod_l+0x9f0>
 800b4f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4f8:	0d1b      	lsrs	r3, r3, #20
 800b4fa:	051b      	lsls	r3, r3, #20
 800b4fc:	429d      	cmp	r5, r3
 800b4fe:	d1bb      	bne.n	800b478 <_strtod_l+0x9f0>
 800b500:	4630      	mov	r0, r6
 800b502:	4639      	mov	r1, r7
 800b504:	f7f5 fbd8 	bl	8000cb8 <__aeabi_d2lz>
 800b508:	f7f5 f848 	bl	800059c <__aeabi_l2d>
 800b50c:	4602      	mov	r2, r0
 800b50e:	460b      	mov	r3, r1
 800b510:	4630      	mov	r0, r6
 800b512:	4639      	mov	r1, r7
 800b514:	f7f4 feb8 	bl	8000288 <__aeabi_dsub>
 800b518:	460b      	mov	r3, r1
 800b51a:	4602      	mov	r2, r0
 800b51c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b520:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b526:	ea46 060a 	orr.w	r6, r6, sl
 800b52a:	431e      	orrs	r6, r3
 800b52c:	d06f      	beq.n	800b60e <_strtod_l+0xb86>
 800b52e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b568 <_strtod_l+0xae0>)
 800b530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b534:	f7f5 fad2 	bl	8000adc <__aeabi_dcmplt>
 800b538:	2800      	cmp	r0, #0
 800b53a:	f47f acd3 	bne.w	800aee4 <_strtod_l+0x45c>
 800b53e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b570 <_strtod_l+0xae8>)
 800b540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b544:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b548:	f7f5 fae6 	bl	8000b18 <__aeabi_dcmpgt>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d093      	beq.n	800b478 <_strtod_l+0x9f0>
 800b550:	e4c8      	b.n	800aee4 <_strtod_l+0x45c>
 800b552:	bf00      	nop
 800b554:	f3af 8000 	nop.w
 800b558:	00000000 	.word	0x00000000
 800b55c:	bff00000 	.word	0xbff00000
 800b560:	00000000 	.word	0x00000000
 800b564:	3ff00000 	.word	0x3ff00000
 800b568:	94a03595 	.word	0x94a03595
 800b56c:	3fdfffff 	.word	0x3fdfffff
 800b570:	35afe535 	.word	0x35afe535
 800b574:	3fe00000 	.word	0x3fe00000
 800b578:	000fffff 	.word	0x000fffff
 800b57c:	7ff00000 	.word	0x7ff00000
 800b580:	7fefffff 	.word	0x7fefffff
 800b584:	3ff00000 	.word	0x3ff00000
 800b588:	3fe00000 	.word	0x3fe00000
 800b58c:	7fe00000 	.word	0x7fe00000
 800b590:	7c9fffff 	.word	0x7c9fffff
 800b594:	9b08      	ldr	r3, [sp, #32]
 800b596:	b323      	cbz	r3, 800b5e2 <_strtod_l+0xb5a>
 800b598:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b59c:	d821      	bhi.n	800b5e2 <_strtod_l+0xb5a>
 800b59e:	a328      	add	r3, pc, #160	@ (adr r3, 800b640 <_strtod_l+0xbb8>)
 800b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a4:	4630      	mov	r0, r6
 800b5a6:	4639      	mov	r1, r7
 800b5a8:	f7f5 faa2 	bl	8000af0 <__aeabi_dcmple>
 800b5ac:	b1a0      	cbz	r0, 800b5d8 <_strtod_l+0xb50>
 800b5ae:	4639      	mov	r1, r7
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	f7f5 faf9 	bl	8000ba8 <__aeabi_d2uiz>
 800b5b6:	2801      	cmp	r0, #1
 800b5b8:	bf38      	it	cc
 800b5ba:	2001      	movcc	r0, #1
 800b5bc:	f7f4 ffa2 	bl	8000504 <__aeabi_ui2d>
 800b5c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	460f      	mov	r7, r1
 800b5c6:	b9fb      	cbnz	r3, 800b608 <_strtod_l+0xb80>
 800b5c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b5cc:	9014      	str	r0, [sp, #80]	@ 0x50
 800b5ce:	9315      	str	r3, [sp, #84]	@ 0x54
 800b5d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b5d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b5d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b5da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b5de:	1b5b      	subs	r3, r3, r5
 800b5e0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b5e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b5e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b5ea:	f7ff f8ef 	bl	800a7cc <__ulp>
 800b5ee:	4650      	mov	r0, sl
 800b5f0:	ec53 2b10 	vmov	r2, r3, d0
 800b5f4:	4659      	mov	r1, fp
 800b5f6:	f7f4 ffff 	bl	80005f8 <__aeabi_dmul>
 800b5fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b5fe:	f7f4 fe45 	bl	800028c <__adddf3>
 800b602:	4682      	mov	sl, r0
 800b604:	468b      	mov	fp, r1
 800b606:	e770      	b.n	800b4ea <_strtod_l+0xa62>
 800b608:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b60c:	e7e0      	b.n	800b5d0 <_strtod_l+0xb48>
 800b60e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b648 <_strtod_l+0xbc0>)
 800b610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b614:	f7f5 fa62 	bl	8000adc <__aeabi_dcmplt>
 800b618:	e798      	b.n	800b54c <_strtod_l+0xac4>
 800b61a:	2300      	movs	r3, #0
 800b61c:	930e      	str	r3, [sp, #56]	@ 0x38
 800b61e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b620:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b622:	6013      	str	r3, [r2, #0]
 800b624:	f7ff ba6d 	b.w	800ab02 <_strtod_l+0x7a>
 800b628:	2a65      	cmp	r2, #101	@ 0x65
 800b62a:	f43f ab68 	beq.w	800acfe <_strtod_l+0x276>
 800b62e:	2a45      	cmp	r2, #69	@ 0x45
 800b630:	f43f ab65 	beq.w	800acfe <_strtod_l+0x276>
 800b634:	2301      	movs	r3, #1
 800b636:	f7ff bba0 	b.w	800ad7a <_strtod_l+0x2f2>
 800b63a:	bf00      	nop
 800b63c:	f3af 8000 	nop.w
 800b640:	ffc00000 	.word	0xffc00000
 800b644:	41dfffff 	.word	0x41dfffff
 800b648:	94a03595 	.word	0x94a03595
 800b64c:	3fcfffff 	.word	0x3fcfffff

0800b650 <_strtod_r>:
 800b650:	4b01      	ldr	r3, [pc, #4]	@ (800b658 <_strtod_r+0x8>)
 800b652:	f7ff ba19 	b.w	800aa88 <_strtod_l>
 800b656:	bf00      	nop
 800b658:	20000104 	.word	0x20000104

0800b65c <_strtol_l.isra.0>:
 800b65c:	2b24      	cmp	r3, #36	@ 0x24
 800b65e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b662:	4686      	mov	lr, r0
 800b664:	4690      	mov	r8, r2
 800b666:	d801      	bhi.n	800b66c <_strtol_l.isra.0+0x10>
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d106      	bne.n	800b67a <_strtol_l.isra.0+0x1e>
 800b66c:	f7fd fe5e 	bl	800932c <__errno>
 800b670:	2316      	movs	r3, #22
 800b672:	6003      	str	r3, [r0, #0]
 800b674:	2000      	movs	r0, #0
 800b676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b67a:	4834      	ldr	r0, [pc, #208]	@ (800b74c <_strtol_l.isra.0+0xf0>)
 800b67c:	460d      	mov	r5, r1
 800b67e:	462a      	mov	r2, r5
 800b680:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b684:	5d06      	ldrb	r6, [r0, r4]
 800b686:	f016 0608 	ands.w	r6, r6, #8
 800b68a:	d1f8      	bne.n	800b67e <_strtol_l.isra.0+0x22>
 800b68c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b68e:	d110      	bne.n	800b6b2 <_strtol_l.isra.0+0x56>
 800b690:	782c      	ldrb	r4, [r5, #0]
 800b692:	2601      	movs	r6, #1
 800b694:	1c95      	adds	r5, r2, #2
 800b696:	f033 0210 	bics.w	r2, r3, #16
 800b69a:	d115      	bne.n	800b6c8 <_strtol_l.isra.0+0x6c>
 800b69c:	2c30      	cmp	r4, #48	@ 0x30
 800b69e:	d10d      	bne.n	800b6bc <_strtol_l.isra.0+0x60>
 800b6a0:	782a      	ldrb	r2, [r5, #0]
 800b6a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b6a6:	2a58      	cmp	r2, #88	@ 0x58
 800b6a8:	d108      	bne.n	800b6bc <_strtol_l.isra.0+0x60>
 800b6aa:	786c      	ldrb	r4, [r5, #1]
 800b6ac:	3502      	adds	r5, #2
 800b6ae:	2310      	movs	r3, #16
 800b6b0:	e00a      	b.n	800b6c8 <_strtol_l.isra.0+0x6c>
 800b6b2:	2c2b      	cmp	r4, #43	@ 0x2b
 800b6b4:	bf04      	itt	eq
 800b6b6:	782c      	ldrbeq	r4, [r5, #0]
 800b6b8:	1c95      	addeq	r5, r2, #2
 800b6ba:	e7ec      	b.n	800b696 <_strtol_l.isra.0+0x3a>
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d1f6      	bne.n	800b6ae <_strtol_l.isra.0+0x52>
 800b6c0:	2c30      	cmp	r4, #48	@ 0x30
 800b6c2:	bf14      	ite	ne
 800b6c4:	230a      	movne	r3, #10
 800b6c6:	2308      	moveq	r3, #8
 800b6c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b6cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	fbbc f9f3 	udiv	r9, ip, r3
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	fb03 ca19 	mls	sl, r3, r9, ip
 800b6dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b6e0:	2f09      	cmp	r7, #9
 800b6e2:	d80f      	bhi.n	800b704 <_strtol_l.isra.0+0xa8>
 800b6e4:	463c      	mov	r4, r7
 800b6e6:	42a3      	cmp	r3, r4
 800b6e8:	dd1b      	ble.n	800b722 <_strtol_l.isra.0+0xc6>
 800b6ea:	1c57      	adds	r7, r2, #1
 800b6ec:	d007      	beq.n	800b6fe <_strtol_l.isra.0+0xa2>
 800b6ee:	4581      	cmp	r9, r0
 800b6f0:	d314      	bcc.n	800b71c <_strtol_l.isra.0+0xc0>
 800b6f2:	d101      	bne.n	800b6f8 <_strtol_l.isra.0+0x9c>
 800b6f4:	45a2      	cmp	sl, r4
 800b6f6:	db11      	blt.n	800b71c <_strtol_l.isra.0+0xc0>
 800b6f8:	fb00 4003 	mla	r0, r0, r3, r4
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b702:	e7eb      	b.n	800b6dc <_strtol_l.isra.0+0x80>
 800b704:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b708:	2f19      	cmp	r7, #25
 800b70a:	d801      	bhi.n	800b710 <_strtol_l.isra.0+0xb4>
 800b70c:	3c37      	subs	r4, #55	@ 0x37
 800b70e:	e7ea      	b.n	800b6e6 <_strtol_l.isra.0+0x8a>
 800b710:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b714:	2f19      	cmp	r7, #25
 800b716:	d804      	bhi.n	800b722 <_strtol_l.isra.0+0xc6>
 800b718:	3c57      	subs	r4, #87	@ 0x57
 800b71a:	e7e4      	b.n	800b6e6 <_strtol_l.isra.0+0x8a>
 800b71c:	f04f 32ff 	mov.w	r2, #4294967295
 800b720:	e7ed      	b.n	800b6fe <_strtol_l.isra.0+0xa2>
 800b722:	1c53      	adds	r3, r2, #1
 800b724:	d108      	bne.n	800b738 <_strtol_l.isra.0+0xdc>
 800b726:	2322      	movs	r3, #34	@ 0x22
 800b728:	f8ce 3000 	str.w	r3, [lr]
 800b72c:	4660      	mov	r0, ip
 800b72e:	f1b8 0f00 	cmp.w	r8, #0
 800b732:	d0a0      	beq.n	800b676 <_strtol_l.isra.0+0x1a>
 800b734:	1e69      	subs	r1, r5, #1
 800b736:	e006      	b.n	800b746 <_strtol_l.isra.0+0xea>
 800b738:	b106      	cbz	r6, 800b73c <_strtol_l.isra.0+0xe0>
 800b73a:	4240      	negs	r0, r0
 800b73c:	f1b8 0f00 	cmp.w	r8, #0
 800b740:	d099      	beq.n	800b676 <_strtol_l.isra.0+0x1a>
 800b742:	2a00      	cmp	r2, #0
 800b744:	d1f6      	bne.n	800b734 <_strtol_l.isra.0+0xd8>
 800b746:	f8c8 1000 	str.w	r1, [r8]
 800b74a:	e794      	b.n	800b676 <_strtol_l.isra.0+0x1a>
 800b74c:	0803c7f1 	.word	0x0803c7f1

0800b750 <_strtol_r>:
 800b750:	f7ff bf84 	b.w	800b65c <_strtol_l.isra.0>

0800b754 <__ssputs_r>:
 800b754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b758:	688e      	ldr	r6, [r1, #8]
 800b75a:	461f      	mov	r7, r3
 800b75c:	42be      	cmp	r6, r7
 800b75e:	680b      	ldr	r3, [r1, #0]
 800b760:	4682      	mov	sl, r0
 800b762:	460c      	mov	r4, r1
 800b764:	4690      	mov	r8, r2
 800b766:	d82d      	bhi.n	800b7c4 <__ssputs_r+0x70>
 800b768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b76c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b770:	d026      	beq.n	800b7c0 <__ssputs_r+0x6c>
 800b772:	6965      	ldr	r5, [r4, #20]
 800b774:	6909      	ldr	r1, [r1, #16]
 800b776:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b77a:	eba3 0901 	sub.w	r9, r3, r1
 800b77e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b782:	1c7b      	adds	r3, r7, #1
 800b784:	444b      	add	r3, r9
 800b786:	106d      	asrs	r5, r5, #1
 800b788:	429d      	cmp	r5, r3
 800b78a:	bf38      	it	cc
 800b78c:	461d      	movcc	r5, r3
 800b78e:	0553      	lsls	r3, r2, #21
 800b790:	d527      	bpl.n	800b7e2 <__ssputs_r+0x8e>
 800b792:	4629      	mov	r1, r5
 800b794:	f7fc fd1a 	bl	80081cc <_malloc_r>
 800b798:	4606      	mov	r6, r0
 800b79a:	b360      	cbz	r0, 800b7f6 <__ssputs_r+0xa2>
 800b79c:	6921      	ldr	r1, [r4, #16]
 800b79e:	464a      	mov	r2, r9
 800b7a0:	f7fd fdf1 	bl	8009386 <memcpy>
 800b7a4:	89a3      	ldrh	r3, [r4, #12]
 800b7a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b7aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7ae:	81a3      	strh	r3, [r4, #12]
 800b7b0:	6126      	str	r6, [r4, #16]
 800b7b2:	6165      	str	r5, [r4, #20]
 800b7b4:	444e      	add	r6, r9
 800b7b6:	eba5 0509 	sub.w	r5, r5, r9
 800b7ba:	6026      	str	r6, [r4, #0]
 800b7bc:	60a5      	str	r5, [r4, #8]
 800b7be:	463e      	mov	r6, r7
 800b7c0:	42be      	cmp	r6, r7
 800b7c2:	d900      	bls.n	800b7c6 <__ssputs_r+0x72>
 800b7c4:	463e      	mov	r6, r7
 800b7c6:	6820      	ldr	r0, [r4, #0]
 800b7c8:	4632      	mov	r2, r6
 800b7ca:	4641      	mov	r1, r8
 800b7cc:	f000 fb9c 	bl	800bf08 <memmove>
 800b7d0:	68a3      	ldr	r3, [r4, #8]
 800b7d2:	1b9b      	subs	r3, r3, r6
 800b7d4:	60a3      	str	r3, [r4, #8]
 800b7d6:	6823      	ldr	r3, [r4, #0]
 800b7d8:	4433      	add	r3, r6
 800b7da:	6023      	str	r3, [r4, #0]
 800b7dc:	2000      	movs	r0, #0
 800b7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7e2:	462a      	mov	r2, r5
 800b7e4:	f000 ff41 	bl	800c66a <_realloc_r>
 800b7e8:	4606      	mov	r6, r0
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	d1e0      	bne.n	800b7b0 <__ssputs_r+0x5c>
 800b7ee:	6921      	ldr	r1, [r4, #16]
 800b7f0:	4650      	mov	r0, sl
 800b7f2:	f7fe fc35 	bl	800a060 <_free_r>
 800b7f6:	230c      	movs	r3, #12
 800b7f8:	f8ca 3000 	str.w	r3, [sl]
 800b7fc:	89a3      	ldrh	r3, [r4, #12]
 800b7fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b802:	81a3      	strh	r3, [r4, #12]
 800b804:	f04f 30ff 	mov.w	r0, #4294967295
 800b808:	e7e9      	b.n	800b7de <__ssputs_r+0x8a>
	...

0800b80c <_svfiprintf_r>:
 800b80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b810:	4698      	mov	r8, r3
 800b812:	898b      	ldrh	r3, [r1, #12]
 800b814:	061b      	lsls	r3, r3, #24
 800b816:	b09d      	sub	sp, #116	@ 0x74
 800b818:	4607      	mov	r7, r0
 800b81a:	460d      	mov	r5, r1
 800b81c:	4614      	mov	r4, r2
 800b81e:	d510      	bpl.n	800b842 <_svfiprintf_r+0x36>
 800b820:	690b      	ldr	r3, [r1, #16]
 800b822:	b973      	cbnz	r3, 800b842 <_svfiprintf_r+0x36>
 800b824:	2140      	movs	r1, #64	@ 0x40
 800b826:	f7fc fcd1 	bl	80081cc <_malloc_r>
 800b82a:	6028      	str	r0, [r5, #0]
 800b82c:	6128      	str	r0, [r5, #16]
 800b82e:	b930      	cbnz	r0, 800b83e <_svfiprintf_r+0x32>
 800b830:	230c      	movs	r3, #12
 800b832:	603b      	str	r3, [r7, #0]
 800b834:	f04f 30ff 	mov.w	r0, #4294967295
 800b838:	b01d      	add	sp, #116	@ 0x74
 800b83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83e:	2340      	movs	r3, #64	@ 0x40
 800b840:	616b      	str	r3, [r5, #20]
 800b842:	2300      	movs	r3, #0
 800b844:	9309      	str	r3, [sp, #36]	@ 0x24
 800b846:	2320      	movs	r3, #32
 800b848:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b84c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b850:	2330      	movs	r3, #48	@ 0x30
 800b852:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b9f0 <_svfiprintf_r+0x1e4>
 800b856:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b85a:	f04f 0901 	mov.w	r9, #1
 800b85e:	4623      	mov	r3, r4
 800b860:	469a      	mov	sl, r3
 800b862:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b866:	b10a      	cbz	r2, 800b86c <_svfiprintf_r+0x60>
 800b868:	2a25      	cmp	r2, #37	@ 0x25
 800b86a:	d1f9      	bne.n	800b860 <_svfiprintf_r+0x54>
 800b86c:	ebba 0b04 	subs.w	fp, sl, r4
 800b870:	d00b      	beq.n	800b88a <_svfiprintf_r+0x7e>
 800b872:	465b      	mov	r3, fp
 800b874:	4622      	mov	r2, r4
 800b876:	4629      	mov	r1, r5
 800b878:	4638      	mov	r0, r7
 800b87a:	f7ff ff6b 	bl	800b754 <__ssputs_r>
 800b87e:	3001      	adds	r0, #1
 800b880:	f000 80a7 	beq.w	800b9d2 <_svfiprintf_r+0x1c6>
 800b884:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b886:	445a      	add	r2, fp
 800b888:	9209      	str	r2, [sp, #36]	@ 0x24
 800b88a:	f89a 3000 	ldrb.w	r3, [sl]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	f000 809f 	beq.w	800b9d2 <_svfiprintf_r+0x1c6>
 800b894:	2300      	movs	r3, #0
 800b896:	f04f 32ff 	mov.w	r2, #4294967295
 800b89a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b89e:	f10a 0a01 	add.w	sl, sl, #1
 800b8a2:	9304      	str	r3, [sp, #16]
 800b8a4:	9307      	str	r3, [sp, #28]
 800b8a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8ac:	4654      	mov	r4, sl
 800b8ae:	2205      	movs	r2, #5
 800b8b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8b4:	484e      	ldr	r0, [pc, #312]	@ (800b9f0 <_svfiprintf_r+0x1e4>)
 800b8b6:	f7f4 fc8b 	bl	80001d0 <memchr>
 800b8ba:	9a04      	ldr	r2, [sp, #16]
 800b8bc:	b9d8      	cbnz	r0, 800b8f6 <_svfiprintf_r+0xea>
 800b8be:	06d0      	lsls	r0, r2, #27
 800b8c0:	bf44      	itt	mi
 800b8c2:	2320      	movmi	r3, #32
 800b8c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8c8:	0711      	lsls	r1, r2, #28
 800b8ca:	bf44      	itt	mi
 800b8cc:	232b      	movmi	r3, #43	@ 0x2b
 800b8ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8d8:	d015      	beq.n	800b906 <_svfiprintf_r+0xfa>
 800b8da:	9a07      	ldr	r2, [sp, #28]
 800b8dc:	4654      	mov	r4, sl
 800b8de:	2000      	movs	r0, #0
 800b8e0:	f04f 0c0a 	mov.w	ip, #10
 800b8e4:	4621      	mov	r1, r4
 800b8e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8ea:	3b30      	subs	r3, #48	@ 0x30
 800b8ec:	2b09      	cmp	r3, #9
 800b8ee:	d94b      	bls.n	800b988 <_svfiprintf_r+0x17c>
 800b8f0:	b1b0      	cbz	r0, 800b920 <_svfiprintf_r+0x114>
 800b8f2:	9207      	str	r2, [sp, #28]
 800b8f4:	e014      	b.n	800b920 <_svfiprintf_r+0x114>
 800b8f6:	eba0 0308 	sub.w	r3, r0, r8
 800b8fa:	fa09 f303 	lsl.w	r3, r9, r3
 800b8fe:	4313      	orrs	r3, r2
 800b900:	9304      	str	r3, [sp, #16]
 800b902:	46a2      	mov	sl, r4
 800b904:	e7d2      	b.n	800b8ac <_svfiprintf_r+0xa0>
 800b906:	9b03      	ldr	r3, [sp, #12]
 800b908:	1d19      	adds	r1, r3, #4
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	9103      	str	r1, [sp, #12]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	bfbb      	ittet	lt
 800b912:	425b      	neglt	r3, r3
 800b914:	f042 0202 	orrlt.w	r2, r2, #2
 800b918:	9307      	strge	r3, [sp, #28]
 800b91a:	9307      	strlt	r3, [sp, #28]
 800b91c:	bfb8      	it	lt
 800b91e:	9204      	strlt	r2, [sp, #16]
 800b920:	7823      	ldrb	r3, [r4, #0]
 800b922:	2b2e      	cmp	r3, #46	@ 0x2e
 800b924:	d10a      	bne.n	800b93c <_svfiprintf_r+0x130>
 800b926:	7863      	ldrb	r3, [r4, #1]
 800b928:	2b2a      	cmp	r3, #42	@ 0x2a
 800b92a:	d132      	bne.n	800b992 <_svfiprintf_r+0x186>
 800b92c:	9b03      	ldr	r3, [sp, #12]
 800b92e:	1d1a      	adds	r2, r3, #4
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	9203      	str	r2, [sp, #12]
 800b934:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b938:	3402      	adds	r4, #2
 800b93a:	9305      	str	r3, [sp, #20]
 800b93c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ba00 <_svfiprintf_r+0x1f4>
 800b940:	7821      	ldrb	r1, [r4, #0]
 800b942:	2203      	movs	r2, #3
 800b944:	4650      	mov	r0, sl
 800b946:	f7f4 fc43 	bl	80001d0 <memchr>
 800b94a:	b138      	cbz	r0, 800b95c <_svfiprintf_r+0x150>
 800b94c:	9b04      	ldr	r3, [sp, #16]
 800b94e:	eba0 000a 	sub.w	r0, r0, sl
 800b952:	2240      	movs	r2, #64	@ 0x40
 800b954:	4082      	lsls	r2, r0
 800b956:	4313      	orrs	r3, r2
 800b958:	3401      	adds	r4, #1
 800b95a:	9304      	str	r3, [sp, #16]
 800b95c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b960:	4824      	ldr	r0, [pc, #144]	@ (800b9f4 <_svfiprintf_r+0x1e8>)
 800b962:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b966:	2206      	movs	r2, #6
 800b968:	f7f4 fc32 	bl	80001d0 <memchr>
 800b96c:	2800      	cmp	r0, #0
 800b96e:	d036      	beq.n	800b9de <_svfiprintf_r+0x1d2>
 800b970:	4b21      	ldr	r3, [pc, #132]	@ (800b9f8 <_svfiprintf_r+0x1ec>)
 800b972:	bb1b      	cbnz	r3, 800b9bc <_svfiprintf_r+0x1b0>
 800b974:	9b03      	ldr	r3, [sp, #12]
 800b976:	3307      	adds	r3, #7
 800b978:	f023 0307 	bic.w	r3, r3, #7
 800b97c:	3308      	adds	r3, #8
 800b97e:	9303      	str	r3, [sp, #12]
 800b980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b982:	4433      	add	r3, r6
 800b984:	9309      	str	r3, [sp, #36]	@ 0x24
 800b986:	e76a      	b.n	800b85e <_svfiprintf_r+0x52>
 800b988:	fb0c 3202 	mla	r2, ip, r2, r3
 800b98c:	460c      	mov	r4, r1
 800b98e:	2001      	movs	r0, #1
 800b990:	e7a8      	b.n	800b8e4 <_svfiprintf_r+0xd8>
 800b992:	2300      	movs	r3, #0
 800b994:	3401      	adds	r4, #1
 800b996:	9305      	str	r3, [sp, #20]
 800b998:	4619      	mov	r1, r3
 800b99a:	f04f 0c0a 	mov.w	ip, #10
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9a4:	3a30      	subs	r2, #48	@ 0x30
 800b9a6:	2a09      	cmp	r2, #9
 800b9a8:	d903      	bls.n	800b9b2 <_svfiprintf_r+0x1a6>
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d0c6      	beq.n	800b93c <_svfiprintf_r+0x130>
 800b9ae:	9105      	str	r1, [sp, #20]
 800b9b0:	e7c4      	b.n	800b93c <_svfiprintf_r+0x130>
 800b9b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e7f0      	b.n	800b99e <_svfiprintf_r+0x192>
 800b9bc:	ab03      	add	r3, sp, #12
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	462a      	mov	r2, r5
 800b9c2:	4b0e      	ldr	r3, [pc, #56]	@ (800b9fc <_svfiprintf_r+0x1f0>)
 800b9c4:	a904      	add	r1, sp, #16
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	f7fc fd2c 	bl	8008424 <_printf_float>
 800b9cc:	1c42      	adds	r2, r0, #1
 800b9ce:	4606      	mov	r6, r0
 800b9d0:	d1d6      	bne.n	800b980 <_svfiprintf_r+0x174>
 800b9d2:	89ab      	ldrh	r3, [r5, #12]
 800b9d4:	065b      	lsls	r3, r3, #25
 800b9d6:	f53f af2d 	bmi.w	800b834 <_svfiprintf_r+0x28>
 800b9da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9dc:	e72c      	b.n	800b838 <_svfiprintf_r+0x2c>
 800b9de:	ab03      	add	r3, sp, #12
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	462a      	mov	r2, r5
 800b9e4:	4b05      	ldr	r3, [pc, #20]	@ (800b9fc <_svfiprintf_r+0x1f0>)
 800b9e6:	a904      	add	r1, sp, #16
 800b9e8:	4638      	mov	r0, r7
 800b9ea:	f7fc ffb3 	bl	8008954 <_printf_i>
 800b9ee:	e7ed      	b.n	800b9cc <_svfiprintf_r+0x1c0>
 800b9f0:	0803c5e9 	.word	0x0803c5e9
 800b9f4:	0803c5f3 	.word	0x0803c5f3
 800b9f8:	08008425 	.word	0x08008425
 800b9fc:	0800b755 	.word	0x0800b755
 800ba00:	0803c5ef 	.word	0x0803c5ef

0800ba04 <__sfputc_r>:
 800ba04:	6893      	ldr	r3, [r2, #8]
 800ba06:	3b01      	subs	r3, #1
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	b410      	push	{r4}
 800ba0c:	6093      	str	r3, [r2, #8]
 800ba0e:	da08      	bge.n	800ba22 <__sfputc_r+0x1e>
 800ba10:	6994      	ldr	r4, [r2, #24]
 800ba12:	42a3      	cmp	r3, r4
 800ba14:	db01      	blt.n	800ba1a <__sfputc_r+0x16>
 800ba16:	290a      	cmp	r1, #10
 800ba18:	d103      	bne.n	800ba22 <__sfputc_r+0x1e>
 800ba1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba1e:	f000 b9df 	b.w	800bde0 <__swbuf_r>
 800ba22:	6813      	ldr	r3, [r2, #0]
 800ba24:	1c58      	adds	r0, r3, #1
 800ba26:	6010      	str	r0, [r2, #0]
 800ba28:	7019      	strb	r1, [r3, #0]
 800ba2a:	4608      	mov	r0, r1
 800ba2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <__sfputs_r>:
 800ba32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba34:	4606      	mov	r6, r0
 800ba36:	460f      	mov	r7, r1
 800ba38:	4614      	mov	r4, r2
 800ba3a:	18d5      	adds	r5, r2, r3
 800ba3c:	42ac      	cmp	r4, r5
 800ba3e:	d101      	bne.n	800ba44 <__sfputs_r+0x12>
 800ba40:	2000      	movs	r0, #0
 800ba42:	e007      	b.n	800ba54 <__sfputs_r+0x22>
 800ba44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba48:	463a      	mov	r2, r7
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f7ff ffda 	bl	800ba04 <__sfputc_r>
 800ba50:	1c43      	adds	r3, r0, #1
 800ba52:	d1f3      	bne.n	800ba3c <__sfputs_r+0xa>
 800ba54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba58 <_vfiprintf_r>:
 800ba58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5c:	460d      	mov	r5, r1
 800ba5e:	b09d      	sub	sp, #116	@ 0x74
 800ba60:	4614      	mov	r4, r2
 800ba62:	4698      	mov	r8, r3
 800ba64:	4606      	mov	r6, r0
 800ba66:	b118      	cbz	r0, 800ba70 <_vfiprintf_r+0x18>
 800ba68:	6a03      	ldr	r3, [r0, #32]
 800ba6a:	b90b      	cbnz	r3, 800ba70 <_vfiprintf_r+0x18>
 800ba6c:	f7fd fb2a 	bl	80090c4 <__sinit>
 800ba70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba72:	07d9      	lsls	r1, r3, #31
 800ba74:	d405      	bmi.n	800ba82 <_vfiprintf_r+0x2a>
 800ba76:	89ab      	ldrh	r3, [r5, #12]
 800ba78:	059a      	lsls	r2, r3, #22
 800ba7a:	d402      	bmi.n	800ba82 <_vfiprintf_r+0x2a>
 800ba7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba7e:	f7fd fc80 	bl	8009382 <__retarget_lock_acquire_recursive>
 800ba82:	89ab      	ldrh	r3, [r5, #12]
 800ba84:	071b      	lsls	r3, r3, #28
 800ba86:	d501      	bpl.n	800ba8c <_vfiprintf_r+0x34>
 800ba88:	692b      	ldr	r3, [r5, #16]
 800ba8a:	b99b      	cbnz	r3, 800bab4 <_vfiprintf_r+0x5c>
 800ba8c:	4629      	mov	r1, r5
 800ba8e:	4630      	mov	r0, r6
 800ba90:	f000 f9e4 	bl	800be5c <__swsetup_r>
 800ba94:	b170      	cbz	r0, 800bab4 <_vfiprintf_r+0x5c>
 800ba96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba98:	07dc      	lsls	r4, r3, #31
 800ba9a:	d504      	bpl.n	800baa6 <_vfiprintf_r+0x4e>
 800ba9c:	f04f 30ff 	mov.w	r0, #4294967295
 800baa0:	b01d      	add	sp, #116	@ 0x74
 800baa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa6:	89ab      	ldrh	r3, [r5, #12]
 800baa8:	0598      	lsls	r0, r3, #22
 800baaa:	d4f7      	bmi.n	800ba9c <_vfiprintf_r+0x44>
 800baac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baae:	f7fd fc69 	bl	8009384 <__retarget_lock_release_recursive>
 800bab2:	e7f3      	b.n	800ba9c <_vfiprintf_r+0x44>
 800bab4:	2300      	movs	r3, #0
 800bab6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bab8:	2320      	movs	r3, #32
 800baba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800babe:	f8cd 800c 	str.w	r8, [sp, #12]
 800bac2:	2330      	movs	r3, #48	@ 0x30
 800bac4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc74 <_vfiprintf_r+0x21c>
 800bac8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bacc:	f04f 0901 	mov.w	r9, #1
 800bad0:	4623      	mov	r3, r4
 800bad2:	469a      	mov	sl, r3
 800bad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bad8:	b10a      	cbz	r2, 800bade <_vfiprintf_r+0x86>
 800bada:	2a25      	cmp	r2, #37	@ 0x25
 800badc:	d1f9      	bne.n	800bad2 <_vfiprintf_r+0x7a>
 800bade:	ebba 0b04 	subs.w	fp, sl, r4
 800bae2:	d00b      	beq.n	800bafc <_vfiprintf_r+0xa4>
 800bae4:	465b      	mov	r3, fp
 800bae6:	4622      	mov	r2, r4
 800bae8:	4629      	mov	r1, r5
 800baea:	4630      	mov	r0, r6
 800baec:	f7ff ffa1 	bl	800ba32 <__sfputs_r>
 800baf0:	3001      	adds	r0, #1
 800baf2:	f000 80a7 	beq.w	800bc44 <_vfiprintf_r+0x1ec>
 800baf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800baf8:	445a      	add	r2, fp
 800bafa:	9209      	str	r2, [sp, #36]	@ 0x24
 800bafc:	f89a 3000 	ldrb.w	r3, [sl]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f000 809f 	beq.w	800bc44 <_vfiprintf_r+0x1ec>
 800bb06:	2300      	movs	r3, #0
 800bb08:	f04f 32ff 	mov.w	r2, #4294967295
 800bb0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb10:	f10a 0a01 	add.w	sl, sl, #1
 800bb14:	9304      	str	r3, [sp, #16]
 800bb16:	9307      	str	r3, [sp, #28]
 800bb18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb1c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb1e:	4654      	mov	r4, sl
 800bb20:	2205      	movs	r2, #5
 800bb22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb26:	4853      	ldr	r0, [pc, #332]	@ (800bc74 <_vfiprintf_r+0x21c>)
 800bb28:	f7f4 fb52 	bl	80001d0 <memchr>
 800bb2c:	9a04      	ldr	r2, [sp, #16]
 800bb2e:	b9d8      	cbnz	r0, 800bb68 <_vfiprintf_r+0x110>
 800bb30:	06d1      	lsls	r1, r2, #27
 800bb32:	bf44      	itt	mi
 800bb34:	2320      	movmi	r3, #32
 800bb36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb3a:	0713      	lsls	r3, r2, #28
 800bb3c:	bf44      	itt	mi
 800bb3e:	232b      	movmi	r3, #43	@ 0x2b
 800bb40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb44:	f89a 3000 	ldrb.w	r3, [sl]
 800bb48:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb4a:	d015      	beq.n	800bb78 <_vfiprintf_r+0x120>
 800bb4c:	9a07      	ldr	r2, [sp, #28]
 800bb4e:	4654      	mov	r4, sl
 800bb50:	2000      	movs	r0, #0
 800bb52:	f04f 0c0a 	mov.w	ip, #10
 800bb56:	4621      	mov	r1, r4
 800bb58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb5c:	3b30      	subs	r3, #48	@ 0x30
 800bb5e:	2b09      	cmp	r3, #9
 800bb60:	d94b      	bls.n	800bbfa <_vfiprintf_r+0x1a2>
 800bb62:	b1b0      	cbz	r0, 800bb92 <_vfiprintf_r+0x13a>
 800bb64:	9207      	str	r2, [sp, #28]
 800bb66:	e014      	b.n	800bb92 <_vfiprintf_r+0x13a>
 800bb68:	eba0 0308 	sub.w	r3, r0, r8
 800bb6c:	fa09 f303 	lsl.w	r3, r9, r3
 800bb70:	4313      	orrs	r3, r2
 800bb72:	9304      	str	r3, [sp, #16]
 800bb74:	46a2      	mov	sl, r4
 800bb76:	e7d2      	b.n	800bb1e <_vfiprintf_r+0xc6>
 800bb78:	9b03      	ldr	r3, [sp, #12]
 800bb7a:	1d19      	adds	r1, r3, #4
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	9103      	str	r1, [sp, #12]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	bfbb      	ittet	lt
 800bb84:	425b      	neglt	r3, r3
 800bb86:	f042 0202 	orrlt.w	r2, r2, #2
 800bb8a:	9307      	strge	r3, [sp, #28]
 800bb8c:	9307      	strlt	r3, [sp, #28]
 800bb8e:	bfb8      	it	lt
 800bb90:	9204      	strlt	r2, [sp, #16]
 800bb92:	7823      	ldrb	r3, [r4, #0]
 800bb94:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb96:	d10a      	bne.n	800bbae <_vfiprintf_r+0x156>
 800bb98:	7863      	ldrb	r3, [r4, #1]
 800bb9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb9c:	d132      	bne.n	800bc04 <_vfiprintf_r+0x1ac>
 800bb9e:	9b03      	ldr	r3, [sp, #12]
 800bba0:	1d1a      	adds	r2, r3, #4
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	9203      	str	r2, [sp, #12]
 800bba6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbaa:	3402      	adds	r4, #2
 800bbac:	9305      	str	r3, [sp, #20]
 800bbae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc84 <_vfiprintf_r+0x22c>
 800bbb2:	7821      	ldrb	r1, [r4, #0]
 800bbb4:	2203      	movs	r2, #3
 800bbb6:	4650      	mov	r0, sl
 800bbb8:	f7f4 fb0a 	bl	80001d0 <memchr>
 800bbbc:	b138      	cbz	r0, 800bbce <_vfiprintf_r+0x176>
 800bbbe:	9b04      	ldr	r3, [sp, #16]
 800bbc0:	eba0 000a 	sub.w	r0, r0, sl
 800bbc4:	2240      	movs	r2, #64	@ 0x40
 800bbc6:	4082      	lsls	r2, r0
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	3401      	adds	r4, #1
 800bbcc:	9304      	str	r3, [sp, #16]
 800bbce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd2:	4829      	ldr	r0, [pc, #164]	@ (800bc78 <_vfiprintf_r+0x220>)
 800bbd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbd8:	2206      	movs	r2, #6
 800bbda:	f7f4 faf9 	bl	80001d0 <memchr>
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d03f      	beq.n	800bc62 <_vfiprintf_r+0x20a>
 800bbe2:	4b26      	ldr	r3, [pc, #152]	@ (800bc7c <_vfiprintf_r+0x224>)
 800bbe4:	bb1b      	cbnz	r3, 800bc2e <_vfiprintf_r+0x1d6>
 800bbe6:	9b03      	ldr	r3, [sp, #12]
 800bbe8:	3307      	adds	r3, #7
 800bbea:	f023 0307 	bic.w	r3, r3, #7
 800bbee:	3308      	adds	r3, #8
 800bbf0:	9303      	str	r3, [sp, #12]
 800bbf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf4:	443b      	add	r3, r7
 800bbf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbf8:	e76a      	b.n	800bad0 <_vfiprintf_r+0x78>
 800bbfa:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbfe:	460c      	mov	r4, r1
 800bc00:	2001      	movs	r0, #1
 800bc02:	e7a8      	b.n	800bb56 <_vfiprintf_r+0xfe>
 800bc04:	2300      	movs	r3, #0
 800bc06:	3401      	adds	r4, #1
 800bc08:	9305      	str	r3, [sp, #20]
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	f04f 0c0a 	mov.w	ip, #10
 800bc10:	4620      	mov	r0, r4
 800bc12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc16:	3a30      	subs	r2, #48	@ 0x30
 800bc18:	2a09      	cmp	r2, #9
 800bc1a:	d903      	bls.n	800bc24 <_vfiprintf_r+0x1cc>
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d0c6      	beq.n	800bbae <_vfiprintf_r+0x156>
 800bc20:	9105      	str	r1, [sp, #20]
 800bc22:	e7c4      	b.n	800bbae <_vfiprintf_r+0x156>
 800bc24:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc28:	4604      	mov	r4, r0
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e7f0      	b.n	800bc10 <_vfiprintf_r+0x1b8>
 800bc2e:	ab03      	add	r3, sp, #12
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	462a      	mov	r2, r5
 800bc34:	4b12      	ldr	r3, [pc, #72]	@ (800bc80 <_vfiprintf_r+0x228>)
 800bc36:	a904      	add	r1, sp, #16
 800bc38:	4630      	mov	r0, r6
 800bc3a:	f7fc fbf3 	bl	8008424 <_printf_float>
 800bc3e:	4607      	mov	r7, r0
 800bc40:	1c78      	adds	r0, r7, #1
 800bc42:	d1d6      	bne.n	800bbf2 <_vfiprintf_r+0x19a>
 800bc44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc46:	07d9      	lsls	r1, r3, #31
 800bc48:	d405      	bmi.n	800bc56 <_vfiprintf_r+0x1fe>
 800bc4a:	89ab      	ldrh	r3, [r5, #12]
 800bc4c:	059a      	lsls	r2, r3, #22
 800bc4e:	d402      	bmi.n	800bc56 <_vfiprintf_r+0x1fe>
 800bc50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc52:	f7fd fb97 	bl	8009384 <__retarget_lock_release_recursive>
 800bc56:	89ab      	ldrh	r3, [r5, #12]
 800bc58:	065b      	lsls	r3, r3, #25
 800bc5a:	f53f af1f 	bmi.w	800ba9c <_vfiprintf_r+0x44>
 800bc5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc60:	e71e      	b.n	800baa0 <_vfiprintf_r+0x48>
 800bc62:	ab03      	add	r3, sp, #12
 800bc64:	9300      	str	r3, [sp, #0]
 800bc66:	462a      	mov	r2, r5
 800bc68:	4b05      	ldr	r3, [pc, #20]	@ (800bc80 <_vfiprintf_r+0x228>)
 800bc6a:	a904      	add	r1, sp, #16
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	f7fc fe71 	bl	8008954 <_printf_i>
 800bc72:	e7e4      	b.n	800bc3e <_vfiprintf_r+0x1e6>
 800bc74:	0803c5e9 	.word	0x0803c5e9
 800bc78:	0803c5f3 	.word	0x0803c5f3
 800bc7c:	08008425 	.word	0x08008425
 800bc80:	0800ba33 	.word	0x0800ba33
 800bc84:	0803c5ef 	.word	0x0803c5ef

0800bc88 <__sflush_r>:
 800bc88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc90:	0716      	lsls	r6, r2, #28
 800bc92:	4605      	mov	r5, r0
 800bc94:	460c      	mov	r4, r1
 800bc96:	d454      	bmi.n	800bd42 <__sflush_r+0xba>
 800bc98:	684b      	ldr	r3, [r1, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	dc02      	bgt.n	800bca4 <__sflush_r+0x1c>
 800bc9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	dd48      	ble.n	800bd36 <__sflush_r+0xae>
 800bca4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bca6:	2e00      	cmp	r6, #0
 800bca8:	d045      	beq.n	800bd36 <__sflush_r+0xae>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bcb0:	682f      	ldr	r7, [r5, #0]
 800bcb2:	6a21      	ldr	r1, [r4, #32]
 800bcb4:	602b      	str	r3, [r5, #0]
 800bcb6:	d030      	beq.n	800bd1a <__sflush_r+0x92>
 800bcb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcba:	89a3      	ldrh	r3, [r4, #12]
 800bcbc:	0759      	lsls	r1, r3, #29
 800bcbe:	d505      	bpl.n	800bccc <__sflush_r+0x44>
 800bcc0:	6863      	ldr	r3, [r4, #4]
 800bcc2:	1ad2      	subs	r2, r2, r3
 800bcc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bcc6:	b10b      	cbz	r3, 800bccc <__sflush_r+0x44>
 800bcc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcca:	1ad2      	subs	r2, r2, r3
 800bccc:	2300      	movs	r3, #0
 800bcce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcd0:	6a21      	ldr	r1, [r4, #32]
 800bcd2:	4628      	mov	r0, r5
 800bcd4:	47b0      	blx	r6
 800bcd6:	1c43      	adds	r3, r0, #1
 800bcd8:	89a3      	ldrh	r3, [r4, #12]
 800bcda:	d106      	bne.n	800bcea <__sflush_r+0x62>
 800bcdc:	6829      	ldr	r1, [r5, #0]
 800bcde:	291d      	cmp	r1, #29
 800bce0:	d82b      	bhi.n	800bd3a <__sflush_r+0xb2>
 800bce2:	4a2a      	ldr	r2, [pc, #168]	@ (800bd8c <__sflush_r+0x104>)
 800bce4:	40ca      	lsrs	r2, r1
 800bce6:	07d6      	lsls	r6, r2, #31
 800bce8:	d527      	bpl.n	800bd3a <__sflush_r+0xb2>
 800bcea:	2200      	movs	r2, #0
 800bcec:	6062      	str	r2, [r4, #4]
 800bcee:	04d9      	lsls	r1, r3, #19
 800bcf0:	6922      	ldr	r2, [r4, #16]
 800bcf2:	6022      	str	r2, [r4, #0]
 800bcf4:	d504      	bpl.n	800bd00 <__sflush_r+0x78>
 800bcf6:	1c42      	adds	r2, r0, #1
 800bcf8:	d101      	bne.n	800bcfe <__sflush_r+0x76>
 800bcfa:	682b      	ldr	r3, [r5, #0]
 800bcfc:	b903      	cbnz	r3, 800bd00 <__sflush_r+0x78>
 800bcfe:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd02:	602f      	str	r7, [r5, #0]
 800bd04:	b1b9      	cbz	r1, 800bd36 <__sflush_r+0xae>
 800bd06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd0a:	4299      	cmp	r1, r3
 800bd0c:	d002      	beq.n	800bd14 <__sflush_r+0x8c>
 800bd0e:	4628      	mov	r0, r5
 800bd10:	f7fe f9a6 	bl	800a060 <_free_r>
 800bd14:	2300      	movs	r3, #0
 800bd16:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd18:	e00d      	b.n	800bd36 <__sflush_r+0xae>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	47b0      	blx	r6
 800bd20:	4602      	mov	r2, r0
 800bd22:	1c50      	adds	r0, r2, #1
 800bd24:	d1c9      	bne.n	800bcba <__sflush_r+0x32>
 800bd26:	682b      	ldr	r3, [r5, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d0c6      	beq.n	800bcba <__sflush_r+0x32>
 800bd2c:	2b1d      	cmp	r3, #29
 800bd2e:	d001      	beq.n	800bd34 <__sflush_r+0xac>
 800bd30:	2b16      	cmp	r3, #22
 800bd32:	d11e      	bne.n	800bd72 <__sflush_r+0xea>
 800bd34:	602f      	str	r7, [r5, #0]
 800bd36:	2000      	movs	r0, #0
 800bd38:	e022      	b.n	800bd80 <__sflush_r+0xf8>
 800bd3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd3e:	b21b      	sxth	r3, r3
 800bd40:	e01b      	b.n	800bd7a <__sflush_r+0xf2>
 800bd42:	690f      	ldr	r7, [r1, #16]
 800bd44:	2f00      	cmp	r7, #0
 800bd46:	d0f6      	beq.n	800bd36 <__sflush_r+0xae>
 800bd48:	0793      	lsls	r3, r2, #30
 800bd4a:	680e      	ldr	r6, [r1, #0]
 800bd4c:	bf08      	it	eq
 800bd4e:	694b      	ldreq	r3, [r1, #20]
 800bd50:	600f      	str	r7, [r1, #0]
 800bd52:	bf18      	it	ne
 800bd54:	2300      	movne	r3, #0
 800bd56:	eba6 0807 	sub.w	r8, r6, r7
 800bd5a:	608b      	str	r3, [r1, #8]
 800bd5c:	f1b8 0f00 	cmp.w	r8, #0
 800bd60:	dde9      	ble.n	800bd36 <__sflush_r+0xae>
 800bd62:	6a21      	ldr	r1, [r4, #32]
 800bd64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd66:	4643      	mov	r3, r8
 800bd68:	463a      	mov	r2, r7
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	47b0      	blx	r6
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	dc08      	bgt.n	800bd84 <__sflush_r+0xfc>
 800bd72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd7a:	81a3      	strh	r3, [r4, #12]
 800bd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd84:	4407      	add	r7, r0
 800bd86:	eba8 0800 	sub.w	r8, r8, r0
 800bd8a:	e7e7      	b.n	800bd5c <__sflush_r+0xd4>
 800bd8c:	20400001 	.word	0x20400001

0800bd90 <_fflush_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	690b      	ldr	r3, [r1, #16]
 800bd94:	4605      	mov	r5, r0
 800bd96:	460c      	mov	r4, r1
 800bd98:	b913      	cbnz	r3, 800bda0 <_fflush_r+0x10>
 800bd9a:	2500      	movs	r5, #0
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	bd38      	pop	{r3, r4, r5, pc}
 800bda0:	b118      	cbz	r0, 800bdaa <_fflush_r+0x1a>
 800bda2:	6a03      	ldr	r3, [r0, #32]
 800bda4:	b90b      	cbnz	r3, 800bdaa <_fflush_r+0x1a>
 800bda6:	f7fd f98d 	bl	80090c4 <__sinit>
 800bdaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d0f3      	beq.n	800bd9a <_fflush_r+0xa>
 800bdb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bdb4:	07d0      	lsls	r0, r2, #31
 800bdb6:	d404      	bmi.n	800bdc2 <_fflush_r+0x32>
 800bdb8:	0599      	lsls	r1, r3, #22
 800bdba:	d402      	bmi.n	800bdc2 <_fflush_r+0x32>
 800bdbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdbe:	f7fd fae0 	bl	8009382 <__retarget_lock_acquire_recursive>
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	f7ff ff5f 	bl	800bc88 <__sflush_r>
 800bdca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bdcc:	07da      	lsls	r2, r3, #31
 800bdce:	4605      	mov	r5, r0
 800bdd0:	d4e4      	bmi.n	800bd9c <_fflush_r+0xc>
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	059b      	lsls	r3, r3, #22
 800bdd6:	d4e1      	bmi.n	800bd9c <_fflush_r+0xc>
 800bdd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdda:	f7fd fad3 	bl	8009384 <__retarget_lock_release_recursive>
 800bdde:	e7dd      	b.n	800bd9c <_fflush_r+0xc>

0800bde0 <__swbuf_r>:
 800bde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde2:	460e      	mov	r6, r1
 800bde4:	4614      	mov	r4, r2
 800bde6:	4605      	mov	r5, r0
 800bde8:	b118      	cbz	r0, 800bdf2 <__swbuf_r+0x12>
 800bdea:	6a03      	ldr	r3, [r0, #32]
 800bdec:	b90b      	cbnz	r3, 800bdf2 <__swbuf_r+0x12>
 800bdee:	f7fd f969 	bl	80090c4 <__sinit>
 800bdf2:	69a3      	ldr	r3, [r4, #24]
 800bdf4:	60a3      	str	r3, [r4, #8]
 800bdf6:	89a3      	ldrh	r3, [r4, #12]
 800bdf8:	071a      	lsls	r2, r3, #28
 800bdfa:	d501      	bpl.n	800be00 <__swbuf_r+0x20>
 800bdfc:	6923      	ldr	r3, [r4, #16]
 800bdfe:	b943      	cbnz	r3, 800be12 <__swbuf_r+0x32>
 800be00:	4621      	mov	r1, r4
 800be02:	4628      	mov	r0, r5
 800be04:	f000 f82a 	bl	800be5c <__swsetup_r>
 800be08:	b118      	cbz	r0, 800be12 <__swbuf_r+0x32>
 800be0a:	f04f 37ff 	mov.w	r7, #4294967295
 800be0e:	4638      	mov	r0, r7
 800be10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	6922      	ldr	r2, [r4, #16]
 800be16:	1a98      	subs	r0, r3, r2
 800be18:	6963      	ldr	r3, [r4, #20]
 800be1a:	b2f6      	uxtb	r6, r6
 800be1c:	4283      	cmp	r3, r0
 800be1e:	4637      	mov	r7, r6
 800be20:	dc05      	bgt.n	800be2e <__swbuf_r+0x4e>
 800be22:	4621      	mov	r1, r4
 800be24:	4628      	mov	r0, r5
 800be26:	f7ff ffb3 	bl	800bd90 <_fflush_r>
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d1ed      	bne.n	800be0a <__swbuf_r+0x2a>
 800be2e:	68a3      	ldr	r3, [r4, #8]
 800be30:	3b01      	subs	r3, #1
 800be32:	60a3      	str	r3, [r4, #8]
 800be34:	6823      	ldr	r3, [r4, #0]
 800be36:	1c5a      	adds	r2, r3, #1
 800be38:	6022      	str	r2, [r4, #0]
 800be3a:	701e      	strb	r6, [r3, #0]
 800be3c:	6962      	ldr	r2, [r4, #20]
 800be3e:	1c43      	adds	r3, r0, #1
 800be40:	429a      	cmp	r2, r3
 800be42:	d004      	beq.n	800be4e <__swbuf_r+0x6e>
 800be44:	89a3      	ldrh	r3, [r4, #12]
 800be46:	07db      	lsls	r3, r3, #31
 800be48:	d5e1      	bpl.n	800be0e <__swbuf_r+0x2e>
 800be4a:	2e0a      	cmp	r6, #10
 800be4c:	d1df      	bne.n	800be0e <__swbuf_r+0x2e>
 800be4e:	4621      	mov	r1, r4
 800be50:	4628      	mov	r0, r5
 800be52:	f7ff ff9d 	bl	800bd90 <_fflush_r>
 800be56:	2800      	cmp	r0, #0
 800be58:	d0d9      	beq.n	800be0e <__swbuf_r+0x2e>
 800be5a:	e7d6      	b.n	800be0a <__swbuf_r+0x2a>

0800be5c <__swsetup_r>:
 800be5c:	b538      	push	{r3, r4, r5, lr}
 800be5e:	4b29      	ldr	r3, [pc, #164]	@ (800bf04 <__swsetup_r+0xa8>)
 800be60:	4605      	mov	r5, r0
 800be62:	6818      	ldr	r0, [r3, #0]
 800be64:	460c      	mov	r4, r1
 800be66:	b118      	cbz	r0, 800be70 <__swsetup_r+0x14>
 800be68:	6a03      	ldr	r3, [r0, #32]
 800be6a:	b90b      	cbnz	r3, 800be70 <__swsetup_r+0x14>
 800be6c:	f7fd f92a 	bl	80090c4 <__sinit>
 800be70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be74:	0719      	lsls	r1, r3, #28
 800be76:	d422      	bmi.n	800bebe <__swsetup_r+0x62>
 800be78:	06da      	lsls	r2, r3, #27
 800be7a:	d407      	bmi.n	800be8c <__swsetup_r+0x30>
 800be7c:	2209      	movs	r2, #9
 800be7e:	602a      	str	r2, [r5, #0]
 800be80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be84:	81a3      	strh	r3, [r4, #12]
 800be86:	f04f 30ff 	mov.w	r0, #4294967295
 800be8a:	e033      	b.n	800bef4 <__swsetup_r+0x98>
 800be8c:	0758      	lsls	r0, r3, #29
 800be8e:	d512      	bpl.n	800beb6 <__swsetup_r+0x5a>
 800be90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be92:	b141      	cbz	r1, 800bea6 <__swsetup_r+0x4a>
 800be94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be98:	4299      	cmp	r1, r3
 800be9a:	d002      	beq.n	800bea2 <__swsetup_r+0x46>
 800be9c:	4628      	mov	r0, r5
 800be9e:	f7fe f8df 	bl	800a060 <_free_r>
 800bea2:	2300      	movs	r3, #0
 800bea4:	6363      	str	r3, [r4, #52]	@ 0x34
 800bea6:	89a3      	ldrh	r3, [r4, #12]
 800bea8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800beac:	81a3      	strh	r3, [r4, #12]
 800beae:	2300      	movs	r3, #0
 800beb0:	6063      	str	r3, [r4, #4]
 800beb2:	6923      	ldr	r3, [r4, #16]
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	89a3      	ldrh	r3, [r4, #12]
 800beb8:	f043 0308 	orr.w	r3, r3, #8
 800bebc:	81a3      	strh	r3, [r4, #12]
 800bebe:	6923      	ldr	r3, [r4, #16]
 800bec0:	b94b      	cbnz	r3, 800bed6 <__swsetup_r+0x7a>
 800bec2:	89a3      	ldrh	r3, [r4, #12]
 800bec4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800becc:	d003      	beq.n	800bed6 <__swsetup_r+0x7a>
 800bece:	4621      	mov	r1, r4
 800bed0:	4628      	mov	r0, r5
 800bed2:	f000 fc3d 	bl	800c750 <__smakebuf_r>
 800bed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beda:	f013 0201 	ands.w	r2, r3, #1
 800bede:	d00a      	beq.n	800bef6 <__swsetup_r+0x9a>
 800bee0:	2200      	movs	r2, #0
 800bee2:	60a2      	str	r2, [r4, #8]
 800bee4:	6962      	ldr	r2, [r4, #20]
 800bee6:	4252      	negs	r2, r2
 800bee8:	61a2      	str	r2, [r4, #24]
 800beea:	6922      	ldr	r2, [r4, #16]
 800beec:	b942      	cbnz	r2, 800bf00 <__swsetup_r+0xa4>
 800beee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bef2:	d1c5      	bne.n	800be80 <__swsetup_r+0x24>
 800bef4:	bd38      	pop	{r3, r4, r5, pc}
 800bef6:	0799      	lsls	r1, r3, #30
 800bef8:	bf58      	it	pl
 800befa:	6962      	ldrpl	r2, [r4, #20]
 800befc:	60a2      	str	r2, [r4, #8]
 800befe:	e7f4      	b.n	800beea <__swsetup_r+0x8e>
 800bf00:	2000      	movs	r0, #0
 800bf02:	e7f7      	b.n	800bef4 <__swsetup_r+0x98>
 800bf04:	200000b4 	.word	0x200000b4

0800bf08 <memmove>:
 800bf08:	4288      	cmp	r0, r1
 800bf0a:	b510      	push	{r4, lr}
 800bf0c:	eb01 0402 	add.w	r4, r1, r2
 800bf10:	d902      	bls.n	800bf18 <memmove+0x10>
 800bf12:	4284      	cmp	r4, r0
 800bf14:	4623      	mov	r3, r4
 800bf16:	d807      	bhi.n	800bf28 <memmove+0x20>
 800bf18:	1e43      	subs	r3, r0, #1
 800bf1a:	42a1      	cmp	r1, r4
 800bf1c:	d008      	beq.n	800bf30 <memmove+0x28>
 800bf1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf22:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf26:	e7f8      	b.n	800bf1a <memmove+0x12>
 800bf28:	4402      	add	r2, r0
 800bf2a:	4601      	mov	r1, r0
 800bf2c:	428a      	cmp	r2, r1
 800bf2e:	d100      	bne.n	800bf32 <memmove+0x2a>
 800bf30:	bd10      	pop	{r4, pc}
 800bf32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf3a:	e7f7      	b.n	800bf2c <memmove+0x24>

0800bf3c <strncmp>:
 800bf3c:	b510      	push	{r4, lr}
 800bf3e:	b16a      	cbz	r2, 800bf5c <strncmp+0x20>
 800bf40:	3901      	subs	r1, #1
 800bf42:	1884      	adds	r4, r0, r2
 800bf44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf48:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d103      	bne.n	800bf58 <strncmp+0x1c>
 800bf50:	42a0      	cmp	r0, r4
 800bf52:	d001      	beq.n	800bf58 <strncmp+0x1c>
 800bf54:	2a00      	cmp	r2, #0
 800bf56:	d1f5      	bne.n	800bf44 <strncmp+0x8>
 800bf58:	1ad0      	subs	r0, r2, r3
 800bf5a:	bd10      	pop	{r4, pc}
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	e7fc      	b.n	800bf5a <strncmp+0x1e>

0800bf60 <nan>:
 800bf60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bf68 <nan+0x8>
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop
 800bf68:	00000000 	.word	0x00000000
 800bf6c:	7ff80000 	.word	0x7ff80000

0800bf70 <__assert_func>:
 800bf70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf72:	4614      	mov	r4, r2
 800bf74:	461a      	mov	r2, r3
 800bf76:	4b09      	ldr	r3, [pc, #36]	@ (800bf9c <__assert_func+0x2c>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4605      	mov	r5, r0
 800bf7c:	68d8      	ldr	r0, [r3, #12]
 800bf7e:	b14c      	cbz	r4, 800bf94 <__assert_func+0x24>
 800bf80:	4b07      	ldr	r3, [pc, #28]	@ (800bfa0 <__assert_func+0x30>)
 800bf82:	9100      	str	r1, [sp, #0]
 800bf84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf88:	4906      	ldr	r1, [pc, #24]	@ (800bfa4 <__assert_func+0x34>)
 800bf8a:	462b      	mov	r3, r5
 800bf8c:	f000 fba8 	bl	800c6e0 <fiprintf>
 800bf90:	f000 fc3c 	bl	800c80c <abort>
 800bf94:	4b04      	ldr	r3, [pc, #16]	@ (800bfa8 <__assert_func+0x38>)
 800bf96:	461c      	mov	r4, r3
 800bf98:	e7f3      	b.n	800bf82 <__assert_func+0x12>
 800bf9a:	bf00      	nop
 800bf9c:	200000b4 	.word	0x200000b4
 800bfa0:	0803c602 	.word	0x0803c602
 800bfa4:	0803c60f 	.word	0x0803c60f
 800bfa8:	0803c63d 	.word	0x0803c63d

0800bfac <_calloc_r>:
 800bfac:	b570      	push	{r4, r5, r6, lr}
 800bfae:	fba1 5402 	umull	r5, r4, r1, r2
 800bfb2:	b934      	cbnz	r4, 800bfc2 <_calloc_r+0x16>
 800bfb4:	4629      	mov	r1, r5
 800bfb6:	f7fc f909 	bl	80081cc <_malloc_r>
 800bfba:	4606      	mov	r6, r0
 800bfbc:	b928      	cbnz	r0, 800bfca <_calloc_r+0x1e>
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	bd70      	pop	{r4, r5, r6, pc}
 800bfc2:	220c      	movs	r2, #12
 800bfc4:	6002      	str	r2, [r0, #0]
 800bfc6:	2600      	movs	r6, #0
 800bfc8:	e7f9      	b.n	800bfbe <_calloc_r+0x12>
 800bfca:	462a      	mov	r2, r5
 800bfcc:	4621      	mov	r1, r4
 800bfce:	f7fd f94a 	bl	8009266 <memset>
 800bfd2:	e7f4      	b.n	800bfbe <_calloc_r+0x12>

0800bfd4 <rshift>:
 800bfd4:	6903      	ldr	r3, [r0, #16]
 800bfd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bfda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfde:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bfe2:	f100 0414 	add.w	r4, r0, #20
 800bfe6:	dd45      	ble.n	800c074 <rshift+0xa0>
 800bfe8:	f011 011f 	ands.w	r1, r1, #31
 800bfec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bff0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bff4:	d10c      	bne.n	800c010 <rshift+0x3c>
 800bff6:	f100 0710 	add.w	r7, r0, #16
 800bffa:	4629      	mov	r1, r5
 800bffc:	42b1      	cmp	r1, r6
 800bffe:	d334      	bcc.n	800c06a <rshift+0x96>
 800c000:	1a9b      	subs	r3, r3, r2
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	1eea      	subs	r2, r5, #3
 800c006:	4296      	cmp	r6, r2
 800c008:	bf38      	it	cc
 800c00a:	2300      	movcc	r3, #0
 800c00c:	4423      	add	r3, r4
 800c00e:	e015      	b.n	800c03c <rshift+0x68>
 800c010:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c014:	f1c1 0820 	rsb	r8, r1, #32
 800c018:	40cf      	lsrs	r7, r1
 800c01a:	f105 0e04 	add.w	lr, r5, #4
 800c01e:	46a1      	mov	r9, r4
 800c020:	4576      	cmp	r6, lr
 800c022:	46f4      	mov	ip, lr
 800c024:	d815      	bhi.n	800c052 <rshift+0x7e>
 800c026:	1a9a      	subs	r2, r3, r2
 800c028:	0092      	lsls	r2, r2, #2
 800c02a:	3a04      	subs	r2, #4
 800c02c:	3501      	adds	r5, #1
 800c02e:	42ae      	cmp	r6, r5
 800c030:	bf38      	it	cc
 800c032:	2200      	movcc	r2, #0
 800c034:	18a3      	adds	r3, r4, r2
 800c036:	50a7      	str	r7, [r4, r2]
 800c038:	b107      	cbz	r7, 800c03c <rshift+0x68>
 800c03a:	3304      	adds	r3, #4
 800c03c:	1b1a      	subs	r2, r3, r4
 800c03e:	42a3      	cmp	r3, r4
 800c040:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c044:	bf08      	it	eq
 800c046:	2300      	moveq	r3, #0
 800c048:	6102      	str	r2, [r0, #16]
 800c04a:	bf08      	it	eq
 800c04c:	6143      	streq	r3, [r0, #20]
 800c04e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c052:	f8dc c000 	ldr.w	ip, [ip]
 800c056:	fa0c fc08 	lsl.w	ip, ip, r8
 800c05a:	ea4c 0707 	orr.w	r7, ip, r7
 800c05e:	f849 7b04 	str.w	r7, [r9], #4
 800c062:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c066:	40cf      	lsrs	r7, r1
 800c068:	e7da      	b.n	800c020 <rshift+0x4c>
 800c06a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c06e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c072:	e7c3      	b.n	800bffc <rshift+0x28>
 800c074:	4623      	mov	r3, r4
 800c076:	e7e1      	b.n	800c03c <rshift+0x68>

0800c078 <__hexdig_fun>:
 800c078:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c07c:	2b09      	cmp	r3, #9
 800c07e:	d802      	bhi.n	800c086 <__hexdig_fun+0xe>
 800c080:	3820      	subs	r0, #32
 800c082:	b2c0      	uxtb	r0, r0
 800c084:	4770      	bx	lr
 800c086:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c08a:	2b05      	cmp	r3, #5
 800c08c:	d801      	bhi.n	800c092 <__hexdig_fun+0x1a>
 800c08e:	3847      	subs	r0, #71	@ 0x47
 800c090:	e7f7      	b.n	800c082 <__hexdig_fun+0xa>
 800c092:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c096:	2b05      	cmp	r3, #5
 800c098:	d801      	bhi.n	800c09e <__hexdig_fun+0x26>
 800c09a:	3827      	subs	r0, #39	@ 0x27
 800c09c:	e7f1      	b.n	800c082 <__hexdig_fun+0xa>
 800c09e:	2000      	movs	r0, #0
 800c0a0:	4770      	bx	lr
	...

0800c0a4 <__gethex>:
 800c0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a8:	b085      	sub	sp, #20
 800c0aa:	468a      	mov	sl, r1
 800c0ac:	9302      	str	r3, [sp, #8]
 800c0ae:	680b      	ldr	r3, [r1, #0]
 800c0b0:	9001      	str	r0, [sp, #4]
 800c0b2:	4690      	mov	r8, r2
 800c0b4:	1c9c      	adds	r4, r3, #2
 800c0b6:	46a1      	mov	r9, r4
 800c0b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c0bc:	2830      	cmp	r0, #48	@ 0x30
 800c0be:	d0fa      	beq.n	800c0b6 <__gethex+0x12>
 800c0c0:	eba9 0303 	sub.w	r3, r9, r3
 800c0c4:	f1a3 0b02 	sub.w	fp, r3, #2
 800c0c8:	f7ff ffd6 	bl	800c078 <__hexdig_fun>
 800c0cc:	4605      	mov	r5, r0
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	d168      	bne.n	800c1a4 <__gethex+0x100>
 800c0d2:	49a0      	ldr	r1, [pc, #640]	@ (800c354 <__gethex+0x2b0>)
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	4648      	mov	r0, r9
 800c0d8:	f7ff ff30 	bl	800bf3c <strncmp>
 800c0dc:	4607      	mov	r7, r0
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	d167      	bne.n	800c1b2 <__gethex+0x10e>
 800c0e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c0e6:	4626      	mov	r6, r4
 800c0e8:	f7ff ffc6 	bl	800c078 <__hexdig_fun>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	d062      	beq.n	800c1b6 <__gethex+0x112>
 800c0f0:	4623      	mov	r3, r4
 800c0f2:	7818      	ldrb	r0, [r3, #0]
 800c0f4:	2830      	cmp	r0, #48	@ 0x30
 800c0f6:	4699      	mov	r9, r3
 800c0f8:	f103 0301 	add.w	r3, r3, #1
 800c0fc:	d0f9      	beq.n	800c0f2 <__gethex+0x4e>
 800c0fe:	f7ff ffbb 	bl	800c078 <__hexdig_fun>
 800c102:	fab0 f580 	clz	r5, r0
 800c106:	096d      	lsrs	r5, r5, #5
 800c108:	f04f 0b01 	mov.w	fp, #1
 800c10c:	464a      	mov	r2, r9
 800c10e:	4616      	mov	r6, r2
 800c110:	3201      	adds	r2, #1
 800c112:	7830      	ldrb	r0, [r6, #0]
 800c114:	f7ff ffb0 	bl	800c078 <__hexdig_fun>
 800c118:	2800      	cmp	r0, #0
 800c11a:	d1f8      	bne.n	800c10e <__gethex+0x6a>
 800c11c:	498d      	ldr	r1, [pc, #564]	@ (800c354 <__gethex+0x2b0>)
 800c11e:	2201      	movs	r2, #1
 800c120:	4630      	mov	r0, r6
 800c122:	f7ff ff0b 	bl	800bf3c <strncmp>
 800c126:	2800      	cmp	r0, #0
 800c128:	d13f      	bne.n	800c1aa <__gethex+0x106>
 800c12a:	b944      	cbnz	r4, 800c13e <__gethex+0x9a>
 800c12c:	1c74      	adds	r4, r6, #1
 800c12e:	4622      	mov	r2, r4
 800c130:	4616      	mov	r6, r2
 800c132:	3201      	adds	r2, #1
 800c134:	7830      	ldrb	r0, [r6, #0]
 800c136:	f7ff ff9f 	bl	800c078 <__hexdig_fun>
 800c13a:	2800      	cmp	r0, #0
 800c13c:	d1f8      	bne.n	800c130 <__gethex+0x8c>
 800c13e:	1ba4      	subs	r4, r4, r6
 800c140:	00a7      	lsls	r7, r4, #2
 800c142:	7833      	ldrb	r3, [r6, #0]
 800c144:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c148:	2b50      	cmp	r3, #80	@ 0x50
 800c14a:	d13e      	bne.n	800c1ca <__gethex+0x126>
 800c14c:	7873      	ldrb	r3, [r6, #1]
 800c14e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c150:	d033      	beq.n	800c1ba <__gethex+0x116>
 800c152:	2b2d      	cmp	r3, #45	@ 0x2d
 800c154:	d034      	beq.n	800c1c0 <__gethex+0x11c>
 800c156:	1c71      	adds	r1, r6, #1
 800c158:	2400      	movs	r4, #0
 800c15a:	7808      	ldrb	r0, [r1, #0]
 800c15c:	f7ff ff8c 	bl	800c078 <__hexdig_fun>
 800c160:	1e43      	subs	r3, r0, #1
 800c162:	b2db      	uxtb	r3, r3
 800c164:	2b18      	cmp	r3, #24
 800c166:	d830      	bhi.n	800c1ca <__gethex+0x126>
 800c168:	f1a0 0210 	sub.w	r2, r0, #16
 800c16c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c170:	f7ff ff82 	bl	800c078 <__hexdig_fun>
 800c174:	f100 3cff 	add.w	ip, r0, #4294967295
 800c178:	fa5f fc8c 	uxtb.w	ip, ip
 800c17c:	f1bc 0f18 	cmp.w	ip, #24
 800c180:	f04f 030a 	mov.w	r3, #10
 800c184:	d91e      	bls.n	800c1c4 <__gethex+0x120>
 800c186:	b104      	cbz	r4, 800c18a <__gethex+0xe6>
 800c188:	4252      	negs	r2, r2
 800c18a:	4417      	add	r7, r2
 800c18c:	f8ca 1000 	str.w	r1, [sl]
 800c190:	b1ed      	cbz	r5, 800c1ce <__gethex+0x12a>
 800c192:	f1bb 0f00 	cmp.w	fp, #0
 800c196:	bf0c      	ite	eq
 800c198:	2506      	moveq	r5, #6
 800c19a:	2500      	movne	r5, #0
 800c19c:	4628      	mov	r0, r5
 800c19e:	b005      	add	sp, #20
 800c1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a4:	2500      	movs	r5, #0
 800c1a6:	462c      	mov	r4, r5
 800c1a8:	e7b0      	b.n	800c10c <__gethex+0x68>
 800c1aa:	2c00      	cmp	r4, #0
 800c1ac:	d1c7      	bne.n	800c13e <__gethex+0x9a>
 800c1ae:	4627      	mov	r7, r4
 800c1b0:	e7c7      	b.n	800c142 <__gethex+0x9e>
 800c1b2:	464e      	mov	r6, r9
 800c1b4:	462f      	mov	r7, r5
 800c1b6:	2501      	movs	r5, #1
 800c1b8:	e7c3      	b.n	800c142 <__gethex+0x9e>
 800c1ba:	2400      	movs	r4, #0
 800c1bc:	1cb1      	adds	r1, r6, #2
 800c1be:	e7cc      	b.n	800c15a <__gethex+0xb6>
 800c1c0:	2401      	movs	r4, #1
 800c1c2:	e7fb      	b.n	800c1bc <__gethex+0x118>
 800c1c4:	fb03 0002 	mla	r0, r3, r2, r0
 800c1c8:	e7ce      	b.n	800c168 <__gethex+0xc4>
 800c1ca:	4631      	mov	r1, r6
 800c1cc:	e7de      	b.n	800c18c <__gethex+0xe8>
 800c1ce:	eba6 0309 	sub.w	r3, r6, r9
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	4629      	mov	r1, r5
 800c1d6:	2b07      	cmp	r3, #7
 800c1d8:	dc0a      	bgt.n	800c1f0 <__gethex+0x14c>
 800c1da:	9801      	ldr	r0, [sp, #4]
 800c1dc:	f7fd ff8a 	bl	800a0f4 <_Balloc>
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	b940      	cbnz	r0, 800c1f6 <__gethex+0x152>
 800c1e4:	4b5c      	ldr	r3, [pc, #368]	@ (800c358 <__gethex+0x2b4>)
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	21e4      	movs	r1, #228	@ 0xe4
 800c1ea:	485c      	ldr	r0, [pc, #368]	@ (800c35c <__gethex+0x2b8>)
 800c1ec:	f7ff fec0 	bl	800bf70 <__assert_func>
 800c1f0:	3101      	adds	r1, #1
 800c1f2:	105b      	asrs	r3, r3, #1
 800c1f4:	e7ef      	b.n	800c1d6 <__gethex+0x132>
 800c1f6:	f100 0a14 	add.w	sl, r0, #20
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	4655      	mov	r5, sl
 800c1fe:	469b      	mov	fp, r3
 800c200:	45b1      	cmp	r9, r6
 800c202:	d337      	bcc.n	800c274 <__gethex+0x1d0>
 800c204:	f845 bb04 	str.w	fp, [r5], #4
 800c208:	eba5 050a 	sub.w	r5, r5, sl
 800c20c:	10ad      	asrs	r5, r5, #2
 800c20e:	6125      	str	r5, [r4, #16]
 800c210:	4658      	mov	r0, fp
 800c212:	f7fe f861 	bl	800a2d8 <__hi0bits>
 800c216:	016d      	lsls	r5, r5, #5
 800c218:	f8d8 6000 	ldr.w	r6, [r8]
 800c21c:	1a2d      	subs	r5, r5, r0
 800c21e:	42b5      	cmp	r5, r6
 800c220:	dd54      	ble.n	800c2cc <__gethex+0x228>
 800c222:	1bad      	subs	r5, r5, r6
 800c224:	4629      	mov	r1, r5
 800c226:	4620      	mov	r0, r4
 800c228:	f7fe fbed 	bl	800aa06 <__any_on>
 800c22c:	4681      	mov	r9, r0
 800c22e:	b178      	cbz	r0, 800c250 <__gethex+0x1ac>
 800c230:	1e6b      	subs	r3, r5, #1
 800c232:	1159      	asrs	r1, r3, #5
 800c234:	f003 021f 	and.w	r2, r3, #31
 800c238:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c23c:	f04f 0901 	mov.w	r9, #1
 800c240:	fa09 f202 	lsl.w	r2, r9, r2
 800c244:	420a      	tst	r2, r1
 800c246:	d003      	beq.n	800c250 <__gethex+0x1ac>
 800c248:	454b      	cmp	r3, r9
 800c24a:	dc36      	bgt.n	800c2ba <__gethex+0x216>
 800c24c:	f04f 0902 	mov.w	r9, #2
 800c250:	4629      	mov	r1, r5
 800c252:	4620      	mov	r0, r4
 800c254:	f7ff febe 	bl	800bfd4 <rshift>
 800c258:	442f      	add	r7, r5
 800c25a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c25e:	42bb      	cmp	r3, r7
 800c260:	da42      	bge.n	800c2e8 <__gethex+0x244>
 800c262:	9801      	ldr	r0, [sp, #4]
 800c264:	4621      	mov	r1, r4
 800c266:	f7fd ff85 	bl	800a174 <_Bfree>
 800c26a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c26c:	2300      	movs	r3, #0
 800c26e:	6013      	str	r3, [r2, #0]
 800c270:	25a3      	movs	r5, #163	@ 0xa3
 800c272:	e793      	b.n	800c19c <__gethex+0xf8>
 800c274:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c278:	2a2e      	cmp	r2, #46	@ 0x2e
 800c27a:	d012      	beq.n	800c2a2 <__gethex+0x1fe>
 800c27c:	2b20      	cmp	r3, #32
 800c27e:	d104      	bne.n	800c28a <__gethex+0x1e6>
 800c280:	f845 bb04 	str.w	fp, [r5], #4
 800c284:	f04f 0b00 	mov.w	fp, #0
 800c288:	465b      	mov	r3, fp
 800c28a:	7830      	ldrb	r0, [r6, #0]
 800c28c:	9303      	str	r3, [sp, #12]
 800c28e:	f7ff fef3 	bl	800c078 <__hexdig_fun>
 800c292:	9b03      	ldr	r3, [sp, #12]
 800c294:	f000 000f 	and.w	r0, r0, #15
 800c298:	4098      	lsls	r0, r3
 800c29a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c29e:	3304      	adds	r3, #4
 800c2a0:	e7ae      	b.n	800c200 <__gethex+0x15c>
 800c2a2:	45b1      	cmp	r9, r6
 800c2a4:	d8ea      	bhi.n	800c27c <__gethex+0x1d8>
 800c2a6:	492b      	ldr	r1, [pc, #172]	@ (800c354 <__gethex+0x2b0>)
 800c2a8:	9303      	str	r3, [sp, #12]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	4630      	mov	r0, r6
 800c2ae:	f7ff fe45 	bl	800bf3c <strncmp>
 800c2b2:	9b03      	ldr	r3, [sp, #12]
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	d1e1      	bne.n	800c27c <__gethex+0x1d8>
 800c2b8:	e7a2      	b.n	800c200 <__gethex+0x15c>
 800c2ba:	1ea9      	subs	r1, r5, #2
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f7fe fba2 	bl	800aa06 <__any_on>
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	d0c2      	beq.n	800c24c <__gethex+0x1a8>
 800c2c6:	f04f 0903 	mov.w	r9, #3
 800c2ca:	e7c1      	b.n	800c250 <__gethex+0x1ac>
 800c2cc:	da09      	bge.n	800c2e2 <__gethex+0x23e>
 800c2ce:	1b75      	subs	r5, r6, r5
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	9801      	ldr	r0, [sp, #4]
 800c2d4:	462a      	mov	r2, r5
 800c2d6:	f7fe f95d 	bl	800a594 <__lshift>
 800c2da:	1b7f      	subs	r7, r7, r5
 800c2dc:	4604      	mov	r4, r0
 800c2de:	f100 0a14 	add.w	sl, r0, #20
 800c2e2:	f04f 0900 	mov.w	r9, #0
 800c2e6:	e7b8      	b.n	800c25a <__gethex+0x1b6>
 800c2e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c2ec:	42bd      	cmp	r5, r7
 800c2ee:	dd6f      	ble.n	800c3d0 <__gethex+0x32c>
 800c2f0:	1bed      	subs	r5, r5, r7
 800c2f2:	42ae      	cmp	r6, r5
 800c2f4:	dc34      	bgt.n	800c360 <__gethex+0x2bc>
 800c2f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c2fa:	2b02      	cmp	r3, #2
 800c2fc:	d022      	beq.n	800c344 <__gethex+0x2a0>
 800c2fe:	2b03      	cmp	r3, #3
 800c300:	d024      	beq.n	800c34c <__gethex+0x2a8>
 800c302:	2b01      	cmp	r3, #1
 800c304:	d115      	bne.n	800c332 <__gethex+0x28e>
 800c306:	42ae      	cmp	r6, r5
 800c308:	d113      	bne.n	800c332 <__gethex+0x28e>
 800c30a:	2e01      	cmp	r6, #1
 800c30c:	d10b      	bne.n	800c326 <__gethex+0x282>
 800c30e:	9a02      	ldr	r2, [sp, #8]
 800c310:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c314:	6013      	str	r3, [r2, #0]
 800c316:	2301      	movs	r3, #1
 800c318:	6123      	str	r3, [r4, #16]
 800c31a:	f8ca 3000 	str.w	r3, [sl]
 800c31e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c320:	2562      	movs	r5, #98	@ 0x62
 800c322:	601c      	str	r4, [r3, #0]
 800c324:	e73a      	b.n	800c19c <__gethex+0xf8>
 800c326:	1e71      	subs	r1, r6, #1
 800c328:	4620      	mov	r0, r4
 800c32a:	f7fe fb6c 	bl	800aa06 <__any_on>
 800c32e:	2800      	cmp	r0, #0
 800c330:	d1ed      	bne.n	800c30e <__gethex+0x26a>
 800c332:	9801      	ldr	r0, [sp, #4]
 800c334:	4621      	mov	r1, r4
 800c336:	f7fd ff1d 	bl	800a174 <_Bfree>
 800c33a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c33c:	2300      	movs	r3, #0
 800c33e:	6013      	str	r3, [r2, #0]
 800c340:	2550      	movs	r5, #80	@ 0x50
 800c342:	e72b      	b.n	800c19c <__gethex+0xf8>
 800c344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1f3      	bne.n	800c332 <__gethex+0x28e>
 800c34a:	e7e0      	b.n	800c30e <__gethex+0x26a>
 800c34c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1dd      	bne.n	800c30e <__gethex+0x26a>
 800c352:	e7ee      	b.n	800c332 <__gethex+0x28e>
 800c354:	0803c5e7 	.word	0x0803c5e7
 800c358:	0803c57d 	.word	0x0803c57d
 800c35c:	0803c63e 	.word	0x0803c63e
 800c360:	1e6f      	subs	r7, r5, #1
 800c362:	f1b9 0f00 	cmp.w	r9, #0
 800c366:	d130      	bne.n	800c3ca <__gethex+0x326>
 800c368:	b127      	cbz	r7, 800c374 <__gethex+0x2d0>
 800c36a:	4639      	mov	r1, r7
 800c36c:	4620      	mov	r0, r4
 800c36e:	f7fe fb4a 	bl	800aa06 <__any_on>
 800c372:	4681      	mov	r9, r0
 800c374:	117a      	asrs	r2, r7, #5
 800c376:	2301      	movs	r3, #1
 800c378:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c37c:	f007 071f 	and.w	r7, r7, #31
 800c380:	40bb      	lsls	r3, r7
 800c382:	4213      	tst	r3, r2
 800c384:	4629      	mov	r1, r5
 800c386:	4620      	mov	r0, r4
 800c388:	bf18      	it	ne
 800c38a:	f049 0902 	orrne.w	r9, r9, #2
 800c38e:	f7ff fe21 	bl	800bfd4 <rshift>
 800c392:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c396:	1b76      	subs	r6, r6, r5
 800c398:	2502      	movs	r5, #2
 800c39a:	f1b9 0f00 	cmp.w	r9, #0
 800c39e:	d047      	beq.n	800c430 <__gethex+0x38c>
 800c3a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c3a4:	2b02      	cmp	r3, #2
 800c3a6:	d015      	beq.n	800c3d4 <__gethex+0x330>
 800c3a8:	2b03      	cmp	r3, #3
 800c3aa:	d017      	beq.n	800c3dc <__gethex+0x338>
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d109      	bne.n	800c3c4 <__gethex+0x320>
 800c3b0:	f019 0f02 	tst.w	r9, #2
 800c3b4:	d006      	beq.n	800c3c4 <__gethex+0x320>
 800c3b6:	f8da 3000 	ldr.w	r3, [sl]
 800c3ba:	ea49 0903 	orr.w	r9, r9, r3
 800c3be:	f019 0f01 	tst.w	r9, #1
 800c3c2:	d10e      	bne.n	800c3e2 <__gethex+0x33e>
 800c3c4:	f045 0510 	orr.w	r5, r5, #16
 800c3c8:	e032      	b.n	800c430 <__gethex+0x38c>
 800c3ca:	f04f 0901 	mov.w	r9, #1
 800c3ce:	e7d1      	b.n	800c374 <__gethex+0x2d0>
 800c3d0:	2501      	movs	r5, #1
 800c3d2:	e7e2      	b.n	800c39a <__gethex+0x2f6>
 800c3d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3d6:	f1c3 0301 	rsb	r3, r3, #1
 800c3da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c3dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d0f0      	beq.n	800c3c4 <__gethex+0x320>
 800c3e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c3e6:	f104 0314 	add.w	r3, r4, #20
 800c3ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c3ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c3f2:	f04f 0c00 	mov.w	ip, #0
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c400:	d01b      	beq.n	800c43a <__gethex+0x396>
 800c402:	3201      	adds	r2, #1
 800c404:	6002      	str	r2, [r0, #0]
 800c406:	2d02      	cmp	r5, #2
 800c408:	f104 0314 	add.w	r3, r4, #20
 800c40c:	d13c      	bne.n	800c488 <__gethex+0x3e4>
 800c40e:	f8d8 2000 	ldr.w	r2, [r8]
 800c412:	3a01      	subs	r2, #1
 800c414:	42b2      	cmp	r2, r6
 800c416:	d109      	bne.n	800c42c <__gethex+0x388>
 800c418:	1171      	asrs	r1, r6, #5
 800c41a:	2201      	movs	r2, #1
 800c41c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c420:	f006 061f 	and.w	r6, r6, #31
 800c424:	fa02 f606 	lsl.w	r6, r2, r6
 800c428:	421e      	tst	r6, r3
 800c42a:	d13a      	bne.n	800c4a2 <__gethex+0x3fe>
 800c42c:	f045 0520 	orr.w	r5, r5, #32
 800c430:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c432:	601c      	str	r4, [r3, #0]
 800c434:	9b02      	ldr	r3, [sp, #8]
 800c436:	601f      	str	r7, [r3, #0]
 800c438:	e6b0      	b.n	800c19c <__gethex+0xf8>
 800c43a:	4299      	cmp	r1, r3
 800c43c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c440:	d8d9      	bhi.n	800c3f6 <__gethex+0x352>
 800c442:	68a3      	ldr	r3, [r4, #8]
 800c444:	459b      	cmp	fp, r3
 800c446:	db17      	blt.n	800c478 <__gethex+0x3d4>
 800c448:	6861      	ldr	r1, [r4, #4]
 800c44a:	9801      	ldr	r0, [sp, #4]
 800c44c:	3101      	adds	r1, #1
 800c44e:	f7fd fe51 	bl	800a0f4 <_Balloc>
 800c452:	4681      	mov	r9, r0
 800c454:	b918      	cbnz	r0, 800c45e <__gethex+0x3ba>
 800c456:	4b1a      	ldr	r3, [pc, #104]	@ (800c4c0 <__gethex+0x41c>)
 800c458:	4602      	mov	r2, r0
 800c45a:	2184      	movs	r1, #132	@ 0x84
 800c45c:	e6c5      	b.n	800c1ea <__gethex+0x146>
 800c45e:	6922      	ldr	r2, [r4, #16]
 800c460:	3202      	adds	r2, #2
 800c462:	f104 010c 	add.w	r1, r4, #12
 800c466:	0092      	lsls	r2, r2, #2
 800c468:	300c      	adds	r0, #12
 800c46a:	f7fc ff8c 	bl	8009386 <memcpy>
 800c46e:	4621      	mov	r1, r4
 800c470:	9801      	ldr	r0, [sp, #4]
 800c472:	f7fd fe7f 	bl	800a174 <_Bfree>
 800c476:	464c      	mov	r4, r9
 800c478:	6923      	ldr	r3, [r4, #16]
 800c47a:	1c5a      	adds	r2, r3, #1
 800c47c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c480:	6122      	str	r2, [r4, #16]
 800c482:	2201      	movs	r2, #1
 800c484:	615a      	str	r2, [r3, #20]
 800c486:	e7be      	b.n	800c406 <__gethex+0x362>
 800c488:	6922      	ldr	r2, [r4, #16]
 800c48a:	455a      	cmp	r2, fp
 800c48c:	dd0b      	ble.n	800c4a6 <__gethex+0x402>
 800c48e:	2101      	movs	r1, #1
 800c490:	4620      	mov	r0, r4
 800c492:	f7ff fd9f 	bl	800bfd4 <rshift>
 800c496:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c49a:	3701      	adds	r7, #1
 800c49c:	42bb      	cmp	r3, r7
 800c49e:	f6ff aee0 	blt.w	800c262 <__gethex+0x1be>
 800c4a2:	2501      	movs	r5, #1
 800c4a4:	e7c2      	b.n	800c42c <__gethex+0x388>
 800c4a6:	f016 061f 	ands.w	r6, r6, #31
 800c4aa:	d0fa      	beq.n	800c4a2 <__gethex+0x3fe>
 800c4ac:	4453      	add	r3, sl
 800c4ae:	f1c6 0620 	rsb	r6, r6, #32
 800c4b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c4b6:	f7fd ff0f 	bl	800a2d8 <__hi0bits>
 800c4ba:	42b0      	cmp	r0, r6
 800c4bc:	dbe7      	blt.n	800c48e <__gethex+0x3ea>
 800c4be:	e7f0      	b.n	800c4a2 <__gethex+0x3fe>
 800c4c0:	0803c57d 	.word	0x0803c57d

0800c4c4 <L_shift>:
 800c4c4:	f1c2 0208 	rsb	r2, r2, #8
 800c4c8:	0092      	lsls	r2, r2, #2
 800c4ca:	b570      	push	{r4, r5, r6, lr}
 800c4cc:	f1c2 0620 	rsb	r6, r2, #32
 800c4d0:	6843      	ldr	r3, [r0, #4]
 800c4d2:	6804      	ldr	r4, [r0, #0]
 800c4d4:	fa03 f506 	lsl.w	r5, r3, r6
 800c4d8:	432c      	orrs	r4, r5
 800c4da:	40d3      	lsrs	r3, r2
 800c4dc:	6004      	str	r4, [r0, #0]
 800c4de:	f840 3f04 	str.w	r3, [r0, #4]!
 800c4e2:	4288      	cmp	r0, r1
 800c4e4:	d3f4      	bcc.n	800c4d0 <L_shift+0xc>
 800c4e6:	bd70      	pop	{r4, r5, r6, pc}

0800c4e8 <__match>:
 800c4e8:	b530      	push	{r4, r5, lr}
 800c4ea:	6803      	ldr	r3, [r0, #0]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4f2:	b914      	cbnz	r4, 800c4fa <__match+0x12>
 800c4f4:	6003      	str	r3, [r0, #0]
 800c4f6:	2001      	movs	r0, #1
 800c4f8:	bd30      	pop	{r4, r5, pc}
 800c4fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c502:	2d19      	cmp	r5, #25
 800c504:	bf98      	it	ls
 800c506:	3220      	addls	r2, #32
 800c508:	42a2      	cmp	r2, r4
 800c50a:	d0f0      	beq.n	800c4ee <__match+0x6>
 800c50c:	2000      	movs	r0, #0
 800c50e:	e7f3      	b.n	800c4f8 <__match+0x10>

0800c510 <__hexnan>:
 800c510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c514:	680b      	ldr	r3, [r1, #0]
 800c516:	6801      	ldr	r1, [r0, #0]
 800c518:	115e      	asrs	r6, r3, #5
 800c51a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c51e:	f013 031f 	ands.w	r3, r3, #31
 800c522:	b087      	sub	sp, #28
 800c524:	bf18      	it	ne
 800c526:	3604      	addne	r6, #4
 800c528:	2500      	movs	r5, #0
 800c52a:	1f37      	subs	r7, r6, #4
 800c52c:	4682      	mov	sl, r0
 800c52e:	4690      	mov	r8, r2
 800c530:	9301      	str	r3, [sp, #4]
 800c532:	f846 5c04 	str.w	r5, [r6, #-4]
 800c536:	46b9      	mov	r9, r7
 800c538:	463c      	mov	r4, r7
 800c53a:	9502      	str	r5, [sp, #8]
 800c53c:	46ab      	mov	fp, r5
 800c53e:	784a      	ldrb	r2, [r1, #1]
 800c540:	1c4b      	adds	r3, r1, #1
 800c542:	9303      	str	r3, [sp, #12]
 800c544:	b342      	cbz	r2, 800c598 <__hexnan+0x88>
 800c546:	4610      	mov	r0, r2
 800c548:	9105      	str	r1, [sp, #20]
 800c54a:	9204      	str	r2, [sp, #16]
 800c54c:	f7ff fd94 	bl	800c078 <__hexdig_fun>
 800c550:	2800      	cmp	r0, #0
 800c552:	d151      	bne.n	800c5f8 <__hexnan+0xe8>
 800c554:	9a04      	ldr	r2, [sp, #16]
 800c556:	9905      	ldr	r1, [sp, #20]
 800c558:	2a20      	cmp	r2, #32
 800c55a:	d818      	bhi.n	800c58e <__hexnan+0x7e>
 800c55c:	9b02      	ldr	r3, [sp, #8]
 800c55e:	459b      	cmp	fp, r3
 800c560:	dd13      	ble.n	800c58a <__hexnan+0x7a>
 800c562:	454c      	cmp	r4, r9
 800c564:	d206      	bcs.n	800c574 <__hexnan+0x64>
 800c566:	2d07      	cmp	r5, #7
 800c568:	dc04      	bgt.n	800c574 <__hexnan+0x64>
 800c56a:	462a      	mov	r2, r5
 800c56c:	4649      	mov	r1, r9
 800c56e:	4620      	mov	r0, r4
 800c570:	f7ff ffa8 	bl	800c4c4 <L_shift>
 800c574:	4544      	cmp	r4, r8
 800c576:	d952      	bls.n	800c61e <__hexnan+0x10e>
 800c578:	2300      	movs	r3, #0
 800c57a:	f1a4 0904 	sub.w	r9, r4, #4
 800c57e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c582:	f8cd b008 	str.w	fp, [sp, #8]
 800c586:	464c      	mov	r4, r9
 800c588:	461d      	mov	r5, r3
 800c58a:	9903      	ldr	r1, [sp, #12]
 800c58c:	e7d7      	b.n	800c53e <__hexnan+0x2e>
 800c58e:	2a29      	cmp	r2, #41	@ 0x29
 800c590:	d157      	bne.n	800c642 <__hexnan+0x132>
 800c592:	3102      	adds	r1, #2
 800c594:	f8ca 1000 	str.w	r1, [sl]
 800c598:	f1bb 0f00 	cmp.w	fp, #0
 800c59c:	d051      	beq.n	800c642 <__hexnan+0x132>
 800c59e:	454c      	cmp	r4, r9
 800c5a0:	d206      	bcs.n	800c5b0 <__hexnan+0xa0>
 800c5a2:	2d07      	cmp	r5, #7
 800c5a4:	dc04      	bgt.n	800c5b0 <__hexnan+0xa0>
 800c5a6:	462a      	mov	r2, r5
 800c5a8:	4649      	mov	r1, r9
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f7ff ff8a 	bl	800c4c4 <L_shift>
 800c5b0:	4544      	cmp	r4, r8
 800c5b2:	d936      	bls.n	800c622 <__hexnan+0x112>
 800c5b4:	f1a8 0204 	sub.w	r2, r8, #4
 800c5b8:	4623      	mov	r3, r4
 800c5ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800c5be:	f842 1f04 	str.w	r1, [r2, #4]!
 800c5c2:	429f      	cmp	r7, r3
 800c5c4:	d2f9      	bcs.n	800c5ba <__hexnan+0xaa>
 800c5c6:	1b3b      	subs	r3, r7, r4
 800c5c8:	f023 0303 	bic.w	r3, r3, #3
 800c5cc:	3304      	adds	r3, #4
 800c5ce:	3401      	adds	r4, #1
 800c5d0:	3e03      	subs	r6, #3
 800c5d2:	42b4      	cmp	r4, r6
 800c5d4:	bf88      	it	hi
 800c5d6:	2304      	movhi	r3, #4
 800c5d8:	4443      	add	r3, r8
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f843 2b04 	str.w	r2, [r3], #4
 800c5e0:	429f      	cmp	r7, r3
 800c5e2:	d2fb      	bcs.n	800c5dc <__hexnan+0xcc>
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	b91b      	cbnz	r3, 800c5f0 <__hexnan+0xe0>
 800c5e8:	4547      	cmp	r7, r8
 800c5ea:	d128      	bne.n	800c63e <__hexnan+0x12e>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	603b      	str	r3, [r7, #0]
 800c5f0:	2005      	movs	r0, #5
 800c5f2:	b007      	add	sp, #28
 800c5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f8:	3501      	adds	r5, #1
 800c5fa:	2d08      	cmp	r5, #8
 800c5fc:	f10b 0b01 	add.w	fp, fp, #1
 800c600:	dd06      	ble.n	800c610 <__hexnan+0x100>
 800c602:	4544      	cmp	r4, r8
 800c604:	d9c1      	bls.n	800c58a <__hexnan+0x7a>
 800c606:	2300      	movs	r3, #0
 800c608:	f844 3c04 	str.w	r3, [r4, #-4]
 800c60c:	2501      	movs	r5, #1
 800c60e:	3c04      	subs	r4, #4
 800c610:	6822      	ldr	r2, [r4, #0]
 800c612:	f000 000f 	and.w	r0, r0, #15
 800c616:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c61a:	6020      	str	r0, [r4, #0]
 800c61c:	e7b5      	b.n	800c58a <__hexnan+0x7a>
 800c61e:	2508      	movs	r5, #8
 800c620:	e7b3      	b.n	800c58a <__hexnan+0x7a>
 800c622:	9b01      	ldr	r3, [sp, #4]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d0dd      	beq.n	800c5e4 <__hexnan+0xd4>
 800c628:	f1c3 0320 	rsb	r3, r3, #32
 800c62c:	f04f 32ff 	mov.w	r2, #4294967295
 800c630:	40da      	lsrs	r2, r3
 800c632:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c636:	4013      	ands	r3, r2
 800c638:	f846 3c04 	str.w	r3, [r6, #-4]
 800c63c:	e7d2      	b.n	800c5e4 <__hexnan+0xd4>
 800c63e:	3f04      	subs	r7, #4
 800c640:	e7d0      	b.n	800c5e4 <__hexnan+0xd4>
 800c642:	2004      	movs	r0, #4
 800c644:	e7d5      	b.n	800c5f2 <__hexnan+0xe2>

0800c646 <__ascii_mbtowc>:
 800c646:	b082      	sub	sp, #8
 800c648:	b901      	cbnz	r1, 800c64c <__ascii_mbtowc+0x6>
 800c64a:	a901      	add	r1, sp, #4
 800c64c:	b142      	cbz	r2, 800c660 <__ascii_mbtowc+0x1a>
 800c64e:	b14b      	cbz	r3, 800c664 <__ascii_mbtowc+0x1e>
 800c650:	7813      	ldrb	r3, [r2, #0]
 800c652:	600b      	str	r3, [r1, #0]
 800c654:	7812      	ldrb	r2, [r2, #0]
 800c656:	1e10      	subs	r0, r2, #0
 800c658:	bf18      	it	ne
 800c65a:	2001      	movne	r0, #1
 800c65c:	b002      	add	sp, #8
 800c65e:	4770      	bx	lr
 800c660:	4610      	mov	r0, r2
 800c662:	e7fb      	b.n	800c65c <__ascii_mbtowc+0x16>
 800c664:	f06f 0001 	mvn.w	r0, #1
 800c668:	e7f8      	b.n	800c65c <__ascii_mbtowc+0x16>

0800c66a <_realloc_r>:
 800c66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c66e:	4607      	mov	r7, r0
 800c670:	4614      	mov	r4, r2
 800c672:	460d      	mov	r5, r1
 800c674:	b921      	cbnz	r1, 800c680 <_realloc_r+0x16>
 800c676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c67a:	4611      	mov	r1, r2
 800c67c:	f7fb bda6 	b.w	80081cc <_malloc_r>
 800c680:	b92a      	cbnz	r2, 800c68e <_realloc_r+0x24>
 800c682:	f7fd fced 	bl	800a060 <_free_r>
 800c686:	4625      	mov	r5, r4
 800c688:	4628      	mov	r0, r5
 800c68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c68e:	f000 f8c4 	bl	800c81a <_malloc_usable_size_r>
 800c692:	4284      	cmp	r4, r0
 800c694:	4606      	mov	r6, r0
 800c696:	d802      	bhi.n	800c69e <_realloc_r+0x34>
 800c698:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c69c:	d8f4      	bhi.n	800c688 <_realloc_r+0x1e>
 800c69e:	4621      	mov	r1, r4
 800c6a0:	4638      	mov	r0, r7
 800c6a2:	f7fb fd93 	bl	80081cc <_malloc_r>
 800c6a6:	4680      	mov	r8, r0
 800c6a8:	b908      	cbnz	r0, 800c6ae <_realloc_r+0x44>
 800c6aa:	4645      	mov	r5, r8
 800c6ac:	e7ec      	b.n	800c688 <_realloc_r+0x1e>
 800c6ae:	42b4      	cmp	r4, r6
 800c6b0:	4622      	mov	r2, r4
 800c6b2:	4629      	mov	r1, r5
 800c6b4:	bf28      	it	cs
 800c6b6:	4632      	movcs	r2, r6
 800c6b8:	f7fc fe65 	bl	8009386 <memcpy>
 800c6bc:	4629      	mov	r1, r5
 800c6be:	4638      	mov	r0, r7
 800c6c0:	f7fd fcce 	bl	800a060 <_free_r>
 800c6c4:	e7f1      	b.n	800c6aa <_realloc_r+0x40>

0800c6c6 <__ascii_wctomb>:
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	4608      	mov	r0, r1
 800c6ca:	b141      	cbz	r1, 800c6de <__ascii_wctomb+0x18>
 800c6cc:	2aff      	cmp	r2, #255	@ 0xff
 800c6ce:	d904      	bls.n	800c6da <__ascii_wctomb+0x14>
 800c6d0:	228a      	movs	r2, #138	@ 0x8a
 800c6d2:	601a      	str	r2, [r3, #0]
 800c6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d8:	4770      	bx	lr
 800c6da:	700a      	strb	r2, [r1, #0]
 800c6dc:	2001      	movs	r0, #1
 800c6de:	4770      	bx	lr

0800c6e0 <fiprintf>:
 800c6e0:	b40e      	push	{r1, r2, r3}
 800c6e2:	b503      	push	{r0, r1, lr}
 800c6e4:	4601      	mov	r1, r0
 800c6e6:	ab03      	add	r3, sp, #12
 800c6e8:	4805      	ldr	r0, [pc, #20]	@ (800c700 <fiprintf+0x20>)
 800c6ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6ee:	6800      	ldr	r0, [r0, #0]
 800c6f0:	9301      	str	r3, [sp, #4]
 800c6f2:	f7ff f9b1 	bl	800ba58 <_vfiprintf_r>
 800c6f6:	b002      	add	sp, #8
 800c6f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6fc:	b003      	add	sp, #12
 800c6fe:	4770      	bx	lr
 800c700:	200000b4 	.word	0x200000b4

0800c704 <__swhatbuf_r>:
 800c704:	b570      	push	{r4, r5, r6, lr}
 800c706:	460c      	mov	r4, r1
 800c708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c70c:	2900      	cmp	r1, #0
 800c70e:	b096      	sub	sp, #88	@ 0x58
 800c710:	4615      	mov	r5, r2
 800c712:	461e      	mov	r6, r3
 800c714:	da0d      	bge.n	800c732 <__swhatbuf_r+0x2e>
 800c716:	89a3      	ldrh	r3, [r4, #12]
 800c718:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c71c:	f04f 0100 	mov.w	r1, #0
 800c720:	bf14      	ite	ne
 800c722:	2340      	movne	r3, #64	@ 0x40
 800c724:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c728:	2000      	movs	r0, #0
 800c72a:	6031      	str	r1, [r6, #0]
 800c72c:	602b      	str	r3, [r5, #0]
 800c72e:	b016      	add	sp, #88	@ 0x58
 800c730:	bd70      	pop	{r4, r5, r6, pc}
 800c732:	466a      	mov	r2, sp
 800c734:	f000 f848 	bl	800c7c8 <_fstat_r>
 800c738:	2800      	cmp	r0, #0
 800c73a:	dbec      	blt.n	800c716 <__swhatbuf_r+0x12>
 800c73c:	9901      	ldr	r1, [sp, #4]
 800c73e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c742:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c746:	4259      	negs	r1, r3
 800c748:	4159      	adcs	r1, r3
 800c74a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c74e:	e7eb      	b.n	800c728 <__swhatbuf_r+0x24>

0800c750 <__smakebuf_r>:
 800c750:	898b      	ldrh	r3, [r1, #12]
 800c752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c754:	079d      	lsls	r5, r3, #30
 800c756:	4606      	mov	r6, r0
 800c758:	460c      	mov	r4, r1
 800c75a:	d507      	bpl.n	800c76c <__smakebuf_r+0x1c>
 800c75c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c760:	6023      	str	r3, [r4, #0]
 800c762:	6123      	str	r3, [r4, #16]
 800c764:	2301      	movs	r3, #1
 800c766:	6163      	str	r3, [r4, #20]
 800c768:	b003      	add	sp, #12
 800c76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c76c:	ab01      	add	r3, sp, #4
 800c76e:	466a      	mov	r2, sp
 800c770:	f7ff ffc8 	bl	800c704 <__swhatbuf_r>
 800c774:	9f00      	ldr	r7, [sp, #0]
 800c776:	4605      	mov	r5, r0
 800c778:	4639      	mov	r1, r7
 800c77a:	4630      	mov	r0, r6
 800c77c:	f7fb fd26 	bl	80081cc <_malloc_r>
 800c780:	b948      	cbnz	r0, 800c796 <__smakebuf_r+0x46>
 800c782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c786:	059a      	lsls	r2, r3, #22
 800c788:	d4ee      	bmi.n	800c768 <__smakebuf_r+0x18>
 800c78a:	f023 0303 	bic.w	r3, r3, #3
 800c78e:	f043 0302 	orr.w	r3, r3, #2
 800c792:	81a3      	strh	r3, [r4, #12]
 800c794:	e7e2      	b.n	800c75c <__smakebuf_r+0xc>
 800c796:	89a3      	ldrh	r3, [r4, #12]
 800c798:	6020      	str	r0, [r4, #0]
 800c79a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c79e:	81a3      	strh	r3, [r4, #12]
 800c7a0:	9b01      	ldr	r3, [sp, #4]
 800c7a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c7a6:	b15b      	cbz	r3, 800c7c0 <__smakebuf_r+0x70>
 800c7a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7ac:	4630      	mov	r0, r6
 800c7ae:	f000 f81d 	bl	800c7ec <_isatty_r>
 800c7b2:	b128      	cbz	r0, 800c7c0 <__smakebuf_r+0x70>
 800c7b4:	89a3      	ldrh	r3, [r4, #12]
 800c7b6:	f023 0303 	bic.w	r3, r3, #3
 800c7ba:	f043 0301 	orr.w	r3, r3, #1
 800c7be:	81a3      	strh	r3, [r4, #12]
 800c7c0:	89a3      	ldrh	r3, [r4, #12]
 800c7c2:	431d      	orrs	r5, r3
 800c7c4:	81a5      	strh	r5, [r4, #12]
 800c7c6:	e7cf      	b.n	800c768 <__smakebuf_r+0x18>

0800c7c8 <_fstat_r>:
 800c7c8:	b538      	push	{r3, r4, r5, lr}
 800c7ca:	4d07      	ldr	r5, [pc, #28]	@ (800c7e8 <_fstat_r+0x20>)
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	4608      	mov	r0, r1
 800c7d2:	4611      	mov	r1, r2
 800c7d4:	602b      	str	r3, [r5, #0]
 800c7d6:	f7f5 fa0b 	bl	8001bf0 <_fstat>
 800c7da:	1c43      	adds	r3, r0, #1
 800c7dc:	d102      	bne.n	800c7e4 <_fstat_r+0x1c>
 800c7de:	682b      	ldr	r3, [r5, #0]
 800c7e0:	b103      	cbz	r3, 800c7e4 <_fstat_r+0x1c>
 800c7e2:	6023      	str	r3, [r4, #0]
 800c7e4:	bd38      	pop	{r3, r4, r5, pc}
 800c7e6:	bf00      	nop
 800c7e8:	20000d0c 	.word	0x20000d0c

0800c7ec <_isatty_r>:
 800c7ec:	b538      	push	{r3, r4, r5, lr}
 800c7ee:	4d06      	ldr	r5, [pc, #24]	@ (800c808 <_isatty_r+0x1c>)
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	4608      	mov	r0, r1
 800c7f6:	602b      	str	r3, [r5, #0]
 800c7f8:	f7f5 fa0a 	bl	8001c10 <_isatty>
 800c7fc:	1c43      	adds	r3, r0, #1
 800c7fe:	d102      	bne.n	800c806 <_isatty_r+0x1a>
 800c800:	682b      	ldr	r3, [r5, #0]
 800c802:	b103      	cbz	r3, 800c806 <_isatty_r+0x1a>
 800c804:	6023      	str	r3, [r4, #0]
 800c806:	bd38      	pop	{r3, r4, r5, pc}
 800c808:	20000d0c 	.word	0x20000d0c

0800c80c <abort>:
 800c80c:	b508      	push	{r3, lr}
 800c80e:	2006      	movs	r0, #6
 800c810:	f000 f834 	bl	800c87c <raise>
 800c814:	2001      	movs	r0, #1
 800c816:	f7f5 f99b 	bl	8001b50 <_exit>

0800c81a <_malloc_usable_size_r>:
 800c81a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c81e:	1f18      	subs	r0, r3, #4
 800c820:	2b00      	cmp	r3, #0
 800c822:	bfbc      	itt	lt
 800c824:	580b      	ldrlt	r3, [r1, r0]
 800c826:	18c0      	addlt	r0, r0, r3
 800c828:	4770      	bx	lr

0800c82a <_raise_r>:
 800c82a:	291f      	cmp	r1, #31
 800c82c:	b538      	push	{r3, r4, r5, lr}
 800c82e:	4605      	mov	r5, r0
 800c830:	460c      	mov	r4, r1
 800c832:	d904      	bls.n	800c83e <_raise_r+0x14>
 800c834:	2316      	movs	r3, #22
 800c836:	6003      	str	r3, [r0, #0]
 800c838:	f04f 30ff 	mov.w	r0, #4294967295
 800c83c:	bd38      	pop	{r3, r4, r5, pc}
 800c83e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c840:	b112      	cbz	r2, 800c848 <_raise_r+0x1e>
 800c842:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c846:	b94b      	cbnz	r3, 800c85c <_raise_r+0x32>
 800c848:	4628      	mov	r0, r5
 800c84a:	f000 f831 	bl	800c8b0 <_getpid_r>
 800c84e:	4622      	mov	r2, r4
 800c850:	4601      	mov	r1, r0
 800c852:	4628      	mov	r0, r5
 800c854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c858:	f000 b818 	b.w	800c88c <_kill_r>
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d00a      	beq.n	800c876 <_raise_r+0x4c>
 800c860:	1c59      	adds	r1, r3, #1
 800c862:	d103      	bne.n	800c86c <_raise_r+0x42>
 800c864:	2316      	movs	r3, #22
 800c866:	6003      	str	r3, [r0, #0]
 800c868:	2001      	movs	r0, #1
 800c86a:	e7e7      	b.n	800c83c <_raise_r+0x12>
 800c86c:	2100      	movs	r1, #0
 800c86e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c872:	4620      	mov	r0, r4
 800c874:	4798      	blx	r3
 800c876:	2000      	movs	r0, #0
 800c878:	e7e0      	b.n	800c83c <_raise_r+0x12>
	...

0800c87c <raise>:
 800c87c:	4b02      	ldr	r3, [pc, #8]	@ (800c888 <raise+0xc>)
 800c87e:	4601      	mov	r1, r0
 800c880:	6818      	ldr	r0, [r3, #0]
 800c882:	f7ff bfd2 	b.w	800c82a <_raise_r>
 800c886:	bf00      	nop
 800c888:	200000b4 	.word	0x200000b4

0800c88c <_kill_r>:
 800c88c:	b538      	push	{r3, r4, r5, lr}
 800c88e:	4d07      	ldr	r5, [pc, #28]	@ (800c8ac <_kill_r+0x20>)
 800c890:	2300      	movs	r3, #0
 800c892:	4604      	mov	r4, r0
 800c894:	4608      	mov	r0, r1
 800c896:	4611      	mov	r1, r2
 800c898:	602b      	str	r3, [r5, #0]
 800c89a:	f7f5 f949 	bl	8001b30 <_kill>
 800c89e:	1c43      	adds	r3, r0, #1
 800c8a0:	d102      	bne.n	800c8a8 <_kill_r+0x1c>
 800c8a2:	682b      	ldr	r3, [r5, #0]
 800c8a4:	b103      	cbz	r3, 800c8a8 <_kill_r+0x1c>
 800c8a6:	6023      	str	r3, [r4, #0]
 800c8a8:	bd38      	pop	{r3, r4, r5, pc}
 800c8aa:	bf00      	nop
 800c8ac:	20000d0c 	.word	0x20000d0c

0800c8b0 <_getpid_r>:
 800c8b0:	f7f5 b936 	b.w	8001b20 <_getpid>

0800c8b4 <_init>:
 800c8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b6:	bf00      	nop
 800c8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ba:	bc08      	pop	{r3}
 800c8bc:	469e      	mov	lr, r3
 800c8be:	4770      	bx	lr

0800c8c0 <_fini>:
 800c8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c2:	bf00      	nop
 800c8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8c6:	bc08      	pop	{r3}
 800c8c8:	469e      	mov	lr, r3
 800c8ca:	4770      	bx	lr
