
SmartWatchTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d720  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  0800d9d0  0800d9d0  0000e9d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dd84  0800dd84  0000ed84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dd8c  0800dd8c  0000ed8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800dd90  0800dd90  0000ed90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800dd94  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008b8  240001d8  0800df6c  0000f1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000a90  0800df6c  0000fa90  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019620  00000000  00000000  0000f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032f0  00000000  00000000  00028826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001160  00000000  00000000  0002bb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d68  00000000  00000000  0002cc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004ff8  00000000  00000000  0002d9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b127  00000000  00000000  000329d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013c887  00000000  00000000  0004daff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0018a386  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005560  00000000  00000000  0018a3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000087  00000000  00000000  0018f92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001d8 	.word	0x240001d8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800d9b8 	.word	0x0800d9b8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	0800d9b8 	.word	0x0800d9b8

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b988 	b.w	80006c8 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	468e      	mov	lr, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	4688      	mov	r8, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4617      	mov	r7, r2
 80003e4:	d962      	bls.n	80004ac <__udivmoddi4+0xdc>
 80003e6:	fab2 f682 	clz	r6, r2
 80003ea:	b14e      	cbz	r6, 8000400 <__udivmoddi4+0x30>
 80003ec:	f1c6 0320 	rsb	r3, r6, #32
 80003f0:	fa01 f806 	lsl.w	r8, r1, r6
 80003f4:	fa20 f303 	lsr.w	r3, r0, r3
 80003f8:	40b7      	lsls	r7, r6
 80003fa:	ea43 0808 	orr.w	r8, r3, r8
 80003fe:	40b4      	lsls	r4, r6
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	fbb8 f1fe 	udiv	r1, r8, lr
 800040c:	0c23      	lsrs	r3, r4, #16
 800040e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fb01 f20c 	mul.w	r2, r1, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0x62>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f101 30ff 	add.w	r0, r1, #4294967295
 8000424:	f080 80ea 	bcs.w	80005fc <__udivmoddi4+0x22c>
 8000428:	429a      	cmp	r2, r3
 800042a:	f240 80e7 	bls.w	80005fc <__udivmoddi4+0x22c>
 800042e:	3902      	subs	r1, #2
 8000430:	443b      	add	r3, r7
 8000432:	1a9a      	subs	r2, r3, r2
 8000434:	b2a3      	uxth	r3, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000442:	fb00 fc0c 	mul.w	ip, r0, ip
 8000446:	459c      	cmp	ip, r3
 8000448:	d909      	bls.n	800045e <__udivmoddi4+0x8e>
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000450:	f080 80d6 	bcs.w	8000600 <__udivmoddi4+0x230>
 8000454:	459c      	cmp	ip, r3
 8000456:	f240 80d3 	bls.w	8000600 <__udivmoddi4+0x230>
 800045a:	443b      	add	r3, r7
 800045c:	3802      	subs	r0, #2
 800045e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000462:	eba3 030c 	sub.w	r3, r3, ip
 8000466:	2100      	movs	r1, #0
 8000468:	b11d      	cbz	r5, 8000472 <__udivmoddi4+0xa2>
 800046a:	40f3      	lsrs	r3, r6
 800046c:	2200      	movs	r2, #0
 800046e:	e9c5 3200 	strd	r3, r2, [r5]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d905      	bls.n	8000486 <__udivmoddi4+0xb6>
 800047a:	b10d      	cbz	r5, 8000480 <__udivmoddi4+0xb0>
 800047c:	e9c5 0100 	strd	r0, r1, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	4608      	mov	r0, r1
 8000484:	e7f5      	b.n	8000472 <__udivmoddi4+0xa2>
 8000486:	fab3 f183 	clz	r1, r3
 800048a:	2900      	cmp	r1, #0
 800048c:	d146      	bne.n	800051c <__udivmoddi4+0x14c>
 800048e:	4573      	cmp	r3, lr
 8000490:	d302      	bcc.n	8000498 <__udivmoddi4+0xc8>
 8000492:	4282      	cmp	r2, r0
 8000494:	f200 8105 	bhi.w	80006a2 <__udivmoddi4+0x2d2>
 8000498:	1a84      	subs	r4, r0, r2
 800049a:	eb6e 0203 	sbc.w	r2, lr, r3
 800049e:	2001      	movs	r0, #1
 80004a0:	4690      	mov	r8, r2
 80004a2:	2d00      	cmp	r5, #0
 80004a4:	d0e5      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004a6:	e9c5 4800 	strd	r4, r8, [r5]
 80004aa:	e7e2      	b.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f000 8090 	beq.w	80005d2 <__udivmoddi4+0x202>
 80004b2:	fab2 f682 	clz	r6, r2
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	f040 80a4 	bne.w	8000604 <__udivmoddi4+0x234>
 80004bc:	1a8a      	subs	r2, r1, r2
 80004be:	0c03      	lsrs	r3, r0, #16
 80004c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c4:	b280      	uxth	r0, r0
 80004c6:	b2bc      	uxth	r4, r7
 80004c8:	2101      	movs	r1, #1
 80004ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80004d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004d6:	fb04 f20c 	mul.w	r2, r4, ip
 80004da:	429a      	cmp	r2, r3
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x11e>
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004e4:	d202      	bcs.n	80004ec <__udivmoddi4+0x11c>
 80004e6:	429a      	cmp	r2, r3
 80004e8:	f200 80e0 	bhi.w	80006ac <__udivmoddi4+0x2dc>
 80004ec:	46c4      	mov	ip, r8
 80004ee:	1a9b      	subs	r3, r3, r2
 80004f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004fc:	fb02 f404 	mul.w	r4, r2, r4
 8000500:	429c      	cmp	r4, r3
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x144>
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	f102 30ff 	add.w	r0, r2, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x142>
 800050c:	429c      	cmp	r4, r3
 800050e:	f200 80ca 	bhi.w	80006a6 <__udivmoddi4+0x2d6>
 8000512:	4602      	mov	r2, r0
 8000514:	1b1b      	subs	r3, r3, r4
 8000516:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800051a:	e7a5      	b.n	8000468 <__udivmoddi4+0x98>
 800051c:	f1c1 0620 	rsb	r6, r1, #32
 8000520:	408b      	lsls	r3, r1
 8000522:	fa22 f706 	lsr.w	r7, r2, r6
 8000526:	431f      	orrs	r7, r3
 8000528:	fa0e f401 	lsl.w	r4, lr, r1
 800052c:	fa20 f306 	lsr.w	r3, r0, r6
 8000530:	fa2e fe06 	lsr.w	lr, lr, r6
 8000534:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000538:	4323      	orrs	r3, r4
 800053a:	fa00 f801 	lsl.w	r8, r0, r1
 800053e:	fa1f fc87 	uxth.w	ip, r7
 8000542:	fbbe f0f9 	udiv	r0, lr, r9
 8000546:	0c1c      	lsrs	r4, r3, #16
 8000548:	fb09 ee10 	mls	lr, r9, r0, lr
 800054c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000550:	fb00 fe0c 	mul.w	lr, r0, ip
 8000554:	45a6      	cmp	lr, r4
 8000556:	fa02 f201 	lsl.w	r2, r2, r1
 800055a:	d909      	bls.n	8000570 <__udivmoddi4+0x1a0>
 800055c:	193c      	adds	r4, r7, r4
 800055e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000562:	f080 809c 	bcs.w	800069e <__udivmoddi4+0x2ce>
 8000566:	45a6      	cmp	lr, r4
 8000568:	f240 8099 	bls.w	800069e <__udivmoddi4+0x2ce>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	eba4 040e 	sub.w	r4, r4, lr
 8000574:	fa1f fe83 	uxth.w	lr, r3
 8000578:	fbb4 f3f9 	udiv	r3, r4, r9
 800057c:	fb09 4413 	mls	r4, r9, r3, r4
 8000580:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000584:	fb03 fc0c 	mul.w	ip, r3, ip
 8000588:	45a4      	cmp	ip, r4
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x1ce>
 800058c:	193c      	adds	r4, r7, r4
 800058e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000592:	f080 8082 	bcs.w	800069a <__udivmoddi4+0x2ca>
 8000596:	45a4      	cmp	ip, r4
 8000598:	d97f      	bls.n	800069a <__udivmoddi4+0x2ca>
 800059a:	3b02      	subs	r3, #2
 800059c:	443c      	add	r4, r7
 800059e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005a2:	eba4 040c 	sub.w	r4, r4, ip
 80005a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005aa:	4564      	cmp	r4, ip
 80005ac:	4673      	mov	r3, lr
 80005ae:	46e1      	mov	r9, ip
 80005b0:	d362      	bcc.n	8000678 <__udivmoddi4+0x2a8>
 80005b2:	d05f      	beq.n	8000674 <__udivmoddi4+0x2a4>
 80005b4:	b15d      	cbz	r5, 80005ce <__udivmoddi4+0x1fe>
 80005b6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ba:	eb64 0409 	sbc.w	r4, r4, r9
 80005be:	fa04 f606 	lsl.w	r6, r4, r6
 80005c2:	fa22 f301 	lsr.w	r3, r2, r1
 80005c6:	431e      	orrs	r6, r3
 80005c8:	40cc      	lsrs	r4, r1
 80005ca:	e9c5 6400 	strd	r6, r4, [r5]
 80005ce:	2100      	movs	r1, #0
 80005d0:	e74f      	b.n	8000472 <__udivmoddi4+0xa2>
 80005d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005d6:	0c01      	lsrs	r1, r0, #16
 80005d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005dc:	b280      	uxth	r0, r0
 80005de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005e2:	463b      	mov	r3, r7
 80005e4:	4638      	mov	r0, r7
 80005e6:	463c      	mov	r4, r7
 80005e8:	46b8      	mov	r8, r7
 80005ea:	46be      	mov	lr, r7
 80005ec:	2620      	movs	r6, #32
 80005ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80005f2:	eba2 0208 	sub.w	r2, r2, r8
 80005f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005fa:	e766      	b.n	80004ca <__udivmoddi4+0xfa>
 80005fc:	4601      	mov	r1, r0
 80005fe:	e718      	b.n	8000432 <__udivmoddi4+0x62>
 8000600:	4610      	mov	r0, r2
 8000602:	e72c      	b.n	800045e <__udivmoddi4+0x8e>
 8000604:	f1c6 0220 	rsb	r2, r6, #32
 8000608:	fa2e f302 	lsr.w	r3, lr, r2
 800060c:	40b7      	lsls	r7, r6
 800060e:	40b1      	lsls	r1, r6
 8000610:	fa20 f202 	lsr.w	r2, r0, r2
 8000614:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000618:	430a      	orrs	r2, r1
 800061a:	fbb3 f8fe 	udiv	r8, r3, lr
 800061e:	b2bc      	uxth	r4, r7
 8000620:	fb0e 3318 	mls	r3, lr, r8, r3
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800062a:	fb08 f904 	mul.w	r9, r8, r4
 800062e:	40b0      	lsls	r0, r6
 8000630:	4589      	cmp	r9, r1
 8000632:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000636:	b280      	uxth	r0, r0
 8000638:	d93e      	bls.n	80006b8 <__udivmoddi4+0x2e8>
 800063a:	1879      	adds	r1, r7, r1
 800063c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000640:	d201      	bcs.n	8000646 <__udivmoddi4+0x276>
 8000642:	4589      	cmp	r9, r1
 8000644:	d81f      	bhi.n	8000686 <__udivmoddi4+0x2b6>
 8000646:	eba1 0109 	sub.w	r1, r1, r9
 800064a:	fbb1 f9fe 	udiv	r9, r1, lr
 800064e:	fb09 f804 	mul.w	r8, r9, r4
 8000652:	fb0e 1119 	mls	r1, lr, r9, r1
 8000656:	b292      	uxth	r2, r2
 8000658:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800065c:	4542      	cmp	r2, r8
 800065e:	d229      	bcs.n	80006b4 <__udivmoddi4+0x2e4>
 8000660:	18ba      	adds	r2, r7, r2
 8000662:	f109 31ff 	add.w	r1, r9, #4294967295
 8000666:	d2c4      	bcs.n	80005f2 <__udivmoddi4+0x222>
 8000668:	4542      	cmp	r2, r8
 800066a:	d2c2      	bcs.n	80005f2 <__udivmoddi4+0x222>
 800066c:	f1a9 0102 	sub.w	r1, r9, #2
 8000670:	443a      	add	r2, r7
 8000672:	e7be      	b.n	80005f2 <__udivmoddi4+0x222>
 8000674:	45f0      	cmp	r8, lr
 8000676:	d29d      	bcs.n	80005b4 <__udivmoddi4+0x1e4>
 8000678:	ebbe 0302 	subs.w	r3, lr, r2
 800067c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000680:	3801      	subs	r0, #1
 8000682:	46e1      	mov	r9, ip
 8000684:	e796      	b.n	80005b4 <__udivmoddi4+0x1e4>
 8000686:	eba7 0909 	sub.w	r9, r7, r9
 800068a:	4449      	add	r1, r9
 800068c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000690:	fbb1 f9fe 	udiv	r9, r1, lr
 8000694:	fb09 f804 	mul.w	r8, r9, r4
 8000698:	e7db      	b.n	8000652 <__udivmoddi4+0x282>
 800069a:	4673      	mov	r3, lr
 800069c:	e77f      	b.n	800059e <__udivmoddi4+0x1ce>
 800069e:	4650      	mov	r0, sl
 80006a0:	e766      	b.n	8000570 <__udivmoddi4+0x1a0>
 80006a2:	4608      	mov	r0, r1
 80006a4:	e6fd      	b.n	80004a2 <__udivmoddi4+0xd2>
 80006a6:	443b      	add	r3, r7
 80006a8:	3a02      	subs	r2, #2
 80006aa:	e733      	b.n	8000514 <__udivmoddi4+0x144>
 80006ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80006b0:	443b      	add	r3, r7
 80006b2:	e71c      	b.n	80004ee <__udivmoddi4+0x11e>
 80006b4:	4649      	mov	r1, r9
 80006b6:	e79c      	b.n	80005f2 <__udivmoddi4+0x222>
 80006b8:	eba1 0109 	sub.w	r1, r1, r9
 80006bc:	46c4      	mov	ip, r8
 80006be:	fbb1 f9fe 	udiv	r9, r1, lr
 80006c2:	fb09 f804 	mul.w	r8, r9, r4
 80006c6:	e7c4      	b.n	8000652 <__udivmoddi4+0x282>

080006c8 <__aeabi_idiv0>:
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop

080006cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006d4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80006d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	200b      	movs	r0, #11
 80006f6:	f001 fbb4 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006fa:	200b      	movs	r0, #11
 80006fc:	f001 fbcb 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	200c      	movs	r0, #12
 8000706:	f001 fbac 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800070a:	200c      	movs	r0, #12
 800070c:	f001 fbc3 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	200d      	movs	r0, #13
 8000716:	f001 fba4 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800071a:	200d      	movs	r0, #13
 800071c:	f001 fbbb 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	200e      	movs	r0, #14
 8000726:	f001 fb9c 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800072a:	200e      	movs	r0, #14
 800072c:	f001 fbb3 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2010      	movs	r0, #16
 8000736:	f001 fb94 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800073a:	2010      	movs	r0, #16
 800073c:	f001 fbab 	bl	8001e96 <HAL_NVIC_EnableIRQ>

}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58024400 	.word	0x58024400

0800074c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	@ 0x30
 8000750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b80      	ldr	r3, [pc, #512]	@ (8000964 <MX_GPIO_Init+0x218>)
 8000764:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000768:	4a7e      	ldr	r2, [pc, #504]	@ (8000964 <MX_GPIO_Init+0x218>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000772:	4b7c      	ldr	r3, [pc, #496]	@ (8000964 <MX_GPIO_Init+0x218>)
 8000774:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000780:	4b78      	ldr	r3, [pc, #480]	@ (8000964 <MX_GPIO_Init+0x218>)
 8000782:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000786:	4a77      	ldr	r2, [pc, #476]	@ (8000964 <MX_GPIO_Init+0x218>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000790:	4b74      	ldr	r3, [pc, #464]	@ (8000964 <MX_GPIO_Init+0x218>)
 8000792:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b71      	ldr	r3, [pc, #452]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a4:	4a6f      	ldr	r2, [pc, #444]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ae:	4b6d      	ldr	r3, [pc, #436]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007bc:	4b69      	ldr	r3, [pc, #420]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007c2:	4a68      	ldr	r2, [pc, #416]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007cc:	4b65      	ldr	r3, [pc, #404]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	4b62      	ldr	r3, [pc, #392]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007e0:	4a60      	ldr	r2, [pc, #384]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ea:	4b5e      	ldr	r3, [pc, #376]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007f0:	f003 0310 	and.w	r3, r3, #16
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f8:	4b5a      	ldr	r3, [pc, #360]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007fe:	4a59      	ldr	r2, [pc, #356]	@ (8000964 <MX_GPIO_Init+0x218>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000808:	4b56      	ldr	r3, [pc, #344]	@ (8000964 <MX_GPIO_Init+0x218>)
 800080a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000816:	4b53      	ldr	r3, [pc, #332]	@ (8000964 <MX_GPIO_Init+0x218>)
 8000818:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800081c:	4a51      	ldr	r2, [pc, #324]	@ (8000964 <MX_GPIO_Init+0x218>)
 800081e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000822:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000826:	4b4f      	ldr	r3, [pc, #316]	@ (8000964 <MX_GPIO_Init+0x218>)
 8000828:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800082c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU6500_AD0_GPIO_Port, MPU6500_AD0_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2108      	movs	r1, #8
 8000838:	484b      	ldr	r0, [pc, #300]	@ (8000968 <MX_GPIO_Init+0x21c>)
 800083a:	f004 fc59 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000844:	4849      	ldr	r0, [pc, #292]	@ (800096c <MX_GPIO_Init+0x220>)
 8000846:	f004 fc53 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000850:	4847      	ldr	r0, [pc, #284]	@ (8000970 <MX_GPIO_Init+0x224>)
 8000852:	f004 fc4d 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800085c:	4845      	ldr	r0, [pc, #276]	@ (8000974 <MX_GPIO_Init+0x228>)
 800085e:	f004 fc47 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000868:	4842      	ldr	r0, [pc, #264]	@ (8000974 <MX_GPIO_Init+0x228>)
 800086a:	f004 fc41 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000874:	4840      	ldr	r0, [pc, #256]	@ (8000978 <MX_GPIO_Init+0x22c>)
 8000876:	f004 fc3b 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	2110      	movs	r1, #16
 800087e:	483b      	ldr	r0, [pc, #236]	@ (800096c <MX_GPIO_Init+0x220>)
 8000880:	f004 fc36 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2102      	movs	r1, #2
 8000888:	4839      	ldr	r0, [pc, #228]	@ (8000970 <MX_GPIO_Init+0x224>)
 800088a:	f004 fc31 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4836      	ldr	r0, [pc, #216]	@ (800097c <MX_GPIO_Init+0x230>)
 80008a4:	f004 fa74 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6500_AD0_Pin */
  GPIO_InitStruct.Pin = MPU6500_AD0_Pin;
 80008a8:	2308      	movs	r3, #8
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MPU6500_AD0_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	482a      	ldr	r0, [pc, #168]	@ (8000968 <MX_GPIO_Init+0x21c>)
 80008c0:	f004 fa66 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB4 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_4;
 80008c4:	f244 0311 	movw	r3, #16401	@ 0x4011
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4823      	ldr	r0, [pc, #140]	@ (800096c <MX_GPIO_Init+0x220>)
 80008de:	f004 fa57 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE15 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|LD2_Pin;
 80008e2:	f248 0302 	movw	r3, #32770	@ 0x8002
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	481d      	ldr	r0, [pc, #116]	@ (8000970 <MX_GPIO_Init+0x224>)
 80008fc:	f004 fa48 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin;
 8000900:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090e:	2302      	movs	r3, #2
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_DC_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4816      	ldr	r0, [pc, #88]	@ (8000974 <MX_GPIO_Init+0x228>)
 800091a:	f004 fa39 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin;
 800091e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_RST_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	480f      	ldr	r0, [pc, #60]	@ (8000974 <MX_GPIO_Init+0x228>)
 8000938:	f004 fa2a 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 800093c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4808      	ldr	r0, [pc, #32]	@ (8000978 <MX_GPIO_Init+0x22c>)
 8000956:	f004 fa1b 	bl	8004d90 <HAL_GPIO_Init>

}
 800095a:	bf00      	nop
 800095c:	3730      	adds	r7, #48	@ 0x30
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	58024400 	.word	0x58024400
 8000968:	58020000 	.word	0x58020000
 800096c:	58020400 	.word	0x58020400
 8000970:	58021000 	.word	0x58021000
 8000974:	58020c00 	.word	0x58020c00
 8000978:	58021800 	.word	0x58021800
 800097c:	58020800 	.word	0x58020800

08000980 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000984:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <MX_I2C2_Init+0x74>)
 8000986:	4a1c      	ldr	r2, [pc, #112]	@ (80009f8 <MX_I2C2_Init+0x78>)
 8000988:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 800098a:	4b1a      	ldr	r3, [pc, #104]	@ (80009f4 <MX_I2C2_Init+0x74>)
 800098c:	4a1b      	ldr	r2, [pc, #108]	@ (80009fc <MX_I2C2_Init+0x7c>)
 800098e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000990:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <MX_I2C2_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000996:	4b17      	ldr	r3, [pc, #92]	@ (80009f4 <MX_I2C2_Init+0x74>)
 8000998:	2201      	movs	r2, #1
 800099a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800099c:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <MX_I2C2_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009a2:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <MX_I2C2_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a8:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <MX_I2C2_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <MX_I2C2_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <MX_I2C2_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009ba:	480e      	ldr	r0, [pc, #56]	@ (80009f4 <MX_I2C2_Init+0x74>)
 80009bc:	f004 fbb2 	bl	8005124 <HAL_I2C_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009c6:	f000 fae3 	bl	8000f90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4809      	ldr	r0, [pc, #36]	@ (80009f4 <MX_I2C2_Init+0x74>)
 80009ce:	f004 ffcd 	bl	800596c <HAL_I2CEx_ConfigAnalogFilter>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009d8:	f000 fada 	bl	8000f90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009dc:	2100      	movs	r1, #0
 80009de:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <MX_I2C2_Init+0x74>)
 80009e0:	f005 f80f 	bl	8005a02 <HAL_I2CEx_ConfigDigitalFilter>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009ea:	f000 fad1 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	240001f4 	.word	0x240001f4
 80009f8:	40005800 	.word	0x40005800
 80009fc:	20b0ccff 	.word	0x20b0ccff

08000a00 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a06:	4a1c      	ldr	r2, [pc, #112]	@ (8000a78 <MX_I2C4_Init+0x78>)
 8000a08:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0CCFF;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a7c <MX_I2C4_Init+0x7c>)
 8000a0e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a10:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a16:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a22:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a3a:	480e      	ldr	r0, [pc, #56]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a3c:	f004 fb72 	bl	8005124 <HAL_I2C_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a46:	f000 faa3 	bl	8000f90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4809      	ldr	r0, [pc, #36]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a4e:	f004 ff8d 	bl	800596c <HAL_I2CEx_ConfigAnalogFilter>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a58:	f000 fa9a 	bl	8000f90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a60:	f004 ffcf 	bl	8005a02 <HAL_I2CEx_ConfigDigitalFilter>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a6a:	f000 fa91 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	24000248 	.word	0x24000248
 8000a78:	58001c00 	.word	0x58001c00
 8000a7c:	20b0ccff 	.word	0x20b0ccff

08000a80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b0bc      	sub	sp, #240	@ 0xf0
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a98:	f107 0318 	add.w	r3, r7, #24
 8000a9c:	22c0      	movs	r2, #192	@ 0xc0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f00b f8d4 	bl	800bc4e <memset>
  if(i2cHandle->Instance==I2C2)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a4d      	ldr	r2, [pc, #308]	@ (8000be0 <HAL_I2C_MspInit+0x160>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d147      	bne.n	8000b40 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ab0:	f04f 0208 	mov.w	r2, #8
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac2:	f107 0318 	add.w	r3, r7, #24
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f006 f800 	bl	8006acc <HAL_RCCEx_PeriphCLKConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000ad2:	f000 fa5d 	bl	8000f90 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b43      	ldr	r3, [pc, #268]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000ad8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000adc:	4a41      	ldr	r2, [pc, #260]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000ade:	f043 0302 	orr.w	r3, r3, #2
 8000ae2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ae6:	4b3f      	ldr	r3, [pc, #252]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000ae8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000af4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000af8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afc:	2312      	movs	r3, #18
 8000afe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4833      	ldr	r0, [pc, #204]	@ (8000be8 <HAL_I2C_MspInit+0x168>)
 8000b1c:	f004 f938 	bl	8004d90 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b20:	4b30      	ldr	r3, [pc, #192]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000b22:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000b26:	4a2f      	ldr	r2, [pc, #188]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000b28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b2c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000b30:	4b2c      	ldr	r3, [pc, #176]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000b32:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000b3e:	e04b      	b.n	8000bd8 <HAL_I2C_MspInit+0x158>
  else if(i2cHandle->Instance==I2C4)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a29      	ldr	r2, [pc, #164]	@ (8000bec <HAL_I2C_MspInit+0x16c>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d146      	bne.n	8000bd8 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000b4a:	f04f 0210 	mov.w	r2, #16
 8000b4e:	f04f 0300 	mov.w	r3, #0
 8000b52:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5c:	f107 0318 	add.w	r3, r7, #24
 8000b60:	4618      	mov	r0, r3
 8000b62:	f005 ffb3 	bl	8006acc <HAL_RCCEx_PeriphCLKConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8000b6c:	f000 fa10 	bl	8000f90 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b70:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000b72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b76:	4a1b      	ldr	r2, [pc, #108]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b80:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000b82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPU6500_SCL_Pin|MPU6500_SDA_Pin;
 8000b8e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000b92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b96:	2312      	movs	r3, #18
 8000b98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480e      	ldr	r0, [pc, #56]	@ (8000bf0 <HAL_I2C_MspInit+0x170>)
 8000bb6:	f004 f8eb 	bl	8004d90 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000bba:	4b0a      	ldr	r3, [pc, #40]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000bbc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000bc0:	4a08      	ldr	r2, [pc, #32]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000bcc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
}
 8000bd8:	bf00      	nop
 8000bda:	37f0      	adds	r7, #240	@ 0xf0
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40005800 	.word	0x40005800
 8000be4:	58024400 	.word	0x58024400
 8000be8:	58020400 	.word	0x58020400
 8000bec:	58001c00 	.word	0x58001c00
 8000bf0:	58020c00 	.word	0x58020c00

08000bf4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000bfc:	1d39      	adds	r1, r7, #4
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	2201      	movs	r2, #1
 8000c04:	4803      	ldr	r0, [pc, #12]	@ (8000c14 <__io_putchar+0x20>)
 8000c06:	f008 f98a 	bl	8008f1e <HAL_UART_Transmit>
	return chr;
 8000c0a:	687b      	ldr	r3, [r7, #4]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	240006cc 	.word	0x240006cc

08000c18 <MPU6500_ReadWhoAmI.0>:
#ifdef SCREEN_TEST
	ST7789_Init();
#endif

#ifdef MPU6500_TEST
	uint8_t MPU6500_ReadWhoAmI(void) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af04      	add	r7, sp, #16
 8000c1e:	f8c7 c004 	str.w	ip, [r7, #4]
	    uint8_t who_am_i = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	73fb      	strb	r3, [r7, #15]
	    HAL_I2C_Mem_Read(&MPU6500_I2C, MPU6500_ADDR, MPU6500_RGSTR_WHO_AM_I,
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	9302      	str	r3, [sp, #8]
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	9301      	str	r3, [sp, #4]
 8000c30:	f107 030f 	add.w	r3, r7, #15
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	2301      	movs	r3, #1
 8000c38:	2275      	movs	r2, #117	@ 0x75
 8000c3a:	21d0      	movs	r1, #208	@ 0xd0
 8000c3c:	4803      	ldr	r0, [pc, #12]	@ (8000c4c <MPU6500_ReadWhoAmI.0+0x34>)
 8000c3e:	f004 fb0d 	bl	800525c <HAL_I2C_Mem_Read>
	                     I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, HAL_MAX_DELAY);
	    return who_am_i;
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
	}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	24000248 	.word	0x24000248

08000c50 <main>:
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
int main(void)
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	607b      	str	r3, [r7, #4]
  MPU_Config();
 8000c5c:	f000 f96c 	bl	8000f38 <MPU_Config>
  HAL_Init();
 8000c60:	f000 ff92 	bl	8001b88 <HAL_Init>
  SystemClock_Config();
 8000c64:	f000 f816 	bl	8000c94 <SystemClock_Config>
  MX_GPIO_Init();
 8000c68:	f7ff fd70 	bl	800074c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6c:	f7ff fd2e 	bl	80006cc <MX_DMA_Init>
  MX_UART4_Init();
 8000c70:	f000 fc96 	bl	80015a0 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000c74:	f000 fd2c 	bl	80016d0 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000c78:	f7ff fe82 	bl	8000980 <MX_I2C2_Init>
  MX_UART5_Init();
 8000c7c:	f000 fcdc 	bl	8001638 <MX_UART5_Init>
  MX_SPI1_Init();
 8000c80:	f000 f98c 	bl	8000f9c <MX_SPI1_Init>
  MX_I2C4_Init();
 8000c84:	f7ff febc 	bl	8000a00 <MX_I2C4_Init>
	MPU6500_ReadWhoAmI();
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	469c      	mov	ip, r3
 8000c8c:	f7ff ffc4 	bl	8000c18 <MPU6500_ReadWhoAmI.0>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <main+0x40>

08000c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b09c      	sub	sp, #112	@ 0x70
 8000c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9e:	224c      	movs	r2, #76	@ 0x4c
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f00a ffd3 	bl	800bc4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2220      	movs	r2, #32
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f00a ffcd 	bl	800bc4e <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8000d74 <SystemClock_Config+0xe0>)
 8000cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cbe:	2004      	movs	r0, #4
 8000cc0:	f004 feec 	bl	8005a9c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d78 <SystemClock_Config+0xe4>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8000d78 <SystemClock_Config+0xe4>)
 8000cce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b28      	ldr	r3, [pc, #160]	@ (8000d78 <SystemClock_Config+0xe4>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce0:	bf00      	nop
 8000ce2:	4b25      	ldr	r3, [pc, #148]	@ (8000d78 <SystemClock_Config+0xe4>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cee:	d1f8      	bne.n	8000ce2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000d06:	2346      	movs	r3, #70	@ 0x46
 8000d08:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d16:	230c      	movs	r3, #12
 8000d18:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d26:	4618      	mov	r0, r3
 8000d28:	f004 ff12 	bl	8005b50 <HAL_RCC_OscConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d32:	f000 f92d 	bl	8000f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d36:	233f      	movs	r3, #63	@ 0x3f
 8000d38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d46:	2340      	movs	r3, #64	@ 0x40
 8000d48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d4a:	2340      	movs	r3, #64	@ 0x40
 8000d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d52:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d54:	2340      	movs	r3, #64	@ 0x40
 8000d56:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2106      	movs	r1, #6
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f005 fb29 	bl	80063b4 <HAL_RCC_ClockConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000d68:	f000 f912 	bl	8000f90 <Error_Handler>
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3770      	adds	r7, #112	@ 0x70
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	58024400 	.word	0x58024400
 8000d78:	58024800 	.word	0x58024800

08000d7c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
// This callback is called when idle line is detected or buffer is full
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == UART4)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a56      	ldr	r2, [pc, #344]	@ (8000ee8 <HAL_UARTEx_RxEventCallback+0x16c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	f040 80a5 	bne.w	8000ede <HAL_UARTEx_RxEventCallback+0x162>
    {
        // Copy the data from DMA buffer to message buffer
        memcpy(messageBuffer, rxBuffer, Size);
 8000d94:	887b      	ldrh	r3, [r7, #2]
 8000d96:	461a      	mov	r2, r3
 8000d98:	4954      	ldr	r1, [pc, #336]	@ (8000eec <HAL_UARTEx_RxEventCallback+0x170>)
 8000d9a:	4855      	ldr	r0, [pc, #340]	@ (8000ef0 <HAL_UARTEx_RxEventCallback+0x174>)
 8000d9c:	f00a ffd7 	bl	800bd4e <memcpy>

        // Null-terminate the string
        messageBuffer[Size] = '\0';
 8000da0:	887b      	ldrh	r3, [r7, #2]
 8000da2:	4a53      	ldr	r2, [pc, #332]	@ (8000ef0 <HAL_UARTEx_RxEventCallback+0x174>)
 8000da4:	2100      	movs	r1, #0
 8000da6:	54d1      	strb	r1, [r2, r3]

        // Set flag for main loop
        messageReady = 1;
 8000da8:	4b52      	ldr	r3, [pc, #328]	@ (8000ef4 <HAL_UARTEx_RxEventCallback+0x178>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]

        HAL_UART_AbortReceive(huart);  // Stop DMA
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f008 f944 	bl	800903c <HAL_UART_AbortReceive>
        memset(rxBuffer, 0, sizeof(rxBuffer));  // Reset buffer
 8000db4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000db8:	2100      	movs	r1, #0
 8000dba:	484c      	ldr	r0, [pc, #304]	@ (8000eec <HAL_UARTEx_RxEventCallback+0x170>)
 8000dbc:	f00a ff47 	bl	800bc4e <memset>

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 8000dc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dc4:	4949      	ldr	r1, [pc, #292]	@ (8000eec <HAL_UARTEx_RxEventCallback+0x170>)
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f00a f963 	bl	800b092 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a48      	ldr	r2, [pc, #288]	@ (8000ef8 <HAL_UARTEx_RxEventCallback+0x17c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d068      	beq.n	8000eac <HAL_UARTEx_RxEventCallback+0x130>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a46      	ldr	r2, [pc, #280]	@ (8000efc <HAL_UARTEx_RxEventCallback+0x180>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d061      	beq.n	8000eac <HAL_UARTEx_RxEventCallback+0x130>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a43      	ldr	r2, [pc, #268]	@ (8000f00 <HAL_UARTEx_RxEventCallback+0x184>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d05a      	beq.n	8000eac <HAL_UARTEx_RxEventCallback+0x130>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a41      	ldr	r2, [pc, #260]	@ (8000f04 <HAL_UARTEx_RxEventCallback+0x188>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d053      	beq.n	8000eac <HAL_UARTEx_RxEventCallback+0x130>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a3e      	ldr	r2, [pc, #248]	@ (8000f08 <HAL_UARTEx_RxEventCallback+0x18c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d04c      	beq.n	8000eac <HAL_UARTEx_RxEventCallback+0x130>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a3c      	ldr	r2, [pc, #240]	@ (8000f0c <HAL_UARTEx_RxEventCallback+0x190>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d045      	beq.n	8000eac <HAL_UARTEx_RxEventCallback+0x130>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a39      	ldr	r2, [pc, #228]	@ (8000f10 <HAL_UARTEx_RxEventCallback+0x194>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d03e      	beq.n	8000eac <HAL_UARTEx_RxEventCallback+0x130>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a37      	ldr	r2, [pc, #220]	@ (8000f14 <HAL_UARTEx_RxEventCallback+0x198>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d037      	beq.n	8000eac <HAL_UARTEx_RxEventCallback+0x130>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a34      	ldr	r2, [pc, #208]	@ (8000f18 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d030      	beq.n	8000eac <HAL_UARTEx_RxEventCallback+0x130>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a32      	ldr	r2, [pc, #200]	@ (8000f1c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d029      	beq.n	8000eac <HAL_UARTEx_RxEventCallback+0x130>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a2f      	ldr	r2, [pc, #188]	@ (8000f20 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d022      	beq.n	8000eac <HAL_UARTEx_RxEventCallback+0x130>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a2d      	ldr	r2, [pc, #180]	@ (8000f24 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d01b      	beq.n	8000eac <HAL_UARTEx_RxEventCallback+0x130>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8000f28 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d014      	beq.n	8000eac <HAL_UARTEx_RxEventCallback+0x130>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a28      	ldr	r2, [pc, #160]	@ (8000f2c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d00d      	beq.n	8000eac <HAL_UARTEx_RxEventCallback+0x130>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a25      	ldr	r2, [pc, #148]	@ (8000f30 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d006      	beq.n	8000eac <HAL_UARTEx_RxEventCallback+0x130>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a23      	ldr	r2, [pc, #140]	@ (8000f34 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d10c      	bne.n	8000ec6 <HAL_UARTEx_RxEventCallback+0x14a>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0208 	bic.w	r2, r2, #8
 8000ec2:	601a      	str	r2, [r3, #0]
    }
}
 8000ec4:	e00b      	b.n	8000ede <HAL_UARTEx_RxEventCallback+0x162>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 0204 	bic.w	r2, r2, #4
 8000edc:	601a      	str	r2, [r3, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40004c00 	.word	0x40004c00
 8000eec:	2400029c 	.word	0x2400029c
 8000ef0:	2400039c 	.word	0x2400039c
 8000ef4:	2400049c 	.word	0x2400049c
 8000ef8:	40020010 	.word	0x40020010
 8000efc:	40020028 	.word	0x40020028
 8000f00:	40020040 	.word	0x40020040
 8000f04:	40020058 	.word	0x40020058
 8000f08:	40020070 	.word	0x40020070
 8000f0c:	40020088 	.word	0x40020088
 8000f10:	400200a0 	.word	0x400200a0
 8000f14:	400200b8 	.word	0x400200b8
 8000f18:	40020410 	.word	0x40020410
 8000f1c:	40020428 	.word	0x40020428
 8000f20:	40020440 	.word	0x40020440
 8000f24:	40020458 	.word	0x40020458
 8000f28:	40020470 	.word	0x40020470
 8000f2c:	40020488 	.word	0x40020488
 8000f30:	400204a0 	.word	0x400204a0
 8000f34:	400204b8 	.word	0x400204b8

08000f38 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f4a:	f000 ffbf 	bl	8001ecc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f5a:	231f      	movs	r3, #31
 8000f5c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f5e:	2387      	movs	r3, #135	@ 0x87
 8000f60:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f66:	2300      	movs	r3, #0
 8000f68:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 ffdd 	bl	8001f3c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f82:	2004      	movs	r0, #4
 8000f84:	f000 ffba 	bl	8001efc <HAL_MPU_Enable>

}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <Error_Handler+0x8>

08000f9c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fa0:	4b29      	ldr	r3, [pc, #164]	@ (8001048 <MX_SPI1_Init+0xac>)
 8000fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800104c <MX_SPI1_Init+0xb0>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fa6:	4b28      	ldr	r3, [pc, #160]	@ (8001048 <MX_SPI1_Init+0xac>)
 8000fa8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000fae:	4b26      	ldr	r3, [pc, #152]	@ (8001048 <MX_SPI1_Init+0xac>)
 8000fb0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fb4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fb6:	4b24      	ldr	r3, [pc, #144]	@ (8001048 <MX_SPI1_Init+0xac>)
 8000fb8:	2207      	movs	r2, #7
 8000fba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000fbc:	4b22      	ldr	r3, [pc, #136]	@ (8001048 <MX_SPI1_Init+0xac>)
 8000fbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000fc4:	4b20      	ldr	r3, [pc, #128]	@ (8001048 <MX_SPI1_Init+0xac>)
 8000fc6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000fca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001048 <MX_SPI1_Init+0xac>)
 8000fce:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fd2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <MX_SPI1_Init+0xac>)
 8000fd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <MX_SPI1_Init+0xac>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <MX_SPI1_Init+0xac>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <MX_SPI1_Init+0xac>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000fee:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <MX_SPI1_Init+0xac>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <MX_SPI1_Init+0xac>)
 8000ff6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ffa:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <MX_SPI1_Init+0xac>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001002:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <MX_SPI1_Init+0xac>)
 8001004:	2200      	movs	r2, #0
 8001006:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <MX_SPI1_Init+0xac>)
 800100a:	2200      	movs	r2, #0
 800100c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800100e:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <MX_SPI1_Init+0xac>)
 8001010:	2200      	movs	r2, #0
 8001012:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <MX_SPI1_Init+0xac>)
 8001016:	2200      	movs	r2, #0
 8001018:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <MX_SPI1_Init+0xac>)
 800101c:	2200      	movs	r2, #0
 800101e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001020:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <MX_SPI1_Init+0xac>)
 8001022:	2200      	movs	r2, #0
 8001024:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <MX_SPI1_Init+0xac>)
 8001028:	2200      	movs	r2, #0
 800102a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <MX_SPI1_Init+0xac>)
 800102e:	2200      	movs	r2, #0
 8001030:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_SPI1_Init+0xac>)
 8001034:	f007 fb2a 	bl	800868c <HAL_SPI_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 800103e:	f7ff ffa7 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	240004a0 	.word	0x240004a0
 800104c:	40013000 	.word	0x40013000

08001050 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0ba      	sub	sp, #232	@ 0xe8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	22c0      	movs	r2, #192	@ 0xc0
 800106e:	2100      	movs	r1, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f00a fdec 	bl	800bc4e <memset>
  if(spiHandle->Instance==SPI1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a40      	ldr	r2, [pc, #256]	@ (800117c <HAL_SPI_MspInit+0x12c>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d179      	bne.n	8001174 <HAL_SPI_MspInit+0x124>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001080:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800108c:	2300      	movs	r3, #0
 800108e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	4618      	mov	r0, r3
 8001096:	f005 fd19 	bl	8006acc <HAL_RCCEx_PeriphCLKConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80010a0:	f7ff ff76 	bl	8000f90 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010a4:	4b36      	ldr	r3, [pc, #216]	@ (8001180 <HAL_SPI_MspInit+0x130>)
 80010a6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80010aa:	4a35      	ldr	r2, [pc, #212]	@ (8001180 <HAL_SPI_MspInit+0x130>)
 80010ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010b0:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80010b4:	4b32      	ldr	r3, [pc, #200]	@ (8001180 <HAL_SPI_MspInit+0x130>)
 80010b6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80010ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001180 <HAL_SPI_MspInit+0x130>)
 80010c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010c8:	4a2d      	ldr	r2, [pc, #180]	@ (8001180 <HAL_SPI_MspInit+0x130>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80010d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001180 <HAL_SPI_MspInit+0x130>)
 80010d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010e0:	23a0      	movs	r3, #160	@ 0xa0
 80010e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010f8:	2305      	movs	r3, #5
 80010fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001102:	4619      	mov	r1, r3
 8001104:	481f      	ldr	r0, [pc, #124]	@ (8001184 <HAL_SPI_MspInit+0x134>)
 8001106:	f003 fe43 	bl	8004d90 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream5;
 800110a:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <HAL_SPI_MspInit+0x138>)
 800110c:	4a1f      	ldr	r2, [pc, #124]	@ (800118c <HAL_SPI_MspInit+0x13c>)
 800110e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001110:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <HAL_SPI_MspInit+0x138>)
 8001112:	2226      	movs	r2, #38	@ 0x26
 8001114:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001116:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <HAL_SPI_MspInit+0x138>)
 8001118:	2240      	movs	r2, #64	@ 0x40
 800111a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800111c:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <HAL_SPI_MspInit+0x138>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <HAL_SPI_MspInit+0x138>)
 8001124:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001128:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800112a:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <HAL_SPI_MspInit+0x138>)
 800112c:	2200      	movs	r2, #0
 800112e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001130:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <HAL_SPI_MspInit+0x138>)
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001136:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <HAL_SPI_MspInit+0x138>)
 8001138:	2200      	movs	r2, #0
 800113a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <HAL_SPI_MspInit+0x138>)
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <HAL_SPI_MspInit+0x138>)
 8001144:	2200      	movs	r2, #0
 8001146:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001148:	480f      	ldr	r0, [pc, #60]	@ (8001188 <HAL_SPI_MspInit+0x138>)
 800114a:	f000 ff37 	bl	8001fbc <HAL_DMA_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8001154:	f7ff ff1c 	bl	8000f90 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a0b      	ldr	r2, [pc, #44]	@ (8001188 <HAL_SPI_MspInit+0x138>)
 800115c:	679a      	str	r2, [r3, #120]	@ 0x78
 800115e:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <HAL_SPI_MspInit+0x138>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	2023      	movs	r0, #35	@ 0x23
 800116a:	f000 fe7a 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800116e:	2023      	movs	r0, #35	@ 0x23
 8001170:	f000 fe91 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001174:	bf00      	nop
 8001176:	37e8      	adds	r7, #232	@ 0xe8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40013000 	.word	0x40013000
 8001180:	58024400 	.word	0x58024400
 8001184:	58020000 	.word	0x58020000
 8001188:	24000528 	.word	0x24000528
 800118c:	40020088 	.word	0x40020088

08001190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <HAL_MspInit+0x30>)
 8001198:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800119c:	4a08      	ldr	r2, [pc, #32]	@ (80011c0 <HAL_MspInit+0x30>)
 800119e:	f043 0302 	orr.w	r3, r3, #2
 80011a2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80011a6:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_MspInit+0x30>)
 80011a8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	58024400 	.word	0x58024400

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <NMI_Handler+0x4>

080011cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <MemManage_Handler+0x4>

080011dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121a:	f000 fd27 	bl	8001c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001228:	4802      	ldr	r0, [pc, #8]	@ (8001234 <DMA1_Stream0_IRQHandler+0x10>)
 800122a:	f002 fa23 	bl	8003674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	24000850 	.word	0x24000850

08001238 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800123c:	4802      	ldr	r0, [pc, #8]	@ (8001248 <DMA1_Stream1_IRQHandler+0x10>)
 800123e:	f002 fa19 	bl	8003674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	240008c8 	.word	0x240008c8

0800124c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001250:	4802      	ldr	r0, [pc, #8]	@ (800125c <DMA1_Stream2_IRQHandler+0x10>)
 8001252:	f002 fa0f 	bl	8003674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	24000760 	.word	0x24000760

08001260 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001264:	4802      	ldr	r0, [pc, #8]	@ (8001270 <DMA1_Stream3_IRQHandler+0x10>)
 8001266:	f002 fa05 	bl	8003674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	240007d8 	.word	0x240007d8

08001274 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001278:	4802      	ldr	r0, [pc, #8]	@ (8001284 <DMA1_Stream5_IRQHandler+0x10>)
 800127a:	f002 f9fb 	bl	8003674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	24000528 	.word	0x24000528

08001288 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800128c:	4802      	ldr	r0, [pc, #8]	@ (8001298 <SPI1_IRQHandler+0x10>)
 800128e:	f007 fb21 	bl	80088d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	240004a0 	.word	0x240004a0

0800129c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80012a0:	4802      	ldr	r0, [pc, #8]	@ (80012ac <UART4_IRQHandler+0x10>)
 80012a2:	f007 ff81 	bl	80091a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	240005a4 	.word	0x240005a4

080012b0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80012b4:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <UART5_IRQHandler+0x10>)
 80012b6:	f007 ff77 	bl	80091a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	24000638 	.word	0x24000638

080012c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return 1;
 80012c8:	2301      	movs	r3, #1
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <_kill>:

int _kill(int pid, int sig)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012de:	f00a fd09 	bl	800bcf4 <__errno>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2216      	movs	r2, #22
 80012e6:	601a      	str	r2, [r3, #0]
  return -1;
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <_exit>:

void _exit (int status)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ffe7 	bl	80012d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001306:	bf00      	nop
 8001308:	e7fd      	b.n	8001306 <_exit+0x12>

0800130a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	e00a      	b.n	8001332 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800131c:	f3af 8000 	nop.w
 8001320:	4601      	mov	r1, r0
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	1c5a      	adds	r2, r3, #1
 8001326:	60ba      	str	r2, [r7, #8]
 8001328:	b2ca      	uxtb	r2, r1
 800132a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	3301      	adds	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	429a      	cmp	r2, r3
 8001338:	dbf0      	blt.n	800131c <_read+0x12>
  }

  return len;
 800133a:	687b      	ldr	r3, [r7, #4]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	e009      	b.n	800136a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	60ba      	str	r2, [r7, #8]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fc48 	bl	8000bf4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3301      	adds	r3, #1
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	429a      	cmp	r2, r3
 8001370:	dbf1      	blt.n	8001356 <_write+0x12>
  }
  return len;
 8001372:	687b      	ldr	r3, [r7, #4]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <_close>:

int _close(int file)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013a4:	605a      	str	r2, [r3, #4]
  return 0;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <_isatty>:

int _isatty(int file)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013bc:	2301      	movs	r3, #1
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b085      	sub	sp, #20
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	60f8      	str	r0, [r7, #12]
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ec:	4a14      	ldr	r2, [pc, #80]	@ (8001440 <_sbrk+0x5c>)
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <_sbrk+0x60>)
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f8:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001400:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <_sbrk+0x64>)
 8001402:	4a12      	ldr	r2, [pc, #72]	@ (800144c <_sbrk+0x68>)
 8001404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001406:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <_sbrk+0x64>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	429a      	cmp	r2, r3
 8001412:	d207      	bcs.n	8001424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001414:	f00a fc6e 	bl	800bcf4 <__errno>
 8001418:	4603      	mov	r3, r0
 800141a:	220c      	movs	r2, #12
 800141c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	e009      	b.n	8001438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001424:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142a:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	4a05      	ldr	r2, [pc, #20]	@ (8001448 <_sbrk+0x64>)
 8001434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001436:	68fb      	ldr	r3, [r7, #12]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	24100000 	.word	0x24100000
 8001444:	00000400 	.word	0x00000400
 8001448:	240005a0 	.word	0x240005a0
 800144c:	24000a90 	.word	0x24000a90

08001450 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001454:	4b3e      	ldr	r3, [pc, #248]	@ (8001550 <SystemInit+0x100>)
 8001456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800145a:	4a3d      	ldr	r2, [pc, #244]	@ (8001550 <SystemInit+0x100>)
 800145c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001460:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001464:	4b3b      	ldr	r3, [pc, #236]	@ (8001554 <SystemInit+0x104>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 030f 	and.w	r3, r3, #15
 800146c:	2b02      	cmp	r3, #2
 800146e:	d807      	bhi.n	8001480 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001470:	4b38      	ldr	r3, [pc, #224]	@ (8001554 <SystemInit+0x104>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f023 030f 	bic.w	r3, r3, #15
 8001478:	4a36      	ldr	r2, [pc, #216]	@ (8001554 <SystemInit+0x104>)
 800147a:	f043 0303 	orr.w	r3, r3, #3
 800147e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001480:	4b35      	ldr	r3, [pc, #212]	@ (8001558 <SystemInit+0x108>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a34      	ldr	r2, [pc, #208]	@ (8001558 <SystemInit+0x108>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800148c:	4b32      	ldr	r3, [pc, #200]	@ (8001558 <SystemInit+0x108>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001492:	4b31      	ldr	r3, [pc, #196]	@ (8001558 <SystemInit+0x108>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4930      	ldr	r1, [pc, #192]	@ (8001558 <SystemInit+0x108>)
 8001498:	4b30      	ldr	r3, [pc, #192]	@ (800155c <SystemInit+0x10c>)
 800149a:	4013      	ands	r3, r2
 800149c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800149e:	4b2d      	ldr	r3, [pc, #180]	@ (8001554 <SystemInit+0x104>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d007      	beq.n	80014ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001554 <SystemInit+0x104>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 030f 	bic.w	r3, r3, #15
 80014b2:	4a28      	ldr	r2, [pc, #160]	@ (8001554 <SystemInit+0x104>)
 80014b4:	f043 0303 	orr.w	r3, r3, #3
 80014b8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80014ba:	4b27      	ldr	r3, [pc, #156]	@ (8001558 <SystemInit+0x108>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80014c0:	4b25      	ldr	r3, [pc, #148]	@ (8001558 <SystemInit+0x108>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80014c6:	4b24      	ldr	r3, [pc, #144]	@ (8001558 <SystemInit+0x108>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014cc:	4b22      	ldr	r3, [pc, #136]	@ (8001558 <SystemInit+0x108>)
 80014ce:	4a24      	ldr	r2, [pc, #144]	@ (8001560 <SystemInit+0x110>)
 80014d0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014d2:	4b21      	ldr	r3, [pc, #132]	@ (8001558 <SystemInit+0x108>)
 80014d4:	4a23      	ldr	r2, [pc, #140]	@ (8001564 <SystemInit+0x114>)
 80014d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <SystemInit+0x108>)
 80014da:	4a23      	ldr	r2, [pc, #140]	@ (8001568 <SystemInit+0x118>)
 80014dc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014de:	4b1e      	ldr	r3, [pc, #120]	@ (8001558 <SystemInit+0x108>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <SystemInit+0x108>)
 80014e6:	4a20      	ldr	r2, [pc, #128]	@ (8001568 <SystemInit+0x118>)
 80014e8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <SystemInit+0x108>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014f0:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <SystemInit+0x108>)
 80014f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001568 <SystemInit+0x118>)
 80014f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014f6:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <SystemInit+0x108>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014fc:	4b16      	ldr	r3, [pc, #88]	@ (8001558 <SystemInit+0x108>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a15      	ldr	r2, [pc, #84]	@ (8001558 <SystemInit+0x108>)
 8001502:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001506:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <SystemInit+0x108>)
 800150a:	2200      	movs	r2, #0
 800150c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800150e:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <SystemInit+0x108>)
 8001510:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001514:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d113      	bne.n	8001544 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800151c:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <SystemInit+0x108>)
 800151e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001522:	4a0d      	ldr	r2, [pc, #52]	@ (8001558 <SystemInit+0x108>)
 8001524:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001528:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <SystemInit+0x11c>)
 800152e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001532:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <SystemInit+0x108>)
 8001536:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800153a:	4a07      	ldr	r2, [pc, #28]	@ (8001558 <SystemInit+0x108>)
 800153c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001540:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00
 8001554:	52002000 	.word	0x52002000
 8001558:	58024400 	.word	0x58024400
 800155c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001560:	02020200 	.word	0x02020200
 8001564:	01ff0000 	.word	0x01ff0000
 8001568:	01010280 	.word	0x01010280
 800156c:	52004000 	.word	0x52004000

08001570 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <ExitRun0Mode+0x2c>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	4a08      	ldr	r2, [pc, #32]	@ (800159c <ExitRun0Mode+0x2c>)
 800157a:	f023 0302 	bic.w	r3, r3, #2
 800157e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001580:	bf00      	nop
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <ExitRun0Mode+0x2c>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f9      	beq.n	8001582 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800158e:	bf00      	nop
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	58024800 	.word	0x58024800

080015a0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015a4:	4b22      	ldr	r3, [pc, #136]	@ (8001630 <MX_UART4_Init+0x90>)
 80015a6:	4a23      	ldr	r2, [pc, #140]	@ (8001634 <MX_UART4_Init+0x94>)
 80015a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80015aa:	4b21      	ldr	r3, [pc, #132]	@ (8001630 <MX_UART4_Init+0x90>)
 80015ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001630 <MX_UART4_Init+0x90>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001630 <MX_UART4_Init+0x90>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015be:	4b1c      	ldr	r3, [pc, #112]	@ (8001630 <MX_UART4_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001630 <MX_UART4_Init+0x90>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ca:	4b19      	ldr	r3, [pc, #100]	@ (8001630 <MX_UART4_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	4b17      	ldr	r3, [pc, #92]	@ (8001630 <MX_UART4_Init+0x90>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d6:	4b16      	ldr	r3, [pc, #88]	@ (8001630 <MX_UART4_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015dc:	4b14      	ldr	r3, [pc, #80]	@ (8001630 <MX_UART4_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e2:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <MX_UART4_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015e8:	4811      	ldr	r0, [pc, #68]	@ (8001630 <MX_UART4_Init+0x90>)
 80015ea:	f007 fc48 	bl	8008e7e <HAL_UART_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80015f4:	f7ff fccc 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f8:	2100      	movs	r1, #0
 80015fa:	480d      	ldr	r0, [pc, #52]	@ (8001630 <MX_UART4_Init+0x90>)
 80015fc:	f009 fccd 	bl	800af9a <HAL_UARTEx_SetTxFifoThreshold>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001606:	f7ff fcc3 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800160a:	2100      	movs	r1, #0
 800160c:	4808      	ldr	r0, [pc, #32]	@ (8001630 <MX_UART4_Init+0x90>)
 800160e:	f009 fd02 	bl	800b016 <HAL_UARTEx_SetRxFifoThreshold>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001618:	f7ff fcba 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	@ (8001630 <MX_UART4_Init+0x90>)
 800161e:	f009 fc83 	bl	800af28 <HAL_UARTEx_DisableFifoMode>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001628:	f7ff fcb2 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	240005a4 	.word	0x240005a4
 8001634:	40004c00 	.word	0x40004c00

08001638 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800163c:	4b22      	ldr	r3, [pc, #136]	@ (80016c8 <MX_UART5_Init+0x90>)
 800163e:	4a23      	ldr	r2, [pc, #140]	@ (80016cc <MX_UART5_Init+0x94>)
 8001640:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001642:	4b21      	ldr	r3, [pc, #132]	@ (80016c8 <MX_UART5_Init+0x90>)
 8001644:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001648:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b1f      	ldr	r3, [pc, #124]	@ (80016c8 <MX_UART5_Init+0x90>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <MX_UART5_Init+0x90>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001656:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <MX_UART5_Init+0x90>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <MX_UART5_Init+0x90>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <MX_UART5_Init+0x90>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <MX_UART5_Init+0x90>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800166e:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <MX_UART5_Init+0x90>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <MX_UART5_Init+0x90>)
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800167a:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <MX_UART5_Init+0x90>)
 800167c:	2200      	movs	r2, #0
 800167e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001680:	4811      	ldr	r0, [pc, #68]	@ (80016c8 <MX_UART5_Init+0x90>)
 8001682:	f007 fbfc 	bl	8008e7e <HAL_UART_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800168c:	f7ff fc80 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001690:	2100      	movs	r1, #0
 8001692:	480d      	ldr	r0, [pc, #52]	@ (80016c8 <MX_UART5_Init+0x90>)
 8001694:	f009 fc81 	bl	800af9a <HAL_UARTEx_SetTxFifoThreshold>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800169e:	f7ff fc77 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016a2:	2100      	movs	r1, #0
 80016a4:	4808      	ldr	r0, [pc, #32]	@ (80016c8 <MX_UART5_Init+0x90>)
 80016a6:	f009 fcb6 	bl	800b016 <HAL_UARTEx_SetRxFifoThreshold>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80016b0:	f7ff fc6e 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80016b4:	4804      	ldr	r0, [pc, #16]	@ (80016c8 <MX_UART5_Init+0x90>)
 80016b6:	f009 fc37 	bl	800af28 <HAL_UARTEx_DisableFifoMode>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80016c0:	f7ff fc66 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	24000638 	.word	0x24000638
 80016cc:	40005000 	.word	0x40005000

080016d0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016d4:	4b22      	ldr	r3, [pc, #136]	@ (8001760 <MX_USART3_UART_Init+0x90>)
 80016d6:	4a23      	ldr	r2, [pc, #140]	@ (8001764 <MX_USART3_UART_Init+0x94>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016da:	4b21      	ldr	r3, [pc, #132]	@ (8001760 <MX_USART3_UART_Init+0x90>)
 80016dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <MX_USART3_UART_Init+0x90>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001760 <MX_USART3_UART_Init+0x90>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <MX_USART3_UART_Init+0x90>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <MX_USART3_UART_Init+0x90>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <MX_USART3_UART_Init+0x90>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <MX_USART3_UART_Init+0x90>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001706:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <MX_USART3_UART_Init+0x90>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800170c:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <MX_USART3_UART_Init+0x90>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001712:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <MX_USART3_UART_Init+0x90>)
 8001714:	2200      	movs	r2, #0
 8001716:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001718:	4811      	ldr	r0, [pc, #68]	@ (8001760 <MX_USART3_UART_Init+0x90>)
 800171a:	f007 fbb0 	bl	8008e7e <HAL_UART_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001724:	f7ff fc34 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001728:	2100      	movs	r1, #0
 800172a:	480d      	ldr	r0, [pc, #52]	@ (8001760 <MX_USART3_UART_Init+0x90>)
 800172c:	f009 fc35 	bl	800af9a <HAL_UARTEx_SetTxFifoThreshold>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001736:	f7ff fc2b 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800173a:	2100      	movs	r1, #0
 800173c:	4808      	ldr	r0, [pc, #32]	@ (8001760 <MX_USART3_UART_Init+0x90>)
 800173e:	f009 fc6a 	bl	800b016 <HAL_UARTEx_SetRxFifoThreshold>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001748:	f7ff fc22 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800174c:	4804      	ldr	r0, [pc, #16]	@ (8001760 <MX_USART3_UART_Init+0x90>)
 800174e:	f009 fbeb 	bl	800af28 <HAL_UARTEx_DisableFifoMode>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001758:	f7ff fc1a 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	240006cc 	.word	0x240006cc
 8001764:	40004800 	.word	0x40004800

08001768 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b0be      	sub	sp, #248	@ 0xf8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001780:	f107 0320 	add.w	r3, r7, #32
 8001784:	22c0      	movs	r2, #192	@ 0xc0
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f00a fa60 	bl	800bc4e <memset>
  if(uartHandle->Instance==UART4)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4ab0      	ldr	r2, [pc, #704]	@ (8001a54 <HAL_UART_MspInit+0x2ec>)
 8001794:	4293      	cmp	r3, r2
 8001796:	f040 80ac 	bne.w	80018f2 <HAL_UART_MspInit+0x18a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800179a:	f04f 0202 	mov.w	r2, #2
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ac:	f107 0320 	add.w	r3, r7, #32
 80017b0:	4618      	mov	r0, r3
 80017b2:	f005 f98b 	bl	8006acc <HAL_RCCEx_PeriphCLKConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80017bc:	f7ff fbe8 	bl	8000f90 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017c0:	4ba5      	ldr	r3, [pc, #660]	@ (8001a58 <HAL_UART_MspInit+0x2f0>)
 80017c2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80017c6:	4aa4      	ldr	r2, [pc, #656]	@ (8001a58 <HAL_UART_MspInit+0x2f0>)
 80017c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017cc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80017d0:	4ba1      	ldr	r3, [pc, #644]	@ (8001a58 <HAL_UART_MspInit+0x2f0>)
 80017d2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80017d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	4b9e      	ldr	r3, [pc, #632]	@ (8001a58 <HAL_UART_MspInit+0x2f0>)
 80017e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017e4:	4a9c      	ldr	r2, [pc, #624]	@ (8001a58 <HAL_UART_MspInit+0x2f0>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80017ee:	4b9a      	ldr	r3, [pc, #616]	@ (8001a58 <HAL_UART_MspInit+0x2f0>)
 80017f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001800:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001816:	2308      	movs	r3, #8
 8001818:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001820:	4619      	mov	r1, r3
 8001822:	488e      	ldr	r0, [pc, #568]	@ (8001a5c <HAL_UART_MspInit+0x2f4>)
 8001824:	f003 fab4 	bl	8004d90 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001828:	4b8d      	ldr	r3, [pc, #564]	@ (8001a60 <HAL_UART_MspInit+0x2f8>)
 800182a:	4a8e      	ldr	r2, [pc, #568]	@ (8001a64 <HAL_UART_MspInit+0x2fc>)
 800182c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800182e:	4b8c      	ldr	r3, [pc, #560]	@ (8001a60 <HAL_UART_MspInit+0x2f8>)
 8001830:	223f      	movs	r2, #63	@ 0x3f
 8001832:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001834:	4b8a      	ldr	r3, [pc, #552]	@ (8001a60 <HAL_UART_MspInit+0x2f8>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800183a:	4b89      	ldr	r3, [pc, #548]	@ (8001a60 <HAL_UART_MspInit+0x2f8>)
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001840:	4b87      	ldr	r3, [pc, #540]	@ (8001a60 <HAL_UART_MspInit+0x2f8>)
 8001842:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001846:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001848:	4b85      	ldr	r3, [pc, #532]	@ (8001a60 <HAL_UART_MspInit+0x2f8>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800184e:	4b84      	ldr	r3, [pc, #528]	@ (8001a60 <HAL_UART_MspInit+0x2f8>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001854:	4b82      	ldr	r3, [pc, #520]	@ (8001a60 <HAL_UART_MspInit+0x2f8>)
 8001856:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800185a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800185c:	4b80      	ldr	r3, [pc, #512]	@ (8001a60 <HAL_UART_MspInit+0x2f8>)
 800185e:	2200      	movs	r2, #0
 8001860:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001862:	4b7f      	ldr	r3, [pc, #508]	@ (8001a60 <HAL_UART_MspInit+0x2f8>)
 8001864:	2200      	movs	r2, #0
 8001866:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001868:	487d      	ldr	r0, [pc, #500]	@ (8001a60 <HAL_UART_MspInit+0x2f8>)
 800186a:	f000 fba7 	bl	8001fbc <HAL_DMA_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001874:	f7ff fb8c 	bl	8000f90 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a79      	ldr	r2, [pc, #484]	@ (8001a60 <HAL_UART_MspInit+0x2f8>)
 800187c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001880:	4a77      	ldr	r2, [pc, #476]	@ (8001a60 <HAL_UART_MspInit+0x2f8>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream3;
 8001886:	4b78      	ldr	r3, [pc, #480]	@ (8001a68 <HAL_UART_MspInit+0x300>)
 8001888:	4a78      	ldr	r2, [pc, #480]	@ (8001a6c <HAL_UART_MspInit+0x304>)
 800188a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 800188c:	4b76      	ldr	r3, [pc, #472]	@ (8001a68 <HAL_UART_MspInit+0x300>)
 800188e:	2240      	movs	r2, #64	@ 0x40
 8001890:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001892:	4b75      	ldr	r3, [pc, #468]	@ (8001a68 <HAL_UART_MspInit+0x300>)
 8001894:	2240      	movs	r2, #64	@ 0x40
 8001896:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001898:	4b73      	ldr	r3, [pc, #460]	@ (8001a68 <HAL_UART_MspInit+0x300>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800189e:	4b72      	ldr	r3, [pc, #456]	@ (8001a68 <HAL_UART_MspInit+0x300>)
 80018a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018a4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018a6:	4b70      	ldr	r3, [pc, #448]	@ (8001a68 <HAL_UART_MspInit+0x300>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ac:	4b6e      	ldr	r3, [pc, #440]	@ (8001a68 <HAL_UART_MspInit+0x300>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80018b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001a68 <HAL_UART_MspInit+0x300>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001a68 <HAL_UART_MspInit+0x300>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018be:	4b6a      	ldr	r3, [pc, #424]	@ (8001a68 <HAL_UART_MspInit+0x300>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80018c4:	4868      	ldr	r0, [pc, #416]	@ (8001a68 <HAL_UART_MspInit+0x300>)
 80018c6:	f000 fb79 	bl	8001fbc <HAL_DMA_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 80018d0:	f7ff fb5e 	bl	8000f90 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a64      	ldr	r2, [pc, #400]	@ (8001a68 <HAL_UART_MspInit+0x300>)
 80018d8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80018da:	4a63      	ldr	r2, [pc, #396]	@ (8001a68 <HAL_UART_MspInit+0x300>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2100      	movs	r1, #0
 80018e4:	2034      	movs	r0, #52	@ 0x34
 80018e6:	f000 fabc 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80018ea:	2034      	movs	r0, #52	@ 0x34
 80018ec:	f000 fad3 	bl	8001e96 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80018f0:	e114      	b.n	8001b1c <HAL_UART_MspInit+0x3b4>
  else if(uartHandle->Instance==UART5)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a5e      	ldr	r2, [pc, #376]	@ (8001a70 <HAL_UART_MspInit+0x308>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	f040 80c3 	bne.w	8001a84 <HAL_UART_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80018fe:	f04f 0202 	mov.w	r2, #2
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800190a:	2300      	movs	r3, #0
 800190c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001910:	f107 0320 	add.w	r3, r7, #32
 8001914:	4618      	mov	r0, r3
 8001916:	f005 f8d9 	bl	8006acc <HAL_RCCEx_PeriphCLKConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8001920:	f7ff fb36 	bl	8000f90 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001924:	4b4c      	ldr	r3, [pc, #304]	@ (8001a58 <HAL_UART_MspInit+0x2f0>)
 8001926:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800192a:	4a4b      	ldr	r2, [pc, #300]	@ (8001a58 <HAL_UART_MspInit+0x2f0>)
 800192c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001930:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001934:	4b48      	ldr	r3, [pc, #288]	@ (8001a58 <HAL_UART_MspInit+0x2f0>)
 8001936:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800193a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b45      	ldr	r3, [pc, #276]	@ (8001a58 <HAL_UART_MspInit+0x2f0>)
 8001944:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001948:	4a43      	ldr	r2, [pc, #268]	@ (8001a58 <HAL_UART_MspInit+0x2f0>)
 800194a:	f043 0302 	orr.w	r3, r3, #2
 800194e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001952:	4b41      	ldr	r3, [pc, #260]	@ (8001a58 <HAL_UART_MspInit+0x2f0>)
 8001954:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001960:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001964:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800197a:	230e      	movs	r3, #14
 800197c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001980:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001984:	4619      	mov	r1, r3
 8001986:	4835      	ldr	r0, [pc, #212]	@ (8001a5c <HAL_UART_MspInit+0x2f4>)
 8001988:	f003 fa02 	bl	8004d90 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800198c:	4b39      	ldr	r3, [pc, #228]	@ (8001a74 <HAL_UART_MspInit+0x30c>)
 800198e:	4a3a      	ldr	r2, [pc, #232]	@ (8001a78 <HAL_UART_MspInit+0x310>)
 8001990:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8001992:	4b38      	ldr	r3, [pc, #224]	@ (8001a74 <HAL_UART_MspInit+0x30c>)
 8001994:	2241      	movs	r2, #65	@ 0x41
 8001996:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001998:	4b36      	ldr	r3, [pc, #216]	@ (8001a74 <HAL_UART_MspInit+0x30c>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800199e:	4b35      	ldr	r3, [pc, #212]	@ (8001a74 <HAL_UART_MspInit+0x30c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019a4:	4b33      	ldr	r3, [pc, #204]	@ (8001a74 <HAL_UART_MspInit+0x30c>)
 80019a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019aa:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ac:	4b31      	ldr	r3, [pc, #196]	@ (8001a74 <HAL_UART_MspInit+0x30c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b2:	4b30      	ldr	r3, [pc, #192]	@ (8001a74 <HAL_UART_MspInit+0x30c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80019b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a74 <HAL_UART_MspInit+0x30c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019be:	4b2d      	ldr	r3, [pc, #180]	@ (8001a74 <HAL_UART_MspInit+0x30c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a74 <HAL_UART_MspInit+0x30c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80019ca:	482a      	ldr	r0, [pc, #168]	@ (8001a74 <HAL_UART_MspInit+0x30c>)
 80019cc:	f000 faf6 	bl	8001fbc <HAL_DMA_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_UART_MspInit+0x272>
      Error_Handler();
 80019d6:	f7ff fadb 	bl	8000f90 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a25      	ldr	r2, [pc, #148]	@ (8001a74 <HAL_UART_MspInit+0x30c>)
 80019de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80019e2:	4a24      	ldr	r2, [pc, #144]	@ (8001a74 <HAL_UART_MspInit+0x30c>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream1;
 80019e8:	4b24      	ldr	r3, [pc, #144]	@ (8001a7c <HAL_UART_MspInit+0x314>)
 80019ea:	4a25      	ldr	r2, [pc, #148]	@ (8001a80 <HAL_UART_MspInit+0x318>)
 80019ec:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 80019ee:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <HAL_UART_MspInit+0x314>)
 80019f0:	2242      	movs	r2, #66	@ 0x42
 80019f2:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019f4:	4b21      	ldr	r3, [pc, #132]	@ (8001a7c <HAL_UART_MspInit+0x314>)
 80019f6:	2240      	movs	r2, #64	@ 0x40
 80019f8:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019fa:	4b20      	ldr	r3, [pc, #128]	@ (8001a7c <HAL_UART_MspInit+0x314>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a00:	4b1e      	ldr	r3, [pc, #120]	@ (8001a7c <HAL_UART_MspInit+0x314>)
 8001a02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a06:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	@ (8001a7c <HAL_UART_MspInit+0x314>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a7c <HAL_UART_MspInit+0x314>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001a14:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <HAL_UART_MspInit+0x314>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a1a:	4b18      	ldr	r3, [pc, #96]	@ (8001a7c <HAL_UART_MspInit+0x314>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a20:	4b16      	ldr	r3, [pc, #88]	@ (8001a7c <HAL_UART_MspInit+0x314>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001a26:	4815      	ldr	r0, [pc, #84]	@ (8001a7c <HAL_UART_MspInit+0x314>)
 8001a28:	f000 fac8 	bl	8001fbc <HAL_DMA_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 8001a32:	f7ff faad 	bl	8000f90 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a10      	ldr	r2, [pc, #64]	@ (8001a7c <HAL_UART_MspInit+0x314>)
 8001a3a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001a3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a7c <HAL_UART_MspInit+0x314>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	2035      	movs	r0, #53	@ 0x35
 8001a48:	f000 fa0b 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001a4c:	2035      	movs	r0, #53	@ 0x35
 8001a4e:	f000 fa22 	bl	8001e96 <HAL_NVIC_EnableIRQ>
}
 8001a52:	e063      	b.n	8001b1c <HAL_UART_MspInit+0x3b4>
 8001a54:	40004c00 	.word	0x40004c00
 8001a58:	58024400 	.word	0x58024400
 8001a5c:	58020400 	.word	0x58020400
 8001a60:	24000760 	.word	0x24000760
 8001a64:	40020040 	.word	0x40020040
 8001a68:	240007d8 	.word	0x240007d8
 8001a6c:	40020058 	.word	0x40020058
 8001a70:	40005000 	.word	0x40005000
 8001a74:	24000850 	.word	0x24000850
 8001a78:	40020010 	.word	0x40020010
 8001a7c:	240008c8 	.word	0x240008c8
 8001a80:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART3)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a26      	ldr	r2, [pc, #152]	@ (8001b24 <HAL_UART_MspInit+0x3bc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d146      	bne.n	8001b1c <HAL_UART_MspInit+0x3b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a8e:	f04f 0202 	mov.w	r2, #2
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa0:	f107 0320 	add.w	r3, r7, #32
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f005 f811 	bl	8006acc <HAL_RCCEx_PeriphCLKConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_UART_MspInit+0x34c>
      Error_Handler();
 8001ab0:	f7ff fa6e 	bl	8000f90 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b28 <HAL_UART_MspInit+0x3c0>)
 8001ab6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001aba:	4a1b      	ldr	r2, [pc, #108]	@ (8001b28 <HAL_UART_MspInit+0x3c0>)
 8001abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac0:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <HAL_UART_MspInit+0x3c0>)
 8001ac6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001aca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad2:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <HAL_UART_MspInit+0x3c0>)
 8001ad4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ad8:	4a13      	ldr	r2, [pc, #76]	@ (8001b28 <HAL_UART_MspInit+0x3c0>)
 8001ada:	f043 0308 	orr.w	r3, r3, #8
 8001ade:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001ae2:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <HAL_UART_MspInit+0x3c0>)
 8001ae4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001af0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001af4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b0a:	2307      	movs	r3, #7
 8001b0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b10:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <HAL_UART_MspInit+0x3c4>)
 8001b18:	f003 f93a 	bl	8004d90 <HAL_GPIO_Init>
}
 8001b1c:	bf00      	nop
 8001b1e:	37f8      	adds	r7, #248	@ 0xf8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40004800 	.word	0x40004800
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	58020c00 	.word	0x58020c00

08001b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b30:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001b6c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001b34:	f7ff fd1c 	bl	8001570 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b38:	f7ff fc8a 	bl	8001450 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b3c:	480c      	ldr	r0, [pc, #48]	@ (8001b70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b3e:	490d      	ldr	r1, [pc, #52]	@ (8001b74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b40:	4a0d      	ldr	r2, [pc, #52]	@ (8001b78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b44:	e002      	b.n	8001b4c <LoopCopyDataInit>

08001b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4a:	3304      	adds	r3, #4

08001b4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b50:	d3f9      	bcc.n	8001b46 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b52:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b54:	4c0a      	ldr	r4, [pc, #40]	@ (8001b80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b58:	e001      	b.n	8001b5e <LoopFillZerobss>

08001b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b5c:	3204      	adds	r2, #4

08001b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b60:	d3fb      	bcc.n	8001b5a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b62:	f00a f8cd 	bl	800bd00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b66:	f7ff f873 	bl	8000c50 <main>
  bx  lr
 8001b6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b6c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001b70:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b74:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001b78:	0800dd94 	.word	0x0800dd94
  ldr r2, =_sbss
 8001b7c:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001b80:	24000a90 	.word	0x24000a90

08001b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b84:	e7fe      	b.n	8001b84 <ADC_IRQHandler>
	...

08001b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8e:	2003      	movs	r0, #3
 8001b90:	f000 f95c 	bl	8001e4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001b94:	f004 fdc4 	bl	8006720 <HAL_RCC_GetSysClockFreq>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <HAL_Init+0x68>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	4913      	ldr	r1, [pc, #76]	@ (8001bf4 <HAL_Init+0x6c>)
 8001ba6:	5ccb      	ldrb	r3, [r1, r3]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <HAL_Init+0x68>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	4a0e      	ldr	r2, [pc, #56]	@ (8001bf4 <HAL_Init+0x6c>)
 8001bbc:	5cd3      	ldrb	r3, [r2, r3]
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf8 <HAL_Init+0x70>)
 8001bca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	@ (8001bfc <HAL_Init+0x74>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f000 f814 	bl	8001c00 <HAL_InitTick>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e002      	b.n	8001be8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001be2:	f7ff fad5 	bl	8001190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	58024400 	.word	0x58024400
 8001bf4:	0800d9d0 	.word	0x0800d9d0
 8001bf8:	24000004 	.word	0x24000004
 8001bfc:	24000000 	.word	0x24000000

08001c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c08:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <HAL_InitTick+0x60>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e021      	b.n	8001c58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c14:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <HAL_InitTick+0x64>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <HAL_InitTick+0x60>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f941 	bl	8001eb2 <HAL_SYSTICK_Config>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00e      	b.n	8001c58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d80a      	bhi.n	8001c56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c40:	2200      	movs	r2, #0
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f000 f90b 	bl	8001e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c4c:	4a06      	ldr	r2, [pc, #24]	@ (8001c68 <HAL_InitTick+0x68>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2400000c 	.word	0x2400000c
 8001c64:	24000000 	.word	0x24000000
 8001c68:	24000008 	.word	0x24000008

08001c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <HAL_IncTick+0x20>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_IncTick+0x24>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a04      	ldr	r2, [pc, #16]	@ (8001c90 <HAL_IncTick+0x24>)
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	2400000c 	.word	0x2400000c
 8001c90:	24000940 	.word	0x24000940

08001c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;
 8001c98:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <HAL_GetTick+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	24000940 	.word	0x24000940

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <__NVIC_SetPriorityGrouping+0x40>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cda:	4a04      	ldr	r2, [pc, #16]	@ (8001cec <__NVIC_SetPriorityGrouping+0x40>)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	60d3      	str	r3, [r2, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00
 8001cf0:	05fa0000 	.word	0x05fa0000

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4907      	ldr	r1, [pc, #28]	@ (8001d48 <__NVIC_EnableIRQ+0x38>)
 8001d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db0a      	blt.n	8001d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	490c      	ldr	r1, [pc, #48]	@ (8001d98 <__NVIC_SetPriority+0x4c>)
 8001d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d74:	e00a      	b.n	8001d8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4908      	ldr	r1, [pc, #32]	@ (8001d9c <__NVIC_SetPriority+0x50>)
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	3b04      	subs	r3, #4
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	761a      	strb	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	@ 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f1c3 0307 	rsb	r3, r3, #7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	bf28      	it	cs
 8001dbe:	2304      	movcs	r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d902      	bls.n	8001dd0 <NVIC_EncodePriority+0x30>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	e000      	b.n	8001dd2 <NVIC_EncodePriority+0x32>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43d9      	mvns	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	4313      	orrs	r3, r2
         );
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	@ 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e18:	d301      	bcc.n	8001e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00f      	b.n	8001e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <SysTick_Config+0x40>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e26:	210f      	movs	r1, #15
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f7ff ff8e 	bl	8001d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e30:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <SysTick_Config+0x40>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e36:	4b04      	ldr	r3, [pc, #16]	@ (8001e48 <SysTick_Config+0x40>)
 8001e38:	2207      	movs	r2, #7
 8001e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	e000e010 	.word	0xe000e010

08001e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff29 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e70:	f7ff ff40 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff ff90 	bl	8001da0 <NVIC_EncodePriority>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff5f 	bl	8001d4c <__NVIC_SetPriority>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff33 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffa4 	bl	8001e08 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ed0:	f3bf 8f5f 	dmb	sy
}
 8001ed4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ed6:	4b07      	ldr	r3, [pc, #28]	@ (8001ef4 <HAL_MPU_Disable+0x28>)
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	4a06      	ldr	r2, [pc, #24]	@ (8001ef4 <HAL_MPU_Disable+0x28>)
 8001edc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ee2:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <HAL_MPU_Disable+0x2c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	605a      	str	r2, [r3, #4]
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00
 8001ef8:	e000ed90 	.word	0xe000ed90

08001efc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f04:	4a0b      	ldr	r2, [pc, #44]	@ (8001f34 <HAL_MPU_Enable+0x38>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <HAL_MPU_Enable+0x3c>)
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	4a09      	ldr	r2, [pc, #36]	@ (8001f38 <HAL_MPU_Enable+0x3c>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f18:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f1a:	f3bf 8f4f 	dsb	sy
}
 8001f1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f20:	f3bf 8f6f 	isb	sy
}
 8001f24:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000ed90 	.word	0xe000ed90
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	785a      	ldrb	r2, [r3, #1]
 8001f48:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f4a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	4a19      	ldr	r2, [pc, #100]	@ (8001fb8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001f58:	4a17      	ldr	r2, [pc, #92]	@ (8001fb8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	7b1b      	ldrb	r3, [r3, #12]
 8001f64:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7adb      	ldrb	r3, [r3, #11]
 8001f6a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7a9b      	ldrb	r3, [r3, #10]
 8001f72:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	7b5b      	ldrb	r3, [r3, #13]
 8001f7a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7b9b      	ldrb	r3, [r3, #14]
 8001f82:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7bdb      	ldrb	r3, [r3, #15]
 8001f8a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7a5b      	ldrb	r3, [r3, #9]
 8001f92:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	7a1b      	ldrb	r3, [r3, #8]
 8001f9a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f9c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	7812      	ldrb	r2, [r2, #0]
 8001fa2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fa4:	4a04      	ldr	r2, [pc, #16]	@ (8001fb8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fa6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fa8:	6113      	str	r3, [r2, #16]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000ed90 	.word	0xe000ed90

08001fbc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001fc4:	f7ff fe66 	bl	8001c94 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e37d      	b.n	80026d0 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a66      	ldr	r2, [pc, #408]	@ (8002174 <HAL_DMA_Init+0x1b8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d04a      	beq.n	8002074 <HAL_DMA_Init+0xb8>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a65      	ldr	r2, [pc, #404]	@ (8002178 <HAL_DMA_Init+0x1bc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d045      	beq.n	8002074 <HAL_DMA_Init+0xb8>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a63      	ldr	r2, [pc, #396]	@ (800217c <HAL_DMA_Init+0x1c0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d040      	beq.n	8002074 <HAL_DMA_Init+0xb8>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a62      	ldr	r2, [pc, #392]	@ (8002180 <HAL_DMA_Init+0x1c4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d03b      	beq.n	8002074 <HAL_DMA_Init+0xb8>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a60      	ldr	r2, [pc, #384]	@ (8002184 <HAL_DMA_Init+0x1c8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d036      	beq.n	8002074 <HAL_DMA_Init+0xb8>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a5f      	ldr	r2, [pc, #380]	@ (8002188 <HAL_DMA_Init+0x1cc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d031      	beq.n	8002074 <HAL_DMA_Init+0xb8>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a5d      	ldr	r2, [pc, #372]	@ (800218c <HAL_DMA_Init+0x1d0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d02c      	beq.n	8002074 <HAL_DMA_Init+0xb8>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a5c      	ldr	r2, [pc, #368]	@ (8002190 <HAL_DMA_Init+0x1d4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d027      	beq.n	8002074 <HAL_DMA_Init+0xb8>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a5a      	ldr	r2, [pc, #360]	@ (8002194 <HAL_DMA_Init+0x1d8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d022      	beq.n	8002074 <HAL_DMA_Init+0xb8>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a59      	ldr	r2, [pc, #356]	@ (8002198 <HAL_DMA_Init+0x1dc>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d01d      	beq.n	8002074 <HAL_DMA_Init+0xb8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a57      	ldr	r2, [pc, #348]	@ (800219c <HAL_DMA_Init+0x1e0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d018      	beq.n	8002074 <HAL_DMA_Init+0xb8>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a56      	ldr	r2, [pc, #344]	@ (80021a0 <HAL_DMA_Init+0x1e4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d013      	beq.n	8002074 <HAL_DMA_Init+0xb8>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a54      	ldr	r2, [pc, #336]	@ (80021a4 <HAL_DMA_Init+0x1e8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00e      	beq.n	8002074 <HAL_DMA_Init+0xb8>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a53      	ldr	r2, [pc, #332]	@ (80021a8 <HAL_DMA_Init+0x1ec>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d009      	beq.n	8002074 <HAL_DMA_Init+0xb8>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a51      	ldr	r2, [pc, #324]	@ (80021ac <HAL_DMA_Init+0x1f0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d004      	beq.n	8002074 <HAL_DMA_Init+0xb8>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a50      	ldr	r2, [pc, #320]	@ (80021b0 <HAL_DMA_Init+0x1f4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d101      	bne.n	8002078 <HAL_DMA_Init+0xbc>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_DMA_Init+0xbe>
 8002078:	2300      	movs	r3, #0
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 813c 	beq.w	80022f8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a37      	ldr	r2, [pc, #220]	@ (8002174 <HAL_DMA_Init+0x1b8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d04a      	beq.n	8002130 <HAL_DMA_Init+0x174>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a36      	ldr	r2, [pc, #216]	@ (8002178 <HAL_DMA_Init+0x1bc>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d045      	beq.n	8002130 <HAL_DMA_Init+0x174>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a34      	ldr	r2, [pc, #208]	@ (800217c <HAL_DMA_Init+0x1c0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d040      	beq.n	8002130 <HAL_DMA_Init+0x174>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a33      	ldr	r2, [pc, #204]	@ (8002180 <HAL_DMA_Init+0x1c4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d03b      	beq.n	8002130 <HAL_DMA_Init+0x174>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a31      	ldr	r2, [pc, #196]	@ (8002184 <HAL_DMA_Init+0x1c8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d036      	beq.n	8002130 <HAL_DMA_Init+0x174>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a30      	ldr	r2, [pc, #192]	@ (8002188 <HAL_DMA_Init+0x1cc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d031      	beq.n	8002130 <HAL_DMA_Init+0x174>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a2e      	ldr	r2, [pc, #184]	@ (800218c <HAL_DMA_Init+0x1d0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d02c      	beq.n	8002130 <HAL_DMA_Init+0x174>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a2d      	ldr	r2, [pc, #180]	@ (8002190 <HAL_DMA_Init+0x1d4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d027      	beq.n	8002130 <HAL_DMA_Init+0x174>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002194 <HAL_DMA_Init+0x1d8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d022      	beq.n	8002130 <HAL_DMA_Init+0x174>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002198 <HAL_DMA_Init+0x1dc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d01d      	beq.n	8002130 <HAL_DMA_Init+0x174>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a28      	ldr	r2, [pc, #160]	@ (800219c <HAL_DMA_Init+0x1e0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d018      	beq.n	8002130 <HAL_DMA_Init+0x174>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a27      	ldr	r2, [pc, #156]	@ (80021a0 <HAL_DMA_Init+0x1e4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d013      	beq.n	8002130 <HAL_DMA_Init+0x174>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a25      	ldr	r2, [pc, #148]	@ (80021a4 <HAL_DMA_Init+0x1e8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00e      	beq.n	8002130 <HAL_DMA_Init+0x174>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a24      	ldr	r2, [pc, #144]	@ (80021a8 <HAL_DMA_Init+0x1ec>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d009      	beq.n	8002130 <HAL_DMA_Init+0x174>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a22      	ldr	r2, [pc, #136]	@ (80021ac <HAL_DMA_Init+0x1f0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d004      	beq.n	8002130 <HAL_DMA_Init+0x174>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a21      	ldr	r2, [pc, #132]	@ (80021b0 <HAL_DMA_Init+0x1f4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d108      	bne.n	8002142 <HAL_DMA_Init+0x186>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0201 	bic.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	e007      	b.n	8002152 <HAL_DMA_Init+0x196>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002152:	e02f      	b.n	80021b4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002154:	f7ff fd9e 	bl	8001c94 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b05      	cmp	r3, #5
 8002160:	d928      	bls.n	80021b4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2220      	movs	r2, #32
 8002166:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2203      	movs	r2, #3
 800216c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e2ad      	b.n	80026d0 <HAL_DMA_Init+0x714>
 8002174:	40020010 	.word	0x40020010
 8002178:	40020028 	.word	0x40020028
 800217c:	40020040 	.word	0x40020040
 8002180:	40020058 	.word	0x40020058
 8002184:	40020070 	.word	0x40020070
 8002188:	40020088 	.word	0x40020088
 800218c:	400200a0 	.word	0x400200a0
 8002190:	400200b8 	.word	0x400200b8
 8002194:	40020410 	.word	0x40020410
 8002198:	40020428 	.word	0x40020428
 800219c:	40020440 	.word	0x40020440
 80021a0:	40020458 	.word	0x40020458
 80021a4:	40020470 	.word	0x40020470
 80021a8:	40020488 	.word	0x40020488
 80021ac:	400204a0 	.word	0x400204a0
 80021b0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1c8      	bne.n	8002154 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4b73      	ldr	r3, [pc, #460]	@ (800239c <HAL_DMA_Init+0x3e0>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80021da:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002204:	2b04      	cmp	r3, #4
 8002206:	d107      	bne.n	8002218 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002210:	4313      	orrs	r3, r2
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	4313      	orrs	r3, r2
 8002216:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b28      	cmp	r3, #40	@ 0x28
 800221e:	d903      	bls.n	8002228 <HAL_DMA_Init+0x26c>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b2e      	cmp	r3, #46	@ 0x2e
 8002226:	d91f      	bls.n	8002268 <HAL_DMA_Init+0x2ac>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b3e      	cmp	r3, #62	@ 0x3e
 800222e:	d903      	bls.n	8002238 <HAL_DMA_Init+0x27c>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b42      	cmp	r3, #66	@ 0x42
 8002236:	d917      	bls.n	8002268 <HAL_DMA_Init+0x2ac>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b46      	cmp	r3, #70	@ 0x46
 800223e:	d903      	bls.n	8002248 <HAL_DMA_Init+0x28c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b48      	cmp	r3, #72	@ 0x48
 8002246:	d90f      	bls.n	8002268 <HAL_DMA_Init+0x2ac>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b4e      	cmp	r3, #78	@ 0x4e
 800224e:	d903      	bls.n	8002258 <HAL_DMA_Init+0x29c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b52      	cmp	r3, #82	@ 0x52
 8002256:	d907      	bls.n	8002268 <HAL_DMA_Init+0x2ac>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b73      	cmp	r3, #115	@ 0x73
 800225e:	d905      	bls.n	800226c <HAL_DMA_Init+0x2b0>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b77      	cmp	r3, #119	@ 0x77
 8002266:	d801      	bhi.n	800226c <HAL_DMA_Init+0x2b0>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_DMA_Init+0x2b2>
 800226c:	2300      	movs	r3, #0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002278:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f023 0307 	bic.w	r3, r3, #7
 8002290:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d117      	bne.n	80022d4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00e      	beq.n	80022d4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f002 fbe0 	bl	8004a7c <DMA_CheckFifoParam>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d008      	beq.n	80022d4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2240      	movs	r2, #64	@ 0x40
 80022c6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e1fd      	b.n	80026d0 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f002 fb1b 	bl	8004918 <DMA_CalcBaseAndBitshift>
 80022e2:	4603      	mov	r3, r0
 80022e4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	223f      	movs	r2, #63	@ 0x3f
 80022f0:	409a      	lsls	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	e0fd      	b.n	80024f4 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a28      	ldr	r2, [pc, #160]	@ (80023a0 <HAL_DMA_Init+0x3e4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d04a      	beq.n	8002398 <HAL_DMA_Init+0x3dc>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a27      	ldr	r2, [pc, #156]	@ (80023a4 <HAL_DMA_Init+0x3e8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d045      	beq.n	8002398 <HAL_DMA_Init+0x3dc>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a25      	ldr	r2, [pc, #148]	@ (80023a8 <HAL_DMA_Init+0x3ec>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d040      	beq.n	8002398 <HAL_DMA_Init+0x3dc>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a24      	ldr	r2, [pc, #144]	@ (80023ac <HAL_DMA_Init+0x3f0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d03b      	beq.n	8002398 <HAL_DMA_Init+0x3dc>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a22      	ldr	r2, [pc, #136]	@ (80023b0 <HAL_DMA_Init+0x3f4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d036      	beq.n	8002398 <HAL_DMA_Init+0x3dc>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a21      	ldr	r2, [pc, #132]	@ (80023b4 <HAL_DMA_Init+0x3f8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d031      	beq.n	8002398 <HAL_DMA_Init+0x3dc>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1f      	ldr	r2, [pc, #124]	@ (80023b8 <HAL_DMA_Init+0x3fc>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d02c      	beq.n	8002398 <HAL_DMA_Init+0x3dc>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a1e      	ldr	r2, [pc, #120]	@ (80023bc <HAL_DMA_Init+0x400>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d027      	beq.n	8002398 <HAL_DMA_Init+0x3dc>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a1c      	ldr	r2, [pc, #112]	@ (80023c0 <HAL_DMA_Init+0x404>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d022      	beq.n	8002398 <HAL_DMA_Init+0x3dc>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a1b      	ldr	r2, [pc, #108]	@ (80023c4 <HAL_DMA_Init+0x408>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d01d      	beq.n	8002398 <HAL_DMA_Init+0x3dc>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a19      	ldr	r2, [pc, #100]	@ (80023c8 <HAL_DMA_Init+0x40c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d018      	beq.n	8002398 <HAL_DMA_Init+0x3dc>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a18      	ldr	r2, [pc, #96]	@ (80023cc <HAL_DMA_Init+0x410>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d013      	beq.n	8002398 <HAL_DMA_Init+0x3dc>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a16      	ldr	r2, [pc, #88]	@ (80023d0 <HAL_DMA_Init+0x414>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00e      	beq.n	8002398 <HAL_DMA_Init+0x3dc>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a15      	ldr	r2, [pc, #84]	@ (80023d4 <HAL_DMA_Init+0x418>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d009      	beq.n	8002398 <HAL_DMA_Init+0x3dc>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a13      	ldr	r2, [pc, #76]	@ (80023d8 <HAL_DMA_Init+0x41c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d004      	beq.n	8002398 <HAL_DMA_Init+0x3dc>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a12      	ldr	r2, [pc, #72]	@ (80023dc <HAL_DMA_Init+0x420>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d123      	bne.n	80023e0 <HAL_DMA_Init+0x424>
 8002398:	2301      	movs	r3, #1
 800239a:	e022      	b.n	80023e2 <HAL_DMA_Init+0x426>
 800239c:	fe10803f 	.word	0xfe10803f
 80023a0:	48022c08 	.word	0x48022c08
 80023a4:	48022c1c 	.word	0x48022c1c
 80023a8:	48022c30 	.word	0x48022c30
 80023ac:	48022c44 	.word	0x48022c44
 80023b0:	48022c58 	.word	0x48022c58
 80023b4:	48022c6c 	.word	0x48022c6c
 80023b8:	48022c80 	.word	0x48022c80
 80023bc:	48022c94 	.word	0x48022c94
 80023c0:	58025408 	.word	0x58025408
 80023c4:	5802541c 	.word	0x5802541c
 80023c8:	58025430 	.word	0x58025430
 80023cc:	58025444 	.word	0x58025444
 80023d0:	58025458 	.word	0x58025458
 80023d4:	5802546c 	.word	0x5802546c
 80023d8:	58025480 	.word	0x58025480
 80023dc:	58025494 	.word	0x58025494
 80023e0:	2300      	movs	r3, #0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d07d      	beq.n	80024e2 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a7f      	ldr	r2, [pc, #508]	@ (80025e8 <HAL_DMA_Init+0x62c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d021      	beq.n	8002434 <HAL_DMA_Init+0x478>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a7d      	ldr	r2, [pc, #500]	@ (80025ec <HAL_DMA_Init+0x630>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01c      	beq.n	8002434 <HAL_DMA_Init+0x478>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a7c      	ldr	r2, [pc, #496]	@ (80025f0 <HAL_DMA_Init+0x634>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d017      	beq.n	8002434 <HAL_DMA_Init+0x478>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a7a      	ldr	r2, [pc, #488]	@ (80025f4 <HAL_DMA_Init+0x638>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d012      	beq.n	8002434 <HAL_DMA_Init+0x478>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a79      	ldr	r2, [pc, #484]	@ (80025f8 <HAL_DMA_Init+0x63c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00d      	beq.n	8002434 <HAL_DMA_Init+0x478>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a77      	ldr	r2, [pc, #476]	@ (80025fc <HAL_DMA_Init+0x640>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d008      	beq.n	8002434 <HAL_DMA_Init+0x478>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a76      	ldr	r2, [pc, #472]	@ (8002600 <HAL_DMA_Init+0x644>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d003      	beq.n	8002434 <HAL_DMA_Init+0x478>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a74      	ldr	r2, [pc, #464]	@ (8002604 <HAL_DMA_Init+0x648>)
 8002432:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	4b6e      	ldr	r3, [pc, #440]	@ (8002608 <HAL_DMA_Init+0x64c>)
 8002450:	4013      	ands	r3, r2
 8002452:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b40      	cmp	r3, #64	@ 0x40
 800245a:	d008      	beq.n	800246e <HAL_DMA_Init+0x4b2>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b80      	cmp	r3, #128	@ 0x80
 8002462:	d102      	bne.n	800246a <HAL_DMA_Init+0x4ae>
 8002464:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002468:	e002      	b.n	8002470 <HAL_DMA_Init+0x4b4>
 800246a:	2300      	movs	r3, #0
 800246c:	e000      	b.n	8002470 <HAL_DMA_Init+0x4b4>
 800246e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	68d2      	ldr	r2, [r2, #12]
 8002474:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002476:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800247e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002486:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800248e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002496:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800249e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	4b55      	ldr	r3, [pc, #340]	@ (800260c <HAL_DMA_Init+0x650>)
 80024b6:	4413      	add	r3, r2
 80024b8:	4a55      	ldr	r2, [pc, #340]	@ (8002610 <HAL_DMA_Init+0x654>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	009a      	lsls	r2, r3, #2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f002 fa26 	bl	8004918 <DMA_CalcBaseAndBitshift>
 80024cc:	4603      	mov	r3, r0
 80024ce:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	2201      	movs	r2, #1
 80024da:	409a      	lsls	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	e008      	b.n	80024f4 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2240      	movs	r2, #64	@ 0x40
 80024e6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2203      	movs	r2, #3
 80024ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0ed      	b.n	80026d0 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a46      	ldr	r2, [pc, #280]	@ (8002614 <HAL_DMA_Init+0x658>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d072      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a45      	ldr	r2, [pc, #276]	@ (8002618 <HAL_DMA_Init+0x65c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d06d      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a43      	ldr	r2, [pc, #268]	@ (800261c <HAL_DMA_Init+0x660>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d068      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a42      	ldr	r2, [pc, #264]	@ (8002620 <HAL_DMA_Init+0x664>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d063      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a40      	ldr	r2, [pc, #256]	@ (8002624 <HAL_DMA_Init+0x668>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d05e      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a3f      	ldr	r2, [pc, #252]	@ (8002628 <HAL_DMA_Init+0x66c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d059      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a3d      	ldr	r2, [pc, #244]	@ (800262c <HAL_DMA_Init+0x670>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d054      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a3c      	ldr	r2, [pc, #240]	@ (8002630 <HAL_DMA_Init+0x674>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d04f      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a3a      	ldr	r2, [pc, #232]	@ (8002634 <HAL_DMA_Init+0x678>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d04a      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a39      	ldr	r2, [pc, #228]	@ (8002638 <HAL_DMA_Init+0x67c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d045      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a37      	ldr	r2, [pc, #220]	@ (800263c <HAL_DMA_Init+0x680>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d040      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a36      	ldr	r2, [pc, #216]	@ (8002640 <HAL_DMA_Init+0x684>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d03b      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a34      	ldr	r2, [pc, #208]	@ (8002644 <HAL_DMA_Init+0x688>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d036      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a33      	ldr	r2, [pc, #204]	@ (8002648 <HAL_DMA_Init+0x68c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d031      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a31      	ldr	r2, [pc, #196]	@ (800264c <HAL_DMA_Init+0x690>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d02c      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a30      	ldr	r2, [pc, #192]	@ (8002650 <HAL_DMA_Init+0x694>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d027      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a13      	ldr	r2, [pc, #76]	@ (80025e8 <HAL_DMA_Init+0x62c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d022      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a12      	ldr	r2, [pc, #72]	@ (80025ec <HAL_DMA_Init+0x630>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d01d      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a10      	ldr	r2, [pc, #64]	@ (80025f0 <HAL_DMA_Init+0x634>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d018      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a0f      	ldr	r2, [pc, #60]	@ (80025f4 <HAL_DMA_Init+0x638>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d013      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0d      	ldr	r2, [pc, #52]	@ (80025f8 <HAL_DMA_Init+0x63c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00e      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a0c      	ldr	r2, [pc, #48]	@ (80025fc <HAL_DMA_Init+0x640>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d009      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002600 <HAL_DMA_Init+0x644>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d004      	beq.n	80025e4 <HAL_DMA_Init+0x628>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a09      	ldr	r2, [pc, #36]	@ (8002604 <HAL_DMA_Init+0x648>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d137      	bne.n	8002654 <HAL_DMA_Init+0x698>
 80025e4:	2301      	movs	r3, #1
 80025e6:	e036      	b.n	8002656 <HAL_DMA_Init+0x69a>
 80025e8:	58025408 	.word	0x58025408
 80025ec:	5802541c 	.word	0x5802541c
 80025f0:	58025430 	.word	0x58025430
 80025f4:	58025444 	.word	0x58025444
 80025f8:	58025458 	.word	0x58025458
 80025fc:	5802546c 	.word	0x5802546c
 8002600:	58025480 	.word	0x58025480
 8002604:	58025494 	.word	0x58025494
 8002608:	fffe000f 	.word	0xfffe000f
 800260c:	a7fdabf8 	.word	0xa7fdabf8
 8002610:	cccccccd 	.word	0xcccccccd
 8002614:	40020010 	.word	0x40020010
 8002618:	40020028 	.word	0x40020028
 800261c:	40020040 	.word	0x40020040
 8002620:	40020058 	.word	0x40020058
 8002624:	40020070 	.word	0x40020070
 8002628:	40020088 	.word	0x40020088
 800262c:	400200a0 	.word	0x400200a0
 8002630:	400200b8 	.word	0x400200b8
 8002634:	40020410 	.word	0x40020410
 8002638:	40020428 	.word	0x40020428
 800263c:	40020440 	.word	0x40020440
 8002640:	40020458 	.word	0x40020458
 8002644:	40020470 	.word	0x40020470
 8002648:	40020488 	.word	0x40020488
 800264c:	400204a0 	.word	0x400204a0
 8002650:	400204b8 	.word	0x400204b8
 8002654:	2300      	movs	r3, #0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d032      	beq.n	80026c0 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f002 fa8a 	bl	8004b74 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b80      	cmp	r3, #128	@ 0x80
 8002666:	d102      	bne.n	800266e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002682:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d010      	beq.n	80026ae <HAL_DMA_Init+0x6f2>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b08      	cmp	r3, #8
 8002692:	d80c      	bhi.n	80026ae <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f002 fb07 	bl	8004ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	e008      	b.n	80026c0 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e226      	b.n	8002b42 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_DMA_Start_IT+0x2a>
 80026fe:	2302      	movs	r3, #2
 8002700:	e21f      	b.n	8002b42 <HAL_DMA_Start_IT+0x46a>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b01      	cmp	r3, #1
 8002714:	f040 820a 	bne.w	8002b2c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a68      	ldr	r2, [pc, #416]	@ (80028cc <HAL_DMA_Start_IT+0x1f4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d04a      	beq.n	80027c6 <HAL_DMA_Start_IT+0xee>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a66      	ldr	r2, [pc, #408]	@ (80028d0 <HAL_DMA_Start_IT+0x1f8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d045      	beq.n	80027c6 <HAL_DMA_Start_IT+0xee>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a65      	ldr	r2, [pc, #404]	@ (80028d4 <HAL_DMA_Start_IT+0x1fc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d040      	beq.n	80027c6 <HAL_DMA_Start_IT+0xee>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a63      	ldr	r2, [pc, #396]	@ (80028d8 <HAL_DMA_Start_IT+0x200>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d03b      	beq.n	80027c6 <HAL_DMA_Start_IT+0xee>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a62      	ldr	r2, [pc, #392]	@ (80028dc <HAL_DMA_Start_IT+0x204>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d036      	beq.n	80027c6 <HAL_DMA_Start_IT+0xee>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a60      	ldr	r2, [pc, #384]	@ (80028e0 <HAL_DMA_Start_IT+0x208>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d031      	beq.n	80027c6 <HAL_DMA_Start_IT+0xee>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a5f      	ldr	r2, [pc, #380]	@ (80028e4 <HAL_DMA_Start_IT+0x20c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d02c      	beq.n	80027c6 <HAL_DMA_Start_IT+0xee>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a5d      	ldr	r2, [pc, #372]	@ (80028e8 <HAL_DMA_Start_IT+0x210>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d027      	beq.n	80027c6 <HAL_DMA_Start_IT+0xee>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a5c      	ldr	r2, [pc, #368]	@ (80028ec <HAL_DMA_Start_IT+0x214>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d022      	beq.n	80027c6 <HAL_DMA_Start_IT+0xee>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a5a      	ldr	r2, [pc, #360]	@ (80028f0 <HAL_DMA_Start_IT+0x218>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d01d      	beq.n	80027c6 <HAL_DMA_Start_IT+0xee>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a59      	ldr	r2, [pc, #356]	@ (80028f4 <HAL_DMA_Start_IT+0x21c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d018      	beq.n	80027c6 <HAL_DMA_Start_IT+0xee>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a57      	ldr	r2, [pc, #348]	@ (80028f8 <HAL_DMA_Start_IT+0x220>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d013      	beq.n	80027c6 <HAL_DMA_Start_IT+0xee>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a56      	ldr	r2, [pc, #344]	@ (80028fc <HAL_DMA_Start_IT+0x224>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00e      	beq.n	80027c6 <HAL_DMA_Start_IT+0xee>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a54      	ldr	r2, [pc, #336]	@ (8002900 <HAL_DMA_Start_IT+0x228>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d009      	beq.n	80027c6 <HAL_DMA_Start_IT+0xee>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a53      	ldr	r2, [pc, #332]	@ (8002904 <HAL_DMA_Start_IT+0x22c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d004      	beq.n	80027c6 <HAL_DMA_Start_IT+0xee>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a51      	ldr	r2, [pc, #324]	@ (8002908 <HAL_DMA_Start_IT+0x230>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d108      	bne.n	80027d8 <HAL_DMA_Start_IT+0x100>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0201 	bic.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	e007      	b.n	80027e8 <HAL_DMA_Start_IT+0x110>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0201 	bic.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f001 feae 	bl	8004550 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a34      	ldr	r2, [pc, #208]	@ (80028cc <HAL_DMA_Start_IT+0x1f4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d04a      	beq.n	8002894 <HAL_DMA_Start_IT+0x1bc>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a33      	ldr	r2, [pc, #204]	@ (80028d0 <HAL_DMA_Start_IT+0x1f8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d045      	beq.n	8002894 <HAL_DMA_Start_IT+0x1bc>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a31      	ldr	r2, [pc, #196]	@ (80028d4 <HAL_DMA_Start_IT+0x1fc>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d040      	beq.n	8002894 <HAL_DMA_Start_IT+0x1bc>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a30      	ldr	r2, [pc, #192]	@ (80028d8 <HAL_DMA_Start_IT+0x200>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d03b      	beq.n	8002894 <HAL_DMA_Start_IT+0x1bc>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a2e      	ldr	r2, [pc, #184]	@ (80028dc <HAL_DMA_Start_IT+0x204>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d036      	beq.n	8002894 <HAL_DMA_Start_IT+0x1bc>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a2d      	ldr	r2, [pc, #180]	@ (80028e0 <HAL_DMA_Start_IT+0x208>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d031      	beq.n	8002894 <HAL_DMA_Start_IT+0x1bc>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a2b      	ldr	r2, [pc, #172]	@ (80028e4 <HAL_DMA_Start_IT+0x20c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d02c      	beq.n	8002894 <HAL_DMA_Start_IT+0x1bc>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a2a      	ldr	r2, [pc, #168]	@ (80028e8 <HAL_DMA_Start_IT+0x210>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d027      	beq.n	8002894 <HAL_DMA_Start_IT+0x1bc>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a28      	ldr	r2, [pc, #160]	@ (80028ec <HAL_DMA_Start_IT+0x214>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d022      	beq.n	8002894 <HAL_DMA_Start_IT+0x1bc>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a27      	ldr	r2, [pc, #156]	@ (80028f0 <HAL_DMA_Start_IT+0x218>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d01d      	beq.n	8002894 <HAL_DMA_Start_IT+0x1bc>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a25      	ldr	r2, [pc, #148]	@ (80028f4 <HAL_DMA_Start_IT+0x21c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d018      	beq.n	8002894 <HAL_DMA_Start_IT+0x1bc>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a24      	ldr	r2, [pc, #144]	@ (80028f8 <HAL_DMA_Start_IT+0x220>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d013      	beq.n	8002894 <HAL_DMA_Start_IT+0x1bc>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a22      	ldr	r2, [pc, #136]	@ (80028fc <HAL_DMA_Start_IT+0x224>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00e      	beq.n	8002894 <HAL_DMA_Start_IT+0x1bc>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a21      	ldr	r2, [pc, #132]	@ (8002900 <HAL_DMA_Start_IT+0x228>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d009      	beq.n	8002894 <HAL_DMA_Start_IT+0x1bc>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a1f      	ldr	r2, [pc, #124]	@ (8002904 <HAL_DMA_Start_IT+0x22c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d004      	beq.n	8002894 <HAL_DMA_Start_IT+0x1bc>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a1e      	ldr	r2, [pc, #120]	@ (8002908 <HAL_DMA_Start_IT+0x230>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d101      	bne.n	8002898 <HAL_DMA_Start_IT+0x1c0>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <HAL_DMA_Start_IT+0x1c2>
 8002898:	2300      	movs	r3, #0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d036      	beq.n	800290c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f023 021e 	bic.w	r2, r3, #30
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0216 	orr.w	r2, r2, #22
 80028b0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d03e      	beq.n	8002938 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0208 	orr.w	r2, r2, #8
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e035      	b.n	8002938 <HAL_DMA_Start_IT+0x260>
 80028cc:	40020010 	.word	0x40020010
 80028d0:	40020028 	.word	0x40020028
 80028d4:	40020040 	.word	0x40020040
 80028d8:	40020058 	.word	0x40020058
 80028dc:	40020070 	.word	0x40020070
 80028e0:	40020088 	.word	0x40020088
 80028e4:	400200a0 	.word	0x400200a0
 80028e8:	400200b8 	.word	0x400200b8
 80028ec:	40020410 	.word	0x40020410
 80028f0:	40020428 	.word	0x40020428
 80028f4:	40020440 	.word	0x40020440
 80028f8:	40020458 	.word	0x40020458
 80028fc:	40020470 	.word	0x40020470
 8002900:	40020488 	.word	0x40020488
 8002904:	400204a0 	.word	0x400204a0
 8002908:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 020e 	bic.w	r2, r3, #14
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 020a 	orr.w	r2, r2, #10
 800291e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d007      	beq.n	8002938 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0204 	orr.w	r2, r2, #4
 8002936:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a83      	ldr	r2, [pc, #524]	@ (8002b4c <HAL_DMA_Start_IT+0x474>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d072      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a82      	ldr	r2, [pc, #520]	@ (8002b50 <HAL_DMA_Start_IT+0x478>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d06d      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a80      	ldr	r2, [pc, #512]	@ (8002b54 <HAL_DMA_Start_IT+0x47c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d068      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a7f      	ldr	r2, [pc, #508]	@ (8002b58 <HAL_DMA_Start_IT+0x480>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d063      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a7d      	ldr	r2, [pc, #500]	@ (8002b5c <HAL_DMA_Start_IT+0x484>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d05e      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a7c      	ldr	r2, [pc, #496]	@ (8002b60 <HAL_DMA_Start_IT+0x488>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d059      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a7a      	ldr	r2, [pc, #488]	@ (8002b64 <HAL_DMA_Start_IT+0x48c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d054      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a79      	ldr	r2, [pc, #484]	@ (8002b68 <HAL_DMA_Start_IT+0x490>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d04f      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a77      	ldr	r2, [pc, #476]	@ (8002b6c <HAL_DMA_Start_IT+0x494>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d04a      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a76      	ldr	r2, [pc, #472]	@ (8002b70 <HAL_DMA_Start_IT+0x498>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d045      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a74      	ldr	r2, [pc, #464]	@ (8002b74 <HAL_DMA_Start_IT+0x49c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d040      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a73      	ldr	r2, [pc, #460]	@ (8002b78 <HAL_DMA_Start_IT+0x4a0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d03b      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a71      	ldr	r2, [pc, #452]	@ (8002b7c <HAL_DMA_Start_IT+0x4a4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d036      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a70      	ldr	r2, [pc, #448]	@ (8002b80 <HAL_DMA_Start_IT+0x4a8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d031      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a6e      	ldr	r2, [pc, #440]	@ (8002b84 <HAL_DMA_Start_IT+0x4ac>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d02c      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a6d      	ldr	r2, [pc, #436]	@ (8002b88 <HAL_DMA_Start_IT+0x4b0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d027      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a6b      	ldr	r2, [pc, #428]	@ (8002b8c <HAL_DMA_Start_IT+0x4b4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d022      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a6a      	ldr	r2, [pc, #424]	@ (8002b90 <HAL_DMA_Start_IT+0x4b8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d01d      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a68      	ldr	r2, [pc, #416]	@ (8002b94 <HAL_DMA_Start_IT+0x4bc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d018      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a67      	ldr	r2, [pc, #412]	@ (8002b98 <HAL_DMA_Start_IT+0x4c0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d013      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a65      	ldr	r2, [pc, #404]	@ (8002b9c <HAL_DMA_Start_IT+0x4c4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00e      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a64      	ldr	r2, [pc, #400]	@ (8002ba0 <HAL_DMA_Start_IT+0x4c8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d009      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a62      	ldr	r2, [pc, #392]	@ (8002ba4 <HAL_DMA_Start_IT+0x4cc>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d004      	beq.n	8002a28 <HAL_DMA_Start_IT+0x350>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a61      	ldr	r2, [pc, #388]	@ (8002ba8 <HAL_DMA_Start_IT+0x4d0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d101      	bne.n	8002a2c <HAL_DMA_Start_IT+0x354>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <HAL_DMA_Start_IT+0x356>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d01a      	beq.n	8002a68 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d007      	beq.n	8002a50 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a4e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d007      	beq.n	8002a68 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a66:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a37      	ldr	r2, [pc, #220]	@ (8002b4c <HAL_DMA_Start_IT+0x474>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d04a      	beq.n	8002b08 <HAL_DMA_Start_IT+0x430>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a36      	ldr	r2, [pc, #216]	@ (8002b50 <HAL_DMA_Start_IT+0x478>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d045      	beq.n	8002b08 <HAL_DMA_Start_IT+0x430>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a34      	ldr	r2, [pc, #208]	@ (8002b54 <HAL_DMA_Start_IT+0x47c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d040      	beq.n	8002b08 <HAL_DMA_Start_IT+0x430>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a33      	ldr	r2, [pc, #204]	@ (8002b58 <HAL_DMA_Start_IT+0x480>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d03b      	beq.n	8002b08 <HAL_DMA_Start_IT+0x430>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a31      	ldr	r2, [pc, #196]	@ (8002b5c <HAL_DMA_Start_IT+0x484>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d036      	beq.n	8002b08 <HAL_DMA_Start_IT+0x430>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a30      	ldr	r2, [pc, #192]	@ (8002b60 <HAL_DMA_Start_IT+0x488>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d031      	beq.n	8002b08 <HAL_DMA_Start_IT+0x430>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a2e      	ldr	r2, [pc, #184]	@ (8002b64 <HAL_DMA_Start_IT+0x48c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d02c      	beq.n	8002b08 <HAL_DMA_Start_IT+0x430>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8002b68 <HAL_DMA_Start_IT+0x490>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d027      	beq.n	8002b08 <HAL_DMA_Start_IT+0x430>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a2b      	ldr	r2, [pc, #172]	@ (8002b6c <HAL_DMA_Start_IT+0x494>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d022      	beq.n	8002b08 <HAL_DMA_Start_IT+0x430>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8002b70 <HAL_DMA_Start_IT+0x498>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d01d      	beq.n	8002b08 <HAL_DMA_Start_IT+0x430>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a28      	ldr	r2, [pc, #160]	@ (8002b74 <HAL_DMA_Start_IT+0x49c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d018      	beq.n	8002b08 <HAL_DMA_Start_IT+0x430>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a27      	ldr	r2, [pc, #156]	@ (8002b78 <HAL_DMA_Start_IT+0x4a0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d013      	beq.n	8002b08 <HAL_DMA_Start_IT+0x430>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a25      	ldr	r2, [pc, #148]	@ (8002b7c <HAL_DMA_Start_IT+0x4a4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00e      	beq.n	8002b08 <HAL_DMA_Start_IT+0x430>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a24      	ldr	r2, [pc, #144]	@ (8002b80 <HAL_DMA_Start_IT+0x4a8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d009      	beq.n	8002b08 <HAL_DMA_Start_IT+0x430>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a22      	ldr	r2, [pc, #136]	@ (8002b84 <HAL_DMA_Start_IT+0x4ac>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d004      	beq.n	8002b08 <HAL_DMA_Start_IT+0x430>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a21      	ldr	r2, [pc, #132]	@ (8002b88 <HAL_DMA_Start_IT+0x4b0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d108      	bne.n	8002b1a <HAL_DMA_Start_IT+0x442>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	e012      	b.n	8002b40 <HAL_DMA_Start_IT+0x468>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0201 	orr.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	e009      	b.n	8002b40 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b32:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40020010 	.word	0x40020010
 8002b50:	40020028 	.word	0x40020028
 8002b54:	40020040 	.word	0x40020040
 8002b58:	40020058 	.word	0x40020058
 8002b5c:	40020070 	.word	0x40020070
 8002b60:	40020088 	.word	0x40020088
 8002b64:	400200a0 	.word	0x400200a0
 8002b68:	400200b8 	.word	0x400200b8
 8002b6c:	40020410 	.word	0x40020410
 8002b70:	40020428 	.word	0x40020428
 8002b74:	40020440 	.word	0x40020440
 8002b78:	40020458 	.word	0x40020458
 8002b7c:	40020470 	.word	0x40020470
 8002b80:	40020488 	.word	0x40020488
 8002b84:	400204a0 	.word	0x400204a0
 8002b88:	400204b8 	.word	0x400204b8
 8002b8c:	58025408 	.word	0x58025408
 8002b90:	5802541c 	.word	0x5802541c
 8002b94:	58025430 	.word	0x58025430
 8002b98:	58025444 	.word	0x58025444
 8002b9c:	58025458 	.word	0x58025458
 8002ba0:	5802546c 	.word	0x5802546c
 8002ba4:	58025480 	.word	0x58025480
 8002ba8:	58025494 	.word	0x58025494

08002bac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002bb4:	f7ff f86e 	bl	8001c94 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e2dc      	b.n	800317e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d008      	beq.n	8002be2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2280      	movs	r2, #128	@ 0x80
 8002bd4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e2cd      	b.n	800317e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a76      	ldr	r2, [pc, #472]	@ (8002dc0 <HAL_DMA_Abort+0x214>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d04a      	beq.n	8002c82 <HAL_DMA_Abort+0xd6>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a74      	ldr	r2, [pc, #464]	@ (8002dc4 <HAL_DMA_Abort+0x218>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d045      	beq.n	8002c82 <HAL_DMA_Abort+0xd6>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a73      	ldr	r2, [pc, #460]	@ (8002dc8 <HAL_DMA_Abort+0x21c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d040      	beq.n	8002c82 <HAL_DMA_Abort+0xd6>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a71      	ldr	r2, [pc, #452]	@ (8002dcc <HAL_DMA_Abort+0x220>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d03b      	beq.n	8002c82 <HAL_DMA_Abort+0xd6>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a70      	ldr	r2, [pc, #448]	@ (8002dd0 <HAL_DMA_Abort+0x224>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d036      	beq.n	8002c82 <HAL_DMA_Abort+0xd6>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a6e      	ldr	r2, [pc, #440]	@ (8002dd4 <HAL_DMA_Abort+0x228>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d031      	beq.n	8002c82 <HAL_DMA_Abort+0xd6>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a6d      	ldr	r2, [pc, #436]	@ (8002dd8 <HAL_DMA_Abort+0x22c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d02c      	beq.n	8002c82 <HAL_DMA_Abort+0xd6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a6b      	ldr	r2, [pc, #428]	@ (8002ddc <HAL_DMA_Abort+0x230>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d027      	beq.n	8002c82 <HAL_DMA_Abort+0xd6>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a6a      	ldr	r2, [pc, #424]	@ (8002de0 <HAL_DMA_Abort+0x234>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d022      	beq.n	8002c82 <HAL_DMA_Abort+0xd6>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a68      	ldr	r2, [pc, #416]	@ (8002de4 <HAL_DMA_Abort+0x238>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01d      	beq.n	8002c82 <HAL_DMA_Abort+0xd6>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a67      	ldr	r2, [pc, #412]	@ (8002de8 <HAL_DMA_Abort+0x23c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d018      	beq.n	8002c82 <HAL_DMA_Abort+0xd6>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a65      	ldr	r2, [pc, #404]	@ (8002dec <HAL_DMA_Abort+0x240>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_DMA_Abort+0xd6>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a64      	ldr	r2, [pc, #400]	@ (8002df0 <HAL_DMA_Abort+0x244>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00e      	beq.n	8002c82 <HAL_DMA_Abort+0xd6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a62      	ldr	r2, [pc, #392]	@ (8002df4 <HAL_DMA_Abort+0x248>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d009      	beq.n	8002c82 <HAL_DMA_Abort+0xd6>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a61      	ldr	r2, [pc, #388]	@ (8002df8 <HAL_DMA_Abort+0x24c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d004      	beq.n	8002c82 <HAL_DMA_Abort+0xd6>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a5f      	ldr	r2, [pc, #380]	@ (8002dfc <HAL_DMA_Abort+0x250>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d101      	bne.n	8002c86 <HAL_DMA_Abort+0xda>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <HAL_DMA_Abort+0xdc>
 8002c86:	2300      	movs	r3, #0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 021e 	bic.w	r2, r2, #30
 8002c9a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002caa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	e00a      	b.n	8002cca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 020e 	bic.w	r2, r2, #14
 8002cc2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a3c      	ldr	r2, [pc, #240]	@ (8002dc0 <HAL_DMA_Abort+0x214>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d072      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a3a      	ldr	r2, [pc, #232]	@ (8002dc4 <HAL_DMA_Abort+0x218>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d06d      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a39      	ldr	r2, [pc, #228]	@ (8002dc8 <HAL_DMA_Abort+0x21c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d068      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a37      	ldr	r2, [pc, #220]	@ (8002dcc <HAL_DMA_Abort+0x220>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d063      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a36      	ldr	r2, [pc, #216]	@ (8002dd0 <HAL_DMA_Abort+0x224>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d05e      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a34      	ldr	r2, [pc, #208]	@ (8002dd4 <HAL_DMA_Abort+0x228>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d059      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a33      	ldr	r2, [pc, #204]	@ (8002dd8 <HAL_DMA_Abort+0x22c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d054      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a31      	ldr	r2, [pc, #196]	@ (8002ddc <HAL_DMA_Abort+0x230>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d04f      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a30      	ldr	r2, [pc, #192]	@ (8002de0 <HAL_DMA_Abort+0x234>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d04a      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a2e      	ldr	r2, [pc, #184]	@ (8002de4 <HAL_DMA_Abort+0x238>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d045      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a2d      	ldr	r2, [pc, #180]	@ (8002de8 <HAL_DMA_Abort+0x23c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d040      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002dec <HAL_DMA_Abort+0x240>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d03b      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a2a      	ldr	r2, [pc, #168]	@ (8002df0 <HAL_DMA_Abort+0x244>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d036      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a28      	ldr	r2, [pc, #160]	@ (8002df4 <HAL_DMA_Abort+0x248>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d031      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a27      	ldr	r2, [pc, #156]	@ (8002df8 <HAL_DMA_Abort+0x24c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d02c      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a25      	ldr	r2, [pc, #148]	@ (8002dfc <HAL_DMA_Abort+0x250>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d027      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a24      	ldr	r2, [pc, #144]	@ (8002e00 <HAL_DMA_Abort+0x254>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d022      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a22      	ldr	r2, [pc, #136]	@ (8002e04 <HAL_DMA_Abort+0x258>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01d      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a21      	ldr	r2, [pc, #132]	@ (8002e08 <HAL_DMA_Abort+0x25c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d018      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8002e0c <HAL_DMA_Abort+0x260>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d013      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a1e      	ldr	r2, [pc, #120]	@ (8002e10 <HAL_DMA_Abort+0x264>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d00e      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e14 <HAL_DMA_Abort+0x268>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d009      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1b      	ldr	r2, [pc, #108]	@ (8002e18 <HAL_DMA_Abort+0x26c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d004      	beq.n	8002dba <HAL_DMA_Abort+0x20e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a19      	ldr	r2, [pc, #100]	@ (8002e1c <HAL_DMA_Abort+0x270>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d132      	bne.n	8002e20 <HAL_DMA_Abort+0x274>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e031      	b.n	8002e22 <HAL_DMA_Abort+0x276>
 8002dbe:	bf00      	nop
 8002dc0:	40020010 	.word	0x40020010
 8002dc4:	40020028 	.word	0x40020028
 8002dc8:	40020040 	.word	0x40020040
 8002dcc:	40020058 	.word	0x40020058
 8002dd0:	40020070 	.word	0x40020070
 8002dd4:	40020088 	.word	0x40020088
 8002dd8:	400200a0 	.word	0x400200a0
 8002ddc:	400200b8 	.word	0x400200b8
 8002de0:	40020410 	.word	0x40020410
 8002de4:	40020428 	.word	0x40020428
 8002de8:	40020440 	.word	0x40020440
 8002dec:	40020458 	.word	0x40020458
 8002df0:	40020470 	.word	0x40020470
 8002df4:	40020488 	.word	0x40020488
 8002df8:	400204a0 	.word	0x400204a0
 8002dfc:	400204b8 	.word	0x400204b8
 8002e00:	58025408 	.word	0x58025408
 8002e04:	5802541c 	.word	0x5802541c
 8002e08:	58025430 	.word	0x58025430
 8002e0c:	58025444 	.word	0x58025444
 8002e10:	58025458 	.word	0x58025458
 8002e14:	5802546c 	.word	0x5802546c
 8002e18:	58025480 	.word	0x58025480
 8002e1c:	58025494 	.word	0x58025494
 8002e20:	2300      	movs	r3, #0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d007      	beq.n	8002e36 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e34:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6d      	ldr	r2, [pc, #436]	@ (8002ff0 <HAL_DMA_Abort+0x444>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d04a      	beq.n	8002ed6 <HAL_DMA_Abort+0x32a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a6b      	ldr	r2, [pc, #428]	@ (8002ff4 <HAL_DMA_Abort+0x448>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d045      	beq.n	8002ed6 <HAL_DMA_Abort+0x32a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a6a      	ldr	r2, [pc, #424]	@ (8002ff8 <HAL_DMA_Abort+0x44c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d040      	beq.n	8002ed6 <HAL_DMA_Abort+0x32a>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a68      	ldr	r2, [pc, #416]	@ (8002ffc <HAL_DMA_Abort+0x450>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d03b      	beq.n	8002ed6 <HAL_DMA_Abort+0x32a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a67      	ldr	r2, [pc, #412]	@ (8003000 <HAL_DMA_Abort+0x454>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d036      	beq.n	8002ed6 <HAL_DMA_Abort+0x32a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a65      	ldr	r2, [pc, #404]	@ (8003004 <HAL_DMA_Abort+0x458>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d031      	beq.n	8002ed6 <HAL_DMA_Abort+0x32a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a64      	ldr	r2, [pc, #400]	@ (8003008 <HAL_DMA_Abort+0x45c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d02c      	beq.n	8002ed6 <HAL_DMA_Abort+0x32a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a62      	ldr	r2, [pc, #392]	@ (800300c <HAL_DMA_Abort+0x460>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d027      	beq.n	8002ed6 <HAL_DMA_Abort+0x32a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a61      	ldr	r2, [pc, #388]	@ (8003010 <HAL_DMA_Abort+0x464>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d022      	beq.n	8002ed6 <HAL_DMA_Abort+0x32a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a5f      	ldr	r2, [pc, #380]	@ (8003014 <HAL_DMA_Abort+0x468>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01d      	beq.n	8002ed6 <HAL_DMA_Abort+0x32a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a5e      	ldr	r2, [pc, #376]	@ (8003018 <HAL_DMA_Abort+0x46c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d018      	beq.n	8002ed6 <HAL_DMA_Abort+0x32a>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a5c      	ldr	r2, [pc, #368]	@ (800301c <HAL_DMA_Abort+0x470>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d013      	beq.n	8002ed6 <HAL_DMA_Abort+0x32a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a5b      	ldr	r2, [pc, #364]	@ (8003020 <HAL_DMA_Abort+0x474>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00e      	beq.n	8002ed6 <HAL_DMA_Abort+0x32a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a59      	ldr	r2, [pc, #356]	@ (8003024 <HAL_DMA_Abort+0x478>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d009      	beq.n	8002ed6 <HAL_DMA_Abort+0x32a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a58      	ldr	r2, [pc, #352]	@ (8003028 <HAL_DMA_Abort+0x47c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d004      	beq.n	8002ed6 <HAL_DMA_Abort+0x32a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a56      	ldr	r2, [pc, #344]	@ (800302c <HAL_DMA_Abort+0x480>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d108      	bne.n	8002ee8 <HAL_DMA_Abort+0x33c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	e007      	b.n	8002ef8 <HAL_DMA_Abort+0x34c>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ef8:	e013      	b.n	8002f22 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002efa:	f7fe fecb 	bl	8001c94 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b05      	cmp	r3, #5
 8002f06:	d90c      	bls.n	8002f22 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2203      	movs	r2, #3
 8002f12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e12d      	b.n	800317e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1e5      	bne.n	8002efa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2f      	ldr	r2, [pc, #188]	@ (8002ff0 <HAL_DMA_Abort+0x444>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d04a      	beq.n	8002fce <HAL_DMA_Abort+0x422>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8002ff4 <HAL_DMA_Abort+0x448>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d045      	beq.n	8002fce <HAL_DMA_Abort+0x422>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2c      	ldr	r2, [pc, #176]	@ (8002ff8 <HAL_DMA_Abort+0x44c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d040      	beq.n	8002fce <HAL_DMA_Abort+0x422>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a2a      	ldr	r2, [pc, #168]	@ (8002ffc <HAL_DMA_Abort+0x450>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d03b      	beq.n	8002fce <HAL_DMA_Abort+0x422>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a29      	ldr	r2, [pc, #164]	@ (8003000 <HAL_DMA_Abort+0x454>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d036      	beq.n	8002fce <HAL_DMA_Abort+0x422>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a27      	ldr	r2, [pc, #156]	@ (8003004 <HAL_DMA_Abort+0x458>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d031      	beq.n	8002fce <HAL_DMA_Abort+0x422>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a26      	ldr	r2, [pc, #152]	@ (8003008 <HAL_DMA_Abort+0x45c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d02c      	beq.n	8002fce <HAL_DMA_Abort+0x422>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a24      	ldr	r2, [pc, #144]	@ (800300c <HAL_DMA_Abort+0x460>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d027      	beq.n	8002fce <HAL_DMA_Abort+0x422>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a23      	ldr	r2, [pc, #140]	@ (8003010 <HAL_DMA_Abort+0x464>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d022      	beq.n	8002fce <HAL_DMA_Abort+0x422>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a21      	ldr	r2, [pc, #132]	@ (8003014 <HAL_DMA_Abort+0x468>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d01d      	beq.n	8002fce <HAL_DMA_Abort+0x422>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a20      	ldr	r2, [pc, #128]	@ (8003018 <HAL_DMA_Abort+0x46c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d018      	beq.n	8002fce <HAL_DMA_Abort+0x422>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1e      	ldr	r2, [pc, #120]	@ (800301c <HAL_DMA_Abort+0x470>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_DMA_Abort+0x422>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1d      	ldr	r2, [pc, #116]	@ (8003020 <HAL_DMA_Abort+0x474>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00e      	beq.n	8002fce <HAL_DMA_Abort+0x422>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8003024 <HAL_DMA_Abort+0x478>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d009      	beq.n	8002fce <HAL_DMA_Abort+0x422>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1a      	ldr	r2, [pc, #104]	@ (8003028 <HAL_DMA_Abort+0x47c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <HAL_DMA_Abort+0x422>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a18      	ldr	r2, [pc, #96]	@ (800302c <HAL_DMA_Abort+0x480>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <HAL_DMA_Abort+0x426>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_DMA_Abort+0x428>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d02b      	beq.n	8003030 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fdc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	223f      	movs	r2, #63	@ 0x3f
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	609a      	str	r2, [r3, #8]
 8002fee:	e02a      	b.n	8003046 <HAL_DMA_Abort+0x49a>
 8002ff0:	40020010 	.word	0x40020010
 8002ff4:	40020028 	.word	0x40020028
 8002ff8:	40020040 	.word	0x40020040
 8002ffc:	40020058 	.word	0x40020058
 8003000:	40020070 	.word	0x40020070
 8003004:	40020088 	.word	0x40020088
 8003008:	400200a0 	.word	0x400200a0
 800300c:	400200b8 	.word	0x400200b8
 8003010:	40020410 	.word	0x40020410
 8003014:	40020428 	.word	0x40020428
 8003018:	40020440 	.word	0x40020440
 800301c:	40020458 	.word	0x40020458
 8003020:	40020470 	.word	0x40020470
 8003024:	40020488 	.word	0x40020488
 8003028:	400204a0 	.word	0x400204a0
 800302c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003034:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	2201      	movs	r2, #1
 8003040:	409a      	lsls	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a4f      	ldr	r2, [pc, #316]	@ (8003188 <HAL_DMA_Abort+0x5dc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d072      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a4d      	ldr	r2, [pc, #308]	@ (800318c <HAL_DMA_Abort+0x5e0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d06d      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a4c      	ldr	r2, [pc, #304]	@ (8003190 <HAL_DMA_Abort+0x5e4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d068      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a4a      	ldr	r2, [pc, #296]	@ (8003194 <HAL_DMA_Abort+0x5e8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d063      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a49      	ldr	r2, [pc, #292]	@ (8003198 <HAL_DMA_Abort+0x5ec>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d05e      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a47      	ldr	r2, [pc, #284]	@ (800319c <HAL_DMA_Abort+0x5f0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d059      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a46      	ldr	r2, [pc, #280]	@ (80031a0 <HAL_DMA_Abort+0x5f4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d054      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a44      	ldr	r2, [pc, #272]	@ (80031a4 <HAL_DMA_Abort+0x5f8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d04f      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a43      	ldr	r2, [pc, #268]	@ (80031a8 <HAL_DMA_Abort+0x5fc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d04a      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a41      	ldr	r2, [pc, #260]	@ (80031ac <HAL_DMA_Abort+0x600>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d045      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a40      	ldr	r2, [pc, #256]	@ (80031b0 <HAL_DMA_Abort+0x604>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d040      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a3e      	ldr	r2, [pc, #248]	@ (80031b4 <HAL_DMA_Abort+0x608>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d03b      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a3d      	ldr	r2, [pc, #244]	@ (80031b8 <HAL_DMA_Abort+0x60c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d036      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a3b      	ldr	r2, [pc, #236]	@ (80031bc <HAL_DMA_Abort+0x610>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d031      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a3a      	ldr	r2, [pc, #232]	@ (80031c0 <HAL_DMA_Abort+0x614>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d02c      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a38      	ldr	r2, [pc, #224]	@ (80031c4 <HAL_DMA_Abort+0x618>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d027      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a37      	ldr	r2, [pc, #220]	@ (80031c8 <HAL_DMA_Abort+0x61c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d022      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a35      	ldr	r2, [pc, #212]	@ (80031cc <HAL_DMA_Abort+0x620>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d01d      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a34      	ldr	r2, [pc, #208]	@ (80031d0 <HAL_DMA_Abort+0x624>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d018      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a32      	ldr	r2, [pc, #200]	@ (80031d4 <HAL_DMA_Abort+0x628>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a31      	ldr	r2, [pc, #196]	@ (80031d8 <HAL_DMA_Abort+0x62c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00e      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a2f      	ldr	r2, [pc, #188]	@ (80031dc <HAL_DMA_Abort+0x630>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d009      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a2e      	ldr	r2, [pc, #184]	@ (80031e0 <HAL_DMA_Abort+0x634>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d004      	beq.n	8003136 <HAL_DMA_Abort+0x58a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a2c      	ldr	r2, [pc, #176]	@ (80031e4 <HAL_DMA_Abort+0x638>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d101      	bne.n	800313a <HAL_DMA_Abort+0x58e>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_DMA_Abort+0x590>
 800313a:	2300      	movs	r3, #0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d015      	beq.n	800316c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003148:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00c      	beq.n	800316c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800315c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003160:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800316a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40020010 	.word	0x40020010
 800318c:	40020028 	.word	0x40020028
 8003190:	40020040 	.word	0x40020040
 8003194:	40020058 	.word	0x40020058
 8003198:	40020070 	.word	0x40020070
 800319c:	40020088 	.word	0x40020088
 80031a0:	400200a0 	.word	0x400200a0
 80031a4:	400200b8 	.word	0x400200b8
 80031a8:	40020410 	.word	0x40020410
 80031ac:	40020428 	.word	0x40020428
 80031b0:	40020440 	.word	0x40020440
 80031b4:	40020458 	.word	0x40020458
 80031b8:	40020470 	.word	0x40020470
 80031bc:	40020488 	.word	0x40020488
 80031c0:	400204a0 	.word	0x400204a0
 80031c4:	400204b8 	.word	0x400204b8
 80031c8:	58025408 	.word	0x58025408
 80031cc:	5802541c 	.word	0x5802541c
 80031d0:	58025430 	.word	0x58025430
 80031d4:	58025444 	.word	0x58025444
 80031d8:	58025458 	.word	0x58025458
 80031dc:	5802546c 	.word	0x5802546c
 80031e0:	58025480 	.word	0x58025480
 80031e4:	58025494 	.word	0x58025494

080031e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e237      	b.n	800366a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d004      	beq.n	8003210 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2280      	movs	r2, #128	@ 0x80
 800320a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e22c      	b.n	800366a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a5c      	ldr	r2, [pc, #368]	@ (8003388 <HAL_DMA_Abort_IT+0x1a0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d04a      	beq.n	80032b0 <HAL_DMA_Abort_IT+0xc8>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a5b      	ldr	r2, [pc, #364]	@ (800338c <HAL_DMA_Abort_IT+0x1a4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d045      	beq.n	80032b0 <HAL_DMA_Abort_IT+0xc8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a59      	ldr	r2, [pc, #356]	@ (8003390 <HAL_DMA_Abort_IT+0x1a8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d040      	beq.n	80032b0 <HAL_DMA_Abort_IT+0xc8>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a58      	ldr	r2, [pc, #352]	@ (8003394 <HAL_DMA_Abort_IT+0x1ac>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d03b      	beq.n	80032b0 <HAL_DMA_Abort_IT+0xc8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a56      	ldr	r2, [pc, #344]	@ (8003398 <HAL_DMA_Abort_IT+0x1b0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d036      	beq.n	80032b0 <HAL_DMA_Abort_IT+0xc8>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a55      	ldr	r2, [pc, #340]	@ (800339c <HAL_DMA_Abort_IT+0x1b4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d031      	beq.n	80032b0 <HAL_DMA_Abort_IT+0xc8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a53      	ldr	r2, [pc, #332]	@ (80033a0 <HAL_DMA_Abort_IT+0x1b8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d02c      	beq.n	80032b0 <HAL_DMA_Abort_IT+0xc8>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a52      	ldr	r2, [pc, #328]	@ (80033a4 <HAL_DMA_Abort_IT+0x1bc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d027      	beq.n	80032b0 <HAL_DMA_Abort_IT+0xc8>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a50      	ldr	r2, [pc, #320]	@ (80033a8 <HAL_DMA_Abort_IT+0x1c0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d022      	beq.n	80032b0 <HAL_DMA_Abort_IT+0xc8>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a4f      	ldr	r2, [pc, #316]	@ (80033ac <HAL_DMA_Abort_IT+0x1c4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d01d      	beq.n	80032b0 <HAL_DMA_Abort_IT+0xc8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a4d      	ldr	r2, [pc, #308]	@ (80033b0 <HAL_DMA_Abort_IT+0x1c8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d018      	beq.n	80032b0 <HAL_DMA_Abort_IT+0xc8>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a4c      	ldr	r2, [pc, #304]	@ (80033b4 <HAL_DMA_Abort_IT+0x1cc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d013      	beq.n	80032b0 <HAL_DMA_Abort_IT+0xc8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a4a      	ldr	r2, [pc, #296]	@ (80033b8 <HAL_DMA_Abort_IT+0x1d0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00e      	beq.n	80032b0 <HAL_DMA_Abort_IT+0xc8>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a49      	ldr	r2, [pc, #292]	@ (80033bc <HAL_DMA_Abort_IT+0x1d4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d009      	beq.n	80032b0 <HAL_DMA_Abort_IT+0xc8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a47      	ldr	r2, [pc, #284]	@ (80033c0 <HAL_DMA_Abort_IT+0x1d8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d004      	beq.n	80032b0 <HAL_DMA_Abort_IT+0xc8>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a46      	ldr	r2, [pc, #280]	@ (80033c4 <HAL_DMA_Abort_IT+0x1dc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d101      	bne.n	80032b4 <HAL_DMA_Abort_IT+0xcc>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <HAL_DMA_Abort_IT+0xce>
 80032b4:	2300      	movs	r3, #0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8086 	beq.w	80033c8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2204      	movs	r2, #4
 80032c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003388 <HAL_DMA_Abort_IT+0x1a0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d04a      	beq.n	8003364 <HAL_DMA_Abort_IT+0x17c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a2e      	ldr	r2, [pc, #184]	@ (800338c <HAL_DMA_Abort_IT+0x1a4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d045      	beq.n	8003364 <HAL_DMA_Abort_IT+0x17c>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003390 <HAL_DMA_Abort_IT+0x1a8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d040      	beq.n	8003364 <HAL_DMA_Abort_IT+0x17c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003394 <HAL_DMA_Abort_IT+0x1ac>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d03b      	beq.n	8003364 <HAL_DMA_Abort_IT+0x17c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a29      	ldr	r2, [pc, #164]	@ (8003398 <HAL_DMA_Abort_IT+0x1b0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d036      	beq.n	8003364 <HAL_DMA_Abort_IT+0x17c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a28      	ldr	r2, [pc, #160]	@ (800339c <HAL_DMA_Abort_IT+0x1b4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d031      	beq.n	8003364 <HAL_DMA_Abort_IT+0x17c>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a26      	ldr	r2, [pc, #152]	@ (80033a0 <HAL_DMA_Abort_IT+0x1b8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d02c      	beq.n	8003364 <HAL_DMA_Abort_IT+0x17c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a25      	ldr	r2, [pc, #148]	@ (80033a4 <HAL_DMA_Abort_IT+0x1bc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d027      	beq.n	8003364 <HAL_DMA_Abort_IT+0x17c>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a23      	ldr	r2, [pc, #140]	@ (80033a8 <HAL_DMA_Abort_IT+0x1c0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d022      	beq.n	8003364 <HAL_DMA_Abort_IT+0x17c>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a22      	ldr	r2, [pc, #136]	@ (80033ac <HAL_DMA_Abort_IT+0x1c4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d01d      	beq.n	8003364 <HAL_DMA_Abort_IT+0x17c>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a20      	ldr	r2, [pc, #128]	@ (80033b0 <HAL_DMA_Abort_IT+0x1c8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d018      	beq.n	8003364 <HAL_DMA_Abort_IT+0x17c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1f      	ldr	r2, [pc, #124]	@ (80033b4 <HAL_DMA_Abort_IT+0x1cc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d013      	beq.n	8003364 <HAL_DMA_Abort_IT+0x17c>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1d      	ldr	r2, [pc, #116]	@ (80033b8 <HAL_DMA_Abort_IT+0x1d0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00e      	beq.n	8003364 <HAL_DMA_Abort_IT+0x17c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1c      	ldr	r2, [pc, #112]	@ (80033bc <HAL_DMA_Abort_IT+0x1d4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d009      	beq.n	8003364 <HAL_DMA_Abort_IT+0x17c>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1a      	ldr	r2, [pc, #104]	@ (80033c0 <HAL_DMA_Abort_IT+0x1d8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <HAL_DMA_Abort_IT+0x17c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a19      	ldr	r2, [pc, #100]	@ (80033c4 <HAL_DMA_Abort_IT+0x1dc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d108      	bne.n	8003376 <HAL_DMA_Abort_IT+0x18e>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e178      	b.n	8003668 <HAL_DMA_Abort_IT+0x480>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	e16f      	b.n	8003668 <HAL_DMA_Abort_IT+0x480>
 8003388:	40020010 	.word	0x40020010
 800338c:	40020028 	.word	0x40020028
 8003390:	40020040 	.word	0x40020040
 8003394:	40020058 	.word	0x40020058
 8003398:	40020070 	.word	0x40020070
 800339c:	40020088 	.word	0x40020088
 80033a0:	400200a0 	.word	0x400200a0
 80033a4:	400200b8 	.word	0x400200b8
 80033a8:	40020410 	.word	0x40020410
 80033ac:	40020428 	.word	0x40020428
 80033b0:	40020440 	.word	0x40020440
 80033b4:	40020458 	.word	0x40020458
 80033b8:	40020470 	.word	0x40020470
 80033bc:	40020488 	.word	0x40020488
 80033c0:	400204a0 	.word	0x400204a0
 80033c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 020e 	bic.w	r2, r2, #14
 80033d6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a6c      	ldr	r2, [pc, #432]	@ (8003590 <HAL_DMA_Abort_IT+0x3a8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d04a      	beq.n	8003478 <HAL_DMA_Abort_IT+0x290>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a6b      	ldr	r2, [pc, #428]	@ (8003594 <HAL_DMA_Abort_IT+0x3ac>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d045      	beq.n	8003478 <HAL_DMA_Abort_IT+0x290>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a69      	ldr	r2, [pc, #420]	@ (8003598 <HAL_DMA_Abort_IT+0x3b0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d040      	beq.n	8003478 <HAL_DMA_Abort_IT+0x290>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a68      	ldr	r2, [pc, #416]	@ (800359c <HAL_DMA_Abort_IT+0x3b4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d03b      	beq.n	8003478 <HAL_DMA_Abort_IT+0x290>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a66      	ldr	r2, [pc, #408]	@ (80035a0 <HAL_DMA_Abort_IT+0x3b8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d036      	beq.n	8003478 <HAL_DMA_Abort_IT+0x290>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a65      	ldr	r2, [pc, #404]	@ (80035a4 <HAL_DMA_Abort_IT+0x3bc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d031      	beq.n	8003478 <HAL_DMA_Abort_IT+0x290>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a63      	ldr	r2, [pc, #396]	@ (80035a8 <HAL_DMA_Abort_IT+0x3c0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d02c      	beq.n	8003478 <HAL_DMA_Abort_IT+0x290>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a62      	ldr	r2, [pc, #392]	@ (80035ac <HAL_DMA_Abort_IT+0x3c4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d027      	beq.n	8003478 <HAL_DMA_Abort_IT+0x290>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a60      	ldr	r2, [pc, #384]	@ (80035b0 <HAL_DMA_Abort_IT+0x3c8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d022      	beq.n	8003478 <HAL_DMA_Abort_IT+0x290>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a5f      	ldr	r2, [pc, #380]	@ (80035b4 <HAL_DMA_Abort_IT+0x3cc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d01d      	beq.n	8003478 <HAL_DMA_Abort_IT+0x290>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a5d      	ldr	r2, [pc, #372]	@ (80035b8 <HAL_DMA_Abort_IT+0x3d0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d018      	beq.n	8003478 <HAL_DMA_Abort_IT+0x290>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a5c      	ldr	r2, [pc, #368]	@ (80035bc <HAL_DMA_Abort_IT+0x3d4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d013      	beq.n	8003478 <HAL_DMA_Abort_IT+0x290>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a5a      	ldr	r2, [pc, #360]	@ (80035c0 <HAL_DMA_Abort_IT+0x3d8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00e      	beq.n	8003478 <HAL_DMA_Abort_IT+0x290>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a59      	ldr	r2, [pc, #356]	@ (80035c4 <HAL_DMA_Abort_IT+0x3dc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d009      	beq.n	8003478 <HAL_DMA_Abort_IT+0x290>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a57      	ldr	r2, [pc, #348]	@ (80035c8 <HAL_DMA_Abort_IT+0x3e0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <HAL_DMA_Abort_IT+0x290>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a56      	ldr	r2, [pc, #344]	@ (80035cc <HAL_DMA_Abort_IT+0x3e4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d108      	bne.n	800348a <HAL_DMA_Abort_IT+0x2a2>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e007      	b.n	800349a <HAL_DMA_Abort_IT+0x2b2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a3c      	ldr	r2, [pc, #240]	@ (8003590 <HAL_DMA_Abort_IT+0x3a8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d072      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003594 <HAL_DMA_Abort_IT+0x3ac>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d06d      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a39      	ldr	r2, [pc, #228]	@ (8003598 <HAL_DMA_Abort_IT+0x3b0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d068      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a37      	ldr	r2, [pc, #220]	@ (800359c <HAL_DMA_Abort_IT+0x3b4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d063      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a36      	ldr	r2, [pc, #216]	@ (80035a0 <HAL_DMA_Abort_IT+0x3b8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d05e      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a34      	ldr	r2, [pc, #208]	@ (80035a4 <HAL_DMA_Abort_IT+0x3bc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d059      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a33      	ldr	r2, [pc, #204]	@ (80035a8 <HAL_DMA_Abort_IT+0x3c0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d054      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a31      	ldr	r2, [pc, #196]	@ (80035ac <HAL_DMA_Abort_IT+0x3c4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d04f      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a30      	ldr	r2, [pc, #192]	@ (80035b0 <HAL_DMA_Abort_IT+0x3c8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d04a      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a2e      	ldr	r2, [pc, #184]	@ (80035b4 <HAL_DMA_Abort_IT+0x3cc>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d045      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a2d      	ldr	r2, [pc, #180]	@ (80035b8 <HAL_DMA_Abort_IT+0x3d0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d040      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a2b      	ldr	r2, [pc, #172]	@ (80035bc <HAL_DMA_Abort_IT+0x3d4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d03b      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a2a      	ldr	r2, [pc, #168]	@ (80035c0 <HAL_DMA_Abort_IT+0x3d8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d036      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a28      	ldr	r2, [pc, #160]	@ (80035c4 <HAL_DMA_Abort_IT+0x3dc>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d031      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a27      	ldr	r2, [pc, #156]	@ (80035c8 <HAL_DMA_Abort_IT+0x3e0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d02c      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a25      	ldr	r2, [pc, #148]	@ (80035cc <HAL_DMA_Abort_IT+0x3e4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d027      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a24      	ldr	r2, [pc, #144]	@ (80035d0 <HAL_DMA_Abort_IT+0x3e8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d022      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a22      	ldr	r2, [pc, #136]	@ (80035d4 <HAL_DMA_Abort_IT+0x3ec>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01d      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a21      	ldr	r2, [pc, #132]	@ (80035d8 <HAL_DMA_Abort_IT+0x3f0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d018      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1f      	ldr	r2, [pc, #124]	@ (80035dc <HAL_DMA_Abort_IT+0x3f4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d013      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1e      	ldr	r2, [pc, #120]	@ (80035e0 <HAL_DMA_Abort_IT+0x3f8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00e      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a1c      	ldr	r2, [pc, #112]	@ (80035e4 <HAL_DMA_Abort_IT+0x3fc>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d009      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a1b      	ldr	r2, [pc, #108]	@ (80035e8 <HAL_DMA_Abort_IT+0x400>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d004      	beq.n	800358a <HAL_DMA_Abort_IT+0x3a2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a19      	ldr	r2, [pc, #100]	@ (80035ec <HAL_DMA_Abort_IT+0x404>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d132      	bne.n	80035f0 <HAL_DMA_Abort_IT+0x408>
 800358a:	2301      	movs	r3, #1
 800358c:	e031      	b.n	80035f2 <HAL_DMA_Abort_IT+0x40a>
 800358e:	bf00      	nop
 8003590:	40020010 	.word	0x40020010
 8003594:	40020028 	.word	0x40020028
 8003598:	40020040 	.word	0x40020040
 800359c:	40020058 	.word	0x40020058
 80035a0:	40020070 	.word	0x40020070
 80035a4:	40020088 	.word	0x40020088
 80035a8:	400200a0 	.word	0x400200a0
 80035ac:	400200b8 	.word	0x400200b8
 80035b0:	40020410 	.word	0x40020410
 80035b4:	40020428 	.word	0x40020428
 80035b8:	40020440 	.word	0x40020440
 80035bc:	40020458 	.word	0x40020458
 80035c0:	40020470 	.word	0x40020470
 80035c4:	40020488 	.word	0x40020488
 80035c8:	400204a0 	.word	0x400204a0
 80035cc:	400204b8 	.word	0x400204b8
 80035d0:	58025408 	.word	0x58025408
 80035d4:	5802541c 	.word	0x5802541c
 80035d8:	58025430 	.word	0x58025430
 80035dc:	58025444 	.word	0x58025444
 80035e0:	58025458 	.word	0x58025458
 80035e4:	5802546c 	.word	0x5802546c
 80035e8:	58025480 	.word	0x58025480
 80035ec:	58025494 	.word	0x58025494
 80035f0:	2300      	movs	r3, #0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d028      	beq.n	8003648 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003600:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003604:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003610:	f003 031f 	and.w	r3, r3, #31
 8003614:	2201      	movs	r2, #1
 8003616:	409a      	lsls	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003624:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00c      	beq.n	8003648 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003638:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800363c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003646:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop

08003674 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	@ 0x28
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003680:	4b67      	ldr	r3, [pc, #412]	@ (8003820 <HAL_DMA_IRQHandler+0x1ac>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a67      	ldr	r2, [pc, #412]	@ (8003824 <HAL_DMA_IRQHandler+0x1b0>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	0a9b      	lsrs	r3, r3, #10
 800368c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003692:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003698:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a5f      	ldr	r2, [pc, #380]	@ (8003828 <HAL_DMA_IRQHandler+0x1b4>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d04a      	beq.n	8003746 <HAL_DMA_IRQHandler+0xd2>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a5d      	ldr	r2, [pc, #372]	@ (800382c <HAL_DMA_IRQHandler+0x1b8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d045      	beq.n	8003746 <HAL_DMA_IRQHandler+0xd2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a5c      	ldr	r2, [pc, #368]	@ (8003830 <HAL_DMA_IRQHandler+0x1bc>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d040      	beq.n	8003746 <HAL_DMA_IRQHandler+0xd2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003834 <HAL_DMA_IRQHandler+0x1c0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d03b      	beq.n	8003746 <HAL_DMA_IRQHandler+0xd2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a59      	ldr	r2, [pc, #356]	@ (8003838 <HAL_DMA_IRQHandler+0x1c4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d036      	beq.n	8003746 <HAL_DMA_IRQHandler+0xd2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a57      	ldr	r2, [pc, #348]	@ (800383c <HAL_DMA_IRQHandler+0x1c8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d031      	beq.n	8003746 <HAL_DMA_IRQHandler+0xd2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a56      	ldr	r2, [pc, #344]	@ (8003840 <HAL_DMA_IRQHandler+0x1cc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d02c      	beq.n	8003746 <HAL_DMA_IRQHandler+0xd2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a54      	ldr	r2, [pc, #336]	@ (8003844 <HAL_DMA_IRQHandler+0x1d0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d027      	beq.n	8003746 <HAL_DMA_IRQHandler+0xd2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a53      	ldr	r2, [pc, #332]	@ (8003848 <HAL_DMA_IRQHandler+0x1d4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d022      	beq.n	8003746 <HAL_DMA_IRQHandler+0xd2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a51      	ldr	r2, [pc, #324]	@ (800384c <HAL_DMA_IRQHandler+0x1d8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01d      	beq.n	8003746 <HAL_DMA_IRQHandler+0xd2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a50      	ldr	r2, [pc, #320]	@ (8003850 <HAL_DMA_IRQHandler+0x1dc>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d018      	beq.n	8003746 <HAL_DMA_IRQHandler+0xd2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a4e      	ldr	r2, [pc, #312]	@ (8003854 <HAL_DMA_IRQHandler+0x1e0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_DMA_IRQHandler+0xd2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a4d      	ldr	r2, [pc, #308]	@ (8003858 <HAL_DMA_IRQHandler+0x1e4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00e      	beq.n	8003746 <HAL_DMA_IRQHandler+0xd2>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a4b      	ldr	r2, [pc, #300]	@ (800385c <HAL_DMA_IRQHandler+0x1e8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_DMA_IRQHandler+0xd2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a4a      	ldr	r2, [pc, #296]	@ (8003860 <HAL_DMA_IRQHandler+0x1ec>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <HAL_DMA_IRQHandler+0xd2>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a48      	ldr	r2, [pc, #288]	@ (8003864 <HAL_DMA_IRQHandler+0x1f0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_DMA_IRQHandler+0xd6>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_DMA_IRQHandler+0xd8>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 842b 	beq.w	8003fa8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	2208      	movs	r2, #8
 800375c:	409a      	lsls	r2, r3
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	4013      	ands	r3, r2
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 80a2 	beq.w	80038ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a2e      	ldr	r2, [pc, #184]	@ (8003828 <HAL_DMA_IRQHandler+0x1b4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d04a      	beq.n	8003808 <HAL_DMA_IRQHandler+0x194>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a2d      	ldr	r2, [pc, #180]	@ (800382c <HAL_DMA_IRQHandler+0x1b8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d045      	beq.n	8003808 <HAL_DMA_IRQHandler+0x194>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a2b      	ldr	r2, [pc, #172]	@ (8003830 <HAL_DMA_IRQHandler+0x1bc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d040      	beq.n	8003808 <HAL_DMA_IRQHandler+0x194>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a2a      	ldr	r2, [pc, #168]	@ (8003834 <HAL_DMA_IRQHandler+0x1c0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d03b      	beq.n	8003808 <HAL_DMA_IRQHandler+0x194>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a28      	ldr	r2, [pc, #160]	@ (8003838 <HAL_DMA_IRQHandler+0x1c4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d036      	beq.n	8003808 <HAL_DMA_IRQHandler+0x194>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a27      	ldr	r2, [pc, #156]	@ (800383c <HAL_DMA_IRQHandler+0x1c8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d031      	beq.n	8003808 <HAL_DMA_IRQHandler+0x194>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a25      	ldr	r2, [pc, #148]	@ (8003840 <HAL_DMA_IRQHandler+0x1cc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d02c      	beq.n	8003808 <HAL_DMA_IRQHandler+0x194>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a24      	ldr	r2, [pc, #144]	@ (8003844 <HAL_DMA_IRQHandler+0x1d0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d027      	beq.n	8003808 <HAL_DMA_IRQHandler+0x194>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a22      	ldr	r2, [pc, #136]	@ (8003848 <HAL_DMA_IRQHandler+0x1d4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d022      	beq.n	8003808 <HAL_DMA_IRQHandler+0x194>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a21      	ldr	r2, [pc, #132]	@ (800384c <HAL_DMA_IRQHandler+0x1d8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d01d      	beq.n	8003808 <HAL_DMA_IRQHandler+0x194>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003850 <HAL_DMA_IRQHandler+0x1dc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d018      	beq.n	8003808 <HAL_DMA_IRQHandler+0x194>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1e      	ldr	r2, [pc, #120]	@ (8003854 <HAL_DMA_IRQHandler+0x1e0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d013      	beq.n	8003808 <HAL_DMA_IRQHandler+0x194>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003858 <HAL_DMA_IRQHandler+0x1e4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00e      	beq.n	8003808 <HAL_DMA_IRQHandler+0x194>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1b      	ldr	r2, [pc, #108]	@ (800385c <HAL_DMA_IRQHandler+0x1e8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d009      	beq.n	8003808 <HAL_DMA_IRQHandler+0x194>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a19      	ldr	r2, [pc, #100]	@ (8003860 <HAL_DMA_IRQHandler+0x1ec>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d004      	beq.n	8003808 <HAL_DMA_IRQHandler+0x194>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a18      	ldr	r2, [pc, #96]	@ (8003864 <HAL_DMA_IRQHandler+0x1f0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d12f      	bne.n	8003868 <HAL_DMA_IRQHandler+0x1f4>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	2b00      	cmp	r3, #0
 8003814:	bf14      	ite	ne
 8003816:	2301      	movne	r3, #1
 8003818:	2300      	moveq	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	e02e      	b.n	800387c <HAL_DMA_IRQHandler+0x208>
 800381e:	bf00      	nop
 8003820:	24000000 	.word	0x24000000
 8003824:	1b4e81b5 	.word	0x1b4e81b5
 8003828:	40020010 	.word	0x40020010
 800382c:	40020028 	.word	0x40020028
 8003830:	40020040 	.word	0x40020040
 8003834:	40020058 	.word	0x40020058
 8003838:	40020070 	.word	0x40020070
 800383c:	40020088 	.word	0x40020088
 8003840:	400200a0 	.word	0x400200a0
 8003844:	400200b8 	.word	0x400200b8
 8003848:	40020410 	.word	0x40020410
 800384c:	40020428 	.word	0x40020428
 8003850:	40020440 	.word	0x40020440
 8003854:	40020458 	.word	0x40020458
 8003858:	40020470 	.word	0x40020470
 800385c:	40020488 	.word	0x40020488
 8003860:	400204a0 	.word	0x400204a0
 8003864:	400204b8 	.word	0x400204b8
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	bf14      	ite	ne
 8003876:	2301      	movne	r3, #1
 8003878:	2300      	moveq	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d015      	beq.n	80038ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0204 	bic.w	r2, r2, #4
 800388e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	2208      	movs	r2, #8
 800389a:	409a      	lsls	r2, r3
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a4:	f043 0201 	orr.w	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d06e      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a69      	ldr	r2, [pc, #420]	@ (8003a6c <HAL_DMA_IRQHandler+0x3f8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d04a      	beq.n	8003962 <HAL_DMA_IRQHandler+0x2ee>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a67      	ldr	r2, [pc, #412]	@ (8003a70 <HAL_DMA_IRQHandler+0x3fc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d045      	beq.n	8003962 <HAL_DMA_IRQHandler+0x2ee>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a66      	ldr	r2, [pc, #408]	@ (8003a74 <HAL_DMA_IRQHandler+0x400>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d040      	beq.n	8003962 <HAL_DMA_IRQHandler+0x2ee>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a64      	ldr	r2, [pc, #400]	@ (8003a78 <HAL_DMA_IRQHandler+0x404>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d03b      	beq.n	8003962 <HAL_DMA_IRQHandler+0x2ee>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a63      	ldr	r2, [pc, #396]	@ (8003a7c <HAL_DMA_IRQHandler+0x408>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d036      	beq.n	8003962 <HAL_DMA_IRQHandler+0x2ee>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a61      	ldr	r2, [pc, #388]	@ (8003a80 <HAL_DMA_IRQHandler+0x40c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d031      	beq.n	8003962 <HAL_DMA_IRQHandler+0x2ee>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a60      	ldr	r2, [pc, #384]	@ (8003a84 <HAL_DMA_IRQHandler+0x410>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d02c      	beq.n	8003962 <HAL_DMA_IRQHandler+0x2ee>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a5e      	ldr	r2, [pc, #376]	@ (8003a88 <HAL_DMA_IRQHandler+0x414>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d027      	beq.n	8003962 <HAL_DMA_IRQHandler+0x2ee>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a5d      	ldr	r2, [pc, #372]	@ (8003a8c <HAL_DMA_IRQHandler+0x418>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d022      	beq.n	8003962 <HAL_DMA_IRQHandler+0x2ee>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a5b      	ldr	r2, [pc, #364]	@ (8003a90 <HAL_DMA_IRQHandler+0x41c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01d      	beq.n	8003962 <HAL_DMA_IRQHandler+0x2ee>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a5a      	ldr	r2, [pc, #360]	@ (8003a94 <HAL_DMA_IRQHandler+0x420>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d018      	beq.n	8003962 <HAL_DMA_IRQHandler+0x2ee>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a58      	ldr	r2, [pc, #352]	@ (8003a98 <HAL_DMA_IRQHandler+0x424>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d013      	beq.n	8003962 <HAL_DMA_IRQHandler+0x2ee>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a57      	ldr	r2, [pc, #348]	@ (8003a9c <HAL_DMA_IRQHandler+0x428>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00e      	beq.n	8003962 <HAL_DMA_IRQHandler+0x2ee>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a55      	ldr	r2, [pc, #340]	@ (8003aa0 <HAL_DMA_IRQHandler+0x42c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d009      	beq.n	8003962 <HAL_DMA_IRQHandler+0x2ee>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a54      	ldr	r2, [pc, #336]	@ (8003aa4 <HAL_DMA_IRQHandler+0x430>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d004      	beq.n	8003962 <HAL_DMA_IRQHandler+0x2ee>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a52      	ldr	r2, [pc, #328]	@ (8003aa8 <HAL_DMA_IRQHandler+0x434>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d10a      	bne.n	8003978 <HAL_DMA_IRQHandler+0x304>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	e003      	b.n	8003980 <HAL_DMA_IRQHandler+0x30c>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2300      	movs	r3, #0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00d      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	2201      	movs	r2, #1
 800398e:	409a      	lsls	r2, r3
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003998:	f043 0202 	orr.w	r2, r3, #2
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	2204      	movs	r2, #4
 80039aa:	409a      	lsls	r2, r3
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 808f 	beq.w	8003ad4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a2c      	ldr	r2, [pc, #176]	@ (8003a6c <HAL_DMA_IRQHandler+0x3f8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d04a      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x3e2>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003a70 <HAL_DMA_IRQHandler+0x3fc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d045      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x3e2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a29      	ldr	r2, [pc, #164]	@ (8003a74 <HAL_DMA_IRQHandler+0x400>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d040      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x3e2>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a27      	ldr	r2, [pc, #156]	@ (8003a78 <HAL_DMA_IRQHandler+0x404>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d03b      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x3e2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a26      	ldr	r2, [pc, #152]	@ (8003a7c <HAL_DMA_IRQHandler+0x408>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d036      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x3e2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a24      	ldr	r2, [pc, #144]	@ (8003a80 <HAL_DMA_IRQHandler+0x40c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d031      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x3e2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a23      	ldr	r2, [pc, #140]	@ (8003a84 <HAL_DMA_IRQHandler+0x410>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d02c      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x3e2>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a21      	ldr	r2, [pc, #132]	@ (8003a88 <HAL_DMA_IRQHandler+0x414>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d027      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x3e2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a20      	ldr	r2, [pc, #128]	@ (8003a8c <HAL_DMA_IRQHandler+0x418>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d022      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x3e2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a1e      	ldr	r2, [pc, #120]	@ (8003a90 <HAL_DMA_IRQHandler+0x41c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d01d      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x3e2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003a94 <HAL_DMA_IRQHandler+0x420>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d018      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x3e2>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a1b      	ldr	r2, [pc, #108]	@ (8003a98 <HAL_DMA_IRQHandler+0x424>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x3e2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1a      	ldr	r2, [pc, #104]	@ (8003a9c <HAL_DMA_IRQHandler+0x428>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00e      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x3e2>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a18      	ldr	r2, [pc, #96]	@ (8003aa0 <HAL_DMA_IRQHandler+0x42c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d009      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x3e2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a17      	ldr	r2, [pc, #92]	@ (8003aa4 <HAL_DMA_IRQHandler+0x430>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x3e2>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a15      	ldr	r2, [pc, #84]	@ (8003aa8 <HAL_DMA_IRQHandler+0x434>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d12a      	bne.n	8003aac <HAL_DMA_IRQHandler+0x438>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	bf14      	ite	ne
 8003a64:	2301      	movne	r3, #1
 8003a66:	2300      	moveq	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	e023      	b.n	8003ab4 <HAL_DMA_IRQHandler+0x440>
 8003a6c:	40020010 	.word	0x40020010
 8003a70:	40020028 	.word	0x40020028
 8003a74:	40020040 	.word	0x40020040
 8003a78:	40020058 	.word	0x40020058
 8003a7c:	40020070 	.word	0x40020070
 8003a80:	40020088 	.word	0x40020088
 8003a84:	400200a0 	.word	0x400200a0
 8003a88:	400200b8 	.word	0x400200b8
 8003a8c:	40020410 	.word	0x40020410
 8003a90:	40020428 	.word	0x40020428
 8003a94:	40020440 	.word	0x40020440
 8003a98:	40020458 	.word	0x40020458
 8003a9c:	40020470 	.word	0x40020470
 8003aa0:	40020488 	.word	0x40020488
 8003aa4:	400204a0 	.word	0x400204a0
 8003aa8:	400204b8 	.word	0x400204b8
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00d      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003acc:	f043 0204 	orr.w	r2, r3, #4
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	2210      	movs	r2, #16
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80a6 	beq.w	8003c36 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a85      	ldr	r2, [pc, #532]	@ (8003d04 <HAL_DMA_IRQHandler+0x690>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d04a      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x516>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a83      	ldr	r2, [pc, #524]	@ (8003d08 <HAL_DMA_IRQHandler+0x694>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d045      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x516>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a82      	ldr	r2, [pc, #520]	@ (8003d0c <HAL_DMA_IRQHandler+0x698>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d040      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x516>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a80      	ldr	r2, [pc, #512]	@ (8003d10 <HAL_DMA_IRQHandler+0x69c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d03b      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x516>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a7f      	ldr	r2, [pc, #508]	@ (8003d14 <HAL_DMA_IRQHandler+0x6a0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d036      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x516>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a7d      	ldr	r2, [pc, #500]	@ (8003d18 <HAL_DMA_IRQHandler+0x6a4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d031      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x516>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d1c <HAL_DMA_IRQHandler+0x6a8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d02c      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x516>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a7a      	ldr	r2, [pc, #488]	@ (8003d20 <HAL_DMA_IRQHandler+0x6ac>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d027      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x516>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a79      	ldr	r2, [pc, #484]	@ (8003d24 <HAL_DMA_IRQHandler+0x6b0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d022      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x516>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a77      	ldr	r2, [pc, #476]	@ (8003d28 <HAL_DMA_IRQHandler+0x6b4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01d      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x516>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a76      	ldr	r2, [pc, #472]	@ (8003d2c <HAL_DMA_IRQHandler+0x6b8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d018      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x516>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a74      	ldr	r2, [pc, #464]	@ (8003d30 <HAL_DMA_IRQHandler+0x6bc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x516>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a73      	ldr	r2, [pc, #460]	@ (8003d34 <HAL_DMA_IRQHandler+0x6c0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00e      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x516>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a71      	ldr	r2, [pc, #452]	@ (8003d38 <HAL_DMA_IRQHandler+0x6c4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d009      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x516>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a70      	ldr	r2, [pc, #448]	@ (8003d3c <HAL_DMA_IRQHandler+0x6c8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d004      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x516>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a6e      	ldr	r2, [pc, #440]	@ (8003d40 <HAL_DMA_IRQHandler+0x6cc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d10a      	bne.n	8003ba0 <HAL_DMA_IRQHandler+0x52c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	bf14      	ite	ne
 8003b98:	2301      	movne	r3, #1
 8003b9a:	2300      	moveq	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	e009      	b.n	8003bb4 <HAL_DMA_IRQHandler+0x540>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	bf14      	ite	ne
 8003bae:	2301      	movne	r3, #1
 8003bb0:	2300      	moveq	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d03e      	beq.n	8003c36 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d018      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d108      	bne.n	8003bf6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d024      	beq.n	8003c36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	4798      	blx	r3
 8003bf4:	e01f      	b.n	8003c36 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d01b      	beq.n	8003c36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	4798      	blx	r3
 8003c06:	e016      	b.n	8003c36 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d107      	bne.n	8003c26 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0208 	bic.w	r2, r2, #8
 8003c24:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3a:	f003 031f 	and.w	r3, r3, #31
 8003c3e:	2220      	movs	r2, #32
 8003c40:	409a      	lsls	r2, r3
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	4013      	ands	r3, r2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 8110 	beq.w	8003e6c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2c      	ldr	r2, [pc, #176]	@ (8003d04 <HAL_DMA_IRQHandler+0x690>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d04a      	beq.n	8003cec <HAL_DMA_IRQHandler+0x678>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a2b      	ldr	r2, [pc, #172]	@ (8003d08 <HAL_DMA_IRQHandler+0x694>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d045      	beq.n	8003cec <HAL_DMA_IRQHandler+0x678>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a29      	ldr	r2, [pc, #164]	@ (8003d0c <HAL_DMA_IRQHandler+0x698>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d040      	beq.n	8003cec <HAL_DMA_IRQHandler+0x678>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a28      	ldr	r2, [pc, #160]	@ (8003d10 <HAL_DMA_IRQHandler+0x69c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d03b      	beq.n	8003cec <HAL_DMA_IRQHandler+0x678>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a26      	ldr	r2, [pc, #152]	@ (8003d14 <HAL_DMA_IRQHandler+0x6a0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d036      	beq.n	8003cec <HAL_DMA_IRQHandler+0x678>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a25      	ldr	r2, [pc, #148]	@ (8003d18 <HAL_DMA_IRQHandler+0x6a4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d031      	beq.n	8003cec <HAL_DMA_IRQHandler+0x678>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a23      	ldr	r2, [pc, #140]	@ (8003d1c <HAL_DMA_IRQHandler+0x6a8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d02c      	beq.n	8003cec <HAL_DMA_IRQHandler+0x678>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a22      	ldr	r2, [pc, #136]	@ (8003d20 <HAL_DMA_IRQHandler+0x6ac>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d027      	beq.n	8003cec <HAL_DMA_IRQHandler+0x678>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a20      	ldr	r2, [pc, #128]	@ (8003d24 <HAL_DMA_IRQHandler+0x6b0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d022      	beq.n	8003cec <HAL_DMA_IRQHandler+0x678>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a1f      	ldr	r2, [pc, #124]	@ (8003d28 <HAL_DMA_IRQHandler+0x6b4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d01d      	beq.n	8003cec <HAL_DMA_IRQHandler+0x678>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d2c <HAL_DMA_IRQHandler+0x6b8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d018      	beq.n	8003cec <HAL_DMA_IRQHandler+0x678>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8003d30 <HAL_DMA_IRQHandler+0x6bc>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d013      	beq.n	8003cec <HAL_DMA_IRQHandler+0x678>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8003d34 <HAL_DMA_IRQHandler+0x6c0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00e      	beq.n	8003cec <HAL_DMA_IRQHandler+0x678>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a19      	ldr	r2, [pc, #100]	@ (8003d38 <HAL_DMA_IRQHandler+0x6c4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d009      	beq.n	8003cec <HAL_DMA_IRQHandler+0x678>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a17      	ldr	r2, [pc, #92]	@ (8003d3c <HAL_DMA_IRQHandler+0x6c8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d004      	beq.n	8003cec <HAL_DMA_IRQHandler+0x678>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a16      	ldr	r2, [pc, #88]	@ (8003d40 <HAL_DMA_IRQHandler+0x6cc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d12b      	bne.n	8003d44 <HAL_DMA_IRQHandler+0x6d0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	bf14      	ite	ne
 8003cfa:	2301      	movne	r3, #1
 8003cfc:	2300      	moveq	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	e02a      	b.n	8003d58 <HAL_DMA_IRQHandler+0x6e4>
 8003d02:	bf00      	nop
 8003d04:	40020010 	.word	0x40020010
 8003d08:	40020028 	.word	0x40020028
 8003d0c:	40020040 	.word	0x40020040
 8003d10:	40020058 	.word	0x40020058
 8003d14:	40020070 	.word	0x40020070
 8003d18:	40020088 	.word	0x40020088
 8003d1c:	400200a0 	.word	0x400200a0
 8003d20:	400200b8 	.word	0x400200b8
 8003d24:	40020410 	.word	0x40020410
 8003d28:	40020428 	.word	0x40020428
 8003d2c:	40020440 	.word	0x40020440
 8003d30:	40020458 	.word	0x40020458
 8003d34:	40020470 	.word	0x40020470
 8003d38:	40020488 	.word	0x40020488
 8003d3c:	400204a0 	.word	0x400204a0
 8003d40:	400204b8 	.word	0x400204b8
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	bf14      	ite	ne
 8003d52:	2301      	movne	r3, #1
 8003d54:	2300      	moveq	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8087 	beq.w	8003e6c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	2220      	movs	r2, #32
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d139      	bne.n	8003dee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0216 	bic.w	r2, r2, #22
 8003d88:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d98:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d103      	bne.n	8003daa <HAL_DMA_IRQHandler+0x736>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0208 	bic.w	r2, r2, #8
 8003db8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	223f      	movs	r2, #63	@ 0x3f
 8003dc4:	409a      	lsls	r2, r3
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 8382 	beq.w	80044e8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	4798      	blx	r3
          }
          return;
 8003dec:	e37c      	b.n	80044e8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d018      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d108      	bne.n	8003e1c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d02c      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	4798      	blx	r3
 8003e1a:	e027      	b.n	8003e6c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d023      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	4798      	blx	r3
 8003e2c:	e01e      	b.n	8003e6c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10f      	bne.n	8003e5c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0210 	bic.w	r2, r2, #16
 8003e4a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 833e 	beq.w	80044f2 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8088 	beq.w	8003f94 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2204      	movs	r2, #4
 8003e88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a89      	ldr	r2, [pc, #548]	@ (80040b8 <HAL_DMA_IRQHandler+0xa44>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d04a      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x8b8>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a88      	ldr	r2, [pc, #544]	@ (80040bc <HAL_DMA_IRQHandler+0xa48>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d045      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x8b8>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a86      	ldr	r2, [pc, #536]	@ (80040c0 <HAL_DMA_IRQHandler+0xa4c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d040      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x8b8>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a85      	ldr	r2, [pc, #532]	@ (80040c4 <HAL_DMA_IRQHandler+0xa50>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d03b      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x8b8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a83      	ldr	r2, [pc, #524]	@ (80040c8 <HAL_DMA_IRQHandler+0xa54>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d036      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x8b8>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a82      	ldr	r2, [pc, #520]	@ (80040cc <HAL_DMA_IRQHandler+0xa58>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d031      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x8b8>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a80      	ldr	r2, [pc, #512]	@ (80040d0 <HAL_DMA_IRQHandler+0xa5c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d02c      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x8b8>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a7f      	ldr	r2, [pc, #508]	@ (80040d4 <HAL_DMA_IRQHandler+0xa60>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d027      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x8b8>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a7d      	ldr	r2, [pc, #500]	@ (80040d8 <HAL_DMA_IRQHandler+0xa64>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d022      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x8b8>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a7c      	ldr	r2, [pc, #496]	@ (80040dc <HAL_DMA_IRQHandler+0xa68>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d01d      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x8b8>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a7a      	ldr	r2, [pc, #488]	@ (80040e0 <HAL_DMA_IRQHandler+0xa6c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d018      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x8b8>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a79      	ldr	r2, [pc, #484]	@ (80040e4 <HAL_DMA_IRQHandler+0xa70>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d013      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x8b8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a77      	ldr	r2, [pc, #476]	@ (80040e8 <HAL_DMA_IRQHandler+0xa74>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00e      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x8b8>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a76      	ldr	r2, [pc, #472]	@ (80040ec <HAL_DMA_IRQHandler+0xa78>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d009      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x8b8>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a74      	ldr	r2, [pc, #464]	@ (80040f0 <HAL_DMA_IRQHandler+0xa7c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d004      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x8b8>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a73      	ldr	r2, [pc, #460]	@ (80040f4 <HAL_DMA_IRQHandler+0xa80>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d108      	bne.n	8003f3e <HAL_DMA_IRQHandler+0x8ca>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0201 	bic.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	e007      	b.n	8003f4e <HAL_DMA_IRQHandler+0x8da>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0201 	bic.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3301      	adds	r3, #1
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d307      	bcc.n	8003f6a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f2      	bne.n	8003f4e <HAL_DMA_IRQHandler+0x8da>
 8003f68:	e000      	b.n	8003f6c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003f6a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003f82:	e003      	b.n	8003f8c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 82aa 	beq.w	80044f2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	4798      	blx	r3
 8003fa6:	e2a4      	b.n	80044f2 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a52      	ldr	r2, [pc, #328]	@ (80040f8 <HAL_DMA_IRQHandler+0xa84>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d04a      	beq.n	8004048 <HAL_DMA_IRQHandler+0x9d4>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a51      	ldr	r2, [pc, #324]	@ (80040fc <HAL_DMA_IRQHandler+0xa88>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d045      	beq.n	8004048 <HAL_DMA_IRQHandler+0x9d4>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a4f      	ldr	r2, [pc, #316]	@ (8004100 <HAL_DMA_IRQHandler+0xa8c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d040      	beq.n	8004048 <HAL_DMA_IRQHandler+0x9d4>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a4e      	ldr	r2, [pc, #312]	@ (8004104 <HAL_DMA_IRQHandler+0xa90>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d03b      	beq.n	8004048 <HAL_DMA_IRQHandler+0x9d4>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a4c      	ldr	r2, [pc, #304]	@ (8004108 <HAL_DMA_IRQHandler+0xa94>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d036      	beq.n	8004048 <HAL_DMA_IRQHandler+0x9d4>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a4b      	ldr	r2, [pc, #300]	@ (800410c <HAL_DMA_IRQHandler+0xa98>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d031      	beq.n	8004048 <HAL_DMA_IRQHandler+0x9d4>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a49      	ldr	r2, [pc, #292]	@ (8004110 <HAL_DMA_IRQHandler+0xa9c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d02c      	beq.n	8004048 <HAL_DMA_IRQHandler+0x9d4>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a48      	ldr	r2, [pc, #288]	@ (8004114 <HAL_DMA_IRQHandler+0xaa0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d027      	beq.n	8004048 <HAL_DMA_IRQHandler+0x9d4>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a46      	ldr	r2, [pc, #280]	@ (8004118 <HAL_DMA_IRQHandler+0xaa4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d022      	beq.n	8004048 <HAL_DMA_IRQHandler+0x9d4>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a45      	ldr	r2, [pc, #276]	@ (800411c <HAL_DMA_IRQHandler+0xaa8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d01d      	beq.n	8004048 <HAL_DMA_IRQHandler+0x9d4>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a43      	ldr	r2, [pc, #268]	@ (8004120 <HAL_DMA_IRQHandler+0xaac>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d018      	beq.n	8004048 <HAL_DMA_IRQHandler+0x9d4>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a42      	ldr	r2, [pc, #264]	@ (8004124 <HAL_DMA_IRQHandler+0xab0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d013      	beq.n	8004048 <HAL_DMA_IRQHandler+0x9d4>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a40      	ldr	r2, [pc, #256]	@ (8004128 <HAL_DMA_IRQHandler+0xab4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00e      	beq.n	8004048 <HAL_DMA_IRQHandler+0x9d4>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a3f      	ldr	r2, [pc, #252]	@ (800412c <HAL_DMA_IRQHandler+0xab8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d009      	beq.n	8004048 <HAL_DMA_IRQHandler+0x9d4>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a3d      	ldr	r2, [pc, #244]	@ (8004130 <HAL_DMA_IRQHandler+0xabc>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <HAL_DMA_IRQHandler+0x9d4>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a3c      	ldr	r2, [pc, #240]	@ (8004134 <HAL_DMA_IRQHandler+0xac0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d101      	bne.n	800404c <HAL_DMA_IRQHandler+0x9d8>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_DMA_IRQHandler+0x9da>
 800404c:	2300      	movs	r3, #0
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 824f 	beq.w	80044f2 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004060:	f003 031f 	and.w	r3, r3, #31
 8004064:	2204      	movs	r2, #4
 8004066:	409a      	lsls	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 80dd 	beq.w	800422c <HAL_DMA_IRQHandler+0xbb8>
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 80d7 	beq.w	800422c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004082:	f003 031f 	and.w	r3, r3, #31
 8004086:	2204      	movs	r2, #4
 8004088:	409a      	lsls	r2, r3
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d059      	beq.n	800414c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d14a      	bne.n	8004138 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8220 	beq.w	80044ec <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040b4:	e21a      	b.n	80044ec <HAL_DMA_IRQHandler+0xe78>
 80040b6:	bf00      	nop
 80040b8:	40020010 	.word	0x40020010
 80040bc:	40020028 	.word	0x40020028
 80040c0:	40020040 	.word	0x40020040
 80040c4:	40020058 	.word	0x40020058
 80040c8:	40020070 	.word	0x40020070
 80040cc:	40020088 	.word	0x40020088
 80040d0:	400200a0 	.word	0x400200a0
 80040d4:	400200b8 	.word	0x400200b8
 80040d8:	40020410 	.word	0x40020410
 80040dc:	40020428 	.word	0x40020428
 80040e0:	40020440 	.word	0x40020440
 80040e4:	40020458 	.word	0x40020458
 80040e8:	40020470 	.word	0x40020470
 80040ec:	40020488 	.word	0x40020488
 80040f0:	400204a0 	.word	0x400204a0
 80040f4:	400204b8 	.word	0x400204b8
 80040f8:	48022c08 	.word	0x48022c08
 80040fc:	48022c1c 	.word	0x48022c1c
 8004100:	48022c30 	.word	0x48022c30
 8004104:	48022c44 	.word	0x48022c44
 8004108:	48022c58 	.word	0x48022c58
 800410c:	48022c6c 	.word	0x48022c6c
 8004110:	48022c80 	.word	0x48022c80
 8004114:	48022c94 	.word	0x48022c94
 8004118:	58025408 	.word	0x58025408
 800411c:	5802541c 	.word	0x5802541c
 8004120:	58025430 	.word	0x58025430
 8004124:	58025444 	.word	0x58025444
 8004128:	58025458 	.word	0x58025458
 800412c:	5802546c 	.word	0x5802546c
 8004130:	58025480 	.word	0x58025480
 8004134:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 81d5 	beq.w	80044ec <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800414a:	e1cf      	b.n	80044ec <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	d160      	bne.n	8004218 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a7f      	ldr	r2, [pc, #508]	@ (8004358 <HAL_DMA_IRQHandler+0xce4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d04a      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xb82>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a7d      	ldr	r2, [pc, #500]	@ (800435c <HAL_DMA_IRQHandler+0xce8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d045      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xb82>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a7c      	ldr	r2, [pc, #496]	@ (8004360 <HAL_DMA_IRQHandler+0xcec>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d040      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xb82>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a7a      	ldr	r2, [pc, #488]	@ (8004364 <HAL_DMA_IRQHandler+0xcf0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d03b      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xb82>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a79      	ldr	r2, [pc, #484]	@ (8004368 <HAL_DMA_IRQHandler+0xcf4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d036      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xb82>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a77      	ldr	r2, [pc, #476]	@ (800436c <HAL_DMA_IRQHandler+0xcf8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d031      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xb82>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a76      	ldr	r2, [pc, #472]	@ (8004370 <HAL_DMA_IRQHandler+0xcfc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d02c      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xb82>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a74      	ldr	r2, [pc, #464]	@ (8004374 <HAL_DMA_IRQHandler+0xd00>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d027      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xb82>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a73      	ldr	r2, [pc, #460]	@ (8004378 <HAL_DMA_IRQHandler+0xd04>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d022      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xb82>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a71      	ldr	r2, [pc, #452]	@ (800437c <HAL_DMA_IRQHandler+0xd08>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d01d      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xb82>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a70      	ldr	r2, [pc, #448]	@ (8004380 <HAL_DMA_IRQHandler+0xd0c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d018      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xb82>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a6e      	ldr	r2, [pc, #440]	@ (8004384 <HAL_DMA_IRQHandler+0xd10>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d013      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xb82>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a6d      	ldr	r2, [pc, #436]	@ (8004388 <HAL_DMA_IRQHandler+0xd14>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d00e      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xb82>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a6b      	ldr	r2, [pc, #428]	@ (800438c <HAL_DMA_IRQHandler+0xd18>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d009      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xb82>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a6a      	ldr	r2, [pc, #424]	@ (8004390 <HAL_DMA_IRQHandler+0xd1c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d004      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xb82>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a68      	ldr	r2, [pc, #416]	@ (8004394 <HAL_DMA_IRQHandler+0xd20>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d108      	bne.n	8004208 <HAL_DMA_IRQHandler+0xb94>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0208 	bic.w	r2, r2, #8
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	e007      	b.n	8004218 <HAL_DMA_IRQHandler+0xba4>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0204 	bic.w	r2, r2, #4
 8004216:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8165 	beq.w	80044ec <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800422a:	e15f      	b.n	80044ec <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004230:	f003 031f 	and.w	r3, r3, #31
 8004234:	2202      	movs	r2, #2
 8004236:	409a      	lsls	r2, r3
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4013      	ands	r3, r2
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 80c5 	beq.w	80043cc <HAL_DMA_IRQHandler+0xd58>
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80bf 	beq.w	80043cc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2202      	movs	r2, #2
 8004258:	409a      	lsls	r2, r3
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d018      	beq.n	800429a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 813a 	beq.w	80044f0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004284:	e134      	b.n	80044f0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 8130 	beq.w	80044f0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004298:	e12a      	b.n	80044f0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f040 8089 	bne.w	80043b8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a2b      	ldr	r2, [pc, #172]	@ (8004358 <HAL_DMA_IRQHandler+0xce4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d04a      	beq.n	8004346 <HAL_DMA_IRQHandler+0xcd2>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a29      	ldr	r2, [pc, #164]	@ (800435c <HAL_DMA_IRQHandler+0xce8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d045      	beq.n	8004346 <HAL_DMA_IRQHandler+0xcd2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a28      	ldr	r2, [pc, #160]	@ (8004360 <HAL_DMA_IRQHandler+0xcec>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d040      	beq.n	8004346 <HAL_DMA_IRQHandler+0xcd2>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a26      	ldr	r2, [pc, #152]	@ (8004364 <HAL_DMA_IRQHandler+0xcf0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d03b      	beq.n	8004346 <HAL_DMA_IRQHandler+0xcd2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a25      	ldr	r2, [pc, #148]	@ (8004368 <HAL_DMA_IRQHandler+0xcf4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d036      	beq.n	8004346 <HAL_DMA_IRQHandler+0xcd2>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a23      	ldr	r2, [pc, #140]	@ (800436c <HAL_DMA_IRQHandler+0xcf8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d031      	beq.n	8004346 <HAL_DMA_IRQHandler+0xcd2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a22      	ldr	r2, [pc, #136]	@ (8004370 <HAL_DMA_IRQHandler+0xcfc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d02c      	beq.n	8004346 <HAL_DMA_IRQHandler+0xcd2>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a20      	ldr	r2, [pc, #128]	@ (8004374 <HAL_DMA_IRQHandler+0xd00>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d027      	beq.n	8004346 <HAL_DMA_IRQHandler+0xcd2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004378 <HAL_DMA_IRQHandler+0xd04>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d022      	beq.n	8004346 <HAL_DMA_IRQHandler+0xcd2>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1d      	ldr	r2, [pc, #116]	@ (800437c <HAL_DMA_IRQHandler+0xd08>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d01d      	beq.n	8004346 <HAL_DMA_IRQHandler+0xcd2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1c      	ldr	r2, [pc, #112]	@ (8004380 <HAL_DMA_IRQHandler+0xd0c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d018      	beq.n	8004346 <HAL_DMA_IRQHandler+0xcd2>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1a      	ldr	r2, [pc, #104]	@ (8004384 <HAL_DMA_IRQHandler+0xd10>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d013      	beq.n	8004346 <HAL_DMA_IRQHandler+0xcd2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a19      	ldr	r2, [pc, #100]	@ (8004388 <HAL_DMA_IRQHandler+0xd14>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00e      	beq.n	8004346 <HAL_DMA_IRQHandler+0xcd2>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a17      	ldr	r2, [pc, #92]	@ (800438c <HAL_DMA_IRQHandler+0xd18>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d009      	beq.n	8004346 <HAL_DMA_IRQHandler+0xcd2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a16      	ldr	r2, [pc, #88]	@ (8004390 <HAL_DMA_IRQHandler+0xd1c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_DMA_IRQHandler+0xcd2>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a14      	ldr	r2, [pc, #80]	@ (8004394 <HAL_DMA_IRQHandler+0xd20>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d128      	bne.n	8004398 <HAL_DMA_IRQHandler+0xd24>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0214 	bic.w	r2, r2, #20
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	e027      	b.n	80043a8 <HAL_DMA_IRQHandler+0xd34>
 8004358:	40020010 	.word	0x40020010
 800435c:	40020028 	.word	0x40020028
 8004360:	40020040 	.word	0x40020040
 8004364:	40020058 	.word	0x40020058
 8004368:	40020070 	.word	0x40020070
 800436c:	40020088 	.word	0x40020088
 8004370:	400200a0 	.word	0x400200a0
 8004374:	400200b8 	.word	0x400200b8
 8004378:	40020410 	.word	0x40020410
 800437c:	40020428 	.word	0x40020428
 8004380:	40020440 	.word	0x40020440
 8004384:	40020458 	.word	0x40020458
 8004388:	40020470 	.word	0x40020470
 800438c:	40020488 	.word	0x40020488
 8004390:	400204a0 	.word	0x400204a0
 8004394:	400204b8 	.word	0x400204b8
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 020a 	bic.w	r2, r2, #10
 80043a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8097 	beq.w	80044f0 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043ca:	e091      	b.n	80044f0 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d0:	f003 031f 	and.w	r3, r3, #31
 80043d4:	2208      	movs	r2, #8
 80043d6:	409a      	lsls	r2, r3
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	4013      	ands	r3, r2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 8088 	beq.w	80044f2 <HAL_DMA_IRQHandler+0xe7e>
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8082 	beq.w	80044f2 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a41      	ldr	r2, [pc, #260]	@ (80044f8 <HAL_DMA_IRQHandler+0xe84>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d04a      	beq.n	800448e <HAL_DMA_IRQHandler+0xe1a>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a3f      	ldr	r2, [pc, #252]	@ (80044fc <HAL_DMA_IRQHandler+0xe88>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d045      	beq.n	800448e <HAL_DMA_IRQHandler+0xe1a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a3e      	ldr	r2, [pc, #248]	@ (8004500 <HAL_DMA_IRQHandler+0xe8c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d040      	beq.n	800448e <HAL_DMA_IRQHandler+0xe1a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a3c      	ldr	r2, [pc, #240]	@ (8004504 <HAL_DMA_IRQHandler+0xe90>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d03b      	beq.n	800448e <HAL_DMA_IRQHandler+0xe1a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a3b      	ldr	r2, [pc, #236]	@ (8004508 <HAL_DMA_IRQHandler+0xe94>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d036      	beq.n	800448e <HAL_DMA_IRQHandler+0xe1a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a39      	ldr	r2, [pc, #228]	@ (800450c <HAL_DMA_IRQHandler+0xe98>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d031      	beq.n	800448e <HAL_DMA_IRQHandler+0xe1a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a38      	ldr	r2, [pc, #224]	@ (8004510 <HAL_DMA_IRQHandler+0xe9c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d02c      	beq.n	800448e <HAL_DMA_IRQHandler+0xe1a>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a36      	ldr	r2, [pc, #216]	@ (8004514 <HAL_DMA_IRQHandler+0xea0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d027      	beq.n	800448e <HAL_DMA_IRQHandler+0xe1a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a35      	ldr	r2, [pc, #212]	@ (8004518 <HAL_DMA_IRQHandler+0xea4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d022      	beq.n	800448e <HAL_DMA_IRQHandler+0xe1a>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a33      	ldr	r2, [pc, #204]	@ (800451c <HAL_DMA_IRQHandler+0xea8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01d      	beq.n	800448e <HAL_DMA_IRQHandler+0xe1a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a32      	ldr	r2, [pc, #200]	@ (8004520 <HAL_DMA_IRQHandler+0xeac>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d018      	beq.n	800448e <HAL_DMA_IRQHandler+0xe1a>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a30      	ldr	r2, [pc, #192]	@ (8004524 <HAL_DMA_IRQHandler+0xeb0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d013      	beq.n	800448e <HAL_DMA_IRQHandler+0xe1a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a2f      	ldr	r2, [pc, #188]	@ (8004528 <HAL_DMA_IRQHandler+0xeb4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00e      	beq.n	800448e <HAL_DMA_IRQHandler+0xe1a>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a2d      	ldr	r2, [pc, #180]	@ (800452c <HAL_DMA_IRQHandler+0xeb8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d009      	beq.n	800448e <HAL_DMA_IRQHandler+0xe1a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a2c      	ldr	r2, [pc, #176]	@ (8004530 <HAL_DMA_IRQHandler+0xebc>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d004      	beq.n	800448e <HAL_DMA_IRQHandler+0xe1a>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a2a      	ldr	r2, [pc, #168]	@ (8004534 <HAL_DMA_IRQHandler+0xec0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d108      	bne.n	80044a0 <HAL_DMA_IRQHandler+0xe2c>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 021c 	bic.w	r2, r2, #28
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e007      	b.n	80044b0 <HAL_DMA_IRQHandler+0xe3c>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 020e 	bic.w	r2, r2, #14
 80044ae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b4:	f003 031f 	and.w	r3, r3, #31
 80044b8:	2201      	movs	r2, #1
 80044ba:	409a      	lsls	r2, r3
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d009      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	4798      	blx	r3
 80044e6:	e004      	b.n	80044f2 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80044e8:	bf00      	nop
 80044ea:	e002      	b.n	80044f2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044ec:	bf00      	nop
 80044ee:	e000      	b.n	80044f2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044f0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80044f2:	3728      	adds	r7, #40	@ 0x28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40020010 	.word	0x40020010
 80044fc:	40020028 	.word	0x40020028
 8004500:	40020040 	.word	0x40020040
 8004504:	40020058 	.word	0x40020058
 8004508:	40020070 	.word	0x40020070
 800450c:	40020088 	.word	0x40020088
 8004510:	400200a0 	.word	0x400200a0
 8004514:	400200b8 	.word	0x400200b8
 8004518:	40020410 	.word	0x40020410
 800451c:	40020428 	.word	0x40020428
 8004520:	40020440 	.word	0x40020440
 8004524:	40020458 	.word	0x40020458
 8004528:	40020470 	.word	0x40020470
 800452c:	40020488 	.word	0x40020488
 8004530:	400204a0 	.word	0x400204a0
 8004534:	400204b8 	.word	0x400204b8

08004538 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004562:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004568:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a7f      	ldr	r2, [pc, #508]	@ (800476c <DMA_SetConfig+0x21c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d072      	beq.n	800465a <DMA_SetConfig+0x10a>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a7d      	ldr	r2, [pc, #500]	@ (8004770 <DMA_SetConfig+0x220>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d06d      	beq.n	800465a <DMA_SetConfig+0x10a>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a7c      	ldr	r2, [pc, #496]	@ (8004774 <DMA_SetConfig+0x224>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d068      	beq.n	800465a <DMA_SetConfig+0x10a>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a7a      	ldr	r2, [pc, #488]	@ (8004778 <DMA_SetConfig+0x228>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d063      	beq.n	800465a <DMA_SetConfig+0x10a>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a79      	ldr	r2, [pc, #484]	@ (800477c <DMA_SetConfig+0x22c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d05e      	beq.n	800465a <DMA_SetConfig+0x10a>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a77      	ldr	r2, [pc, #476]	@ (8004780 <DMA_SetConfig+0x230>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d059      	beq.n	800465a <DMA_SetConfig+0x10a>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a76      	ldr	r2, [pc, #472]	@ (8004784 <DMA_SetConfig+0x234>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d054      	beq.n	800465a <DMA_SetConfig+0x10a>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a74      	ldr	r2, [pc, #464]	@ (8004788 <DMA_SetConfig+0x238>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d04f      	beq.n	800465a <DMA_SetConfig+0x10a>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a73      	ldr	r2, [pc, #460]	@ (800478c <DMA_SetConfig+0x23c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d04a      	beq.n	800465a <DMA_SetConfig+0x10a>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a71      	ldr	r2, [pc, #452]	@ (8004790 <DMA_SetConfig+0x240>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d045      	beq.n	800465a <DMA_SetConfig+0x10a>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a70      	ldr	r2, [pc, #448]	@ (8004794 <DMA_SetConfig+0x244>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d040      	beq.n	800465a <DMA_SetConfig+0x10a>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a6e      	ldr	r2, [pc, #440]	@ (8004798 <DMA_SetConfig+0x248>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d03b      	beq.n	800465a <DMA_SetConfig+0x10a>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a6d      	ldr	r2, [pc, #436]	@ (800479c <DMA_SetConfig+0x24c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d036      	beq.n	800465a <DMA_SetConfig+0x10a>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a6b      	ldr	r2, [pc, #428]	@ (80047a0 <DMA_SetConfig+0x250>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d031      	beq.n	800465a <DMA_SetConfig+0x10a>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a6a      	ldr	r2, [pc, #424]	@ (80047a4 <DMA_SetConfig+0x254>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d02c      	beq.n	800465a <DMA_SetConfig+0x10a>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a68      	ldr	r2, [pc, #416]	@ (80047a8 <DMA_SetConfig+0x258>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d027      	beq.n	800465a <DMA_SetConfig+0x10a>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a67      	ldr	r2, [pc, #412]	@ (80047ac <DMA_SetConfig+0x25c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d022      	beq.n	800465a <DMA_SetConfig+0x10a>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a65      	ldr	r2, [pc, #404]	@ (80047b0 <DMA_SetConfig+0x260>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d01d      	beq.n	800465a <DMA_SetConfig+0x10a>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a64      	ldr	r2, [pc, #400]	@ (80047b4 <DMA_SetConfig+0x264>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d018      	beq.n	800465a <DMA_SetConfig+0x10a>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a62      	ldr	r2, [pc, #392]	@ (80047b8 <DMA_SetConfig+0x268>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d013      	beq.n	800465a <DMA_SetConfig+0x10a>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a61      	ldr	r2, [pc, #388]	@ (80047bc <DMA_SetConfig+0x26c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00e      	beq.n	800465a <DMA_SetConfig+0x10a>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a5f      	ldr	r2, [pc, #380]	@ (80047c0 <DMA_SetConfig+0x270>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d009      	beq.n	800465a <DMA_SetConfig+0x10a>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a5e      	ldr	r2, [pc, #376]	@ (80047c4 <DMA_SetConfig+0x274>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d004      	beq.n	800465a <DMA_SetConfig+0x10a>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a5c      	ldr	r2, [pc, #368]	@ (80047c8 <DMA_SetConfig+0x278>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d101      	bne.n	800465e <DMA_SetConfig+0x10e>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <DMA_SetConfig+0x110>
 800465e:	2300      	movs	r3, #0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00d      	beq.n	8004680 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800466c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d004      	beq.n	8004680 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800467e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a39      	ldr	r2, [pc, #228]	@ (800476c <DMA_SetConfig+0x21c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d04a      	beq.n	8004720 <DMA_SetConfig+0x1d0>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a38      	ldr	r2, [pc, #224]	@ (8004770 <DMA_SetConfig+0x220>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d045      	beq.n	8004720 <DMA_SetConfig+0x1d0>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a36      	ldr	r2, [pc, #216]	@ (8004774 <DMA_SetConfig+0x224>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d040      	beq.n	8004720 <DMA_SetConfig+0x1d0>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a35      	ldr	r2, [pc, #212]	@ (8004778 <DMA_SetConfig+0x228>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d03b      	beq.n	8004720 <DMA_SetConfig+0x1d0>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a33      	ldr	r2, [pc, #204]	@ (800477c <DMA_SetConfig+0x22c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d036      	beq.n	8004720 <DMA_SetConfig+0x1d0>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a32      	ldr	r2, [pc, #200]	@ (8004780 <DMA_SetConfig+0x230>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d031      	beq.n	8004720 <DMA_SetConfig+0x1d0>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a30      	ldr	r2, [pc, #192]	@ (8004784 <DMA_SetConfig+0x234>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d02c      	beq.n	8004720 <DMA_SetConfig+0x1d0>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a2f      	ldr	r2, [pc, #188]	@ (8004788 <DMA_SetConfig+0x238>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d027      	beq.n	8004720 <DMA_SetConfig+0x1d0>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a2d      	ldr	r2, [pc, #180]	@ (800478c <DMA_SetConfig+0x23c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d022      	beq.n	8004720 <DMA_SetConfig+0x1d0>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a2c      	ldr	r2, [pc, #176]	@ (8004790 <DMA_SetConfig+0x240>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d01d      	beq.n	8004720 <DMA_SetConfig+0x1d0>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004794 <DMA_SetConfig+0x244>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d018      	beq.n	8004720 <DMA_SetConfig+0x1d0>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a29      	ldr	r2, [pc, #164]	@ (8004798 <DMA_SetConfig+0x248>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d013      	beq.n	8004720 <DMA_SetConfig+0x1d0>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a27      	ldr	r2, [pc, #156]	@ (800479c <DMA_SetConfig+0x24c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00e      	beq.n	8004720 <DMA_SetConfig+0x1d0>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a26      	ldr	r2, [pc, #152]	@ (80047a0 <DMA_SetConfig+0x250>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d009      	beq.n	8004720 <DMA_SetConfig+0x1d0>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a24      	ldr	r2, [pc, #144]	@ (80047a4 <DMA_SetConfig+0x254>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d004      	beq.n	8004720 <DMA_SetConfig+0x1d0>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a23      	ldr	r2, [pc, #140]	@ (80047a8 <DMA_SetConfig+0x258>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d101      	bne.n	8004724 <DMA_SetConfig+0x1d4>
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <DMA_SetConfig+0x1d6>
 8004724:	2300      	movs	r3, #0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d059      	beq.n	80047de <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	223f      	movs	r2, #63	@ 0x3f
 8004734:	409a      	lsls	r2, r3
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004748:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	2b40      	cmp	r3, #64	@ 0x40
 8004758:	d138      	bne.n	80047cc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800476a:	e0ae      	b.n	80048ca <DMA_SetConfig+0x37a>
 800476c:	40020010 	.word	0x40020010
 8004770:	40020028 	.word	0x40020028
 8004774:	40020040 	.word	0x40020040
 8004778:	40020058 	.word	0x40020058
 800477c:	40020070 	.word	0x40020070
 8004780:	40020088 	.word	0x40020088
 8004784:	400200a0 	.word	0x400200a0
 8004788:	400200b8 	.word	0x400200b8
 800478c:	40020410 	.word	0x40020410
 8004790:	40020428 	.word	0x40020428
 8004794:	40020440 	.word	0x40020440
 8004798:	40020458 	.word	0x40020458
 800479c:	40020470 	.word	0x40020470
 80047a0:	40020488 	.word	0x40020488
 80047a4:	400204a0 	.word	0x400204a0
 80047a8:	400204b8 	.word	0x400204b8
 80047ac:	58025408 	.word	0x58025408
 80047b0:	5802541c 	.word	0x5802541c
 80047b4:	58025430 	.word	0x58025430
 80047b8:	58025444 	.word	0x58025444
 80047bc:	58025458 	.word	0x58025458
 80047c0:	5802546c 	.word	0x5802546c
 80047c4:	58025480 	.word	0x58025480
 80047c8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	60da      	str	r2, [r3, #12]
}
 80047dc:	e075      	b.n	80048ca <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a3d      	ldr	r2, [pc, #244]	@ (80048d8 <DMA_SetConfig+0x388>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d04a      	beq.n	800487e <DMA_SetConfig+0x32e>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a3b      	ldr	r2, [pc, #236]	@ (80048dc <DMA_SetConfig+0x38c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d045      	beq.n	800487e <DMA_SetConfig+0x32e>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a3a      	ldr	r2, [pc, #232]	@ (80048e0 <DMA_SetConfig+0x390>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d040      	beq.n	800487e <DMA_SetConfig+0x32e>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a38      	ldr	r2, [pc, #224]	@ (80048e4 <DMA_SetConfig+0x394>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d03b      	beq.n	800487e <DMA_SetConfig+0x32e>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a37      	ldr	r2, [pc, #220]	@ (80048e8 <DMA_SetConfig+0x398>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d036      	beq.n	800487e <DMA_SetConfig+0x32e>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a35      	ldr	r2, [pc, #212]	@ (80048ec <DMA_SetConfig+0x39c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d031      	beq.n	800487e <DMA_SetConfig+0x32e>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a34      	ldr	r2, [pc, #208]	@ (80048f0 <DMA_SetConfig+0x3a0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d02c      	beq.n	800487e <DMA_SetConfig+0x32e>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a32      	ldr	r2, [pc, #200]	@ (80048f4 <DMA_SetConfig+0x3a4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d027      	beq.n	800487e <DMA_SetConfig+0x32e>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a31      	ldr	r2, [pc, #196]	@ (80048f8 <DMA_SetConfig+0x3a8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d022      	beq.n	800487e <DMA_SetConfig+0x32e>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a2f      	ldr	r2, [pc, #188]	@ (80048fc <DMA_SetConfig+0x3ac>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d01d      	beq.n	800487e <DMA_SetConfig+0x32e>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a2e      	ldr	r2, [pc, #184]	@ (8004900 <DMA_SetConfig+0x3b0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d018      	beq.n	800487e <DMA_SetConfig+0x32e>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a2c      	ldr	r2, [pc, #176]	@ (8004904 <DMA_SetConfig+0x3b4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d013      	beq.n	800487e <DMA_SetConfig+0x32e>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a2b      	ldr	r2, [pc, #172]	@ (8004908 <DMA_SetConfig+0x3b8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00e      	beq.n	800487e <DMA_SetConfig+0x32e>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a29      	ldr	r2, [pc, #164]	@ (800490c <DMA_SetConfig+0x3bc>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d009      	beq.n	800487e <DMA_SetConfig+0x32e>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a28      	ldr	r2, [pc, #160]	@ (8004910 <DMA_SetConfig+0x3c0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d004      	beq.n	800487e <DMA_SetConfig+0x32e>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a26      	ldr	r2, [pc, #152]	@ (8004914 <DMA_SetConfig+0x3c4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d101      	bne.n	8004882 <DMA_SetConfig+0x332>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <DMA_SetConfig+0x334>
 8004882:	2300      	movs	r3, #0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d020      	beq.n	80048ca <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2201      	movs	r2, #1
 8004892:	409a      	lsls	r2, r3
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2b40      	cmp	r3, #64	@ 0x40
 80048a6:	d108      	bne.n	80048ba <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	60da      	str	r2, [r3, #12]
}
 80048b8:	e007      	b.n	80048ca <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	60da      	str	r2, [r3, #12]
}
 80048ca:	bf00      	nop
 80048cc:	371c      	adds	r7, #28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	48022c08 	.word	0x48022c08
 80048dc:	48022c1c 	.word	0x48022c1c
 80048e0:	48022c30 	.word	0x48022c30
 80048e4:	48022c44 	.word	0x48022c44
 80048e8:	48022c58 	.word	0x48022c58
 80048ec:	48022c6c 	.word	0x48022c6c
 80048f0:	48022c80 	.word	0x48022c80
 80048f4:	48022c94 	.word	0x48022c94
 80048f8:	58025408 	.word	0x58025408
 80048fc:	5802541c 	.word	0x5802541c
 8004900:	58025430 	.word	0x58025430
 8004904:	58025444 	.word	0x58025444
 8004908:	58025458 	.word	0x58025458
 800490c:	5802546c 	.word	0x5802546c
 8004910:	58025480 	.word	0x58025480
 8004914:	58025494 	.word	0x58025494

08004918 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a42      	ldr	r2, [pc, #264]	@ (8004a30 <DMA_CalcBaseAndBitshift+0x118>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d04a      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a41      	ldr	r2, [pc, #260]	@ (8004a34 <DMA_CalcBaseAndBitshift+0x11c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d045      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a3f      	ldr	r2, [pc, #252]	@ (8004a38 <DMA_CalcBaseAndBitshift+0x120>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d040      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a3e      	ldr	r2, [pc, #248]	@ (8004a3c <DMA_CalcBaseAndBitshift+0x124>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d03b      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a3c      	ldr	r2, [pc, #240]	@ (8004a40 <DMA_CalcBaseAndBitshift+0x128>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d036      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a3b      	ldr	r2, [pc, #236]	@ (8004a44 <DMA_CalcBaseAndBitshift+0x12c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d031      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a39      	ldr	r2, [pc, #228]	@ (8004a48 <DMA_CalcBaseAndBitshift+0x130>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d02c      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a38      	ldr	r2, [pc, #224]	@ (8004a4c <DMA_CalcBaseAndBitshift+0x134>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d027      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a36      	ldr	r2, [pc, #216]	@ (8004a50 <DMA_CalcBaseAndBitshift+0x138>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d022      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a35      	ldr	r2, [pc, #212]	@ (8004a54 <DMA_CalcBaseAndBitshift+0x13c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d01d      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a33      	ldr	r2, [pc, #204]	@ (8004a58 <DMA_CalcBaseAndBitshift+0x140>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d018      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a32      	ldr	r2, [pc, #200]	@ (8004a5c <DMA_CalcBaseAndBitshift+0x144>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d013      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a30      	ldr	r2, [pc, #192]	@ (8004a60 <DMA_CalcBaseAndBitshift+0x148>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00e      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004a64 <DMA_CalcBaseAndBitshift+0x14c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d009      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004a68 <DMA_CalcBaseAndBitshift+0x150>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d004      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xa8>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a2c      	ldr	r2, [pc, #176]	@ (8004a6c <DMA_CalcBaseAndBitshift+0x154>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d101      	bne.n	80049c4 <DMA_CalcBaseAndBitshift+0xac>
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <DMA_CalcBaseAndBitshift+0xae>
 80049c4:	2300      	movs	r3, #0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d024      	beq.n	8004a14 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	3b10      	subs	r3, #16
 80049d2:	4a27      	ldr	r2, [pc, #156]	@ (8004a70 <DMA_CalcBaseAndBitshift+0x158>)
 80049d4:	fba2 2303 	umull	r2, r3, r2, r3
 80049d8:	091b      	lsrs	r3, r3, #4
 80049da:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	4a24      	ldr	r2, [pc, #144]	@ (8004a74 <DMA_CalcBaseAndBitshift+0x15c>)
 80049e4:	5cd3      	ldrb	r3, [r2, r3]
 80049e6:	461a      	mov	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d908      	bls.n	8004a04 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004a78 <DMA_CalcBaseAndBitshift+0x160>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	1d1a      	adds	r2, r3, #4
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a02:	e00d      	b.n	8004a20 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004a78 <DMA_CalcBaseAndBitshift+0x160>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a12:	e005      	b.n	8004a20 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	40020010 	.word	0x40020010
 8004a34:	40020028 	.word	0x40020028
 8004a38:	40020040 	.word	0x40020040
 8004a3c:	40020058 	.word	0x40020058
 8004a40:	40020070 	.word	0x40020070
 8004a44:	40020088 	.word	0x40020088
 8004a48:	400200a0 	.word	0x400200a0
 8004a4c:	400200b8 	.word	0x400200b8
 8004a50:	40020410 	.word	0x40020410
 8004a54:	40020428 	.word	0x40020428
 8004a58:	40020440 	.word	0x40020440
 8004a5c:	40020458 	.word	0x40020458
 8004a60:	40020470 	.word	0x40020470
 8004a64:	40020488 	.word	0x40020488
 8004a68:	400204a0 	.word	0x400204a0
 8004a6c:	400204b8 	.word	0x400204b8
 8004a70:	aaaaaaab 	.word	0xaaaaaaab
 8004a74:	0800d9e0 	.word	0x0800d9e0
 8004a78:	fffffc00 	.word	0xfffffc00

08004a7c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d120      	bne.n	8004ad2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d858      	bhi.n	8004b4a <DMA_CheckFifoParam+0xce>
 8004a98:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa0 <DMA_CheckFifoParam+0x24>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004ab1 	.word	0x08004ab1
 8004aa4:	08004ac3 	.word	0x08004ac3
 8004aa8:	08004ab1 	.word	0x08004ab1
 8004aac:	08004b4b 	.word	0x08004b4b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d048      	beq.n	8004b4e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ac0:	e045      	b.n	8004b4e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004aca:	d142      	bne.n	8004b52 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ad0:	e03f      	b.n	8004b52 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ada:	d123      	bne.n	8004b24 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d838      	bhi.n	8004b56 <DMA_CheckFifoParam+0xda>
 8004ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8004aec <DMA_CheckFifoParam+0x70>)
 8004ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aea:	bf00      	nop
 8004aec:	08004afd 	.word	0x08004afd
 8004af0:	08004b03 	.word	0x08004b03
 8004af4:	08004afd 	.word	0x08004afd
 8004af8:	08004b15 	.word	0x08004b15
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
        break;
 8004b00:	e030      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d025      	beq.n	8004b5a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b12:	e022      	b.n	8004b5a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b1c:	d11f      	bne.n	8004b5e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b22:	e01c      	b.n	8004b5e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d902      	bls.n	8004b32 <DMA_CheckFifoParam+0xb6>
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d003      	beq.n	8004b38 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b30:	e018      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	73fb      	strb	r3, [r7, #15]
        break;
 8004b36:	e015      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00e      	beq.n	8004b62 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
    break;
 8004b48:	e00b      	b.n	8004b62 <DMA_CheckFifoParam+0xe6>
        break;
 8004b4a:	bf00      	nop
 8004b4c:	e00a      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
        break;
 8004b4e:	bf00      	nop
 8004b50:	e008      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
        break;
 8004b52:	bf00      	nop
 8004b54:	e006      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
        break;
 8004b56:	bf00      	nop
 8004b58:	e004      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
        break;
 8004b5a:	bf00      	nop
 8004b5c:	e002      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
        break;
 8004b5e:	bf00      	nop
 8004b60:	e000      	b.n	8004b64 <DMA_CheckFifoParam+0xe8>
    break;
 8004b62:	bf00      	nop
    }
  }

  return status;
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop

08004b74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a38      	ldr	r2, [pc, #224]	@ (8004c68 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d022      	beq.n	8004bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a36      	ldr	r2, [pc, #216]	@ (8004c6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01d      	beq.n	8004bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a35      	ldr	r2, [pc, #212]	@ (8004c70 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d018      	beq.n	8004bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a33      	ldr	r2, [pc, #204]	@ (8004c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a32      	ldr	r2, [pc, #200]	@ (8004c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00e      	beq.n	8004bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a30      	ldr	r2, [pc, #192]	@ (8004c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d009      	beq.n	8004bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a2f      	ldr	r2, [pc, #188]	@ (8004c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d004      	beq.n	8004bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a2d      	ldr	r2, [pc, #180]	@ (8004c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d101      	bne.n	8004bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01a      	beq.n	8004c12 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	3b08      	subs	r3, #8
 8004be4:	4a28      	ldr	r2, [pc, #160]	@ (8004c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	091b      	lsrs	r3, r3, #4
 8004bec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4b26      	ldr	r3, [pc, #152]	@ (8004c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a24      	ldr	r2, [pc, #144]	@ (8004c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c00:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f003 031f 	and.w	r3, r3, #31
 8004c08:	2201      	movs	r2, #1
 8004c0a:	409a      	lsls	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c10:	e024      	b.n	8004c5c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	3b10      	subs	r3, #16
 8004c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c20:	091b      	lsrs	r3, r3, #4
 8004c22:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4a1c      	ldr	r2, [pc, #112]	@ (8004c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d806      	bhi.n	8004c3a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d902      	bls.n	8004c3a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3308      	adds	r3, #8
 8004c38:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4b18      	ldr	r3, [pc, #96]	@ (8004ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	461a      	mov	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a16      	ldr	r2, [pc, #88]	@ (8004ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c4c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f003 031f 	and.w	r3, r3, #31
 8004c54:	2201      	movs	r2, #1
 8004c56:	409a      	lsls	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c5c:	bf00      	nop
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	58025408 	.word	0x58025408
 8004c6c:	5802541c 	.word	0x5802541c
 8004c70:	58025430 	.word	0x58025430
 8004c74:	58025444 	.word	0x58025444
 8004c78:	58025458 	.word	0x58025458
 8004c7c:	5802546c 	.word	0x5802546c
 8004c80:	58025480 	.word	0x58025480
 8004c84:	58025494 	.word	0x58025494
 8004c88:	cccccccd 	.word	0xcccccccd
 8004c8c:	16009600 	.word	0x16009600
 8004c90:	58025880 	.word	0x58025880
 8004c94:	aaaaaaab 	.word	0xaaaaaaab
 8004c98:	400204b8 	.word	0x400204b8
 8004c9c:	4002040f 	.word	0x4002040f
 8004ca0:	10008200 	.word	0x10008200
 8004ca4:	40020880 	.word	0x40020880

08004ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d04a      	beq.n	8004d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d847      	bhi.n	8004d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a25      	ldr	r2, [pc, #148]	@ (8004d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d022      	beq.n	8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a24      	ldr	r2, [pc, #144]	@ (8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d01d      	beq.n	8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a22      	ldr	r2, [pc, #136]	@ (8004d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d018      	beq.n	8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a21      	ldr	r2, [pc, #132]	@ (8004d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d013      	beq.n	8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00e      	beq.n	8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8004d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d009      	beq.n	8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1c      	ldr	r2, [pc, #112]	@ (8004d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8004d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d101      	bne.n	8004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4b17      	ldr	r3, [pc, #92]	@ (8004d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d22:	4413      	add	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	461a      	mov	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a15      	ldr	r2, [pc, #84]	@ (8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d30:	671a      	str	r2, [r3, #112]	@ 0x70
 8004d32:	e009      	b.n	8004d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4b14      	ldr	r3, [pc, #80]	@ (8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d38:	4413      	add	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a11      	ldr	r2, [pc, #68]	@ (8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d46:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	409a      	lsls	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	58025408 	.word	0x58025408
 8004d64:	5802541c 	.word	0x5802541c
 8004d68:	58025430 	.word	0x58025430
 8004d6c:	58025444 	.word	0x58025444
 8004d70:	58025458 	.word	0x58025458
 8004d74:	5802546c 	.word	0x5802546c
 8004d78:	58025480 	.word	0x58025480
 8004d7c:	58025494 	.word	0x58025494
 8004d80:	1600963f 	.word	0x1600963f
 8004d84:	58025940 	.word	0x58025940
 8004d88:	1000823f 	.word	0x1000823f
 8004d8c:	40020940 	.word	0x40020940

08004d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b089      	sub	sp, #36	@ 0x24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004d9e:	4b89      	ldr	r3, [pc, #548]	@ (8004fc4 <HAL_GPIO_Init+0x234>)
 8004da0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004da2:	e194      	b.n	80050ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	2101      	movs	r1, #1
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	fa01 f303 	lsl.w	r3, r1, r3
 8004db0:	4013      	ands	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 8186 	beq.w	80050c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d005      	beq.n	8004dd4 <HAL_GPIO_Init+0x44>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 0303 	and.w	r3, r3, #3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d130      	bne.n	8004e36 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	2203      	movs	r2, #3
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	43db      	mvns	r3, r3
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	4013      	ands	r3, r2
 8004dea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	43db      	mvns	r3, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4013      	ands	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	091b      	lsrs	r3, r3, #4
 8004e20:	f003 0201 	and.w	r2, r3, #1
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d017      	beq.n	8004e72 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	43db      	mvns	r3, r3
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	4013      	ands	r3, r2
 8004e58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d123      	bne.n	8004ec6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	08da      	lsrs	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3208      	adds	r2, #8
 8004e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	220f      	movs	r2, #15
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	08da      	lsrs	r2, r3, #3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3208      	adds	r2, #8
 8004ec0:	69b9      	ldr	r1, [r7, #24]
 8004ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	2203      	movs	r2, #3
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4013      	ands	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f003 0203 	and.w	r2, r3, #3
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 80e0 	beq.w	80050c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f08:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc8 <HAL_GPIO_Init+0x238>)
 8004f0a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004f0e:	4a2e      	ldr	r2, [pc, #184]	@ (8004fc8 <HAL_GPIO_Init+0x238>)
 8004f10:	f043 0302 	orr.w	r3, r3, #2
 8004f14:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8004f18:	4b2b      	ldr	r3, [pc, #172]	@ (8004fc8 <HAL_GPIO_Init+0x238>)
 8004f1a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f26:	4a29      	ldr	r2, [pc, #164]	@ (8004fcc <HAL_GPIO_Init+0x23c>)
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	089b      	lsrs	r3, r3, #2
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	220f      	movs	r2, #15
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	43db      	mvns	r3, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4013      	ands	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a20      	ldr	r2, [pc, #128]	@ (8004fd0 <HAL_GPIO_Init+0x240>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d052      	beq.n	8004ff8 <HAL_GPIO_Init+0x268>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd4 <HAL_GPIO_Init+0x244>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d031      	beq.n	8004fbe <HAL_GPIO_Init+0x22e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fd8 <HAL_GPIO_Init+0x248>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d02b      	beq.n	8004fba <HAL_GPIO_Init+0x22a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a1d      	ldr	r2, [pc, #116]	@ (8004fdc <HAL_GPIO_Init+0x24c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d025      	beq.n	8004fb6 <HAL_GPIO_Init+0x226>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe0 <HAL_GPIO_Init+0x250>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01f      	beq.n	8004fb2 <HAL_GPIO_Init+0x222>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe4 <HAL_GPIO_Init+0x254>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d019      	beq.n	8004fae <HAL_GPIO_Init+0x21e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004fe8 <HAL_GPIO_Init+0x258>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d013      	beq.n	8004faa <HAL_GPIO_Init+0x21a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a19      	ldr	r2, [pc, #100]	@ (8004fec <HAL_GPIO_Init+0x25c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00d      	beq.n	8004fa6 <HAL_GPIO_Init+0x216>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a18      	ldr	r2, [pc, #96]	@ (8004ff0 <HAL_GPIO_Init+0x260>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d007      	beq.n	8004fa2 <HAL_GPIO_Init+0x212>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a17      	ldr	r2, [pc, #92]	@ (8004ff4 <HAL_GPIO_Init+0x264>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d101      	bne.n	8004f9e <HAL_GPIO_Init+0x20e>
 8004f9a:	2309      	movs	r3, #9
 8004f9c:	e02d      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004f9e:	230a      	movs	r3, #10
 8004fa0:	e02b      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	e029      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fa6:	2307      	movs	r3, #7
 8004fa8:	e027      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004faa:	2306      	movs	r3, #6
 8004fac:	e025      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fae:	2305      	movs	r3, #5
 8004fb0:	e023      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fb2:	2304      	movs	r3, #4
 8004fb4:	e021      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e01f      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e01d      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e01b      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fc2:	bf00      	nop
 8004fc4:	58000080 	.word	0x58000080
 8004fc8:	58024400 	.word	0x58024400
 8004fcc:	58000400 	.word	0x58000400
 8004fd0:	58020000 	.word	0x58020000
 8004fd4:	58020400 	.word	0x58020400
 8004fd8:	58020800 	.word	0x58020800
 8004fdc:	58020c00 	.word	0x58020c00
 8004fe0:	58021000 	.word	0x58021000
 8004fe4:	58021400 	.word	0x58021400
 8004fe8:	58021800 	.word	0x58021800
 8004fec:	58021c00 	.word	0x58021c00
 8004ff0:	58022000 	.word	0x58022000
 8004ff4:	58022400 	.word	0x58022400
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	f002 0203 	and.w	r2, r2, #3
 8005000:	0092      	lsls	r2, r2, #2
 8005002:	4093      	lsls	r3, r2
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	4313      	orrs	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800500a:	4938      	ldr	r1, [pc, #224]	@ (80050ec <HAL_GPIO_Init+0x35c>)
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	089b      	lsrs	r3, r3, #2
 8005010:	3302      	adds	r3, #2
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	43db      	mvns	r3, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4013      	ands	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800503e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	43db      	mvns	r3, r3
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4013      	ands	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800506c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	43db      	mvns	r3, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	4013      	ands	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	43db      	mvns	r3, r3
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	4013      	ands	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	3301      	adds	r3, #1
 80050cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f47f ae63 	bne.w	8004da4 <HAL_GPIO_Init+0x14>
  }
}
 80050de:	bf00      	nop
 80050e0:	bf00      	nop
 80050e2:	3724      	adds	r7, #36	@ 0x24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	58000400 	.word	0x58000400

080050f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	807b      	strh	r3, [r7, #2]
 80050fc:	4613      	mov	r3, r2
 80050fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005100:	787b      	ldrb	r3, [r7, #1]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005106:	887a      	ldrh	r2, [r7, #2]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800510c:	e003      	b.n	8005116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800510e:	887b      	ldrh	r3, [r7, #2]
 8005110:	041a      	lsls	r2, r3, #16
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	619a      	str	r2, [r3, #24]
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
	...

08005124 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e08b      	b.n	800524e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fb fc98 	bl	8000a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2224      	movs	r2, #36	@ 0x24
 8005154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0201 	bic.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005174:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005184:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d107      	bne.n	800519e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800519a:	609a      	str	r2, [r3, #8]
 800519c:	e006      	b.n	80051ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80051aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d108      	bne.n	80051c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051c2:	605a      	str	r2, [r3, #4]
 80051c4:	e007      	b.n	80051d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6859      	ldr	r1, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005258 <HAL_I2C_Init+0x134>)
 80051e2:	430b      	orrs	r3, r1
 80051e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691a      	ldr	r2, [r3, #16]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	69d9      	ldr	r1, [r3, #28]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1a      	ldr	r2, [r3, #32]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	02008000 	.word	0x02008000

0800525c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	4608      	mov	r0, r1
 8005266:	4611      	mov	r1, r2
 8005268:	461a      	mov	r2, r3
 800526a:	4603      	mov	r3, r0
 800526c:	817b      	strh	r3, [r7, #10]
 800526e:	460b      	mov	r3, r1
 8005270:	813b      	strh	r3, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b20      	cmp	r3, #32
 8005280:	f040 80fd 	bne.w	800547e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <HAL_I2C_Mem_Read+0x34>
 800528a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800528c:	2b00      	cmp	r3, #0
 800528e:	d105      	bne.n	800529c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005296:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0f1      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_I2C_Mem_Read+0x4e>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e0ea      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052b2:	f7fc fcef 	bl	8001c94 <HAL_GetTick>
 80052b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	2319      	movs	r3, #25
 80052be:	2201      	movs	r2, #1
 80052c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f95b 	bl	8005580 <I2C_WaitOnFlagUntilTimeout>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e0d5      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2222      	movs	r2, #34	@ 0x22
 80052d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2240      	movs	r2, #64	@ 0x40
 80052e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a3a      	ldr	r2, [r7, #32]
 80052ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80052f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052fc:	88f8      	ldrh	r0, [r7, #6]
 80052fe:	893a      	ldrh	r2, [r7, #8]
 8005300:	8979      	ldrh	r1, [r7, #10]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	9301      	str	r3, [sp, #4]
 8005306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	4603      	mov	r3, r0
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f8bf 	bl	8005490 <I2C_RequestMemoryRead>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e0ad      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005328:	b29b      	uxth	r3, r3
 800532a:	2bff      	cmp	r3, #255	@ 0xff
 800532c:	d90e      	bls.n	800534c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	22ff      	movs	r2, #255	@ 0xff
 8005332:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005338:	b2da      	uxtb	r2, r3
 800533a:	8979      	ldrh	r1, [r7, #10]
 800533c:	4b52      	ldr	r3, [pc, #328]	@ (8005488 <HAL_I2C_Mem_Read+0x22c>)
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 fadf 	bl	8005908 <I2C_TransferConfig>
 800534a:	e00f      	b.n	800536c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800535a:	b2da      	uxtb	r2, r3
 800535c:	8979      	ldrh	r1, [r7, #10]
 800535e:	4b4a      	ldr	r3, [pc, #296]	@ (8005488 <HAL_I2C_Mem_Read+0x22c>)
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 face 	bl	8005908 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005372:	2200      	movs	r2, #0
 8005374:	2104      	movs	r1, #4
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f902 	bl	8005580 <I2C_WaitOnFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e07c      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d034      	beq.n	800542c <HAL_I2C_Mem_Read+0x1d0>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d130      	bne.n	800542c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d0:	2200      	movs	r2, #0
 80053d2:	2180      	movs	r1, #128	@ 0x80
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f8d3 	bl	8005580 <I2C_WaitOnFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e04d      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2bff      	cmp	r3, #255	@ 0xff
 80053ec:	d90e      	bls.n	800540c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	22ff      	movs	r2, #255	@ 0xff
 80053f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	8979      	ldrh	r1, [r7, #10]
 80053fc:	2300      	movs	r3, #0
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 fa7f 	bl	8005908 <I2C_TransferConfig>
 800540a:	e00f      	b.n	800542c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541a:	b2da      	uxtb	r2, r3
 800541c:	8979      	ldrh	r1, [r7, #10]
 800541e:	2300      	movs	r3, #0
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 fa6e 	bl	8005908 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d19a      	bne.n	800536c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 f940 	bl	80056c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e01a      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2220      	movs	r2, #32
 8005450:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6859      	ldr	r1, [r3, #4]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	4b0b      	ldr	r3, [pc, #44]	@ (800548c <HAL_I2C_Mem_Read+0x230>)
 800545e:	400b      	ands	r3, r1
 8005460:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	e000      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800547e:	2302      	movs	r3, #2
  }
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	80002400 	.word	0x80002400
 800548c:	fe00e800 	.word	0xfe00e800

08005490 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	4608      	mov	r0, r1
 800549a:	4611      	mov	r1, r2
 800549c:	461a      	mov	r2, r3
 800549e:	4603      	mov	r3, r0
 80054a0:	817b      	strh	r3, [r7, #10]
 80054a2:	460b      	mov	r3, r1
 80054a4:	813b      	strh	r3, [r7, #8]
 80054a6:	4613      	mov	r3, r2
 80054a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80054aa:	88fb      	ldrh	r3, [r7, #6]
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	8979      	ldrh	r1, [r7, #10]
 80054b0:	4b20      	ldr	r3, [pc, #128]	@ (8005534 <I2C_RequestMemoryRead+0xa4>)
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	2300      	movs	r3, #0
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 fa26 	bl	8005908 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	69b9      	ldr	r1, [r7, #24]
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f8b6 	bl	8005632 <I2C_WaitOnTXISFlagUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e02c      	b.n	800552a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d105      	bne.n	80054e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054d6:	893b      	ldrh	r3, [r7, #8]
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	629a      	str	r2, [r3, #40]	@ 0x28
 80054e0:	e015      	b.n	800550e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80054e2:	893b      	ldrh	r3, [r7, #8]
 80054e4:	0a1b      	lsrs	r3, r3, #8
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f0:	69fa      	ldr	r2, [r7, #28]
 80054f2:	69b9      	ldr	r1, [r7, #24]
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f89c 	bl	8005632 <I2C_WaitOnTXISFlagUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e012      	b.n	800552a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005504:	893b      	ldrh	r3, [r7, #8]
 8005506:	b2da      	uxtb	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2200      	movs	r2, #0
 8005516:	2140      	movs	r1, #64	@ 0x40
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f831 	bl	8005580 <I2C_WaitOnFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	80002000 	.word	0x80002000

08005538 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b02      	cmp	r3, #2
 800554c:	d103      	bne.n	8005556 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2200      	movs	r2, #0
 8005554:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	d007      	beq.n	8005574 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	619a      	str	r2, [r3, #24]
  }
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	4613      	mov	r3, r2
 800558e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005590:	e03b      	b.n	800560a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	6839      	ldr	r1, [r7, #0]
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 f8d6 	bl	8005748 <I2C_IsErrorOccurred>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e041      	b.n	800562a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ac:	d02d      	beq.n	800560a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ae:	f7fc fb71 	bl	8001c94 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d302      	bcc.n	80055c4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d122      	bne.n	800560a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	4013      	ands	r3, r2
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	bf0c      	ite	eq
 80055d4:	2301      	moveq	r3, #1
 80055d6:	2300      	movne	r3, #0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	461a      	mov	r2, r3
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d113      	bne.n	800560a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e6:	f043 0220 	orr.w	r2, r3, #32
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e00f      	b.n	800562a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	699a      	ldr	r2, [r3, #24]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	4013      	ands	r3, r2
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	429a      	cmp	r2, r3
 8005618:	bf0c      	ite	eq
 800561a:	2301      	moveq	r3, #1
 800561c:	2300      	movne	r3, #0
 800561e:	b2db      	uxtb	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	79fb      	ldrb	r3, [r7, #7]
 8005624:	429a      	cmp	r2, r3
 8005626:	d0b4      	beq.n	8005592 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b084      	sub	sp, #16
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800563e:	e033      	b.n	80056a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f87f 	bl	8005748 <I2C_IsErrorOccurred>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e031      	b.n	80056b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565a:	d025      	beq.n	80056a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565c:	f7fc fb1a 	bl	8001c94 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	429a      	cmp	r2, r3
 800566a:	d302      	bcc.n	8005672 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d11a      	bne.n	80056a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b02      	cmp	r3, #2
 800567e:	d013      	beq.n	80056a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005684:	f043 0220 	orr.w	r2, r3, #32
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e007      	b.n	80056b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d1c4      	bne.n	8005640 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056cc:	e02f      	b.n	800572e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 f838 	bl	8005748 <I2C_IsErrorOccurred>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e02d      	b.n	800573e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e2:	f7fc fad7 	bl	8001c94 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d302      	bcc.n	80056f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d11a      	bne.n	800572e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f003 0320 	and.w	r3, r3, #32
 8005702:	2b20      	cmp	r3, #32
 8005704:	d013      	beq.n	800572e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570a:	f043 0220 	orr.w	r2, r3, #32
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e007      	b.n	800573e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	f003 0320 	and.w	r3, r3, #32
 8005738:	2b20      	cmp	r3, #32
 800573a:	d1c8      	bne.n	80056ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08a      	sub	sp, #40	@ 0x28
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005762:	2300      	movs	r3, #0
 8005764:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b00      	cmp	r3, #0
 8005772:	d068      	beq.n	8005846 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2210      	movs	r2, #16
 800577a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800577c:	e049      	b.n	8005812 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005784:	d045      	beq.n	8005812 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005786:	f7fc fa85 	bl	8001c94 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	429a      	cmp	r2, r3
 8005794:	d302      	bcc.n	800579c <I2C_IsErrorOccurred+0x54>
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d13a      	bne.n	8005812 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057be:	d121      	bne.n	8005804 <I2C_IsErrorOccurred+0xbc>
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057c6:	d01d      	beq.n	8005804 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80057c8:	7cfb      	ldrb	r3, [r7, #19]
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	d01a      	beq.n	8005804 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80057de:	f7fc fa59 	bl	8001c94 <HAL_GetTick>
 80057e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057e4:	e00e      	b.n	8005804 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80057e6:	f7fc fa55 	bl	8001c94 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b19      	cmp	r3, #25
 80057f2:	d907      	bls.n	8005804 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	f043 0320 	orr.w	r3, r3, #32
 80057fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005802:	e006      	b.n	8005812 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b20      	cmp	r3, #32
 8005810:	d1e9      	bne.n	80057e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b20      	cmp	r3, #32
 800581e:	d003      	beq.n	8005828 <I2C_IsErrorOccurred+0xe0>
 8005820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0aa      	beq.n	800577e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005828:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800582c:	2b00      	cmp	r3, #0
 800582e:	d103      	bne.n	8005838 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2220      	movs	r2, #32
 8005836:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	f043 0304 	orr.w	r3, r3, #4
 800583e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00b      	beq.n	8005870 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005868:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00b      	beq.n	8005892 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	f043 0308 	orr.w	r3, r3, #8
 8005880:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800588a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00b      	beq.n	80058b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	f043 0302 	orr.w	r3, r3, #2
 80058a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80058b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01c      	beq.n	80058f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff fe3b 	bl	8005538 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6859      	ldr	r1, [r3, #4]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005904 <I2C_IsErrorOccurred+0x1bc>)
 80058ce:	400b      	ands	r3, r1
 80058d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	431a      	orrs	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80058f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3728      	adds	r7, #40	@ 0x28
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	fe00e800 	.word	0xfe00e800

08005908 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	607b      	str	r3, [r7, #4]
 8005912:	460b      	mov	r3, r1
 8005914:	817b      	strh	r3, [r7, #10]
 8005916:	4613      	mov	r3, r2
 8005918:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800591a:	897b      	ldrh	r3, [r7, #10]
 800591c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005920:	7a7b      	ldrb	r3, [r7, #9]
 8005922:	041b      	lsls	r3, r3, #16
 8005924:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005928:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	4313      	orrs	r3, r2
 8005932:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005936:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	0d5b      	lsrs	r3, r3, #21
 8005942:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005946:	4b08      	ldr	r3, [pc, #32]	@ (8005968 <I2C_TransferConfig+0x60>)
 8005948:	430b      	orrs	r3, r1
 800594a:	43db      	mvns	r3, r3
 800594c:	ea02 0103 	and.w	r1, r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800595a:	bf00      	nop
 800595c:	371c      	adds	r7, #28
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	03ff63ff 	.word	0x03ff63ff

0800596c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b20      	cmp	r3, #32
 8005980:	d138      	bne.n	80059f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800598c:	2302      	movs	r3, #2
 800598e:	e032      	b.n	80059f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2224      	movs	r2, #36	@ 0x24
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0201 	bic.w	r2, r2, #1
 80059ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80059be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6819      	ldr	r1, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	e000      	b.n	80059f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80059f4:	2302      	movs	r3, #2
  }
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	d139      	bne.n	8005a8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e033      	b.n	8005a8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2224      	movs	r2, #36	@ 0x24
 8005a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0201 	bic.w	r2, r2, #1
 8005a44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005a54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	021b      	lsls	r3, r3, #8
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0201 	orr.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e000      	b.n	8005a8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a8c:	2302      	movs	r3, #2
  }
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
	...

08005a9c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005aa4:	4b29      	ldr	r3, [pc, #164]	@ (8005b4c <HAL_PWREx_ConfigSupply+0xb0>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	2b06      	cmp	r3, #6
 8005aae:	d00a      	beq.n	8005ac6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ab0:	4b26      	ldr	r3, [pc, #152]	@ (8005b4c <HAL_PWREx_ConfigSupply+0xb0>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d001      	beq.n	8005ac2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e040      	b.n	8005b44 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e03e      	b.n	8005b44 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ac6:	4b21      	ldr	r3, [pc, #132]	@ (8005b4c <HAL_PWREx_ConfigSupply+0xb0>)
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005ace:	491f      	ldr	r1, [pc, #124]	@ (8005b4c <HAL_PWREx_ConfigSupply+0xb0>)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ad6:	f7fc f8dd 	bl	8001c94 <HAL_GetTick>
 8005ada:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005adc:	e009      	b.n	8005af2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ade:	f7fc f8d9 	bl	8001c94 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005aec:	d901      	bls.n	8005af2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e028      	b.n	8005b44 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005af2:	4b16      	ldr	r3, [pc, #88]	@ (8005b4c <HAL_PWREx_ConfigSupply+0xb0>)
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005afe:	d1ee      	bne.n	8005ade <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b1e      	cmp	r3, #30
 8005b04:	d008      	beq.n	8005b18 <HAL_PWREx_ConfigSupply+0x7c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b0a:	d005      	beq.n	8005b18 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b1d      	cmp	r3, #29
 8005b10:	d002      	beq.n	8005b18 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b2d      	cmp	r3, #45	@ 0x2d
 8005b16:	d114      	bne.n	8005b42 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005b18:	f7fc f8bc 	bl	8001c94 <HAL_GetTick>
 8005b1c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005b1e:	e009      	b.n	8005b34 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b20:	f7fc f8b8 	bl	8001c94 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b2e:	d901      	bls.n	8005b34 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e007      	b.n	8005b44 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005b34:	4b05      	ldr	r3, [pc, #20]	@ (8005b4c <HAL_PWREx_ConfigSupply+0xb0>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b40:	d1ee      	bne.n	8005b20 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	58024800 	.word	0x58024800

08005b50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08c      	sub	sp, #48	@ 0x30
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d102      	bne.n	8005b64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f000 bc1f 	b.w	80063a2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 80b3 	beq.w	8005cd8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b72:	4b95      	ldr	r3, [pc, #596]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b7c:	4b92      	ldr	r3, [pc, #584]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b80:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b84:	2b10      	cmp	r3, #16
 8005b86:	d007      	beq.n	8005b98 <HAL_RCC_OscConfig+0x48>
 8005b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8a:	2b18      	cmp	r3, #24
 8005b8c:	d112      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x64>
 8005b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b90:	f003 0303 	and.w	r3, r3, #3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d10d      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b98:	4b8b      	ldr	r3, [pc, #556]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 8098 	beq.w	8005cd6 <HAL_RCC_OscConfig+0x186>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f040 8093 	bne.w	8005cd6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e3f6      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bbc:	d106      	bne.n	8005bcc <HAL_RCC_OscConfig+0x7c>
 8005bbe:	4b82      	ldr	r3, [pc, #520]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a81      	ldr	r2, [pc, #516]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	e058      	b.n	8005c7e <HAL_RCC_OscConfig+0x12e>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d112      	bne.n	8005bfa <HAL_RCC_OscConfig+0xaa>
 8005bd4:	4b7c      	ldr	r3, [pc, #496]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a7b      	ldr	r2, [pc, #492]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	4b79      	ldr	r3, [pc, #484]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a78      	ldr	r2, [pc, #480]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005be6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	4b76      	ldr	r3, [pc, #472]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a75      	ldr	r2, [pc, #468]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005bf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	e041      	b.n	8005c7e <HAL_RCC_OscConfig+0x12e>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c02:	d112      	bne.n	8005c2a <HAL_RCC_OscConfig+0xda>
 8005c04:	4b70      	ldr	r3, [pc, #448]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a6f      	ldr	r2, [pc, #444]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	4b6d      	ldr	r3, [pc, #436]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a6c      	ldr	r2, [pc, #432]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c16:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	4b6a      	ldr	r3, [pc, #424]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a69      	ldr	r2, [pc, #420]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c26:	6013      	str	r3, [r2, #0]
 8005c28:	e029      	b.n	8005c7e <HAL_RCC_OscConfig+0x12e>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005c32:	d112      	bne.n	8005c5a <HAL_RCC_OscConfig+0x10a>
 8005c34:	4b64      	ldr	r3, [pc, #400]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a63      	ldr	r2, [pc, #396]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	4b61      	ldr	r3, [pc, #388]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a60      	ldr	r2, [pc, #384]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	4b5e      	ldr	r3, [pc, #376]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a5d      	ldr	r2, [pc, #372]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c56:	6013      	str	r3, [r2, #0]
 8005c58:	e011      	b.n	8005c7e <HAL_RCC_OscConfig+0x12e>
 8005c5a:	4b5b      	ldr	r3, [pc, #364]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a5a      	ldr	r2, [pc, #360]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	4b58      	ldr	r3, [pc, #352]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a57      	ldr	r2, [pc, #348]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	4b55      	ldr	r3, [pc, #340]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a54      	ldr	r2, [pc, #336]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c78:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005c7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d013      	beq.n	8005cae <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c86:	f7fc f805 	bl	8001c94 <HAL_GetTick>
 8005c8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c8e:	f7fc f801 	bl	8001c94 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b64      	cmp	r3, #100	@ 0x64
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e380      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ca0:	4b49      	ldr	r3, [pc, #292]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0f0      	beq.n	8005c8e <HAL_RCC_OscConfig+0x13e>
 8005cac:	e014      	b.n	8005cd8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cae:	f7fb fff1 	bl	8001c94 <HAL_GetTick>
 8005cb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cb6:	f7fb ffed 	bl	8001c94 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b64      	cmp	r3, #100	@ 0x64
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e36c      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1f0      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x166>
 8005cd4:	e000      	b.n	8005cd8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 808c 	beq.w	8005dfe <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ce6:	4b38      	ldr	r3, [pc, #224]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cee:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cf0:	4b35      	ldr	r3, [pc, #212]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d007      	beq.n	8005d0c <HAL_RCC_OscConfig+0x1bc>
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	2b18      	cmp	r3, #24
 8005d00:	d137      	bne.n	8005d72 <HAL_RCC_OscConfig+0x222>
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d132      	bne.n	8005d72 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_RCC_OscConfig+0x1d4>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e33e      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d24:	4b28      	ldr	r3, [pc, #160]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f023 0219 	bic.w	r2, r3, #25
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	4925      	ldr	r1, [pc, #148]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d36:	f7fb ffad 	bl	8001c94 <HAL_GetTick>
 8005d3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d3c:	e008      	b.n	8005d50 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d3e:	f7fb ffa9 	bl	8001c94 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e328      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d50:	4b1d      	ldr	r3, [pc, #116]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0f0      	beq.n	8005d3e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	061b      	lsls	r3, r3, #24
 8005d6a:	4917      	ldr	r1, [pc, #92]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d70:	e045      	b.n	8005dfe <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d028      	beq.n	8005dcc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d7a:	4b13      	ldr	r3, [pc, #76]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f023 0219 	bic.w	r2, r3, #25
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	4910      	ldr	r1, [pc, #64]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8c:	f7fb ff82 	bl	8001c94 <HAL_GetTick>
 8005d90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d94:	f7fb ff7e 	bl	8001c94 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e2fd      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005da6:	4b08      	ldr	r3, [pc, #32]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0f0      	beq.n	8005d94 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db2:	4b05      	ldr	r3, [pc, #20]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	061b      	lsls	r3, r3, #24
 8005dc0:	4901      	ldr	r1, [pc, #4]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	604b      	str	r3, [r1, #4]
 8005dc6:	e01a      	b.n	8005dfe <HAL_RCC_OscConfig+0x2ae>
 8005dc8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dcc:	4b97      	ldr	r3, [pc, #604]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a96      	ldr	r2, [pc, #600]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005dd2:	f023 0301 	bic.w	r3, r3, #1
 8005dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fb ff5c 	bl	8001c94 <HAL_GetTick>
 8005ddc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005de0:	f7fb ff58 	bl	8001c94 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e2d7      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005df2:	4b8e      	ldr	r3, [pc, #568]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0304 	and.w	r3, r3, #4
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f0      	bne.n	8005de0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d06a      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e0a:	4b88      	ldr	r3, [pc, #544]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e12:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e14:	4b85      	ldr	r3, [pc, #532]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e18:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d007      	beq.n	8005e30 <HAL_RCC_OscConfig+0x2e0>
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2b18      	cmp	r3, #24
 8005e24:	d11b      	bne.n	8005e5e <HAL_RCC_OscConfig+0x30e>
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f003 0303 	and.w	r3, r3, #3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d116      	bne.n	8005e5e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e30:	4b7e      	ldr	r3, [pc, #504]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <HAL_RCC_OscConfig+0x2f8>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	2b80      	cmp	r3, #128	@ 0x80
 8005e42:	d001      	beq.n	8005e48 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e2ac      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e48:	4b78      	ldr	r3, [pc, #480]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	061b      	lsls	r3, r3, #24
 8005e56:	4975      	ldr	r1, [pc, #468]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e5c:	e040      	b.n	8005ee0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d023      	beq.n	8005eae <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e66:	4b71      	ldr	r3, [pc, #452]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a70      	ldr	r2, [pc, #448]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005e6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e72:	f7fb ff0f 	bl	8001c94 <HAL_GetTick>
 8005e76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e78:	e008      	b.n	8005e8c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e7a:	f7fb ff0b 	bl	8001c94 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d901      	bls.n	8005e8c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e28a      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e8c:	4b67      	ldr	r3, [pc, #412]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0f0      	beq.n	8005e7a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e98:	4b64      	ldr	r3, [pc, #400]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	061b      	lsls	r3, r3, #24
 8005ea6:	4961      	ldr	r1, [pc, #388]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60cb      	str	r3, [r1, #12]
 8005eac:	e018      	b.n	8005ee0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005eae:	4b5f      	ldr	r3, [pc, #380]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a5e      	ldr	r2, [pc, #376]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005eb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eba:	f7fb feeb 	bl	8001c94 <HAL_GetTick>
 8005ebe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ec2:	f7fb fee7 	bl	8001c94 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e266      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ed4:	4b55      	ldr	r3, [pc, #340]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1f0      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0308 	and.w	r3, r3, #8
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d036      	beq.n	8005f5a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d019      	beq.n	8005f28 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ef4:	4b4d      	ldr	r3, [pc, #308]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005efa:	f043 0301 	orr.w	r3, r3, #1
 8005efe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f00:	f7fb fec8 	bl	8001c94 <HAL_GetTick>
 8005f04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f08:	f7fb fec4 	bl	8001c94 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e243      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f1a:	4b44      	ldr	r3, [pc, #272]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0f0      	beq.n	8005f08 <HAL_RCC_OscConfig+0x3b8>
 8005f26:	e018      	b.n	8005f5a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f28:	4b40      	ldr	r3, [pc, #256]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f2c:	4a3f      	ldr	r2, [pc, #252]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005f2e:	f023 0301 	bic.w	r3, r3, #1
 8005f32:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f34:	f7fb feae 	bl	8001c94 <HAL_GetTick>
 8005f38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f3c:	f7fb feaa 	bl	8001c94 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e229      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f4e:	4b37      	ldr	r3, [pc, #220]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1f0      	bne.n	8005f3c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0320 	and.w	r3, r3, #32
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d036      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d019      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f6e:	4b2f      	ldr	r3, [pc, #188]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a2e      	ldr	r2, [pc, #184]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005f74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005f78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f7a:	f7fb fe8b 	bl	8001c94 <HAL_GetTick>
 8005f7e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f80:	e008      	b.n	8005f94 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f82:	f7fb fe87 	bl	8001c94 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e206      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f94:	4b25      	ldr	r3, [pc, #148]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0f0      	beq.n	8005f82 <HAL_RCC_OscConfig+0x432>
 8005fa0:	e018      	b.n	8005fd4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005fa2:	4b22      	ldr	r3, [pc, #136]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a21      	ldr	r2, [pc, #132]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005fa8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005fae:	f7fb fe71 	bl	8001c94 <HAL_GetTick>
 8005fb2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005fb4:	e008      	b.n	8005fc8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fb6:	f7fb fe6d 	bl	8001c94 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d901      	bls.n	8005fc8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e1ec      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005fc8:	4b18      	ldr	r3, [pc, #96]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1f0      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 80af 	beq.w	8006140 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005fe2:	4b13      	ldr	r3, [pc, #76]	@ (8006030 <HAL_RCC_OscConfig+0x4e0>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a12      	ldr	r2, [pc, #72]	@ (8006030 <HAL_RCC_OscConfig+0x4e0>)
 8005fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fee:	f7fb fe51 	bl	8001c94 <HAL_GetTick>
 8005ff2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ff4:	e008      	b.n	8006008 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff6:	f7fb fe4d 	bl	8001c94 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b64      	cmp	r3, #100	@ 0x64
 8006002:	d901      	bls.n	8006008 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e1cc      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006008:	4b09      	ldr	r3, [pc, #36]	@ (8006030 <HAL_RCC_OscConfig+0x4e0>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006010:	2b00      	cmp	r3, #0
 8006012:	d0f0      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d10b      	bne.n	8006034 <HAL_RCC_OscConfig+0x4e4>
 800601c:	4b03      	ldr	r3, [pc, #12]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 800601e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006020:	4a02      	ldr	r2, [pc, #8]	@ (800602c <HAL_RCC_OscConfig+0x4dc>)
 8006022:	f043 0301 	orr.w	r3, r3, #1
 8006026:	6713      	str	r3, [r2, #112]	@ 0x70
 8006028:	e05b      	b.n	80060e2 <HAL_RCC_OscConfig+0x592>
 800602a:	bf00      	nop
 800602c:	58024400 	.word	0x58024400
 8006030:	58024800 	.word	0x58024800
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d112      	bne.n	8006062 <HAL_RCC_OscConfig+0x512>
 800603c:	4b9d      	ldr	r3, [pc, #628]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 800603e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006040:	4a9c      	ldr	r2, [pc, #624]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006042:	f023 0301 	bic.w	r3, r3, #1
 8006046:	6713      	str	r3, [r2, #112]	@ 0x70
 8006048:	4b9a      	ldr	r3, [pc, #616]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 800604a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800604c:	4a99      	ldr	r2, [pc, #612]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 800604e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006052:	6713      	str	r3, [r2, #112]	@ 0x70
 8006054:	4b97      	ldr	r3, [pc, #604]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006058:	4a96      	ldr	r2, [pc, #600]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 800605a:	f023 0304 	bic.w	r3, r3, #4
 800605e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006060:	e03f      	b.n	80060e2 <HAL_RCC_OscConfig+0x592>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	2b05      	cmp	r3, #5
 8006068:	d112      	bne.n	8006090 <HAL_RCC_OscConfig+0x540>
 800606a:	4b92      	ldr	r3, [pc, #584]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 800606c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606e:	4a91      	ldr	r2, [pc, #580]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006070:	f043 0304 	orr.w	r3, r3, #4
 8006074:	6713      	str	r3, [r2, #112]	@ 0x70
 8006076:	4b8f      	ldr	r3, [pc, #572]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800607a:	4a8e      	ldr	r2, [pc, #568]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 800607c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006080:	6713      	str	r3, [r2, #112]	@ 0x70
 8006082:	4b8c      	ldr	r3, [pc, #560]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006086:	4a8b      	ldr	r2, [pc, #556]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006088:	f043 0301 	orr.w	r3, r3, #1
 800608c:	6713      	str	r3, [r2, #112]	@ 0x70
 800608e:	e028      	b.n	80060e2 <HAL_RCC_OscConfig+0x592>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	2b85      	cmp	r3, #133	@ 0x85
 8006096:	d112      	bne.n	80060be <HAL_RCC_OscConfig+0x56e>
 8006098:	4b86      	ldr	r3, [pc, #536]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 800609a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800609c:	4a85      	ldr	r2, [pc, #532]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 800609e:	f043 0304 	orr.w	r3, r3, #4
 80060a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80060a4:	4b83      	ldr	r3, [pc, #524]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 80060a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a8:	4a82      	ldr	r2, [pc, #520]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 80060aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80060b0:	4b80      	ldr	r3, [pc, #512]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 80060b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b4:	4a7f      	ldr	r2, [pc, #508]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 80060b6:	f043 0301 	orr.w	r3, r3, #1
 80060ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80060bc:	e011      	b.n	80060e2 <HAL_RCC_OscConfig+0x592>
 80060be:	4b7d      	ldr	r3, [pc, #500]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 80060c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c2:	4a7c      	ldr	r2, [pc, #496]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 80060c4:	f023 0301 	bic.w	r3, r3, #1
 80060c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ca:	4b7a      	ldr	r3, [pc, #488]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 80060cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ce:	4a79      	ldr	r2, [pc, #484]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 80060d0:	f023 0304 	bic.w	r3, r3, #4
 80060d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80060d6:	4b77      	ldr	r3, [pc, #476]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 80060d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060da:	4a76      	ldr	r2, [pc, #472]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 80060dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d015      	beq.n	8006116 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ea:	f7fb fdd3 	bl	8001c94 <HAL_GetTick>
 80060ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060f0:	e00a      	b.n	8006108 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f2:	f7fb fdcf 	bl	8001c94 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006100:	4293      	cmp	r3, r2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e14c      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006108:	4b6a      	ldr	r3, [pc, #424]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 800610a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0ee      	beq.n	80060f2 <HAL_RCC_OscConfig+0x5a2>
 8006114:	e014      	b.n	8006140 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006116:	f7fb fdbd 	bl	8001c94 <HAL_GetTick>
 800611a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800611c:	e00a      	b.n	8006134 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800611e:	f7fb fdb9 	bl	8001c94 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800612c:	4293      	cmp	r3, r2
 800612e:	d901      	bls.n	8006134 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e136      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006134:	4b5f      	ldr	r3, [pc, #380]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1ee      	bne.n	800611e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 812b 	beq.w	80063a0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800614a:	4b5a      	ldr	r3, [pc, #360]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006152:	2b18      	cmp	r3, #24
 8006154:	f000 80bb 	beq.w	80062ce <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615c:	2b02      	cmp	r3, #2
 800615e:	f040 8095 	bne.w	800628c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006162:	4b54      	ldr	r3, [pc, #336]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a53      	ldr	r2, [pc, #332]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006168:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800616c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616e:	f7fb fd91 	bl	8001c94 <HAL_GetTick>
 8006172:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006176:	f7fb fd8d 	bl	8001c94 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e10c      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006188:	4b4a      	ldr	r3, [pc, #296]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1f0      	bne.n	8006176 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006194:	4b47      	ldr	r3, [pc, #284]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006196:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006198:	4b47      	ldr	r3, [pc, #284]	@ (80062b8 <HAL_RCC_OscConfig+0x768>)
 800619a:	4013      	ands	r3, r2
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80061a4:	0112      	lsls	r2, r2, #4
 80061a6:	430a      	orrs	r2, r1
 80061a8:	4942      	ldr	r1, [pc, #264]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	628b      	str	r3, [r1, #40]	@ 0x28
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b2:	3b01      	subs	r3, #1
 80061b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061bc:	3b01      	subs	r3, #1
 80061be:	025b      	lsls	r3, r3, #9
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c8:	3b01      	subs	r3, #1
 80061ca:	041b      	lsls	r3, r3, #16
 80061cc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061d0:	431a      	orrs	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d6:	3b01      	subs	r3, #1
 80061d8:	061b      	lsls	r3, r3, #24
 80061da:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061de:	4935      	ldr	r1, [pc, #212]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80061e4:	4b33      	ldr	r3, [pc, #204]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 80061e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e8:	4a32      	ldr	r2, [pc, #200]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 80061ea:	f023 0301 	bic.w	r3, r3, #1
 80061ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061f0:	4b30      	ldr	r3, [pc, #192]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 80061f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061f4:	4b31      	ldr	r3, [pc, #196]	@ (80062bc <HAL_RCC_OscConfig+0x76c>)
 80061f6:	4013      	ands	r3, r2
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80061fc:	00d2      	lsls	r2, r2, #3
 80061fe:	492d      	ldr	r1, [pc, #180]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006200:	4313      	orrs	r3, r2
 8006202:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006204:	4b2b      	ldr	r3, [pc, #172]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006208:	f023 020c 	bic.w	r2, r3, #12
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006210:	4928      	ldr	r1, [pc, #160]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006212:	4313      	orrs	r3, r2
 8006214:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006216:	4b27      	ldr	r3, [pc, #156]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621a:	f023 0202 	bic.w	r2, r3, #2
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006222:	4924      	ldr	r1, [pc, #144]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006224:	4313      	orrs	r3, r2
 8006226:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006228:	4b22      	ldr	r3, [pc, #136]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 800622a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622c:	4a21      	ldr	r2, [pc, #132]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 800622e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006234:	4b1f      	ldr	r3, [pc, #124]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006238:	4a1e      	ldr	r2, [pc, #120]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 800623a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800623e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006240:	4b1c      	ldr	r3, [pc, #112]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	4a1b      	ldr	r2, [pc, #108]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006246:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800624a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800624c:	4b19      	ldr	r3, [pc, #100]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 800624e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006250:	4a18      	ldr	r2, [pc, #96]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006252:	f043 0301 	orr.w	r3, r3, #1
 8006256:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006258:	4b16      	ldr	r3, [pc, #88]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a15      	ldr	r2, [pc, #84]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 800625e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006264:	f7fb fd16 	bl	8001c94 <HAL_GetTick>
 8006268:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800626c:	f7fb fd12 	bl	8001c94 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e091      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800627e:	4b0d      	ldr	r3, [pc, #52]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f0      	beq.n	800626c <HAL_RCC_OscConfig+0x71c>
 800628a:	e089      	b.n	80063a0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800628c:	4b09      	ldr	r3, [pc, #36]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a08      	ldr	r2, [pc, #32]	@ (80062b4 <HAL_RCC_OscConfig+0x764>)
 8006292:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006298:	f7fb fcfc 	bl	8001c94 <HAL_GetTick>
 800629c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800629e:	e00f      	b.n	80062c0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a0:	f7fb fcf8 	bl	8001c94 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d908      	bls.n	80062c0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e077      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
 80062b2:	bf00      	nop
 80062b4:	58024400 	.word	0x58024400
 80062b8:	fffffc0c 	.word	0xfffffc0c
 80062bc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062c0:	4b3a      	ldr	r3, [pc, #232]	@ (80063ac <HAL_RCC_OscConfig+0x85c>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e9      	bne.n	80062a0 <HAL_RCC_OscConfig+0x750>
 80062cc:	e068      	b.n	80063a0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80062ce:	4b37      	ldr	r3, [pc, #220]	@ (80063ac <HAL_RCC_OscConfig+0x85c>)
 80062d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80062d4:	4b35      	ldr	r3, [pc, #212]	@ (80063ac <HAL_RCC_OscConfig+0x85c>)
 80062d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d031      	beq.n	8006346 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f003 0203 	and.w	r2, r3, #3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d12a      	bne.n	8006346 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	091b      	lsrs	r3, r3, #4
 80062f4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d122      	bne.n	8006346 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800630c:	429a      	cmp	r2, r3
 800630e:	d11a      	bne.n	8006346 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	0a5b      	lsrs	r3, r3, #9
 8006314:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800631c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800631e:	429a      	cmp	r2, r3
 8006320:	d111      	bne.n	8006346 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	0c1b      	lsrs	r3, r3, #16
 8006326:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006330:	429a      	cmp	r2, r3
 8006332:	d108      	bne.n	8006346 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	0e1b      	lsrs	r3, r3, #24
 8006338:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006340:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006342:	429a      	cmp	r2, r3
 8006344:	d001      	beq.n	800634a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e02b      	b.n	80063a2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800634a:	4b18      	ldr	r3, [pc, #96]	@ (80063ac <HAL_RCC_OscConfig+0x85c>)
 800634c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800634e:	08db      	lsrs	r3, r3, #3
 8006350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006354:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	429a      	cmp	r2, r3
 800635e:	d01f      	beq.n	80063a0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006360:	4b12      	ldr	r3, [pc, #72]	@ (80063ac <HAL_RCC_OscConfig+0x85c>)
 8006362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006364:	4a11      	ldr	r2, [pc, #68]	@ (80063ac <HAL_RCC_OscConfig+0x85c>)
 8006366:	f023 0301 	bic.w	r3, r3, #1
 800636a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800636c:	f7fb fc92 	bl	8001c94 <HAL_GetTick>
 8006370:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006372:	bf00      	nop
 8006374:	f7fb fc8e 	bl	8001c94 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	4293      	cmp	r3, r2
 800637e:	d0f9      	beq.n	8006374 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006380:	4b0a      	ldr	r3, [pc, #40]	@ (80063ac <HAL_RCC_OscConfig+0x85c>)
 8006382:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006384:	4b0a      	ldr	r3, [pc, #40]	@ (80063b0 <HAL_RCC_OscConfig+0x860>)
 8006386:	4013      	ands	r3, r2
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800638c:	00d2      	lsls	r2, r2, #3
 800638e:	4907      	ldr	r1, [pc, #28]	@ (80063ac <HAL_RCC_OscConfig+0x85c>)
 8006390:	4313      	orrs	r3, r2
 8006392:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006394:	4b05      	ldr	r3, [pc, #20]	@ (80063ac <HAL_RCC_OscConfig+0x85c>)
 8006396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006398:	4a04      	ldr	r2, [pc, #16]	@ (80063ac <HAL_RCC_OscConfig+0x85c>)
 800639a:	f043 0301 	orr.w	r3, r3, #1
 800639e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3730      	adds	r7, #48	@ 0x30
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	58024400 	.word	0x58024400
 80063b0:	ffff0007 	.word	0xffff0007

080063b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e19c      	b.n	8006702 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063c8:	4b8a      	ldr	r3, [pc, #552]	@ (80065f4 <HAL_RCC_ClockConfig+0x240>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 030f 	and.w	r3, r3, #15
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d910      	bls.n	80063f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063d6:	4b87      	ldr	r3, [pc, #540]	@ (80065f4 <HAL_RCC_ClockConfig+0x240>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f023 020f 	bic.w	r2, r3, #15
 80063de:	4985      	ldr	r1, [pc, #532]	@ (80065f4 <HAL_RCC_ClockConfig+0x240>)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063e6:	4b83      	ldr	r3, [pc, #524]	@ (80065f4 <HAL_RCC_ClockConfig+0x240>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d001      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e184      	b.n	8006702 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b00      	cmp	r3, #0
 8006402:	d010      	beq.n	8006426 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	4b7b      	ldr	r3, [pc, #492]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006410:	429a      	cmp	r2, r3
 8006412:	d908      	bls.n	8006426 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006414:	4b78      	ldr	r3, [pc, #480]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	4975      	ldr	r1, [pc, #468]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 8006422:	4313      	orrs	r3, r2
 8006424:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d010      	beq.n	8006454 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	695a      	ldr	r2, [r3, #20]
 8006436:	4b70      	ldr	r3, [pc, #448]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800643e:	429a      	cmp	r2, r3
 8006440:	d908      	bls.n	8006454 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006442:	4b6d      	ldr	r3, [pc, #436]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	496a      	ldr	r1, [pc, #424]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 8006450:	4313      	orrs	r3, r2
 8006452:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0310 	and.w	r3, r3, #16
 800645c:	2b00      	cmp	r3, #0
 800645e:	d010      	beq.n	8006482 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	699a      	ldr	r2, [r3, #24]
 8006464:	4b64      	ldr	r3, [pc, #400]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800646c:	429a      	cmp	r2, r3
 800646e:	d908      	bls.n	8006482 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006470:	4b61      	ldr	r3, [pc, #388]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	495e      	ldr	r1, [pc, #376]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 800647e:	4313      	orrs	r3, r2
 8006480:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0320 	and.w	r3, r3, #32
 800648a:	2b00      	cmp	r3, #0
 800648c:	d010      	beq.n	80064b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69da      	ldr	r2, [r3, #28]
 8006492:	4b59      	ldr	r3, [pc, #356]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800649a:	429a      	cmp	r2, r3
 800649c:	d908      	bls.n	80064b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800649e:	4b56      	ldr	r3, [pc, #344]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	4953      	ldr	r1, [pc, #332]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d010      	beq.n	80064de <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68da      	ldr	r2, [r3, #12]
 80064c0:	4b4d      	ldr	r3, [pc, #308]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	f003 030f 	and.w	r3, r3, #15
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d908      	bls.n	80064de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064cc:	4b4a      	ldr	r3, [pc, #296]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	f023 020f 	bic.w	r2, r3, #15
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	4947      	ldr	r1, [pc, #284]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d055      	beq.n	8006596 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80064ea:	4b43      	ldr	r3, [pc, #268]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	4940      	ldr	r1, [pc, #256]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2b02      	cmp	r3, #2
 8006502:	d107      	bne.n	8006514 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006504:	4b3c      	ldr	r3, [pc, #240]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d121      	bne.n	8006554 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e0f6      	b.n	8006702 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	2b03      	cmp	r3, #3
 800651a:	d107      	bne.n	800652c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800651c:	4b36      	ldr	r3, [pc, #216]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d115      	bne.n	8006554 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e0ea      	b.n	8006702 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d107      	bne.n	8006544 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006534:	4b30      	ldr	r3, [pc, #192]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800653c:	2b00      	cmp	r3, #0
 800653e:	d109      	bne.n	8006554 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e0de      	b.n	8006702 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006544:	4b2c      	ldr	r3, [pc, #176]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e0d6      	b.n	8006702 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006554:	4b28      	ldr	r3, [pc, #160]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	f023 0207 	bic.w	r2, r3, #7
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	4925      	ldr	r1, [pc, #148]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 8006562:	4313      	orrs	r3, r2
 8006564:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006566:	f7fb fb95 	bl	8001c94 <HAL_GetTick>
 800656a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800656c:	e00a      	b.n	8006584 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800656e:	f7fb fb91 	bl	8001c94 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800657c:	4293      	cmp	r3, r2
 800657e:	d901      	bls.n	8006584 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e0be      	b.n	8006702 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006584:	4b1c      	ldr	r3, [pc, #112]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	00db      	lsls	r3, r3, #3
 8006592:	429a      	cmp	r2, r3
 8006594:	d1eb      	bne.n	800656e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d010      	beq.n	80065c4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	4b14      	ldr	r3, [pc, #80]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d208      	bcs.n	80065c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065b2:	4b11      	ldr	r3, [pc, #68]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	f023 020f 	bic.w	r2, r3, #15
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	490e      	ldr	r1, [pc, #56]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065c4:	4b0b      	ldr	r3, [pc, #44]	@ (80065f4 <HAL_RCC_ClockConfig+0x240>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 030f 	and.w	r3, r3, #15
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d214      	bcs.n	80065fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065d2:	4b08      	ldr	r3, [pc, #32]	@ (80065f4 <HAL_RCC_ClockConfig+0x240>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f023 020f 	bic.w	r2, r3, #15
 80065da:	4906      	ldr	r1, [pc, #24]	@ (80065f4 <HAL_RCC_ClockConfig+0x240>)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	4313      	orrs	r3, r2
 80065e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065e2:	4b04      	ldr	r3, [pc, #16]	@ (80065f4 <HAL_RCC_ClockConfig+0x240>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 030f 	and.w	r3, r3, #15
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d005      	beq.n	80065fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e086      	b.n	8006702 <HAL_RCC_ClockConfig+0x34e>
 80065f4:	52002000 	.word	0x52002000
 80065f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d010      	beq.n	800662a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691a      	ldr	r2, [r3, #16]
 800660c:	4b3f      	ldr	r3, [pc, #252]	@ (800670c <HAL_RCC_ClockConfig+0x358>)
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006614:	429a      	cmp	r2, r3
 8006616:	d208      	bcs.n	800662a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006618:	4b3c      	ldr	r3, [pc, #240]	@ (800670c <HAL_RCC_ClockConfig+0x358>)
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	4939      	ldr	r1, [pc, #228]	@ (800670c <HAL_RCC_ClockConfig+0x358>)
 8006626:	4313      	orrs	r3, r2
 8006628:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0308 	and.w	r3, r3, #8
 8006632:	2b00      	cmp	r3, #0
 8006634:	d010      	beq.n	8006658 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	695a      	ldr	r2, [r3, #20]
 800663a:	4b34      	ldr	r3, [pc, #208]	@ (800670c <HAL_RCC_ClockConfig+0x358>)
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006642:	429a      	cmp	r2, r3
 8006644:	d208      	bcs.n	8006658 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006646:	4b31      	ldr	r3, [pc, #196]	@ (800670c <HAL_RCC_ClockConfig+0x358>)
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	492e      	ldr	r1, [pc, #184]	@ (800670c <HAL_RCC_ClockConfig+0x358>)
 8006654:	4313      	orrs	r3, r2
 8006656:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0310 	and.w	r3, r3, #16
 8006660:	2b00      	cmp	r3, #0
 8006662:	d010      	beq.n	8006686 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699a      	ldr	r2, [r3, #24]
 8006668:	4b28      	ldr	r3, [pc, #160]	@ (800670c <HAL_RCC_ClockConfig+0x358>)
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006670:	429a      	cmp	r2, r3
 8006672:	d208      	bcs.n	8006686 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006674:	4b25      	ldr	r3, [pc, #148]	@ (800670c <HAL_RCC_ClockConfig+0x358>)
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	4922      	ldr	r1, [pc, #136]	@ (800670c <HAL_RCC_ClockConfig+0x358>)
 8006682:	4313      	orrs	r3, r2
 8006684:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b00      	cmp	r3, #0
 8006690:	d010      	beq.n	80066b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69da      	ldr	r2, [r3, #28]
 8006696:	4b1d      	ldr	r3, [pc, #116]	@ (800670c <HAL_RCC_ClockConfig+0x358>)
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800669e:	429a      	cmp	r2, r3
 80066a0:	d208      	bcs.n	80066b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066a2:	4b1a      	ldr	r3, [pc, #104]	@ (800670c <HAL_RCC_ClockConfig+0x358>)
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	4917      	ldr	r1, [pc, #92]	@ (800670c <HAL_RCC_ClockConfig+0x358>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80066b4:	f000 f834 	bl	8006720 <HAL_RCC_GetSysClockFreq>
 80066b8:	4602      	mov	r2, r0
 80066ba:	4b14      	ldr	r3, [pc, #80]	@ (800670c <HAL_RCC_ClockConfig+0x358>)
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	0a1b      	lsrs	r3, r3, #8
 80066c0:	f003 030f 	and.w	r3, r3, #15
 80066c4:	4912      	ldr	r1, [pc, #72]	@ (8006710 <HAL_RCC_ClockConfig+0x35c>)
 80066c6:	5ccb      	ldrb	r3, [r1, r3]
 80066c8:	f003 031f 	and.w	r3, r3, #31
 80066cc:	fa22 f303 	lsr.w	r3, r2, r3
 80066d0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80066d2:	4b0e      	ldr	r3, [pc, #56]	@ (800670c <HAL_RCC_ClockConfig+0x358>)
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	4a0d      	ldr	r2, [pc, #52]	@ (8006710 <HAL_RCC_ClockConfig+0x35c>)
 80066dc:	5cd3      	ldrb	r3, [r2, r3]
 80066de:	f003 031f 	and.w	r3, r3, #31
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	fa22 f303 	lsr.w	r3, r2, r3
 80066e8:	4a0a      	ldr	r2, [pc, #40]	@ (8006714 <HAL_RCC_ClockConfig+0x360>)
 80066ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066ec:	4a0a      	ldr	r2, [pc, #40]	@ (8006718 <HAL_RCC_ClockConfig+0x364>)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80066f2:	4b0a      	ldr	r3, [pc, #40]	@ (800671c <HAL_RCC_ClockConfig+0x368>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fb fa82 	bl	8001c00 <HAL_InitTick>
 80066fc:	4603      	mov	r3, r0
 80066fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006700:	7bfb      	ldrb	r3, [r7, #15]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	58024400 	.word	0x58024400
 8006710:	0800d9d0 	.word	0x0800d9d0
 8006714:	24000004 	.word	0x24000004
 8006718:	24000000 	.word	0x24000000
 800671c:	24000008 	.word	0x24000008

08006720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006720:	b480      	push	{r7}
 8006722:	b089      	sub	sp, #36	@ 0x24
 8006724:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006726:	4bb3      	ldr	r3, [pc, #716]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800672e:	2b18      	cmp	r3, #24
 8006730:	f200 8155 	bhi.w	80069de <HAL_RCC_GetSysClockFreq+0x2be>
 8006734:	a201      	add	r2, pc, #4	@ (adr r2, 800673c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673a:	bf00      	nop
 800673c:	080067a1 	.word	0x080067a1
 8006740:	080069df 	.word	0x080069df
 8006744:	080069df 	.word	0x080069df
 8006748:	080069df 	.word	0x080069df
 800674c:	080069df 	.word	0x080069df
 8006750:	080069df 	.word	0x080069df
 8006754:	080069df 	.word	0x080069df
 8006758:	080069df 	.word	0x080069df
 800675c:	080067c7 	.word	0x080067c7
 8006760:	080069df 	.word	0x080069df
 8006764:	080069df 	.word	0x080069df
 8006768:	080069df 	.word	0x080069df
 800676c:	080069df 	.word	0x080069df
 8006770:	080069df 	.word	0x080069df
 8006774:	080069df 	.word	0x080069df
 8006778:	080069df 	.word	0x080069df
 800677c:	080067cd 	.word	0x080067cd
 8006780:	080069df 	.word	0x080069df
 8006784:	080069df 	.word	0x080069df
 8006788:	080069df 	.word	0x080069df
 800678c:	080069df 	.word	0x080069df
 8006790:	080069df 	.word	0x080069df
 8006794:	080069df 	.word	0x080069df
 8006798:	080069df 	.word	0x080069df
 800679c:	080067d3 	.word	0x080067d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067a0:	4b94      	ldr	r3, [pc, #592]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d009      	beq.n	80067c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067ac:	4b91      	ldr	r3, [pc, #580]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	08db      	lsrs	r3, r3, #3
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	4a90      	ldr	r2, [pc, #576]	@ (80069f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067b8:	fa22 f303 	lsr.w	r3, r2, r3
 80067bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80067be:	e111      	b.n	80069e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80067c0:	4b8d      	ldr	r3, [pc, #564]	@ (80069f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067c2:	61bb      	str	r3, [r7, #24]
      break;
 80067c4:	e10e      	b.n	80069e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80067c6:	4b8d      	ldr	r3, [pc, #564]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80067c8:	61bb      	str	r3, [r7, #24]
      break;
 80067ca:	e10b      	b.n	80069e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80067cc:	4b8c      	ldr	r3, [pc, #560]	@ (8006a00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80067ce:	61bb      	str	r3, [r7, #24]
      break;
 80067d0:	e108      	b.n	80069e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067d2:	4b88      	ldr	r3, [pc, #544]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80067dc:	4b85      	ldr	r3, [pc, #532]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e0:	091b      	lsrs	r3, r3, #4
 80067e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80067e8:	4b82      	ldr	r3, [pc, #520]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80067f2:	4b80      	ldr	r3, [pc, #512]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067f6:	08db      	lsrs	r3, r3, #3
 80067f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	fb02 f303 	mul.w	r3, r2, r3
 8006802:	ee07 3a90 	vmov	s15, r3
 8006806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 80e1 	beq.w	80069d8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	2b02      	cmp	r3, #2
 800681a:	f000 8083 	beq.w	8006924 <HAL_RCC_GetSysClockFreq+0x204>
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2b02      	cmp	r3, #2
 8006822:	f200 80a1 	bhi.w	8006968 <HAL_RCC_GetSysClockFreq+0x248>
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <HAL_RCC_GetSysClockFreq+0x114>
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d056      	beq.n	80068e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006832:	e099      	b.n	8006968 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006834:	4b6f      	ldr	r3, [pc, #444]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0320 	and.w	r3, r3, #32
 800683c:	2b00      	cmp	r3, #0
 800683e:	d02d      	beq.n	800689c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006840:	4b6c      	ldr	r3, [pc, #432]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	08db      	lsrs	r3, r3, #3
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	4a6b      	ldr	r2, [pc, #428]	@ (80069f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800684c:	fa22 f303 	lsr.w	r3, r2, r3
 8006850:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	ee07 3a90 	vmov	s15, r3
 8006858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	ee07 3a90 	vmov	s15, r3
 8006862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800686a:	4b62      	ldr	r3, [pc, #392]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800686c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800686e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006872:	ee07 3a90 	vmov	s15, r3
 8006876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800687a:	ed97 6a02 	vldr	s12, [r7, #8]
 800687e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006a04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800688a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800688e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006896:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800689a:	e087      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006a08 <HAL_RCC_GetSysClockFreq+0x2e8>
 80068aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ae:	4b51      	ldr	r3, [pc, #324]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068be:	ed97 6a02 	vldr	s12, [r7, #8]
 80068c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006a04 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068de:	e065      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006a0c <HAL_RCC_GetSysClockFreq+0x2ec>
 80068ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068f2:	4b40      	ldr	r3, [pc, #256]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006902:	ed97 6a02 	vldr	s12, [r7, #8]
 8006906:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006a04 <HAL_RCC_GetSysClockFreq+0x2e4>
 800690a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800690e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800691a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800691e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006922:	e043      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006a10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006936:	4b2f      	ldr	r3, [pc, #188]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693e:	ee07 3a90 	vmov	s15, r3
 8006942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006946:	ed97 6a02 	vldr	s12, [r7, #8]
 800694a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006a04 <HAL_RCC_GetSysClockFreq+0x2e4>
 800694e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800695a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800695e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006962:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006966:	e021      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006972:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006a0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800697a:	4b1e      	ldr	r3, [pc, #120]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800697c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800697e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006982:	ee07 3a90 	vmov	s15, r3
 8006986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800698a:	ed97 6a02 	vldr	s12, [r7, #8]
 800698e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006a04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800699a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800699e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80069aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80069ac:	4b11      	ldr	r3, [pc, #68]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b0:	0a5b      	lsrs	r3, r3, #9
 80069b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069b6:	3301      	adds	r3, #1
 80069b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	ee07 3a90 	vmov	s15, r3
 80069c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80069c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069d0:	ee17 3a90 	vmov	r3, s15
 80069d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80069d6:	e005      	b.n	80069e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	61bb      	str	r3, [r7, #24]
      break;
 80069dc:	e002      	b.n	80069e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80069de:	4b07      	ldr	r3, [pc, #28]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069e0:	61bb      	str	r3, [r7, #24]
      break;
 80069e2:	bf00      	nop
  }

  return sysclockfreq;
 80069e4:	69bb      	ldr	r3, [r7, #24]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3724      	adds	r7, #36	@ 0x24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	58024400 	.word	0x58024400
 80069f8:	03d09000 	.word	0x03d09000
 80069fc:	003d0900 	.word	0x003d0900
 8006a00:	007a1200 	.word	0x007a1200
 8006a04:	46000000 	.word	0x46000000
 8006a08:	4c742400 	.word	0x4c742400
 8006a0c:	4a742400 	.word	0x4a742400
 8006a10:	4af42400 	.word	0x4af42400

08006a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006a1a:	f7ff fe81 	bl	8006720 <HAL_RCC_GetSysClockFreq>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	4b10      	ldr	r3, [pc, #64]	@ (8006a64 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	0a1b      	lsrs	r3, r3, #8
 8006a26:	f003 030f 	and.w	r3, r3, #15
 8006a2a:	490f      	ldr	r1, [pc, #60]	@ (8006a68 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a2c:	5ccb      	ldrb	r3, [r1, r3]
 8006a2e:	f003 031f 	and.w	r3, r3, #31
 8006a32:	fa22 f303 	lsr.w	r3, r2, r3
 8006a36:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006a38:	4b0a      	ldr	r3, [pc, #40]	@ (8006a64 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	f003 030f 	and.w	r3, r3, #15
 8006a40:	4a09      	ldr	r2, [pc, #36]	@ (8006a68 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a42:	5cd3      	ldrb	r3, [r2, r3]
 8006a44:	f003 031f 	and.w	r3, r3, #31
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a4e:	4a07      	ldr	r2, [pc, #28]	@ (8006a6c <HAL_RCC_GetHCLKFreq+0x58>)
 8006a50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a52:	4a07      	ldr	r2, [pc, #28]	@ (8006a70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006a58:	4b04      	ldr	r3, [pc, #16]	@ (8006a6c <HAL_RCC_GetHCLKFreq+0x58>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	58024400 	.word	0x58024400
 8006a68:	0800d9d0 	.word	0x0800d9d0
 8006a6c:	24000004 	.word	0x24000004
 8006a70:	24000000 	.word	0x24000000

08006a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006a78:	f7ff ffcc 	bl	8006a14 <HAL_RCC_GetHCLKFreq>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	4b06      	ldr	r3, [pc, #24]	@ (8006a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	091b      	lsrs	r3, r3, #4
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	4904      	ldr	r1, [pc, #16]	@ (8006a9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a8a:	5ccb      	ldrb	r3, [r1, r3]
 8006a8c:	f003 031f 	and.w	r3, r3, #31
 8006a90:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	58024400 	.word	0x58024400
 8006a9c:	0800d9d0 	.word	0x0800d9d0

08006aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006aa4:	f7ff ffb6 	bl	8006a14 <HAL_RCC_GetHCLKFreq>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	4b06      	ldr	r3, [pc, #24]	@ (8006ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	0a1b      	lsrs	r3, r3, #8
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	4904      	ldr	r1, [pc, #16]	@ (8006ac8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ab6:	5ccb      	ldrb	r3, [r1, r3]
 8006ab8:	f003 031f 	and.w	r3, r3, #31
 8006abc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	58024400 	.word	0x58024400
 8006ac8:	0800d9d0 	.word	0x0800d9d0

08006acc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ad0:	b0c8      	sub	sp, #288	@ 0x120
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ade:	2300      	movs	r3, #0
 8006ae0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006af0:	2500      	movs	r5, #0
 8006af2:	ea54 0305 	orrs.w	r3, r4, r5
 8006af6:	d049      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006afc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006afe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b02:	d02f      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006b04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b08:	d828      	bhi.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b0e:	d01a      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006b10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b14:	d822      	bhi.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006b1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b1e:	d007      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b20:	e01c      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b22:	4ba7      	ldr	r3, [pc, #668]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b26:	4aa6      	ldr	r2, [pc, #664]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b2e:	e01a      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b34:	3308      	adds	r3, #8
 8006b36:	2102      	movs	r1, #2
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f001 fc43 	bl	80083c4 <RCCEx_PLL2_Config>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b44:	e00f      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b4a:	3328      	adds	r3, #40	@ 0x28
 8006b4c:	2102      	movs	r1, #2
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f001 fcea 	bl	8008528 <RCCEx_PLL3_Config>
 8006b54:	4603      	mov	r3, r0
 8006b56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b5a:	e004      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006b62:	e000      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10a      	bne.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006b6e:	4b94      	ldr	r3, [pc, #592]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b7c:	4a90      	ldr	r2, [pc, #576]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b7e:	430b      	orrs	r3, r1
 8006b80:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b82:	e003      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b88:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006b98:	f04f 0900 	mov.w	r9, #0
 8006b9c:	ea58 0309 	orrs.w	r3, r8, r9
 8006ba0:	d047      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	d82a      	bhi.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006bac:	a201      	add	r2, pc, #4	@ (adr r2, 8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb2:	bf00      	nop
 8006bb4:	08006bc9 	.word	0x08006bc9
 8006bb8:	08006bd7 	.word	0x08006bd7
 8006bbc:	08006bed 	.word	0x08006bed
 8006bc0:	08006c0b 	.word	0x08006c0b
 8006bc4:	08006c0b 	.word	0x08006c0b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc8:	4b7d      	ldr	r3, [pc, #500]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bcc:	4a7c      	ldr	r2, [pc, #496]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bd4:	e01a      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bda:	3308      	adds	r3, #8
 8006bdc:	2100      	movs	r1, #0
 8006bde:	4618      	mov	r0, r3
 8006be0:	f001 fbf0 	bl	80083c4 <RCCEx_PLL2_Config>
 8006be4:	4603      	mov	r3, r0
 8006be6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bea:	e00f      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bf0:	3328      	adds	r3, #40	@ 0x28
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f001 fc97 	bl	8008528 <RCCEx_PLL3_Config>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c00:	e004      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006c08:	e000      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10a      	bne.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c14:	4b6a      	ldr	r3, [pc, #424]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c18:	f023 0107 	bic.w	r1, r3, #7
 8006c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c22:	4a67      	ldr	r2, [pc, #412]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c24:	430b      	orrs	r3, r1
 8006c26:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c28:	e003      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c2e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006c3e:	f04f 0b00 	mov.w	fp, #0
 8006c42:	ea5a 030b 	orrs.w	r3, sl, fp
 8006c46:	d054      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c4e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006c52:	d036      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006c54:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006c58:	d82f      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c5e:	d032      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c64:	d829      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006c66:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c68:	d02f      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006c6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c6c:	d825      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006c6e:	2b80      	cmp	r3, #128	@ 0x80
 8006c70:	d018      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006c72:	2b80      	cmp	r3, #128	@ 0x80
 8006c74:	d821      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006c7a:	2b40      	cmp	r3, #64	@ 0x40
 8006c7c:	d007      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8006c7e:	e01c      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c80:	4b4f      	ldr	r3, [pc, #316]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c84:	4a4e      	ldr	r2, [pc, #312]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006c8c:	e01e      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c92:	3308      	adds	r3, #8
 8006c94:	2100      	movs	r1, #0
 8006c96:	4618      	mov	r0, r3
 8006c98:	f001 fb94 	bl	80083c4 <RCCEx_PLL2_Config>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006ca2:	e013      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ca8:	3328      	adds	r3, #40	@ 0x28
 8006caa:	2100      	movs	r1, #0
 8006cac:	4618      	mov	r0, r3
 8006cae:	f001 fc3b 	bl	8008528 <RCCEx_PLL3_Config>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006cb8:	e008      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006cc0:	e004      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006cc2:	bf00      	nop
 8006cc4:	e002      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006cc6:	bf00      	nop
 8006cc8:	e000      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ccc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10a      	bne.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006cd4:	4b3a      	ldr	r3, [pc, #232]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cd8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ce2:	4a37      	ldr	r2, [pc, #220]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ce4:	430b      	orrs	r3, r1
 8006ce6:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ce8:	e003      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006cfe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006d02:	2300      	movs	r3, #0
 8006d04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006d08:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	d05c      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8006d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d18:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006d1c:	d03b      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006d1e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006d22:	d834      	bhi.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006d24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d28:	d037      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006d2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d2e:	d82e      	bhi.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006d30:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006d34:	d033      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006d36:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006d3a:	d828      	bhi.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d40:	d01a      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d46:	d822      	bhi.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d50:	d007      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006d52:	e01c      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d54:	4b1a      	ldr	r3, [pc, #104]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d58:	4a19      	ldr	r2, [pc, #100]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006d60:	e01e      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d66:	3308      	adds	r3, #8
 8006d68:	2100      	movs	r1, #0
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f001 fb2a 	bl	80083c4 <RCCEx_PLL2_Config>
 8006d70:	4603      	mov	r3, r0
 8006d72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006d76:	e013      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d7c:	3328      	adds	r3, #40	@ 0x28
 8006d7e:	2100      	movs	r1, #0
 8006d80:	4618      	mov	r0, r3
 8006d82:	f001 fbd1 	bl	8008528 <RCCEx_PLL3_Config>
 8006d86:	4603      	mov	r3, r0
 8006d88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006d8c:	e008      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006d94:	e004      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006d96:	bf00      	nop
 8006d98:	e002      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006d9a:	bf00      	nop
 8006d9c:	e000      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006da0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10d      	bne.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006da8:	4b05      	ldr	r3, [pc, #20]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dac:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006db6:	4a02      	ldr	r2, [pc, #8]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006db8:	430b      	orrs	r3, r1
 8006dba:	6513      	str	r3, [r2, #80]	@ 0x50
 8006dbc:	e006      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006dbe:	bf00      	nop
 8006dc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006dc8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006de2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006de6:	460b      	mov	r3, r1
 8006de8:	4313      	orrs	r3, r2
 8006dea:	d03a      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006df2:	2b30      	cmp	r3, #48	@ 0x30
 8006df4:	d01f      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006df6:	2b30      	cmp	r3, #48	@ 0x30
 8006df8:	d819      	bhi.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006dfa:	2b20      	cmp	r3, #32
 8006dfc:	d00c      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006dfe:	2b20      	cmp	r3, #32
 8006e00:	d815      	bhi.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d019      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006e06:	2b10      	cmp	r3, #16
 8006e08:	d111      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e0a:	4bae      	ldr	r3, [pc, #696]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0e:	4aad      	ldr	r2, [pc, #692]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006e16:	e011      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	2102      	movs	r1, #2
 8006e20:	4618      	mov	r0, r3
 8006e22:	f001 facf 	bl	80083c4 <RCCEx_PLL2_Config>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006e2c:	e006      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006e34:	e002      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006e36:	bf00      	nop
 8006e38:	e000      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10a      	bne.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006e44:	4b9f      	ldr	r3, [pc, #636]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e48:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e52:	4a9c      	ldr	r2, [pc, #624]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e54:	430b      	orrs	r3, r1
 8006e56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e58:	e003      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e5e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006e6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e72:	2300      	movs	r3, #0
 8006e74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e78:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	d051      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e8c:	d035      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006e8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e92:	d82e      	bhi.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006e94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e98:	d031      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x432>
 8006e9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e9e:	d828      	bhi.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006ea0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ea4:	d01a      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006ea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eaa:	d822      	bhi.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006eb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eb4:	d007      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006eb6:	e01c      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eb8:	4b82      	ldr	r3, [pc, #520]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebc:	4a81      	ldr	r2, [pc, #516]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ebe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ec2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ec4:	e01c      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eca:	3308      	adds	r3, #8
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f001 fa78 	bl	80083c4 <RCCEx_PLL2_Config>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006eda:	e011      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ee0:	3328      	adds	r3, #40	@ 0x28
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f001 fb1f 	bl	8008528 <RCCEx_PLL3_Config>
 8006eea:	4603      	mov	r3, r0
 8006eec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ef0:	e006      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006ef8:	e002      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006efa:	bf00      	nop
 8006efc:	e000      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10a      	bne.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f08:	4b6e      	ldr	r3, [pc, #440]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f0c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f16:	4a6b      	ldr	r2, [pc, #428]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f18:	430b      	orrs	r3, r1
 8006f1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f1c:	e003      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006f32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f36:	2300      	movs	r3, #0
 8006f38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006f40:	460b      	mov	r3, r1
 8006f42:	4313      	orrs	r3, r2
 8006f44:	d053      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f50:	d033      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006f52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f56:	d82c      	bhi.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006f58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f5c:	d02f      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006f5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f62:	d826      	bhi.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006f64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f68:	d02b      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006f6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f6e:	d820      	bhi.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006f70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f74:	d012      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006f76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f7a:	d81a      	bhi.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d022      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f84:	d115      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f001 fa18 	bl	80083c4 <RCCEx_PLL2_Config>
 8006f94:	4603      	mov	r3, r0
 8006f96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f9a:	e015      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fa0:	3328      	adds	r3, #40	@ 0x28
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f001 fabf 	bl	8008528 <RCCEx_PLL3_Config>
 8006faa:	4603      	mov	r3, r0
 8006fac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006fb0:	e00a      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006fb8:	e006      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006fba:	bf00      	nop
 8006fbc:	e004      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006fbe:	bf00      	nop
 8006fc0:	e002      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006fc2:	bf00      	nop
 8006fc4:	e000      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fc8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10a      	bne.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fd4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fde:	4a39      	ldr	r2, [pc, #228]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006fe0:	430b      	orrs	r3, r1
 8006fe2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fe4:	e003      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006fea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006ffa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ffe:	2300      	movs	r3, #0
 8007000:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007004:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007008:	460b      	mov	r3, r1
 800700a:	4313      	orrs	r3, r2
 800700c:	d060      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800700e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007012:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007016:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800701a:	d039      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800701c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007020:	d832      	bhi.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007022:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007026:	d035      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007028:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800702c:	d82c      	bhi.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800702e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007032:	d031      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007038:	d826      	bhi.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800703a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800703e:	d02d      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007040:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007044:	d820      	bhi.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800704a:	d012      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800704c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007050:	d81a      	bhi.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007052:	2b00      	cmp	r3, #0
 8007054:	d024      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007056:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800705a:	d115      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800705c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007060:	3308      	adds	r3, #8
 8007062:	2101      	movs	r1, #1
 8007064:	4618      	mov	r0, r3
 8007066:	f001 f9ad 	bl	80083c4 <RCCEx_PLL2_Config>
 800706a:	4603      	mov	r3, r0
 800706c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007070:	e017      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007076:	3328      	adds	r3, #40	@ 0x28
 8007078:	2101      	movs	r1, #1
 800707a:	4618      	mov	r0, r3
 800707c:	f001 fa54 	bl	8008528 <RCCEx_PLL3_Config>
 8007080:	4603      	mov	r3, r0
 8007082:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007086:	e00c      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800708e:	e008      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007090:	bf00      	nop
 8007092:	e006      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007094:	bf00      	nop
 8007096:	e004      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007098:	bf00      	nop
 800709a:	e002      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800709c:	bf00      	nop
 800709e:	e000      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80070a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10e      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80070aa:	4b06      	ldr	r3, [pc, #24]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80070b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80070ba:	4a02      	ldr	r2, [pc, #8]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070bc:	430b      	orrs	r3, r1
 80070be:	6593      	str	r3, [r2, #88]	@ 0x58
 80070c0:	e006      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80070c2:	bf00      	nop
 80070c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80070d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80070dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80070e0:	2300      	movs	r3, #0
 80070e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80070e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80070ea:	460b      	mov	r3, r1
 80070ec:	4313      	orrs	r3, r2
 80070ee:	d037      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80070f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070fa:	d00e      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80070fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007100:	d816      	bhi.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007102:	2b00      	cmp	r3, #0
 8007104:	d018      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007106:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800710a:	d111      	bne.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800710c:	4bc4      	ldr	r3, [pc, #784]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800710e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007110:	4ac3      	ldr	r2, [pc, #780]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007116:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007118:	e00f      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800711a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800711e:	3308      	adds	r3, #8
 8007120:	2101      	movs	r1, #1
 8007122:	4618      	mov	r0, r3
 8007124:	f001 f94e 	bl	80083c4 <RCCEx_PLL2_Config>
 8007128:	4603      	mov	r3, r0
 800712a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800712e:	e004      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007136:	e000      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800713a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10a      	bne.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007142:	4bb7      	ldr	r3, [pc, #732]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007146:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800714a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800714e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007150:	4ab3      	ldr	r2, [pc, #716]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007152:	430b      	orrs	r3, r1
 8007154:	6513      	str	r3, [r2, #80]	@ 0x50
 8007156:	e003      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007158:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800715c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800716c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007170:	2300      	movs	r3, #0
 8007172:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007176:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800717a:	460b      	mov	r3, r1
 800717c:	4313      	orrs	r3, r2
 800717e:	d039      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007186:	2b03      	cmp	r3, #3
 8007188:	d81c      	bhi.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800718a:	a201      	add	r2, pc, #4	@ (adr r2, 8007190 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800718c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007190:	080071cd 	.word	0x080071cd
 8007194:	080071a1 	.word	0x080071a1
 8007198:	080071af 	.word	0x080071af
 800719c:	080071cd 	.word	0x080071cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071a0:	4b9f      	ldr	r3, [pc, #636]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a4:	4a9e      	ldr	r2, [pc, #632]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80071ac:	e00f      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071b2:	3308      	adds	r3, #8
 80071b4:	2102      	movs	r1, #2
 80071b6:	4618      	mov	r0, r3
 80071b8:	f001 f904 	bl	80083c4 <RCCEx_PLL2_Config>
 80071bc:	4603      	mov	r3, r0
 80071be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80071c2:	e004      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80071ca:	e000      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80071cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10a      	bne.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80071d6:	4b92      	ldr	r3, [pc, #584]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071da:	f023 0103 	bic.w	r1, r3, #3
 80071de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071e4:	4a8e      	ldr	r2, [pc, #568]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071e6:	430b      	orrs	r3, r1
 80071e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071ea:	e003      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007200:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007204:	2300      	movs	r3, #0
 8007206:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800720a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800720e:	460b      	mov	r3, r1
 8007210:	4313      	orrs	r3, r2
 8007212:	f000 8099 	beq.w	8007348 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007216:	4b83      	ldr	r3, [pc, #524]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a82      	ldr	r2, [pc, #520]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800721c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007220:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007222:	f7fa fd37 	bl	8001c94 <HAL_GetTick>
 8007226:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800722a:	e00b      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800722c:	f7fa fd32 	bl	8001c94 <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	2b64      	cmp	r3, #100	@ 0x64
 800723a:	d903      	bls.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007242:	e005      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007244:	4b77      	ldr	r3, [pc, #476]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800724c:	2b00      	cmp	r3, #0
 800724e:	d0ed      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007250:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007254:	2b00      	cmp	r3, #0
 8007256:	d173      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007258:	4b71      	ldr	r3, [pc, #452]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800725a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800725c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007260:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007264:	4053      	eors	r3, r2
 8007266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800726a:	2b00      	cmp	r3, #0
 800726c:	d015      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800726e:	4b6c      	ldr	r3, [pc, #432]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007276:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800727a:	4b69      	ldr	r3, [pc, #420]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800727c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800727e:	4a68      	ldr	r2, [pc, #416]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007284:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007286:	4b66      	ldr	r3, [pc, #408]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800728a:	4a65      	ldr	r2, [pc, #404]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800728c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007290:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007292:	4a63      	ldr	r2, [pc, #396]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007298:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800729a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800729e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80072a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072a6:	d118      	bne.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a8:	f7fa fcf4 	bl	8001c94 <HAL_GetTick>
 80072ac:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072b0:	e00d      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072b2:	f7fa fcef 	bl	8001c94 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80072bc:	1ad2      	subs	r2, r2, r3
 80072be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d903      	bls.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80072cc:	e005      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072ce:	4b54      	ldr	r3, [pc, #336]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d0eb      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80072da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d129      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80072ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072f2:	d10e      	bne.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80072f4:	4b4a      	ldr	r3, [pc, #296]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80072fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007300:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007304:	091a      	lsrs	r2, r3, #4
 8007306:	4b48      	ldr	r3, [pc, #288]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007308:	4013      	ands	r3, r2
 800730a:	4a45      	ldr	r2, [pc, #276]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800730c:	430b      	orrs	r3, r1
 800730e:	6113      	str	r3, [r2, #16]
 8007310:	e005      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007312:	4b43      	ldr	r3, [pc, #268]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	4a42      	ldr	r2, [pc, #264]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007318:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800731c:	6113      	str	r3, [r2, #16]
 800731e:	4b40      	ldr	r3, [pc, #256]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007320:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007322:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007326:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800732a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800732e:	4a3c      	ldr	r2, [pc, #240]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007330:	430b      	orrs	r3, r1
 8007332:	6713      	str	r3, [r2, #112]	@ 0x70
 8007334:	e008      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007336:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800733a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800733e:	e003      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007340:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007344:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007348:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	f002 0301 	and.w	r3, r2, #1
 8007354:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007358:	2300      	movs	r3, #0
 800735a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800735e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007362:	460b      	mov	r3, r1
 8007364:	4313      	orrs	r3, r2
 8007366:	f000 8090 	beq.w	800748a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800736a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800736e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007372:	2b28      	cmp	r3, #40	@ 0x28
 8007374:	d870      	bhi.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007376:	a201      	add	r2, pc, #4	@ (adr r2, 800737c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737c:	08007461 	.word	0x08007461
 8007380:	08007459 	.word	0x08007459
 8007384:	08007459 	.word	0x08007459
 8007388:	08007459 	.word	0x08007459
 800738c:	08007459 	.word	0x08007459
 8007390:	08007459 	.word	0x08007459
 8007394:	08007459 	.word	0x08007459
 8007398:	08007459 	.word	0x08007459
 800739c:	0800742d 	.word	0x0800742d
 80073a0:	08007459 	.word	0x08007459
 80073a4:	08007459 	.word	0x08007459
 80073a8:	08007459 	.word	0x08007459
 80073ac:	08007459 	.word	0x08007459
 80073b0:	08007459 	.word	0x08007459
 80073b4:	08007459 	.word	0x08007459
 80073b8:	08007459 	.word	0x08007459
 80073bc:	08007443 	.word	0x08007443
 80073c0:	08007459 	.word	0x08007459
 80073c4:	08007459 	.word	0x08007459
 80073c8:	08007459 	.word	0x08007459
 80073cc:	08007459 	.word	0x08007459
 80073d0:	08007459 	.word	0x08007459
 80073d4:	08007459 	.word	0x08007459
 80073d8:	08007459 	.word	0x08007459
 80073dc:	08007461 	.word	0x08007461
 80073e0:	08007459 	.word	0x08007459
 80073e4:	08007459 	.word	0x08007459
 80073e8:	08007459 	.word	0x08007459
 80073ec:	08007459 	.word	0x08007459
 80073f0:	08007459 	.word	0x08007459
 80073f4:	08007459 	.word	0x08007459
 80073f8:	08007459 	.word	0x08007459
 80073fc:	08007461 	.word	0x08007461
 8007400:	08007459 	.word	0x08007459
 8007404:	08007459 	.word	0x08007459
 8007408:	08007459 	.word	0x08007459
 800740c:	08007459 	.word	0x08007459
 8007410:	08007459 	.word	0x08007459
 8007414:	08007459 	.word	0x08007459
 8007418:	08007459 	.word	0x08007459
 800741c:	08007461 	.word	0x08007461
 8007420:	58024400 	.word	0x58024400
 8007424:	58024800 	.word	0x58024800
 8007428:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800742c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007430:	3308      	adds	r3, #8
 8007432:	2101      	movs	r1, #1
 8007434:	4618      	mov	r0, r3
 8007436:	f000 ffc5 	bl	80083c4 <RCCEx_PLL2_Config>
 800743a:	4603      	mov	r3, r0
 800743c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007440:	e00f      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007446:	3328      	adds	r3, #40	@ 0x28
 8007448:	2101      	movs	r1, #1
 800744a:	4618      	mov	r0, r3
 800744c:	f001 f86c 	bl	8008528 <RCCEx_PLL3_Config>
 8007450:	4603      	mov	r3, r0
 8007452:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007456:	e004      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800745e:	e000      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007462:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10b      	bne.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800746a:	4bc0      	ldr	r3, [pc, #768]	@ (800776c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800746c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800746e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800747a:	4abc      	ldr	r2, [pc, #752]	@ (800776c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800747c:	430b      	orrs	r3, r1
 800747e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007480:	e003      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007482:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007486:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800748a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800748e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007492:	f002 0302 	and.w	r3, r2, #2
 8007496:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800749a:	2300      	movs	r3, #0
 800749c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80074a0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80074a4:	460b      	mov	r3, r1
 80074a6:	4313      	orrs	r3, r2
 80074a8:	d043      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80074aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074b2:	2b05      	cmp	r3, #5
 80074b4:	d824      	bhi.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80074b6:	a201      	add	r2, pc, #4	@ (adr r2, 80074bc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	08007509 	.word	0x08007509
 80074c0:	080074d5 	.word	0x080074d5
 80074c4:	080074eb 	.word	0x080074eb
 80074c8:	08007509 	.word	0x08007509
 80074cc:	08007509 	.word	0x08007509
 80074d0:	08007509 	.word	0x08007509
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074d8:	3308      	adds	r3, #8
 80074da:	2101      	movs	r1, #1
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 ff71 	bl	80083c4 <RCCEx_PLL2_Config>
 80074e2:	4603      	mov	r3, r0
 80074e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80074e8:	e00f      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074ee:	3328      	adds	r3, #40	@ 0x28
 80074f0:	2101      	movs	r1, #1
 80074f2:	4618      	mov	r0, r3
 80074f4:	f001 f818 	bl	8008528 <RCCEx_PLL3_Config>
 80074f8:	4603      	mov	r3, r0
 80074fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80074fe:	e004      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007506:	e000      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800750a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10b      	bne.n	800752a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007512:	4b96      	ldr	r3, [pc, #600]	@ (800776c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007516:	f023 0107 	bic.w	r1, r3, #7
 800751a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800751e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007522:	4a92      	ldr	r2, [pc, #584]	@ (800776c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007524:	430b      	orrs	r3, r1
 8007526:	6553      	str	r3, [r2, #84]	@ 0x54
 8007528:	e003      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800752e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007532:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	f002 0304 	and.w	r3, r2, #4
 800753e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007542:	2300      	movs	r3, #0
 8007544:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007548:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800754c:	460b      	mov	r3, r1
 800754e:	4313      	orrs	r3, r2
 8007550:	d043      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007556:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800755a:	2b05      	cmp	r3, #5
 800755c:	d824      	bhi.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800755e:	a201      	add	r2, pc, #4	@ (adr r2, 8007564 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007564:	080075b1 	.word	0x080075b1
 8007568:	0800757d 	.word	0x0800757d
 800756c:	08007593 	.word	0x08007593
 8007570:	080075b1 	.word	0x080075b1
 8007574:	080075b1 	.word	0x080075b1
 8007578:	080075b1 	.word	0x080075b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800757c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007580:	3308      	adds	r3, #8
 8007582:	2101      	movs	r1, #1
 8007584:	4618      	mov	r0, r3
 8007586:	f000 ff1d 	bl	80083c4 <RCCEx_PLL2_Config>
 800758a:	4603      	mov	r3, r0
 800758c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007590:	e00f      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007592:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007596:	3328      	adds	r3, #40	@ 0x28
 8007598:	2101      	movs	r1, #1
 800759a:	4618      	mov	r0, r3
 800759c:	f000 ffc4 	bl	8008528 <RCCEx_PLL3_Config>
 80075a0:	4603      	mov	r3, r0
 80075a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80075a6:	e004      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80075ae:	e000      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80075b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10b      	bne.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075ba:	4b6c      	ldr	r3, [pc, #432]	@ (800776c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80075bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075be:	f023 0107 	bic.w	r1, r3, #7
 80075c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075ca:	4a68      	ldr	r2, [pc, #416]	@ (800776c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80075cc:	430b      	orrs	r3, r1
 80075ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80075d0:	e003      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	f002 0320 	and.w	r3, r2, #32
 80075e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80075ea:	2300      	movs	r3, #0
 80075ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80075f4:	460b      	mov	r3, r1
 80075f6:	4313      	orrs	r3, r2
 80075f8:	d055      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80075fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007602:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007606:	d033      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007608:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800760c:	d82c      	bhi.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800760e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007612:	d02f      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007618:	d826      	bhi.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800761a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800761e:	d02b      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007620:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007624:	d820      	bhi.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007626:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800762a:	d012      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800762c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007630:	d81a      	bhi.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007632:	2b00      	cmp	r3, #0
 8007634:	d022      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007636:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800763a:	d115      	bne.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800763c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007640:	3308      	adds	r3, #8
 8007642:	2100      	movs	r1, #0
 8007644:	4618      	mov	r0, r3
 8007646:	f000 febd 	bl	80083c4 <RCCEx_PLL2_Config>
 800764a:	4603      	mov	r3, r0
 800764c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007650:	e015      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007652:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007656:	3328      	adds	r3, #40	@ 0x28
 8007658:	2102      	movs	r1, #2
 800765a:	4618      	mov	r0, r3
 800765c:	f000 ff64 	bl	8008528 <RCCEx_PLL3_Config>
 8007660:	4603      	mov	r3, r0
 8007662:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007666:	e00a      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800766e:	e006      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007670:	bf00      	nop
 8007672:	e004      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007674:	bf00      	nop
 8007676:	e002      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007678:	bf00      	nop
 800767a:	e000      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800767c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800767e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10b      	bne.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007686:	4b39      	ldr	r3, [pc, #228]	@ (800776c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800768a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800768e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007692:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007696:	4a35      	ldr	r2, [pc, #212]	@ (800776c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007698:	430b      	orrs	r3, r1
 800769a:	6553      	str	r3, [r2, #84]	@ 0x54
 800769c:	e003      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80076a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80076b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80076b6:	2300      	movs	r3, #0
 80076b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80076bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80076c0:	460b      	mov	r3, r1
 80076c2:	4313      	orrs	r3, r2
 80076c4:	d058      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80076c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80076ce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80076d2:	d033      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80076d4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80076d8:	d82c      	bhi.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80076da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076de:	d02f      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80076e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076e4:	d826      	bhi.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80076e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076ea:	d02b      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80076ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076f0:	d820      	bhi.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80076f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076f6:	d012      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80076f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076fc:	d81a      	bhi.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d022      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007706:	d115      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800770c:	3308      	adds	r3, #8
 800770e:	2100      	movs	r1, #0
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fe57 	bl	80083c4 <RCCEx_PLL2_Config>
 8007716:	4603      	mov	r3, r0
 8007718:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800771c:	e015      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800771e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007722:	3328      	adds	r3, #40	@ 0x28
 8007724:	2102      	movs	r1, #2
 8007726:	4618      	mov	r0, r3
 8007728:	f000 fefe 	bl	8008528 <RCCEx_PLL3_Config>
 800772c:	4603      	mov	r3, r0
 800772e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007732:	e00a      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800773a:	e006      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800773c:	bf00      	nop
 800773e:	e004      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007740:	bf00      	nop
 8007742:	e002      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007744:	bf00      	nop
 8007746:	e000      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800774a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10e      	bne.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007752:	4b06      	ldr	r3, [pc, #24]	@ (800776c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007756:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800775a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800775e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007762:	4a02      	ldr	r2, [pc, #8]	@ (800776c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007764:	430b      	orrs	r3, r1
 8007766:	6593      	str	r3, [r2, #88]	@ 0x58
 8007768:	e006      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800776a:	bf00      	nop
 800776c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007770:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007774:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007784:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007788:	2300      	movs	r3, #0
 800778a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800778e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007792:	460b      	mov	r3, r1
 8007794:	4313      	orrs	r3, r2
 8007796:	d055      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800779c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80077a0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80077a4:	d033      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80077a6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80077aa:	d82c      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80077ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077b0:	d02f      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80077b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077b6:	d826      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80077b8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80077bc:	d02b      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80077be:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80077c2:	d820      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80077c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077c8:	d012      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80077ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077ce:	d81a      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d022      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80077d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077d8:	d115      	bne.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077de:	3308      	adds	r3, #8
 80077e0:	2100      	movs	r1, #0
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fdee 	bl	80083c4 <RCCEx_PLL2_Config>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80077ee:	e015      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077f4:	3328      	adds	r3, #40	@ 0x28
 80077f6:	2102      	movs	r1, #2
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 fe95 	bl	8008528 <RCCEx_PLL3_Config>
 80077fe:	4603      	mov	r3, r0
 8007800:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007804:	e00a      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800780c:	e006      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800780e:	bf00      	nop
 8007810:	e004      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007812:	bf00      	nop
 8007814:	e002      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007816:	bf00      	nop
 8007818:	e000      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800781a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800781c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10b      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007824:	4ba1      	ldr	r3, [pc, #644]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007828:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800782c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007830:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007834:	4a9d      	ldr	r2, [pc, #628]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007836:	430b      	orrs	r3, r1
 8007838:	6593      	str	r3, [r2, #88]	@ 0x58
 800783a:	e003      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007840:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007844:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f002 0308 	and.w	r3, r2, #8
 8007850:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007854:	2300      	movs	r3, #0
 8007856:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800785a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800785e:	460b      	mov	r3, r1
 8007860:	4313      	orrs	r3, r2
 8007862:	d01e      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800786c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007870:	d10c      	bne.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007872:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007876:	3328      	adds	r3, #40	@ 0x28
 8007878:	2102      	movs	r1, #2
 800787a:	4618      	mov	r0, r3
 800787c:	f000 fe54 	bl	8008528 <RCCEx_PLL3_Config>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800788c:	4b87      	ldr	r3, [pc, #540]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800788e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007890:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007894:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800789c:	4a83      	ldr	r2, [pc, #524]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800789e:	430b      	orrs	r3, r1
 80078a0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f002 0310 	and.w	r3, r2, #16
 80078ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80078b2:	2300      	movs	r3, #0
 80078b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80078b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80078bc:	460b      	mov	r3, r1
 80078be:	4313      	orrs	r3, r2
 80078c0:	d01e      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80078c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078ce:	d10c      	bne.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078d4:	3328      	adds	r3, #40	@ 0x28
 80078d6:	2102      	movs	r1, #2
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 fe25 	bl	8008528 <RCCEx_PLL3_Config>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078ea:	4b70      	ldr	r3, [pc, #448]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80078ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80078f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078fa:	4a6c      	ldr	r2, [pc, #432]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80078fc:	430b      	orrs	r3, r1
 80078fe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800790c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007910:	2300      	movs	r3, #0
 8007912:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007916:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800791a:	460b      	mov	r3, r1
 800791c:	4313      	orrs	r3, r2
 800791e:	d03e      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007920:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007924:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007928:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800792c:	d022      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800792e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007932:	d81b      	bhi.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007934:	2b00      	cmp	r3, #0
 8007936:	d003      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800793c:	d00b      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800793e:	e015      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007940:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007944:	3308      	adds	r3, #8
 8007946:	2100      	movs	r1, #0
 8007948:	4618      	mov	r0, r3
 800794a:	f000 fd3b 	bl	80083c4 <RCCEx_PLL2_Config>
 800794e:	4603      	mov	r3, r0
 8007950:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007954:	e00f      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800795a:	3328      	adds	r3, #40	@ 0x28
 800795c:	2102      	movs	r1, #2
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fde2 	bl	8008528 <RCCEx_PLL3_Config>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800796a:	e004      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007972:	e000      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8007974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007976:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10b      	bne.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800797e:	4b4b      	ldr	r3, [pc, #300]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007982:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800798a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800798e:	4a47      	ldr	r2, [pc, #284]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007990:	430b      	orrs	r3, r1
 8007992:	6593      	str	r3, [r2, #88]	@ 0x58
 8007994:	e003      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007996:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800799a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800799e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80079aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079ac:	2300      	movs	r3, #0
 80079ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80079b4:	460b      	mov	r3, r1
 80079b6:	4313      	orrs	r3, r2
 80079b8:	d03b      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80079ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079c6:	d01f      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80079c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079cc:	d818      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80079ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079d2:	d003      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80079d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079d8:	d007      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80079da:	e011      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079dc:	4b33      	ldr	r3, [pc, #204]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80079de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e0:	4a32      	ldr	r2, [pc, #200]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80079e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80079e8:	e00f      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079ee:	3328      	adds	r3, #40	@ 0x28
 80079f0:	2101      	movs	r1, #1
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 fd98 	bl	8008528 <RCCEx_PLL3_Config>
 80079f8:	4603      	mov	r3, r0
 80079fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80079fe:	e004      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007a06:	e000      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10b      	bne.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a12:	4b26      	ldr	r3, [pc, #152]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a16:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a22:	4a22      	ldr	r2, [pc, #136]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a24:	430b      	orrs	r3, r1
 8007a26:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a28:	e003      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a2e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007a3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a40:	2300      	movs	r3, #0
 8007a42:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a44:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	d034      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8007a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a5c:	d007      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8007a5e:	e011      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a60:	4b12      	ldr	r3, [pc, #72]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a64:	4a11      	ldr	r2, [pc, #68]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a6c:	e00e      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a72:	3308      	adds	r3, #8
 8007a74:	2102      	movs	r1, #2
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fca4 	bl	80083c4 <RCCEx_PLL2_Config>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a82:	e003      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10d      	bne.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a94:	4b05      	ldr	r3, [pc, #20]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a98:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aa2:	4a02      	ldr	r2, [pc, #8]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007aa4:	430b      	orrs	r3, r1
 8007aa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007aa8:	e006      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8007aaa:	bf00      	nop
 8007aac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ab4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007ac4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007aca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007ace:	460b      	mov	r3, r1
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	d00c      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ad8:	3328      	adds	r3, #40	@ 0x28
 8007ada:	2102      	movs	r1, #2
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 fd23 	bl	8008528 <RCCEx_PLL3_Config>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007afa:	663b      	str	r3, [r7, #96]	@ 0x60
 8007afc:	2300      	movs	r3, #0
 8007afe:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b00:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007b04:	460b      	mov	r3, r1
 8007b06:	4313      	orrs	r3, r2
 8007b08:	d038      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b16:	d018      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007b18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b1c:	d811      	bhi.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007b1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b22:	d014      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b28:	d80b      	bhi.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d011      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8007b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b32:	d106      	bne.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b34:	4bc3      	ldr	r3, [pc, #780]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b38:	4ac2      	ldr	r2, [pc, #776]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007b40:	e008      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007b48:	e004      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007b4a:	bf00      	nop
 8007b4c:	e002      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007b4e:	bf00      	nop
 8007b50:	e000      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007b52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10b      	bne.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b5c:	4bb9      	ldr	r3, [pc, #740]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b60:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b6c:	4ab5      	ldr	r2, [pc, #724]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b6e:	430b      	orrs	r3, r1
 8007b70:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b72:	e003      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b84:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007b88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b8e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007b92:	460b      	mov	r3, r1
 8007b94:	4313      	orrs	r3, r2
 8007b96:	d009      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b98:	4baa      	ldr	r3, [pc, #680]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b9c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ba4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ba6:	4aa7      	ldr	r2, [pc, #668]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ba8:	430b      	orrs	r3, r1
 8007baa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007bb8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bba:	2300      	movs	r3, #0
 8007bbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bbe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	d009      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007bc8:	4b9e      	ldr	r3, [pc, #632]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bcc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bd6:	4a9b      	ldr	r2, [pc, #620]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007be8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bea:	2300      	movs	r3, #0
 8007bec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	d009      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007bf8:	4b92      	ldr	r3, [pc, #584]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bfc:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8007c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c06:	4a8f      	ldr	r2, [pc, #572]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c08:	430b      	orrs	r3, r1
 8007c0a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007c18:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c1e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007c22:	460b      	mov	r3, r1
 8007c24:	4313      	orrs	r3, r2
 8007c26:	d00e      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c28:	4b86      	ldr	r3, [pc, #536]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	4a85      	ldr	r2, [pc, #532]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c2e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c32:	6113      	str	r3, [r2, #16]
 8007c34:	4b83      	ldr	r3, [pc, #524]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c36:	6919      	ldr	r1, [r3, #16]
 8007c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007c40:	4a80      	ldr	r2, [pc, #512]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c42:	430b      	orrs	r3, r1
 8007c44:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007c52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c54:	2300      	movs	r3, #0
 8007c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c58:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	d009      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007c62:	4b78      	ldr	r3, [pc, #480]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c66:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c70:	4a74      	ldr	r2, [pc, #464]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c72:	430b      	orrs	r3, r1
 8007c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007c82:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c84:	2300      	movs	r3, #0
 8007c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c88:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	d00a      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c92:	4b6c      	ldr	r3, [pc, #432]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c96:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ca2:	4a68      	ldr	r2, [pc, #416]	@ (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ca4:	430b      	orrs	r3, r1
 8007ca6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	d011      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cc8:	3308      	adds	r3, #8
 8007cca:	2100      	movs	r1, #0
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 fb79 	bl	80083c4 <RCCEx_PLL2_Config>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007cd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ce4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	6239      	str	r1, [r7, #32]
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cfa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	4313      	orrs	r3, r2
 8007d02:	d011      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d08:	3308      	adds	r3, #8
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 fb59 	bl	80083c4 <RCCEx_PLL2_Config>
 8007d12:	4603      	mov	r3, r0
 8007d14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007d18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d003      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d24:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d30:	2100      	movs	r1, #0
 8007d32:	61b9      	str	r1, [r7, #24]
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	61fb      	str	r3, [r7, #28]
 8007d3a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4313      	orrs	r3, r2
 8007d42:	d011      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d48:	3308      	adds	r3, #8
 8007d4a:	2102      	movs	r1, #2
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 fb39 	bl	80083c4 <RCCEx_PLL2_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007d58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d64:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d70:	2100      	movs	r1, #0
 8007d72:	6139      	str	r1, [r7, #16]
 8007d74:	f003 0308 	and.w	r3, r3, #8
 8007d78:	617b      	str	r3, [r7, #20]
 8007d7a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4313      	orrs	r3, r2
 8007d82:	d011      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d88:	3328      	adds	r3, #40	@ 0x28
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 fbcb 	bl	8008528 <RCCEx_PLL3_Config>
 8007d92:	4603      	mov	r3, r0
 8007d94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8007d98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007da4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db0:	2100      	movs	r1, #0
 8007db2:	60b9      	str	r1, [r7, #8]
 8007db4:	f003 0310 	and.w	r3, r3, #16
 8007db8:	60fb      	str	r3, [r7, #12]
 8007dba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	d011      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dc8:	3328      	adds	r3, #40	@ 0x28
 8007dca:	2101      	movs	r1, #1
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 fbab 	bl	8008528 <RCCEx_PLL3_Config>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007dd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007de4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	2100      	movs	r1, #0
 8007df2:	6039      	str	r1, [r7, #0]
 8007df4:	f003 0320 	and.w	r3, r3, #32
 8007df8:	607b      	str	r3, [r7, #4]
 8007dfa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007dfe:	460b      	mov	r3, r1
 8007e00:	4313      	orrs	r3, r2
 8007e02:	d011      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e08:	3328      	adds	r3, #40	@ 0x28
 8007e0a:	2102      	movs	r1, #2
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 fb8b 	bl	8008528 <RCCEx_PLL3_Config>
 8007e12:	4603      	mov	r3, r0
 8007e14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007e18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d003      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e24:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8007e28:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	e000      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e42:	bf00      	nop
 8007e44:	58024400 	.word	0x58024400

08007e48 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007e4c:	f7fe fde2 	bl	8006a14 <HAL_RCC_GetHCLKFreq>
 8007e50:	4602      	mov	r2, r0
 8007e52:	4b06      	ldr	r3, [pc, #24]	@ (8007e6c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	091b      	lsrs	r3, r3, #4
 8007e58:	f003 0307 	and.w	r3, r3, #7
 8007e5c:	4904      	ldr	r1, [pc, #16]	@ (8007e70 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007e5e:	5ccb      	ldrb	r3, [r1, r3]
 8007e60:	f003 031f 	and.w	r3, r3, #31
 8007e64:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	58024400 	.word	0x58024400
 8007e70:	0800d9d0 	.word	0x0800d9d0

08007e74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b089      	sub	sp, #36	@ 0x24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e7c:	4ba1      	ldr	r3, [pc, #644]	@ (8008104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e80:	f003 0303 	and.w	r3, r3, #3
 8007e84:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007e86:	4b9f      	ldr	r3, [pc, #636]	@ (8008104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e8a:	0b1b      	lsrs	r3, r3, #12
 8007e8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e90:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007e92:	4b9c      	ldr	r3, [pc, #624]	@ (8008104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e96:	091b      	lsrs	r3, r3, #4
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007e9e:	4b99      	ldr	r3, [pc, #612]	@ (8008104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea2:	08db      	lsrs	r3, r3, #3
 8007ea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	fb02 f303 	mul.w	r3, r2, r3
 8007eae:	ee07 3a90 	vmov	s15, r3
 8007eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 8111 	beq.w	80080e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	f000 8083 	beq.w	8007fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	f200 80a1 	bhi.w	8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d003      	beq.n	8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d056      	beq.n	8007f8c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007ede:	e099      	b.n	8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ee0:	4b88      	ldr	r3, [pc, #544]	@ (8008104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0320 	and.w	r3, r3, #32
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d02d      	beq.n	8007f48 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007eec:	4b85      	ldr	r3, [pc, #532]	@ (8008104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	08db      	lsrs	r3, r3, #3
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	4a84      	ldr	r2, [pc, #528]	@ (8008108 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8007efc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	ee07 3a90 	vmov	s15, r3
 8007f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	ee07 3a90 	vmov	s15, r3
 8007f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f16:	4b7b      	ldr	r3, [pc, #492]	@ (8008104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f1e:	ee07 3a90 	vmov	s15, r3
 8007f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f2a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800810c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f46:	e087      	b.n	8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	ee07 3a90 	vmov	s15, r3
 8007f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f52:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f5a:	4b6a      	ldr	r3, [pc, #424]	@ (8008104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f62:	ee07 3a90 	vmov	s15, r3
 8007f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f6e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800810c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f8a:	e065      	b.n	8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	ee07 3a90 	vmov	s15, r3
 8007f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f96:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f9e:	4b59      	ldr	r3, [pc, #356]	@ (8008104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa6:	ee07 3a90 	vmov	s15, r3
 8007faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fb2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800810c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fce:	e043      	b.n	8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fda:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008118 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fe2:	4b48      	ldr	r3, [pc, #288]	@ (8008104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fea:	ee07 3a90 	vmov	s15, r3
 8007fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ff6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800810c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800800a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800800e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008012:	e021      	b.n	8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	ee07 3a90 	vmov	s15, r3
 800801a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008026:	4b37      	ldr	r3, [pc, #220]	@ (8008104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800802a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802e:	ee07 3a90 	vmov	s15, r3
 8008032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008036:	ed97 6a03 	vldr	s12, [r7, #12]
 800803a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800810c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800803e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800804a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800804e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008056:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008058:	4b2a      	ldr	r3, [pc, #168]	@ (8008104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800805a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805c:	0a5b      	lsrs	r3, r3, #9
 800805e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008062:	ee07 3a90 	vmov	s15, r3
 8008066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800806e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008072:	edd7 6a07 	vldr	s13, [r7, #28]
 8008076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800807a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800807e:	ee17 2a90 	vmov	r2, s15
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008086:	4b1f      	ldr	r3, [pc, #124]	@ (8008104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800808a:	0c1b      	lsrs	r3, r3, #16
 800808c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008090:	ee07 3a90 	vmov	s15, r3
 8008094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008098:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800809c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80080a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080ac:	ee17 2a90 	vmov	r2, s15
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80080b4:	4b13      	ldr	r3, [pc, #76]	@ (8008104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b8:	0e1b      	lsrs	r3, r3, #24
 80080ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080be:	ee07 3a90 	vmov	s15, r3
 80080c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80080d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080da:	ee17 2a90 	vmov	r2, s15
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80080e2:	e008      	b.n	80080f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	609a      	str	r2, [r3, #8]
}
 80080f6:	bf00      	nop
 80080f8:	3724      	adds	r7, #36	@ 0x24
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	58024400 	.word	0x58024400
 8008108:	03d09000 	.word	0x03d09000
 800810c:	46000000 	.word	0x46000000
 8008110:	4c742400 	.word	0x4c742400
 8008114:	4a742400 	.word	0x4a742400
 8008118:	4af42400 	.word	0x4af42400

0800811c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800811c:	b480      	push	{r7}
 800811e:	b089      	sub	sp, #36	@ 0x24
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008124:	4ba1      	ldr	r3, [pc, #644]	@ (80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008128:	f003 0303 	and.w	r3, r3, #3
 800812c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800812e:	4b9f      	ldr	r3, [pc, #636]	@ (80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008132:	0d1b      	lsrs	r3, r3, #20
 8008134:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008138:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800813a:	4b9c      	ldr	r3, [pc, #624]	@ (80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800813c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813e:	0a1b      	lsrs	r3, r3, #8
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008146:	4b99      	ldr	r3, [pc, #612]	@ (80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800814a:	08db      	lsrs	r3, r3, #3
 800814c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	fb02 f303 	mul.w	r3, r2, r3
 8008156:	ee07 3a90 	vmov	s15, r3
 800815a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 8111 	beq.w	800838c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	2b02      	cmp	r3, #2
 800816e:	f000 8083 	beq.w	8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	2b02      	cmp	r3, #2
 8008176:	f200 80a1 	bhi.w	80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d003      	beq.n	8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d056      	beq.n	8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008186:	e099      	b.n	80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008188:	4b88      	ldr	r3, [pc, #544]	@ (80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0320 	and.w	r3, r3, #32
 8008190:	2b00      	cmp	r3, #0
 8008192:	d02d      	beq.n	80081f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008194:	4b85      	ldr	r3, [pc, #532]	@ (80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	08db      	lsrs	r3, r3, #3
 800819a:	f003 0303 	and.w	r3, r3, #3
 800819e:	4a84      	ldr	r2, [pc, #528]	@ (80083b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80081a0:	fa22 f303 	lsr.w	r3, r2, r3
 80081a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	ee07 3a90 	vmov	s15, r3
 80081ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	ee07 3a90 	vmov	s15, r3
 80081b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081be:	4b7b      	ldr	r3, [pc, #492]	@ (80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081c6:	ee07 3a90 	vmov	s15, r3
 80081ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80081d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80083b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80081ee:	e087      	b.n	8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	ee07 3a90 	vmov	s15, r3
 80081f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80081fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008202:	4b6a      	ldr	r3, [pc, #424]	@ (80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800820a:	ee07 3a90 	vmov	s15, r3
 800820e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008212:	ed97 6a03 	vldr	s12, [r7, #12]
 8008216:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80083b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800821a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800821e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008222:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800822a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800822e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008232:	e065      	b.n	8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	ee07 3a90 	vmov	s15, r3
 800823a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800823e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80083bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008246:	4b59      	ldr	r3, [pc, #356]	@ (80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800824a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800824e:	ee07 3a90 	vmov	s15, r3
 8008252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008256:	ed97 6a03 	vldr	s12, [r7, #12]
 800825a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80083b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800825e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008266:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800826a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800826e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008276:	e043      	b.n	8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	ee07 3a90 	vmov	s15, r3
 800827e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008282:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80083c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800828a:	4b48      	ldr	r3, [pc, #288]	@ (80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800828c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008292:	ee07 3a90 	vmov	s15, r3
 8008296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800829a:	ed97 6a03 	vldr	s12, [r7, #12]
 800829e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80083b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082ba:	e021      	b.n	8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	ee07 3a90 	vmov	s15, r3
 80082c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80083bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ce:	4b37      	ldr	r3, [pc, #220]	@ (80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082de:	ed97 6a03 	vldr	s12, [r7, #12]
 80082e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80083b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008300:	4b2a      	ldr	r3, [pc, #168]	@ (80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008304:	0a5b      	lsrs	r3, r3, #9
 8008306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800830a:	ee07 3a90 	vmov	s15, r3
 800830e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008312:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800831a:	edd7 6a07 	vldr	s13, [r7, #28]
 800831e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008326:	ee17 2a90 	vmov	r2, s15
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800832e:	4b1f      	ldr	r3, [pc, #124]	@ (80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008332:	0c1b      	lsrs	r3, r3, #16
 8008334:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008338:	ee07 3a90 	vmov	s15, r3
 800833c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008340:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008344:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008348:	edd7 6a07 	vldr	s13, [r7, #28]
 800834c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008354:	ee17 2a90 	vmov	r2, s15
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800835c:	4b13      	ldr	r3, [pc, #76]	@ (80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800835e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008360:	0e1b      	lsrs	r3, r3, #24
 8008362:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008366:	ee07 3a90 	vmov	s15, r3
 800836a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800836e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008372:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008376:	edd7 6a07 	vldr	s13, [r7, #28]
 800837a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800837e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008382:	ee17 2a90 	vmov	r2, s15
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800838a:	e008      	b.n	800839e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	609a      	str	r2, [r3, #8]
}
 800839e:	bf00      	nop
 80083a0:	3724      	adds	r7, #36	@ 0x24
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	58024400 	.word	0x58024400
 80083b0:	03d09000 	.word	0x03d09000
 80083b4:	46000000 	.word	0x46000000
 80083b8:	4c742400 	.word	0x4c742400
 80083bc:	4a742400 	.word	0x4a742400
 80083c0:	4af42400 	.word	0x4af42400

080083c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80083d2:	4b53      	ldr	r3, [pc, #332]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 80083d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d6:	f003 0303 	and.w	r3, r3, #3
 80083da:	2b03      	cmp	r3, #3
 80083dc:	d101      	bne.n	80083e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e099      	b.n	8008516 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80083e2:	4b4f      	ldr	r3, [pc, #316]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a4e      	ldr	r2, [pc, #312]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 80083e8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80083ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ee:	f7f9 fc51 	bl	8001c94 <HAL_GetTick>
 80083f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80083f4:	e008      	b.n	8008408 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80083f6:	f7f9 fc4d 	bl	8001c94 <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	2b02      	cmp	r3, #2
 8008402:	d901      	bls.n	8008408 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e086      	b.n	8008516 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008408:	4b45      	ldr	r3, [pc, #276]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1f0      	bne.n	80083f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008414:	4b42      	ldr	r3, [pc, #264]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 8008416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008418:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	031b      	lsls	r3, r3, #12
 8008422:	493f      	ldr	r1, [pc, #252]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 8008424:	4313      	orrs	r3, r2
 8008426:	628b      	str	r3, [r1, #40]	@ 0x28
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	3b01      	subs	r3, #1
 800842e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	3b01      	subs	r3, #1
 8008438:	025b      	lsls	r3, r3, #9
 800843a:	b29b      	uxth	r3, r3
 800843c:	431a      	orrs	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	3b01      	subs	r3, #1
 8008444:	041b      	lsls	r3, r3, #16
 8008446:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800844a:	431a      	orrs	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	3b01      	subs	r3, #1
 8008452:	061b      	lsls	r3, r3, #24
 8008454:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008458:	4931      	ldr	r1, [pc, #196]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 800845a:	4313      	orrs	r3, r2
 800845c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800845e:	4b30      	ldr	r3, [pc, #192]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 8008460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008462:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	492d      	ldr	r1, [pc, #180]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 800846c:	4313      	orrs	r3, r2
 800846e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008470:	4b2b      	ldr	r3, [pc, #172]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 8008472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008474:	f023 0220 	bic.w	r2, r3, #32
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	4928      	ldr	r1, [pc, #160]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 800847e:	4313      	orrs	r3, r2
 8008480:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008482:	4b27      	ldr	r3, [pc, #156]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 8008484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008486:	4a26      	ldr	r2, [pc, #152]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 8008488:	f023 0310 	bic.w	r3, r3, #16
 800848c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800848e:	4b24      	ldr	r3, [pc, #144]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 8008490:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008492:	4b24      	ldr	r3, [pc, #144]	@ (8008524 <RCCEx_PLL2_Config+0x160>)
 8008494:	4013      	ands	r3, r2
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	69d2      	ldr	r2, [r2, #28]
 800849a:	00d2      	lsls	r2, r2, #3
 800849c:	4920      	ldr	r1, [pc, #128]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80084a2:	4b1f      	ldr	r3, [pc, #124]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 80084a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a6:	4a1e      	ldr	r2, [pc, #120]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 80084a8:	f043 0310 	orr.w	r3, r3, #16
 80084ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d106      	bne.n	80084c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80084b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 80084b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b8:	4a19      	ldr	r2, [pc, #100]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 80084ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80084be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80084c0:	e00f      	b.n	80084e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d106      	bne.n	80084d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80084c8:	4b15      	ldr	r3, [pc, #84]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 80084ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084cc:	4a14      	ldr	r2, [pc, #80]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 80084ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80084d4:	e005      	b.n	80084e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80084d6:	4b12      	ldr	r3, [pc, #72]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 80084d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084da:	4a11      	ldr	r2, [pc, #68]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 80084dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80084e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80084e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a0e      	ldr	r2, [pc, #56]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 80084e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80084ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084ee:	f7f9 fbd1 	bl	8001c94 <HAL_GetTick>
 80084f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80084f4:	e008      	b.n	8008508 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80084f6:	f7f9 fbcd 	bl	8001c94 <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	2b02      	cmp	r3, #2
 8008502:	d901      	bls.n	8008508 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e006      	b.n	8008516 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008508:	4b05      	ldr	r3, [pc, #20]	@ (8008520 <RCCEx_PLL2_Config+0x15c>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d0f0      	beq.n	80084f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008514:	7bfb      	ldrb	r3, [r7, #15]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	58024400 	.word	0x58024400
 8008524:	ffff0007 	.word	0xffff0007

08008528 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008536:	4b53      	ldr	r3, [pc, #332]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 8008538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	2b03      	cmp	r3, #3
 8008540:	d101      	bne.n	8008546 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e099      	b.n	800867a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008546:	4b4f      	ldr	r3, [pc, #316]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a4e      	ldr	r2, [pc, #312]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 800854c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008552:	f7f9 fb9f 	bl	8001c94 <HAL_GetTick>
 8008556:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008558:	e008      	b.n	800856c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800855a:	f7f9 fb9b 	bl	8001c94 <HAL_GetTick>
 800855e:	4602      	mov	r2, r0
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	2b02      	cmp	r3, #2
 8008566:	d901      	bls.n	800856c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e086      	b.n	800867a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800856c:	4b45      	ldr	r3, [pc, #276]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1f0      	bne.n	800855a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008578:	4b42      	ldr	r3, [pc, #264]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 800857a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	051b      	lsls	r3, r3, #20
 8008586:	493f      	ldr	r1, [pc, #252]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 8008588:	4313      	orrs	r3, r2
 800858a:	628b      	str	r3, [r1, #40]	@ 0x28
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	3b01      	subs	r3, #1
 8008592:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	3b01      	subs	r3, #1
 800859c:	025b      	lsls	r3, r3, #9
 800859e:	b29b      	uxth	r3, r3
 80085a0:	431a      	orrs	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	3b01      	subs	r3, #1
 80085a8:	041b      	lsls	r3, r3, #16
 80085aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80085ae:	431a      	orrs	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	061b      	lsls	r3, r3, #24
 80085b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80085bc:	4931      	ldr	r1, [pc, #196]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80085c2:	4b30      	ldr	r3, [pc, #192]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 80085c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	492d      	ldr	r1, [pc, #180]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 80085d0:	4313      	orrs	r3, r2
 80085d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80085d4:	4b2b      	ldr	r3, [pc, #172]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 80085d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	4928      	ldr	r1, [pc, #160]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80085e6:	4b27      	ldr	r3, [pc, #156]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 80085e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ea:	4a26      	ldr	r2, [pc, #152]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 80085ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80085f2:	4b24      	ldr	r3, [pc, #144]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 80085f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085f6:	4b24      	ldr	r3, [pc, #144]	@ (8008688 <RCCEx_PLL3_Config+0x160>)
 80085f8:	4013      	ands	r3, r2
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	69d2      	ldr	r2, [r2, #28]
 80085fe:	00d2      	lsls	r2, r2, #3
 8008600:	4920      	ldr	r1, [pc, #128]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 8008602:	4313      	orrs	r3, r2
 8008604:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008606:	4b1f      	ldr	r3, [pc, #124]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 8008608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860a:	4a1e      	ldr	r2, [pc, #120]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 800860c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008610:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d106      	bne.n	8008626 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008618:	4b1a      	ldr	r3, [pc, #104]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 800861a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861c:	4a19      	ldr	r2, [pc, #100]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 800861e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008622:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008624:	e00f      	b.n	8008646 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d106      	bne.n	800863a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800862c:	4b15      	ldr	r3, [pc, #84]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 800862e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008630:	4a14      	ldr	r2, [pc, #80]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 8008632:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008636:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008638:	e005      	b.n	8008646 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800863a:	4b12      	ldr	r3, [pc, #72]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 800863c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800863e:	4a11      	ldr	r2, [pc, #68]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 8008640:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008644:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008646:	4b0f      	ldr	r3, [pc, #60]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a0e      	ldr	r2, [pc, #56]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 800864c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008650:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008652:	f7f9 fb1f 	bl	8001c94 <HAL_GetTick>
 8008656:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008658:	e008      	b.n	800866c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800865a:	f7f9 fb1b 	bl	8001c94 <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	2b02      	cmp	r3, #2
 8008666:	d901      	bls.n	800866c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e006      	b.n	800867a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800866c:	4b05      	ldr	r3, [pc, #20]	@ (8008684 <RCCEx_PLL3_Config+0x15c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d0f0      	beq.n	800865a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008678:	7bfb      	ldrb	r3, [r7, #15]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	58024400 	.word	0x58024400
 8008688:	ffff0007 	.word	0xffff0007

0800868c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e10f      	b.n	80088be <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a87      	ldr	r2, [pc, #540]	@ (80088c8 <HAL_SPI_Init+0x23c>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d00f      	beq.n	80086ce <HAL_SPI_Init+0x42>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a86      	ldr	r2, [pc, #536]	@ (80088cc <HAL_SPI_Init+0x240>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d00a      	beq.n	80086ce <HAL_SPI_Init+0x42>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a84      	ldr	r2, [pc, #528]	@ (80088d0 <HAL_SPI_Init+0x244>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d005      	beq.n	80086ce <HAL_SPI_Init+0x42>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	2b0f      	cmp	r3, #15
 80086c8:	d901      	bls.n	80086ce <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e0f7      	b.n	80088be <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fbba 	bl	8008e48 <SPI_GetPacketSize>
 80086d4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a7b      	ldr	r2, [pc, #492]	@ (80088c8 <HAL_SPI_Init+0x23c>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d00c      	beq.n	80086fa <HAL_SPI_Init+0x6e>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a79      	ldr	r2, [pc, #484]	@ (80088cc <HAL_SPI_Init+0x240>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d007      	beq.n	80086fa <HAL_SPI_Init+0x6e>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a78      	ldr	r2, [pc, #480]	@ (80088d0 <HAL_SPI_Init+0x244>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d002      	beq.n	80086fa <HAL_SPI_Init+0x6e>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b08      	cmp	r3, #8
 80086f8:	d811      	bhi.n	800871e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80086fe:	4a72      	ldr	r2, [pc, #456]	@ (80088c8 <HAL_SPI_Init+0x23c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d009      	beq.n	8008718 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a70      	ldr	r2, [pc, #448]	@ (80088cc <HAL_SPI_Init+0x240>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d004      	beq.n	8008718 <HAL_SPI_Init+0x8c>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a6f      	ldr	r2, [pc, #444]	@ (80088d0 <HAL_SPI_Init+0x244>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d104      	bne.n	8008722 <HAL_SPI_Init+0x96>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b10      	cmp	r3, #16
 800871c:	d901      	bls.n	8008722 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e0cd      	b.n	80088be <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	d106      	bne.n	800873c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7f8 fc8a 	bl	8001050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2202      	movs	r2, #2
 8008740:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f022 0201 	bic.w	r2, r2, #1
 8008752:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800875e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008768:	d119      	bne.n	800879e <HAL_SPI_Init+0x112>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008772:	d103      	bne.n	800877c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008778:	2b00      	cmp	r3, #0
 800877a:	d008      	beq.n	800878e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10c      	bne.n	800879e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008788:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800878c:	d107      	bne.n	800879e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800879c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00f      	beq.n	80087ca <HAL_SPI_Init+0x13e>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	2b06      	cmp	r3, #6
 80087b0:	d90b      	bls.n	80087ca <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	430a      	orrs	r2, r1
 80087c6:	601a      	str	r2, [r3, #0]
 80087c8:	e007      	b.n	80087da <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80087d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	69da      	ldr	r2, [r3, #28]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e2:	431a      	orrs	r2, r3
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	431a      	orrs	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ec:	ea42 0103 	orr.w	r1, r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	68da      	ldr	r2, [r3, #12]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	430a      	orrs	r2, r1
 80087fa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008804:	431a      	orrs	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880a:	431a      	orrs	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	431a      	orrs	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	431a      	orrs	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	695b      	ldr	r3, [r3, #20]
 800881c:	431a      	orrs	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	431a      	orrs	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	431a      	orrs	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800882e:	431a      	orrs	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	431a      	orrs	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800883a:	ea42 0103 	orr.w	r1, r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d113      	bne.n	800887a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008864:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008878:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f022 0201 	bic.w	r2, r2, #1
 8008888:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00a      	beq.n	80088ac <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	430a      	orrs	r2, r1
 80088aa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	40013000 	.word	0x40013000
 80088cc:	40003800 	.word	0x40003800
 80088d0:	40003c00 	.word	0x40003c00

080088d4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08a      	sub	sp, #40	@ 0x28
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80088ec:	6a3a      	ldr	r2, [r7, #32]
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	4013      	ands	r3, r2
 80088f2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80088fc:	2300      	movs	r3, #0
 80088fe:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008906:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3330      	adds	r3, #48	@ 0x30
 800890e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008916:	2b00      	cmp	r3, #0
 8008918:	d010      	beq.n	800893c <HAL_SPI_IRQHandler+0x68>
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	f003 0308 	and.w	r3, r3, #8
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00b      	beq.n	800893c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	699a      	ldr	r2, [r3, #24]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008932:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f9c3 	bl	8008cc0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800893a:	e192      	b.n	8008c62 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008942:	2b00      	cmp	r3, #0
 8008944:	d113      	bne.n	800896e <HAL_SPI_IRQHandler+0x9a>
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	f003 0320 	and.w	r3, r3, #32
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10e      	bne.n	800896e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008956:	2b00      	cmp	r3, #0
 8008958:	d009      	beq.n	800896e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	4798      	blx	r3
    handled = 1UL;
 800896a:	2301      	movs	r3, #1
 800896c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10f      	bne.n	8008998 <HAL_SPI_IRQHandler+0xc4>
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00a      	beq.n	8008998 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008988:	2b00      	cmp	r3, #0
 800898a:	d105      	bne.n	8008998 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	4798      	blx	r3
    handled = 1UL;
 8008994:	2301      	movs	r3, #1
 8008996:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	f003 0320 	and.w	r3, r3, #32
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10f      	bne.n	80089c2 <HAL_SPI_IRQHandler+0xee>
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	f003 0302 	and.w	r3, r3, #2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00a      	beq.n	80089c2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d105      	bne.n	80089c2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	4798      	blx	r3
    handled = 1UL;
 80089be:	2301      	movs	r3, #1
 80089c0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80089c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f040 8147 	bne.w	8008c58 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	f003 0308 	and.w	r3, r3, #8
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f000 808b 	beq.w	8008aec <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	699a      	ldr	r2, [r3, #24]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f042 0208 	orr.w	r2, r2, #8
 80089e4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	699a      	ldr	r2, [r3, #24]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f042 0210 	orr.w	r2, r2, #16
 80089f4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	699a      	ldr	r2, [r3, #24]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a04:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	691a      	ldr	r2, [r3, #16]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f022 0208 	bic.w	r2, r2, #8
 8008a14:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d13d      	bne.n	8008aa0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008a24:	e036      	b.n	8008a94 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	2b0f      	cmp	r3, #15
 8008a2c:	d90b      	bls.n	8008a46 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a36:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008a38:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a3e:	1d1a      	adds	r2, r3, #4
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	665a      	str	r2, [r3, #100]	@ 0x64
 8008a44:	e01d      	b.n	8008a82 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	2b07      	cmp	r3, #7
 8008a4c:	d90b      	bls.n	8008a66 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	8812      	ldrh	r2, [r2, #0]
 8008a56:	b292      	uxth	r2, r2
 8008a58:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a5e:	1c9a      	adds	r2, r3, #2
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	665a      	str	r2, [r3, #100]	@ 0x64
 8008a64:	e00d      	b.n	8008a82 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a72:	7812      	ldrb	r2, [r2, #0]
 8008a74:	b2d2      	uxtb	r2, r2
 8008a76:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1c2      	bne.n	8008a26 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f931 	bl	8008d08 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d003      	beq.n	8008ac0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f8f7 	bl	8008cac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008abe:	e0d0      	b.n	8008c62 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008ac0:	7cfb      	ldrb	r3, [r7, #19]
 8008ac2:	2b05      	cmp	r3, #5
 8008ac4:	d103      	bne.n	8008ace <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f8e6 	bl	8008c98 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008acc:	e0c6      	b.n	8008c5c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008ace:	7cfb      	ldrb	r3, [r7, #19]
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	d103      	bne.n	8008adc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f8d5 	bl	8008c84 <HAL_SPI_RxCpltCallback>
    return;
 8008ada:	e0bf      	b.n	8008c5c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008adc:	7cfb      	ldrb	r3, [r7, #19]
 8008ade:	2b03      	cmp	r3, #3
 8008ae0:	f040 80bc 	bne.w	8008c5c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f8c3 	bl	8008c70 <HAL_SPI_TxCpltCallback>
    return;
 8008aea:	e0b7      	b.n	8008c5c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 80b5 	beq.w	8008c62 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00f      	beq.n	8008b22 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b08:	f043 0204 	orr.w	r2, r3, #4
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	699a      	ldr	r2, [r3, #24]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b20:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00f      	beq.n	8008b4c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b32:	f043 0201 	orr.w	r2, r3, #1
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	699a      	ldr	r2, [r3, #24]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b4a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00f      	beq.n	8008b76 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b5c:	f043 0208 	orr.w	r2, r3, #8
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	699a      	ldr	r2, [r3, #24]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b74:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	f003 0320 	and.w	r3, r3, #32
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00f      	beq.n	8008ba0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b86:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	699a      	ldr	r2, [r3, #24]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f042 0220 	orr.w	r2, r2, #32
 8008b9e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d05a      	beq.n	8008c60 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f022 0201 	bic.w	r2, r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	6919      	ldr	r1, [r3, #16]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	4b28      	ldr	r3, [pc, #160]	@ (8008c68 <HAL_SPI_IRQHandler+0x394>)
 8008bc6:	400b      	ands	r3, r1
 8008bc8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008bd0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008bd4:	d138      	bne.n	8008c48 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	689a      	ldr	r2, [r3, #8]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008be4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d013      	beq.n	8008c16 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8008c6c <HAL_SPI_IRQHandler+0x398>)
 8008bf4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fa faf4 	bl	80031e8 <HAL_DMA_Abort_IT>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d007      	beq.n	8008c16 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d020      	beq.n	8008c60 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c22:	4a12      	ldr	r2, [pc, #72]	@ (8008c6c <HAL_SPI_IRQHandler+0x398>)
 8008c24:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fa fadc 	bl	80031e8 <HAL_DMA_Abort_IT>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d014      	beq.n	8008c60 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c3c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008c46:	e00b      	b.n	8008c60 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f82b 	bl	8008cac <HAL_SPI_ErrorCallback>
    return;
 8008c56:	e003      	b.n	8008c60 <HAL_SPI_IRQHandler+0x38c>
    return;
 8008c58:	bf00      	nop
 8008c5a:	e002      	b.n	8008c62 <HAL_SPI_IRQHandler+0x38e>
    return;
 8008c5c:	bf00      	nop
 8008c5e:	e000      	b.n	8008c62 <HAL_SPI_IRQHandler+0x38e>
    return;
 8008c60:	bf00      	nop
  }
}
 8008c62:	3728      	adds	r7, #40	@ 0x28
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	fffffc94 	.word	0xfffffc94
 8008c6c:	08008cd5 	.word	0x08008cd5

08008c70 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f7ff ffd6 	bl	8008cac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d00:	bf00      	nop
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	699a      	ldr	r2, [r3, #24]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f042 0208 	orr.w	r2, r2, #8
 8008d26:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	699a      	ldr	r2, [r3, #24]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f042 0210 	orr.w	r2, r2, #16
 8008d36:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f022 0201 	bic.w	r2, r2, #1
 8008d46:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6919      	ldr	r1, [r3, #16]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	4b3c      	ldr	r3, [pc, #240]	@ (8008e44 <SPI_CloseTransfer+0x13c>)
 8008d54:	400b      	ands	r3, r1
 8008d56:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	689a      	ldr	r2, [r3, #8]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008d66:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	2b04      	cmp	r3, #4
 8008d72:	d014      	beq.n	8008d9e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f003 0320 	and.w	r3, r3, #32
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00f      	beq.n	8008d9e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d84:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	699a      	ldr	r2, [r3, #24]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f042 0220 	orr.w	r2, r2, #32
 8008d9c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	d014      	beq.n	8008dd4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00f      	beq.n	8008dd4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008dba:	f043 0204 	orr.w	r2, r3, #4
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	699a      	ldr	r2, [r3, #24]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008dd2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00f      	beq.n	8008dfe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008de4:	f043 0201 	orr.w	r2, r3, #1
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	699a      	ldr	r2, [r3, #24]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dfc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00f      	beq.n	8008e28 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e0e:	f043 0208 	orr.w	r2, r3, #8
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	699a      	ldr	r2, [r3, #24]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e26:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008e38:	bf00      	nop
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	fffffc90 	.word	0xfffffc90

08008e48 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e54:	095b      	lsrs	r3, r3, #5
 8008e56:	3301      	adds	r3, #1
 8008e58:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	3307      	adds	r3, #7
 8008e66:	08db      	lsrs	r3, r3, #3
 8008e68:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b082      	sub	sp, #8
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e042      	b.n	8008f16 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d106      	bne.n	8008ea8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7f8 fc60 	bl	8001768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2224      	movs	r2, #36	@ 0x24
 8008eac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f022 0201 	bic.w	r2, r2, #1
 8008ebe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d002      	beq.n	8008ece <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f001 fbd7 	bl	800a67c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fd68 	bl	80099a4 <UART_SetConfig>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d101      	bne.n	8008ede <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e01b      	b.n	8008f16 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	685a      	ldr	r2, [r3, #4]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008eec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	689a      	ldr	r2, [r3, #8]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008efc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f042 0201 	orr.w	r2, r2, #1
 8008f0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f001 fc56 	bl	800a7c0 <UART_CheckIdleState>
 8008f14:	4603      	mov	r3, r0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b08a      	sub	sp, #40	@ 0x28
 8008f22:	af02      	add	r7, sp, #8
 8008f24:	60f8      	str	r0, [r7, #12]
 8008f26:	60b9      	str	r1, [r7, #8]
 8008f28:	603b      	str	r3, [r7, #0]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f34:	2b20      	cmp	r3, #32
 8008f36:	d17b      	bne.n	8009030 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d002      	beq.n	8008f44 <HAL_UART_Transmit+0x26>
 8008f3e:	88fb      	ldrh	r3, [r7, #6]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d101      	bne.n	8008f48 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e074      	b.n	8009032 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2221      	movs	r2, #33	@ 0x21
 8008f54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f58:	f7f8 fe9c 	bl	8001c94 <HAL_GetTick>
 8008f5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	88fa      	ldrh	r2, [r7, #6]
 8008f62:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	88fa      	ldrh	r2, [r7, #6]
 8008f6a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f76:	d108      	bne.n	8008f8a <HAL_UART_Transmit+0x6c>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d104      	bne.n	8008f8a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008f80:	2300      	movs	r3, #0
 8008f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	61bb      	str	r3, [r7, #24]
 8008f88:	e003      	b.n	8008f92 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f92:	e030      	b.n	8008ff6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	2180      	movs	r1, #128	@ 0x80
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f001 fcb8 	bl	800a914 <UART_WaitOnFlagUntilTimeout>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d005      	beq.n	8008fb6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2220      	movs	r2, #32
 8008fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e03d      	b.n	8009032 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10b      	bne.n	8008fd4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	3302      	adds	r3, #2
 8008fd0:	61bb      	str	r3, [r7, #24]
 8008fd2:	e007      	b.n	8008fe4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	781a      	ldrb	r2, [r3, #0]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	3b01      	subs	r3, #1
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1c8      	bne.n	8008f94 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	2200      	movs	r2, #0
 800900a:	2140      	movs	r1, #64	@ 0x40
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f001 fc81 	bl	800a914 <UART_WaitOnFlagUntilTimeout>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d005      	beq.n	8009024 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2220      	movs	r2, #32
 800901c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e006      	b.n	8009032 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2220      	movs	r2, #32
 8009028:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	e000      	b.n	8009032 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009030:	2302      	movs	r3, #2
  }
}
 8009032:	4618      	mov	r0, r3
 8009034:	3720      	adds	r7, #32
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
	...

0800903c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b09a      	sub	sp, #104	@ 0x68
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800904c:	e853 3f00 	ldrex	r3, [r3]
 8009050:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009054:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009058:	667b      	str	r3, [r7, #100]	@ 0x64
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	461a      	mov	r2, r3
 8009060:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009062:	657b      	str	r3, [r7, #84]	@ 0x54
 8009064:	653a      	str	r2, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009066:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009068:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800906a:	e841 2300 	strex	r3, r2, [r1]
 800906e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1e6      	bne.n	8009044 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3308      	adds	r3, #8
 800907c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009088:	4b46      	ldr	r3, [pc, #280]	@ (80091a4 <HAL_UART_AbortReceive+0x168>)
 800908a:	4013      	ands	r3, r2
 800908c:	663b      	str	r3, [r7, #96]	@ 0x60
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	3308      	adds	r3, #8
 8009094:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009096:	643a      	str	r2, [r7, #64]	@ 0x40
 8009098:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800909c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e5      	bne.n	8009076 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d118      	bne.n	80090e4 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b8:	6a3b      	ldr	r3, [r7, #32]
 80090ba:	e853 3f00 	ldrex	r3, [r3]
 80090be:	61fb      	str	r3, [r7, #28]
   return(result);
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	f023 0310 	bic.w	r3, r3, #16
 80090c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	461a      	mov	r2, r3
 80090ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090d2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090d8:	e841 2300 	strex	r3, r2, [r1]
 80090dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1e6      	bne.n	80090b2 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ee:	2b40      	cmp	r3, #64	@ 0x40
 80090f0:	d13b      	bne.n	800916a <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3308      	adds	r3, #8
 80090f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	e853 3f00 	ldrex	r3, [r3]
 8009100:	60bb      	str	r3, [r7, #8]
   return(result);
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009108:	65bb      	str	r3, [r7, #88]	@ 0x58
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3308      	adds	r3, #8
 8009110:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009112:	61ba      	str	r2, [r7, #24]
 8009114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009116:	6979      	ldr	r1, [r7, #20]
 8009118:	69ba      	ldr	r2, [r7, #24]
 800911a:	e841 2300 	strex	r3, r2, [r1]
 800911e:	613b      	str	r3, [r7, #16]
   return(result);
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1e5      	bne.n	80090f2 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800912c:	2b00      	cmp	r3, #0
 800912e:	d01c      	beq.n	800916a <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009136:	2200      	movs	r2, #0
 8009138:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009140:	4618      	mov	r0, r3
 8009142:	f7f9 fd33 	bl	8002bac <HAL_DMA_Abort>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00e      	beq.n	800916a <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009152:	4618      	mov	r0, r3
 8009154:	f7fb f9f0 	bl	8004538 <HAL_DMA_GetError>
 8009158:	4603      	mov	r3, r0
 800915a:	2b20      	cmp	r3, #32
 800915c:	d105      	bne.n	800916a <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2210      	movs	r2, #16
 8009162:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e017      	b.n	800919a <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	220f      	movs	r2, #15
 8009178:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	699a      	ldr	r2, [r3, #24]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f042 0208 	orr.w	r2, r2, #8
 8009188:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2220      	movs	r2, #32
 800918e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3768      	adds	r7, #104	@ 0x68
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	effffffe 	.word	0xeffffffe

080091a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b0ba      	sub	sp, #232	@ 0xe8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80091ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80091d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80091d6:	4013      	ands	r3, r2
 80091d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80091dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d11b      	bne.n	800921c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80091e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091e8:	f003 0320 	and.w	r3, r3, #32
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d015      	beq.n	800921c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80091f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091f4:	f003 0320 	and.w	r3, r3, #32
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d105      	bne.n	8009208 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80091fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d009      	beq.n	800921c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800920c:	2b00      	cmp	r3, #0
 800920e:	f000 8393 	beq.w	8009938 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	4798      	blx	r3
      }
      return;
 800921a:	e38d      	b.n	8009938 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800921c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 8123 	beq.w	800946c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009226:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800922a:	4b8d      	ldr	r3, [pc, #564]	@ (8009460 <HAL_UART_IRQHandler+0x2b8>)
 800922c:	4013      	ands	r3, r2
 800922e:	2b00      	cmp	r3, #0
 8009230:	d106      	bne.n	8009240 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009232:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009236:	4b8b      	ldr	r3, [pc, #556]	@ (8009464 <HAL_UART_IRQHandler+0x2bc>)
 8009238:	4013      	ands	r3, r2
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 8116 	beq.w	800946c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009244:	f003 0301 	and.w	r3, r3, #1
 8009248:	2b00      	cmp	r3, #0
 800924a:	d011      	beq.n	8009270 <HAL_UART_IRQHandler+0xc8>
 800924c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00b      	beq.n	8009270 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2201      	movs	r2, #1
 800925e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009266:	f043 0201 	orr.w	r2, r3, #1
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009274:	f003 0302 	and.w	r3, r3, #2
 8009278:	2b00      	cmp	r3, #0
 800927a:	d011      	beq.n	80092a0 <HAL_UART_IRQHandler+0xf8>
 800927c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009280:	f003 0301 	and.w	r3, r3, #1
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00b      	beq.n	80092a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2202      	movs	r2, #2
 800928e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009296:	f043 0204 	orr.w	r2, r3, #4
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092a4:	f003 0304 	and.w	r3, r3, #4
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d011      	beq.n	80092d0 <HAL_UART_IRQHandler+0x128>
 80092ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092b0:	f003 0301 	and.w	r3, r3, #1
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00b      	beq.n	80092d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2204      	movs	r2, #4
 80092be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092c6:	f043 0202 	orr.w	r2, r3, #2
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80092d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092d4:	f003 0308 	and.w	r3, r3, #8
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d017      	beq.n	800930c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80092dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092e0:	f003 0320 	and.w	r3, r3, #32
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d105      	bne.n	80092f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80092e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80092ec:	4b5c      	ldr	r3, [pc, #368]	@ (8009460 <HAL_UART_IRQHandler+0x2b8>)
 80092ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00b      	beq.n	800930c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2208      	movs	r2, #8
 80092fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009302:	f043 0208 	orr.w	r2, r3, #8
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800930c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009310:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009314:	2b00      	cmp	r3, #0
 8009316:	d012      	beq.n	800933e <HAL_UART_IRQHandler+0x196>
 8009318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800931c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00c      	beq.n	800933e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800932c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009334:	f043 0220 	orr.w	r2, r3, #32
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009344:	2b00      	cmp	r3, #0
 8009346:	f000 82f9 	beq.w	800993c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800934a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800934e:	f003 0320 	and.w	r3, r3, #32
 8009352:	2b00      	cmp	r3, #0
 8009354:	d013      	beq.n	800937e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800935a:	f003 0320 	and.w	r3, r3, #32
 800935e:	2b00      	cmp	r3, #0
 8009360:	d105      	bne.n	800936e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800936a:	2b00      	cmp	r3, #0
 800936c:	d007      	beq.n	800937e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009372:	2b00      	cmp	r3, #0
 8009374:	d003      	beq.n	800937e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009384:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009392:	2b40      	cmp	r3, #64	@ 0x40
 8009394:	d005      	beq.n	80093a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800939a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d054      	beq.n	800944c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f001 fc0c 	bl	800abc0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093b2:	2b40      	cmp	r3, #64	@ 0x40
 80093b4:	d146      	bne.n	8009444 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3308      	adds	r3, #8
 80093bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093c4:	e853 3f00 	ldrex	r3, [r3]
 80093c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80093cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	3308      	adds	r3, #8
 80093de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80093e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80093e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80093ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80093f2:	e841 2300 	strex	r3, r2, [r1]
 80093f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80093fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1d9      	bne.n	80093b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009408:	2b00      	cmp	r3, #0
 800940a:	d017      	beq.n	800943c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009412:	4a15      	ldr	r2, [pc, #84]	@ (8009468 <HAL_UART_IRQHandler+0x2c0>)
 8009414:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800941c:	4618      	mov	r0, r3
 800941e:	f7f9 fee3 	bl	80031e8 <HAL_DMA_Abort_IT>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d019      	beq.n	800945c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800942e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009436:	4610      	mov	r0, r2
 8009438:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800943a:	e00f      	b.n	800945c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 faa7 	bl	8009990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009442:	e00b      	b.n	800945c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 faa3 	bl	8009990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800944a:	e007      	b.n	800945c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fa9f 	bl	8009990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800945a:	e26f      	b.n	800993c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800945c:	bf00      	nop
    return;
 800945e:	e26d      	b.n	800993c <HAL_UART_IRQHandler+0x794>
 8009460:	10000001 	.word	0x10000001
 8009464:	04000120 	.word	0x04000120
 8009468:	0800ae73 	.word	0x0800ae73

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009470:	2b01      	cmp	r3, #1
 8009472:	f040 8203 	bne.w	800987c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800947a:	f003 0310 	and.w	r3, r3, #16
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 81fc 	beq.w	800987c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009488:	f003 0310 	and.w	r3, r3, #16
 800948c:	2b00      	cmp	r3, #0
 800948e:	f000 81f5 	beq.w	800987c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2210      	movs	r2, #16
 8009498:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094a4:	2b40      	cmp	r3, #64	@ 0x40
 80094a6:	f040 816d 	bne.w	8009784 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4aa4      	ldr	r2, [pc, #656]	@ (8009744 <HAL_UART_IRQHandler+0x59c>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d068      	beq.n	800958a <HAL_UART_IRQHandler+0x3e2>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4aa1      	ldr	r2, [pc, #644]	@ (8009748 <HAL_UART_IRQHandler+0x5a0>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d061      	beq.n	800958a <HAL_UART_IRQHandler+0x3e2>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a9f      	ldr	r2, [pc, #636]	@ (800974c <HAL_UART_IRQHandler+0x5a4>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d05a      	beq.n	800958a <HAL_UART_IRQHandler+0x3e2>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a9c      	ldr	r2, [pc, #624]	@ (8009750 <HAL_UART_IRQHandler+0x5a8>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d053      	beq.n	800958a <HAL_UART_IRQHandler+0x3e2>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a9a      	ldr	r2, [pc, #616]	@ (8009754 <HAL_UART_IRQHandler+0x5ac>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d04c      	beq.n	800958a <HAL_UART_IRQHandler+0x3e2>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a97      	ldr	r2, [pc, #604]	@ (8009758 <HAL_UART_IRQHandler+0x5b0>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d045      	beq.n	800958a <HAL_UART_IRQHandler+0x3e2>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a95      	ldr	r2, [pc, #596]	@ (800975c <HAL_UART_IRQHandler+0x5b4>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d03e      	beq.n	800958a <HAL_UART_IRQHandler+0x3e2>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a92      	ldr	r2, [pc, #584]	@ (8009760 <HAL_UART_IRQHandler+0x5b8>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d037      	beq.n	800958a <HAL_UART_IRQHandler+0x3e2>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a90      	ldr	r2, [pc, #576]	@ (8009764 <HAL_UART_IRQHandler+0x5bc>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d030      	beq.n	800958a <HAL_UART_IRQHandler+0x3e2>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a8d      	ldr	r2, [pc, #564]	@ (8009768 <HAL_UART_IRQHandler+0x5c0>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d029      	beq.n	800958a <HAL_UART_IRQHandler+0x3e2>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a8b      	ldr	r2, [pc, #556]	@ (800976c <HAL_UART_IRQHandler+0x5c4>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d022      	beq.n	800958a <HAL_UART_IRQHandler+0x3e2>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a88      	ldr	r2, [pc, #544]	@ (8009770 <HAL_UART_IRQHandler+0x5c8>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d01b      	beq.n	800958a <HAL_UART_IRQHandler+0x3e2>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a86      	ldr	r2, [pc, #536]	@ (8009774 <HAL_UART_IRQHandler+0x5cc>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d014      	beq.n	800958a <HAL_UART_IRQHandler+0x3e2>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a83      	ldr	r2, [pc, #524]	@ (8009778 <HAL_UART_IRQHandler+0x5d0>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d00d      	beq.n	800958a <HAL_UART_IRQHandler+0x3e2>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a81      	ldr	r2, [pc, #516]	@ (800977c <HAL_UART_IRQHandler+0x5d4>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d006      	beq.n	800958a <HAL_UART_IRQHandler+0x3e2>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a7e      	ldr	r2, [pc, #504]	@ (8009780 <HAL_UART_IRQHandler+0x5d8>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d106      	bne.n	8009598 <HAL_UART_IRQHandler+0x3f0>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	b29b      	uxth	r3, r3
 8009596:	e005      	b.n	80095a4 <HAL_UART_IRQHandler+0x3fc>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f000 80ad 	beq.w	800970c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095bc:	429a      	cmp	r2, r3
 80095be:	f080 80a5 	bcs.w	800970c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095d2:	69db      	ldr	r3, [r3, #28]
 80095d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095d8:	f000 8087 	beq.w	80096ea <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80095e8:	e853 3f00 	ldrex	r3, [r3]
 80095ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80095f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	461a      	mov	r2, r3
 8009602:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009606:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800960a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009612:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009616:	e841 2300 	strex	r3, r2, [r1]
 800961a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800961e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1da      	bne.n	80095dc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3308      	adds	r3, #8
 800962c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009630:	e853 3f00 	ldrex	r3, [r3]
 8009634:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009636:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009638:	f023 0301 	bic.w	r3, r3, #1
 800963c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3308      	adds	r3, #8
 8009646:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800964a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800964e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009650:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009652:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009656:	e841 2300 	strex	r3, r2, [r1]
 800965a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800965c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1e1      	bne.n	8009626 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3308      	adds	r3, #8
 8009668:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800966c:	e853 3f00 	ldrex	r3, [r3]
 8009670:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009678:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3308      	adds	r3, #8
 8009682:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009686:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009688:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800968c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800968e:	e841 2300 	strex	r3, r2, [r1]
 8009692:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009694:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1e3      	bne.n	8009662 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2220      	movs	r2, #32
 800969e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096b0:	e853 3f00 	ldrex	r3, [r3]
 80096b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80096b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096b8:	f023 0310 	bic.w	r3, r3, #16
 80096bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	461a      	mov	r2, r3
 80096c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096d2:	e841 2300 	strex	r3, r2, [r1]
 80096d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80096d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1e4      	bne.n	80096a8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7f9 fa61 	bl	8002bac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2202      	movs	r2, #2
 80096ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	b29b      	uxth	r3, r3
 8009702:	4619      	mov	r1, r3
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f7f7 fb39 	bl	8000d7c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800970a:	e119      	b.n	8009940 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009712:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009716:	429a      	cmp	r2, r3
 8009718:	f040 8112 	bne.w	8009940 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009728:	f040 810a 	bne.w	8009940 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2202      	movs	r2, #2
 8009730:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009738:	4619      	mov	r1, r3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7f7 fb1e 	bl	8000d7c <HAL_UARTEx_RxEventCallback>
      return;
 8009740:	e0fe      	b.n	8009940 <HAL_UART_IRQHandler+0x798>
 8009742:	bf00      	nop
 8009744:	40020010 	.word	0x40020010
 8009748:	40020028 	.word	0x40020028
 800974c:	40020040 	.word	0x40020040
 8009750:	40020058 	.word	0x40020058
 8009754:	40020070 	.word	0x40020070
 8009758:	40020088 	.word	0x40020088
 800975c:	400200a0 	.word	0x400200a0
 8009760:	400200b8 	.word	0x400200b8
 8009764:	40020410 	.word	0x40020410
 8009768:	40020428 	.word	0x40020428
 800976c:	40020440 	.word	0x40020440
 8009770:	40020458 	.word	0x40020458
 8009774:	40020470 	.word	0x40020470
 8009778:	40020488 	.word	0x40020488
 800977c:	400204a0 	.word	0x400204a0
 8009780:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009790:	b29b      	uxth	r3, r3
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800979e:	b29b      	uxth	r3, r3
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f000 80cf 	beq.w	8009944 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80097a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f000 80ca 	beq.w	8009944 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	461a      	mov	r2, r3
 80097ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80097d4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097da:	e841 2300 	strex	r3, r2, [r1]
 80097de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80097e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e4      	bne.n	80097b0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3308      	adds	r3, #8
 80097ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f0:	e853 3f00 	ldrex	r3, [r3]
 80097f4:	623b      	str	r3, [r7, #32]
   return(result);
 80097f6:	6a3a      	ldr	r2, [r7, #32]
 80097f8:	4b55      	ldr	r3, [pc, #340]	@ (8009950 <HAL_UART_IRQHandler+0x7a8>)
 80097fa:	4013      	ands	r3, r2
 80097fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	3308      	adds	r3, #8
 8009806:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800980a:	633a      	str	r2, [r7, #48]	@ 0x30
 800980c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009812:	e841 2300 	strex	r3, r2, [r1]
 8009816:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1e3      	bne.n	80097e6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2220      	movs	r2, #32
 8009822:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	e853 3f00 	ldrex	r3, [r3]
 800983e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f023 0310 	bic.w	r3, r3, #16
 8009846:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009854:	61fb      	str	r3, [r7, #28]
 8009856:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009858:	69b9      	ldr	r1, [r7, #24]
 800985a:	69fa      	ldr	r2, [r7, #28]
 800985c:	e841 2300 	strex	r3, r2, [r1]
 8009860:	617b      	str	r3, [r7, #20]
   return(result);
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1e4      	bne.n	8009832 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2202      	movs	r2, #2
 800986c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800986e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7f7 fa81 	bl	8000d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800987a:	e063      	b.n	8009944 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800987c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009880:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00e      	beq.n	80098a6 <HAL_UART_IRQHandler+0x6fe>
 8009888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800988c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d008      	beq.n	80098a6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800989c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f001 fb24 	bl	800aeec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098a4:	e051      	b.n	800994a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80098a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d014      	beq.n	80098dc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d105      	bne.n	80098ca <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d008      	beq.n	80098dc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d03a      	beq.n	8009948 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	4798      	blx	r3
    }
    return;
 80098da:	e035      	b.n	8009948 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d009      	beq.n	80098fc <HAL_UART_IRQHandler+0x754>
 80098e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d003      	beq.n	80098fc <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f001 face 	bl	800ae96 <UART_EndTransmit_IT>
    return;
 80098fa:	e026      	b.n	800994a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80098fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009900:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d009      	beq.n	800991c <HAL_UART_IRQHandler+0x774>
 8009908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800990c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d003      	beq.n	800991c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f001 fafd 	bl	800af14 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800991a:	e016      	b.n	800994a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800991c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009920:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009924:	2b00      	cmp	r3, #0
 8009926:	d010      	beq.n	800994a <HAL_UART_IRQHandler+0x7a2>
 8009928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800992c:	2b00      	cmp	r3, #0
 800992e:	da0c      	bge.n	800994a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f001 fae5 	bl	800af00 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009936:	e008      	b.n	800994a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009938:	bf00      	nop
 800993a:	e006      	b.n	800994a <HAL_UART_IRQHandler+0x7a2>
    return;
 800993c:	bf00      	nop
 800993e:	e004      	b.n	800994a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009940:	bf00      	nop
 8009942:	e002      	b.n	800994a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009944:	bf00      	nop
 8009946:	e000      	b.n	800994a <HAL_UART_IRQHandler+0x7a2>
    return;
 8009948:	bf00      	nop
  }
}
 800994a:	37e8      	adds	r7, #232	@ 0xe8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	effffffe 	.word	0xeffffffe

08009954 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099a8:	b092      	sub	sp, #72	@ 0x48
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	689a      	ldr	r2, [r3, #8]
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	431a      	orrs	r2, r3
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	431a      	orrs	r2, r3
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	69db      	ldr	r3, [r3, #28]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	4bbe      	ldr	r3, [pc, #760]	@ (8009ccc <UART_SetConfig+0x328>)
 80099d4:	4013      	ands	r3, r2
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	6812      	ldr	r2, [r2, #0]
 80099da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80099dc:	430b      	orrs	r3, r1
 80099de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	68da      	ldr	r2, [r3, #12]
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	430a      	orrs	r2, r1
 80099f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4ab3      	ldr	r2, [pc, #716]	@ (8009cd0 <UART_SetConfig+0x32c>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d004      	beq.n	8009a10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	6a1b      	ldr	r3, [r3, #32]
 8009a0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	689a      	ldr	r2, [r3, #8]
 8009a16:	4baf      	ldr	r3, [pc, #700]	@ (8009cd4 <UART_SetConfig+0x330>)
 8009a18:	4013      	ands	r3, r2
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	6812      	ldr	r2, [r2, #0]
 8009a1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009a20:	430b      	orrs	r3, r1
 8009a22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a2a:	f023 010f 	bic.w	r1, r3, #15
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	430a      	orrs	r2, r1
 8009a38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4aa6      	ldr	r2, [pc, #664]	@ (8009cd8 <UART_SetConfig+0x334>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d177      	bne.n	8009b34 <UART_SetConfig+0x190>
 8009a44:	4ba5      	ldr	r3, [pc, #660]	@ (8009cdc <UART_SetConfig+0x338>)
 8009a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a4c:	2b28      	cmp	r3, #40	@ 0x28
 8009a4e:	d86d      	bhi.n	8009b2c <UART_SetConfig+0x188>
 8009a50:	a201      	add	r2, pc, #4	@ (adr r2, 8009a58 <UART_SetConfig+0xb4>)
 8009a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a56:	bf00      	nop
 8009a58:	08009afd 	.word	0x08009afd
 8009a5c:	08009b2d 	.word	0x08009b2d
 8009a60:	08009b2d 	.word	0x08009b2d
 8009a64:	08009b2d 	.word	0x08009b2d
 8009a68:	08009b2d 	.word	0x08009b2d
 8009a6c:	08009b2d 	.word	0x08009b2d
 8009a70:	08009b2d 	.word	0x08009b2d
 8009a74:	08009b2d 	.word	0x08009b2d
 8009a78:	08009b05 	.word	0x08009b05
 8009a7c:	08009b2d 	.word	0x08009b2d
 8009a80:	08009b2d 	.word	0x08009b2d
 8009a84:	08009b2d 	.word	0x08009b2d
 8009a88:	08009b2d 	.word	0x08009b2d
 8009a8c:	08009b2d 	.word	0x08009b2d
 8009a90:	08009b2d 	.word	0x08009b2d
 8009a94:	08009b2d 	.word	0x08009b2d
 8009a98:	08009b0d 	.word	0x08009b0d
 8009a9c:	08009b2d 	.word	0x08009b2d
 8009aa0:	08009b2d 	.word	0x08009b2d
 8009aa4:	08009b2d 	.word	0x08009b2d
 8009aa8:	08009b2d 	.word	0x08009b2d
 8009aac:	08009b2d 	.word	0x08009b2d
 8009ab0:	08009b2d 	.word	0x08009b2d
 8009ab4:	08009b2d 	.word	0x08009b2d
 8009ab8:	08009b15 	.word	0x08009b15
 8009abc:	08009b2d 	.word	0x08009b2d
 8009ac0:	08009b2d 	.word	0x08009b2d
 8009ac4:	08009b2d 	.word	0x08009b2d
 8009ac8:	08009b2d 	.word	0x08009b2d
 8009acc:	08009b2d 	.word	0x08009b2d
 8009ad0:	08009b2d 	.word	0x08009b2d
 8009ad4:	08009b2d 	.word	0x08009b2d
 8009ad8:	08009b1d 	.word	0x08009b1d
 8009adc:	08009b2d 	.word	0x08009b2d
 8009ae0:	08009b2d 	.word	0x08009b2d
 8009ae4:	08009b2d 	.word	0x08009b2d
 8009ae8:	08009b2d 	.word	0x08009b2d
 8009aec:	08009b2d 	.word	0x08009b2d
 8009af0:	08009b2d 	.word	0x08009b2d
 8009af4:	08009b2d 	.word	0x08009b2d
 8009af8:	08009b25 	.word	0x08009b25
 8009afc:	2301      	movs	r3, #1
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b02:	e326      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009b04:	2304      	movs	r3, #4
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0a:	e322      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009b0c:	2308      	movs	r3, #8
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b12:	e31e      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009b14:	2310      	movs	r3, #16
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b1a:	e31a      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009b1c:	2320      	movs	r3, #32
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b22:	e316      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009b24:	2340      	movs	r3, #64	@ 0x40
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b2a:	e312      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009b2c:	2380      	movs	r3, #128	@ 0x80
 8009b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b32:	e30e      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a69      	ldr	r2, [pc, #420]	@ (8009ce0 <UART_SetConfig+0x33c>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d130      	bne.n	8009ba0 <UART_SetConfig+0x1fc>
 8009b3e:	4b67      	ldr	r3, [pc, #412]	@ (8009cdc <UART_SetConfig+0x338>)
 8009b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b42:	f003 0307 	and.w	r3, r3, #7
 8009b46:	2b05      	cmp	r3, #5
 8009b48:	d826      	bhi.n	8009b98 <UART_SetConfig+0x1f4>
 8009b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b50 <UART_SetConfig+0x1ac>)
 8009b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b50:	08009b69 	.word	0x08009b69
 8009b54:	08009b71 	.word	0x08009b71
 8009b58:	08009b79 	.word	0x08009b79
 8009b5c:	08009b81 	.word	0x08009b81
 8009b60:	08009b89 	.word	0x08009b89
 8009b64:	08009b91 	.word	0x08009b91
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b6e:	e2f0      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009b70:	2304      	movs	r3, #4
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b76:	e2ec      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009b78:	2308      	movs	r3, #8
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b7e:	e2e8      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009b80:	2310      	movs	r3, #16
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b86:	e2e4      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009b88:	2320      	movs	r3, #32
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8e:	e2e0      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009b90:	2340      	movs	r3, #64	@ 0x40
 8009b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b96:	e2dc      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009b98:	2380      	movs	r3, #128	@ 0x80
 8009b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9e:	e2d8      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a4f      	ldr	r2, [pc, #316]	@ (8009ce4 <UART_SetConfig+0x340>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d130      	bne.n	8009c0c <UART_SetConfig+0x268>
 8009baa:	4b4c      	ldr	r3, [pc, #304]	@ (8009cdc <UART_SetConfig+0x338>)
 8009bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bae:	f003 0307 	and.w	r3, r3, #7
 8009bb2:	2b05      	cmp	r3, #5
 8009bb4:	d826      	bhi.n	8009c04 <UART_SetConfig+0x260>
 8009bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bbc <UART_SetConfig+0x218>)
 8009bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bbc:	08009bd5 	.word	0x08009bd5
 8009bc0:	08009bdd 	.word	0x08009bdd
 8009bc4:	08009be5 	.word	0x08009be5
 8009bc8:	08009bed 	.word	0x08009bed
 8009bcc:	08009bf5 	.word	0x08009bf5
 8009bd0:	08009bfd 	.word	0x08009bfd
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bda:	e2ba      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009bdc:	2304      	movs	r3, #4
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009be2:	e2b6      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009be4:	2308      	movs	r3, #8
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bea:	e2b2      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009bec:	2310      	movs	r3, #16
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bf2:	e2ae      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009bf4:	2320      	movs	r3, #32
 8009bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bfa:	e2aa      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009bfc:	2340      	movs	r3, #64	@ 0x40
 8009bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c02:	e2a6      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009c04:	2380      	movs	r3, #128	@ 0x80
 8009c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c0a:	e2a2      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a35      	ldr	r2, [pc, #212]	@ (8009ce8 <UART_SetConfig+0x344>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d130      	bne.n	8009c78 <UART_SetConfig+0x2d4>
 8009c16:	4b31      	ldr	r3, [pc, #196]	@ (8009cdc <UART_SetConfig+0x338>)
 8009c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c1a:	f003 0307 	and.w	r3, r3, #7
 8009c1e:	2b05      	cmp	r3, #5
 8009c20:	d826      	bhi.n	8009c70 <UART_SetConfig+0x2cc>
 8009c22:	a201      	add	r2, pc, #4	@ (adr r2, 8009c28 <UART_SetConfig+0x284>)
 8009c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c28:	08009c41 	.word	0x08009c41
 8009c2c:	08009c49 	.word	0x08009c49
 8009c30:	08009c51 	.word	0x08009c51
 8009c34:	08009c59 	.word	0x08009c59
 8009c38:	08009c61 	.word	0x08009c61
 8009c3c:	08009c69 	.word	0x08009c69
 8009c40:	2300      	movs	r3, #0
 8009c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c46:	e284      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009c48:	2304      	movs	r3, #4
 8009c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c4e:	e280      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009c50:	2308      	movs	r3, #8
 8009c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c56:	e27c      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009c58:	2310      	movs	r3, #16
 8009c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c5e:	e278      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009c60:	2320      	movs	r3, #32
 8009c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c66:	e274      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009c68:	2340      	movs	r3, #64	@ 0x40
 8009c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c6e:	e270      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009c70:	2380      	movs	r3, #128	@ 0x80
 8009c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c76:	e26c      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8009cec <UART_SetConfig+0x348>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d142      	bne.n	8009d08 <UART_SetConfig+0x364>
 8009c82:	4b16      	ldr	r3, [pc, #88]	@ (8009cdc <UART_SetConfig+0x338>)
 8009c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c86:	f003 0307 	and.w	r3, r3, #7
 8009c8a:	2b05      	cmp	r3, #5
 8009c8c:	d838      	bhi.n	8009d00 <UART_SetConfig+0x35c>
 8009c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c94 <UART_SetConfig+0x2f0>)
 8009c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c94:	08009cad 	.word	0x08009cad
 8009c98:	08009cb5 	.word	0x08009cb5
 8009c9c:	08009cbd 	.word	0x08009cbd
 8009ca0:	08009cc5 	.word	0x08009cc5
 8009ca4:	08009cf1 	.word	0x08009cf1
 8009ca8:	08009cf9 	.word	0x08009cf9
 8009cac:	2300      	movs	r3, #0
 8009cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cb2:	e24e      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009cb4:	2304      	movs	r3, #4
 8009cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cba:	e24a      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009cbc:	2308      	movs	r3, #8
 8009cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cc2:	e246      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009cc4:	2310      	movs	r3, #16
 8009cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cca:	e242      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009ccc:	cfff69f3 	.word	0xcfff69f3
 8009cd0:	58000c00 	.word	0x58000c00
 8009cd4:	11fff4ff 	.word	0x11fff4ff
 8009cd8:	40011000 	.word	0x40011000
 8009cdc:	58024400 	.word	0x58024400
 8009ce0:	40004400 	.word	0x40004400
 8009ce4:	40004800 	.word	0x40004800
 8009ce8:	40004c00 	.word	0x40004c00
 8009cec:	40005000 	.word	0x40005000
 8009cf0:	2320      	movs	r3, #32
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cf6:	e22c      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009cf8:	2340      	movs	r3, #64	@ 0x40
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cfe:	e228      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009d00:	2380      	movs	r3, #128	@ 0x80
 8009d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d06:	e224      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4ab1      	ldr	r2, [pc, #708]	@ (8009fd4 <UART_SetConfig+0x630>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d176      	bne.n	8009e00 <UART_SetConfig+0x45c>
 8009d12:	4bb1      	ldr	r3, [pc, #708]	@ (8009fd8 <UART_SetConfig+0x634>)
 8009d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d1a:	2b28      	cmp	r3, #40	@ 0x28
 8009d1c:	d86c      	bhi.n	8009df8 <UART_SetConfig+0x454>
 8009d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d24 <UART_SetConfig+0x380>)
 8009d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d24:	08009dc9 	.word	0x08009dc9
 8009d28:	08009df9 	.word	0x08009df9
 8009d2c:	08009df9 	.word	0x08009df9
 8009d30:	08009df9 	.word	0x08009df9
 8009d34:	08009df9 	.word	0x08009df9
 8009d38:	08009df9 	.word	0x08009df9
 8009d3c:	08009df9 	.word	0x08009df9
 8009d40:	08009df9 	.word	0x08009df9
 8009d44:	08009dd1 	.word	0x08009dd1
 8009d48:	08009df9 	.word	0x08009df9
 8009d4c:	08009df9 	.word	0x08009df9
 8009d50:	08009df9 	.word	0x08009df9
 8009d54:	08009df9 	.word	0x08009df9
 8009d58:	08009df9 	.word	0x08009df9
 8009d5c:	08009df9 	.word	0x08009df9
 8009d60:	08009df9 	.word	0x08009df9
 8009d64:	08009dd9 	.word	0x08009dd9
 8009d68:	08009df9 	.word	0x08009df9
 8009d6c:	08009df9 	.word	0x08009df9
 8009d70:	08009df9 	.word	0x08009df9
 8009d74:	08009df9 	.word	0x08009df9
 8009d78:	08009df9 	.word	0x08009df9
 8009d7c:	08009df9 	.word	0x08009df9
 8009d80:	08009df9 	.word	0x08009df9
 8009d84:	08009de1 	.word	0x08009de1
 8009d88:	08009df9 	.word	0x08009df9
 8009d8c:	08009df9 	.word	0x08009df9
 8009d90:	08009df9 	.word	0x08009df9
 8009d94:	08009df9 	.word	0x08009df9
 8009d98:	08009df9 	.word	0x08009df9
 8009d9c:	08009df9 	.word	0x08009df9
 8009da0:	08009df9 	.word	0x08009df9
 8009da4:	08009de9 	.word	0x08009de9
 8009da8:	08009df9 	.word	0x08009df9
 8009dac:	08009df9 	.word	0x08009df9
 8009db0:	08009df9 	.word	0x08009df9
 8009db4:	08009df9 	.word	0x08009df9
 8009db8:	08009df9 	.word	0x08009df9
 8009dbc:	08009df9 	.word	0x08009df9
 8009dc0:	08009df9 	.word	0x08009df9
 8009dc4:	08009df1 	.word	0x08009df1
 8009dc8:	2301      	movs	r3, #1
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dce:	e1c0      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009dd0:	2304      	movs	r3, #4
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd6:	e1bc      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009dd8:	2308      	movs	r3, #8
 8009dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dde:	e1b8      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009de0:	2310      	movs	r3, #16
 8009de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de6:	e1b4      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009de8:	2320      	movs	r3, #32
 8009dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dee:	e1b0      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009df0:	2340      	movs	r3, #64	@ 0x40
 8009df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df6:	e1ac      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009df8:	2380      	movs	r3, #128	@ 0x80
 8009dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfe:	e1a8      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a75      	ldr	r2, [pc, #468]	@ (8009fdc <UART_SetConfig+0x638>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d130      	bne.n	8009e6c <UART_SetConfig+0x4c8>
 8009e0a:	4b73      	ldr	r3, [pc, #460]	@ (8009fd8 <UART_SetConfig+0x634>)
 8009e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e0e:	f003 0307 	and.w	r3, r3, #7
 8009e12:	2b05      	cmp	r3, #5
 8009e14:	d826      	bhi.n	8009e64 <UART_SetConfig+0x4c0>
 8009e16:	a201      	add	r2, pc, #4	@ (adr r2, 8009e1c <UART_SetConfig+0x478>)
 8009e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1c:	08009e35 	.word	0x08009e35
 8009e20:	08009e3d 	.word	0x08009e3d
 8009e24:	08009e45 	.word	0x08009e45
 8009e28:	08009e4d 	.word	0x08009e4d
 8009e2c:	08009e55 	.word	0x08009e55
 8009e30:	08009e5d 	.word	0x08009e5d
 8009e34:	2300      	movs	r3, #0
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3a:	e18a      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009e3c:	2304      	movs	r3, #4
 8009e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e42:	e186      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009e44:	2308      	movs	r3, #8
 8009e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4a:	e182      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009e4c:	2310      	movs	r3, #16
 8009e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e52:	e17e      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009e54:	2320      	movs	r3, #32
 8009e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5a:	e17a      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009e5c:	2340      	movs	r3, #64	@ 0x40
 8009e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e62:	e176      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009e64:	2380      	movs	r3, #128	@ 0x80
 8009e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e6a:	e172      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a5b      	ldr	r2, [pc, #364]	@ (8009fe0 <UART_SetConfig+0x63c>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d130      	bne.n	8009ed8 <UART_SetConfig+0x534>
 8009e76:	4b58      	ldr	r3, [pc, #352]	@ (8009fd8 <UART_SetConfig+0x634>)
 8009e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e7a:	f003 0307 	and.w	r3, r3, #7
 8009e7e:	2b05      	cmp	r3, #5
 8009e80:	d826      	bhi.n	8009ed0 <UART_SetConfig+0x52c>
 8009e82:	a201      	add	r2, pc, #4	@ (adr r2, 8009e88 <UART_SetConfig+0x4e4>)
 8009e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e88:	08009ea1 	.word	0x08009ea1
 8009e8c:	08009ea9 	.word	0x08009ea9
 8009e90:	08009eb1 	.word	0x08009eb1
 8009e94:	08009eb9 	.word	0x08009eb9
 8009e98:	08009ec1 	.word	0x08009ec1
 8009e9c:	08009ec9 	.word	0x08009ec9
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea6:	e154      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009ea8:	2304      	movs	r3, #4
 8009eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eae:	e150      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009eb0:	2308      	movs	r3, #8
 8009eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb6:	e14c      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009eb8:	2310      	movs	r3, #16
 8009eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ebe:	e148      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009ec0:	2320      	movs	r3, #32
 8009ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ec6:	e144      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009ec8:	2340      	movs	r3, #64	@ 0x40
 8009eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ece:	e140      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009ed0:	2380      	movs	r3, #128	@ 0x80
 8009ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ed6:	e13c      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a41      	ldr	r2, [pc, #260]	@ (8009fe4 <UART_SetConfig+0x640>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	f040 8082 	bne.w	8009fe8 <UART_SetConfig+0x644>
 8009ee4:	4b3c      	ldr	r3, [pc, #240]	@ (8009fd8 <UART_SetConfig+0x634>)
 8009ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ee8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009eec:	2b28      	cmp	r3, #40	@ 0x28
 8009eee:	d86d      	bhi.n	8009fcc <UART_SetConfig+0x628>
 8009ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef8 <UART_SetConfig+0x554>)
 8009ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef6:	bf00      	nop
 8009ef8:	08009f9d 	.word	0x08009f9d
 8009efc:	08009fcd 	.word	0x08009fcd
 8009f00:	08009fcd 	.word	0x08009fcd
 8009f04:	08009fcd 	.word	0x08009fcd
 8009f08:	08009fcd 	.word	0x08009fcd
 8009f0c:	08009fcd 	.word	0x08009fcd
 8009f10:	08009fcd 	.word	0x08009fcd
 8009f14:	08009fcd 	.word	0x08009fcd
 8009f18:	08009fa5 	.word	0x08009fa5
 8009f1c:	08009fcd 	.word	0x08009fcd
 8009f20:	08009fcd 	.word	0x08009fcd
 8009f24:	08009fcd 	.word	0x08009fcd
 8009f28:	08009fcd 	.word	0x08009fcd
 8009f2c:	08009fcd 	.word	0x08009fcd
 8009f30:	08009fcd 	.word	0x08009fcd
 8009f34:	08009fcd 	.word	0x08009fcd
 8009f38:	08009fad 	.word	0x08009fad
 8009f3c:	08009fcd 	.word	0x08009fcd
 8009f40:	08009fcd 	.word	0x08009fcd
 8009f44:	08009fcd 	.word	0x08009fcd
 8009f48:	08009fcd 	.word	0x08009fcd
 8009f4c:	08009fcd 	.word	0x08009fcd
 8009f50:	08009fcd 	.word	0x08009fcd
 8009f54:	08009fcd 	.word	0x08009fcd
 8009f58:	08009fb5 	.word	0x08009fb5
 8009f5c:	08009fcd 	.word	0x08009fcd
 8009f60:	08009fcd 	.word	0x08009fcd
 8009f64:	08009fcd 	.word	0x08009fcd
 8009f68:	08009fcd 	.word	0x08009fcd
 8009f6c:	08009fcd 	.word	0x08009fcd
 8009f70:	08009fcd 	.word	0x08009fcd
 8009f74:	08009fcd 	.word	0x08009fcd
 8009f78:	08009fbd 	.word	0x08009fbd
 8009f7c:	08009fcd 	.word	0x08009fcd
 8009f80:	08009fcd 	.word	0x08009fcd
 8009f84:	08009fcd 	.word	0x08009fcd
 8009f88:	08009fcd 	.word	0x08009fcd
 8009f8c:	08009fcd 	.word	0x08009fcd
 8009f90:	08009fcd 	.word	0x08009fcd
 8009f94:	08009fcd 	.word	0x08009fcd
 8009f98:	08009fc5 	.word	0x08009fc5
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fa2:	e0d6      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009fa4:	2304      	movs	r3, #4
 8009fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009faa:	e0d2      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009fac:	2308      	movs	r3, #8
 8009fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fb2:	e0ce      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009fb4:	2310      	movs	r3, #16
 8009fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fba:	e0ca      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009fbc:	2320      	movs	r3, #32
 8009fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fc2:	e0c6      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009fc4:	2340      	movs	r3, #64	@ 0x40
 8009fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fca:	e0c2      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009fcc:	2380      	movs	r3, #128	@ 0x80
 8009fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fd2:	e0be      	b.n	800a152 <UART_SetConfig+0x7ae>
 8009fd4:	40011400 	.word	0x40011400
 8009fd8:	58024400 	.word	0x58024400
 8009fdc:	40007800 	.word	0x40007800
 8009fe0:	40007c00 	.word	0x40007c00
 8009fe4:	40011800 	.word	0x40011800
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4aad      	ldr	r2, [pc, #692]	@ (800a2a4 <UART_SetConfig+0x900>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d176      	bne.n	800a0e0 <UART_SetConfig+0x73c>
 8009ff2:	4bad      	ldr	r3, [pc, #692]	@ (800a2a8 <UART_SetConfig+0x904>)
 8009ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ff6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ffa:	2b28      	cmp	r3, #40	@ 0x28
 8009ffc:	d86c      	bhi.n	800a0d8 <UART_SetConfig+0x734>
 8009ffe:	a201      	add	r2, pc, #4	@ (adr r2, 800a004 <UART_SetConfig+0x660>)
 800a000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a004:	0800a0a9 	.word	0x0800a0a9
 800a008:	0800a0d9 	.word	0x0800a0d9
 800a00c:	0800a0d9 	.word	0x0800a0d9
 800a010:	0800a0d9 	.word	0x0800a0d9
 800a014:	0800a0d9 	.word	0x0800a0d9
 800a018:	0800a0d9 	.word	0x0800a0d9
 800a01c:	0800a0d9 	.word	0x0800a0d9
 800a020:	0800a0d9 	.word	0x0800a0d9
 800a024:	0800a0b1 	.word	0x0800a0b1
 800a028:	0800a0d9 	.word	0x0800a0d9
 800a02c:	0800a0d9 	.word	0x0800a0d9
 800a030:	0800a0d9 	.word	0x0800a0d9
 800a034:	0800a0d9 	.word	0x0800a0d9
 800a038:	0800a0d9 	.word	0x0800a0d9
 800a03c:	0800a0d9 	.word	0x0800a0d9
 800a040:	0800a0d9 	.word	0x0800a0d9
 800a044:	0800a0b9 	.word	0x0800a0b9
 800a048:	0800a0d9 	.word	0x0800a0d9
 800a04c:	0800a0d9 	.word	0x0800a0d9
 800a050:	0800a0d9 	.word	0x0800a0d9
 800a054:	0800a0d9 	.word	0x0800a0d9
 800a058:	0800a0d9 	.word	0x0800a0d9
 800a05c:	0800a0d9 	.word	0x0800a0d9
 800a060:	0800a0d9 	.word	0x0800a0d9
 800a064:	0800a0c1 	.word	0x0800a0c1
 800a068:	0800a0d9 	.word	0x0800a0d9
 800a06c:	0800a0d9 	.word	0x0800a0d9
 800a070:	0800a0d9 	.word	0x0800a0d9
 800a074:	0800a0d9 	.word	0x0800a0d9
 800a078:	0800a0d9 	.word	0x0800a0d9
 800a07c:	0800a0d9 	.word	0x0800a0d9
 800a080:	0800a0d9 	.word	0x0800a0d9
 800a084:	0800a0c9 	.word	0x0800a0c9
 800a088:	0800a0d9 	.word	0x0800a0d9
 800a08c:	0800a0d9 	.word	0x0800a0d9
 800a090:	0800a0d9 	.word	0x0800a0d9
 800a094:	0800a0d9 	.word	0x0800a0d9
 800a098:	0800a0d9 	.word	0x0800a0d9
 800a09c:	0800a0d9 	.word	0x0800a0d9
 800a0a0:	0800a0d9 	.word	0x0800a0d9
 800a0a4:	0800a0d1 	.word	0x0800a0d1
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ae:	e050      	b.n	800a152 <UART_SetConfig+0x7ae>
 800a0b0:	2304      	movs	r3, #4
 800a0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0b6:	e04c      	b.n	800a152 <UART_SetConfig+0x7ae>
 800a0b8:	2308      	movs	r3, #8
 800a0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0be:	e048      	b.n	800a152 <UART_SetConfig+0x7ae>
 800a0c0:	2310      	movs	r3, #16
 800a0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0c6:	e044      	b.n	800a152 <UART_SetConfig+0x7ae>
 800a0c8:	2320      	movs	r3, #32
 800a0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ce:	e040      	b.n	800a152 <UART_SetConfig+0x7ae>
 800a0d0:	2340      	movs	r3, #64	@ 0x40
 800a0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0d6:	e03c      	b.n	800a152 <UART_SetConfig+0x7ae>
 800a0d8:	2380      	movs	r3, #128	@ 0x80
 800a0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0de:	e038      	b.n	800a152 <UART_SetConfig+0x7ae>
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a71      	ldr	r2, [pc, #452]	@ (800a2ac <UART_SetConfig+0x908>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d130      	bne.n	800a14c <UART_SetConfig+0x7a8>
 800a0ea:	4b6f      	ldr	r3, [pc, #444]	@ (800a2a8 <UART_SetConfig+0x904>)
 800a0ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0ee:	f003 0307 	and.w	r3, r3, #7
 800a0f2:	2b05      	cmp	r3, #5
 800a0f4:	d826      	bhi.n	800a144 <UART_SetConfig+0x7a0>
 800a0f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0fc <UART_SetConfig+0x758>)
 800a0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fc:	0800a115 	.word	0x0800a115
 800a100:	0800a11d 	.word	0x0800a11d
 800a104:	0800a125 	.word	0x0800a125
 800a108:	0800a12d 	.word	0x0800a12d
 800a10c:	0800a135 	.word	0x0800a135
 800a110:	0800a13d 	.word	0x0800a13d
 800a114:	2302      	movs	r3, #2
 800a116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a11a:	e01a      	b.n	800a152 <UART_SetConfig+0x7ae>
 800a11c:	2304      	movs	r3, #4
 800a11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a122:	e016      	b.n	800a152 <UART_SetConfig+0x7ae>
 800a124:	2308      	movs	r3, #8
 800a126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12a:	e012      	b.n	800a152 <UART_SetConfig+0x7ae>
 800a12c:	2310      	movs	r3, #16
 800a12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a132:	e00e      	b.n	800a152 <UART_SetConfig+0x7ae>
 800a134:	2320      	movs	r3, #32
 800a136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a13a:	e00a      	b.n	800a152 <UART_SetConfig+0x7ae>
 800a13c:	2340      	movs	r3, #64	@ 0x40
 800a13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a142:	e006      	b.n	800a152 <UART_SetConfig+0x7ae>
 800a144:	2380      	movs	r3, #128	@ 0x80
 800a146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a14a:	e002      	b.n	800a152 <UART_SetConfig+0x7ae>
 800a14c:	2380      	movs	r3, #128	@ 0x80
 800a14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a55      	ldr	r2, [pc, #340]	@ (800a2ac <UART_SetConfig+0x908>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	f040 80f8 	bne.w	800a34e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a15e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a162:	2b20      	cmp	r3, #32
 800a164:	dc46      	bgt.n	800a1f4 <UART_SetConfig+0x850>
 800a166:	2b02      	cmp	r3, #2
 800a168:	db75      	blt.n	800a256 <UART_SetConfig+0x8b2>
 800a16a:	3b02      	subs	r3, #2
 800a16c:	2b1e      	cmp	r3, #30
 800a16e:	d872      	bhi.n	800a256 <UART_SetConfig+0x8b2>
 800a170:	a201      	add	r2, pc, #4	@ (adr r2, 800a178 <UART_SetConfig+0x7d4>)
 800a172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a176:	bf00      	nop
 800a178:	0800a1fb 	.word	0x0800a1fb
 800a17c:	0800a257 	.word	0x0800a257
 800a180:	0800a203 	.word	0x0800a203
 800a184:	0800a257 	.word	0x0800a257
 800a188:	0800a257 	.word	0x0800a257
 800a18c:	0800a257 	.word	0x0800a257
 800a190:	0800a213 	.word	0x0800a213
 800a194:	0800a257 	.word	0x0800a257
 800a198:	0800a257 	.word	0x0800a257
 800a19c:	0800a257 	.word	0x0800a257
 800a1a0:	0800a257 	.word	0x0800a257
 800a1a4:	0800a257 	.word	0x0800a257
 800a1a8:	0800a257 	.word	0x0800a257
 800a1ac:	0800a257 	.word	0x0800a257
 800a1b0:	0800a223 	.word	0x0800a223
 800a1b4:	0800a257 	.word	0x0800a257
 800a1b8:	0800a257 	.word	0x0800a257
 800a1bc:	0800a257 	.word	0x0800a257
 800a1c0:	0800a257 	.word	0x0800a257
 800a1c4:	0800a257 	.word	0x0800a257
 800a1c8:	0800a257 	.word	0x0800a257
 800a1cc:	0800a257 	.word	0x0800a257
 800a1d0:	0800a257 	.word	0x0800a257
 800a1d4:	0800a257 	.word	0x0800a257
 800a1d8:	0800a257 	.word	0x0800a257
 800a1dc:	0800a257 	.word	0x0800a257
 800a1e0:	0800a257 	.word	0x0800a257
 800a1e4:	0800a257 	.word	0x0800a257
 800a1e8:	0800a257 	.word	0x0800a257
 800a1ec:	0800a257 	.word	0x0800a257
 800a1f0:	0800a249 	.word	0x0800a249
 800a1f4:	2b40      	cmp	r3, #64	@ 0x40
 800a1f6:	d02a      	beq.n	800a24e <UART_SetConfig+0x8aa>
 800a1f8:	e02d      	b.n	800a256 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a1fa:	f7fd fe25 	bl	8007e48 <HAL_RCCEx_GetD3PCLK1Freq>
 800a1fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a200:	e02f      	b.n	800a262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a206:	4618      	mov	r0, r3
 800a208:	f7fd fe34 	bl	8007e74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a210:	e027      	b.n	800a262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a212:	f107 0318 	add.w	r3, r7, #24
 800a216:	4618      	mov	r0, r3
 800a218:	f7fd ff80 	bl	800811c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a220:	e01f      	b.n	800a262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a222:	4b21      	ldr	r3, [pc, #132]	@ (800a2a8 <UART_SetConfig+0x904>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 0320 	and.w	r3, r3, #32
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d009      	beq.n	800a242 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a22e:	4b1e      	ldr	r3, [pc, #120]	@ (800a2a8 <UART_SetConfig+0x904>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	08db      	lsrs	r3, r3, #3
 800a234:	f003 0303 	and.w	r3, r3, #3
 800a238:	4a1d      	ldr	r2, [pc, #116]	@ (800a2b0 <UART_SetConfig+0x90c>)
 800a23a:	fa22 f303 	lsr.w	r3, r2, r3
 800a23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a240:	e00f      	b.n	800a262 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a242:	4b1b      	ldr	r3, [pc, #108]	@ (800a2b0 <UART_SetConfig+0x90c>)
 800a244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a246:	e00c      	b.n	800a262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a248:	4b1a      	ldr	r3, [pc, #104]	@ (800a2b4 <UART_SetConfig+0x910>)
 800a24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a24c:	e009      	b.n	800a262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a24e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a254:	e005      	b.n	800a262 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a256:	2300      	movs	r3, #0
 800a258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a260:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 81ee 	beq.w	800a646 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a26e:	4a12      	ldr	r2, [pc, #72]	@ (800a2b8 <UART_SetConfig+0x914>)
 800a270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a274:	461a      	mov	r2, r3
 800a276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a278:	fbb3 f3f2 	udiv	r3, r3, r2
 800a27c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	685a      	ldr	r2, [r3, #4]
 800a282:	4613      	mov	r3, r2
 800a284:	005b      	lsls	r3, r3, #1
 800a286:	4413      	add	r3, r2
 800a288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d305      	bcc.n	800a29a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a294:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a296:	429a      	cmp	r2, r3
 800a298:	d910      	bls.n	800a2bc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a2a0:	e1d1      	b.n	800a646 <UART_SetConfig+0xca2>
 800a2a2:	bf00      	nop
 800a2a4:	40011c00 	.word	0x40011c00
 800a2a8:	58024400 	.word	0x58024400
 800a2ac:	58000c00 	.word	0x58000c00
 800a2b0:	03d09000 	.word	0x03d09000
 800a2b4:	003d0900 	.word	0x003d0900
 800a2b8:	0800d9e8 	.word	0x0800d9e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2be:	2200      	movs	r2, #0
 800a2c0:	60bb      	str	r3, [r7, #8]
 800a2c2:	60fa      	str	r2, [r7, #12]
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2c8:	4ac0      	ldr	r2, [pc, #768]	@ (800a5cc <UART_SetConfig+0xc28>)
 800a2ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	603b      	str	r3, [r7, #0]
 800a2d4:	607a      	str	r2, [r7, #4]
 800a2d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a2de:	f7f6 f85f 	bl	80003a0 <__aeabi_uldivmod>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	4610      	mov	r0, r2
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	f04f 0200 	mov.w	r2, #0
 800a2ee:	f04f 0300 	mov.w	r3, #0
 800a2f2:	020b      	lsls	r3, r1, #8
 800a2f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a2f8:	0202      	lsls	r2, r0, #8
 800a2fa:	6979      	ldr	r1, [r7, #20]
 800a2fc:	6849      	ldr	r1, [r1, #4]
 800a2fe:	0849      	lsrs	r1, r1, #1
 800a300:	2000      	movs	r0, #0
 800a302:	460c      	mov	r4, r1
 800a304:	4605      	mov	r5, r0
 800a306:	eb12 0804 	adds.w	r8, r2, r4
 800a30a:	eb43 0905 	adc.w	r9, r3, r5
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	469a      	mov	sl, r3
 800a316:	4693      	mov	fp, r2
 800a318:	4652      	mov	r2, sl
 800a31a:	465b      	mov	r3, fp
 800a31c:	4640      	mov	r0, r8
 800a31e:	4649      	mov	r1, r9
 800a320:	f7f6 f83e 	bl	80003a0 <__aeabi_uldivmod>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	4613      	mov	r3, r2
 800a32a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a332:	d308      	bcc.n	800a346 <UART_SetConfig+0x9a2>
 800a334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a33a:	d204      	bcs.n	800a346 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a342:	60da      	str	r2, [r3, #12]
 800a344:	e17f      	b.n	800a646 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a34c:	e17b      	b.n	800a646 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	69db      	ldr	r3, [r3, #28]
 800a352:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a356:	f040 80bd 	bne.w	800a4d4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a35a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a35e:	2b20      	cmp	r3, #32
 800a360:	dc48      	bgt.n	800a3f4 <UART_SetConfig+0xa50>
 800a362:	2b00      	cmp	r3, #0
 800a364:	db7b      	blt.n	800a45e <UART_SetConfig+0xaba>
 800a366:	2b20      	cmp	r3, #32
 800a368:	d879      	bhi.n	800a45e <UART_SetConfig+0xaba>
 800a36a:	a201      	add	r2, pc, #4	@ (adr r2, 800a370 <UART_SetConfig+0x9cc>)
 800a36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a370:	0800a3fb 	.word	0x0800a3fb
 800a374:	0800a403 	.word	0x0800a403
 800a378:	0800a45f 	.word	0x0800a45f
 800a37c:	0800a45f 	.word	0x0800a45f
 800a380:	0800a40b 	.word	0x0800a40b
 800a384:	0800a45f 	.word	0x0800a45f
 800a388:	0800a45f 	.word	0x0800a45f
 800a38c:	0800a45f 	.word	0x0800a45f
 800a390:	0800a41b 	.word	0x0800a41b
 800a394:	0800a45f 	.word	0x0800a45f
 800a398:	0800a45f 	.word	0x0800a45f
 800a39c:	0800a45f 	.word	0x0800a45f
 800a3a0:	0800a45f 	.word	0x0800a45f
 800a3a4:	0800a45f 	.word	0x0800a45f
 800a3a8:	0800a45f 	.word	0x0800a45f
 800a3ac:	0800a45f 	.word	0x0800a45f
 800a3b0:	0800a42b 	.word	0x0800a42b
 800a3b4:	0800a45f 	.word	0x0800a45f
 800a3b8:	0800a45f 	.word	0x0800a45f
 800a3bc:	0800a45f 	.word	0x0800a45f
 800a3c0:	0800a45f 	.word	0x0800a45f
 800a3c4:	0800a45f 	.word	0x0800a45f
 800a3c8:	0800a45f 	.word	0x0800a45f
 800a3cc:	0800a45f 	.word	0x0800a45f
 800a3d0:	0800a45f 	.word	0x0800a45f
 800a3d4:	0800a45f 	.word	0x0800a45f
 800a3d8:	0800a45f 	.word	0x0800a45f
 800a3dc:	0800a45f 	.word	0x0800a45f
 800a3e0:	0800a45f 	.word	0x0800a45f
 800a3e4:	0800a45f 	.word	0x0800a45f
 800a3e8:	0800a45f 	.word	0x0800a45f
 800a3ec:	0800a45f 	.word	0x0800a45f
 800a3f0:	0800a451 	.word	0x0800a451
 800a3f4:	2b40      	cmp	r3, #64	@ 0x40
 800a3f6:	d02e      	beq.n	800a456 <UART_SetConfig+0xab2>
 800a3f8:	e031      	b.n	800a45e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3fa:	f7fc fb3b 	bl	8006a74 <HAL_RCC_GetPCLK1Freq>
 800a3fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a400:	e033      	b.n	800a46a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a402:	f7fc fb4d 	bl	8006aa0 <HAL_RCC_GetPCLK2Freq>
 800a406:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a408:	e02f      	b.n	800a46a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a40a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fd fd30 	bl	8007e74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a418:	e027      	b.n	800a46a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a41a:	f107 0318 	add.w	r3, r7, #24
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fd fe7c 	bl	800811c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a428:	e01f      	b.n	800a46a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a42a:	4b69      	ldr	r3, [pc, #420]	@ (800a5d0 <UART_SetConfig+0xc2c>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f003 0320 	and.w	r3, r3, #32
 800a432:	2b00      	cmp	r3, #0
 800a434:	d009      	beq.n	800a44a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a436:	4b66      	ldr	r3, [pc, #408]	@ (800a5d0 <UART_SetConfig+0xc2c>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	08db      	lsrs	r3, r3, #3
 800a43c:	f003 0303 	and.w	r3, r3, #3
 800a440:	4a64      	ldr	r2, [pc, #400]	@ (800a5d4 <UART_SetConfig+0xc30>)
 800a442:	fa22 f303 	lsr.w	r3, r2, r3
 800a446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a448:	e00f      	b.n	800a46a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a44a:	4b62      	ldr	r3, [pc, #392]	@ (800a5d4 <UART_SetConfig+0xc30>)
 800a44c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a44e:	e00c      	b.n	800a46a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a450:	4b61      	ldr	r3, [pc, #388]	@ (800a5d8 <UART_SetConfig+0xc34>)
 800a452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a454:	e009      	b.n	800a46a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a45c:	e005      	b.n	800a46a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a45e:	2300      	movs	r3, #0
 800a460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a468:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a46a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 80ea 	beq.w	800a646 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a476:	4a55      	ldr	r2, [pc, #340]	@ (800a5cc <UART_SetConfig+0xc28>)
 800a478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a47c:	461a      	mov	r2, r3
 800a47e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a480:	fbb3 f3f2 	udiv	r3, r3, r2
 800a484:	005a      	lsls	r2, r3, #1
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	085b      	lsrs	r3, r3, #1
 800a48c:	441a      	add	r2, r3
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	fbb2 f3f3 	udiv	r3, r2, r3
 800a496:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a49a:	2b0f      	cmp	r3, #15
 800a49c:	d916      	bls.n	800a4cc <UART_SetConfig+0xb28>
 800a49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4a4:	d212      	bcs.n	800a4cc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	f023 030f 	bic.w	r3, r3, #15
 800a4ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b2:	085b      	lsrs	r3, r3, #1
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	f003 0307 	and.w	r3, r3, #7
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a4c8:	60da      	str	r2, [r3, #12]
 800a4ca:	e0bc      	b.n	800a646 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a4d2:	e0b8      	b.n	800a646 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a4d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a4d8:	2b20      	cmp	r3, #32
 800a4da:	dc4b      	bgt.n	800a574 <UART_SetConfig+0xbd0>
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f2c0 8087 	blt.w	800a5f0 <UART_SetConfig+0xc4c>
 800a4e2:	2b20      	cmp	r3, #32
 800a4e4:	f200 8084 	bhi.w	800a5f0 <UART_SetConfig+0xc4c>
 800a4e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a4f0 <UART_SetConfig+0xb4c>)
 800a4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ee:	bf00      	nop
 800a4f0:	0800a57b 	.word	0x0800a57b
 800a4f4:	0800a583 	.word	0x0800a583
 800a4f8:	0800a5f1 	.word	0x0800a5f1
 800a4fc:	0800a5f1 	.word	0x0800a5f1
 800a500:	0800a58b 	.word	0x0800a58b
 800a504:	0800a5f1 	.word	0x0800a5f1
 800a508:	0800a5f1 	.word	0x0800a5f1
 800a50c:	0800a5f1 	.word	0x0800a5f1
 800a510:	0800a59b 	.word	0x0800a59b
 800a514:	0800a5f1 	.word	0x0800a5f1
 800a518:	0800a5f1 	.word	0x0800a5f1
 800a51c:	0800a5f1 	.word	0x0800a5f1
 800a520:	0800a5f1 	.word	0x0800a5f1
 800a524:	0800a5f1 	.word	0x0800a5f1
 800a528:	0800a5f1 	.word	0x0800a5f1
 800a52c:	0800a5f1 	.word	0x0800a5f1
 800a530:	0800a5ab 	.word	0x0800a5ab
 800a534:	0800a5f1 	.word	0x0800a5f1
 800a538:	0800a5f1 	.word	0x0800a5f1
 800a53c:	0800a5f1 	.word	0x0800a5f1
 800a540:	0800a5f1 	.word	0x0800a5f1
 800a544:	0800a5f1 	.word	0x0800a5f1
 800a548:	0800a5f1 	.word	0x0800a5f1
 800a54c:	0800a5f1 	.word	0x0800a5f1
 800a550:	0800a5f1 	.word	0x0800a5f1
 800a554:	0800a5f1 	.word	0x0800a5f1
 800a558:	0800a5f1 	.word	0x0800a5f1
 800a55c:	0800a5f1 	.word	0x0800a5f1
 800a560:	0800a5f1 	.word	0x0800a5f1
 800a564:	0800a5f1 	.word	0x0800a5f1
 800a568:	0800a5f1 	.word	0x0800a5f1
 800a56c:	0800a5f1 	.word	0x0800a5f1
 800a570:	0800a5e3 	.word	0x0800a5e3
 800a574:	2b40      	cmp	r3, #64	@ 0x40
 800a576:	d037      	beq.n	800a5e8 <UART_SetConfig+0xc44>
 800a578:	e03a      	b.n	800a5f0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a57a:	f7fc fa7b 	bl	8006a74 <HAL_RCC_GetPCLK1Freq>
 800a57e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a580:	e03c      	b.n	800a5fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a582:	f7fc fa8d 	bl	8006aa0 <HAL_RCC_GetPCLK2Freq>
 800a586:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a588:	e038      	b.n	800a5fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a58a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a58e:	4618      	mov	r0, r3
 800a590:	f7fd fc70 	bl	8007e74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a598:	e030      	b.n	800a5fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a59a:	f107 0318 	add.w	r3, r7, #24
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7fd fdbc 	bl	800811c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5a8:	e028      	b.n	800a5fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5aa:	4b09      	ldr	r3, [pc, #36]	@ (800a5d0 <UART_SetConfig+0xc2c>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 0320 	and.w	r3, r3, #32
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d012      	beq.n	800a5dc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a5b6:	4b06      	ldr	r3, [pc, #24]	@ (800a5d0 <UART_SetConfig+0xc2c>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	08db      	lsrs	r3, r3, #3
 800a5bc:	f003 0303 	and.w	r3, r3, #3
 800a5c0:	4a04      	ldr	r2, [pc, #16]	@ (800a5d4 <UART_SetConfig+0xc30>)
 800a5c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a5c8:	e018      	b.n	800a5fc <UART_SetConfig+0xc58>
 800a5ca:	bf00      	nop
 800a5cc:	0800d9e8 	.word	0x0800d9e8
 800a5d0:	58024400 	.word	0x58024400
 800a5d4:	03d09000 	.word	0x03d09000
 800a5d8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a5dc:	4b24      	ldr	r3, [pc, #144]	@ (800a670 <UART_SetConfig+0xccc>)
 800a5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5e0:	e00c      	b.n	800a5fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a5e2:	4b24      	ldr	r3, [pc, #144]	@ (800a674 <UART_SetConfig+0xcd0>)
 800a5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5e6:	e009      	b.n	800a5fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ee:	e005      	b.n	800a5fc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a5fa:	bf00      	nop
    }

    if (pclk != 0U)
 800a5fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d021      	beq.n	800a646 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a606:	4a1c      	ldr	r2, [pc, #112]	@ (800a678 <UART_SetConfig+0xcd4>)
 800a608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a60c:	461a      	mov	r2, r3
 800a60e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a610:	fbb3 f2f2 	udiv	r2, r3, r2
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	085b      	lsrs	r3, r3, #1
 800a61a:	441a      	add	r2, r3
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	fbb2 f3f3 	udiv	r3, r2, r3
 800a624:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a628:	2b0f      	cmp	r3, #15
 800a62a:	d909      	bls.n	800a640 <UART_SetConfig+0xc9c>
 800a62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a62e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a632:	d205      	bcs.n	800a640 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a636:	b29a      	uxth	r2, r3
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	60da      	str	r2, [r3, #12]
 800a63e:	e002      	b.n	800a646 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	2201      	movs	r2, #1
 800a64a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	2201      	movs	r2, #1
 800a652:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	2200      	movs	r2, #0
 800a65a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	2200      	movs	r2, #0
 800a660:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a662:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a666:	4618      	mov	r0, r3
 800a668:	3748      	adds	r7, #72	@ 0x48
 800a66a:	46bd      	mov	sp, r7
 800a66c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a670:	03d09000 	.word	0x03d09000
 800a674:	003d0900 	.word	0x003d0900
 800a678:	0800d9e8 	.word	0x0800d9e8

0800a67c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a688:	f003 0308 	and.w	r3, r3, #8
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00a      	beq.n	800a6a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	430a      	orrs	r2, r1
 800a6a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6aa:	f003 0301 	and.w	r3, r3, #1
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00a      	beq.n	800a6c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	430a      	orrs	r2, r1
 800a6c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6cc:	f003 0302 	and.w	r3, r3, #2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00a      	beq.n	800a6ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ee:	f003 0304 	and.w	r3, r3, #4
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00a      	beq.n	800a70c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	430a      	orrs	r2, r1
 800a70a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a710:	f003 0310 	and.w	r3, r3, #16
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00a      	beq.n	800a72e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	430a      	orrs	r2, r1
 800a72c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a732:	f003 0320 	and.w	r3, r3, #32
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00a      	beq.n	800a750 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	430a      	orrs	r2, r1
 800a74e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d01a      	beq.n	800a792 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	430a      	orrs	r2, r1
 800a770:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a776:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a77a:	d10a      	bne.n	800a792 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	430a      	orrs	r2, r1
 800a790:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00a      	beq.n	800a7b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	430a      	orrs	r2, r1
 800a7b2:	605a      	str	r2, [r3, #4]
  }
}
 800a7b4:	bf00      	nop
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b098      	sub	sp, #96	@ 0x60
 800a7c4:	af02      	add	r7, sp, #8
 800a7c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7d0:	f7f7 fa60 	bl	8001c94 <HAL_GetTick>
 800a7d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f003 0308 	and.w	r3, r3, #8
 800a7e0:	2b08      	cmp	r3, #8
 800a7e2:	d12f      	bne.n	800a844 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 f88e 	bl	800a914 <UART_WaitOnFlagUntilTimeout>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d022      	beq.n	800a844 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a806:	e853 3f00 	ldrex	r3, [r3]
 800a80a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a80c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a80e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a812:	653b      	str	r3, [r7, #80]	@ 0x50
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	461a      	mov	r2, r3
 800a81a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a81c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a81e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a820:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a822:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a824:	e841 2300 	strex	r3, r2, [r1]
 800a828:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a82a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1e6      	bne.n	800a7fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2220      	movs	r2, #32
 800a834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a840:	2303      	movs	r3, #3
 800a842:	e063      	b.n	800a90c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 0304 	and.w	r3, r3, #4
 800a84e:	2b04      	cmp	r3, #4
 800a850:	d149      	bne.n	800a8e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a852:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a85a:	2200      	movs	r2, #0
 800a85c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f857 	bl	800a914 <UART_WaitOnFlagUntilTimeout>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d03c      	beq.n	800a8e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a874:	e853 3f00 	ldrex	r3, [r3]
 800a878:	623b      	str	r3, [r7, #32]
   return(result);
 800a87a:	6a3b      	ldr	r3, [r7, #32]
 800a87c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a880:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	461a      	mov	r2, r3
 800a888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a88a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a88c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a892:	e841 2300 	strex	r3, r2, [r1]
 800a896:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1e6      	bne.n	800a86c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	e853 3f00 	ldrex	r3, [r3]
 800a8ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f023 0301 	bic.w	r3, r3, #1
 800a8b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8be:	61fa      	str	r2, [r7, #28]
 800a8c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c2:	69b9      	ldr	r1, [r7, #24]
 800a8c4:	69fa      	ldr	r2, [r7, #28]
 800a8c6:	e841 2300 	strex	r3, r2, [r1]
 800a8ca:	617b      	str	r3, [r7, #20]
   return(result);
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1e5      	bne.n	800a89e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2220      	movs	r2, #32
 800a8d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e012      	b.n	800a90c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2220      	movs	r2, #32
 800a8ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2220      	movs	r2, #32
 800a8f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3758      	adds	r7, #88	@ 0x58
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	603b      	str	r3, [r7, #0]
 800a920:	4613      	mov	r3, r2
 800a922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a924:	e04f      	b.n	800a9c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a92c:	d04b      	beq.n	800a9c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a92e:	f7f7 f9b1 	bl	8001c94 <HAL_GetTick>
 800a932:	4602      	mov	r2, r0
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	69ba      	ldr	r2, [r7, #24]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d302      	bcc.n	800a944 <UART_WaitOnFlagUntilTimeout+0x30>
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d101      	bne.n	800a948 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a944:	2303      	movs	r3, #3
 800a946:	e04e      	b.n	800a9e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f003 0304 	and.w	r3, r3, #4
 800a952:	2b00      	cmp	r3, #0
 800a954:	d037      	beq.n	800a9c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	2b80      	cmp	r3, #128	@ 0x80
 800a95a:	d034      	beq.n	800a9c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	2b40      	cmp	r3, #64	@ 0x40
 800a960:	d031      	beq.n	800a9c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	69db      	ldr	r3, [r3, #28]
 800a968:	f003 0308 	and.w	r3, r3, #8
 800a96c:	2b08      	cmp	r3, #8
 800a96e:	d110      	bne.n	800a992 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2208      	movs	r2, #8
 800a976:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f000 f921 	bl	800abc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2208      	movs	r2, #8
 800a982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	e029      	b.n	800a9e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	69db      	ldr	r3, [r3, #28]
 800a998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a99c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9a0:	d111      	bne.n	800a9c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a9aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f000 f907 	bl	800abc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2220      	movs	r2, #32
 800a9b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a9c2:	2303      	movs	r3, #3
 800a9c4:	e00f      	b.n	800a9e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	69da      	ldr	r2, [r3, #28]
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	bf0c      	ite	eq
 800a9d6:	2301      	moveq	r3, #1
 800a9d8:	2300      	movne	r3, #0
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	461a      	mov	r2, r3
 800a9de:	79fb      	ldrb	r3, [r7, #7]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d0a0      	beq.n	800a926 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
	...

0800a9f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b096      	sub	sp, #88	@ 0x58
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	88fa      	ldrh	r2, [r7, #6]
 800aa08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2222      	movs	r2, #34	@ 0x22
 800aa18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d02d      	beq.n	800aa82 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa2c:	4a40      	ldr	r2, [pc, #256]	@ (800ab30 <UART_Start_Receive_DMA+0x140>)
 800aa2e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa36:	4a3f      	ldr	r2, [pc, #252]	@ (800ab34 <UART_Start_Receive_DMA+0x144>)
 800aa38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa40:	4a3d      	ldr	r2, [pc, #244]	@ (800ab38 <UART_Start_Receive_DMA+0x148>)
 800aa42:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	3324      	adds	r3, #36	@ 0x24
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa60:	461a      	mov	r2, r3
 800aa62:	88fb      	ldrh	r3, [r7, #6]
 800aa64:	f7f7 fe38 	bl	80026d8 <HAL_DMA_Start_IT>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d009      	beq.n	800aa82 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2210      	movs	r2, #16
 800aa72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2220      	movs	r2, #32
 800aa7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e051      	b.n	800ab26 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d018      	beq.n	800aabc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa92:	e853 3f00 	ldrex	r3, [r3]
 800aa96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa9e:	657b      	str	r3, [r7, #84]	@ 0x54
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aaa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aaaa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aaae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aab0:	e841 2300 	strex	r3, r2, [r1]
 800aab4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800aab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1e6      	bne.n	800aa8a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	3308      	adds	r3, #8
 800aac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac6:	e853 3f00 	ldrex	r3, [r3]
 800aaca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aace:	f043 0301 	orr.w	r3, r3, #1
 800aad2:	653b      	str	r3, [r7, #80]	@ 0x50
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3308      	adds	r3, #8
 800aada:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aadc:	637a      	str	r2, [r7, #52]	@ 0x34
 800aade:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aae2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aae4:	e841 2300 	strex	r3, r2, [r1]
 800aae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800aaea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1e5      	bne.n	800aabc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	3308      	adds	r3, #8
 800aaf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	e853 3f00 	ldrex	r3, [r3]
 800aafe:	613b      	str	r3, [r7, #16]
   return(result);
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	3308      	adds	r3, #8
 800ab0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ab10:	623a      	str	r2, [r7, #32]
 800ab12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab14:	69f9      	ldr	r1, [r7, #28]
 800ab16:	6a3a      	ldr	r2, [r7, #32]
 800ab18:	e841 2300 	strex	r3, r2, [r1]
 800ab1c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1e5      	bne.n	800aaf0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3758      	adds	r7, #88	@ 0x58
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	0800ac8d 	.word	0x0800ac8d
 800ab34:	0800adb5 	.word	0x0800adb5
 800ab38:	0800adf3 	.word	0x0800adf3

0800ab3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b08f      	sub	sp, #60	@ 0x3c
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4a:	6a3b      	ldr	r3, [r7, #32]
 800ab4c:	e853 3f00 	ldrex	r3, [r3]
 800ab50:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ab58:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab64:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab6a:	e841 2300 	strex	r3, r2, [r1]
 800ab6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1e6      	bne.n	800ab44 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	3308      	adds	r3, #8
 800ab7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	e853 3f00 	ldrex	r3, [r3]
 800ab84:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ab8c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	3308      	adds	r3, #8
 800ab94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab96:	61ba      	str	r2, [r7, #24]
 800ab98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9a:	6979      	ldr	r1, [r7, #20]
 800ab9c:	69ba      	ldr	r2, [r7, #24]
 800ab9e:	e841 2300 	strex	r3, r2, [r1]
 800aba2:	613b      	str	r3, [r7, #16]
   return(result);
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1e5      	bne.n	800ab76 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2220      	movs	r2, #32
 800abae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800abb2:	bf00      	nop
 800abb4:	373c      	adds	r7, #60	@ 0x3c
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
	...

0800abc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b095      	sub	sp, #84	@ 0x54
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abd0:	e853 3f00 	ldrex	r3, [r3]
 800abd4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800abd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800abdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	461a      	mov	r2, r3
 800abe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abe6:	643b      	str	r3, [r7, #64]	@ 0x40
 800abe8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800abec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abee:	e841 2300 	strex	r3, r2, [r1]
 800abf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1e6      	bne.n	800abc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	3308      	adds	r3, #8
 800ac00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac02:	6a3b      	ldr	r3, [r7, #32]
 800ac04:	e853 3f00 	ldrex	r3, [r3]
 800ac08:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac0a:	69fa      	ldr	r2, [r7, #28]
 800ac0c:	4b1e      	ldr	r3, [pc, #120]	@ (800ac88 <UART_EndRxTransfer+0xc8>)
 800ac0e:	4013      	ands	r3, r2
 800ac10:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	3308      	adds	r3, #8
 800ac18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac22:	e841 2300 	strex	r3, r2, [r1]
 800ac26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1e5      	bne.n	800abfa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d118      	bne.n	800ac68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	e853 3f00 	ldrex	r3, [r3]
 800ac42:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	f023 0310 	bic.w	r3, r3, #16
 800ac4a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	461a      	mov	r2, r3
 800ac52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac54:	61bb      	str	r3, [r7, #24]
 800ac56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac58:	6979      	ldr	r1, [r7, #20]
 800ac5a:	69ba      	ldr	r2, [r7, #24]
 800ac5c:	e841 2300 	strex	r3, r2, [r1]
 800ac60:	613b      	str	r3, [r7, #16]
   return(result);
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d1e6      	bne.n	800ac36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2220      	movs	r2, #32
 800ac6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ac7c:	bf00      	nop
 800ac7e:	3754      	adds	r7, #84	@ 0x54
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	effffffe 	.word	0xeffffffe

0800ac8c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b09c      	sub	sp, #112	@ 0x70
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac98:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	69db      	ldr	r3, [r3, #28]
 800ac9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aca2:	d071      	beq.n	800ad88 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800aca4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aca6:	2200      	movs	r2, #0
 800aca8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acb4:	e853 3f00 	ldrex	r3, [r3]
 800acb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800acba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800acc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	461a      	mov	r2, r3
 800acc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800acca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800accc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800acd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800acd2:	e841 2300 	strex	r3, r2, [r1]
 800acd6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800acd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d1e6      	bne.n	800acac <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3308      	adds	r3, #8
 800ace4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace8:	e853 3f00 	ldrex	r3, [r3]
 800acec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800acee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acf0:	f023 0301 	bic.w	r3, r3, #1
 800acf4:	667b      	str	r3, [r7, #100]	@ 0x64
 800acf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	3308      	adds	r3, #8
 800acfc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800acfe:	647a      	str	r2, [r7, #68]	@ 0x44
 800ad00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad06:	e841 2300 	strex	r3, r2, [r1]
 800ad0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1e5      	bne.n	800acde <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	3308      	adds	r3, #8
 800ad18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1c:	e853 3f00 	ldrex	r3, [r3]
 800ad20:	623b      	str	r3, [r7, #32]
   return(result);
 800ad22:	6a3b      	ldr	r3, [r7, #32]
 800ad24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad28:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	3308      	adds	r3, #8
 800ad30:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ad32:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad3a:	e841 2300 	strex	r3, r2, [r1]
 800ad3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1e5      	bne.n	800ad12 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad48:	2220      	movs	r2, #32
 800ad4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d118      	bne.n	800ad88 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	e853 3f00 	ldrex	r3, [r3]
 800ad62:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f023 0310 	bic.w	r3, r3, #16
 800ad6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	461a      	mov	r2, r3
 800ad72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad74:	61fb      	str	r3, [r7, #28]
 800ad76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad78:	69b9      	ldr	r1, [r7, #24]
 800ad7a:	69fa      	ldr	r2, [r7, #28]
 800ad7c:	e841 2300 	strex	r3, r2, [r1]
 800ad80:	617b      	str	r3, [r7, #20]
   return(result);
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d1e6      	bne.n	800ad56 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d107      	bne.n	800ada6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ada0:	f7f5 ffec 	bl	8000d7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ada4:	e002      	b.n	800adac <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800ada6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ada8:	f7fe fdde 	bl	8009968 <HAL_UART_RxCpltCallback>
}
 800adac:	bf00      	nop
 800adae:	3770      	adds	r7, #112	@ 0x70
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adc0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2201      	movs	r2, #1
 800adc6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d109      	bne.n	800ade4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800add6:	085b      	lsrs	r3, r3, #1
 800add8:	b29b      	uxth	r3, r3
 800adda:	4619      	mov	r1, r3
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f7f5 ffcd 	bl	8000d7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ade2:	e002      	b.n	800adea <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f7fe fdc9 	bl	800997c <HAL_UART_RxHalfCpltCallback>
}
 800adea:	bf00      	nop
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b086      	sub	sp, #24
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adfe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae06:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae0e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae1a:	2b80      	cmp	r3, #128	@ 0x80
 800ae1c:	d109      	bne.n	800ae32 <UART_DMAError+0x40>
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	2b21      	cmp	r3, #33	@ 0x21
 800ae22:	d106      	bne.n	800ae32 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	2200      	movs	r2, #0
 800ae28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ae2c:	6978      	ldr	r0, [r7, #20]
 800ae2e:	f7ff fe85 	bl	800ab3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae3c:	2b40      	cmp	r3, #64	@ 0x40
 800ae3e:	d109      	bne.n	800ae54 <UART_DMAError+0x62>
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2b22      	cmp	r3, #34	@ 0x22
 800ae44:	d106      	bne.n	800ae54 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ae4e:	6978      	ldr	r0, [r7, #20]
 800ae50:	f7ff feb6 	bl	800abc0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae5a:	f043 0210 	orr.w	r2, r3, #16
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae64:	6978      	ldr	r0, [r7, #20]
 800ae66:	f7fe fd93 	bl	8009990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae6a:	bf00      	nop
 800ae6c:	3718      	adds	r7, #24
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b084      	sub	sp, #16
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f7fe fd81 	bl	8009990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae8e:	bf00      	nop
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b088      	sub	sp, #32
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	e853 3f00 	ldrex	r3, [r3]
 800aeaa:	60bb      	str	r3, [r7, #8]
   return(result);
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aeb2:	61fb      	str	r3, [r7, #28]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	461a      	mov	r2, r3
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	61bb      	str	r3, [r7, #24]
 800aebe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec0:	6979      	ldr	r1, [r7, #20]
 800aec2:	69ba      	ldr	r2, [r7, #24]
 800aec4:	e841 2300 	strex	r3, r2, [r1]
 800aec8:	613b      	str	r3, [r7, #16]
   return(result);
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1e6      	bne.n	800ae9e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2220      	movs	r2, #32
 800aed4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f7fe fd38 	bl	8009954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aee4:	bf00      	nop
 800aee6:	3720      	adds	r7, #32
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aef4:	bf00      	nop
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af36:	2b01      	cmp	r3, #1
 800af38:	d101      	bne.n	800af3e <HAL_UARTEx_DisableFifoMode+0x16>
 800af3a:	2302      	movs	r3, #2
 800af3c:	e027      	b.n	800af8e <HAL_UARTEx_DisableFifoMode+0x66>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2201      	movs	r2, #1
 800af42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2224      	movs	r2, #36	@ 0x24
 800af4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f022 0201 	bic.w	r2, r2, #1
 800af64:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800af6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2220      	movs	r2, #32
 800af80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3714      	adds	r7, #20
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr

0800af9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b084      	sub	sp, #16
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
 800afa2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d101      	bne.n	800afb2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800afae:	2302      	movs	r3, #2
 800afb0:	e02d      	b.n	800b00e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2201      	movs	r2, #1
 800afb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2224      	movs	r2, #36	@ 0x24
 800afbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f022 0201 	bic.w	r2, r2, #1
 800afd8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	683a      	ldr	r2, [r7, #0]
 800afea:	430a      	orrs	r2, r1
 800afec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f8a4 	bl	800b13c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2220      	movs	r2, #32
 800b000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b084      	sub	sp, #16
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
 800b01e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b026:	2b01      	cmp	r3, #1
 800b028:	d101      	bne.n	800b02e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b02a:	2302      	movs	r3, #2
 800b02c:	e02d      	b.n	800b08a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2201      	movs	r2, #1
 800b032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2224      	movs	r2, #36	@ 0x24
 800b03a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f022 0201 	bic.w	r2, r2, #1
 800b054:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	683a      	ldr	r2, [r7, #0]
 800b066:	430a      	orrs	r2, r1
 800b068:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f866 	bl	800b13c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2220      	movs	r2, #32
 800b07c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b08c      	sub	sp, #48	@ 0x30
 800b096:	af00      	add	r7, sp, #0
 800b098:	60f8      	str	r0, [r7, #12]
 800b09a:	60b9      	str	r1, [r7, #8]
 800b09c:	4613      	mov	r3, r2
 800b09e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0a6:	2b20      	cmp	r3, #32
 800b0a8:	d142      	bne.n	800b130 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d002      	beq.n	800b0b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b0b0:	88fb      	ldrh	r3, [r7, #6]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e03b      	b.n	800b132 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2201      	movs	r2, #1
 800b0be:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b0c6:	88fb      	ldrh	r3, [r7, #6]
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	68b9      	ldr	r1, [r7, #8]
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	f7ff fc8f 	bl	800a9f0 <UART_Start_Receive_DMA>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b0d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d124      	bne.n	800b12a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d11d      	bne.n	800b124 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2210      	movs	r2, #16
 800b0ee:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	e853 3f00 	ldrex	r3, [r3]
 800b0fc:	617b      	str	r3, [r7, #20]
   return(result);
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	f043 0310 	orr.w	r3, r3, #16
 800b104:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	461a      	mov	r2, r3
 800b10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b10e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b110:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b112:	6a39      	ldr	r1, [r7, #32]
 800b114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b116:	e841 2300 	strex	r3, r2, [r1]
 800b11a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1e6      	bne.n	800b0f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b122:	e002      	b.n	800b12a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b124:	2301      	movs	r3, #1
 800b126:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b12a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b12e:	e000      	b.n	800b132 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b130:	2302      	movs	r3, #2
  }
}
 800b132:	4618      	mov	r0, r3
 800b134:	3730      	adds	r7, #48	@ 0x30
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
	...

0800b13c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d108      	bne.n	800b15e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b15c:	e031      	b.n	800b1c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b15e:	2310      	movs	r3, #16
 800b160:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b162:	2310      	movs	r3, #16
 800b164:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	0e5b      	lsrs	r3, r3, #25
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	f003 0307 	and.w	r3, r3, #7
 800b174:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	0f5b      	lsrs	r3, r3, #29
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	f003 0307 	and.w	r3, r3, #7
 800b184:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b186:	7bbb      	ldrb	r3, [r7, #14]
 800b188:	7b3a      	ldrb	r2, [r7, #12]
 800b18a:	4911      	ldr	r1, [pc, #68]	@ (800b1d0 <UARTEx_SetNbDataToProcess+0x94>)
 800b18c:	5c8a      	ldrb	r2, [r1, r2]
 800b18e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b192:	7b3a      	ldrb	r2, [r7, #12]
 800b194:	490f      	ldr	r1, [pc, #60]	@ (800b1d4 <UARTEx_SetNbDataToProcess+0x98>)
 800b196:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b198:	fb93 f3f2 	sdiv	r3, r3, r2
 800b19c:	b29a      	uxth	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
 800b1a6:	7b7a      	ldrb	r2, [r7, #13]
 800b1a8:	4909      	ldr	r1, [pc, #36]	@ (800b1d0 <UARTEx_SetNbDataToProcess+0x94>)
 800b1aa:	5c8a      	ldrb	r2, [r1, r2]
 800b1ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b1b0:	7b7a      	ldrb	r2, [r7, #13]
 800b1b2:	4908      	ldr	r1, [pc, #32]	@ (800b1d4 <UARTEx_SetNbDataToProcess+0x98>)
 800b1b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1ba:	b29a      	uxth	r2, r3
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b1c2:	bf00      	nop
 800b1c4:	3714      	adds	r7, #20
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	0800da00 	.word	0x0800da00
 800b1d4:	0800da08 	.word	0x0800da08

0800b1d8 <__cvt>:
 800b1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1da:	ed2d 8b02 	vpush	{d8}
 800b1de:	eeb0 8b40 	vmov.f64	d8, d0
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	4617      	mov	r7, r2
 800b1e6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b1e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b1ea:	ee18 2a90 	vmov	r2, s17
 800b1ee:	f025 0520 	bic.w	r5, r5, #32
 800b1f2:	2a00      	cmp	r2, #0
 800b1f4:	bfb6      	itet	lt
 800b1f6:	222d      	movlt	r2, #45	@ 0x2d
 800b1f8:	2200      	movge	r2, #0
 800b1fa:	eeb1 8b40 	vneglt.f64	d8, d0
 800b1fe:	2d46      	cmp	r5, #70	@ 0x46
 800b200:	460c      	mov	r4, r1
 800b202:	701a      	strb	r2, [r3, #0]
 800b204:	d004      	beq.n	800b210 <__cvt+0x38>
 800b206:	2d45      	cmp	r5, #69	@ 0x45
 800b208:	d100      	bne.n	800b20c <__cvt+0x34>
 800b20a:	3401      	adds	r4, #1
 800b20c:	2102      	movs	r1, #2
 800b20e:	e000      	b.n	800b212 <__cvt+0x3a>
 800b210:	2103      	movs	r1, #3
 800b212:	ab03      	add	r3, sp, #12
 800b214:	9301      	str	r3, [sp, #4]
 800b216:	ab02      	add	r3, sp, #8
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	4622      	mov	r2, r4
 800b21c:	4633      	mov	r3, r6
 800b21e:	eeb0 0b48 	vmov.f64	d0, d8
 800b222:	f000 fe2d 	bl	800be80 <_dtoa_r>
 800b226:	2d47      	cmp	r5, #71	@ 0x47
 800b228:	d114      	bne.n	800b254 <__cvt+0x7c>
 800b22a:	07fb      	lsls	r3, r7, #31
 800b22c:	d50a      	bpl.n	800b244 <__cvt+0x6c>
 800b22e:	1902      	adds	r2, r0, r4
 800b230:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b238:	bf08      	it	eq
 800b23a:	9203      	streq	r2, [sp, #12]
 800b23c:	2130      	movs	r1, #48	@ 0x30
 800b23e:	9b03      	ldr	r3, [sp, #12]
 800b240:	4293      	cmp	r3, r2
 800b242:	d319      	bcc.n	800b278 <__cvt+0xa0>
 800b244:	9b03      	ldr	r3, [sp, #12]
 800b246:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b248:	1a1b      	subs	r3, r3, r0
 800b24a:	6013      	str	r3, [r2, #0]
 800b24c:	b005      	add	sp, #20
 800b24e:	ecbd 8b02 	vpop	{d8}
 800b252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b254:	2d46      	cmp	r5, #70	@ 0x46
 800b256:	eb00 0204 	add.w	r2, r0, r4
 800b25a:	d1e9      	bne.n	800b230 <__cvt+0x58>
 800b25c:	7803      	ldrb	r3, [r0, #0]
 800b25e:	2b30      	cmp	r3, #48	@ 0x30
 800b260:	d107      	bne.n	800b272 <__cvt+0x9a>
 800b262:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b26a:	bf1c      	itt	ne
 800b26c:	f1c4 0401 	rsbne	r4, r4, #1
 800b270:	6034      	strne	r4, [r6, #0]
 800b272:	6833      	ldr	r3, [r6, #0]
 800b274:	441a      	add	r2, r3
 800b276:	e7db      	b.n	800b230 <__cvt+0x58>
 800b278:	1c5c      	adds	r4, r3, #1
 800b27a:	9403      	str	r4, [sp, #12]
 800b27c:	7019      	strb	r1, [r3, #0]
 800b27e:	e7de      	b.n	800b23e <__cvt+0x66>

0800b280 <__exponent>:
 800b280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b282:	2900      	cmp	r1, #0
 800b284:	bfba      	itte	lt
 800b286:	4249      	neglt	r1, r1
 800b288:	232d      	movlt	r3, #45	@ 0x2d
 800b28a:	232b      	movge	r3, #43	@ 0x2b
 800b28c:	2909      	cmp	r1, #9
 800b28e:	7002      	strb	r2, [r0, #0]
 800b290:	7043      	strb	r3, [r0, #1]
 800b292:	dd29      	ble.n	800b2e8 <__exponent+0x68>
 800b294:	f10d 0307 	add.w	r3, sp, #7
 800b298:	461d      	mov	r5, r3
 800b29a:	270a      	movs	r7, #10
 800b29c:	461a      	mov	r2, r3
 800b29e:	fbb1 f6f7 	udiv	r6, r1, r7
 800b2a2:	fb07 1416 	mls	r4, r7, r6, r1
 800b2a6:	3430      	adds	r4, #48	@ 0x30
 800b2a8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b2ac:	460c      	mov	r4, r1
 800b2ae:	2c63      	cmp	r4, #99	@ 0x63
 800b2b0:	f103 33ff 	add.w	r3, r3, #4294967295
 800b2b4:	4631      	mov	r1, r6
 800b2b6:	dcf1      	bgt.n	800b29c <__exponent+0x1c>
 800b2b8:	3130      	adds	r1, #48	@ 0x30
 800b2ba:	1e94      	subs	r4, r2, #2
 800b2bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b2c0:	1c41      	adds	r1, r0, #1
 800b2c2:	4623      	mov	r3, r4
 800b2c4:	42ab      	cmp	r3, r5
 800b2c6:	d30a      	bcc.n	800b2de <__exponent+0x5e>
 800b2c8:	f10d 0309 	add.w	r3, sp, #9
 800b2cc:	1a9b      	subs	r3, r3, r2
 800b2ce:	42ac      	cmp	r4, r5
 800b2d0:	bf88      	it	hi
 800b2d2:	2300      	movhi	r3, #0
 800b2d4:	3302      	adds	r3, #2
 800b2d6:	4403      	add	r3, r0
 800b2d8:	1a18      	subs	r0, r3, r0
 800b2da:	b003      	add	sp, #12
 800b2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2de:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b2e2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b2e6:	e7ed      	b.n	800b2c4 <__exponent+0x44>
 800b2e8:	2330      	movs	r3, #48	@ 0x30
 800b2ea:	3130      	adds	r1, #48	@ 0x30
 800b2ec:	7083      	strb	r3, [r0, #2]
 800b2ee:	70c1      	strb	r1, [r0, #3]
 800b2f0:	1d03      	adds	r3, r0, #4
 800b2f2:	e7f1      	b.n	800b2d8 <__exponent+0x58>
 800b2f4:	0000      	movs	r0, r0
	...

0800b2f8 <_printf_float>:
 800b2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fc:	b08d      	sub	sp, #52	@ 0x34
 800b2fe:	460c      	mov	r4, r1
 800b300:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b304:	4616      	mov	r6, r2
 800b306:	461f      	mov	r7, r3
 800b308:	4605      	mov	r5, r0
 800b30a:	f000 fca9 	bl	800bc60 <_localeconv_r>
 800b30e:	f8d0 b000 	ldr.w	fp, [r0]
 800b312:	4658      	mov	r0, fp
 800b314:	f7f5 f83c 	bl	8000390 <strlen>
 800b318:	2300      	movs	r3, #0
 800b31a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b31c:	f8d8 3000 	ldr.w	r3, [r8]
 800b320:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b324:	6822      	ldr	r2, [r4, #0]
 800b326:	9005      	str	r0, [sp, #20]
 800b328:	3307      	adds	r3, #7
 800b32a:	f023 0307 	bic.w	r3, r3, #7
 800b32e:	f103 0108 	add.w	r1, r3, #8
 800b332:	f8c8 1000 	str.w	r1, [r8]
 800b336:	ed93 0b00 	vldr	d0, [r3]
 800b33a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800b598 <_printf_float+0x2a0>
 800b33e:	eeb0 7bc0 	vabs.f64	d7, d0
 800b342:	eeb4 7b46 	vcmp.f64	d7, d6
 800b346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b34a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800b34e:	dd24      	ble.n	800b39a <_printf_float+0xa2>
 800b350:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b358:	d502      	bpl.n	800b360 <_printf_float+0x68>
 800b35a:	232d      	movs	r3, #45	@ 0x2d
 800b35c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b360:	498f      	ldr	r1, [pc, #572]	@ (800b5a0 <_printf_float+0x2a8>)
 800b362:	4b90      	ldr	r3, [pc, #576]	@ (800b5a4 <_printf_float+0x2ac>)
 800b364:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800b368:	bf8c      	ite	hi
 800b36a:	4688      	movhi	r8, r1
 800b36c:	4698      	movls	r8, r3
 800b36e:	f022 0204 	bic.w	r2, r2, #4
 800b372:	2303      	movs	r3, #3
 800b374:	6123      	str	r3, [r4, #16]
 800b376:	6022      	str	r2, [r4, #0]
 800b378:	f04f 0a00 	mov.w	sl, #0
 800b37c:	9700      	str	r7, [sp, #0]
 800b37e:	4633      	mov	r3, r6
 800b380:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b382:	4621      	mov	r1, r4
 800b384:	4628      	mov	r0, r5
 800b386:	f000 f9d1 	bl	800b72c <_printf_common>
 800b38a:	3001      	adds	r0, #1
 800b38c:	f040 8089 	bne.w	800b4a2 <_printf_float+0x1aa>
 800b390:	f04f 30ff 	mov.w	r0, #4294967295
 800b394:	b00d      	add	sp, #52	@ 0x34
 800b396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b39a:	eeb4 0b40 	vcmp.f64	d0, d0
 800b39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3a2:	d709      	bvc.n	800b3b8 <_printf_float+0xc0>
 800b3a4:	ee10 3a90 	vmov	r3, s1
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	bfbc      	itt	lt
 800b3ac:	232d      	movlt	r3, #45	@ 0x2d
 800b3ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b3b2:	497d      	ldr	r1, [pc, #500]	@ (800b5a8 <_printf_float+0x2b0>)
 800b3b4:	4b7d      	ldr	r3, [pc, #500]	@ (800b5ac <_printf_float+0x2b4>)
 800b3b6:	e7d5      	b.n	800b364 <_printf_float+0x6c>
 800b3b8:	6863      	ldr	r3, [r4, #4]
 800b3ba:	1c59      	adds	r1, r3, #1
 800b3bc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800b3c0:	d139      	bne.n	800b436 <_printf_float+0x13e>
 800b3c2:	2306      	movs	r3, #6
 800b3c4:	6063      	str	r3, [r4, #4]
 800b3c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	6022      	str	r2, [r4, #0]
 800b3ce:	9303      	str	r3, [sp, #12]
 800b3d0:	ab0a      	add	r3, sp, #40	@ 0x28
 800b3d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b3d6:	ab09      	add	r3, sp, #36	@ 0x24
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	6861      	ldr	r1, [r4, #4]
 800b3dc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	f7ff fef9 	bl	800b1d8 <__cvt>
 800b3e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b3ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b3ec:	4680      	mov	r8, r0
 800b3ee:	d129      	bne.n	800b444 <_printf_float+0x14c>
 800b3f0:	1cc8      	adds	r0, r1, #3
 800b3f2:	db02      	blt.n	800b3fa <_printf_float+0x102>
 800b3f4:	6863      	ldr	r3, [r4, #4]
 800b3f6:	4299      	cmp	r1, r3
 800b3f8:	dd41      	ble.n	800b47e <_printf_float+0x186>
 800b3fa:	f1a9 0902 	sub.w	r9, r9, #2
 800b3fe:	fa5f f989 	uxtb.w	r9, r9
 800b402:	3901      	subs	r1, #1
 800b404:	464a      	mov	r2, r9
 800b406:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b40a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b40c:	f7ff ff38 	bl	800b280 <__exponent>
 800b410:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b412:	1813      	adds	r3, r2, r0
 800b414:	2a01      	cmp	r2, #1
 800b416:	4682      	mov	sl, r0
 800b418:	6123      	str	r3, [r4, #16]
 800b41a:	dc02      	bgt.n	800b422 <_printf_float+0x12a>
 800b41c:	6822      	ldr	r2, [r4, #0]
 800b41e:	07d2      	lsls	r2, r2, #31
 800b420:	d501      	bpl.n	800b426 <_printf_float+0x12e>
 800b422:	3301      	adds	r3, #1
 800b424:	6123      	str	r3, [r4, #16]
 800b426:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d0a6      	beq.n	800b37c <_printf_float+0x84>
 800b42e:	232d      	movs	r3, #45	@ 0x2d
 800b430:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b434:	e7a2      	b.n	800b37c <_printf_float+0x84>
 800b436:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b43a:	d1c4      	bne.n	800b3c6 <_printf_float+0xce>
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1c2      	bne.n	800b3c6 <_printf_float+0xce>
 800b440:	2301      	movs	r3, #1
 800b442:	e7bf      	b.n	800b3c4 <_printf_float+0xcc>
 800b444:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b448:	d9db      	bls.n	800b402 <_printf_float+0x10a>
 800b44a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800b44e:	d118      	bne.n	800b482 <_printf_float+0x18a>
 800b450:	2900      	cmp	r1, #0
 800b452:	6863      	ldr	r3, [r4, #4]
 800b454:	dd0b      	ble.n	800b46e <_printf_float+0x176>
 800b456:	6121      	str	r1, [r4, #16]
 800b458:	b913      	cbnz	r3, 800b460 <_printf_float+0x168>
 800b45a:	6822      	ldr	r2, [r4, #0]
 800b45c:	07d0      	lsls	r0, r2, #31
 800b45e:	d502      	bpl.n	800b466 <_printf_float+0x16e>
 800b460:	3301      	adds	r3, #1
 800b462:	440b      	add	r3, r1
 800b464:	6123      	str	r3, [r4, #16]
 800b466:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b468:	f04f 0a00 	mov.w	sl, #0
 800b46c:	e7db      	b.n	800b426 <_printf_float+0x12e>
 800b46e:	b913      	cbnz	r3, 800b476 <_printf_float+0x17e>
 800b470:	6822      	ldr	r2, [r4, #0]
 800b472:	07d2      	lsls	r2, r2, #31
 800b474:	d501      	bpl.n	800b47a <_printf_float+0x182>
 800b476:	3302      	adds	r3, #2
 800b478:	e7f4      	b.n	800b464 <_printf_float+0x16c>
 800b47a:	2301      	movs	r3, #1
 800b47c:	e7f2      	b.n	800b464 <_printf_float+0x16c>
 800b47e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800b482:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b484:	4299      	cmp	r1, r3
 800b486:	db05      	blt.n	800b494 <_printf_float+0x19c>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	6121      	str	r1, [r4, #16]
 800b48c:	07d8      	lsls	r0, r3, #31
 800b48e:	d5ea      	bpl.n	800b466 <_printf_float+0x16e>
 800b490:	1c4b      	adds	r3, r1, #1
 800b492:	e7e7      	b.n	800b464 <_printf_float+0x16c>
 800b494:	2900      	cmp	r1, #0
 800b496:	bfd4      	ite	le
 800b498:	f1c1 0202 	rsble	r2, r1, #2
 800b49c:	2201      	movgt	r2, #1
 800b49e:	4413      	add	r3, r2
 800b4a0:	e7e0      	b.n	800b464 <_printf_float+0x16c>
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	055a      	lsls	r2, r3, #21
 800b4a6:	d407      	bmi.n	800b4b8 <_printf_float+0x1c0>
 800b4a8:	6923      	ldr	r3, [r4, #16]
 800b4aa:	4642      	mov	r2, r8
 800b4ac:	4631      	mov	r1, r6
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	47b8      	blx	r7
 800b4b2:	3001      	adds	r0, #1
 800b4b4:	d12a      	bne.n	800b50c <_printf_float+0x214>
 800b4b6:	e76b      	b.n	800b390 <_printf_float+0x98>
 800b4b8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b4bc:	f240 80e0 	bls.w	800b680 <_printf_float+0x388>
 800b4c0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b4c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4cc:	d133      	bne.n	800b536 <_printf_float+0x23e>
 800b4ce:	4a38      	ldr	r2, [pc, #224]	@ (800b5b0 <_printf_float+0x2b8>)
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	4631      	mov	r1, r6
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	47b8      	blx	r7
 800b4d8:	3001      	adds	r0, #1
 800b4da:	f43f af59 	beq.w	800b390 <_printf_float+0x98>
 800b4de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b4e2:	4543      	cmp	r3, r8
 800b4e4:	db02      	blt.n	800b4ec <_printf_float+0x1f4>
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	07d8      	lsls	r0, r3, #31
 800b4ea:	d50f      	bpl.n	800b50c <_printf_float+0x214>
 800b4ec:	9b05      	ldr	r3, [sp, #20]
 800b4ee:	465a      	mov	r2, fp
 800b4f0:	4631      	mov	r1, r6
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	47b8      	blx	r7
 800b4f6:	3001      	adds	r0, #1
 800b4f8:	f43f af4a 	beq.w	800b390 <_printf_float+0x98>
 800b4fc:	f04f 0900 	mov.w	r9, #0
 800b500:	f108 38ff 	add.w	r8, r8, #4294967295
 800b504:	f104 0a1a 	add.w	sl, r4, #26
 800b508:	45c8      	cmp	r8, r9
 800b50a:	dc09      	bgt.n	800b520 <_printf_float+0x228>
 800b50c:	6823      	ldr	r3, [r4, #0]
 800b50e:	079b      	lsls	r3, r3, #30
 800b510:	f100 8107 	bmi.w	800b722 <_printf_float+0x42a>
 800b514:	68e0      	ldr	r0, [r4, #12]
 800b516:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b518:	4298      	cmp	r0, r3
 800b51a:	bfb8      	it	lt
 800b51c:	4618      	movlt	r0, r3
 800b51e:	e739      	b.n	800b394 <_printf_float+0x9c>
 800b520:	2301      	movs	r3, #1
 800b522:	4652      	mov	r2, sl
 800b524:	4631      	mov	r1, r6
 800b526:	4628      	mov	r0, r5
 800b528:	47b8      	blx	r7
 800b52a:	3001      	adds	r0, #1
 800b52c:	f43f af30 	beq.w	800b390 <_printf_float+0x98>
 800b530:	f109 0901 	add.w	r9, r9, #1
 800b534:	e7e8      	b.n	800b508 <_printf_float+0x210>
 800b536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b538:	2b00      	cmp	r3, #0
 800b53a:	dc3b      	bgt.n	800b5b4 <_printf_float+0x2bc>
 800b53c:	4a1c      	ldr	r2, [pc, #112]	@ (800b5b0 <_printf_float+0x2b8>)
 800b53e:	2301      	movs	r3, #1
 800b540:	4631      	mov	r1, r6
 800b542:	4628      	mov	r0, r5
 800b544:	47b8      	blx	r7
 800b546:	3001      	adds	r0, #1
 800b548:	f43f af22 	beq.w	800b390 <_printf_float+0x98>
 800b54c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b550:	ea59 0303 	orrs.w	r3, r9, r3
 800b554:	d102      	bne.n	800b55c <_printf_float+0x264>
 800b556:	6823      	ldr	r3, [r4, #0]
 800b558:	07d9      	lsls	r1, r3, #31
 800b55a:	d5d7      	bpl.n	800b50c <_printf_float+0x214>
 800b55c:	9b05      	ldr	r3, [sp, #20]
 800b55e:	465a      	mov	r2, fp
 800b560:	4631      	mov	r1, r6
 800b562:	4628      	mov	r0, r5
 800b564:	47b8      	blx	r7
 800b566:	3001      	adds	r0, #1
 800b568:	f43f af12 	beq.w	800b390 <_printf_float+0x98>
 800b56c:	f04f 0a00 	mov.w	sl, #0
 800b570:	f104 0b1a 	add.w	fp, r4, #26
 800b574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b576:	425b      	negs	r3, r3
 800b578:	4553      	cmp	r3, sl
 800b57a:	dc01      	bgt.n	800b580 <_printf_float+0x288>
 800b57c:	464b      	mov	r3, r9
 800b57e:	e794      	b.n	800b4aa <_printf_float+0x1b2>
 800b580:	2301      	movs	r3, #1
 800b582:	465a      	mov	r2, fp
 800b584:	4631      	mov	r1, r6
 800b586:	4628      	mov	r0, r5
 800b588:	47b8      	blx	r7
 800b58a:	3001      	adds	r0, #1
 800b58c:	f43f af00 	beq.w	800b390 <_printf_float+0x98>
 800b590:	f10a 0a01 	add.w	sl, sl, #1
 800b594:	e7ee      	b.n	800b574 <_printf_float+0x27c>
 800b596:	bf00      	nop
 800b598:	ffffffff 	.word	0xffffffff
 800b59c:	7fefffff 	.word	0x7fefffff
 800b5a0:	0800da14 	.word	0x0800da14
 800b5a4:	0800da10 	.word	0x0800da10
 800b5a8:	0800da1c 	.word	0x0800da1c
 800b5ac:	0800da18 	.word	0x0800da18
 800b5b0:	0800da20 	.word	0x0800da20
 800b5b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b5b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b5ba:	4553      	cmp	r3, sl
 800b5bc:	bfa8      	it	ge
 800b5be:	4653      	movge	r3, sl
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	4699      	mov	r9, r3
 800b5c4:	dc37      	bgt.n	800b636 <_printf_float+0x33e>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	9307      	str	r3, [sp, #28]
 800b5ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5ce:	f104 021a 	add.w	r2, r4, #26
 800b5d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b5d4:	9907      	ldr	r1, [sp, #28]
 800b5d6:	9306      	str	r3, [sp, #24]
 800b5d8:	eba3 0309 	sub.w	r3, r3, r9
 800b5dc:	428b      	cmp	r3, r1
 800b5de:	dc31      	bgt.n	800b644 <_printf_float+0x34c>
 800b5e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5e2:	459a      	cmp	sl, r3
 800b5e4:	dc3b      	bgt.n	800b65e <_printf_float+0x366>
 800b5e6:	6823      	ldr	r3, [r4, #0]
 800b5e8:	07da      	lsls	r2, r3, #31
 800b5ea:	d438      	bmi.n	800b65e <_printf_float+0x366>
 800b5ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ee:	ebaa 0903 	sub.w	r9, sl, r3
 800b5f2:	9b06      	ldr	r3, [sp, #24]
 800b5f4:	ebaa 0303 	sub.w	r3, sl, r3
 800b5f8:	4599      	cmp	r9, r3
 800b5fa:	bfa8      	it	ge
 800b5fc:	4699      	movge	r9, r3
 800b5fe:	f1b9 0f00 	cmp.w	r9, #0
 800b602:	dc34      	bgt.n	800b66e <_printf_float+0x376>
 800b604:	f04f 0800 	mov.w	r8, #0
 800b608:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b60c:	f104 0b1a 	add.w	fp, r4, #26
 800b610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b612:	ebaa 0303 	sub.w	r3, sl, r3
 800b616:	eba3 0309 	sub.w	r3, r3, r9
 800b61a:	4543      	cmp	r3, r8
 800b61c:	f77f af76 	ble.w	800b50c <_printf_float+0x214>
 800b620:	2301      	movs	r3, #1
 800b622:	465a      	mov	r2, fp
 800b624:	4631      	mov	r1, r6
 800b626:	4628      	mov	r0, r5
 800b628:	47b8      	blx	r7
 800b62a:	3001      	adds	r0, #1
 800b62c:	f43f aeb0 	beq.w	800b390 <_printf_float+0x98>
 800b630:	f108 0801 	add.w	r8, r8, #1
 800b634:	e7ec      	b.n	800b610 <_printf_float+0x318>
 800b636:	4642      	mov	r2, r8
 800b638:	4631      	mov	r1, r6
 800b63a:	4628      	mov	r0, r5
 800b63c:	47b8      	blx	r7
 800b63e:	3001      	adds	r0, #1
 800b640:	d1c1      	bne.n	800b5c6 <_printf_float+0x2ce>
 800b642:	e6a5      	b.n	800b390 <_printf_float+0x98>
 800b644:	2301      	movs	r3, #1
 800b646:	4631      	mov	r1, r6
 800b648:	4628      	mov	r0, r5
 800b64a:	9206      	str	r2, [sp, #24]
 800b64c:	47b8      	blx	r7
 800b64e:	3001      	adds	r0, #1
 800b650:	f43f ae9e 	beq.w	800b390 <_printf_float+0x98>
 800b654:	9b07      	ldr	r3, [sp, #28]
 800b656:	9a06      	ldr	r2, [sp, #24]
 800b658:	3301      	adds	r3, #1
 800b65a:	9307      	str	r3, [sp, #28]
 800b65c:	e7b9      	b.n	800b5d2 <_printf_float+0x2da>
 800b65e:	9b05      	ldr	r3, [sp, #20]
 800b660:	465a      	mov	r2, fp
 800b662:	4631      	mov	r1, r6
 800b664:	4628      	mov	r0, r5
 800b666:	47b8      	blx	r7
 800b668:	3001      	adds	r0, #1
 800b66a:	d1bf      	bne.n	800b5ec <_printf_float+0x2f4>
 800b66c:	e690      	b.n	800b390 <_printf_float+0x98>
 800b66e:	9a06      	ldr	r2, [sp, #24]
 800b670:	464b      	mov	r3, r9
 800b672:	4442      	add	r2, r8
 800b674:	4631      	mov	r1, r6
 800b676:	4628      	mov	r0, r5
 800b678:	47b8      	blx	r7
 800b67a:	3001      	adds	r0, #1
 800b67c:	d1c2      	bne.n	800b604 <_printf_float+0x30c>
 800b67e:	e687      	b.n	800b390 <_printf_float+0x98>
 800b680:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b684:	f1b9 0f01 	cmp.w	r9, #1
 800b688:	dc01      	bgt.n	800b68e <_printf_float+0x396>
 800b68a:	07db      	lsls	r3, r3, #31
 800b68c:	d536      	bpl.n	800b6fc <_printf_float+0x404>
 800b68e:	2301      	movs	r3, #1
 800b690:	4642      	mov	r2, r8
 800b692:	4631      	mov	r1, r6
 800b694:	4628      	mov	r0, r5
 800b696:	47b8      	blx	r7
 800b698:	3001      	adds	r0, #1
 800b69a:	f43f ae79 	beq.w	800b390 <_printf_float+0x98>
 800b69e:	9b05      	ldr	r3, [sp, #20]
 800b6a0:	465a      	mov	r2, fp
 800b6a2:	4631      	mov	r1, r6
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	47b8      	blx	r7
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	f43f ae71 	beq.w	800b390 <_printf_float+0x98>
 800b6ae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b6b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ba:	f109 39ff 	add.w	r9, r9, #4294967295
 800b6be:	d018      	beq.n	800b6f2 <_printf_float+0x3fa>
 800b6c0:	464b      	mov	r3, r9
 800b6c2:	f108 0201 	add.w	r2, r8, #1
 800b6c6:	4631      	mov	r1, r6
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	47b8      	blx	r7
 800b6cc:	3001      	adds	r0, #1
 800b6ce:	d10c      	bne.n	800b6ea <_printf_float+0x3f2>
 800b6d0:	e65e      	b.n	800b390 <_printf_float+0x98>
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	465a      	mov	r2, fp
 800b6d6:	4631      	mov	r1, r6
 800b6d8:	4628      	mov	r0, r5
 800b6da:	47b8      	blx	r7
 800b6dc:	3001      	adds	r0, #1
 800b6de:	f43f ae57 	beq.w	800b390 <_printf_float+0x98>
 800b6e2:	f108 0801 	add.w	r8, r8, #1
 800b6e6:	45c8      	cmp	r8, r9
 800b6e8:	dbf3      	blt.n	800b6d2 <_printf_float+0x3da>
 800b6ea:	4653      	mov	r3, sl
 800b6ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b6f0:	e6dc      	b.n	800b4ac <_printf_float+0x1b4>
 800b6f2:	f04f 0800 	mov.w	r8, #0
 800b6f6:	f104 0b1a 	add.w	fp, r4, #26
 800b6fa:	e7f4      	b.n	800b6e6 <_printf_float+0x3ee>
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	4642      	mov	r2, r8
 800b700:	e7e1      	b.n	800b6c6 <_printf_float+0x3ce>
 800b702:	2301      	movs	r3, #1
 800b704:	464a      	mov	r2, r9
 800b706:	4631      	mov	r1, r6
 800b708:	4628      	mov	r0, r5
 800b70a:	47b8      	blx	r7
 800b70c:	3001      	adds	r0, #1
 800b70e:	f43f ae3f 	beq.w	800b390 <_printf_float+0x98>
 800b712:	f108 0801 	add.w	r8, r8, #1
 800b716:	68e3      	ldr	r3, [r4, #12]
 800b718:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b71a:	1a5b      	subs	r3, r3, r1
 800b71c:	4543      	cmp	r3, r8
 800b71e:	dcf0      	bgt.n	800b702 <_printf_float+0x40a>
 800b720:	e6f8      	b.n	800b514 <_printf_float+0x21c>
 800b722:	f04f 0800 	mov.w	r8, #0
 800b726:	f104 0919 	add.w	r9, r4, #25
 800b72a:	e7f4      	b.n	800b716 <_printf_float+0x41e>

0800b72c <_printf_common>:
 800b72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b730:	4616      	mov	r6, r2
 800b732:	4698      	mov	r8, r3
 800b734:	688a      	ldr	r2, [r1, #8]
 800b736:	690b      	ldr	r3, [r1, #16]
 800b738:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b73c:	4293      	cmp	r3, r2
 800b73e:	bfb8      	it	lt
 800b740:	4613      	movlt	r3, r2
 800b742:	6033      	str	r3, [r6, #0]
 800b744:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b748:	4607      	mov	r7, r0
 800b74a:	460c      	mov	r4, r1
 800b74c:	b10a      	cbz	r2, 800b752 <_printf_common+0x26>
 800b74e:	3301      	adds	r3, #1
 800b750:	6033      	str	r3, [r6, #0]
 800b752:	6823      	ldr	r3, [r4, #0]
 800b754:	0699      	lsls	r1, r3, #26
 800b756:	bf42      	ittt	mi
 800b758:	6833      	ldrmi	r3, [r6, #0]
 800b75a:	3302      	addmi	r3, #2
 800b75c:	6033      	strmi	r3, [r6, #0]
 800b75e:	6825      	ldr	r5, [r4, #0]
 800b760:	f015 0506 	ands.w	r5, r5, #6
 800b764:	d106      	bne.n	800b774 <_printf_common+0x48>
 800b766:	f104 0a19 	add.w	sl, r4, #25
 800b76a:	68e3      	ldr	r3, [r4, #12]
 800b76c:	6832      	ldr	r2, [r6, #0]
 800b76e:	1a9b      	subs	r3, r3, r2
 800b770:	42ab      	cmp	r3, r5
 800b772:	dc26      	bgt.n	800b7c2 <_printf_common+0x96>
 800b774:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b778:	6822      	ldr	r2, [r4, #0]
 800b77a:	3b00      	subs	r3, #0
 800b77c:	bf18      	it	ne
 800b77e:	2301      	movne	r3, #1
 800b780:	0692      	lsls	r2, r2, #26
 800b782:	d42b      	bmi.n	800b7dc <_printf_common+0xb0>
 800b784:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b788:	4641      	mov	r1, r8
 800b78a:	4638      	mov	r0, r7
 800b78c:	47c8      	blx	r9
 800b78e:	3001      	adds	r0, #1
 800b790:	d01e      	beq.n	800b7d0 <_printf_common+0xa4>
 800b792:	6823      	ldr	r3, [r4, #0]
 800b794:	6922      	ldr	r2, [r4, #16]
 800b796:	f003 0306 	and.w	r3, r3, #6
 800b79a:	2b04      	cmp	r3, #4
 800b79c:	bf02      	ittt	eq
 800b79e:	68e5      	ldreq	r5, [r4, #12]
 800b7a0:	6833      	ldreq	r3, [r6, #0]
 800b7a2:	1aed      	subeq	r5, r5, r3
 800b7a4:	68a3      	ldr	r3, [r4, #8]
 800b7a6:	bf0c      	ite	eq
 800b7a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7ac:	2500      	movne	r5, #0
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	bfc4      	itt	gt
 800b7b2:	1a9b      	subgt	r3, r3, r2
 800b7b4:	18ed      	addgt	r5, r5, r3
 800b7b6:	2600      	movs	r6, #0
 800b7b8:	341a      	adds	r4, #26
 800b7ba:	42b5      	cmp	r5, r6
 800b7bc:	d11a      	bne.n	800b7f4 <_printf_common+0xc8>
 800b7be:	2000      	movs	r0, #0
 800b7c0:	e008      	b.n	800b7d4 <_printf_common+0xa8>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	4652      	mov	r2, sl
 800b7c6:	4641      	mov	r1, r8
 800b7c8:	4638      	mov	r0, r7
 800b7ca:	47c8      	blx	r9
 800b7cc:	3001      	adds	r0, #1
 800b7ce:	d103      	bne.n	800b7d8 <_printf_common+0xac>
 800b7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7d8:	3501      	adds	r5, #1
 800b7da:	e7c6      	b.n	800b76a <_printf_common+0x3e>
 800b7dc:	18e1      	adds	r1, r4, r3
 800b7de:	1c5a      	adds	r2, r3, #1
 800b7e0:	2030      	movs	r0, #48	@ 0x30
 800b7e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b7e6:	4422      	add	r2, r4
 800b7e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b7ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b7f0:	3302      	adds	r3, #2
 800b7f2:	e7c7      	b.n	800b784 <_printf_common+0x58>
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	4622      	mov	r2, r4
 800b7f8:	4641      	mov	r1, r8
 800b7fa:	4638      	mov	r0, r7
 800b7fc:	47c8      	blx	r9
 800b7fe:	3001      	adds	r0, #1
 800b800:	d0e6      	beq.n	800b7d0 <_printf_common+0xa4>
 800b802:	3601      	adds	r6, #1
 800b804:	e7d9      	b.n	800b7ba <_printf_common+0x8e>
	...

0800b808 <_printf_i>:
 800b808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b80c:	7e0f      	ldrb	r7, [r1, #24]
 800b80e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b810:	2f78      	cmp	r7, #120	@ 0x78
 800b812:	4691      	mov	r9, r2
 800b814:	4680      	mov	r8, r0
 800b816:	460c      	mov	r4, r1
 800b818:	469a      	mov	sl, r3
 800b81a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b81e:	d807      	bhi.n	800b830 <_printf_i+0x28>
 800b820:	2f62      	cmp	r7, #98	@ 0x62
 800b822:	d80a      	bhi.n	800b83a <_printf_i+0x32>
 800b824:	2f00      	cmp	r7, #0
 800b826:	f000 80d1 	beq.w	800b9cc <_printf_i+0x1c4>
 800b82a:	2f58      	cmp	r7, #88	@ 0x58
 800b82c:	f000 80b8 	beq.w	800b9a0 <_printf_i+0x198>
 800b830:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b834:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b838:	e03a      	b.n	800b8b0 <_printf_i+0xa8>
 800b83a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b83e:	2b15      	cmp	r3, #21
 800b840:	d8f6      	bhi.n	800b830 <_printf_i+0x28>
 800b842:	a101      	add	r1, pc, #4	@ (adr r1, 800b848 <_printf_i+0x40>)
 800b844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b848:	0800b8a1 	.word	0x0800b8a1
 800b84c:	0800b8b5 	.word	0x0800b8b5
 800b850:	0800b831 	.word	0x0800b831
 800b854:	0800b831 	.word	0x0800b831
 800b858:	0800b831 	.word	0x0800b831
 800b85c:	0800b831 	.word	0x0800b831
 800b860:	0800b8b5 	.word	0x0800b8b5
 800b864:	0800b831 	.word	0x0800b831
 800b868:	0800b831 	.word	0x0800b831
 800b86c:	0800b831 	.word	0x0800b831
 800b870:	0800b831 	.word	0x0800b831
 800b874:	0800b9b3 	.word	0x0800b9b3
 800b878:	0800b8df 	.word	0x0800b8df
 800b87c:	0800b96d 	.word	0x0800b96d
 800b880:	0800b831 	.word	0x0800b831
 800b884:	0800b831 	.word	0x0800b831
 800b888:	0800b9d5 	.word	0x0800b9d5
 800b88c:	0800b831 	.word	0x0800b831
 800b890:	0800b8df 	.word	0x0800b8df
 800b894:	0800b831 	.word	0x0800b831
 800b898:	0800b831 	.word	0x0800b831
 800b89c:	0800b975 	.word	0x0800b975
 800b8a0:	6833      	ldr	r3, [r6, #0]
 800b8a2:	1d1a      	adds	r2, r3, #4
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	6032      	str	r2, [r6, #0]
 800b8a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e09c      	b.n	800b9ee <_printf_i+0x1e6>
 800b8b4:	6833      	ldr	r3, [r6, #0]
 800b8b6:	6820      	ldr	r0, [r4, #0]
 800b8b8:	1d19      	adds	r1, r3, #4
 800b8ba:	6031      	str	r1, [r6, #0]
 800b8bc:	0606      	lsls	r6, r0, #24
 800b8be:	d501      	bpl.n	800b8c4 <_printf_i+0xbc>
 800b8c0:	681d      	ldr	r5, [r3, #0]
 800b8c2:	e003      	b.n	800b8cc <_printf_i+0xc4>
 800b8c4:	0645      	lsls	r5, r0, #25
 800b8c6:	d5fb      	bpl.n	800b8c0 <_printf_i+0xb8>
 800b8c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b8cc:	2d00      	cmp	r5, #0
 800b8ce:	da03      	bge.n	800b8d8 <_printf_i+0xd0>
 800b8d0:	232d      	movs	r3, #45	@ 0x2d
 800b8d2:	426d      	negs	r5, r5
 800b8d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8d8:	4858      	ldr	r0, [pc, #352]	@ (800ba3c <_printf_i+0x234>)
 800b8da:	230a      	movs	r3, #10
 800b8dc:	e011      	b.n	800b902 <_printf_i+0xfa>
 800b8de:	6821      	ldr	r1, [r4, #0]
 800b8e0:	6833      	ldr	r3, [r6, #0]
 800b8e2:	0608      	lsls	r0, r1, #24
 800b8e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b8e8:	d402      	bmi.n	800b8f0 <_printf_i+0xe8>
 800b8ea:	0649      	lsls	r1, r1, #25
 800b8ec:	bf48      	it	mi
 800b8ee:	b2ad      	uxthmi	r5, r5
 800b8f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b8f2:	4852      	ldr	r0, [pc, #328]	@ (800ba3c <_printf_i+0x234>)
 800b8f4:	6033      	str	r3, [r6, #0]
 800b8f6:	bf14      	ite	ne
 800b8f8:	230a      	movne	r3, #10
 800b8fa:	2308      	moveq	r3, #8
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b902:	6866      	ldr	r6, [r4, #4]
 800b904:	60a6      	str	r6, [r4, #8]
 800b906:	2e00      	cmp	r6, #0
 800b908:	db05      	blt.n	800b916 <_printf_i+0x10e>
 800b90a:	6821      	ldr	r1, [r4, #0]
 800b90c:	432e      	orrs	r6, r5
 800b90e:	f021 0104 	bic.w	r1, r1, #4
 800b912:	6021      	str	r1, [r4, #0]
 800b914:	d04b      	beq.n	800b9ae <_printf_i+0x1a6>
 800b916:	4616      	mov	r6, r2
 800b918:	fbb5 f1f3 	udiv	r1, r5, r3
 800b91c:	fb03 5711 	mls	r7, r3, r1, r5
 800b920:	5dc7      	ldrb	r7, [r0, r7]
 800b922:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b926:	462f      	mov	r7, r5
 800b928:	42bb      	cmp	r3, r7
 800b92a:	460d      	mov	r5, r1
 800b92c:	d9f4      	bls.n	800b918 <_printf_i+0x110>
 800b92e:	2b08      	cmp	r3, #8
 800b930:	d10b      	bne.n	800b94a <_printf_i+0x142>
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	07df      	lsls	r7, r3, #31
 800b936:	d508      	bpl.n	800b94a <_printf_i+0x142>
 800b938:	6923      	ldr	r3, [r4, #16]
 800b93a:	6861      	ldr	r1, [r4, #4]
 800b93c:	4299      	cmp	r1, r3
 800b93e:	bfde      	ittt	le
 800b940:	2330      	movle	r3, #48	@ 0x30
 800b942:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b946:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b94a:	1b92      	subs	r2, r2, r6
 800b94c:	6122      	str	r2, [r4, #16]
 800b94e:	f8cd a000 	str.w	sl, [sp]
 800b952:	464b      	mov	r3, r9
 800b954:	aa03      	add	r2, sp, #12
 800b956:	4621      	mov	r1, r4
 800b958:	4640      	mov	r0, r8
 800b95a:	f7ff fee7 	bl	800b72c <_printf_common>
 800b95e:	3001      	adds	r0, #1
 800b960:	d14a      	bne.n	800b9f8 <_printf_i+0x1f0>
 800b962:	f04f 30ff 	mov.w	r0, #4294967295
 800b966:	b004      	add	sp, #16
 800b968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b96c:	6823      	ldr	r3, [r4, #0]
 800b96e:	f043 0320 	orr.w	r3, r3, #32
 800b972:	6023      	str	r3, [r4, #0]
 800b974:	4832      	ldr	r0, [pc, #200]	@ (800ba40 <_printf_i+0x238>)
 800b976:	2778      	movs	r7, #120	@ 0x78
 800b978:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b97c:	6823      	ldr	r3, [r4, #0]
 800b97e:	6831      	ldr	r1, [r6, #0]
 800b980:	061f      	lsls	r7, r3, #24
 800b982:	f851 5b04 	ldr.w	r5, [r1], #4
 800b986:	d402      	bmi.n	800b98e <_printf_i+0x186>
 800b988:	065f      	lsls	r7, r3, #25
 800b98a:	bf48      	it	mi
 800b98c:	b2ad      	uxthmi	r5, r5
 800b98e:	6031      	str	r1, [r6, #0]
 800b990:	07d9      	lsls	r1, r3, #31
 800b992:	bf44      	itt	mi
 800b994:	f043 0320 	orrmi.w	r3, r3, #32
 800b998:	6023      	strmi	r3, [r4, #0]
 800b99a:	b11d      	cbz	r5, 800b9a4 <_printf_i+0x19c>
 800b99c:	2310      	movs	r3, #16
 800b99e:	e7ad      	b.n	800b8fc <_printf_i+0xf4>
 800b9a0:	4826      	ldr	r0, [pc, #152]	@ (800ba3c <_printf_i+0x234>)
 800b9a2:	e7e9      	b.n	800b978 <_printf_i+0x170>
 800b9a4:	6823      	ldr	r3, [r4, #0]
 800b9a6:	f023 0320 	bic.w	r3, r3, #32
 800b9aa:	6023      	str	r3, [r4, #0]
 800b9ac:	e7f6      	b.n	800b99c <_printf_i+0x194>
 800b9ae:	4616      	mov	r6, r2
 800b9b0:	e7bd      	b.n	800b92e <_printf_i+0x126>
 800b9b2:	6833      	ldr	r3, [r6, #0]
 800b9b4:	6825      	ldr	r5, [r4, #0]
 800b9b6:	6961      	ldr	r1, [r4, #20]
 800b9b8:	1d18      	adds	r0, r3, #4
 800b9ba:	6030      	str	r0, [r6, #0]
 800b9bc:	062e      	lsls	r6, r5, #24
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	d501      	bpl.n	800b9c6 <_printf_i+0x1be>
 800b9c2:	6019      	str	r1, [r3, #0]
 800b9c4:	e002      	b.n	800b9cc <_printf_i+0x1c4>
 800b9c6:	0668      	lsls	r0, r5, #25
 800b9c8:	d5fb      	bpl.n	800b9c2 <_printf_i+0x1ba>
 800b9ca:	8019      	strh	r1, [r3, #0]
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	6123      	str	r3, [r4, #16]
 800b9d0:	4616      	mov	r6, r2
 800b9d2:	e7bc      	b.n	800b94e <_printf_i+0x146>
 800b9d4:	6833      	ldr	r3, [r6, #0]
 800b9d6:	1d1a      	adds	r2, r3, #4
 800b9d8:	6032      	str	r2, [r6, #0]
 800b9da:	681e      	ldr	r6, [r3, #0]
 800b9dc:	6862      	ldr	r2, [r4, #4]
 800b9de:	2100      	movs	r1, #0
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	f7f4 fc85 	bl	80002f0 <memchr>
 800b9e6:	b108      	cbz	r0, 800b9ec <_printf_i+0x1e4>
 800b9e8:	1b80      	subs	r0, r0, r6
 800b9ea:	6060      	str	r0, [r4, #4]
 800b9ec:	6863      	ldr	r3, [r4, #4]
 800b9ee:	6123      	str	r3, [r4, #16]
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9f6:	e7aa      	b.n	800b94e <_printf_i+0x146>
 800b9f8:	6923      	ldr	r3, [r4, #16]
 800b9fa:	4632      	mov	r2, r6
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	4640      	mov	r0, r8
 800ba00:	47d0      	blx	sl
 800ba02:	3001      	adds	r0, #1
 800ba04:	d0ad      	beq.n	800b962 <_printf_i+0x15a>
 800ba06:	6823      	ldr	r3, [r4, #0]
 800ba08:	079b      	lsls	r3, r3, #30
 800ba0a:	d413      	bmi.n	800ba34 <_printf_i+0x22c>
 800ba0c:	68e0      	ldr	r0, [r4, #12]
 800ba0e:	9b03      	ldr	r3, [sp, #12]
 800ba10:	4298      	cmp	r0, r3
 800ba12:	bfb8      	it	lt
 800ba14:	4618      	movlt	r0, r3
 800ba16:	e7a6      	b.n	800b966 <_printf_i+0x15e>
 800ba18:	2301      	movs	r3, #1
 800ba1a:	4632      	mov	r2, r6
 800ba1c:	4649      	mov	r1, r9
 800ba1e:	4640      	mov	r0, r8
 800ba20:	47d0      	blx	sl
 800ba22:	3001      	adds	r0, #1
 800ba24:	d09d      	beq.n	800b962 <_printf_i+0x15a>
 800ba26:	3501      	adds	r5, #1
 800ba28:	68e3      	ldr	r3, [r4, #12]
 800ba2a:	9903      	ldr	r1, [sp, #12]
 800ba2c:	1a5b      	subs	r3, r3, r1
 800ba2e:	42ab      	cmp	r3, r5
 800ba30:	dcf2      	bgt.n	800ba18 <_printf_i+0x210>
 800ba32:	e7eb      	b.n	800ba0c <_printf_i+0x204>
 800ba34:	2500      	movs	r5, #0
 800ba36:	f104 0619 	add.w	r6, r4, #25
 800ba3a:	e7f5      	b.n	800ba28 <_printf_i+0x220>
 800ba3c:	0800da22 	.word	0x0800da22
 800ba40:	0800da33 	.word	0x0800da33

0800ba44 <std>:
 800ba44:	2300      	movs	r3, #0
 800ba46:	b510      	push	{r4, lr}
 800ba48:	4604      	mov	r4, r0
 800ba4a:	e9c0 3300 	strd	r3, r3, [r0]
 800ba4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba52:	6083      	str	r3, [r0, #8]
 800ba54:	8181      	strh	r1, [r0, #12]
 800ba56:	6643      	str	r3, [r0, #100]	@ 0x64
 800ba58:	81c2      	strh	r2, [r0, #14]
 800ba5a:	6183      	str	r3, [r0, #24]
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	2208      	movs	r2, #8
 800ba60:	305c      	adds	r0, #92	@ 0x5c
 800ba62:	f000 f8f4 	bl	800bc4e <memset>
 800ba66:	4b0d      	ldr	r3, [pc, #52]	@ (800ba9c <std+0x58>)
 800ba68:	6263      	str	r3, [r4, #36]	@ 0x24
 800ba6a:	4b0d      	ldr	r3, [pc, #52]	@ (800baa0 <std+0x5c>)
 800ba6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ba6e:	4b0d      	ldr	r3, [pc, #52]	@ (800baa4 <std+0x60>)
 800ba70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ba72:	4b0d      	ldr	r3, [pc, #52]	@ (800baa8 <std+0x64>)
 800ba74:	6323      	str	r3, [r4, #48]	@ 0x30
 800ba76:	4b0d      	ldr	r3, [pc, #52]	@ (800baac <std+0x68>)
 800ba78:	6224      	str	r4, [r4, #32]
 800ba7a:	429c      	cmp	r4, r3
 800ba7c:	d006      	beq.n	800ba8c <std+0x48>
 800ba7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ba82:	4294      	cmp	r4, r2
 800ba84:	d002      	beq.n	800ba8c <std+0x48>
 800ba86:	33d0      	adds	r3, #208	@ 0xd0
 800ba88:	429c      	cmp	r4, r3
 800ba8a:	d105      	bne.n	800ba98 <std+0x54>
 800ba8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ba90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba94:	f000 b958 	b.w	800bd48 <__retarget_lock_init_recursive>
 800ba98:	bd10      	pop	{r4, pc}
 800ba9a:	bf00      	nop
 800ba9c:	0800bbc9 	.word	0x0800bbc9
 800baa0:	0800bbeb 	.word	0x0800bbeb
 800baa4:	0800bc23 	.word	0x0800bc23
 800baa8:	0800bc47 	.word	0x0800bc47
 800baac:	24000944 	.word	0x24000944

0800bab0 <stdio_exit_handler>:
 800bab0:	4a02      	ldr	r2, [pc, #8]	@ (800babc <stdio_exit_handler+0xc>)
 800bab2:	4903      	ldr	r1, [pc, #12]	@ (800bac0 <stdio_exit_handler+0x10>)
 800bab4:	4803      	ldr	r0, [pc, #12]	@ (800bac4 <stdio_exit_handler+0x14>)
 800bab6:	f000 b869 	b.w	800bb8c <_fwalk_sglue>
 800baba:	bf00      	nop
 800babc:	24000010 	.word	0x24000010
 800bac0:	0800d339 	.word	0x0800d339
 800bac4:	24000020 	.word	0x24000020

0800bac8 <cleanup_stdio>:
 800bac8:	6841      	ldr	r1, [r0, #4]
 800baca:	4b0c      	ldr	r3, [pc, #48]	@ (800bafc <cleanup_stdio+0x34>)
 800bacc:	4299      	cmp	r1, r3
 800bace:	b510      	push	{r4, lr}
 800bad0:	4604      	mov	r4, r0
 800bad2:	d001      	beq.n	800bad8 <cleanup_stdio+0x10>
 800bad4:	f001 fc30 	bl	800d338 <_fflush_r>
 800bad8:	68a1      	ldr	r1, [r4, #8]
 800bada:	4b09      	ldr	r3, [pc, #36]	@ (800bb00 <cleanup_stdio+0x38>)
 800badc:	4299      	cmp	r1, r3
 800bade:	d002      	beq.n	800bae6 <cleanup_stdio+0x1e>
 800bae0:	4620      	mov	r0, r4
 800bae2:	f001 fc29 	bl	800d338 <_fflush_r>
 800bae6:	68e1      	ldr	r1, [r4, #12]
 800bae8:	4b06      	ldr	r3, [pc, #24]	@ (800bb04 <cleanup_stdio+0x3c>)
 800baea:	4299      	cmp	r1, r3
 800baec:	d004      	beq.n	800baf8 <cleanup_stdio+0x30>
 800baee:	4620      	mov	r0, r4
 800baf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baf4:	f001 bc20 	b.w	800d338 <_fflush_r>
 800baf8:	bd10      	pop	{r4, pc}
 800bafa:	bf00      	nop
 800bafc:	24000944 	.word	0x24000944
 800bb00:	240009ac 	.word	0x240009ac
 800bb04:	24000a14 	.word	0x24000a14

0800bb08 <global_stdio_init.part.0>:
 800bb08:	b510      	push	{r4, lr}
 800bb0a:	4b0b      	ldr	r3, [pc, #44]	@ (800bb38 <global_stdio_init.part.0+0x30>)
 800bb0c:	4c0b      	ldr	r4, [pc, #44]	@ (800bb3c <global_stdio_init.part.0+0x34>)
 800bb0e:	4a0c      	ldr	r2, [pc, #48]	@ (800bb40 <global_stdio_init.part.0+0x38>)
 800bb10:	601a      	str	r2, [r3, #0]
 800bb12:	4620      	mov	r0, r4
 800bb14:	2200      	movs	r2, #0
 800bb16:	2104      	movs	r1, #4
 800bb18:	f7ff ff94 	bl	800ba44 <std>
 800bb1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bb20:	2201      	movs	r2, #1
 800bb22:	2109      	movs	r1, #9
 800bb24:	f7ff ff8e 	bl	800ba44 <std>
 800bb28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bb2c:	2202      	movs	r2, #2
 800bb2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb32:	2112      	movs	r1, #18
 800bb34:	f7ff bf86 	b.w	800ba44 <std>
 800bb38:	24000a7c 	.word	0x24000a7c
 800bb3c:	24000944 	.word	0x24000944
 800bb40:	0800bab1 	.word	0x0800bab1

0800bb44 <__sfp_lock_acquire>:
 800bb44:	4801      	ldr	r0, [pc, #4]	@ (800bb4c <__sfp_lock_acquire+0x8>)
 800bb46:	f000 b900 	b.w	800bd4a <__retarget_lock_acquire_recursive>
 800bb4a:	bf00      	nop
 800bb4c:	24000a85 	.word	0x24000a85

0800bb50 <__sfp_lock_release>:
 800bb50:	4801      	ldr	r0, [pc, #4]	@ (800bb58 <__sfp_lock_release+0x8>)
 800bb52:	f000 b8fb 	b.w	800bd4c <__retarget_lock_release_recursive>
 800bb56:	bf00      	nop
 800bb58:	24000a85 	.word	0x24000a85

0800bb5c <__sinit>:
 800bb5c:	b510      	push	{r4, lr}
 800bb5e:	4604      	mov	r4, r0
 800bb60:	f7ff fff0 	bl	800bb44 <__sfp_lock_acquire>
 800bb64:	6a23      	ldr	r3, [r4, #32]
 800bb66:	b11b      	cbz	r3, 800bb70 <__sinit+0x14>
 800bb68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb6c:	f7ff bff0 	b.w	800bb50 <__sfp_lock_release>
 800bb70:	4b04      	ldr	r3, [pc, #16]	@ (800bb84 <__sinit+0x28>)
 800bb72:	6223      	str	r3, [r4, #32]
 800bb74:	4b04      	ldr	r3, [pc, #16]	@ (800bb88 <__sinit+0x2c>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d1f5      	bne.n	800bb68 <__sinit+0xc>
 800bb7c:	f7ff ffc4 	bl	800bb08 <global_stdio_init.part.0>
 800bb80:	e7f2      	b.n	800bb68 <__sinit+0xc>
 800bb82:	bf00      	nop
 800bb84:	0800bac9 	.word	0x0800bac9
 800bb88:	24000a7c 	.word	0x24000a7c

0800bb8c <_fwalk_sglue>:
 800bb8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb90:	4607      	mov	r7, r0
 800bb92:	4688      	mov	r8, r1
 800bb94:	4614      	mov	r4, r2
 800bb96:	2600      	movs	r6, #0
 800bb98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb9c:	f1b9 0901 	subs.w	r9, r9, #1
 800bba0:	d505      	bpl.n	800bbae <_fwalk_sglue+0x22>
 800bba2:	6824      	ldr	r4, [r4, #0]
 800bba4:	2c00      	cmp	r4, #0
 800bba6:	d1f7      	bne.n	800bb98 <_fwalk_sglue+0xc>
 800bba8:	4630      	mov	r0, r6
 800bbaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbae:	89ab      	ldrh	r3, [r5, #12]
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d907      	bls.n	800bbc4 <_fwalk_sglue+0x38>
 800bbb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	d003      	beq.n	800bbc4 <_fwalk_sglue+0x38>
 800bbbc:	4629      	mov	r1, r5
 800bbbe:	4638      	mov	r0, r7
 800bbc0:	47c0      	blx	r8
 800bbc2:	4306      	orrs	r6, r0
 800bbc4:	3568      	adds	r5, #104	@ 0x68
 800bbc6:	e7e9      	b.n	800bb9c <_fwalk_sglue+0x10>

0800bbc8 <__sread>:
 800bbc8:	b510      	push	{r4, lr}
 800bbca:	460c      	mov	r4, r1
 800bbcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbd0:	f000 f86c 	bl	800bcac <_read_r>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	bfab      	itete	ge
 800bbd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bbda:	89a3      	ldrhlt	r3, [r4, #12]
 800bbdc:	181b      	addge	r3, r3, r0
 800bbde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bbe2:	bfac      	ite	ge
 800bbe4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bbe6:	81a3      	strhlt	r3, [r4, #12]
 800bbe8:	bd10      	pop	{r4, pc}

0800bbea <__swrite>:
 800bbea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbee:	461f      	mov	r7, r3
 800bbf0:	898b      	ldrh	r3, [r1, #12]
 800bbf2:	05db      	lsls	r3, r3, #23
 800bbf4:	4605      	mov	r5, r0
 800bbf6:	460c      	mov	r4, r1
 800bbf8:	4616      	mov	r6, r2
 800bbfa:	d505      	bpl.n	800bc08 <__swrite+0x1e>
 800bbfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc00:	2302      	movs	r3, #2
 800bc02:	2200      	movs	r2, #0
 800bc04:	f000 f840 	bl	800bc88 <_lseek_r>
 800bc08:	89a3      	ldrh	r3, [r4, #12]
 800bc0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc12:	81a3      	strh	r3, [r4, #12]
 800bc14:	4632      	mov	r2, r6
 800bc16:	463b      	mov	r3, r7
 800bc18:	4628      	mov	r0, r5
 800bc1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc1e:	f000 b857 	b.w	800bcd0 <_write_r>

0800bc22 <__sseek>:
 800bc22:	b510      	push	{r4, lr}
 800bc24:	460c      	mov	r4, r1
 800bc26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc2a:	f000 f82d 	bl	800bc88 <_lseek_r>
 800bc2e:	1c43      	adds	r3, r0, #1
 800bc30:	89a3      	ldrh	r3, [r4, #12]
 800bc32:	bf15      	itete	ne
 800bc34:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bc36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bc3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bc3e:	81a3      	strheq	r3, [r4, #12]
 800bc40:	bf18      	it	ne
 800bc42:	81a3      	strhne	r3, [r4, #12]
 800bc44:	bd10      	pop	{r4, pc}

0800bc46 <__sclose>:
 800bc46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc4a:	f000 b80d 	b.w	800bc68 <_close_r>

0800bc4e <memset>:
 800bc4e:	4402      	add	r2, r0
 800bc50:	4603      	mov	r3, r0
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d100      	bne.n	800bc58 <memset+0xa>
 800bc56:	4770      	bx	lr
 800bc58:	f803 1b01 	strb.w	r1, [r3], #1
 800bc5c:	e7f9      	b.n	800bc52 <memset+0x4>
	...

0800bc60 <_localeconv_r>:
 800bc60:	4800      	ldr	r0, [pc, #0]	@ (800bc64 <_localeconv_r+0x4>)
 800bc62:	4770      	bx	lr
 800bc64:	2400015c 	.word	0x2400015c

0800bc68 <_close_r>:
 800bc68:	b538      	push	{r3, r4, r5, lr}
 800bc6a:	4d06      	ldr	r5, [pc, #24]	@ (800bc84 <_close_r+0x1c>)
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	4604      	mov	r4, r0
 800bc70:	4608      	mov	r0, r1
 800bc72:	602b      	str	r3, [r5, #0]
 800bc74:	f7f5 fb82 	bl	800137c <_close>
 800bc78:	1c43      	adds	r3, r0, #1
 800bc7a:	d102      	bne.n	800bc82 <_close_r+0x1a>
 800bc7c:	682b      	ldr	r3, [r5, #0]
 800bc7e:	b103      	cbz	r3, 800bc82 <_close_r+0x1a>
 800bc80:	6023      	str	r3, [r4, #0]
 800bc82:	bd38      	pop	{r3, r4, r5, pc}
 800bc84:	24000a80 	.word	0x24000a80

0800bc88 <_lseek_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d07      	ldr	r5, [pc, #28]	@ (800bca8 <_lseek_r+0x20>)
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	4608      	mov	r0, r1
 800bc90:	4611      	mov	r1, r2
 800bc92:	2200      	movs	r2, #0
 800bc94:	602a      	str	r2, [r5, #0]
 800bc96:	461a      	mov	r2, r3
 800bc98:	f7f5 fb97 	bl	80013ca <_lseek>
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d102      	bne.n	800bca6 <_lseek_r+0x1e>
 800bca0:	682b      	ldr	r3, [r5, #0]
 800bca2:	b103      	cbz	r3, 800bca6 <_lseek_r+0x1e>
 800bca4:	6023      	str	r3, [r4, #0]
 800bca6:	bd38      	pop	{r3, r4, r5, pc}
 800bca8:	24000a80 	.word	0x24000a80

0800bcac <_read_r>:
 800bcac:	b538      	push	{r3, r4, r5, lr}
 800bcae:	4d07      	ldr	r5, [pc, #28]	@ (800bccc <_read_r+0x20>)
 800bcb0:	4604      	mov	r4, r0
 800bcb2:	4608      	mov	r0, r1
 800bcb4:	4611      	mov	r1, r2
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	602a      	str	r2, [r5, #0]
 800bcba:	461a      	mov	r2, r3
 800bcbc:	f7f5 fb25 	bl	800130a <_read>
 800bcc0:	1c43      	adds	r3, r0, #1
 800bcc2:	d102      	bne.n	800bcca <_read_r+0x1e>
 800bcc4:	682b      	ldr	r3, [r5, #0]
 800bcc6:	b103      	cbz	r3, 800bcca <_read_r+0x1e>
 800bcc8:	6023      	str	r3, [r4, #0]
 800bcca:	bd38      	pop	{r3, r4, r5, pc}
 800bccc:	24000a80 	.word	0x24000a80

0800bcd0 <_write_r>:
 800bcd0:	b538      	push	{r3, r4, r5, lr}
 800bcd2:	4d07      	ldr	r5, [pc, #28]	@ (800bcf0 <_write_r+0x20>)
 800bcd4:	4604      	mov	r4, r0
 800bcd6:	4608      	mov	r0, r1
 800bcd8:	4611      	mov	r1, r2
 800bcda:	2200      	movs	r2, #0
 800bcdc:	602a      	str	r2, [r5, #0]
 800bcde:	461a      	mov	r2, r3
 800bce0:	f7f5 fb30 	bl	8001344 <_write>
 800bce4:	1c43      	adds	r3, r0, #1
 800bce6:	d102      	bne.n	800bcee <_write_r+0x1e>
 800bce8:	682b      	ldr	r3, [r5, #0]
 800bcea:	b103      	cbz	r3, 800bcee <_write_r+0x1e>
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	bd38      	pop	{r3, r4, r5, pc}
 800bcf0:	24000a80 	.word	0x24000a80

0800bcf4 <__errno>:
 800bcf4:	4b01      	ldr	r3, [pc, #4]	@ (800bcfc <__errno+0x8>)
 800bcf6:	6818      	ldr	r0, [r3, #0]
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	2400001c 	.word	0x2400001c

0800bd00 <__libc_init_array>:
 800bd00:	b570      	push	{r4, r5, r6, lr}
 800bd02:	4d0d      	ldr	r5, [pc, #52]	@ (800bd38 <__libc_init_array+0x38>)
 800bd04:	4c0d      	ldr	r4, [pc, #52]	@ (800bd3c <__libc_init_array+0x3c>)
 800bd06:	1b64      	subs	r4, r4, r5
 800bd08:	10a4      	asrs	r4, r4, #2
 800bd0a:	2600      	movs	r6, #0
 800bd0c:	42a6      	cmp	r6, r4
 800bd0e:	d109      	bne.n	800bd24 <__libc_init_array+0x24>
 800bd10:	4d0b      	ldr	r5, [pc, #44]	@ (800bd40 <__libc_init_array+0x40>)
 800bd12:	4c0c      	ldr	r4, [pc, #48]	@ (800bd44 <__libc_init_array+0x44>)
 800bd14:	f001 fe50 	bl	800d9b8 <_init>
 800bd18:	1b64      	subs	r4, r4, r5
 800bd1a:	10a4      	asrs	r4, r4, #2
 800bd1c:	2600      	movs	r6, #0
 800bd1e:	42a6      	cmp	r6, r4
 800bd20:	d105      	bne.n	800bd2e <__libc_init_array+0x2e>
 800bd22:	bd70      	pop	{r4, r5, r6, pc}
 800bd24:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd28:	4798      	blx	r3
 800bd2a:	3601      	adds	r6, #1
 800bd2c:	e7ee      	b.n	800bd0c <__libc_init_array+0xc>
 800bd2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd32:	4798      	blx	r3
 800bd34:	3601      	adds	r6, #1
 800bd36:	e7f2      	b.n	800bd1e <__libc_init_array+0x1e>
 800bd38:	0800dd8c 	.word	0x0800dd8c
 800bd3c:	0800dd8c 	.word	0x0800dd8c
 800bd40:	0800dd8c 	.word	0x0800dd8c
 800bd44:	0800dd90 	.word	0x0800dd90

0800bd48 <__retarget_lock_init_recursive>:
 800bd48:	4770      	bx	lr

0800bd4a <__retarget_lock_acquire_recursive>:
 800bd4a:	4770      	bx	lr

0800bd4c <__retarget_lock_release_recursive>:
 800bd4c:	4770      	bx	lr

0800bd4e <memcpy>:
 800bd4e:	440a      	add	r2, r1
 800bd50:	4291      	cmp	r1, r2
 800bd52:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd56:	d100      	bne.n	800bd5a <memcpy+0xc>
 800bd58:	4770      	bx	lr
 800bd5a:	b510      	push	{r4, lr}
 800bd5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd64:	4291      	cmp	r1, r2
 800bd66:	d1f9      	bne.n	800bd5c <memcpy+0xe>
 800bd68:	bd10      	pop	{r4, pc}

0800bd6a <quorem>:
 800bd6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6e:	6903      	ldr	r3, [r0, #16]
 800bd70:	690c      	ldr	r4, [r1, #16]
 800bd72:	42a3      	cmp	r3, r4
 800bd74:	4607      	mov	r7, r0
 800bd76:	db7e      	blt.n	800be76 <quorem+0x10c>
 800bd78:	3c01      	subs	r4, #1
 800bd7a:	f101 0814 	add.w	r8, r1, #20
 800bd7e:	00a3      	lsls	r3, r4, #2
 800bd80:	f100 0514 	add.w	r5, r0, #20
 800bd84:	9300      	str	r3, [sp, #0]
 800bd86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd8a:	9301      	str	r3, [sp, #4]
 800bd8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd94:	3301      	adds	r3, #1
 800bd96:	429a      	cmp	r2, r3
 800bd98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd9c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bda0:	d32e      	bcc.n	800be00 <quorem+0x96>
 800bda2:	f04f 0a00 	mov.w	sl, #0
 800bda6:	46c4      	mov	ip, r8
 800bda8:	46ae      	mov	lr, r5
 800bdaa:	46d3      	mov	fp, sl
 800bdac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bdb0:	b298      	uxth	r0, r3
 800bdb2:	fb06 a000 	mla	r0, r6, r0, sl
 800bdb6:	0c02      	lsrs	r2, r0, #16
 800bdb8:	0c1b      	lsrs	r3, r3, #16
 800bdba:	fb06 2303 	mla	r3, r6, r3, r2
 800bdbe:	f8de 2000 	ldr.w	r2, [lr]
 800bdc2:	b280      	uxth	r0, r0
 800bdc4:	b292      	uxth	r2, r2
 800bdc6:	1a12      	subs	r2, r2, r0
 800bdc8:	445a      	add	r2, fp
 800bdca:	f8de 0000 	ldr.w	r0, [lr]
 800bdce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bdd8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bddc:	b292      	uxth	r2, r2
 800bdde:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bde2:	45e1      	cmp	r9, ip
 800bde4:	f84e 2b04 	str.w	r2, [lr], #4
 800bde8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bdec:	d2de      	bcs.n	800bdac <quorem+0x42>
 800bdee:	9b00      	ldr	r3, [sp, #0]
 800bdf0:	58eb      	ldr	r3, [r5, r3]
 800bdf2:	b92b      	cbnz	r3, 800be00 <quorem+0x96>
 800bdf4:	9b01      	ldr	r3, [sp, #4]
 800bdf6:	3b04      	subs	r3, #4
 800bdf8:	429d      	cmp	r5, r3
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	d32f      	bcc.n	800be5e <quorem+0xf4>
 800bdfe:	613c      	str	r4, [r7, #16]
 800be00:	4638      	mov	r0, r7
 800be02:	f001 f90d 	bl	800d020 <__mcmp>
 800be06:	2800      	cmp	r0, #0
 800be08:	db25      	blt.n	800be56 <quorem+0xec>
 800be0a:	4629      	mov	r1, r5
 800be0c:	2000      	movs	r0, #0
 800be0e:	f858 2b04 	ldr.w	r2, [r8], #4
 800be12:	f8d1 c000 	ldr.w	ip, [r1]
 800be16:	fa1f fe82 	uxth.w	lr, r2
 800be1a:	fa1f f38c 	uxth.w	r3, ip
 800be1e:	eba3 030e 	sub.w	r3, r3, lr
 800be22:	4403      	add	r3, r0
 800be24:	0c12      	lsrs	r2, r2, #16
 800be26:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800be2a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800be2e:	b29b      	uxth	r3, r3
 800be30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be34:	45c1      	cmp	r9, r8
 800be36:	f841 3b04 	str.w	r3, [r1], #4
 800be3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800be3e:	d2e6      	bcs.n	800be0e <quorem+0xa4>
 800be40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be48:	b922      	cbnz	r2, 800be54 <quorem+0xea>
 800be4a:	3b04      	subs	r3, #4
 800be4c:	429d      	cmp	r5, r3
 800be4e:	461a      	mov	r2, r3
 800be50:	d30b      	bcc.n	800be6a <quorem+0x100>
 800be52:	613c      	str	r4, [r7, #16]
 800be54:	3601      	adds	r6, #1
 800be56:	4630      	mov	r0, r6
 800be58:	b003      	add	sp, #12
 800be5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be5e:	6812      	ldr	r2, [r2, #0]
 800be60:	3b04      	subs	r3, #4
 800be62:	2a00      	cmp	r2, #0
 800be64:	d1cb      	bne.n	800bdfe <quorem+0x94>
 800be66:	3c01      	subs	r4, #1
 800be68:	e7c6      	b.n	800bdf8 <quorem+0x8e>
 800be6a:	6812      	ldr	r2, [r2, #0]
 800be6c:	3b04      	subs	r3, #4
 800be6e:	2a00      	cmp	r2, #0
 800be70:	d1ef      	bne.n	800be52 <quorem+0xe8>
 800be72:	3c01      	subs	r4, #1
 800be74:	e7ea      	b.n	800be4c <quorem+0xe2>
 800be76:	2000      	movs	r0, #0
 800be78:	e7ee      	b.n	800be58 <quorem+0xee>
 800be7a:	0000      	movs	r0, r0
 800be7c:	0000      	movs	r0, r0
	...

0800be80 <_dtoa_r>:
 800be80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be84:	ed2d 8b02 	vpush	{d8}
 800be88:	69c7      	ldr	r7, [r0, #28]
 800be8a:	b091      	sub	sp, #68	@ 0x44
 800be8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800be90:	ec55 4b10 	vmov	r4, r5, d0
 800be94:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800be96:	9107      	str	r1, [sp, #28]
 800be98:	4681      	mov	r9, r0
 800be9a:	9209      	str	r2, [sp, #36]	@ 0x24
 800be9c:	930d      	str	r3, [sp, #52]	@ 0x34
 800be9e:	b97f      	cbnz	r7, 800bec0 <_dtoa_r+0x40>
 800bea0:	2010      	movs	r0, #16
 800bea2:	f000 fd95 	bl	800c9d0 <malloc>
 800bea6:	4602      	mov	r2, r0
 800bea8:	f8c9 001c 	str.w	r0, [r9, #28]
 800beac:	b920      	cbnz	r0, 800beb8 <_dtoa_r+0x38>
 800beae:	4ba0      	ldr	r3, [pc, #640]	@ (800c130 <_dtoa_r+0x2b0>)
 800beb0:	21ef      	movs	r1, #239	@ 0xef
 800beb2:	48a0      	ldr	r0, [pc, #640]	@ (800c134 <_dtoa_r+0x2b4>)
 800beb4:	f001 fa78 	bl	800d3a8 <__assert_func>
 800beb8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bebc:	6007      	str	r7, [r0, #0]
 800bebe:	60c7      	str	r7, [r0, #12]
 800bec0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bec4:	6819      	ldr	r1, [r3, #0]
 800bec6:	b159      	cbz	r1, 800bee0 <_dtoa_r+0x60>
 800bec8:	685a      	ldr	r2, [r3, #4]
 800beca:	604a      	str	r2, [r1, #4]
 800becc:	2301      	movs	r3, #1
 800bece:	4093      	lsls	r3, r2
 800bed0:	608b      	str	r3, [r1, #8]
 800bed2:	4648      	mov	r0, r9
 800bed4:	f000 fe72 	bl	800cbbc <_Bfree>
 800bed8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bedc:	2200      	movs	r2, #0
 800bede:	601a      	str	r2, [r3, #0]
 800bee0:	1e2b      	subs	r3, r5, #0
 800bee2:	bfbb      	ittet	lt
 800bee4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bee8:	9303      	strlt	r3, [sp, #12]
 800beea:	2300      	movge	r3, #0
 800beec:	2201      	movlt	r2, #1
 800beee:	bfac      	ite	ge
 800bef0:	6033      	strge	r3, [r6, #0]
 800bef2:	6032      	strlt	r2, [r6, #0]
 800bef4:	4b90      	ldr	r3, [pc, #576]	@ (800c138 <_dtoa_r+0x2b8>)
 800bef6:	9e03      	ldr	r6, [sp, #12]
 800bef8:	43b3      	bics	r3, r6
 800befa:	d110      	bne.n	800bf1e <_dtoa_r+0x9e>
 800befc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800befe:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bf02:	6013      	str	r3, [r2, #0]
 800bf04:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800bf08:	4323      	orrs	r3, r4
 800bf0a:	f000 84e6 	beq.w	800c8da <_dtoa_r+0xa5a>
 800bf0e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bf10:	4f8a      	ldr	r7, [pc, #552]	@ (800c13c <_dtoa_r+0x2bc>)
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	f000 84e8 	beq.w	800c8e8 <_dtoa_r+0xa68>
 800bf18:	1cfb      	adds	r3, r7, #3
 800bf1a:	f000 bce3 	b.w	800c8e4 <_dtoa_r+0xa64>
 800bf1e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800bf22:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bf26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf2a:	d10a      	bne.n	800bf42 <_dtoa_r+0xc2>
 800bf2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf2e:	2301      	movs	r3, #1
 800bf30:	6013      	str	r3, [r2, #0]
 800bf32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bf34:	b113      	cbz	r3, 800bf3c <_dtoa_r+0xbc>
 800bf36:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bf38:	4b81      	ldr	r3, [pc, #516]	@ (800c140 <_dtoa_r+0x2c0>)
 800bf3a:	6013      	str	r3, [r2, #0]
 800bf3c:	4f81      	ldr	r7, [pc, #516]	@ (800c144 <_dtoa_r+0x2c4>)
 800bf3e:	f000 bcd3 	b.w	800c8e8 <_dtoa_r+0xa68>
 800bf42:	aa0e      	add	r2, sp, #56	@ 0x38
 800bf44:	a90f      	add	r1, sp, #60	@ 0x3c
 800bf46:	4648      	mov	r0, r9
 800bf48:	eeb0 0b48 	vmov.f64	d0, d8
 800bf4c:	f001 f918 	bl	800d180 <__d2b>
 800bf50:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800bf54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf56:	9001      	str	r0, [sp, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d045      	beq.n	800bfe8 <_dtoa_r+0x168>
 800bf5c:	eeb0 7b48 	vmov.f64	d7, d8
 800bf60:	ee18 1a90 	vmov	r1, s17
 800bf64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bf68:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800bf6c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800bf70:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800bf74:	2500      	movs	r5, #0
 800bf76:	ee07 1a90 	vmov	s15, r1
 800bf7a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800bf7e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c118 <_dtoa_r+0x298>
 800bf82:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bf86:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c120 <_dtoa_r+0x2a0>
 800bf8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bf8e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c128 <_dtoa_r+0x2a8>
 800bf92:	ee07 3a90 	vmov	s15, r3
 800bf96:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800bf9a:	eeb0 7b46 	vmov.f64	d7, d6
 800bf9e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800bfa2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bfa6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bfaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfae:	ee16 8a90 	vmov	r8, s13
 800bfb2:	d508      	bpl.n	800bfc6 <_dtoa_r+0x146>
 800bfb4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bfb8:	eeb4 6b47 	vcmp.f64	d6, d7
 800bfbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfc0:	bf18      	it	ne
 800bfc2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800bfc6:	f1b8 0f16 	cmp.w	r8, #22
 800bfca:	d82b      	bhi.n	800c024 <_dtoa_r+0x1a4>
 800bfcc:	495e      	ldr	r1, [pc, #376]	@ (800c148 <_dtoa_r+0x2c8>)
 800bfce:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800bfd2:	ed91 7b00 	vldr	d7, [r1]
 800bfd6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bfda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfde:	d501      	bpl.n	800bfe4 <_dtoa_r+0x164>
 800bfe0:	f108 38ff 	add.w	r8, r8, #4294967295
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	e01e      	b.n	800c026 <_dtoa_r+0x1a6>
 800bfe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfea:	4413      	add	r3, r2
 800bfec:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800bff0:	2920      	cmp	r1, #32
 800bff2:	bfc1      	itttt	gt
 800bff4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800bff8:	408e      	lslgt	r6, r1
 800bffa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800bffe:	fa24 f101 	lsrgt.w	r1, r4, r1
 800c002:	bfd6      	itet	le
 800c004:	f1c1 0120 	rsble	r1, r1, #32
 800c008:	4331      	orrgt	r1, r6
 800c00a:	fa04 f101 	lslle.w	r1, r4, r1
 800c00e:	ee07 1a90 	vmov	s15, r1
 800c012:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c016:	3b01      	subs	r3, #1
 800c018:	ee17 1a90 	vmov	r1, s15
 800c01c:	2501      	movs	r5, #1
 800c01e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c022:	e7a8      	b.n	800bf76 <_dtoa_r+0xf6>
 800c024:	2101      	movs	r1, #1
 800c026:	1ad2      	subs	r2, r2, r3
 800c028:	1e53      	subs	r3, r2, #1
 800c02a:	9306      	str	r3, [sp, #24]
 800c02c:	bf45      	ittet	mi
 800c02e:	f1c2 0301 	rsbmi	r3, r2, #1
 800c032:	9304      	strmi	r3, [sp, #16]
 800c034:	2300      	movpl	r3, #0
 800c036:	2300      	movmi	r3, #0
 800c038:	bf4c      	ite	mi
 800c03a:	9306      	strmi	r3, [sp, #24]
 800c03c:	9304      	strpl	r3, [sp, #16]
 800c03e:	f1b8 0f00 	cmp.w	r8, #0
 800c042:	910c      	str	r1, [sp, #48]	@ 0x30
 800c044:	db18      	blt.n	800c078 <_dtoa_r+0x1f8>
 800c046:	9b06      	ldr	r3, [sp, #24]
 800c048:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c04c:	4443      	add	r3, r8
 800c04e:	9306      	str	r3, [sp, #24]
 800c050:	2300      	movs	r3, #0
 800c052:	9a07      	ldr	r2, [sp, #28]
 800c054:	2a09      	cmp	r2, #9
 800c056:	d845      	bhi.n	800c0e4 <_dtoa_r+0x264>
 800c058:	2a05      	cmp	r2, #5
 800c05a:	bfc4      	itt	gt
 800c05c:	3a04      	subgt	r2, #4
 800c05e:	9207      	strgt	r2, [sp, #28]
 800c060:	9a07      	ldr	r2, [sp, #28]
 800c062:	f1a2 0202 	sub.w	r2, r2, #2
 800c066:	bfcc      	ite	gt
 800c068:	2400      	movgt	r4, #0
 800c06a:	2401      	movle	r4, #1
 800c06c:	2a03      	cmp	r2, #3
 800c06e:	d844      	bhi.n	800c0fa <_dtoa_r+0x27a>
 800c070:	e8df f002 	tbb	[pc, r2]
 800c074:	0b173634 	.word	0x0b173634
 800c078:	9b04      	ldr	r3, [sp, #16]
 800c07a:	2200      	movs	r2, #0
 800c07c:	eba3 0308 	sub.w	r3, r3, r8
 800c080:	9304      	str	r3, [sp, #16]
 800c082:	920a      	str	r2, [sp, #40]	@ 0x28
 800c084:	f1c8 0300 	rsb	r3, r8, #0
 800c088:	e7e3      	b.n	800c052 <_dtoa_r+0x1d2>
 800c08a:	2201      	movs	r2, #1
 800c08c:	9208      	str	r2, [sp, #32]
 800c08e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c090:	eb08 0b02 	add.w	fp, r8, r2
 800c094:	f10b 0a01 	add.w	sl, fp, #1
 800c098:	4652      	mov	r2, sl
 800c09a:	2a01      	cmp	r2, #1
 800c09c:	bfb8      	it	lt
 800c09e:	2201      	movlt	r2, #1
 800c0a0:	e006      	b.n	800c0b0 <_dtoa_r+0x230>
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	9208      	str	r2, [sp, #32]
 800c0a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0a8:	2a00      	cmp	r2, #0
 800c0aa:	dd29      	ble.n	800c100 <_dtoa_r+0x280>
 800c0ac:	4693      	mov	fp, r2
 800c0ae:	4692      	mov	sl, r2
 800c0b0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c0b4:	2100      	movs	r1, #0
 800c0b6:	2004      	movs	r0, #4
 800c0b8:	f100 0614 	add.w	r6, r0, #20
 800c0bc:	4296      	cmp	r6, r2
 800c0be:	d926      	bls.n	800c10e <_dtoa_r+0x28e>
 800c0c0:	6079      	str	r1, [r7, #4]
 800c0c2:	4648      	mov	r0, r9
 800c0c4:	9305      	str	r3, [sp, #20]
 800c0c6:	f000 fd39 	bl	800cb3c <_Balloc>
 800c0ca:	9b05      	ldr	r3, [sp, #20]
 800c0cc:	4607      	mov	r7, r0
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	d13e      	bne.n	800c150 <_dtoa_r+0x2d0>
 800c0d2:	4b1e      	ldr	r3, [pc, #120]	@ (800c14c <_dtoa_r+0x2cc>)
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	f240 11af 	movw	r1, #431	@ 0x1af
 800c0da:	e6ea      	b.n	800beb2 <_dtoa_r+0x32>
 800c0dc:	2200      	movs	r2, #0
 800c0de:	e7e1      	b.n	800c0a4 <_dtoa_r+0x224>
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	e7d3      	b.n	800c08c <_dtoa_r+0x20c>
 800c0e4:	2401      	movs	r4, #1
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c0ec:	f04f 3bff 	mov.w	fp, #4294967295
 800c0f0:	2100      	movs	r1, #0
 800c0f2:	46da      	mov	sl, fp
 800c0f4:	2212      	movs	r2, #18
 800c0f6:	9109      	str	r1, [sp, #36]	@ 0x24
 800c0f8:	e7da      	b.n	800c0b0 <_dtoa_r+0x230>
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	9208      	str	r2, [sp, #32]
 800c0fe:	e7f5      	b.n	800c0ec <_dtoa_r+0x26c>
 800c100:	f04f 0b01 	mov.w	fp, #1
 800c104:	46da      	mov	sl, fp
 800c106:	465a      	mov	r2, fp
 800c108:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c10c:	e7d0      	b.n	800c0b0 <_dtoa_r+0x230>
 800c10e:	3101      	adds	r1, #1
 800c110:	0040      	lsls	r0, r0, #1
 800c112:	e7d1      	b.n	800c0b8 <_dtoa_r+0x238>
 800c114:	f3af 8000 	nop.w
 800c118:	636f4361 	.word	0x636f4361
 800c11c:	3fd287a7 	.word	0x3fd287a7
 800c120:	8b60c8b3 	.word	0x8b60c8b3
 800c124:	3fc68a28 	.word	0x3fc68a28
 800c128:	509f79fb 	.word	0x509f79fb
 800c12c:	3fd34413 	.word	0x3fd34413
 800c130:	0800da51 	.word	0x0800da51
 800c134:	0800da68 	.word	0x0800da68
 800c138:	7ff00000 	.word	0x7ff00000
 800c13c:	0800da4d 	.word	0x0800da4d
 800c140:	0800da21 	.word	0x0800da21
 800c144:	0800da20 	.word	0x0800da20
 800c148:	0800dbb8 	.word	0x0800dbb8
 800c14c:	0800dac0 	.word	0x0800dac0
 800c150:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800c154:	f1ba 0f0e 	cmp.w	sl, #14
 800c158:	6010      	str	r0, [r2, #0]
 800c15a:	d86e      	bhi.n	800c23a <_dtoa_r+0x3ba>
 800c15c:	2c00      	cmp	r4, #0
 800c15e:	d06c      	beq.n	800c23a <_dtoa_r+0x3ba>
 800c160:	f1b8 0f00 	cmp.w	r8, #0
 800c164:	f340 80b4 	ble.w	800c2d0 <_dtoa_r+0x450>
 800c168:	4ac8      	ldr	r2, [pc, #800]	@ (800c48c <_dtoa_r+0x60c>)
 800c16a:	f008 010f 	and.w	r1, r8, #15
 800c16e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c172:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c176:	ed92 7b00 	vldr	d7, [r2]
 800c17a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800c17e:	f000 809b 	beq.w	800c2b8 <_dtoa_r+0x438>
 800c182:	4ac3      	ldr	r2, [pc, #780]	@ (800c490 <_dtoa_r+0x610>)
 800c184:	ed92 6b08 	vldr	d6, [r2, #32]
 800c188:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c18c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c190:	f001 010f 	and.w	r1, r1, #15
 800c194:	2203      	movs	r2, #3
 800c196:	48be      	ldr	r0, [pc, #760]	@ (800c490 <_dtoa_r+0x610>)
 800c198:	2900      	cmp	r1, #0
 800c19a:	f040 808f 	bne.w	800c2bc <_dtoa_r+0x43c>
 800c19e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c1a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c1a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c1aa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c1ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1b0:	2900      	cmp	r1, #0
 800c1b2:	f000 80b3 	beq.w	800c31c <_dtoa_r+0x49c>
 800c1b6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c1ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1c2:	f140 80ab 	bpl.w	800c31c <_dtoa_r+0x49c>
 800c1c6:	f1ba 0f00 	cmp.w	sl, #0
 800c1ca:	f000 80a7 	beq.w	800c31c <_dtoa_r+0x49c>
 800c1ce:	f1bb 0f00 	cmp.w	fp, #0
 800c1d2:	dd30      	ble.n	800c236 <_dtoa_r+0x3b6>
 800c1d4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800c1d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c1dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c1e0:	f108 31ff 	add.w	r1, r8, #4294967295
 800c1e4:	9105      	str	r1, [sp, #20]
 800c1e6:	3201      	adds	r2, #1
 800c1e8:	465c      	mov	r4, fp
 800c1ea:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c1ee:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800c1f2:	ee07 2a90 	vmov	s15, r2
 800c1f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c1fa:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c1fe:	ee15 2a90 	vmov	r2, s11
 800c202:	ec51 0b15 	vmov	r0, r1, d5
 800c206:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800c20a:	2c00      	cmp	r4, #0
 800c20c:	f040 808a 	bne.w	800c324 <_dtoa_r+0x4a4>
 800c210:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c214:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c218:	ec41 0b17 	vmov	d7, r0, r1
 800c21c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c224:	f300 826a 	bgt.w	800c6fc <_dtoa_r+0x87c>
 800c228:	eeb1 7b47 	vneg.f64	d7, d7
 800c22c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c234:	d423      	bmi.n	800c27e <_dtoa_r+0x3fe>
 800c236:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c23a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c23c:	2a00      	cmp	r2, #0
 800c23e:	f2c0 8129 	blt.w	800c494 <_dtoa_r+0x614>
 800c242:	f1b8 0f0e 	cmp.w	r8, #14
 800c246:	f300 8125 	bgt.w	800c494 <_dtoa_r+0x614>
 800c24a:	4b90      	ldr	r3, [pc, #576]	@ (800c48c <_dtoa_r+0x60c>)
 800c24c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c250:	ed93 6b00 	vldr	d6, [r3]
 800c254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c256:	2b00      	cmp	r3, #0
 800c258:	f280 80c8 	bge.w	800c3ec <_dtoa_r+0x56c>
 800c25c:	f1ba 0f00 	cmp.w	sl, #0
 800c260:	f300 80c4 	bgt.w	800c3ec <_dtoa_r+0x56c>
 800c264:	d10b      	bne.n	800c27e <_dtoa_r+0x3fe>
 800c266:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c26a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c26e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c272:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c27a:	f2c0 823c 	blt.w	800c6f6 <_dtoa_r+0x876>
 800c27e:	2400      	movs	r4, #0
 800c280:	4625      	mov	r5, r4
 800c282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c284:	43db      	mvns	r3, r3
 800c286:	9305      	str	r3, [sp, #20]
 800c288:	463e      	mov	r6, r7
 800c28a:	f04f 0800 	mov.w	r8, #0
 800c28e:	4621      	mov	r1, r4
 800c290:	4648      	mov	r0, r9
 800c292:	f000 fc93 	bl	800cbbc <_Bfree>
 800c296:	2d00      	cmp	r5, #0
 800c298:	f000 80a2 	beq.w	800c3e0 <_dtoa_r+0x560>
 800c29c:	f1b8 0f00 	cmp.w	r8, #0
 800c2a0:	d005      	beq.n	800c2ae <_dtoa_r+0x42e>
 800c2a2:	45a8      	cmp	r8, r5
 800c2a4:	d003      	beq.n	800c2ae <_dtoa_r+0x42e>
 800c2a6:	4641      	mov	r1, r8
 800c2a8:	4648      	mov	r0, r9
 800c2aa:	f000 fc87 	bl	800cbbc <_Bfree>
 800c2ae:	4629      	mov	r1, r5
 800c2b0:	4648      	mov	r0, r9
 800c2b2:	f000 fc83 	bl	800cbbc <_Bfree>
 800c2b6:	e093      	b.n	800c3e0 <_dtoa_r+0x560>
 800c2b8:	2202      	movs	r2, #2
 800c2ba:	e76c      	b.n	800c196 <_dtoa_r+0x316>
 800c2bc:	07cc      	lsls	r4, r1, #31
 800c2be:	d504      	bpl.n	800c2ca <_dtoa_r+0x44a>
 800c2c0:	ed90 6b00 	vldr	d6, [r0]
 800c2c4:	3201      	adds	r2, #1
 800c2c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c2ca:	1049      	asrs	r1, r1, #1
 800c2cc:	3008      	adds	r0, #8
 800c2ce:	e763      	b.n	800c198 <_dtoa_r+0x318>
 800c2d0:	d022      	beq.n	800c318 <_dtoa_r+0x498>
 800c2d2:	f1c8 0100 	rsb	r1, r8, #0
 800c2d6:	4a6d      	ldr	r2, [pc, #436]	@ (800c48c <_dtoa_r+0x60c>)
 800c2d8:	f001 000f 	and.w	r0, r1, #15
 800c2dc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c2e0:	ed92 7b00 	vldr	d7, [r2]
 800c2e4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c2e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c2ec:	4868      	ldr	r0, [pc, #416]	@ (800c490 <_dtoa_r+0x610>)
 800c2ee:	1109      	asrs	r1, r1, #4
 800c2f0:	2400      	movs	r4, #0
 800c2f2:	2202      	movs	r2, #2
 800c2f4:	b929      	cbnz	r1, 800c302 <_dtoa_r+0x482>
 800c2f6:	2c00      	cmp	r4, #0
 800c2f8:	f43f af57 	beq.w	800c1aa <_dtoa_r+0x32a>
 800c2fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c300:	e753      	b.n	800c1aa <_dtoa_r+0x32a>
 800c302:	07ce      	lsls	r6, r1, #31
 800c304:	d505      	bpl.n	800c312 <_dtoa_r+0x492>
 800c306:	ed90 6b00 	vldr	d6, [r0]
 800c30a:	3201      	adds	r2, #1
 800c30c:	2401      	movs	r4, #1
 800c30e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c312:	1049      	asrs	r1, r1, #1
 800c314:	3008      	adds	r0, #8
 800c316:	e7ed      	b.n	800c2f4 <_dtoa_r+0x474>
 800c318:	2202      	movs	r2, #2
 800c31a:	e746      	b.n	800c1aa <_dtoa_r+0x32a>
 800c31c:	f8cd 8014 	str.w	r8, [sp, #20]
 800c320:	4654      	mov	r4, sl
 800c322:	e762      	b.n	800c1ea <_dtoa_r+0x36a>
 800c324:	4a59      	ldr	r2, [pc, #356]	@ (800c48c <_dtoa_r+0x60c>)
 800c326:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c32a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c32e:	9a08      	ldr	r2, [sp, #32]
 800c330:	ec41 0b17 	vmov	d7, r0, r1
 800c334:	443c      	add	r4, r7
 800c336:	b34a      	cbz	r2, 800c38c <_dtoa_r+0x50c>
 800c338:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800c33c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800c340:	463e      	mov	r6, r7
 800c342:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c346:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c34a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c34e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c352:	ee14 2a90 	vmov	r2, s9
 800c356:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c35a:	3230      	adds	r2, #48	@ 0x30
 800c35c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c360:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c368:	f806 2b01 	strb.w	r2, [r6], #1
 800c36c:	d438      	bmi.n	800c3e0 <_dtoa_r+0x560>
 800c36e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c372:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c37a:	d46e      	bmi.n	800c45a <_dtoa_r+0x5da>
 800c37c:	42a6      	cmp	r6, r4
 800c37e:	f43f af5a 	beq.w	800c236 <_dtoa_r+0x3b6>
 800c382:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c386:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c38a:	e7e0      	b.n	800c34e <_dtoa_r+0x4ce>
 800c38c:	4621      	mov	r1, r4
 800c38e:	463e      	mov	r6, r7
 800c390:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c394:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c398:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c39c:	ee14 2a90 	vmov	r2, s9
 800c3a0:	3230      	adds	r2, #48	@ 0x30
 800c3a2:	f806 2b01 	strb.w	r2, [r6], #1
 800c3a6:	42a6      	cmp	r6, r4
 800c3a8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c3ac:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c3b0:	d119      	bne.n	800c3e6 <_dtoa_r+0x566>
 800c3b2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800c3b6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c3ba:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3c2:	dc4a      	bgt.n	800c45a <_dtoa_r+0x5da>
 800c3c4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c3c8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d0:	f57f af31 	bpl.w	800c236 <_dtoa_r+0x3b6>
 800c3d4:	460e      	mov	r6, r1
 800c3d6:	3901      	subs	r1, #1
 800c3d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c3dc:	2b30      	cmp	r3, #48	@ 0x30
 800c3de:	d0f9      	beq.n	800c3d4 <_dtoa_r+0x554>
 800c3e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c3e4:	e027      	b.n	800c436 <_dtoa_r+0x5b6>
 800c3e6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c3ea:	e7d5      	b.n	800c398 <_dtoa_r+0x518>
 800c3ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c3f0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800c3f4:	463e      	mov	r6, r7
 800c3f6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c3fa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c3fe:	ee15 3a10 	vmov	r3, s10
 800c402:	3330      	adds	r3, #48	@ 0x30
 800c404:	f806 3b01 	strb.w	r3, [r6], #1
 800c408:	1bf3      	subs	r3, r6, r7
 800c40a:	459a      	cmp	sl, r3
 800c40c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c410:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c414:	d132      	bne.n	800c47c <_dtoa_r+0x5fc>
 800c416:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c41a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c422:	dc18      	bgt.n	800c456 <_dtoa_r+0x5d6>
 800c424:	eeb4 7b46 	vcmp.f64	d7, d6
 800c428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c42c:	d103      	bne.n	800c436 <_dtoa_r+0x5b6>
 800c42e:	ee15 3a10 	vmov	r3, s10
 800c432:	07db      	lsls	r3, r3, #31
 800c434:	d40f      	bmi.n	800c456 <_dtoa_r+0x5d6>
 800c436:	9901      	ldr	r1, [sp, #4]
 800c438:	4648      	mov	r0, r9
 800c43a:	f000 fbbf 	bl	800cbbc <_Bfree>
 800c43e:	2300      	movs	r3, #0
 800c440:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c442:	7033      	strb	r3, [r6, #0]
 800c444:	f108 0301 	add.w	r3, r8, #1
 800c448:	6013      	str	r3, [r2, #0]
 800c44a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f000 824b 	beq.w	800c8e8 <_dtoa_r+0xa68>
 800c452:	601e      	str	r6, [r3, #0]
 800c454:	e248      	b.n	800c8e8 <_dtoa_r+0xa68>
 800c456:	f8cd 8014 	str.w	r8, [sp, #20]
 800c45a:	4633      	mov	r3, r6
 800c45c:	461e      	mov	r6, r3
 800c45e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c462:	2a39      	cmp	r2, #57	@ 0x39
 800c464:	d106      	bne.n	800c474 <_dtoa_r+0x5f4>
 800c466:	429f      	cmp	r7, r3
 800c468:	d1f8      	bne.n	800c45c <_dtoa_r+0x5dc>
 800c46a:	9a05      	ldr	r2, [sp, #20]
 800c46c:	3201      	adds	r2, #1
 800c46e:	9205      	str	r2, [sp, #20]
 800c470:	2230      	movs	r2, #48	@ 0x30
 800c472:	703a      	strb	r2, [r7, #0]
 800c474:	781a      	ldrb	r2, [r3, #0]
 800c476:	3201      	adds	r2, #1
 800c478:	701a      	strb	r2, [r3, #0]
 800c47a:	e7b1      	b.n	800c3e0 <_dtoa_r+0x560>
 800c47c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c480:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c488:	d1b5      	bne.n	800c3f6 <_dtoa_r+0x576>
 800c48a:	e7d4      	b.n	800c436 <_dtoa_r+0x5b6>
 800c48c:	0800dbb8 	.word	0x0800dbb8
 800c490:	0800db90 	.word	0x0800db90
 800c494:	9908      	ldr	r1, [sp, #32]
 800c496:	2900      	cmp	r1, #0
 800c498:	f000 80e9 	beq.w	800c66e <_dtoa_r+0x7ee>
 800c49c:	9907      	ldr	r1, [sp, #28]
 800c49e:	2901      	cmp	r1, #1
 800c4a0:	f300 80cb 	bgt.w	800c63a <_dtoa_r+0x7ba>
 800c4a4:	2d00      	cmp	r5, #0
 800c4a6:	f000 80c4 	beq.w	800c632 <_dtoa_r+0x7b2>
 800c4aa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c4ae:	9e04      	ldr	r6, [sp, #16]
 800c4b0:	461c      	mov	r4, r3
 800c4b2:	9305      	str	r3, [sp, #20]
 800c4b4:	9b04      	ldr	r3, [sp, #16]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	9304      	str	r3, [sp, #16]
 800c4ba:	9b06      	ldr	r3, [sp, #24]
 800c4bc:	2101      	movs	r1, #1
 800c4be:	4413      	add	r3, r2
 800c4c0:	4648      	mov	r0, r9
 800c4c2:	9306      	str	r3, [sp, #24]
 800c4c4:	f000 fc2e 	bl	800cd24 <__i2b>
 800c4c8:	9b05      	ldr	r3, [sp, #20]
 800c4ca:	4605      	mov	r5, r0
 800c4cc:	b166      	cbz	r6, 800c4e8 <_dtoa_r+0x668>
 800c4ce:	9a06      	ldr	r2, [sp, #24]
 800c4d0:	2a00      	cmp	r2, #0
 800c4d2:	dd09      	ble.n	800c4e8 <_dtoa_r+0x668>
 800c4d4:	42b2      	cmp	r2, r6
 800c4d6:	9904      	ldr	r1, [sp, #16]
 800c4d8:	bfa8      	it	ge
 800c4da:	4632      	movge	r2, r6
 800c4dc:	1a89      	subs	r1, r1, r2
 800c4de:	9104      	str	r1, [sp, #16]
 800c4e0:	9906      	ldr	r1, [sp, #24]
 800c4e2:	1ab6      	subs	r6, r6, r2
 800c4e4:	1a8a      	subs	r2, r1, r2
 800c4e6:	9206      	str	r2, [sp, #24]
 800c4e8:	b30b      	cbz	r3, 800c52e <_dtoa_r+0x6ae>
 800c4ea:	9a08      	ldr	r2, [sp, #32]
 800c4ec:	2a00      	cmp	r2, #0
 800c4ee:	f000 80c5 	beq.w	800c67c <_dtoa_r+0x7fc>
 800c4f2:	2c00      	cmp	r4, #0
 800c4f4:	f000 80bf 	beq.w	800c676 <_dtoa_r+0x7f6>
 800c4f8:	4629      	mov	r1, r5
 800c4fa:	4622      	mov	r2, r4
 800c4fc:	4648      	mov	r0, r9
 800c4fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c500:	f000 fcc8 	bl	800ce94 <__pow5mult>
 800c504:	9a01      	ldr	r2, [sp, #4]
 800c506:	4601      	mov	r1, r0
 800c508:	4605      	mov	r5, r0
 800c50a:	4648      	mov	r0, r9
 800c50c:	f000 fc20 	bl	800cd50 <__multiply>
 800c510:	9901      	ldr	r1, [sp, #4]
 800c512:	9005      	str	r0, [sp, #20]
 800c514:	4648      	mov	r0, r9
 800c516:	f000 fb51 	bl	800cbbc <_Bfree>
 800c51a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c51c:	1b1b      	subs	r3, r3, r4
 800c51e:	f000 80b0 	beq.w	800c682 <_dtoa_r+0x802>
 800c522:	9905      	ldr	r1, [sp, #20]
 800c524:	461a      	mov	r2, r3
 800c526:	4648      	mov	r0, r9
 800c528:	f000 fcb4 	bl	800ce94 <__pow5mult>
 800c52c:	9001      	str	r0, [sp, #4]
 800c52e:	2101      	movs	r1, #1
 800c530:	4648      	mov	r0, r9
 800c532:	f000 fbf7 	bl	800cd24 <__i2b>
 800c536:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c538:	4604      	mov	r4, r0
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f000 81da 	beq.w	800c8f4 <_dtoa_r+0xa74>
 800c540:	461a      	mov	r2, r3
 800c542:	4601      	mov	r1, r0
 800c544:	4648      	mov	r0, r9
 800c546:	f000 fca5 	bl	800ce94 <__pow5mult>
 800c54a:	9b07      	ldr	r3, [sp, #28]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	4604      	mov	r4, r0
 800c550:	f300 80a0 	bgt.w	800c694 <_dtoa_r+0x814>
 800c554:	9b02      	ldr	r3, [sp, #8]
 800c556:	2b00      	cmp	r3, #0
 800c558:	f040 8096 	bne.w	800c688 <_dtoa_r+0x808>
 800c55c:	9b03      	ldr	r3, [sp, #12]
 800c55e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c562:	2a00      	cmp	r2, #0
 800c564:	f040 8092 	bne.w	800c68c <_dtoa_r+0x80c>
 800c568:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c56c:	0d12      	lsrs	r2, r2, #20
 800c56e:	0512      	lsls	r2, r2, #20
 800c570:	2a00      	cmp	r2, #0
 800c572:	f000 808d 	beq.w	800c690 <_dtoa_r+0x810>
 800c576:	9b04      	ldr	r3, [sp, #16]
 800c578:	3301      	adds	r3, #1
 800c57a:	9304      	str	r3, [sp, #16]
 800c57c:	9b06      	ldr	r3, [sp, #24]
 800c57e:	3301      	adds	r3, #1
 800c580:	9306      	str	r3, [sp, #24]
 800c582:	2301      	movs	r3, #1
 800c584:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c586:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f000 81b9 	beq.w	800c900 <_dtoa_r+0xa80>
 800c58e:	6922      	ldr	r2, [r4, #16]
 800c590:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c594:	6910      	ldr	r0, [r2, #16]
 800c596:	f000 fb79 	bl	800cc8c <__hi0bits>
 800c59a:	f1c0 0020 	rsb	r0, r0, #32
 800c59e:	9b06      	ldr	r3, [sp, #24]
 800c5a0:	4418      	add	r0, r3
 800c5a2:	f010 001f 	ands.w	r0, r0, #31
 800c5a6:	f000 8081 	beq.w	800c6ac <_dtoa_r+0x82c>
 800c5aa:	f1c0 0220 	rsb	r2, r0, #32
 800c5ae:	2a04      	cmp	r2, #4
 800c5b0:	dd73      	ble.n	800c69a <_dtoa_r+0x81a>
 800c5b2:	9b04      	ldr	r3, [sp, #16]
 800c5b4:	f1c0 001c 	rsb	r0, r0, #28
 800c5b8:	4403      	add	r3, r0
 800c5ba:	9304      	str	r3, [sp, #16]
 800c5bc:	9b06      	ldr	r3, [sp, #24]
 800c5be:	4406      	add	r6, r0
 800c5c0:	4403      	add	r3, r0
 800c5c2:	9306      	str	r3, [sp, #24]
 800c5c4:	9b04      	ldr	r3, [sp, #16]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	dd05      	ble.n	800c5d6 <_dtoa_r+0x756>
 800c5ca:	9901      	ldr	r1, [sp, #4]
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	4648      	mov	r0, r9
 800c5d0:	f000 fcba 	bl	800cf48 <__lshift>
 800c5d4:	9001      	str	r0, [sp, #4]
 800c5d6:	9b06      	ldr	r3, [sp, #24]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	dd05      	ble.n	800c5e8 <_dtoa_r+0x768>
 800c5dc:	4621      	mov	r1, r4
 800c5de:	461a      	mov	r2, r3
 800c5e0:	4648      	mov	r0, r9
 800c5e2:	f000 fcb1 	bl	800cf48 <__lshift>
 800c5e6:	4604      	mov	r4, r0
 800c5e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d060      	beq.n	800c6b0 <_dtoa_r+0x830>
 800c5ee:	9801      	ldr	r0, [sp, #4]
 800c5f0:	4621      	mov	r1, r4
 800c5f2:	f000 fd15 	bl	800d020 <__mcmp>
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	da5a      	bge.n	800c6b0 <_dtoa_r+0x830>
 800c5fa:	f108 33ff 	add.w	r3, r8, #4294967295
 800c5fe:	9305      	str	r3, [sp, #20]
 800c600:	9901      	ldr	r1, [sp, #4]
 800c602:	2300      	movs	r3, #0
 800c604:	220a      	movs	r2, #10
 800c606:	4648      	mov	r0, r9
 800c608:	f000 fafa 	bl	800cc00 <__multadd>
 800c60c:	9b08      	ldr	r3, [sp, #32]
 800c60e:	9001      	str	r0, [sp, #4]
 800c610:	2b00      	cmp	r3, #0
 800c612:	f000 8177 	beq.w	800c904 <_dtoa_r+0xa84>
 800c616:	4629      	mov	r1, r5
 800c618:	2300      	movs	r3, #0
 800c61a:	220a      	movs	r2, #10
 800c61c:	4648      	mov	r0, r9
 800c61e:	f000 faef 	bl	800cc00 <__multadd>
 800c622:	f1bb 0f00 	cmp.w	fp, #0
 800c626:	4605      	mov	r5, r0
 800c628:	dc6e      	bgt.n	800c708 <_dtoa_r+0x888>
 800c62a:	9b07      	ldr	r3, [sp, #28]
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	dc48      	bgt.n	800c6c2 <_dtoa_r+0x842>
 800c630:	e06a      	b.n	800c708 <_dtoa_r+0x888>
 800c632:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c634:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c638:	e739      	b.n	800c4ae <_dtoa_r+0x62e>
 800c63a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800c63e:	42a3      	cmp	r3, r4
 800c640:	db07      	blt.n	800c652 <_dtoa_r+0x7d2>
 800c642:	f1ba 0f00 	cmp.w	sl, #0
 800c646:	eba3 0404 	sub.w	r4, r3, r4
 800c64a:	db0b      	blt.n	800c664 <_dtoa_r+0x7e4>
 800c64c:	9e04      	ldr	r6, [sp, #16]
 800c64e:	4652      	mov	r2, sl
 800c650:	e72f      	b.n	800c4b2 <_dtoa_r+0x632>
 800c652:	1ae2      	subs	r2, r4, r3
 800c654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c656:	9e04      	ldr	r6, [sp, #16]
 800c658:	4413      	add	r3, r2
 800c65a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c65c:	4652      	mov	r2, sl
 800c65e:	4623      	mov	r3, r4
 800c660:	2400      	movs	r4, #0
 800c662:	e726      	b.n	800c4b2 <_dtoa_r+0x632>
 800c664:	9a04      	ldr	r2, [sp, #16]
 800c666:	eba2 060a 	sub.w	r6, r2, sl
 800c66a:	2200      	movs	r2, #0
 800c66c:	e721      	b.n	800c4b2 <_dtoa_r+0x632>
 800c66e:	9e04      	ldr	r6, [sp, #16]
 800c670:	9d08      	ldr	r5, [sp, #32]
 800c672:	461c      	mov	r4, r3
 800c674:	e72a      	b.n	800c4cc <_dtoa_r+0x64c>
 800c676:	9a01      	ldr	r2, [sp, #4]
 800c678:	9205      	str	r2, [sp, #20]
 800c67a:	e752      	b.n	800c522 <_dtoa_r+0x6a2>
 800c67c:	9901      	ldr	r1, [sp, #4]
 800c67e:	461a      	mov	r2, r3
 800c680:	e751      	b.n	800c526 <_dtoa_r+0x6a6>
 800c682:	9b05      	ldr	r3, [sp, #20]
 800c684:	9301      	str	r3, [sp, #4]
 800c686:	e752      	b.n	800c52e <_dtoa_r+0x6ae>
 800c688:	2300      	movs	r3, #0
 800c68a:	e77b      	b.n	800c584 <_dtoa_r+0x704>
 800c68c:	9b02      	ldr	r3, [sp, #8]
 800c68e:	e779      	b.n	800c584 <_dtoa_r+0x704>
 800c690:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c692:	e778      	b.n	800c586 <_dtoa_r+0x706>
 800c694:	2300      	movs	r3, #0
 800c696:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c698:	e779      	b.n	800c58e <_dtoa_r+0x70e>
 800c69a:	d093      	beq.n	800c5c4 <_dtoa_r+0x744>
 800c69c:	9b04      	ldr	r3, [sp, #16]
 800c69e:	321c      	adds	r2, #28
 800c6a0:	4413      	add	r3, r2
 800c6a2:	9304      	str	r3, [sp, #16]
 800c6a4:	9b06      	ldr	r3, [sp, #24]
 800c6a6:	4416      	add	r6, r2
 800c6a8:	4413      	add	r3, r2
 800c6aa:	e78a      	b.n	800c5c2 <_dtoa_r+0x742>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	e7f5      	b.n	800c69c <_dtoa_r+0x81c>
 800c6b0:	f1ba 0f00 	cmp.w	sl, #0
 800c6b4:	f8cd 8014 	str.w	r8, [sp, #20]
 800c6b8:	46d3      	mov	fp, sl
 800c6ba:	dc21      	bgt.n	800c700 <_dtoa_r+0x880>
 800c6bc:	9b07      	ldr	r3, [sp, #28]
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	dd1e      	ble.n	800c700 <_dtoa_r+0x880>
 800c6c2:	f1bb 0f00 	cmp.w	fp, #0
 800c6c6:	f47f addc 	bne.w	800c282 <_dtoa_r+0x402>
 800c6ca:	4621      	mov	r1, r4
 800c6cc:	465b      	mov	r3, fp
 800c6ce:	2205      	movs	r2, #5
 800c6d0:	4648      	mov	r0, r9
 800c6d2:	f000 fa95 	bl	800cc00 <__multadd>
 800c6d6:	4601      	mov	r1, r0
 800c6d8:	4604      	mov	r4, r0
 800c6da:	9801      	ldr	r0, [sp, #4]
 800c6dc:	f000 fca0 	bl	800d020 <__mcmp>
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	f77f adce 	ble.w	800c282 <_dtoa_r+0x402>
 800c6e6:	463e      	mov	r6, r7
 800c6e8:	2331      	movs	r3, #49	@ 0x31
 800c6ea:	f806 3b01 	strb.w	r3, [r6], #1
 800c6ee:	9b05      	ldr	r3, [sp, #20]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	9305      	str	r3, [sp, #20]
 800c6f4:	e5c9      	b.n	800c28a <_dtoa_r+0x40a>
 800c6f6:	f8cd 8014 	str.w	r8, [sp, #20]
 800c6fa:	4654      	mov	r4, sl
 800c6fc:	4625      	mov	r5, r4
 800c6fe:	e7f2      	b.n	800c6e6 <_dtoa_r+0x866>
 800c700:	9b08      	ldr	r3, [sp, #32]
 800c702:	2b00      	cmp	r3, #0
 800c704:	f000 8102 	beq.w	800c90c <_dtoa_r+0xa8c>
 800c708:	2e00      	cmp	r6, #0
 800c70a:	dd05      	ble.n	800c718 <_dtoa_r+0x898>
 800c70c:	4629      	mov	r1, r5
 800c70e:	4632      	mov	r2, r6
 800c710:	4648      	mov	r0, r9
 800c712:	f000 fc19 	bl	800cf48 <__lshift>
 800c716:	4605      	mov	r5, r0
 800c718:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d058      	beq.n	800c7d0 <_dtoa_r+0x950>
 800c71e:	6869      	ldr	r1, [r5, #4]
 800c720:	4648      	mov	r0, r9
 800c722:	f000 fa0b 	bl	800cb3c <_Balloc>
 800c726:	4606      	mov	r6, r0
 800c728:	b928      	cbnz	r0, 800c736 <_dtoa_r+0x8b6>
 800c72a:	4b82      	ldr	r3, [pc, #520]	@ (800c934 <_dtoa_r+0xab4>)
 800c72c:	4602      	mov	r2, r0
 800c72e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c732:	f7ff bbbe 	b.w	800beb2 <_dtoa_r+0x32>
 800c736:	692a      	ldr	r2, [r5, #16]
 800c738:	3202      	adds	r2, #2
 800c73a:	0092      	lsls	r2, r2, #2
 800c73c:	f105 010c 	add.w	r1, r5, #12
 800c740:	300c      	adds	r0, #12
 800c742:	f7ff fb04 	bl	800bd4e <memcpy>
 800c746:	2201      	movs	r2, #1
 800c748:	4631      	mov	r1, r6
 800c74a:	4648      	mov	r0, r9
 800c74c:	f000 fbfc 	bl	800cf48 <__lshift>
 800c750:	1c7b      	adds	r3, r7, #1
 800c752:	9304      	str	r3, [sp, #16]
 800c754:	eb07 030b 	add.w	r3, r7, fp
 800c758:	9309      	str	r3, [sp, #36]	@ 0x24
 800c75a:	9b02      	ldr	r3, [sp, #8]
 800c75c:	f003 0301 	and.w	r3, r3, #1
 800c760:	46a8      	mov	r8, r5
 800c762:	9308      	str	r3, [sp, #32]
 800c764:	4605      	mov	r5, r0
 800c766:	9b04      	ldr	r3, [sp, #16]
 800c768:	9801      	ldr	r0, [sp, #4]
 800c76a:	4621      	mov	r1, r4
 800c76c:	f103 3bff 	add.w	fp, r3, #4294967295
 800c770:	f7ff fafb 	bl	800bd6a <quorem>
 800c774:	4641      	mov	r1, r8
 800c776:	9002      	str	r0, [sp, #8]
 800c778:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c77c:	9801      	ldr	r0, [sp, #4]
 800c77e:	f000 fc4f 	bl	800d020 <__mcmp>
 800c782:	462a      	mov	r2, r5
 800c784:	9006      	str	r0, [sp, #24]
 800c786:	4621      	mov	r1, r4
 800c788:	4648      	mov	r0, r9
 800c78a:	f000 fc65 	bl	800d058 <__mdiff>
 800c78e:	68c2      	ldr	r2, [r0, #12]
 800c790:	4606      	mov	r6, r0
 800c792:	b9fa      	cbnz	r2, 800c7d4 <_dtoa_r+0x954>
 800c794:	4601      	mov	r1, r0
 800c796:	9801      	ldr	r0, [sp, #4]
 800c798:	f000 fc42 	bl	800d020 <__mcmp>
 800c79c:	4602      	mov	r2, r0
 800c79e:	4631      	mov	r1, r6
 800c7a0:	4648      	mov	r0, r9
 800c7a2:	920a      	str	r2, [sp, #40]	@ 0x28
 800c7a4:	f000 fa0a 	bl	800cbbc <_Bfree>
 800c7a8:	9b07      	ldr	r3, [sp, #28]
 800c7aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c7ac:	9e04      	ldr	r6, [sp, #16]
 800c7ae:	ea42 0103 	orr.w	r1, r2, r3
 800c7b2:	9b08      	ldr	r3, [sp, #32]
 800c7b4:	4319      	orrs	r1, r3
 800c7b6:	d10f      	bne.n	800c7d8 <_dtoa_r+0x958>
 800c7b8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c7bc:	d028      	beq.n	800c810 <_dtoa_r+0x990>
 800c7be:	9b06      	ldr	r3, [sp, #24]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	dd02      	ble.n	800c7ca <_dtoa_r+0x94a>
 800c7c4:	9b02      	ldr	r3, [sp, #8]
 800c7c6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c7ca:	f88b a000 	strb.w	sl, [fp]
 800c7ce:	e55e      	b.n	800c28e <_dtoa_r+0x40e>
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	e7bd      	b.n	800c750 <_dtoa_r+0x8d0>
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	e7e2      	b.n	800c79e <_dtoa_r+0x91e>
 800c7d8:	9b06      	ldr	r3, [sp, #24]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	db04      	blt.n	800c7e8 <_dtoa_r+0x968>
 800c7de:	9907      	ldr	r1, [sp, #28]
 800c7e0:	430b      	orrs	r3, r1
 800c7e2:	9908      	ldr	r1, [sp, #32]
 800c7e4:	430b      	orrs	r3, r1
 800c7e6:	d120      	bne.n	800c82a <_dtoa_r+0x9aa>
 800c7e8:	2a00      	cmp	r2, #0
 800c7ea:	ddee      	ble.n	800c7ca <_dtoa_r+0x94a>
 800c7ec:	9901      	ldr	r1, [sp, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	4648      	mov	r0, r9
 800c7f2:	f000 fba9 	bl	800cf48 <__lshift>
 800c7f6:	4621      	mov	r1, r4
 800c7f8:	9001      	str	r0, [sp, #4]
 800c7fa:	f000 fc11 	bl	800d020 <__mcmp>
 800c7fe:	2800      	cmp	r0, #0
 800c800:	dc03      	bgt.n	800c80a <_dtoa_r+0x98a>
 800c802:	d1e2      	bne.n	800c7ca <_dtoa_r+0x94a>
 800c804:	f01a 0f01 	tst.w	sl, #1
 800c808:	d0df      	beq.n	800c7ca <_dtoa_r+0x94a>
 800c80a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c80e:	d1d9      	bne.n	800c7c4 <_dtoa_r+0x944>
 800c810:	2339      	movs	r3, #57	@ 0x39
 800c812:	f88b 3000 	strb.w	r3, [fp]
 800c816:	4633      	mov	r3, r6
 800c818:	461e      	mov	r6, r3
 800c81a:	3b01      	subs	r3, #1
 800c81c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c820:	2a39      	cmp	r2, #57	@ 0x39
 800c822:	d052      	beq.n	800c8ca <_dtoa_r+0xa4a>
 800c824:	3201      	adds	r2, #1
 800c826:	701a      	strb	r2, [r3, #0]
 800c828:	e531      	b.n	800c28e <_dtoa_r+0x40e>
 800c82a:	2a00      	cmp	r2, #0
 800c82c:	dd07      	ble.n	800c83e <_dtoa_r+0x9be>
 800c82e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c832:	d0ed      	beq.n	800c810 <_dtoa_r+0x990>
 800c834:	f10a 0301 	add.w	r3, sl, #1
 800c838:	f88b 3000 	strb.w	r3, [fp]
 800c83c:	e527      	b.n	800c28e <_dtoa_r+0x40e>
 800c83e:	9b04      	ldr	r3, [sp, #16]
 800c840:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c842:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c846:	4293      	cmp	r3, r2
 800c848:	d029      	beq.n	800c89e <_dtoa_r+0xa1e>
 800c84a:	9901      	ldr	r1, [sp, #4]
 800c84c:	2300      	movs	r3, #0
 800c84e:	220a      	movs	r2, #10
 800c850:	4648      	mov	r0, r9
 800c852:	f000 f9d5 	bl	800cc00 <__multadd>
 800c856:	45a8      	cmp	r8, r5
 800c858:	9001      	str	r0, [sp, #4]
 800c85a:	f04f 0300 	mov.w	r3, #0
 800c85e:	f04f 020a 	mov.w	r2, #10
 800c862:	4641      	mov	r1, r8
 800c864:	4648      	mov	r0, r9
 800c866:	d107      	bne.n	800c878 <_dtoa_r+0x9f8>
 800c868:	f000 f9ca 	bl	800cc00 <__multadd>
 800c86c:	4680      	mov	r8, r0
 800c86e:	4605      	mov	r5, r0
 800c870:	9b04      	ldr	r3, [sp, #16]
 800c872:	3301      	adds	r3, #1
 800c874:	9304      	str	r3, [sp, #16]
 800c876:	e776      	b.n	800c766 <_dtoa_r+0x8e6>
 800c878:	f000 f9c2 	bl	800cc00 <__multadd>
 800c87c:	4629      	mov	r1, r5
 800c87e:	4680      	mov	r8, r0
 800c880:	2300      	movs	r3, #0
 800c882:	220a      	movs	r2, #10
 800c884:	4648      	mov	r0, r9
 800c886:	f000 f9bb 	bl	800cc00 <__multadd>
 800c88a:	4605      	mov	r5, r0
 800c88c:	e7f0      	b.n	800c870 <_dtoa_r+0x9f0>
 800c88e:	f1bb 0f00 	cmp.w	fp, #0
 800c892:	bfcc      	ite	gt
 800c894:	465e      	movgt	r6, fp
 800c896:	2601      	movle	r6, #1
 800c898:	443e      	add	r6, r7
 800c89a:	f04f 0800 	mov.w	r8, #0
 800c89e:	9901      	ldr	r1, [sp, #4]
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	4648      	mov	r0, r9
 800c8a4:	f000 fb50 	bl	800cf48 <__lshift>
 800c8a8:	4621      	mov	r1, r4
 800c8aa:	9001      	str	r0, [sp, #4]
 800c8ac:	f000 fbb8 	bl	800d020 <__mcmp>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	dcb0      	bgt.n	800c816 <_dtoa_r+0x996>
 800c8b4:	d102      	bne.n	800c8bc <_dtoa_r+0xa3c>
 800c8b6:	f01a 0f01 	tst.w	sl, #1
 800c8ba:	d1ac      	bne.n	800c816 <_dtoa_r+0x996>
 800c8bc:	4633      	mov	r3, r6
 800c8be:	461e      	mov	r6, r3
 800c8c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8c4:	2a30      	cmp	r2, #48	@ 0x30
 800c8c6:	d0fa      	beq.n	800c8be <_dtoa_r+0xa3e>
 800c8c8:	e4e1      	b.n	800c28e <_dtoa_r+0x40e>
 800c8ca:	429f      	cmp	r7, r3
 800c8cc:	d1a4      	bne.n	800c818 <_dtoa_r+0x998>
 800c8ce:	9b05      	ldr	r3, [sp, #20]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	9305      	str	r3, [sp, #20]
 800c8d4:	2331      	movs	r3, #49	@ 0x31
 800c8d6:	703b      	strb	r3, [r7, #0]
 800c8d8:	e4d9      	b.n	800c28e <_dtoa_r+0x40e>
 800c8da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c8dc:	4f16      	ldr	r7, [pc, #88]	@ (800c938 <_dtoa_r+0xab8>)
 800c8de:	b11b      	cbz	r3, 800c8e8 <_dtoa_r+0xa68>
 800c8e0:	f107 0308 	add.w	r3, r7, #8
 800c8e4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c8e6:	6013      	str	r3, [r2, #0]
 800c8e8:	4638      	mov	r0, r7
 800c8ea:	b011      	add	sp, #68	@ 0x44
 800c8ec:	ecbd 8b02 	vpop	{d8}
 800c8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f4:	9b07      	ldr	r3, [sp, #28]
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	f77f ae2c 	ble.w	800c554 <_dtoa_r+0x6d4>
 800c8fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c900:	2001      	movs	r0, #1
 800c902:	e64c      	b.n	800c59e <_dtoa_r+0x71e>
 800c904:	f1bb 0f00 	cmp.w	fp, #0
 800c908:	f77f aed8 	ble.w	800c6bc <_dtoa_r+0x83c>
 800c90c:	463e      	mov	r6, r7
 800c90e:	9801      	ldr	r0, [sp, #4]
 800c910:	4621      	mov	r1, r4
 800c912:	f7ff fa2a 	bl	800bd6a <quorem>
 800c916:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c91a:	f806 ab01 	strb.w	sl, [r6], #1
 800c91e:	1bf2      	subs	r2, r6, r7
 800c920:	4593      	cmp	fp, r2
 800c922:	ddb4      	ble.n	800c88e <_dtoa_r+0xa0e>
 800c924:	9901      	ldr	r1, [sp, #4]
 800c926:	2300      	movs	r3, #0
 800c928:	220a      	movs	r2, #10
 800c92a:	4648      	mov	r0, r9
 800c92c:	f000 f968 	bl	800cc00 <__multadd>
 800c930:	9001      	str	r0, [sp, #4]
 800c932:	e7ec      	b.n	800c90e <_dtoa_r+0xa8e>
 800c934:	0800dac0 	.word	0x0800dac0
 800c938:	0800da44 	.word	0x0800da44

0800c93c <_free_r>:
 800c93c:	b538      	push	{r3, r4, r5, lr}
 800c93e:	4605      	mov	r5, r0
 800c940:	2900      	cmp	r1, #0
 800c942:	d041      	beq.n	800c9c8 <_free_r+0x8c>
 800c944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c948:	1f0c      	subs	r4, r1, #4
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	bfb8      	it	lt
 800c94e:	18e4      	addlt	r4, r4, r3
 800c950:	f000 f8e8 	bl	800cb24 <__malloc_lock>
 800c954:	4a1d      	ldr	r2, [pc, #116]	@ (800c9cc <_free_r+0x90>)
 800c956:	6813      	ldr	r3, [r2, #0]
 800c958:	b933      	cbnz	r3, 800c968 <_free_r+0x2c>
 800c95a:	6063      	str	r3, [r4, #4]
 800c95c:	6014      	str	r4, [r2, #0]
 800c95e:	4628      	mov	r0, r5
 800c960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c964:	f000 b8e4 	b.w	800cb30 <__malloc_unlock>
 800c968:	42a3      	cmp	r3, r4
 800c96a:	d908      	bls.n	800c97e <_free_r+0x42>
 800c96c:	6820      	ldr	r0, [r4, #0]
 800c96e:	1821      	adds	r1, r4, r0
 800c970:	428b      	cmp	r3, r1
 800c972:	bf01      	itttt	eq
 800c974:	6819      	ldreq	r1, [r3, #0]
 800c976:	685b      	ldreq	r3, [r3, #4]
 800c978:	1809      	addeq	r1, r1, r0
 800c97a:	6021      	streq	r1, [r4, #0]
 800c97c:	e7ed      	b.n	800c95a <_free_r+0x1e>
 800c97e:	461a      	mov	r2, r3
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	b10b      	cbz	r3, 800c988 <_free_r+0x4c>
 800c984:	42a3      	cmp	r3, r4
 800c986:	d9fa      	bls.n	800c97e <_free_r+0x42>
 800c988:	6811      	ldr	r1, [r2, #0]
 800c98a:	1850      	adds	r0, r2, r1
 800c98c:	42a0      	cmp	r0, r4
 800c98e:	d10b      	bne.n	800c9a8 <_free_r+0x6c>
 800c990:	6820      	ldr	r0, [r4, #0]
 800c992:	4401      	add	r1, r0
 800c994:	1850      	adds	r0, r2, r1
 800c996:	4283      	cmp	r3, r0
 800c998:	6011      	str	r1, [r2, #0]
 800c99a:	d1e0      	bne.n	800c95e <_free_r+0x22>
 800c99c:	6818      	ldr	r0, [r3, #0]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	6053      	str	r3, [r2, #4]
 800c9a2:	4408      	add	r0, r1
 800c9a4:	6010      	str	r0, [r2, #0]
 800c9a6:	e7da      	b.n	800c95e <_free_r+0x22>
 800c9a8:	d902      	bls.n	800c9b0 <_free_r+0x74>
 800c9aa:	230c      	movs	r3, #12
 800c9ac:	602b      	str	r3, [r5, #0]
 800c9ae:	e7d6      	b.n	800c95e <_free_r+0x22>
 800c9b0:	6820      	ldr	r0, [r4, #0]
 800c9b2:	1821      	adds	r1, r4, r0
 800c9b4:	428b      	cmp	r3, r1
 800c9b6:	bf04      	itt	eq
 800c9b8:	6819      	ldreq	r1, [r3, #0]
 800c9ba:	685b      	ldreq	r3, [r3, #4]
 800c9bc:	6063      	str	r3, [r4, #4]
 800c9be:	bf04      	itt	eq
 800c9c0:	1809      	addeq	r1, r1, r0
 800c9c2:	6021      	streq	r1, [r4, #0]
 800c9c4:	6054      	str	r4, [r2, #4]
 800c9c6:	e7ca      	b.n	800c95e <_free_r+0x22>
 800c9c8:	bd38      	pop	{r3, r4, r5, pc}
 800c9ca:	bf00      	nop
 800c9cc:	24000a8c 	.word	0x24000a8c

0800c9d0 <malloc>:
 800c9d0:	4b02      	ldr	r3, [pc, #8]	@ (800c9dc <malloc+0xc>)
 800c9d2:	4601      	mov	r1, r0
 800c9d4:	6818      	ldr	r0, [r3, #0]
 800c9d6:	f000 b825 	b.w	800ca24 <_malloc_r>
 800c9da:	bf00      	nop
 800c9dc:	2400001c 	.word	0x2400001c

0800c9e0 <sbrk_aligned>:
 800c9e0:	b570      	push	{r4, r5, r6, lr}
 800c9e2:	4e0f      	ldr	r6, [pc, #60]	@ (800ca20 <sbrk_aligned+0x40>)
 800c9e4:	460c      	mov	r4, r1
 800c9e6:	6831      	ldr	r1, [r6, #0]
 800c9e8:	4605      	mov	r5, r0
 800c9ea:	b911      	cbnz	r1, 800c9f2 <sbrk_aligned+0x12>
 800c9ec:	f000 fccc 	bl	800d388 <_sbrk_r>
 800c9f0:	6030      	str	r0, [r6, #0]
 800c9f2:	4621      	mov	r1, r4
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	f000 fcc7 	bl	800d388 <_sbrk_r>
 800c9fa:	1c43      	adds	r3, r0, #1
 800c9fc:	d103      	bne.n	800ca06 <sbrk_aligned+0x26>
 800c9fe:	f04f 34ff 	mov.w	r4, #4294967295
 800ca02:	4620      	mov	r0, r4
 800ca04:	bd70      	pop	{r4, r5, r6, pc}
 800ca06:	1cc4      	adds	r4, r0, #3
 800ca08:	f024 0403 	bic.w	r4, r4, #3
 800ca0c:	42a0      	cmp	r0, r4
 800ca0e:	d0f8      	beq.n	800ca02 <sbrk_aligned+0x22>
 800ca10:	1a21      	subs	r1, r4, r0
 800ca12:	4628      	mov	r0, r5
 800ca14:	f000 fcb8 	bl	800d388 <_sbrk_r>
 800ca18:	3001      	adds	r0, #1
 800ca1a:	d1f2      	bne.n	800ca02 <sbrk_aligned+0x22>
 800ca1c:	e7ef      	b.n	800c9fe <sbrk_aligned+0x1e>
 800ca1e:	bf00      	nop
 800ca20:	24000a88 	.word	0x24000a88

0800ca24 <_malloc_r>:
 800ca24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca28:	1ccd      	adds	r5, r1, #3
 800ca2a:	f025 0503 	bic.w	r5, r5, #3
 800ca2e:	3508      	adds	r5, #8
 800ca30:	2d0c      	cmp	r5, #12
 800ca32:	bf38      	it	cc
 800ca34:	250c      	movcc	r5, #12
 800ca36:	2d00      	cmp	r5, #0
 800ca38:	4606      	mov	r6, r0
 800ca3a:	db01      	blt.n	800ca40 <_malloc_r+0x1c>
 800ca3c:	42a9      	cmp	r1, r5
 800ca3e:	d904      	bls.n	800ca4a <_malloc_r+0x26>
 800ca40:	230c      	movs	r3, #12
 800ca42:	6033      	str	r3, [r6, #0]
 800ca44:	2000      	movs	r0, #0
 800ca46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cb20 <_malloc_r+0xfc>
 800ca4e:	f000 f869 	bl	800cb24 <__malloc_lock>
 800ca52:	f8d8 3000 	ldr.w	r3, [r8]
 800ca56:	461c      	mov	r4, r3
 800ca58:	bb44      	cbnz	r4, 800caac <_malloc_r+0x88>
 800ca5a:	4629      	mov	r1, r5
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	f7ff ffbf 	bl	800c9e0 <sbrk_aligned>
 800ca62:	1c43      	adds	r3, r0, #1
 800ca64:	4604      	mov	r4, r0
 800ca66:	d158      	bne.n	800cb1a <_malloc_r+0xf6>
 800ca68:	f8d8 4000 	ldr.w	r4, [r8]
 800ca6c:	4627      	mov	r7, r4
 800ca6e:	2f00      	cmp	r7, #0
 800ca70:	d143      	bne.n	800cafa <_malloc_r+0xd6>
 800ca72:	2c00      	cmp	r4, #0
 800ca74:	d04b      	beq.n	800cb0e <_malloc_r+0xea>
 800ca76:	6823      	ldr	r3, [r4, #0]
 800ca78:	4639      	mov	r1, r7
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	eb04 0903 	add.w	r9, r4, r3
 800ca80:	f000 fc82 	bl	800d388 <_sbrk_r>
 800ca84:	4581      	cmp	r9, r0
 800ca86:	d142      	bne.n	800cb0e <_malloc_r+0xea>
 800ca88:	6821      	ldr	r1, [r4, #0]
 800ca8a:	1a6d      	subs	r5, r5, r1
 800ca8c:	4629      	mov	r1, r5
 800ca8e:	4630      	mov	r0, r6
 800ca90:	f7ff ffa6 	bl	800c9e0 <sbrk_aligned>
 800ca94:	3001      	adds	r0, #1
 800ca96:	d03a      	beq.n	800cb0e <_malloc_r+0xea>
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	442b      	add	r3, r5
 800ca9c:	6023      	str	r3, [r4, #0]
 800ca9e:	f8d8 3000 	ldr.w	r3, [r8]
 800caa2:	685a      	ldr	r2, [r3, #4]
 800caa4:	bb62      	cbnz	r2, 800cb00 <_malloc_r+0xdc>
 800caa6:	f8c8 7000 	str.w	r7, [r8]
 800caaa:	e00f      	b.n	800cacc <_malloc_r+0xa8>
 800caac:	6822      	ldr	r2, [r4, #0]
 800caae:	1b52      	subs	r2, r2, r5
 800cab0:	d420      	bmi.n	800caf4 <_malloc_r+0xd0>
 800cab2:	2a0b      	cmp	r2, #11
 800cab4:	d917      	bls.n	800cae6 <_malloc_r+0xc2>
 800cab6:	1961      	adds	r1, r4, r5
 800cab8:	42a3      	cmp	r3, r4
 800caba:	6025      	str	r5, [r4, #0]
 800cabc:	bf18      	it	ne
 800cabe:	6059      	strne	r1, [r3, #4]
 800cac0:	6863      	ldr	r3, [r4, #4]
 800cac2:	bf08      	it	eq
 800cac4:	f8c8 1000 	streq.w	r1, [r8]
 800cac8:	5162      	str	r2, [r4, r5]
 800caca:	604b      	str	r3, [r1, #4]
 800cacc:	4630      	mov	r0, r6
 800cace:	f000 f82f 	bl	800cb30 <__malloc_unlock>
 800cad2:	f104 000b 	add.w	r0, r4, #11
 800cad6:	1d23      	adds	r3, r4, #4
 800cad8:	f020 0007 	bic.w	r0, r0, #7
 800cadc:	1ac2      	subs	r2, r0, r3
 800cade:	bf1c      	itt	ne
 800cae0:	1a1b      	subne	r3, r3, r0
 800cae2:	50a3      	strne	r3, [r4, r2]
 800cae4:	e7af      	b.n	800ca46 <_malloc_r+0x22>
 800cae6:	6862      	ldr	r2, [r4, #4]
 800cae8:	42a3      	cmp	r3, r4
 800caea:	bf0c      	ite	eq
 800caec:	f8c8 2000 	streq.w	r2, [r8]
 800caf0:	605a      	strne	r2, [r3, #4]
 800caf2:	e7eb      	b.n	800cacc <_malloc_r+0xa8>
 800caf4:	4623      	mov	r3, r4
 800caf6:	6864      	ldr	r4, [r4, #4]
 800caf8:	e7ae      	b.n	800ca58 <_malloc_r+0x34>
 800cafa:	463c      	mov	r4, r7
 800cafc:	687f      	ldr	r7, [r7, #4]
 800cafe:	e7b6      	b.n	800ca6e <_malloc_r+0x4a>
 800cb00:	461a      	mov	r2, r3
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	42a3      	cmp	r3, r4
 800cb06:	d1fb      	bne.n	800cb00 <_malloc_r+0xdc>
 800cb08:	2300      	movs	r3, #0
 800cb0a:	6053      	str	r3, [r2, #4]
 800cb0c:	e7de      	b.n	800cacc <_malloc_r+0xa8>
 800cb0e:	230c      	movs	r3, #12
 800cb10:	6033      	str	r3, [r6, #0]
 800cb12:	4630      	mov	r0, r6
 800cb14:	f000 f80c 	bl	800cb30 <__malloc_unlock>
 800cb18:	e794      	b.n	800ca44 <_malloc_r+0x20>
 800cb1a:	6005      	str	r5, [r0, #0]
 800cb1c:	e7d6      	b.n	800cacc <_malloc_r+0xa8>
 800cb1e:	bf00      	nop
 800cb20:	24000a8c 	.word	0x24000a8c

0800cb24 <__malloc_lock>:
 800cb24:	4801      	ldr	r0, [pc, #4]	@ (800cb2c <__malloc_lock+0x8>)
 800cb26:	f7ff b910 	b.w	800bd4a <__retarget_lock_acquire_recursive>
 800cb2a:	bf00      	nop
 800cb2c:	24000a84 	.word	0x24000a84

0800cb30 <__malloc_unlock>:
 800cb30:	4801      	ldr	r0, [pc, #4]	@ (800cb38 <__malloc_unlock+0x8>)
 800cb32:	f7ff b90b 	b.w	800bd4c <__retarget_lock_release_recursive>
 800cb36:	bf00      	nop
 800cb38:	24000a84 	.word	0x24000a84

0800cb3c <_Balloc>:
 800cb3c:	b570      	push	{r4, r5, r6, lr}
 800cb3e:	69c6      	ldr	r6, [r0, #28]
 800cb40:	4604      	mov	r4, r0
 800cb42:	460d      	mov	r5, r1
 800cb44:	b976      	cbnz	r6, 800cb64 <_Balloc+0x28>
 800cb46:	2010      	movs	r0, #16
 800cb48:	f7ff ff42 	bl	800c9d0 <malloc>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	61e0      	str	r0, [r4, #28]
 800cb50:	b920      	cbnz	r0, 800cb5c <_Balloc+0x20>
 800cb52:	4b18      	ldr	r3, [pc, #96]	@ (800cbb4 <_Balloc+0x78>)
 800cb54:	4818      	ldr	r0, [pc, #96]	@ (800cbb8 <_Balloc+0x7c>)
 800cb56:	216b      	movs	r1, #107	@ 0x6b
 800cb58:	f000 fc26 	bl	800d3a8 <__assert_func>
 800cb5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb60:	6006      	str	r6, [r0, #0]
 800cb62:	60c6      	str	r6, [r0, #12]
 800cb64:	69e6      	ldr	r6, [r4, #28]
 800cb66:	68f3      	ldr	r3, [r6, #12]
 800cb68:	b183      	cbz	r3, 800cb8c <_Balloc+0x50>
 800cb6a:	69e3      	ldr	r3, [r4, #28]
 800cb6c:	68db      	ldr	r3, [r3, #12]
 800cb6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb72:	b9b8      	cbnz	r0, 800cba4 <_Balloc+0x68>
 800cb74:	2101      	movs	r1, #1
 800cb76:	fa01 f605 	lsl.w	r6, r1, r5
 800cb7a:	1d72      	adds	r2, r6, #5
 800cb7c:	0092      	lsls	r2, r2, #2
 800cb7e:	4620      	mov	r0, r4
 800cb80:	f000 fc30 	bl	800d3e4 <_calloc_r>
 800cb84:	b160      	cbz	r0, 800cba0 <_Balloc+0x64>
 800cb86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb8a:	e00e      	b.n	800cbaa <_Balloc+0x6e>
 800cb8c:	2221      	movs	r2, #33	@ 0x21
 800cb8e:	2104      	movs	r1, #4
 800cb90:	4620      	mov	r0, r4
 800cb92:	f000 fc27 	bl	800d3e4 <_calloc_r>
 800cb96:	69e3      	ldr	r3, [r4, #28]
 800cb98:	60f0      	str	r0, [r6, #12]
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1e4      	bne.n	800cb6a <_Balloc+0x2e>
 800cba0:	2000      	movs	r0, #0
 800cba2:	bd70      	pop	{r4, r5, r6, pc}
 800cba4:	6802      	ldr	r2, [r0, #0]
 800cba6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbaa:	2300      	movs	r3, #0
 800cbac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbb0:	e7f7      	b.n	800cba2 <_Balloc+0x66>
 800cbb2:	bf00      	nop
 800cbb4:	0800da51 	.word	0x0800da51
 800cbb8:	0800dad1 	.word	0x0800dad1

0800cbbc <_Bfree>:
 800cbbc:	b570      	push	{r4, r5, r6, lr}
 800cbbe:	69c6      	ldr	r6, [r0, #28]
 800cbc0:	4605      	mov	r5, r0
 800cbc2:	460c      	mov	r4, r1
 800cbc4:	b976      	cbnz	r6, 800cbe4 <_Bfree+0x28>
 800cbc6:	2010      	movs	r0, #16
 800cbc8:	f7ff ff02 	bl	800c9d0 <malloc>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	61e8      	str	r0, [r5, #28]
 800cbd0:	b920      	cbnz	r0, 800cbdc <_Bfree+0x20>
 800cbd2:	4b09      	ldr	r3, [pc, #36]	@ (800cbf8 <_Bfree+0x3c>)
 800cbd4:	4809      	ldr	r0, [pc, #36]	@ (800cbfc <_Bfree+0x40>)
 800cbd6:	218f      	movs	r1, #143	@ 0x8f
 800cbd8:	f000 fbe6 	bl	800d3a8 <__assert_func>
 800cbdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbe0:	6006      	str	r6, [r0, #0]
 800cbe2:	60c6      	str	r6, [r0, #12]
 800cbe4:	b13c      	cbz	r4, 800cbf6 <_Bfree+0x3a>
 800cbe6:	69eb      	ldr	r3, [r5, #28]
 800cbe8:	6862      	ldr	r2, [r4, #4]
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbf0:	6021      	str	r1, [r4, #0]
 800cbf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbf6:	bd70      	pop	{r4, r5, r6, pc}
 800cbf8:	0800da51 	.word	0x0800da51
 800cbfc:	0800dad1 	.word	0x0800dad1

0800cc00 <__multadd>:
 800cc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc04:	690d      	ldr	r5, [r1, #16]
 800cc06:	4607      	mov	r7, r0
 800cc08:	460c      	mov	r4, r1
 800cc0a:	461e      	mov	r6, r3
 800cc0c:	f101 0c14 	add.w	ip, r1, #20
 800cc10:	2000      	movs	r0, #0
 800cc12:	f8dc 3000 	ldr.w	r3, [ip]
 800cc16:	b299      	uxth	r1, r3
 800cc18:	fb02 6101 	mla	r1, r2, r1, r6
 800cc1c:	0c1e      	lsrs	r6, r3, #16
 800cc1e:	0c0b      	lsrs	r3, r1, #16
 800cc20:	fb02 3306 	mla	r3, r2, r6, r3
 800cc24:	b289      	uxth	r1, r1
 800cc26:	3001      	adds	r0, #1
 800cc28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc2c:	4285      	cmp	r5, r0
 800cc2e:	f84c 1b04 	str.w	r1, [ip], #4
 800cc32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc36:	dcec      	bgt.n	800cc12 <__multadd+0x12>
 800cc38:	b30e      	cbz	r6, 800cc7e <__multadd+0x7e>
 800cc3a:	68a3      	ldr	r3, [r4, #8]
 800cc3c:	42ab      	cmp	r3, r5
 800cc3e:	dc19      	bgt.n	800cc74 <__multadd+0x74>
 800cc40:	6861      	ldr	r1, [r4, #4]
 800cc42:	4638      	mov	r0, r7
 800cc44:	3101      	adds	r1, #1
 800cc46:	f7ff ff79 	bl	800cb3c <_Balloc>
 800cc4a:	4680      	mov	r8, r0
 800cc4c:	b928      	cbnz	r0, 800cc5a <__multadd+0x5a>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	4b0c      	ldr	r3, [pc, #48]	@ (800cc84 <__multadd+0x84>)
 800cc52:	480d      	ldr	r0, [pc, #52]	@ (800cc88 <__multadd+0x88>)
 800cc54:	21ba      	movs	r1, #186	@ 0xba
 800cc56:	f000 fba7 	bl	800d3a8 <__assert_func>
 800cc5a:	6922      	ldr	r2, [r4, #16]
 800cc5c:	3202      	adds	r2, #2
 800cc5e:	f104 010c 	add.w	r1, r4, #12
 800cc62:	0092      	lsls	r2, r2, #2
 800cc64:	300c      	adds	r0, #12
 800cc66:	f7ff f872 	bl	800bd4e <memcpy>
 800cc6a:	4621      	mov	r1, r4
 800cc6c:	4638      	mov	r0, r7
 800cc6e:	f7ff ffa5 	bl	800cbbc <_Bfree>
 800cc72:	4644      	mov	r4, r8
 800cc74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc78:	3501      	adds	r5, #1
 800cc7a:	615e      	str	r6, [r3, #20]
 800cc7c:	6125      	str	r5, [r4, #16]
 800cc7e:	4620      	mov	r0, r4
 800cc80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc84:	0800dac0 	.word	0x0800dac0
 800cc88:	0800dad1 	.word	0x0800dad1

0800cc8c <__hi0bits>:
 800cc8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cc90:	4603      	mov	r3, r0
 800cc92:	bf36      	itet	cc
 800cc94:	0403      	lslcc	r3, r0, #16
 800cc96:	2000      	movcs	r0, #0
 800cc98:	2010      	movcc	r0, #16
 800cc9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc9e:	bf3c      	itt	cc
 800cca0:	021b      	lslcc	r3, r3, #8
 800cca2:	3008      	addcc	r0, #8
 800cca4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cca8:	bf3c      	itt	cc
 800ccaa:	011b      	lslcc	r3, r3, #4
 800ccac:	3004      	addcc	r0, #4
 800ccae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccb2:	bf3c      	itt	cc
 800ccb4:	009b      	lslcc	r3, r3, #2
 800ccb6:	3002      	addcc	r0, #2
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	db05      	blt.n	800ccc8 <__hi0bits+0x3c>
 800ccbc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ccc0:	f100 0001 	add.w	r0, r0, #1
 800ccc4:	bf08      	it	eq
 800ccc6:	2020      	moveq	r0, #32
 800ccc8:	4770      	bx	lr

0800ccca <__lo0bits>:
 800ccca:	6803      	ldr	r3, [r0, #0]
 800cccc:	4602      	mov	r2, r0
 800ccce:	f013 0007 	ands.w	r0, r3, #7
 800ccd2:	d00b      	beq.n	800ccec <__lo0bits+0x22>
 800ccd4:	07d9      	lsls	r1, r3, #31
 800ccd6:	d421      	bmi.n	800cd1c <__lo0bits+0x52>
 800ccd8:	0798      	lsls	r0, r3, #30
 800ccda:	bf49      	itett	mi
 800ccdc:	085b      	lsrmi	r3, r3, #1
 800ccde:	089b      	lsrpl	r3, r3, #2
 800cce0:	2001      	movmi	r0, #1
 800cce2:	6013      	strmi	r3, [r2, #0]
 800cce4:	bf5c      	itt	pl
 800cce6:	6013      	strpl	r3, [r2, #0]
 800cce8:	2002      	movpl	r0, #2
 800ccea:	4770      	bx	lr
 800ccec:	b299      	uxth	r1, r3
 800ccee:	b909      	cbnz	r1, 800ccf4 <__lo0bits+0x2a>
 800ccf0:	0c1b      	lsrs	r3, r3, #16
 800ccf2:	2010      	movs	r0, #16
 800ccf4:	b2d9      	uxtb	r1, r3
 800ccf6:	b909      	cbnz	r1, 800ccfc <__lo0bits+0x32>
 800ccf8:	3008      	adds	r0, #8
 800ccfa:	0a1b      	lsrs	r3, r3, #8
 800ccfc:	0719      	lsls	r1, r3, #28
 800ccfe:	bf04      	itt	eq
 800cd00:	091b      	lsreq	r3, r3, #4
 800cd02:	3004      	addeq	r0, #4
 800cd04:	0799      	lsls	r1, r3, #30
 800cd06:	bf04      	itt	eq
 800cd08:	089b      	lsreq	r3, r3, #2
 800cd0a:	3002      	addeq	r0, #2
 800cd0c:	07d9      	lsls	r1, r3, #31
 800cd0e:	d403      	bmi.n	800cd18 <__lo0bits+0x4e>
 800cd10:	085b      	lsrs	r3, r3, #1
 800cd12:	f100 0001 	add.w	r0, r0, #1
 800cd16:	d003      	beq.n	800cd20 <__lo0bits+0x56>
 800cd18:	6013      	str	r3, [r2, #0]
 800cd1a:	4770      	bx	lr
 800cd1c:	2000      	movs	r0, #0
 800cd1e:	4770      	bx	lr
 800cd20:	2020      	movs	r0, #32
 800cd22:	4770      	bx	lr

0800cd24 <__i2b>:
 800cd24:	b510      	push	{r4, lr}
 800cd26:	460c      	mov	r4, r1
 800cd28:	2101      	movs	r1, #1
 800cd2a:	f7ff ff07 	bl	800cb3c <_Balloc>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	b928      	cbnz	r0, 800cd3e <__i2b+0x1a>
 800cd32:	4b05      	ldr	r3, [pc, #20]	@ (800cd48 <__i2b+0x24>)
 800cd34:	4805      	ldr	r0, [pc, #20]	@ (800cd4c <__i2b+0x28>)
 800cd36:	f240 1145 	movw	r1, #325	@ 0x145
 800cd3a:	f000 fb35 	bl	800d3a8 <__assert_func>
 800cd3e:	2301      	movs	r3, #1
 800cd40:	6144      	str	r4, [r0, #20]
 800cd42:	6103      	str	r3, [r0, #16]
 800cd44:	bd10      	pop	{r4, pc}
 800cd46:	bf00      	nop
 800cd48:	0800dac0 	.word	0x0800dac0
 800cd4c:	0800dad1 	.word	0x0800dad1

0800cd50 <__multiply>:
 800cd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd54:	4617      	mov	r7, r2
 800cd56:	690a      	ldr	r2, [r1, #16]
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	bfa8      	it	ge
 800cd5e:	463b      	movge	r3, r7
 800cd60:	4689      	mov	r9, r1
 800cd62:	bfa4      	itt	ge
 800cd64:	460f      	movge	r7, r1
 800cd66:	4699      	movge	r9, r3
 800cd68:	693d      	ldr	r5, [r7, #16]
 800cd6a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	6879      	ldr	r1, [r7, #4]
 800cd72:	eb05 060a 	add.w	r6, r5, sl
 800cd76:	42b3      	cmp	r3, r6
 800cd78:	b085      	sub	sp, #20
 800cd7a:	bfb8      	it	lt
 800cd7c:	3101      	addlt	r1, #1
 800cd7e:	f7ff fedd 	bl	800cb3c <_Balloc>
 800cd82:	b930      	cbnz	r0, 800cd92 <__multiply+0x42>
 800cd84:	4602      	mov	r2, r0
 800cd86:	4b41      	ldr	r3, [pc, #260]	@ (800ce8c <__multiply+0x13c>)
 800cd88:	4841      	ldr	r0, [pc, #260]	@ (800ce90 <__multiply+0x140>)
 800cd8a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cd8e:	f000 fb0b 	bl	800d3a8 <__assert_func>
 800cd92:	f100 0414 	add.w	r4, r0, #20
 800cd96:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cd9a:	4623      	mov	r3, r4
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	4573      	cmp	r3, lr
 800cda0:	d320      	bcc.n	800cde4 <__multiply+0x94>
 800cda2:	f107 0814 	add.w	r8, r7, #20
 800cda6:	f109 0114 	add.w	r1, r9, #20
 800cdaa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cdae:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cdb2:	9302      	str	r3, [sp, #8]
 800cdb4:	1beb      	subs	r3, r5, r7
 800cdb6:	3b15      	subs	r3, #21
 800cdb8:	f023 0303 	bic.w	r3, r3, #3
 800cdbc:	3304      	adds	r3, #4
 800cdbe:	3715      	adds	r7, #21
 800cdc0:	42bd      	cmp	r5, r7
 800cdc2:	bf38      	it	cc
 800cdc4:	2304      	movcc	r3, #4
 800cdc6:	9301      	str	r3, [sp, #4]
 800cdc8:	9b02      	ldr	r3, [sp, #8]
 800cdca:	9103      	str	r1, [sp, #12]
 800cdcc:	428b      	cmp	r3, r1
 800cdce:	d80c      	bhi.n	800cdea <__multiply+0x9a>
 800cdd0:	2e00      	cmp	r6, #0
 800cdd2:	dd03      	ble.n	800cddc <__multiply+0x8c>
 800cdd4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d055      	beq.n	800ce88 <__multiply+0x138>
 800cddc:	6106      	str	r6, [r0, #16]
 800cdde:	b005      	add	sp, #20
 800cde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde4:	f843 2b04 	str.w	r2, [r3], #4
 800cde8:	e7d9      	b.n	800cd9e <__multiply+0x4e>
 800cdea:	f8b1 a000 	ldrh.w	sl, [r1]
 800cdee:	f1ba 0f00 	cmp.w	sl, #0
 800cdf2:	d01f      	beq.n	800ce34 <__multiply+0xe4>
 800cdf4:	46c4      	mov	ip, r8
 800cdf6:	46a1      	mov	r9, r4
 800cdf8:	2700      	movs	r7, #0
 800cdfa:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cdfe:	f8d9 3000 	ldr.w	r3, [r9]
 800ce02:	fa1f fb82 	uxth.w	fp, r2
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce0c:	443b      	add	r3, r7
 800ce0e:	f8d9 7000 	ldr.w	r7, [r9]
 800ce12:	0c12      	lsrs	r2, r2, #16
 800ce14:	0c3f      	lsrs	r7, r7, #16
 800ce16:	fb0a 7202 	mla	r2, sl, r2, r7
 800ce1a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce24:	4565      	cmp	r5, ip
 800ce26:	f849 3b04 	str.w	r3, [r9], #4
 800ce2a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ce2e:	d8e4      	bhi.n	800cdfa <__multiply+0xaa>
 800ce30:	9b01      	ldr	r3, [sp, #4]
 800ce32:	50e7      	str	r7, [r4, r3]
 800ce34:	9b03      	ldr	r3, [sp, #12]
 800ce36:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce3a:	3104      	adds	r1, #4
 800ce3c:	f1b9 0f00 	cmp.w	r9, #0
 800ce40:	d020      	beq.n	800ce84 <__multiply+0x134>
 800ce42:	6823      	ldr	r3, [r4, #0]
 800ce44:	4647      	mov	r7, r8
 800ce46:	46a4      	mov	ip, r4
 800ce48:	f04f 0a00 	mov.w	sl, #0
 800ce4c:	f8b7 b000 	ldrh.w	fp, [r7]
 800ce50:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ce54:	fb09 220b 	mla	r2, r9, fp, r2
 800ce58:	4452      	add	r2, sl
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce60:	f84c 3b04 	str.w	r3, [ip], #4
 800ce64:	f857 3b04 	ldr.w	r3, [r7], #4
 800ce68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce6c:	f8bc 3000 	ldrh.w	r3, [ip]
 800ce70:	fb09 330a 	mla	r3, r9, sl, r3
 800ce74:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ce78:	42bd      	cmp	r5, r7
 800ce7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce7e:	d8e5      	bhi.n	800ce4c <__multiply+0xfc>
 800ce80:	9a01      	ldr	r2, [sp, #4]
 800ce82:	50a3      	str	r3, [r4, r2]
 800ce84:	3404      	adds	r4, #4
 800ce86:	e79f      	b.n	800cdc8 <__multiply+0x78>
 800ce88:	3e01      	subs	r6, #1
 800ce8a:	e7a1      	b.n	800cdd0 <__multiply+0x80>
 800ce8c:	0800dac0 	.word	0x0800dac0
 800ce90:	0800dad1 	.word	0x0800dad1

0800ce94 <__pow5mult>:
 800ce94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce98:	4615      	mov	r5, r2
 800ce9a:	f012 0203 	ands.w	r2, r2, #3
 800ce9e:	4607      	mov	r7, r0
 800cea0:	460e      	mov	r6, r1
 800cea2:	d007      	beq.n	800ceb4 <__pow5mult+0x20>
 800cea4:	4c25      	ldr	r4, [pc, #148]	@ (800cf3c <__pow5mult+0xa8>)
 800cea6:	3a01      	subs	r2, #1
 800cea8:	2300      	movs	r3, #0
 800ceaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ceae:	f7ff fea7 	bl	800cc00 <__multadd>
 800ceb2:	4606      	mov	r6, r0
 800ceb4:	10ad      	asrs	r5, r5, #2
 800ceb6:	d03d      	beq.n	800cf34 <__pow5mult+0xa0>
 800ceb8:	69fc      	ldr	r4, [r7, #28]
 800ceba:	b97c      	cbnz	r4, 800cedc <__pow5mult+0x48>
 800cebc:	2010      	movs	r0, #16
 800cebe:	f7ff fd87 	bl	800c9d0 <malloc>
 800cec2:	4602      	mov	r2, r0
 800cec4:	61f8      	str	r0, [r7, #28]
 800cec6:	b928      	cbnz	r0, 800ced4 <__pow5mult+0x40>
 800cec8:	4b1d      	ldr	r3, [pc, #116]	@ (800cf40 <__pow5mult+0xac>)
 800ceca:	481e      	ldr	r0, [pc, #120]	@ (800cf44 <__pow5mult+0xb0>)
 800cecc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ced0:	f000 fa6a 	bl	800d3a8 <__assert_func>
 800ced4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ced8:	6004      	str	r4, [r0, #0]
 800ceda:	60c4      	str	r4, [r0, #12]
 800cedc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cee0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cee4:	b94c      	cbnz	r4, 800cefa <__pow5mult+0x66>
 800cee6:	f240 2171 	movw	r1, #625	@ 0x271
 800ceea:	4638      	mov	r0, r7
 800ceec:	f7ff ff1a 	bl	800cd24 <__i2b>
 800cef0:	2300      	movs	r3, #0
 800cef2:	f8c8 0008 	str.w	r0, [r8, #8]
 800cef6:	4604      	mov	r4, r0
 800cef8:	6003      	str	r3, [r0, #0]
 800cefa:	f04f 0900 	mov.w	r9, #0
 800cefe:	07eb      	lsls	r3, r5, #31
 800cf00:	d50a      	bpl.n	800cf18 <__pow5mult+0x84>
 800cf02:	4631      	mov	r1, r6
 800cf04:	4622      	mov	r2, r4
 800cf06:	4638      	mov	r0, r7
 800cf08:	f7ff ff22 	bl	800cd50 <__multiply>
 800cf0c:	4631      	mov	r1, r6
 800cf0e:	4680      	mov	r8, r0
 800cf10:	4638      	mov	r0, r7
 800cf12:	f7ff fe53 	bl	800cbbc <_Bfree>
 800cf16:	4646      	mov	r6, r8
 800cf18:	106d      	asrs	r5, r5, #1
 800cf1a:	d00b      	beq.n	800cf34 <__pow5mult+0xa0>
 800cf1c:	6820      	ldr	r0, [r4, #0]
 800cf1e:	b938      	cbnz	r0, 800cf30 <__pow5mult+0x9c>
 800cf20:	4622      	mov	r2, r4
 800cf22:	4621      	mov	r1, r4
 800cf24:	4638      	mov	r0, r7
 800cf26:	f7ff ff13 	bl	800cd50 <__multiply>
 800cf2a:	6020      	str	r0, [r4, #0]
 800cf2c:	f8c0 9000 	str.w	r9, [r0]
 800cf30:	4604      	mov	r4, r0
 800cf32:	e7e4      	b.n	800cefe <__pow5mult+0x6a>
 800cf34:	4630      	mov	r0, r6
 800cf36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf3a:	bf00      	nop
 800cf3c:	0800db84 	.word	0x0800db84
 800cf40:	0800da51 	.word	0x0800da51
 800cf44:	0800dad1 	.word	0x0800dad1

0800cf48 <__lshift>:
 800cf48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	6849      	ldr	r1, [r1, #4]
 800cf50:	6923      	ldr	r3, [r4, #16]
 800cf52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf56:	68a3      	ldr	r3, [r4, #8]
 800cf58:	4607      	mov	r7, r0
 800cf5a:	4691      	mov	r9, r2
 800cf5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf60:	f108 0601 	add.w	r6, r8, #1
 800cf64:	42b3      	cmp	r3, r6
 800cf66:	db0b      	blt.n	800cf80 <__lshift+0x38>
 800cf68:	4638      	mov	r0, r7
 800cf6a:	f7ff fde7 	bl	800cb3c <_Balloc>
 800cf6e:	4605      	mov	r5, r0
 800cf70:	b948      	cbnz	r0, 800cf86 <__lshift+0x3e>
 800cf72:	4602      	mov	r2, r0
 800cf74:	4b28      	ldr	r3, [pc, #160]	@ (800d018 <__lshift+0xd0>)
 800cf76:	4829      	ldr	r0, [pc, #164]	@ (800d01c <__lshift+0xd4>)
 800cf78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cf7c:	f000 fa14 	bl	800d3a8 <__assert_func>
 800cf80:	3101      	adds	r1, #1
 800cf82:	005b      	lsls	r3, r3, #1
 800cf84:	e7ee      	b.n	800cf64 <__lshift+0x1c>
 800cf86:	2300      	movs	r3, #0
 800cf88:	f100 0114 	add.w	r1, r0, #20
 800cf8c:	f100 0210 	add.w	r2, r0, #16
 800cf90:	4618      	mov	r0, r3
 800cf92:	4553      	cmp	r3, sl
 800cf94:	db33      	blt.n	800cffe <__lshift+0xb6>
 800cf96:	6920      	ldr	r0, [r4, #16]
 800cf98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf9c:	f104 0314 	add.w	r3, r4, #20
 800cfa0:	f019 091f 	ands.w	r9, r9, #31
 800cfa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cfa8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cfac:	d02b      	beq.n	800d006 <__lshift+0xbe>
 800cfae:	f1c9 0e20 	rsb	lr, r9, #32
 800cfb2:	468a      	mov	sl, r1
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	6818      	ldr	r0, [r3, #0]
 800cfb8:	fa00 f009 	lsl.w	r0, r0, r9
 800cfbc:	4310      	orrs	r0, r2
 800cfbe:	f84a 0b04 	str.w	r0, [sl], #4
 800cfc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfc6:	459c      	cmp	ip, r3
 800cfc8:	fa22 f20e 	lsr.w	r2, r2, lr
 800cfcc:	d8f3      	bhi.n	800cfb6 <__lshift+0x6e>
 800cfce:	ebac 0304 	sub.w	r3, ip, r4
 800cfd2:	3b15      	subs	r3, #21
 800cfd4:	f023 0303 	bic.w	r3, r3, #3
 800cfd8:	3304      	adds	r3, #4
 800cfda:	f104 0015 	add.w	r0, r4, #21
 800cfde:	4560      	cmp	r0, ip
 800cfe0:	bf88      	it	hi
 800cfe2:	2304      	movhi	r3, #4
 800cfe4:	50ca      	str	r2, [r1, r3]
 800cfe6:	b10a      	cbz	r2, 800cfec <__lshift+0xa4>
 800cfe8:	f108 0602 	add.w	r6, r8, #2
 800cfec:	3e01      	subs	r6, #1
 800cfee:	4638      	mov	r0, r7
 800cff0:	612e      	str	r6, [r5, #16]
 800cff2:	4621      	mov	r1, r4
 800cff4:	f7ff fde2 	bl	800cbbc <_Bfree>
 800cff8:	4628      	mov	r0, r5
 800cffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cffe:	f842 0f04 	str.w	r0, [r2, #4]!
 800d002:	3301      	adds	r3, #1
 800d004:	e7c5      	b.n	800cf92 <__lshift+0x4a>
 800d006:	3904      	subs	r1, #4
 800d008:	f853 2b04 	ldr.w	r2, [r3], #4
 800d00c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d010:	459c      	cmp	ip, r3
 800d012:	d8f9      	bhi.n	800d008 <__lshift+0xc0>
 800d014:	e7ea      	b.n	800cfec <__lshift+0xa4>
 800d016:	bf00      	nop
 800d018:	0800dac0 	.word	0x0800dac0
 800d01c:	0800dad1 	.word	0x0800dad1

0800d020 <__mcmp>:
 800d020:	690a      	ldr	r2, [r1, #16]
 800d022:	4603      	mov	r3, r0
 800d024:	6900      	ldr	r0, [r0, #16]
 800d026:	1a80      	subs	r0, r0, r2
 800d028:	b530      	push	{r4, r5, lr}
 800d02a:	d10e      	bne.n	800d04a <__mcmp+0x2a>
 800d02c:	3314      	adds	r3, #20
 800d02e:	3114      	adds	r1, #20
 800d030:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d034:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d038:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d03c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d040:	4295      	cmp	r5, r2
 800d042:	d003      	beq.n	800d04c <__mcmp+0x2c>
 800d044:	d205      	bcs.n	800d052 <__mcmp+0x32>
 800d046:	f04f 30ff 	mov.w	r0, #4294967295
 800d04a:	bd30      	pop	{r4, r5, pc}
 800d04c:	42a3      	cmp	r3, r4
 800d04e:	d3f3      	bcc.n	800d038 <__mcmp+0x18>
 800d050:	e7fb      	b.n	800d04a <__mcmp+0x2a>
 800d052:	2001      	movs	r0, #1
 800d054:	e7f9      	b.n	800d04a <__mcmp+0x2a>
	...

0800d058 <__mdiff>:
 800d058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d05c:	4689      	mov	r9, r1
 800d05e:	4606      	mov	r6, r0
 800d060:	4611      	mov	r1, r2
 800d062:	4648      	mov	r0, r9
 800d064:	4614      	mov	r4, r2
 800d066:	f7ff ffdb 	bl	800d020 <__mcmp>
 800d06a:	1e05      	subs	r5, r0, #0
 800d06c:	d112      	bne.n	800d094 <__mdiff+0x3c>
 800d06e:	4629      	mov	r1, r5
 800d070:	4630      	mov	r0, r6
 800d072:	f7ff fd63 	bl	800cb3c <_Balloc>
 800d076:	4602      	mov	r2, r0
 800d078:	b928      	cbnz	r0, 800d086 <__mdiff+0x2e>
 800d07a:	4b3f      	ldr	r3, [pc, #252]	@ (800d178 <__mdiff+0x120>)
 800d07c:	f240 2137 	movw	r1, #567	@ 0x237
 800d080:	483e      	ldr	r0, [pc, #248]	@ (800d17c <__mdiff+0x124>)
 800d082:	f000 f991 	bl	800d3a8 <__assert_func>
 800d086:	2301      	movs	r3, #1
 800d088:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d08c:	4610      	mov	r0, r2
 800d08e:	b003      	add	sp, #12
 800d090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d094:	bfbc      	itt	lt
 800d096:	464b      	movlt	r3, r9
 800d098:	46a1      	movlt	r9, r4
 800d09a:	4630      	mov	r0, r6
 800d09c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d0a0:	bfba      	itte	lt
 800d0a2:	461c      	movlt	r4, r3
 800d0a4:	2501      	movlt	r5, #1
 800d0a6:	2500      	movge	r5, #0
 800d0a8:	f7ff fd48 	bl	800cb3c <_Balloc>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	b918      	cbnz	r0, 800d0b8 <__mdiff+0x60>
 800d0b0:	4b31      	ldr	r3, [pc, #196]	@ (800d178 <__mdiff+0x120>)
 800d0b2:	f240 2145 	movw	r1, #581	@ 0x245
 800d0b6:	e7e3      	b.n	800d080 <__mdiff+0x28>
 800d0b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d0bc:	6926      	ldr	r6, [r4, #16]
 800d0be:	60c5      	str	r5, [r0, #12]
 800d0c0:	f109 0310 	add.w	r3, r9, #16
 800d0c4:	f109 0514 	add.w	r5, r9, #20
 800d0c8:	f104 0e14 	add.w	lr, r4, #20
 800d0cc:	f100 0b14 	add.w	fp, r0, #20
 800d0d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d0d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d0d8:	9301      	str	r3, [sp, #4]
 800d0da:	46d9      	mov	r9, fp
 800d0dc:	f04f 0c00 	mov.w	ip, #0
 800d0e0:	9b01      	ldr	r3, [sp, #4]
 800d0e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d0e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d0ea:	9301      	str	r3, [sp, #4]
 800d0ec:	fa1f f38a 	uxth.w	r3, sl
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	b283      	uxth	r3, r0
 800d0f4:	1acb      	subs	r3, r1, r3
 800d0f6:	0c00      	lsrs	r0, r0, #16
 800d0f8:	4463      	add	r3, ip
 800d0fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d0fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d102:	b29b      	uxth	r3, r3
 800d104:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d108:	4576      	cmp	r6, lr
 800d10a:	f849 3b04 	str.w	r3, [r9], #4
 800d10e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d112:	d8e5      	bhi.n	800d0e0 <__mdiff+0x88>
 800d114:	1b33      	subs	r3, r6, r4
 800d116:	3b15      	subs	r3, #21
 800d118:	f023 0303 	bic.w	r3, r3, #3
 800d11c:	3415      	adds	r4, #21
 800d11e:	3304      	adds	r3, #4
 800d120:	42a6      	cmp	r6, r4
 800d122:	bf38      	it	cc
 800d124:	2304      	movcc	r3, #4
 800d126:	441d      	add	r5, r3
 800d128:	445b      	add	r3, fp
 800d12a:	461e      	mov	r6, r3
 800d12c:	462c      	mov	r4, r5
 800d12e:	4544      	cmp	r4, r8
 800d130:	d30e      	bcc.n	800d150 <__mdiff+0xf8>
 800d132:	f108 0103 	add.w	r1, r8, #3
 800d136:	1b49      	subs	r1, r1, r5
 800d138:	f021 0103 	bic.w	r1, r1, #3
 800d13c:	3d03      	subs	r5, #3
 800d13e:	45a8      	cmp	r8, r5
 800d140:	bf38      	it	cc
 800d142:	2100      	movcc	r1, #0
 800d144:	440b      	add	r3, r1
 800d146:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d14a:	b191      	cbz	r1, 800d172 <__mdiff+0x11a>
 800d14c:	6117      	str	r7, [r2, #16]
 800d14e:	e79d      	b.n	800d08c <__mdiff+0x34>
 800d150:	f854 1b04 	ldr.w	r1, [r4], #4
 800d154:	46e6      	mov	lr, ip
 800d156:	0c08      	lsrs	r0, r1, #16
 800d158:	fa1c fc81 	uxtah	ip, ip, r1
 800d15c:	4471      	add	r1, lr
 800d15e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d162:	b289      	uxth	r1, r1
 800d164:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d168:	f846 1b04 	str.w	r1, [r6], #4
 800d16c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d170:	e7dd      	b.n	800d12e <__mdiff+0xd6>
 800d172:	3f01      	subs	r7, #1
 800d174:	e7e7      	b.n	800d146 <__mdiff+0xee>
 800d176:	bf00      	nop
 800d178:	0800dac0 	.word	0x0800dac0
 800d17c:	0800dad1 	.word	0x0800dad1

0800d180 <__d2b>:
 800d180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d184:	460f      	mov	r7, r1
 800d186:	2101      	movs	r1, #1
 800d188:	ec59 8b10 	vmov	r8, r9, d0
 800d18c:	4616      	mov	r6, r2
 800d18e:	f7ff fcd5 	bl	800cb3c <_Balloc>
 800d192:	4604      	mov	r4, r0
 800d194:	b930      	cbnz	r0, 800d1a4 <__d2b+0x24>
 800d196:	4602      	mov	r2, r0
 800d198:	4b23      	ldr	r3, [pc, #140]	@ (800d228 <__d2b+0xa8>)
 800d19a:	4824      	ldr	r0, [pc, #144]	@ (800d22c <__d2b+0xac>)
 800d19c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d1a0:	f000 f902 	bl	800d3a8 <__assert_func>
 800d1a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d1a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d1ac:	b10d      	cbz	r5, 800d1b2 <__d2b+0x32>
 800d1ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d1b2:	9301      	str	r3, [sp, #4]
 800d1b4:	f1b8 0300 	subs.w	r3, r8, #0
 800d1b8:	d023      	beq.n	800d202 <__d2b+0x82>
 800d1ba:	4668      	mov	r0, sp
 800d1bc:	9300      	str	r3, [sp, #0]
 800d1be:	f7ff fd84 	bl	800ccca <__lo0bits>
 800d1c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d1c6:	b1d0      	cbz	r0, 800d1fe <__d2b+0x7e>
 800d1c8:	f1c0 0320 	rsb	r3, r0, #32
 800d1cc:	fa02 f303 	lsl.w	r3, r2, r3
 800d1d0:	430b      	orrs	r3, r1
 800d1d2:	40c2      	lsrs	r2, r0
 800d1d4:	6163      	str	r3, [r4, #20]
 800d1d6:	9201      	str	r2, [sp, #4]
 800d1d8:	9b01      	ldr	r3, [sp, #4]
 800d1da:	61a3      	str	r3, [r4, #24]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	bf0c      	ite	eq
 800d1e0:	2201      	moveq	r2, #1
 800d1e2:	2202      	movne	r2, #2
 800d1e4:	6122      	str	r2, [r4, #16]
 800d1e6:	b1a5      	cbz	r5, 800d212 <__d2b+0x92>
 800d1e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d1ec:	4405      	add	r5, r0
 800d1ee:	603d      	str	r5, [r7, #0]
 800d1f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d1f4:	6030      	str	r0, [r6, #0]
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	b003      	add	sp, #12
 800d1fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1fe:	6161      	str	r1, [r4, #20]
 800d200:	e7ea      	b.n	800d1d8 <__d2b+0x58>
 800d202:	a801      	add	r0, sp, #4
 800d204:	f7ff fd61 	bl	800ccca <__lo0bits>
 800d208:	9b01      	ldr	r3, [sp, #4]
 800d20a:	6163      	str	r3, [r4, #20]
 800d20c:	3020      	adds	r0, #32
 800d20e:	2201      	movs	r2, #1
 800d210:	e7e8      	b.n	800d1e4 <__d2b+0x64>
 800d212:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d216:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d21a:	6038      	str	r0, [r7, #0]
 800d21c:	6918      	ldr	r0, [r3, #16]
 800d21e:	f7ff fd35 	bl	800cc8c <__hi0bits>
 800d222:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d226:	e7e5      	b.n	800d1f4 <__d2b+0x74>
 800d228:	0800dac0 	.word	0x0800dac0
 800d22c:	0800dad1 	.word	0x0800dad1

0800d230 <__sflush_r>:
 800d230:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d238:	0716      	lsls	r6, r2, #28
 800d23a:	4605      	mov	r5, r0
 800d23c:	460c      	mov	r4, r1
 800d23e:	d454      	bmi.n	800d2ea <__sflush_r+0xba>
 800d240:	684b      	ldr	r3, [r1, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	dc02      	bgt.n	800d24c <__sflush_r+0x1c>
 800d246:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d248:	2b00      	cmp	r3, #0
 800d24a:	dd48      	ble.n	800d2de <__sflush_r+0xae>
 800d24c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d24e:	2e00      	cmp	r6, #0
 800d250:	d045      	beq.n	800d2de <__sflush_r+0xae>
 800d252:	2300      	movs	r3, #0
 800d254:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d258:	682f      	ldr	r7, [r5, #0]
 800d25a:	6a21      	ldr	r1, [r4, #32]
 800d25c:	602b      	str	r3, [r5, #0]
 800d25e:	d030      	beq.n	800d2c2 <__sflush_r+0x92>
 800d260:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d262:	89a3      	ldrh	r3, [r4, #12]
 800d264:	0759      	lsls	r1, r3, #29
 800d266:	d505      	bpl.n	800d274 <__sflush_r+0x44>
 800d268:	6863      	ldr	r3, [r4, #4]
 800d26a:	1ad2      	subs	r2, r2, r3
 800d26c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d26e:	b10b      	cbz	r3, 800d274 <__sflush_r+0x44>
 800d270:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d272:	1ad2      	subs	r2, r2, r3
 800d274:	2300      	movs	r3, #0
 800d276:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d278:	6a21      	ldr	r1, [r4, #32]
 800d27a:	4628      	mov	r0, r5
 800d27c:	47b0      	blx	r6
 800d27e:	1c43      	adds	r3, r0, #1
 800d280:	89a3      	ldrh	r3, [r4, #12]
 800d282:	d106      	bne.n	800d292 <__sflush_r+0x62>
 800d284:	6829      	ldr	r1, [r5, #0]
 800d286:	291d      	cmp	r1, #29
 800d288:	d82b      	bhi.n	800d2e2 <__sflush_r+0xb2>
 800d28a:	4a2a      	ldr	r2, [pc, #168]	@ (800d334 <__sflush_r+0x104>)
 800d28c:	40ca      	lsrs	r2, r1
 800d28e:	07d6      	lsls	r6, r2, #31
 800d290:	d527      	bpl.n	800d2e2 <__sflush_r+0xb2>
 800d292:	2200      	movs	r2, #0
 800d294:	6062      	str	r2, [r4, #4]
 800d296:	04d9      	lsls	r1, r3, #19
 800d298:	6922      	ldr	r2, [r4, #16]
 800d29a:	6022      	str	r2, [r4, #0]
 800d29c:	d504      	bpl.n	800d2a8 <__sflush_r+0x78>
 800d29e:	1c42      	adds	r2, r0, #1
 800d2a0:	d101      	bne.n	800d2a6 <__sflush_r+0x76>
 800d2a2:	682b      	ldr	r3, [r5, #0]
 800d2a4:	b903      	cbnz	r3, 800d2a8 <__sflush_r+0x78>
 800d2a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800d2a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d2aa:	602f      	str	r7, [r5, #0]
 800d2ac:	b1b9      	cbz	r1, 800d2de <__sflush_r+0xae>
 800d2ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2b2:	4299      	cmp	r1, r3
 800d2b4:	d002      	beq.n	800d2bc <__sflush_r+0x8c>
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	f7ff fb40 	bl	800c93c <_free_r>
 800d2bc:	2300      	movs	r3, #0
 800d2be:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2c0:	e00d      	b.n	800d2de <__sflush_r+0xae>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	4628      	mov	r0, r5
 800d2c6:	47b0      	blx	r6
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	1c50      	adds	r0, r2, #1
 800d2cc:	d1c9      	bne.n	800d262 <__sflush_r+0x32>
 800d2ce:	682b      	ldr	r3, [r5, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d0c6      	beq.n	800d262 <__sflush_r+0x32>
 800d2d4:	2b1d      	cmp	r3, #29
 800d2d6:	d001      	beq.n	800d2dc <__sflush_r+0xac>
 800d2d8:	2b16      	cmp	r3, #22
 800d2da:	d11e      	bne.n	800d31a <__sflush_r+0xea>
 800d2dc:	602f      	str	r7, [r5, #0]
 800d2de:	2000      	movs	r0, #0
 800d2e0:	e022      	b.n	800d328 <__sflush_r+0xf8>
 800d2e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2e6:	b21b      	sxth	r3, r3
 800d2e8:	e01b      	b.n	800d322 <__sflush_r+0xf2>
 800d2ea:	690f      	ldr	r7, [r1, #16]
 800d2ec:	2f00      	cmp	r7, #0
 800d2ee:	d0f6      	beq.n	800d2de <__sflush_r+0xae>
 800d2f0:	0793      	lsls	r3, r2, #30
 800d2f2:	680e      	ldr	r6, [r1, #0]
 800d2f4:	bf08      	it	eq
 800d2f6:	694b      	ldreq	r3, [r1, #20]
 800d2f8:	600f      	str	r7, [r1, #0]
 800d2fa:	bf18      	it	ne
 800d2fc:	2300      	movne	r3, #0
 800d2fe:	eba6 0807 	sub.w	r8, r6, r7
 800d302:	608b      	str	r3, [r1, #8]
 800d304:	f1b8 0f00 	cmp.w	r8, #0
 800d308:	dde9      	ble.n	800d2de <__sflush_r+0xae>
 800d30a:	6a21      	ldr	r1, [r4, #32]
 800d30c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d30e:	4643      	mov	r3, r8
 800d310:	463a      	mov	r2, r7
 800d312:	4628      	mov	r0, r5
 800d314:	47b0      	blx	r6
 800d316:	2800      	cmp	r0, #0
 800d318:	dc08      	bgt.n	800d32c <__sflush_r+0xfc>
 800d31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d31e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d322:	81a3      	strh	r3, [r4, #12]
 800d324:	f04f 30ff 	mov.w	r0, #4294967295
 800d328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d32c:	4407      	add	r7, r0
 800d32e:	eba8 0800 	sub.w	r8, r8, r0
 800d332:	e7e7      	b.n	800d304 <__sflush_r+0xd4>
 800d334:	20400001 	.word	0x20400001

0800d338 <_fflush_r>:
 800d338:	b538      	push	{r3, r4, r5, lr}
 800d33a:	690b      	ldr	r3, [r1, #16]
 800d33c:	4605      	mov	r5, r0
 800d33e:	460c      	mov	r4, r1
 800d340:	b913      	cbnz	r3, 800d348 <_fflush_r+0x10>
 800d342:	2500      	movs	r5, #0
 800d344:	4628      	mov	r0, r5
 800d346:	bd38      	pop	{r3, r4, r5, pc}
 800d348:	b118      	cbz	r0, 800d352 <_fflush_r+0x1a>
 800d34a:	6a03      	ldr	r3, [r0, #32]
 800d34c:	b90b      	cbnz	r3, 800d352 <_fflush_r+0x1a>
 800d34e:	f7fe fc05 	bl	800bb5c <__sinit>
 800d352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d0f3      	beq.n	800d342 <_fflush_r+0xa>
 800d35a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d35c:	07d0      	lsls	r0, r2, #31
 800d35e:	d404      	bmi.n	800d36a <_fflush_r+0x32>
 800d360:	0599      	lsls	r1, r3, #22
 800d362:	d402      	bmi.n	800d36a <_fflush_r+0x32>
 800d364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d366:	f7fe fcf0 	bl	800bd4a <__retarget_lock_acquire_recursive>
 800d36a:	4628      	mov	r0, r5
 800d36c:	4621      	mov	r1, r4
 800d36e:	f7ff ff5f 	bl	800d230 <__sflush_r>
 800d372:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d374:	07da      	lsls	r2, r3, #31
 800d376:	4605      	mov	r5, r0
 800d378:	d4e4      	bmi.n	800d344 <_fflush_r+0xc>
 800d37a:	89a3      	ldrh	r3, [r4, #12]
 800d37c:	059b      	lsls	r3, r3, #22
 800d37e:	d4e1      	bmi.n	800d344 <_fflush_r+0xc>
 800d380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d382:	f7fe fce3 	bl	800bd4c <__retarget_lock_release_recursive>
 800d386:	e7dd      	b.n	800d344 <_fflush_r+0xc>

0800d388 <_sbrk_r>:
 800d388:	b538      	push	{r3, r4, r5, lr}
 800d38a:	4d06      	ldr	r5, [pc, #24]	@ (800d3a4 <_sbrk_r+0x1c>)
 800d38c:	2300      	movs	r3, #0
 800d38e:	4604      	mov	r4, r0
 800d390:	4608      	mov	r0, r1
 800d392:	602b      	str	r3, [r5, #0]
 800d394:	f7f4 f826 	bl	80013e4 <_sbrk>
 800d398:	1c43      	adds	r3, r0, #1
 800d39a:	d102      	bne.n	800d3a2 <_sbrk_r+0x1a>
 800d39c:	682b      	ldr	r3, [r5, #0]
 800d39e:	b103      	cbz	r3, 800d3a2 <_sbrk_r+0x1a>
 800d3a0:	6023      	str	r3, [r4, #0]
 800d3a2:	bd38      	pop	{r3, r4, r5, pc}
 800d3a4:	24000a80 	.word	0x24000a80

0800d3a8 <__assert_func>:
 800d3a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3aa:	4614      	mov	r4, r2
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	4b09      	ldr	r3, [pc, #36]	@ (800d3d4 <__assert_func+0x2c>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4605      	mov	r5, r0
 800d3b4:	68d8      	ldr	r0, [r3, #12]
 800d3b6:	b14c      	cbz	r4, 800d3cc <__assert_func+0x24>
 800d3b8:	4b07      	ldr	r3, [pc, #28]	@ (800d3d8 <__assert_func+0x30>)
 800d3ba:	9100      	str	r1, [sp, #0]
 800d3bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3c0:	4906      	ldr	r1, [pc, #24]	@ (800d3dc <__assert_func+0x34>)
 800d3c2:	462b      	mov	r3, r5
 800d3c4:	f000 f842 	bl	800d44c <fiprintf>
 800d3c8:	f000 f852 	bl	800d470 <abort>
 800d3cc:	4b04      	ldr	r3, [pc, #16]	@ (800d3e0 <__assert_func+0x38>)
 800d3ce:	461c      	mov	r4, r3
 800d3d0:	e7f3      	b.n	800d3ba <__assert_func+0x12>
 800d3d2:	bf00      	nop
 800d3d4:	2400001c 	.word	0x2400001c
 800d3d8:	0800db34 	.word	0x0800db34
 800d3dc:	0800db41 	.word	0x0800db41
 800d3e0:	0800db6f 	.word	0x0800db6f

0800d3e4 <_calloc_r>:
 800d3e4:	b570      	push	{r4, r5, r6, lr}
 800d3e6:	fba1 5402 	umull	r5, r4, r1, r2
 800d3ea:	b934      	cbnz	r4, 800d3fa <_calloc_r+0x16>
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	f7ff fb19 	bl	800ca24 <_malloc_r>
 800d3f2:	4606      	mov	r6, r0
 800d3f4:	b928      	cbnz	r0, 800d402 <_calloc_r+0x1e>
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	bd70      	pop	{r4, r5, r6, pc}
 800d3fa:	220c      	movs	r2, #12
 800d3fc:	6002      	str	r2, [r0, #0]
 800d3fe:	2600      	movs	r6, #0
 800d400:	e7f9      	b.n	800d3f6 <_calloc_r+0x12>
 800d402:	462a      	mov	r2, r5
 800d404:	4621      	mov	r1, r4
 800d406:	f7fe fc22 	bl	800bc4e <memset>
 800d40a:	e7f4      	b.n	800d3f6 <_calloc_r+0x12>

0800d40c <__ascii_mbtowc>:
 800d40c:	b082      	sub	sp, #8
 800d40e:	b901      	cbnz	r1, 800d412 <__ascii_mbtowc+0x6>
 800d410:	a901      	add	r1, sp, #4
 800d412:	b142      	cbz	r2, 800d426 <__ascii_mbtowc+0x1a>
 800d414:	b14b      	cbz	r3, 800d42a <__ascii_mbtowc+0x1e>
 800d416:	7813      	ldrb	r3, [r2, #0]
 800d418:	600b      	str	r3, [r1, #0]
 800d41a:	7812      	ldrb	r2, [r2, #0]
 800d41c:	1e10      	subs	r0, r2, #0
 800d41e:	bf18      	it	ne
 800d420:	2001      	movne	r0, #1
 800d422:	b002      	add	sp, #8
 800d424:	4770      	bx	lr
 800d426:	4610      	mov	r0, r2
 800d428:	e7fb      	b.n	800d422 <__ascii_mbtowc+0x16>
 800d42a:	f06f 0001 	mvn.w	r0, #1
 800d42e:	e7f8      	b.n	800d422 <__ascii_mbtowc+0x16>

0800d430 <__ascii_wctomb>:
 800d430:	4603      	mov	r3, r0
 800d432:	4608      	mov	r0, r1
 800d434:	b141      	cbz	r1, 800d448 <__ascii_wctomb+0x18>
 800d436:	2aff      	cmp	r2, #255	@ 0xff
 800d438:	d904      	bls.n	800d444 <__ascii_wctomb+0x14>
 800d43a:	228a      	movs	r2, #138	@ 0x8a
 800d43c:	601a      	str	r2, [r3, #0]
 800d43e:	f04f 30ff 	mov.w	r0, #4294967295
 800d442:	4770      	bx	lr
 800d444:	700a      	strb	r2, [r1, #0]
 800d446:	2001      	movs	r0, #1
 800d448:	4770      	bx	lr
	...

0800d44c <fiprintf>:
 800d44c:	b40e      	push	{r1, r2, r3}
 800d44e:	b503      	push	{r0, r1, lr}
 800d450:	4601      	mov	r1, r0
 800d452:	ab03      	add	r3, sp, #12
 800d454:	4805      	ldr	r0, [pc, #20]	@ (800d46c <fiprintf+0x20>)
 800d456:	f853 2b04 	ldr.w	r2, [r3], #4
 800d45a:	6800      	ldr	r0, [r0, #0]
 800d45c:	9301      	str	r3, [sp, #4]
 800d45e:	f000 f837 	bl	800d4d0 <_vfiprintf_r>
 800d462:	b002      	add	sp, #8
 800d464:	f85d eb04 	ldr.w	lr, [sp], #4
 800d468:	b003      	add	sp, #12
 800d46a:	4770      	bx	lr
 800d46c:	2400001c 	.word	0x2400001c

0800d470 <abort>:
 800d470:	b508      	push	{r3, lr}
 800d472:	2006      	movs	r0, #6
 800d474:	f000 fa00 	bl	800d878 <raise>
 800d478:	2001      	movs	r0, #1
 800d47a:	f7f3 ff3b 	bl	80012f4 <_exit>

0800d47e <__sfputc_r>:
 800d47e:	6893      	ldr	r3, [r2, #8]
 800d480:	3b01      	subs	r3, #1
 800d482:	2b00      	cmp	r3, #0
 800d484:	b410      	push	{r4}
 800d486:	6093      	str	r3, [r2, #8]
 800d488:	da08      	bge.n	800d49c <__sfputc_r+0x1e>
 800d48a:	6994      	ldr	r4, [r2, #24]
 800d48c:	42a3      	cmp	r3, r4
 800d48e:	db01      	blt.n	800d494 <__sfputc_r+0x16>
 800d490:	290a      	cmp	r1, #10
 800d492:	d103      	bne.n	800d49c <__sfputc_r+0x1e>
 800d494:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d498:	f000 b932 	b.w	800d700 <__swbuf_r>
 800d49c:	6813      	ldr	r3, [r2, #0]
 800d49e:	1c58      	adds	r0, r3, #1
 800d4a0:	6010      	str	r0, [r2, #0]
 800d4a2:	7019      	strb	r1, [r3, #0]
 800d4a4:	4608      	mov	r0, r1
 800d4a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <__sfputs_r>:
 800d4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ae:	4606      	mov	r6, r0
 800d4b0:	460f      	mov	r7, r1
 800d4b2:	4614      	mov	r4, r2
 800d4b4:	18d5      	adds	r5, r2, r3
 800d4b6:	42ac      	cmp	r4, r5
 800d4b8:	d101      	bne.n	800d4be <__sfputs_r+0x12>
 800d4ba:	2000      	movs	r0, #0
 800d4bc:	e007      	b.n	800d4ce <__sfputs_r+0x22>
 800d4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4c2:	463a      	mov	r2, r7
 800d4c4:	4630      	mov	r0, r6
 800d4c6:	f7ff ffda 	bl	800d47e <__sfputc_r>
 800d4ca:	1c43      	adds	r3, r0, #1
 800d4cc:	d1f3      	bne.n	800d4b6 <__sfputs_r+0xa>
 800d4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d4d0 <_vfiprintf_r>:
 800d4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d4:	460d      	mov	r5, r1
 800d4d6:	b09d      	sub	sp, #116	@ 0x74
 800d4d8:	4614      	mov	r4, r2
 800d4da:	4698      	mov	r8, r3
 800d4dc:	4606      	mov	r6, r0
 800d4de:	b118      	cbz	r0, 800d4e8 <_vfiprintf_r+0x18>
 800d4e0:	6a03      	ldr	r3, [r0, #32]
 800d4e2:	b90b      	cbnz	r3, 800d4e8 <_vfiprintf_r+0x18>
 800d4e4:	f7fe fb3a 	bl	800bb5c <__sinit>
 800d4e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4ea:	07d9      	lsls	r1, r3, #31
 800d4ec:	d405      	bmi.n	800d4fa <_vfiprintf_r+0x2a>
 800d4ee:	89ab      	ldrh	r3, [r5, #12]
 800d4f0:	059a      	lsls	r2, r3, #22
 800d4f2:	d402      	bmi.n	800d4fa <_vfiprintf_r+0x2a>
 800d4f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4f6:	f7fe fc28 	bl	800bd4a <__retarget_lock_acquire_recursive>
 800d4fa:	89ab      	ldrh	r3, [r5, #12]
 800d4fc:	071b      	lsls	r3, r3, #28
 800d4fe:	d501      	bpl.n	800d504 <_vfiprintf_r+0x34>
 800d500:	692b      	ldr	r3, [r5, #16]
 800d502:	b99b      	cbnz	r3, 800d52c <_vfiprintf_r+0x5c>
 800d504:	4629      	mov	r1, r5
 800d506:	4630      	mov	r0, r6
 800d508:	f000 f938 	bl	800d77c <__swsetup_r>
 800d50c:	b170      	cbz	r0, 800d52c <_vfiprintf_r+0x5c>
 800d50e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d510:	07dc      	lsls	r4, r3, #31
 800d512:	d504      	bpl.n	800d51e <_vfiprintf_r+0x4e>
 800d514:	f04f 30ff 	mov.w	r0, #4294967295
 800d518:	b01d      	add	sp, #116	@ 0x74
 800d51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d51e:	89ab      	ldrh	r3, [r5, #12]
 800d520:	0598      	lsls	r0, r3, #22
 800d522:	d4f7      	bmi.n	800d514 <_vfiprintf_r+0x44>
 800d524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d526:	f7fe fc11 	bl	800bd4c <__retarget_lock_release_recursive>
 800d52a:	e7f3      	b.n	800d514 <_vfiprintf_r+0x44>
 800d52c:	2300      	movs	r3, #0
 800d52e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d530:	2320      	movs	r3, #32
 800d532:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d536:	f8cd 800c 	str.w	r8, [sp, #12]
 800d53a:	2330      	movs	r3, #48	@ 0x30
 800d53c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d6ec <_vfiprintf_r+0x21c>
 800d540:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d544:	f04f 0901 	mov.w	r9, #1
 800d548:	4623      	mov	r3, r4
 800d54a:	469a      	mov	sl, r3
 800d54c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d550:	b10a      	cbz	r2, 800d556 <_vfiprintf_r+0x86>
 800d552:	2a25      	cmp	r2, #37	@ 0x25
 800d554:	d1f9      	bne.n	800d54a <_vfiprintf_r+0x7a>
 800d556:	ebba 0b04 	subs.w	fp, sl, r4
 800d55a:	d00b      	beq.n	800d574 <_vfiprintf_r+0xa4>
 800d55c:	465b      	mov	r3, fp
 800d55e:	4622      	mov	r2, r4
 800d560:	4629      	mov	r1, r5
 800d562:	4630      	mov	r0, r6
 800d564:	f7ff ffa2 	bl	800d4ac <__sfputs_r>
 800d568:	3001      	adds	r0, #1
 800d56a:	f000 80a7 	beq.w	800d6bc <_vfiprintf_r+0x1ec>
 800d56e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d570:	445a      	add	r2, fp
 800d572:	9209      	str	r2, [sp, #36]	@ 0x24
 800d574:	f89a 3000 	ldrb.w	r3, [sl]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f000 809f 	beq.w	800d6bc <_vfiprintf_r+0x1ec>
 800d57e:	2300      	movs	r3, #0
 800d580:	f04f 32ff 	mov.w	r2, #4294967295
 800d584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d588:	f10a 0a01 	add.w	sl, sl, #1
 800d58c:	9304      	str	r3, [sp, #16]
 800d58e:	9307      	str	r3, [sp, #28]
 800d590:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d594:	931a      	str	r3, [sp, #104]	@ 0x68
 800d596:	4654      	mov	r4, sl
 800d598:	2205      	movs	r2, #5
 800d59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d59e:	4853      	ldr	r0, [pc, #332]	@ (800d6ec <_vfiprintf_r+0x21c>)
 800d5a0:	f7f2 fea6 	bl	80002f0 <memchr>
 800d5a4:	9a04      	ldr	r2, [sp, #16]
 800d5a6:	b9d8      	cbnz	r0, 800d5e0 <_vfiprintf_r+0x110>
 800d5a8:	06d1      	lsls	r1, r2, #27
 800d5aa:	bf44      	itt	mi
 800d5ac:	2320      	movmi	r3, #32
 800d5ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5b2:	0713      	lsls	r3, r2, #28
 800d5b4:	bf44      	itt	mi
 800d5b6:	232b      	movmi	r3, #43	@ 0x2b
 800d5b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d5c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5c2:	d015      	beq.n	800d5f0 <_vfiprintf_r+0x120>
 800d5c4:	9a07      	ldr	r2, [sp, #28]
 800d5c6:	4654      	mov	r4, sl
 800d5c8:	2000      	movs	r0, #0
 800d5ca:	f04f 0c0a 	mov.w	ip, #10
 800d5ce:	4621      	mov	r1, r4
 800d5d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5d4:	3b30      	subs	r3, #48	@ 0x30
 800d5d6:	2b09      	cmp	r3, #9
 800d5d8:	d94b      	bls.n	800d672 <_vfiprintf_r+0x1a2>
 800d5da:	b1b0      	cbz	r0, 800d60a <_vfiprintf_r+0x13a>
 800d5dc:	9207      	str	r2, [sp, #28]
 800d5de:	e014      	b.n	800d60a <_vfiprintf_r+0x13a>
 800d5e0:	eba0 0308 	sub.w	r3, r0, r8
 800d5e4:	fa09 f303 	lsl.w	r3, r9, r3
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	9304      	str	r3, [sp, #16]
 800d5ec:	46a2      	mov	sl, r4
 800d5ee:	e7d2      	b.n	800d596 <_vfiprintf_r+0xc6>
 800d5f0:	9b03      	ldr	r3, [sp, #12]
 800d5f2:	1d19      	adds	r1, r3, #4
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	9103      	str	r1, [sp, #12]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	bfbb      	ittet	lt
 800d5fc:	425b      	neglt	r3, r3
 800d5fe:	f042 0202 	orrlt.w	r2, r2, #2
 800d602:	9307      	strge	r3, [sp, #28]
 800d604:	9307      	strlt	r3, [sp, #28]
 800d606:	bfb8      	it	lt
 800d608:	9204      	strlt	r2, [sp, #16]
 800d60a:	7823      	ldrb	r3, [r4, #0]
 800d60c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d60e:	d10a      	bne.n	800d626 <_vfiprintf_r+0x156>
 800d610:	7863      	ldrb	r3, [r4, #1]
 800d612:	2b2a      	cmp	r3, #42	@ 0x2a
 800d614:	d132      	bne.n	800d67c <_vfiprintf_r+0x1ac>
 800d616:	9b03      	ldr	r3, [sp, #12]
 800d618:	1d1a      	adds	r2, r3, #4
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	9203      	str	r2, [sp, #12]
 800d61e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d622:	3402      	adds	r4, #2
 800d624:	9305      	str	r3, [sp, #20]
 800d626:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d6fc <_vfiprintf_r+0x22c>
 800d62a:	7821      	ldrb	r1, [r4, #0]
 800d62c:	2203      	movs	r2, #3
 800d62e:	4650      	mov	r0, sl
 800d630:	f7f2 fe5e 	bl	80002f0 <memchr>
 800d634:	b138      	cbz	r0, 800d646 <_vfiprintf_r+0x176>
 800d636:	9b04      	ldr	r3, [sp, #16]
 800d638:	eba0 000a 	sub.w	r0, r0, sl
 800d63c:	2240      	movs	r2, #64	@ 0x40
 800d63e:	4082      	lsls	r2, r0
 800d640:	4313      	orrs	r3, r2
 800d642:	3401      	adds	r4, #1
 800d644:	9304      	str	r3, [sp, #16]
 800d646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d64a:	4829      	ldr	r0, [pc, #164]	@ (800d6f0 <_vfiprintf_r+0x220>)
 800d64c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d650:	2206      	movs	r2, #6
 800d652:	f7f2 fe4d 	bl	80002f0 <memchr>
 800d656:	2800      	cmp	r0, #0
 800d658:	d03f      	beq.n	800d6da <_vfiprintf_r+0x20a>
 800d65a:	4b26      	ldr	r3, [pc, #152]	@ (800d6f4 <_vfiprintf_r+0x224>)
 800d65c:	bb1b      	cbnz	r3, 800d6a6 <_vfiprintf_r+0x1d6>
 800d65e:	9b03      	ldr	r3, [sp, #12]
 800d660:	3307      	adds	r3, #7
 800d662:	f023 0307 	bic.w	r3, r3, #7
 800d666:	3308      	adds	r3, #8
 800d668:	9303      	str	r3, [sp, #12]
 800d66a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d66c:	443b      	add	r3, r7
 800d66e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d670:	e76a      	b.n	800d548 <_vfiprintf_r+0x78>
 800d672:	fb0c 3202 	mla	r2, ip, r2, r3
 800d676:	460c      	mov	r4, r1
 800d678:	2001      	movs	r0, #1
 800d67a:	e7a8      	b.n	800d5ce <_vfiprintf_r+0xfe>
 800d67c:	2300      	movs	r3, #0
 800d67e:	3401      	adds	r4, #1
 800d680:	9305      	str	r3, [sp, #20]
 800d682:	4619      	mov	r1, r3
 800d684:	f04f 0c0a 	mov.w	ip, #10
 800d688:	4620      	mov	r0, r4
 800d68a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d68e:	3a30      	subs	r2, #48	@ 0x30
 800d690:	2a09      	cmp	r2, #9
 800d692:	d903      	bls.n	800d69c <_vfiprintf_r+0x1cc>
 800d694:	2b00      	cmp	r3, #0
 800d696:	d0c6      	beq.n	800d626 <_vfiprintf_r+0x156>
 800d698:	9105      	str	r1, [sp, #20]
 800d69a:	e7c4      	b.n	800d626 <_vfiprintf_r+0x156>
 800d69c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e7f0      	b.n	800d688 <_vfiprintf_r+0x1b8>
 800d6a6:	ab03      	add	r3, sp, #12
 800d6a8:	9300      	str	r3, [sp, #0]
 800d6aa:	462a      	mov	r2, r5
 800d6ac:	4b12      	ldr	r3, [pc, #72]	@ (800d6f8 <_vfiprintf_r+0x228>)
 800d6ae:	a904      	add	r1, sp, #16
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	f7fd fe21 	bl	800b2f8 <_printf_float>
 800d6b6:	4607      	mov	r7, r0
 800d6b8:	1c78      	adds	r0, r7, #1
 800d6ba:	d1d6      	bne.n	800d66a <_vfiprintf_r+0x19a>
 800d6bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6be:	07d9      	lsls	r1, r3, #31
 800d6c0:	d405      	bmi.n	800d6ce <_vfiprintf_r+0x1fe>
 800d6c2:	89ab      	ldrh	r3, [r5, #12]
 800d6c4:	059a      	lsls	r2, r3, #22
 800d6c6:	d402      	bmi.n	800d6ce <_vfiprintf_r+0x1fe>
 800d6c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6ca:	f7fe fb3f 	bl	800bd4c <__retarget_lock_release_recursive>
 800d6ce:	89ab      	ldrh	r3, [r5, #12]
 800d6d0:	065b      	lsls	r3, r3, #25
 800d6d2:	f53f af1f 	bmi.w	800d514 <_vfiprintf_r+0x44>
 800d6d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d6d8:	e71e      	b.n	800d518 <_vfiprintf_r+0x48>
 800d6da:	ab03      	add	r3, sp, #12
 800d6dc:	9300      	str	r3, [sp, #0]
 800d6de:	462a      	mov	r2, r5
 800d6e0:	4b05      	ldr	r3, [pc, #20]	@ (800d6f8 <_vfiprintf_r+0x228>)
 800d6e2:	a904      	add	r1, sp, #16
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	f7fe f88f 	bl	800b808 <_printf_i>
 800d6ea:	e7e4      	b.n	800d6b6 <_vfiprintf_r+0x1e6>
 800d6ec:	0800db70 	.word	0x0800db70
 800d6f0:	0800db7a 	.word	0x0800db7a
 800d6f4:	0800b2f9 	.word	0x0800b2f9
 800d6f8:	0800d4ad 	.word	0x0800d4ad
 800d6fc:	0800db76 	.word	0x0800db76

0800d700 <__swbuf_r>:
 800d700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d702:	460e      	mov	r6, r1
 800d704:	4614      	mov	r4, r2
 800d706:	4605      	mov	r5, r0
 800d708:	b118      	cbz	r0, 800d712 <__swbuf_r+0x12>
 800d70a:	6a03      	ldr	r3, [r0, #32]
 800d70c:	b90b      	cbnz	r3, 800d712 <__swbuf_r+0x12>
 800d70e:	f7fe fa25 	bl	800bb5c <__sinit>
 800d712:	69a3      	ldr	r3, [r4, #24]
 800d714:	60a3      	str	r3, [r4, #8]
 800d716:	89a3      	ldrh	r3, [r4, #12]
 800d718:	071a      	lsls	r2, r3, #28
 800d71a:	d501      	bpl.n	800d720 <__swbuf_r+0x20>
 800d71c:	6923      	ldr	r3, [r4, #16]
 800d71e:	b943      	cbnz	r3, 800d732 <__swbuf_r+0x32>
 800d720:	4621      	mov	r1, r4
 800d722:	4628      	mov	r0, r5
 800d724:	f000 f82a 	bl	800d77c <__swsetup_r>
 800d728:	b118      	cbz	r0, 800d732 <__swbuf_r+0x32>
 800d72a:	f04f 37ff 	mov.w	r7, #4294967295
 800d72e:	4638      	mov	r0, r7
 800d730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d732:	6823      	ldr	r3, [r4, #0]
 800d734:	6922      	ldr	r2, [r4, #16]
 800d736:	1a98      	subs	r0, r3, r2
 800d738:	6963      	ldr	r3, [r4, #20]
 800d73a:	b2f6      	uxtb	r6, r6
 800d73c:	4283      	cmp	r3, r0
 800d73e:	4637      	mov	r7, r6
 800d740:	dc05      	bgt.n	800d74e <__swbuf_r+0x4e>
 800d742:	4621      	mov	r1, r4
 800d744:	4628      	mov	r0, r5
 800d746:	f7ff fdf7 	bl	800d338 <_fflush_r>
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d1ed      	bne.n	800d72a <__swbuf_r+0x2a>
 800d74e:	68a3      	ldr	r3, [r4, #8]
 800d750:	3b01      	subs	r3, #1
 800d752:	60a3      	str	r3, [r4, #8]
 800d754:	6823      	ldr	r3, [r4, #0]
 800d756:	1c5a      	adds	r2, r3, #1
 800d758:	6022      	str	r2, [r4, #0]
 800d75a:	701e      	strb	r6, [r3, #0]
 800d75c:	6962      	ldr	r2, [r4, #20]
 800d75e:	1c43      	adds	r3, r0, #1
 800d760:	429a      	cmp	r2, r3
 800d762:	d004      	beq.n	800d76e <__swbuf_r+0x6e>
 800d764:	89a3      	ldrh	r3, [r4, #12]
 800d766:	07db      	lsls	r3, r3, #31
 800d768:	d5e1      	bpl.n	800d72e <__swbuf_r+0x2e>
 800d76a:	2e0a      	cmp	r6, #10
 800d76c:	d1df      	bne.n	800d72e <__swbuf_r+0x2e>
 800d76e:	4621      	mov	r1, r4
 800d770:	4628      	mov	r0, r5
 800d772:	f7ff fde1 	bl	800d338 <_fflush_r>
 800d776:	2800      	cmp	r0, #0
 800d778:	d0d9      	beq.n	800d72e <__swbuf_r+0x2e>
 800d77a:	e7d6      	b.n	800d72a <__swbuf_r+0x2a>

0800d77c <__swsetup_r>:
 800d77c:	b538      	push	{r3, r4, r5, lr}
 800d77e:	4b29      	ldr	r3, [pc, #164]	@ (800d824 <__swsetup_r+0xa8>)
 800d780:	4605      	mov	r5, r0
 800d782:	6818      	ldr	r0, [r3, #0]
 800d784:	460c      	mov	r4, r1
 800d786:	b118      	cbz	r0, 800d790 <__swsetup_r+0x14>
 800d788:	6a03      	ldr	r3, [r0, #32]
 800d78a:	b90b      	cbnz	r3, 800d790 <__swsetup_r+0x14>
 800d78c:	f7fe f9e6 	bl	800bb5c <__sinit>
 800d790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d794:	0719      	lsls	r1, r3, #28
 800d796:	d422      	bmi.n	800d7de <__swsetup_r+0x62>
 800d798:	06da      	lsls	r2, r3, #27
 800d79a:	d407      	bmi.n	800d7ac <__swsetup_r+0x30>
 800d79c:	2209      	movs	r2, #9
 800d79e:	602a      	str	r2, [r5, #0]
 800d7a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7a4:	81a3      	strh	r3, [r4, #12]
 800d7a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7aa:	e033      	b.n	800d814 <__swsetup_r+0x98>
 800d7ac:	0758      	lsls	r0, r3, #29
 800d7ae:	d512      	bpl.n	800d7d6 <__swsetup_r+0x5a>
 800d7b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7b2:	b141      	cbz	r1, 800d7c6 <__swsetup_r+0x4a>
 800d7b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7b8:	4299      	cmp	r1, r3
 800d7ba:	d002      	beq.n	800d7c2 <__swsetup_r+0x46>
 800d7bc:	4628      	mov	r0, r5
 800d7be:	f7ff f8bd 	bl	800c93c <_free_r>
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7c6:	89a3      	ldrh	r3, [r4, #12]
 800d7c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d7cc:	81a3      	strh	r3, [r4, #12]
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	6063      	str	r3, [r4, #4]
 800d7d2:	6923      	ldr	r3, [r4, #16]
 800d7d4:	6023      	str	r3, [r4, #0]
 800d7d6:	89a3      	ldrh	r3, [r4, #12]
 800d7d8:	f043 0308 	orr.w	r3, r3, #8
 800d7dc:	81a3      	strh	r3, [r4, #12]
 800d7de:	6923      	ldr	r3, [r4, #16]
 800d7e0:	b94b      	cbnz	r3, 800d7f6 <__swsetup_r+0x7a>
 800d7e2:	89a3      	ldrh	r3, [r4, #12]
 800d7e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d7e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7ec:	d003      	beq.n	800d7f6 <__swsetup_r+0x7a>
 800d7ee:	4621      	mov	r1, r4
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	f000 f883 	bl	800d8fc <__smakebuf_r>
 800d7f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7fa:	f013 0201 	ands.w	r2, r3, #1
 800d7fe:	d00a      	beq.n	800d816 <__swsetup_r+0x9a>
 800d800:	2200      	movs	r2, #0
 800d802:	60a2      	str	r2, [r4, #8]
 800d804:	6962      	ldr	r2, [r4, #20]
 800d806:	4252      	negs	r2, r2
 800d808:	61a2      	str	r2, [r4, #24]
 800d80a:	6922      	ldr	r2, [r4, #16]
 800d80c:	b942      	cbnz	r2, 800d820 <__swsetup_r+0xa4>
 800d80e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d812:	d1c5      	bne.n	800d7a0 <__swsetup_r+0x24>
 800d814:	bd38      	pop	{r3, r4, r5, pc}
 800d816:	0799      	lsls	r1, r3, #30
 800d818:	bf58      	it	pl
 800d81a:	6962      	ldrpl	r2, [r4, #20]
 800d81c:	60a2      	str	r2, [r4, #8]
 800d81e:	e7f4      	b.n	800d80a <__swsetup_r+0x8e>
 800d820:	2000      	movs	r0, #0
 800d822:	e7f7      	b.n	800d814 <__swsetup_r+0x98>
 800d824:	2400001c 	.word	0x2400001c

0800d828 <_raise_r>:
 800d828:	291f      	cmp	r1, #31
 800d82a:	b538      	push	{r3, r4, r5, lr}
 800d82c:	4605      	mov	r5, r0
 800d82e:	460c      	mov	r4, r1
 800d830:	d904      	bls.n	800d83c <_raise_r+0x14>
 800d832:	2316      	movs	r3, #22
 800d834:	6003      	str	r3, [r0, #0]
 800d836:	f04f 30ff 	mov.w	r0, #4294967295
 800d83a:	bd38      	pop	{r3, r4, r5, pc}
 800d83c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d83e:	b112      	cbz	r2, 800d846 <_raise_r+0x1e>
 800d840:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d844:	b94b      	cbnz	r3, 800d85a <_raise_r+0x32>
 800d846:	4628      	mov	r0, r5
 800d848:	f000 f830 	bl	800d8ac <_getpid_r>
 800d84c:	4622      	mov	r2, r4
 800d84e:	4601      	mov	r1, r0
 800d850:	4628      	mov	r0, r5
 800d852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d856:	f000 b817 	b.w	800d888 <_kill_r>
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	d00a      	beq.n	800d874 <_raise_r+0x4c>
 800d85e:	1c59      	adds	r1, r3, #1
 800d860:	d103      	bne.n	800d86a <_raise_r+0x42>
 800d862:	2316      	movs	r3, #22
 800d864:	6003      	str	r3, [r0, #0]
 800d866:	2001      	movs	r0, #1
 800d868:	e7e7      	b.n	800d83a <_raise_r+0x12>
 800d86a:	2100      	movs	r1, #0
 800d86c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d870:	4620      	mov	r0, r4
 800d872:	4798      	blx	r3
 800d874:	2000      	movs	r0, #0
 800d876:	e7e0      	b.n	800d83a <_raise_r+0x12>

0800d878 <raise>:
 800d878:	4b02      	ldr	r3, [pc, #8]	@ (800d884 <raise+0xc>)
 800d87a:	4601      	mov	r1, r0
 800d87c:	6818      	ldr	r0, [r3, #0]
 800d87e:	f7ff bfd3 	b.w	800d828 <_raise_r>
 800d882:	bf00      	nop
 800d884:	2400001c 	.word	0x2400001c

0800d888 <_kill_r>:
 800d888:	b538      	push	{r3, r4, r5, lr}
 800d88a:	4d07      	ldr	r5, [pc, #28]	@ (800d8a8 <_kill_r+0x20>)
 800d88c:	2300      	movs	r3, #0
 800d88e:	4604      	mov	r4, r0
 800d890:	4608      	mov	r0, r1
 800d892:	4611      	mov	r1, r2
 800d894:	602b      	str	r3, [r5, #0]
 800d896:	f7f3 fd1d 	bl	80012d4 <_kill>
 800d89a:	1c43      	adds	r3, r0, #1
 800d89c:	d102      	bne.n	800d8a4 <_kill_r+0x1c>
 800d89e:	682b      	ldr	r3, [r5, #0]
 800d8a0:	b103      	cbz	r3, 800d8a4 <_kill_r+0x1c>
 800d8a2:	6023      	str	r3, [r4, #0]
 800d8a4:	bd38      	pop	{r3, r4, r5, pc}
 800d8a6:	bf00      	nop
 800d8a8:	24000a80 	.word	0x24000a80

0800d8ac <_getpid_r>:
 800d8ac:	f7f3 bd0a 	b.w	80012c4 <_getpid>

0800d8b0 <__swhatbuf_r>:
 800d8b0:	b570      	push	{r4, r5, r6, lr}
 800d8b2:	460c      	mov	r4, r1
 800d8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8b8:	2900      	cmp	r1, #0
 800d8ba:	b096      	sub	sp, #88	@ 0x58
 800d8bc:	4615      	mov	r5, r2
 800d8be:	461e      	mov	r6, r3
 800d8c0:	da0d      	bge.n	800d8de <__swhatbuf_r+0x2e>
 800d8c2:	89a3      	ldrh	r3, [r4, #12]
 800d8c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d8c8:	f04f 0100 	mov.w	r1, #0
 800d8cc:	bf14      	ite	ne
 800d8ce:	2340      	movne	r3, #64	@ 0x40
 800d8d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d8d4:	2000      	movs	r0, #0
 800d8d6:	6031      	str	r1, [r6, #0]
 800d8d8:	602b      	str	r3, [r5, #0]
 800d8da:	b016      	add	sp, #88	@ 0x58
 800d8dc:	bd70      	pop	{r4, r5, r6, pc}
 800d8de:	466a      	mov	r2, sp
 800d8e0:	f000 f848 	bl	800d974 <_fstat_r>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	dbec      	blt.n	800d8c2 <__swhatbuf_r+0x12>
 800d8e8:	9901      	ldr	r1, [sp, #4]
 800d8ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d8ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d8f2:	4259      	negs	r1, r3
 800d8f4:	4159      	adcs	r1, r3
 800d8f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8fa:	e7eb      	b.n	800d8d4 <__swhatbuf_r+0x24>

0800d8fc <__smakebuf_r>:
 800d8fc:	898b      	ldrh	r3, [r1, #12]
 800d8fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d900:	079d      	lsls	r5, r3, #30
 800d902:	4606      	mov	r6, r0
 800d904:	460c      	mov	r4, r1
 800d906:	d507      	bpl.n	800d918 <__smakebuf_r+0x1c>
 800d908:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d90c:	6023      	str	r3, [r4, #0]
 800d90e:	6123      	str	r3, [r4, #16]
 800d910:	2301      	movs	r3, #1
 800d912:	6163      	str	r3, [r4, #20]
 800d914:	b003      	add	sp, #12
 800d916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d918:	ab01      	add	r3, sp, #4
 800d91a:	466a      	mov	r2, sp
 800d91c:	f7ff ffc8 	bl	800d8b0 <__swhatbuf_r>
 800d920:	9f00      	ldr	r7, [sp, #0]
 800d922:	4605      	mov	r5, r0
 800d924:	4639      	mov	r1, r7
 800d926:	4630      	mov	r0, r6
 800d928:	f7ff f87c 	bl	800ca24 <_malloc_r>
 800d92c:	b948      	cbnz	r0, 800d942 <__smakebuf_r+0x46>
 800d92e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d932:	059a      	lsls	r2, r3, #22
 800d934:	d4ee      	bmi.n	800d914 <__smakebuf_r+0x18>
 800d936:	f023 0303 	bic.w	r3, r3, #3
 800d93a:	f043 0302 	orr.w	r3, r3, #2
 800d93e:	81a3      	strh	r3, [r4, #12]
 800d940:	e7e2      	b.n	800d908 <__smakebuf_r+0xc>
 800d942:	89a3      	ldrh	r3, [r4, #12]
 800d944:	6020      	str	r0, [r4, #0]
 800d946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d94a:	81a3      	strh	r3, [r4, #12]
 800d94c:	9b01      	ldr	r3, [sp, #4]
 800d94e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d952:	b15b      	cbz	r3, 800d96c <__smakebuf_r+0x70>
 800d954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d958:	4630      	mov	r0, r6
 800d95a:	f000 f81d 	bl	800d998 <_isatty_r>
 800d95e:	b128      	cbz	r0, 800d96c <__smakebuf_r+0x70>
 800d960:	89a3      	ldrh	r3, [r4, #12]
 800d962:	f023 0303 	bic.w	r3, r3, #3
 800d966:	f043 0301 	orr.w	r3, r3, #1
 800d96a:	81a3      	strh	r3, [r4, #12]
 800d96c:	89a3      	ldrh	r3, [r4, #12]
 800d96e:	431d      	orrs	r5, r3
 800d970:	81a5      	strh	r5, [r4, #12]
 800d972:	e7cf      	b.n	800d914 <__smakebuf_r+0x18>

0800d974 <_fstat_r>:
 800d974:	b538      	push	{r3, r4, r5, lr}
 800d976:	4d07      	ldr	r5, [pc, #28]	@ (800d994 <_fstat_r+0x20>)
 800d978:	2300      	movs	r3, #0
 800d97a:	4604      	mov	r4, r0
 800d97c:	4608      	mov	r0, r1
 800d97e:	4611      	mov	r1, r2
 800d980:	602b      	str	r3, [r5, #0]
 800d982:	f7f3 fd07 	bl	8001394 <_fstat>
 800d986:	1c43      	adds	r3, r0, #1
 800d988:	d102      	bne.n	800d990 <_fstat_r+0x1c>
 800d98a:	682b      	ldr	r3, [r5, #0]
 800d98c:	b103      	cbz	r3, 800d990 <_fstat_r+0x1c>
 800d98e:	6023      	str	r3, [r4, #0]
 800d990:	bd38      	pop	{r3, r4, r5, pc}
 800d992:	bf00      	nop
 800d994:	24000a80 	.word	0x24000a80

0800d998 <_isatty_r>:
 800d998:	b538      	push	{r3, r4, r5, lr}
 800d99a:	4d06      	ldr	r5, [pc, #24]	@ (800d9b4 <_isatty_r+0x1c>)
 800d99c:	2300      	movs	r3, #0
 800d99e:	4604      	mov	r4, r0
 800d9a0:	4608      	mov	r0, r1
 800d9a2:	602b      	str	r3, [r5, #0]
 800d9a4:	f7f3 fd06 	bl	80013b4 <_isatty>
 800d9a8:	1c43      	adds	r3, r0, #1
 800d9aa:	d102      	bne.n	800d9b2 <_isatty_r+0x1a>
 800d9ac:	682b      	ldr	r3, [r5, #0]
 800d9ae:	b103      	cbz	r3, 800d9b2 <_isatty_r+0x1a>
 800d9b0:	6023      	str	r3, [r4, #0]
 800d9b2:	bd38      	pop	{r3, r4, r5, pc}
 800d9b4:	24000a80 	.word	0x24000a80

0800d9b8 <_init>:
 800d9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ba:	bf00      	nop
 800d9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9be:	bc08      	pop	{r3}
 800d9c0:	469e      	mov	lr, r3
 800d9c2:	4770      	bx	lr

0800d9c4 <_fini>:
 800d9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9c6:	bf00      	nop
 800d9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9ca:	bc08      	pop	{r3}
 800d9cc:	469e      	mov	lr, r3
 800d9ce:	4770      	bx	lr
