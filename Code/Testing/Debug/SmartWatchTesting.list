
SmartWatchTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e580  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800e830  0800e830  0000f830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ec74  0800ec74  0000fc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ec7c  0800ec7c  0000fc7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ec80  0800ec80  0000fc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800ec84  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c34  240001d8  0800ee5c  000101d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000e0c  0800ee5c  00010e0c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d54a  00000000  00000000  00010206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003bb2  00000000  00000000  0002d750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001328  00000000  00000000  00031308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000eb7  00000000  00000000  00032630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000334ba  00000000  00000000  000334e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001db44  00000000  00000000  000669a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013dd07  00000000  00000000  000844e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c21ec  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005cb4  00000000  00000000  001c2230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000087  00000000  00000000  001c7ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001d8 	.word	0x240001d8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800e818 	.word	0x0800e818

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	0800e818 	.word	0x0800e818

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b988 	b.w	80006c8 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	468e      	mov	lr, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	4688      	mov	r8, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4617      	mov	r7, r2
 80003e4:	d962      	bls.n	80004ac <__udivmoddi4+0xdc>
 80003e6:	fab2 f682 	clz	r6, r2
 80003ea:	b14e      	cbz	r6, 8000400 <__udivmoddi4+0x30>
 80003ec:	f1c6 0320 	rsb	r3, r6, #32
 80003f0:	fa01 f806 	lsl.w	r8, r1, r6
 80003f4:	fa20 f303 	lsr.w	r3, r0, r3
 80003f8:	40b7      	lsls	r7, r6
 80003fa:	ea43 0808 	orr.w	r8, r3, r8
 80003fe:	40b4      	lsls	r4, r6
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	fbb8 f1fe 	udiv	r1, r8, lr
 800040c:	0c23      	lsrs	r3, r4, #16
 800040e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fb01 f20c 	mul.w	r2, r1, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0x62>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f101 30ff 	add.w	r0, r1, #4294967295
 8000424:	f080 80ea 	bcs.w	80005fc <__udivmoddi4+0x22c>
 8000428:	429a      	cmp	r2, r3
 800042a:	f240 80e7 	bls.w	80005fc <__udivmoddi4+0x22c>
 800042e:	3902      	subs	r1, #2
 8000430:	443b      	add	r3, r7
 8000432:	1a9a      	subs	r2, r3, r2
 8000434:	b2a3      	uxth	r3, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000442:	fb00 fc0c 	mul.w	ip, r0, ip
 8000446:	459c      	cmp	ip, r3
 8000448:	d909      	bls.n	800045e <__udivmoddi4+0x8e>
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000450:	f080 80d6 	bcs.w	8000600 <__udivmoddi4+0x230>
 8000454:	459c      	cmp	ip, r3
 8000456:	f240 80d3 	bls.w	8000600 <__udivmoddi4+0x230>
 800045a:	443b      	add	r3, r7
 800045c:	3802      	subs	r0, #2
 800045e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000462:	eba3 030c 	sub.w	r3, r3, ip
 8000466:	2100      	movs	r1, #0
 8000468:	b11d      	cbz	r5, 8000472 <__udivmoddi4+0xa2>
 800046a:	40f3      	lsrs	r3, r6
 800046c:	2200      	movs	r2, #0
 800046e:	e9c5 3200 	strd	r3, r2, [r5]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d905      	bls.n	8000486 <__udivmoddi4+0xb6>
 800047a:	b10d      	cbz	r5, 8000480 <__udivmoddi4+0xb0>
 800047c:	e9c5 0100 	strd	r0, r1, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	4608      	mov	r0, r1
 8000484:	e7f5      	b.n	8000472 <__udivmoddi4+0xa2>
 8000486:	fab3 f183 	clz	r1, r3
 800048a:	2900      	cmp	r1, #0
 800048c:	d146      	bne.n	800051c <__udivmoddi4+0x14c>
 800048e:	4573      	cmp	r3, lr
 8000490:	d302      	bcc.n	8000498 <__udivmoddi4+0xc8>
 8000492:	4282      	cmp	r2, r0
 8000494:	f200 8105 	bhi.w	80006a2 <__udivmoddi4+0x2d2>
 8000498:	1a84      	subs	r4, r0, r2
 800049a:	eb6e 0203 	sbc.w	r2, lr, r3
 800049e:	2001      	movs	r0, #1
 80004a0:	4690      	mov	r8, r2
 80004a2:	2d00      	cmp	r5, #0
 80004a4:	d0e5      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004a6:	e9c5 4800 	strd	r4, r8, [r5]
 80004aa:	e7e2      	b.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f000 8090 	beq.w	80005d2 <__udivmoddi4+0x202>
 80004b2:	fab2 f682 	clz	r6, r2
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	f040 80a4 	bne.w	8000604 <__udivmoddi4+0x234>
 80004bc:	1a8a      	subs	r2, r1, r2
 80004be:	0c03      	lsrs	r3, r0, #16
 80004c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c4:	b280      	uxth	r0, r0
 80004c6:	b2bc      	uxth	r4, r7
 80004c8:	2101      	movs	r1, #1
 80004ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80004d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004d6:	fb04 f20c 	mul.w	r2, r4, ip
 80004da:	429a      	cmp	r2, r3
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x11e>
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004e4:	d202      	bcs.n	80004ec <__udivmoddi4+0x11c>
 80004e6:	429a      	cmp	r2, r3
 80004e8:	f200 80e0 	bhi.w	80006ac <__udivmoddi4+0x2dc>
 80004ec:	46c4      	mov	ip, r8
 80004ee:	1a9b      	subs	r3, r3, r2
 80004f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004fc:	fb02 f404 	mul.w	r4, r2, r4
 8000500:	429c      	cmp	r4, r3
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x144>
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	f102 30ff 	add.w	r0, r2, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x142>
 800050c:	429c      	cmp	r4, r3
 800050e:	f200 80ca 	bhi.w	80006a6 <__udivmoddi4+0x2d6>
 8000512:	4602      	mov	r2, r0
 8000514:	1b1b      	subs	r3, r3, r4
 8000516:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800051a:	e7a5      	b.n	8000468 <__udivmoddi4+0x98>
 800051c:	f1c1 0620 	rsb	r6, r1, #32
 8000520:	408b      	lsls	r3, r1
 8000522:	fa22 f706 	lsr.w	r7, r2, r6
 8000526:	431f      	orrs	r7, r3
 8000528:	fa0e f401 	lsl.w	r4, lr, r1
 800052c:	fa20 f306 	lsr.w	r3, r0, r6
 8000530:	fa2e fe06 	lsr.w	lr, lr, r6
 8000534:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000538:	4323      	orrs	r3, r4
 800053a:	fa00 f801 	lsl.w	r8, r0, r1
 800053e:	fa1f fc87 	uxth.w	ip, r7
 8000542:	fbbe f0f9 	udiv	r0, lr, r9
 8000546:	0c1c      	lsrs	r4, r3, #16
 8000548:	fb09 ee10 	mls	lr, r9, r0, lr
 800054c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000550:	fb00 fe0c 	mul.w	lr, r0, ip
 8000554:	45a6      	cmp	lr, r4
 8000556:	fa02 f201 	lsl.w	r2, r2, r1
 800055a:	d909      	bls.n	8000570 <__udivmoddi4+0x1a0>
 800055c:	193c      	adds	r4, r7, r4
 800055e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000562:	f080 809c 	bcs.w	800069e <__udivmoddi4+0x2ce>
 8000566:	45a6      	cmp	lr, r4
 8000568:	f240 8099 	bls.w	800069e <__udivmoddi4+0x2ce>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	eba4 040e 	sub.w	r4, r4, lr
 8000574:	fa1f fe83 	uxth.w	lr, r3
 8000578:	fbb4 f3f9 	udiv	r3, r4, r9
 800057c:	fb09 4413 	mls	r4, r9, r3, r4
 8000580:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000584:	fb03 fc0c 	mul.w	ip, r3, ip
 8000588:	45a4      	cmp	ip, r4
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x1ce>
 800058c:	193c      	adds	r4, r7, r4
 800058e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000592:	f080 8082 	bcs.w	800069a <__udivmoddi4+0x2ca>
 8000596:	45a4      	cmp	ip, r4
 8000598:	d97f      	bls.n	800069a <__udivmoddi4+0x2ca>
 800059a:	3b02      	subs	r3, #2
 800059c:	443c      	add	r4, r7
 800059e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005a2:	eba4 040c 	sub.w	r4, r4, ip
 80005a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005aa:	4564      	cmp	r4, ip
 80005ac:	4673      	mov	r3, lr
 80005ae:	46e1      	mov	r9, ip
 80005b0:	d362      	bcc.n	8000678 <__udivmoddi4+0x2a8>
 80005b2:	d05f      	beq.n	8000674 <__udivmoddi4+0x2a4>
 80005b4:	b15d      	cbz	r5, 80005ce <__udivmoddi4+0x1fe>
 80005b6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ba:	eb64 0409 	sbc.w	r4, r4, r9
 80005be:	fa04 f606 	lsl.w	r6, r4, r6
 80005c2:	fa22 f301 	lsr.w	r3, r2, r1
 80005c6:	431e      	orrs	r6, r3
 80005c8:	40cc      	lsrs	r4, r1
 80005ca:	e9c5 6400 	strd	r6, r4, [r5]
 80005ce:	2100      	movs	r1, #0
 80005d0:	e74f      	b.n	8000472 <__udivmoddi4+0xa2>
 80005d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005d6:	0c01      	lsrs	r1, r0, #16
 80005d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005dc:	b280      	uxth	r0, r0
 80005de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005e2:	463b      	mov	r3, r7
 80005e4:	4638      	mov	r0, r7
 80005e6:	463c      	mov	r4, r7
 80005e8:	46b8      	mov	r8, r7
 80005ea:	46be      	mov	lr, r7
 80005ec:	2620      	movs	r6, #32
 80005ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80005f2:	eba2 0208 	sub.w	r2, r2, r8
 80005f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005fa:	e766      	b.n	80004ca <__udivmoddi4+0xfa>
 80005fc:	4601      	mov	r1, r0
 80005fe:	e718      	b.n	8000432 <__udivmoddi4+0x62>
 8000600:	4610      	mov	r0, r2
 8000602:	e72c      	b.n	800045e <__udivmoddi4+0x8e>
 8000604:	f1c6 0220 	rsb	r2, r6, #32
 8000608:	fa2e f302 	lsr.w	r3, lr, r2
 800060c:	40b7      	lsls	r7, r6
 800060e:	40b1      	lsls	r1, r6
 8000610:	fa20 f202 	lsr.w	r2, r0, r2
 8000614:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000618:	430a      	orrs	r2, r1
 800061a:	fbb3 f8fe 	udiv	r8, r3, lr
 800061e:	b2bc      	uxth	r4, r7
 8000620:	fb0e 3318 	mls	r3, lr, r8, r3
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800062a:	fb08 f904 	mul.w	r9, r8, r4
 800062e:	40b0      	lsls	r0, r6
 8000630:	4589      	cmp	r9, r1
 8000632:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000636:	b280      	uxth	r0, r0
 8000638:	d93e      	bls.n	80006b8 <__udivmoddi4+0x2e8>
 800063a:	1879      	adds	r1, r7, r1
 800063c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000640:	d201      	bcs.n	8000646 <__udivmoddi4+0x276>
 8000642:	4589      	cmp	r9, r1
 8000644:	d81f      	bhi.n	8000686 <__udivmoddi4+0x2b6>
 8000646:	eba1 0109 	sub.w	r1, r1, r9
 800064a:	fbb1 f9fe 	udiv	r9, r1, lr
 800064e:	fb09 f804 	mul.w	r8, r9, r4
 8000652:	fb0e 1119 	mls	r1, lr, r9, r1
 8000656:	b292      	uxth	r2, r2
 8000658:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800065c:	4542      	cmp	r2, r8
 800065e:	d229      	bcs.n	80006b4 <__udivmoddi4+0x2e4>
 8000660:	18ba      	adds	r2, r7, r2
 8000662:	f109 31ff 	add.w	r1, r9, #4294967295
 8000666:	d2c4      	bcs.n	80005f2 <__udivmoddi4+0x222>
 8000668:	4542      	cmp	r2, r8
 800066a:	d2c2      	bcs.n	80005f2 <__udivmoddi4+0x222>
 800066c:	f1a9 0102 	sub.w	r1, r9, #2
 8000670:	443a      	add	r2, r7
 8000672:	e7be      	b.n	80005f2 <__udivmoddi4+0x222>
 8000674:	45f0      	cmp	r8, lr
 8000676:	d29d      	bcs.n	80005b4 <__udivmoddi4+0x1e4>
 8000678:	ebbe 0302 	subs.w	r3, lr, r2
 800067c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000680:	3801      	subs	r0, #1
 8000682:	46e1      	mov	r9, ip
 8000684:	e796      	b.n	80005b4 <__udivmoddi4+0x1e4>
 8000686:	eba7 0909 	sub.w	r9, r7, r9
 800068a:	4449      	add	r1, r9
 800068c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000690:	fbb1 f9fe 	udiv	r9, r1, lr
 8000694:	fb09 f804 	mul.w	r8, r9, r4
 8000698:	e7db      	b.n	8000652 <__udivmoddi4+0x282>
 800069a:	4673      	mov	r3, lr
 800069c:	e77f      	b.n	800059e <__udivmoddi4+0x1ce>
 800069e:	4650      	mov	r0, sl
 80006a0:	e766      	b.n	8000570 <__udivmoddi4+0x1a0>
 80006a2:	4608      	mov	r0, r1
 80006a4:	e6fd      	b.n	80004a2 <__udivmoddi4+0xd2>
 80006a6:	443b      	add	r3, r7
 80006a8:	3a02      	subs	r2, #2
 80006aa:	e733      	b.n	8000514 <__udivmoddi4+0x144>
 80006ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80006b0:	443b      	add	r3, r7
 80006b2:	e71c      	b.n	80004ee <__udivmoddi4+0x11e>
 80006b4:	4649      	mov	r1, r9
 80006b6:	e79c      	b.n	80005f2 <__udivmoddi4+0x222>
 80006b8:	eba1 0109 	sub.w	r1, r1, r9
 80006bc:	46c4      	mov	ip, r8
 80006be:	fbb1 f9fe 	udiv	r9, r1, lr
 80006c2:	fb09 f804 	mul.w	r8, r9, r4
 80006c6:	e7c4      	b.n	8000652 <__udivmoddi4+0x282>

080006c8 <__aeabi_idiv0>:
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop

080006cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006d4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80006d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	200b      	movs	r0, #11
 80006f6:	f001 fce2 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006fa:	200b      	movs	r0, #11
 80006fc:	f001 fcf9 	bl	80020f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	200c      	movs	r0, #12
 8000706:	f001 fcda 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800070a:	200c      	movs	r0, #12
 800070c:	f001 fcf1 	bl	80020f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	200d      	movs	r0, #13
 8000716:	f001 fcd2 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800071a:	200d      	movs	r0, #13
 800071c:	f001 fce9 	bl	80020f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	200e      	movs	r0, #14
 8000726:	f001 fcca 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800072a:	200e      	movs	r0, #14
 800072c:	f001 fce1 	bl	80020f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2010      	movs	r0, #16
 8000736:	f001 fcc2 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800073a:	2010      	movs	r0, #16
 800073c:	f001 fcd9 	bl	80020f2 <HAL_NVIC_EnableIRQ>

}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58024400 	.word	0x58024400

0800074c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	@ 0x30
 8000750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b99      	ldr	r3, [pc, #612]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 8000764:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000768:	4a97      	ldr	r2, [pc, #604]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000772:	4b95      	ldr	r3, [pc, #596]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 8000774:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000780:	4b91      	ldr	r3, [pc, #580]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 8000782:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000786:	4a90      	ldr	r2, [pc, #576]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000790:	4b8d      	ldr	r3, [pc, #564]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 8000792:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b8a      	ldr	r3, [pc, #552]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a4:	4a88      	ldr	r2, [pc, #544]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ae:	4b86      	ldr	r3, [pc, #536]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007bc:	4b82      	ldr	r3, [pc, #520]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007c2:	4a81      	ldr	r2, [pc, #516]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007cc:	4b7e      	ldr	r3, [pc, #504]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	4b7b      	ldr	r3, [pc, #492]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007e0:	4a79      	ldr	r2, [pc, #484]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ea:	4b77      	ldr	r3, [pc, #476]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007f0:	f003 0310 	and.w	r3, r3, #16
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f8:	4b73      	ldr	r3, [pc, #460]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007fe:	4a72      	ldr	r2, [pc, #456]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000808:	4b6f      	ldr	r3, [pc, #444]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 800080a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000816:	4b6c      	ldr	r3, [pc, #432]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 8000818:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800081c:	4a6a      	ldr	r2, [pc, #424]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 800081e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000822:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000826:	4b68      	ldr	r3, [pc, #416]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 8000828:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800082c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU6500_AD0_GPIO_Port, MPU6500_AD0_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2108      	movs	r1, #8
 8000838:	4864      	ldr	r0, [pc, #400]	@ (80009cc <MX_GPIO_Init+0x280>)
 800083a:	f004 fd87 	bl	800534c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000844:	4862      	ldr	r0, [pc, #392]	@ (80009d0 <MX_GPIO_Init+0x284>)
 8000846:	f004 fd81 	bl	800534c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000850:	4860      	ldr	r0, [pc, #384]	@ (80009d4 <MX_GPIO_Init+0x288>)
 8000852:	f004 fd7b 	bl	800534c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800085c:	485e      	ldr	r0, [pc, #376]	@ (80009d8 <MX_GPIO_Init+0x28c>)
 800085e:	f004 fd75 	bl	800534c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000868:	485b      	ldr	r0, [pc, #364]	@ (80009d8 <MX_GPIO_Init+0x28c>)
 800086a:	f004 fd6f 	bl	800534c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2140      	movs	r1, #64	@ 0x40
 8000872:	485a      	ldr	r0, [pc, #360]	@ (80009dc <MX_GPIO_Init+0x290>)
 8000874:	f004 fd6a 	bl	800534c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800087e:	4858      	ldr	r0, [pc, #352]	@ (80009e0 <MX_GPIO_Init+0x294>)
 8000880:	f004 fd64 	bl	800534c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_BLK_GPIO_Port, ST7789_BLK_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2110      	movs	r1, #16
 8000888:	4851      	ldr	r0, [pc, #324]	@ (80009d0 <MX_GPIO_Init+0x284>)
 800088a:	f004 fd5f 	bl	800534c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2102      	movs	r1, #2
 8000892:	4850      	ldr	r0, [pc, #320]	@ (80009d4 <MX_GPIO_Init+0x288>)
 8000894:	f004 fd5a 	bl	800534c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : InputButton_Pin */
  GPIO_InitStruct.Pin = InputButton_Pin;
 8000898:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(InputButton_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	484b      	ldr	r0, [pc, #300]	@ (80009dc <MX_GPIO_Init+0x290>)
 80008b0:	f004 fb9c 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6500_AD0_Pin */
  GPIO_InitStruct.Pin = MPU6500_AD0_Pin;
 80008b4:	2308      	movs	r3, #8
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MPU6500_AD0_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4840      	ldr	r0, [pc, #256]	@ (80009cc <MX_GPIO_Init+0x280>)
 80008cc:	f004 fb8e 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin ST7789_BLK_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|ST7789_BLK_Pin;
 80008d0:	f244 0311 	movw	r3, #16401	@ 0x4011
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4839      	ldr	r0, [pc, #228]	@ (80009d0 <MX_GPIO_Init+0x284>)
 80008ea:	f004 fb7f 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX30102_INT_Pin */
  GPIO_InitStruct.Pin = MAX30102_INT_Pin;
 80008ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MAX30102_INT_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4833      	ldr	r0, [pc, #204]	@ (80009d4 <MX_GPIO_Init+0x288>)
 8000906:	f004 fb71 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PE15 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|LD2_Pin;
 800090a:	f248 0302 	movw	r3, #32770	@ 0x8002
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	482c      	ldr	r0, [pc, #176]	@ (80009d4 <MX_GPIO_Init+0x288>)
 8000924:	f004 fb62 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin;
 8000928:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000936:	2302      	movs	r3, #2
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_DC_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4825      	ldr	r0, [pc, #148]	@ (80009d8 <MX_GPIO_Init+0x28c>)
 8000942:	f004 fb53 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin;
 8000946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_RST_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	481e      	ldr	r0, [pc, #120]	@ (80009d8 <MX_GPIO_Init+0x28c>)
 8000960:	f004 fb44 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000964:	2340      	movs	r3, #64	@ 0x40
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4818      	ldr	r0, [pc, #96]	@ (80009dc <MX_GPIO_Init+0x290>)
 800097c:	f004 fb36 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 8000980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4811      	ldr	r0, [pc, #68]	@ (80009e0 <MX_GPIO_Init+0x294>)
 800099a:	f004 fb27 	bl	8004fec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	2017      	movs	r0, #23
 80009a4:	f001 fb8b 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009a8:	2017      	movs	r0, #23
 80009aa:	f001 fba2 	bl	80020f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	2028      	movs	r0, #40	@ 0x28
 80009b4:	f001 fb83 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009b8:	2028      	movs	r0, #40	@ 0x28
 80009ba:	f001 fb9a 	bl	80020f2 <HAL_NVIC_EnableIRQ>

}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	@ 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	58024400 	.word	0x58024400
 80009cc:	58020000 	.word	0x58020000
 80009d0:	58020400 	.word	0x58020400
 80009d4:	58021000 	.word	0x58021000
 80009d8:	58020c00 	.word	0x58020c00
 80009dc:	58020800 	.word	0x58020800
 80009e0:	58021800 	.word	0x58021800

080009e4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_I2C1_Init+0x74>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	@ (8000a5c <MX_I2C1_Init+0x78>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_I2C1_Init+0x74>)
 80009f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a60 <MX_I2C1_Init+0x7c>)
 80009f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_I2C1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_I2C1_Init+0x74>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1e:	480e      	ldr	r0, [pc, #56]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a20:	f004 fcc8 	bl	80053b4 <HAL_I2C_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a2a:	f000 fbab 	bl	8001184 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a32:	f005 fb21 	bl	8006078 <HAL_I2CEx_ConfigAnalogFilter>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a3c:	f000 fba2 	bl	8001184 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a44:	f005 fb63 	bl	800610e <HAL_I2CEx_ConfigDigitalFilter>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a4e:	f000 fb99 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	240001f4 	.word	0x240001f4
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	20b0ccff 	.word	0x20b0ccff

08000a64 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000adc <MX_I2C2_Init+0x78>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae0 <MX_I2C2_Init+0x7c>)
 8000a72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a74:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a80:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a86:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a9e:	480e      	ldr	r0, [pc, #56]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000aa0:	f004 fc88 	bl	80053b4 <HAL_I2C_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000aaa:	f000 fb6b 	bl	8001184 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000ab2:	f005 fae1 	bl	8006078 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000abc:	f000 fb62 	bl	8001184 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000ac4:	f005 fb23 	bl	800610e <HAL_I2CEx_ConfigDigitalFilter>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ace:	f000 fb59 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	24000248 	.word	0x24000248
 8000adc:	40005800 	.word	0x40005800
 8000ae0:	20b0ccff 	.word	0x20b0ccff

08000ae4 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000aea:	4a1c      	ldr	r2, [pc, #112]	@ (8000b5c <MX_I2C4_Init+0x78>)
 8000aec:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0CCFF;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000af0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b60 <MX_I2C4_Init+0x7c>)
 8000af2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000af4:	4b18      	ldr	r3, [pc, #96]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000b06:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000b1e:	480e      	ldr	r0, [pc, #56]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000b20:	f004 fc48 	bl	80053b4 <HAL_I2C_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b2a:	f000 fb2b 	bl	8001184 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4809      	ldr	r0, [pc, #36]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000b32:	f005 faa1 	bl	8006078 <HAL_I2CEx_ConfigAnalogFilter>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b3c:	f000 fb22 	bl	8001184 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b40:	2100      	movs	r1, #0
 8000b42:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000b44:	f005 fae3 	bl	800610e <HAL_I2CEx_ConfigDigitalFilter>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b4e:	f000 fb19 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2400029c 	.word	0x2400029c
 8000b5c:	58001c00 	.word	0x58001c00
 8000b60:	20b0ccff 	.word	0x20b0ccff

08000b64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0be      	sub	sp, #248	@ 0xf8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	22c0      	movs	r2, #192	@ 0xc0
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00c f848 	bl	800cc1a <memset>
  if(i2cHandle->Instance==I2C1)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a73      	ldr	r2, [pc, #460]	@ (8000d5c <HAL_I2C_MspInit+0x1f8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d146      	bne.n	8000c22 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b94:	f04f 0208 	mov.w	r2, #8
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	4618      	mov	r0, r3
 8000bac:	f006 fb14 	bl	80071d8 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000bb6:	f000 fae5 	bl	8001184 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	4b69      	ldr	r3, [pc, #420]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000bbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bc0:	4a67      	ldr	r2, [pc, #412]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000bc2:	f043 0302 	orr.w	r3, r3, #2
 8000bc6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bca:	4b65      	ldr	r3, [pc, #404]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000bcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAX30102_SCL_Pin|MAX30102_SDA_Pin;
 8000bd8:	23c0      	movs	r3, #192	@ 0xc0
 8000bda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bde:	2312      	movs	r3, #18
 8000be0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4859      	ldr	r0, [pc, #356]	@ (8000d64 <HAL_I2C_MspInit+0x200>)
 8000bfe:	f004 f9f5 	bl	8004fec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c02:	4b57      	ldr	r3, [pc, #348]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000c04:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c08:	4a55      	ldr	r2, [pc, #340]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000c0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c0e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000c12:	4b53      	ldr	r3, [pc, #332]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000c14:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c1c:	61bb      	str	r3, [r7, #24]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000c20:	e098      	b.n	8000d54 <HAL_I2C_MspInit+0x1f0>
  else if(i2cHandle->Instance==I2C2)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a50      	ldr	r2, [pc, #320]	@ (8000d68 <HAL_I2C_MspInit+0x204>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d147      	bne.n	8000cbc <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c2c:	f04f 0208 	mov.w	r2, #8
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	4618      	mov	r0, r3
 8000c44:	f006 fac8 	bl	80071d8 <HAL_RCCEx_PeriphCLKConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000c4e:	f000 fa99 	bl	8001184 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	4b43      	ldr	r3, [pc, #268]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000c54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c58:	4a41      	ldr	r2, [pc, #260]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000c5a:	f043 0302 	orr.w	r3, r3, #2
 8000c5e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c62:	4b3f      	ldr	r3, [pc, #252]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000c64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c68:	f003 0302 	and.w	r3, r3, #2
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c70:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c78:	2312      	movs	r3, #18
 8000c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c94:	4619      	mov	r1, r3
 8000c96:	4833      	ldr	r0, [pc, #204]	@ (8000d64 <HAL_I2C_MspInit+0x200>)
 8000c98:	f004 f9a8 	bl	8004fec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c9c:	4b30      	ldr	r3, [pc, #192]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000c9e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000ca4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ca8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000cac:	4b2c      	ldr	r3, [pc, #176]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000cae:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000cb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
}
 8000cba:	e04b      	b.n	8000d54 <HAL_I2C_MspInit+0x1f0>
  else if(i2cHandle->Instance==I2C4)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a2a      	ldr	r2, [pc, #168]	@ (8000d6c <HAL_I2C_MspInit+0x208>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d146      	bne.n	8000d54 <HAL_I2C_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000cc6:	f04f 0210 	mov.w	r2, #16
 8000cca:	f04f 0300 	mov.w	r3, #0
 8000cce:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd8:	f107 0320 	add.w	r3, r7, #32
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f006 fa7b 	bl	80071d8 <HAL_RCCEx_PeriphCLKConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8000ce8:	f000 fa4c 	bl	8001184 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cec:	4b1c      	ldr	r3, [pc, #112]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000cee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000cfc:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000cfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPU6500_SCL_Pin|MPU6500_SDA_Pin;
 8000d0a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d12:	2312      	movs	r3, #18
 8000d14:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000d24:	2304      	movs	r3, #4
 8000d26:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480f      	ldr	r0, [pc, #60]	@ (8000d70 <HAL_I2C_MspInit+0x20c>)
 8000d32:	f004 f95b 	bl	8004fec <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000d36:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000d38:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000d3c:	4a08      	ldr	r2, [pc, #32]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d42:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000d48:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
}
 8000d54:	bf00      	nop
 8000d56:	37f8      	adds	r7, #248	@ 0xf8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40005400 	.word	0x40005400
 8000d60:	58024400 	.word	0x58024400
 8000d64:	58020400 	.word	0x58020400
 8000d68:	40005800 	.word	0x40005800
 8000d6c:	58001c00 	.word	0x58001c00
 8000d70:	58020c00 	.word	0x58020c00

08000d74 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&STLINK_UART, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000d7c:	1d39      	adds	r1, r7, #4
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	2201      	movs	r2, #1
 8000d84:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <__io_putchar+0x20>)
 8000d86:	f008 fc50 	bl	800962a <HAL_UART_Transmit>
	return chr;
 8000d8a:	687b      	ldr	r3, [r7, #4]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	24000620 	.word	0x24000620

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
int main(void)
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000da4:	f000 f9c2 	bl	800112c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da8:	f000 fff8 	bl	8001d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dac:	f000 f856 	bl	8000e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db0:	f7ff fccc 	bl	800074c <MX_GPIO_Init>
  MX_DMA_Init();
 8000db4:	f7ff fc8a 	bl	80006cc <MX_DMA_Init>
  MX_UART4_Init();
 8000db8:	f000 fcfc 	bl	80017b4 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000dbc:	f000 fd92 	bl	80018e4 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000dc0:	f7ff fe50 	bl	8000a64 <MX_I2C2_Init>
  MX_UART5_Init();
 8000dc4:	f000 fd42 	bl	800184c <MX_UART5_Init>
  MX_SPI1_Init();
 8000dc8:	f000 f9e2 	bl	8001190 <MX_SPI1_Init>
  MX_I2C4_Init();
 8000dcc:	f7ff fe8a 	bl	8000ae4 <MX_I2C4_Init>
  MX_I2C1_Init();
 8000dd0:	f7ff fe08 	bl	80009e4 <MX_I2C1_Init>
	        HAL_Delay(5);  // give time for UART to flush
	    }
	    return HAL_OK;
	}
//	HAL_StatusTypeDef test = MAX30102_TestConnection();
	Scan_I2C_Bus();
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	469c      	mov	ip, r3
 8000dd8:	f000 f80e 	bl	8000df8 <Scan_I2C_Bus.0>
//	Sensor_MAX30102_init(800, &max30102, &MAX30102_I2C);
	Sensor_MAX30102_init(&SmartWatchData_handle.max30102, &MAX30102_I2C);
 8000ddc:	4903      	ldr	r1, [pc, #12]	@ (8000dec <main+0x54>)
 8000dde:	4804      	ldr	r0, [pc, #16]	@ (8000df0 <main+0x58>)
 8000de0:	f00a fe02 	bl	800b9e8 <Sensor_MAX30102_init>
		//Display_EnvironnementData(30,70,&SmartWatchData_handle);
#endif

#ifdef MAX30102_TEST
	    // If interrupt flag is active
		Sensor_max30102_Update(&SmartWatchData_handle);
 8000de4:	4803      	ldr	r0, [pc, #12]	@ (8000df4 <main+0x5c>)
 8000de6:	f00a fd7d 	bl	800b8e4 <Sensor_max30102_Update>
 8000dea:	e7fb      	b.n	8000de4 <main+0x4c>
 8000dec:	240001f4 	.word	0x240001f4
 8000df0:	24000ad0 	.word	0x24000ad0
 8000df4:	24000998 	.word	0x24000998

08000df8 <Scan_I2C_Bus.0>:
	{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	f8c7 c004 	str.w	ip, [r7, #4]
	    for (uint16_t addr = 1; addr < 128; addr++)
 8000e02:	2301      	movs	r3, #1
 8000e04:	81fb      	strh	r3, [r7, #14]
 8000e06:	e01c      	b.n	8000e42 <Scan_I2C_Bus.0+0x4a>
	        status = HAL_I2C_IsDeviceReady(&MAX30102_I2C,
 8000e08:	89fb      	ldrh	r3, [r7, #14]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	b299      	uxth	r1, r3
 8000e0e:	2364      	movs	r3, #100	@ 0x64
 8000e10:	2203      	movs	r2, #3
 8000e12:	4810      	ldr	r0, [pc, #64]	@ (8000e54 <Scan_I2C_Bus.0+0x5c>)
 8000e14:	f004 fd78 	bl	8005908 <HAL_I2C_IsDeviceReady>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	737b      	strb	r3, [r7, #13]
	        if (status == HAL_OK)
 8000e1c:	7b7b      	ldrb	r3, [r7, #13]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d105      	bne.n	8000e2e <Scan_I2C_Bus.0+0x36>
	            printf("I2C: device ACK at 0x%02X\r\n", addr);
 8000e22:	89fb      	ldrh	r3, [r7, #14]
 8000e24:	4619      	mov	r1, r3
 8000e26:	480c      	ldr	r0, [pc, #48]	@ (8000e58 <Scan_I2C_Bus.0+0x60>)
 8000e28:	f00b fea2 	bl	800cb70 <iprintf>
 8000e2c:	e003      	b.n	8000e36 <Scan_I2C_Bus.0+0x3e>
	            err = HAL_I2C_GetError(&MAX30102_I2C);
 8000e2e:	4809      	ldr	r0, [pc, #36]	@ (8000e54 <Scan_I2C_Bus.0+0x5c>)
 8000e30:	f004 fe70 	bl	8005b14 <HAL_I2C_GetError>
 8000e34:	60b8      	str	r0, [r7, #8]
	        HAL_Delay(5);  // give time for UART to flush
 8000e36:	2005      	movs	r0, #5
 8000e38:	f001 f842 	bl	8001ec0 <HAL_Delay>
	    for (uint16_t addr = 1; addr < 128; addr++)
 8000e3c:	89fb      	ldrh	r3, [r7, #14]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	81fb      	strh	r3, [r7, #14]
 8000e42:	89fb      	ldrh	r3, [r7, #14]
 8000e44:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e46:	d9df      	bls.n	8000e08 <Scan_I2C_Bus.0+0x10>
	    return HAL_OK;
 8000e48:	2300      	movs	r3, #0
	}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	240001f4 	.word	0x240001f4
 8000e58:	0800e830 	.word	0x0800e830

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b09c      	sub	sp, #112	@ 0x70
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e66:	224c      	movs	r2, #76	@ 0x4c
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f00b fed5 	bl	800cc1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2220      	movs	r2, #32
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f00b fecf 	bl	800cc1a <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f3c <SystemClock_Config+0xe0>)
 8000e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e82:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e86:	2004      	movs	r0, #4
 8000e88:	f005 f98e 	bl	80061a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	4b2b      	ldr	r3, [pc, #172]	@ (8000f40 <SystemClock_Config+0xe4>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a2a      	ldr	r2, [pc, #168]	@ (8000f40 <SystemClock_Config+0xe4>)
 8000e96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b28      	ldr	r3, [pc, #160]	@ (8000f40 <SystemClock_Config+0xe4>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ea8:	bf00      	nop
 8000eaa:	4b25      	ldr	r3, [pc, #148]	@ (8000f40 <SystemClock_Config+0xe4>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000eb6:	d1f8      	bne.n	8000eaa <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ebc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000ece:	2346      	movs	r3, #70	@ 0x46
 8000ed0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eda:	2302      	movs	r3, #2
 8000edc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ede:	230c      	movs	r3, #12
 8000ee0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f005 f9b4 	bl	800625c <HAL_RCC_OscConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000efa:	f000 f943 	bl	8001184 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efe:	233f      	movs	r3, #63	@ 0x3f
 8000f00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f02:	2303      	movs	r3, #3
 8000f04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f0e:	2340      	movs	r3, #64	@ 0x40
 8000f10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f12:	2340      	movs	r3, #64	@ 0x40
 8000f14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f1a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f1c:	2340      	movs	r3, #64	@ 0x40
 8000f1e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2106      	movs	r1, #6
 8000f24:	4618      	mov	r0, r3
 8000f26:	f005 fdcb 	bl	8006ac0 <HAL_RCC_ClockConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000f30:	f000 f928 	bl	8001184 <Error_Handler>
  }
}
 8000f34:	bf00      	nop
 8000f36:	3770      	adds	r7, #112	@ 0x70
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	58024800 	.word	0x58024800

08000f44 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
// This callback is called when idle line is detected or buffer is full
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == UART4)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a56      	ldr	r2, [pc, #344]	@ (80010b0 <HAL_UARTEx_RxEventCallback+0x16c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	f040 80a5 	bne.w	80010a6 <HAL_UARTEx_RxEventCallback+0x162>
    {
        // Copy the data from DMA buffer to message buffer
        memcpy(messageBuffer, rxBuffer, Size);
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4954      	ldr	r1, [pc, #336]	@ (80010b4 <HAL_UARTEx_RxEventCallback+0x170>)
 8000f62:	4855      	ldr	r0, [pc, #340]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0x174>)
 8000f64:	f00b fee9 	bl	800cd3a <memcpy>

        // Null-terminate the string
        messageBuffer[Size] = '\0';
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	4a53      	ldr	r2, [pc, #332]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0x174>)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	54d1      	strb	r1, [r2, r3]

        // Set flag for main loop
        messageReady = 1;
 8000f70:	4b52      	ldr	r3, [pc, #328]	@ (80010bc <HAL_UARTEx_RxEventCallback+0x178>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]

        HAL_UART_AbortReceive(huart);  // Stop DMA
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f008 fbe6 	bl	8009748 <HAL_UART_AbortReceive>
        memset(rxBuffer, 0, sizeof(rxBuffer));  // Reset buffer
 8000f7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f80:	2100      	movs	r1, #0
 8000f82:	484c      	ldr	r0, [pc, #304]	@ (80010b4 <HAL_UARTEx_RxEventCallback+0x170>)
 8000f84:	f00b fe49 	bl	800cc1a <memset>

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 8000f88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f8c:	4949      	ldr	r1, [pc, #292]	@ (80010b4 <HAL_UARTEx_RxEventCallback+0x170>)
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f00a fc05 	bl	800b79e <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a48      	ldr	r2, [pc, #288]	@ (80010c0 <HAL_UARTEx_RxEventCallback+0x17c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d068      	beq.n	8001074 <HAL_UARTEx_RxEventCallback+0x130>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a46      	ldr	r2, [pc, #280]	@ (80010c4 <HAL_UARTEx_RxEventCallback+0x180>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d061      	beq.n	8001074 <HAL_UARTEx_RxEventCallback+0x130>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a43      	ldr	r2, [pc, #268]	@ (80010c8 <HAL_UARTEx_RxEventCallback+0x184>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d05a      	beq.n	8001074 <HAL_UARTEx_RxEventCallback+0x130>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a41      	ldr	r2, [pc, #260]	@ (80010cc <HAL_UARTEx_RxEventCallback+0x188>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d053      	beq.n	8001074 <HAL_UARTEx_RxEventCallback+0x130>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a3e      	ldr	r2, [pc, #248]	@ (80010d0 <HAL_UARTEx_RxEventCallback+0x18c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d04c      	beq.n	8001074 <HAL_UARTEx_RxEventCallback+0x130>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a3c      	ldr	r2, [pc, #240]	@ (80010d4 <HAL_UARTEx_RxEventCallback+0x190>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d045      	beq.n	8001074 <HAL_UARTEx_RxEventCallback+0x130>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a39      	ldr	r2, [pc, #228]	@ (80010d8 <HAL_UARTEx_RxEventCallback+0x194>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d03e      	beq.n	8001074 <HAL_UARTEx_RxEventCallback+0x130>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a37      	ldr	r2, [pc, #220]	@ (80010dc <HAL_UARTEx_RxEventCallback+0x198>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d037      	beq.n	8001074 <HAL_UARTEx_RxEventCallback+0x130>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a34      	ldr	r2, [pc, #208]	@ (80010e0 <HAL_UARTEx_RxEventCallback+0x19c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d030      	beq.n	8001074 <HAL_UARTEx_RxEventCallback+0x130>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a32      	ldr	r2, [pc, #200]	@ (80010e4 <HAL_UARTEx_RxEventCallback+0x1a0>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d029      	beq.n	8001074 <HAL_UARTEx_RxEventCallback+0x130>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a2f      	ldr	r2, [pc, #188]	@ (80010e8 <HAL_UARTEx_RxEventCallback+0x1a4>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d022      	beq.n	8001074 <HAL_UARTEx_RxEventCallback+0x130>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a2d      	ldr	r2, [pc, #180]	@ (80010ec <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d01b      	beq.n	8001074 <HAL_UARTEx_RxEventCallback+0x130>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a2a      	ldr	r2, [pc, #168]	@ (80010f0 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d014      	beq.n	8001074 <HAL_UARTEx_RxEventCallback+0x130>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a28      	ldr	r2, [pc, #160]	@ (80010f4 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d00d      	beq.n	8001074 <HAL_UARTEx_RxEventCallback+0x130>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a25      	ldr	r2, [pc, #148]	@ (80010f8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d006      	beq.n	8001074 <HAL_UARTEx_RxEventCallback+0x130>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a23      	ldr	r2, [pc, #140]	@ (80010fc <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d10c      	bne.n	800108e <HAL_UARTEx_RxEventCallback+0x14a>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0208 	bic.w	r2, r2, #8
 800108a:	601a      	str	r2, [r3, #0]
    }
}
 800108c:	e00b      	b.n	80010a6 <HAL_UARTEx_RxEventCallback+0x162>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0204 	bic.w	r2, r2, #4
 80010a4:	601a      	str	r2, [r3, #0]
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40004c00 	.word	0x40004c00
 80010b4:	24000898 	.word	0x24000898
 80010b8:	240002f0 	.word	0x240002f0
 80010bc:	240003f0 	.word	0x240003f0
 80010c0:	40020010 	.word	0x40020010
 80010c4:	40020028 	.word	0x40020028
 80010c8:	40020040 	.word	0x40020040
 80010cc:	40020058 	.word	0x40020058
 80010d0:	40020070 	.word	0x40020070
 80010d4:	40020088 	.word	0x40020088
 80010d8:	400200a0 	.word	0x400200a0
 80010dc:	400200b8 	.word	0x400200b8
 80010e0:	40020410 	.word	0x40020410
 80010e4:	40020428 	.word	0x40020428
 80010e8:	40020440 	.word	0x40020440
 80010ec:	40020458 	.word	0x40020458
 80010f0:	40020470 	.word	0x40020470
 80010f4:	40020488 	.word	0x40020488
 80010f8:	400204a0 	.word	0x400204a0
 80010fc:	400204b8 	.word	0x400204b8

08001100 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == InputButton_Pin)
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001110:	d006      	beq.n	8001120 <HAL_GPIO_EXTI_Callback+0x20>
    {

    }
    else if (GPIO_Pin == MAX30102_INT_Pin)
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001118:	d102      	bne.n	8001120 <HAL_GPIO_EXTI_Callback+0x20>
    {
    	max30102_on_interrupt(&SmartWatchData_handle.max30102);
 800111a:	4803      	ldr	r0, [pc, #12]	@ (8001128 <HAL_GPIO_EXTI_Callback+0x28>)
 800111c:	f00a fd75 	bl	800bc0a <max30102_on_interrupt>
    }
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	24000ad0 	.word	0x24000ad0

0800112c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800113e:	f000 fff3 	bl	8002128 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001142:	2301      	movs	r3, #1
 8001144:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001146:	2300      	movs	r3, #0
 8001148:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800114e:	231f      	movs	r3, #31
 8001150:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001152:	2387      	movs	r3, #135	@ 0x87
 8001154:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001156:	2300      	movs	r3, #0
 8001158:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800115a:	2300      	movs	r3, #0
 800115c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800115e:	2301      	movs	r3, #1
 8001160:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001162:	2301      	movs	r3, #1
 8001164:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800116e:	463b      	mov	r3, r7
 8001170:	4618      	mov	r0, r3
 8001172:	f001 f811 	bl	8002198 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001176:	2004      	movs	r0, #4
 8001178:	f000 ffee 	bl	8002158 <HAL_MPU_Enable>

}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
}
 800118a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <Error_Handler+0x8>

08001190 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001194:	4b29      	ldr	r3, [pc, #164]	@ (800123c <MX_SPI1_Init+0xac>)
 8001196:	4a2a      	ldr	r2, [pc, #168]	@ (8001240 <MX_SPI1_Init+0xb0>)
 8001198:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800119a:	4b28      	ldr	r3, [pc, #160]	@ (800123c <MX_SPI1_Init+0xac>)
 800119c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80011a2:	4b26      	ldr	r3, [pc, #152]	@ (800123c <MX_SPI1_Init+0xac>)
 80011a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011a8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011aa:	4b24      	ldr	r3, [pc, #144]	@ (800123c <MX_SPI1_Init+0xac>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80011b0:	4b22      	ldr	r3, [pc, #136]	@ (800123c <MX_SPI1_Init+0xac>)
 80011b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80011b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011b8:	4b20      	ldr	r3, [pc, #128]	@ (800123c <MX_SPI1_Init+0xac>)
 80011ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011c0:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <MX_SPI1_Init+0xac>)
 80011c2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80011c8:	4b1c      	ldr	r3, [pc, #112]	@ (800123c <MX_SPI1_Init+0xac>)
 80011ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <MX_SPI1_Init+0xac>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d6:	4b19      	ldr	r3, [pc, #100]	@ (800123c <MX_SPI1_Init+0xac>)
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011dc:	4b17      	ldr	r3, [pc, #92]	@ (800123c <MX_SPI1_Init+0xac>)
 80011de:	2200      	movs	r2, #0
 80011e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80011e2:	4b16      	ldr	r3, [pc, #88]	@ (800123c <MX_SPI1_Init+0xac>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011e8:	4b14      	ldr	r3, [pc, #80]	@ (800123c <MX_SPI1_Init+0xac>)
 80011ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <MX_SPI1_Init+0xac>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MX_SPI1_Init+0xac>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <MX_SPI1_Init+0xac>)
 80011fe:	2200      	movs	r2, #0
 8001200:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <MX_SPI1_Init+0xac>)
 8001204:	2200      	movs	r2, #0
 8001206:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <MX_SPI1_Init+0xac>)
 800120a:	2200      	movs	r2, #0
 800120c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <MX_SPI1_Init+0xac>)
 8001210:	2200      	movs	r2, #0
 8001212:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001214:	4b09      	ldr	r3, [pc, #36]	@ (800123c <MX_SPI1_Init+0xac>)
 8001216:	2200      	movs	r2, #0
 8001218:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <MX_SPI1_Init+0xac>)
 800121c:	2200      	movs	r2, #0
 800121e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <MX_SPI1_Init+0xac>)
 8001222:	2200      	movs	r2, #0
 8001224:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_SPI1_Init+0xac>)
 8001228:	f007 fdb6 	bl	8008d98 <HAL_SPI_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 8001232:	f7ff ffa7 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	240003f4 	.word	0x240003f4
 8001240:	40013000 	.word	0x40013000

08001244 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0ba      	sub	sp, #232	@ 0xe8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	22c0      	movs	r2, #192	@ 0xc0
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f00b fcd8 	bl	800cc1a <memset>
  if(spiHandle->Instance==SPI1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a40      	ldr	r2, [pc, #256]	@ (8001370 <HAL_SPI_MspInit+0x12c>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d179      	bne.n	8001368 <HAL_SPI_MspInit+0x124>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001274:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001278:	f04f 0300 	mov.w	r3, #0
 800127c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001280:	2300      	movs	r3, #0
 8001282:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	4618      	mov	r0, r3
 800128a:	f005 ffa5 	bl	80071d8 <HAL_RCCEx_PeriphCLKConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001294:	f7ff ff76 	bl	8001184 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001298:	4b36      	ldr	r3, [pc, #216]	@ (8001374 <HAL_SPI_MspInit+0x130>)
 800129a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800129e:	4a35      	ldr	r2, [pc, #212]	@ (8001374 <HAL_SPI_MspInit+0x130>)
 80012a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012a4:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80012a8:	4b32      	ldr	r3, [pc, #200]	@ (8001374 <HAL_SPI_MspInit+0x130>)
 80012aa:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80012ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001374 <HAL_SPI_MspInit+0x130>)
 80012b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001374 <HAL_SPI_MspInit+0x130>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80012c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001374 <HAL_SPI_MspInit+0x130>)
 80012c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012d4:	23a0      	movs	r3, #160	@ 0xa0
 80012d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ec:	2305      	movs	r3, #5
 80012ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012f6:	4619      	mov	r1, r3
 80012f8:	481f      	ldr	r0, [pc, #124]	@ (8001378 <HAL_SPI_MspInit+0x134>)
 80012fa:	f003 fe77 	bl	8004fec <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream5;
 80012fe:	4b1f      	ldr	r3, [pc, #124]	@ (800137c <HAL_SPI_MspInit+0x138>)
 8001300:	4a1f      	ldr	r2, [pc, #124]	@ (8001380 <HAL_SPI_MspInit+0x13c>)
 8001302:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001304:	4b1d      	ldr	r3, [pc, #116]	@ (800137c <HAL_SPI_MspInit+0x138>)
 8001306:	2226      	movs	r2, #38	@ 0x26
 8001308:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800130a:	4b1c      	ldr	r3, [pc, #112]	@ (800137c <HAL_SPI_MspInit+0x138>)
 800130c:	2240      	movs	r2, #64	@ 0x40
 800130e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001310:	4b1a      	ldr	r3, [pc, #104]	@ (800137c <HAL_SPI_MspInit+0x138>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001316:	4b19      	ldr	r3, [pc, #100]	@ (800137c <HAL_SPI_MspInit+0x138>)
 8001318:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800131c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800131e:	4b17      	ldr	r3, [pc, #92]	@ (800137c <HAL_SPI_MspInit+0x138>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001324:	4b15      	ldr	r3, [pc, #84]	@ (800137c <HAL_SPI_MspInit+0x138>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800132a:	4b14      	ldr	r3, [pc, #80]	@ (800137c <HAL_SPI_MspInit+0x138>)
 800132c:	2200      	movs	r2, #0
 800132e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HAL_SPI_MspInit+0x138>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <HAL_SPI_MspInit+0x138>)
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800133c:	480f      	ldr	r0, [pc, #60]	@ (800137c <HAL_SPI_MspInit+0x138>)
 800133e:	f000 ff6b 	bl	8002218 <HAL_DMA_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8001348:	f7ff ff1c 	bl	8001184 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a0b      	ldr	r2, [pc, #44]	@ (800137c <HAL_SPI_MspInit+0x138>)
 8001350:	679a      	str	r2, [r3, #120]	@ 0x78
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <HAL_SPI_MspInit+0x138>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	2023      	movs	r0, #35	@ 0x23
 800135e:	f000 feae 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001362:	2023      	movs	r0, #35	@ 0x23
 8001364:	f000 fec5 	bl	80020f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001368:	bf00      	nop
 800136a:	37e8      	adds	r7, #232	@ 0xe8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40013000 	.word	0x40013000
 8001374:	58024400 	.word	0x58024400
 8001378:	58020000 	.word	0x58020000
 800137c:	2400047c 	.word	0x2400047c
 8001380:	40020088 	.word	0x40020088

08001384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <HAL_MspInit+0x30>)
 800138c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001390:	4a08      	ldr	r2, [pc, #32]	@ (80013b4 <HAL_MspInit+0x30>)
 8001392:	f043 0302 	orr.w	r3, r3, #2
 8001396:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800139a:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <HAL_MspInit+0x30>)
 800139c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	58024400 	.word	0x58024400

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <NMI_Handler+0x4>

080013c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <MemManage_Handler+0x4>

080013d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <UsageFault_Handler+0x4>

080013e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140e:	f000 fd37 	bl	8001e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800141c:	4802      	ldr	r0, [pc, #8]	@ (8001428 <DMA1_Stream0_IRQHandler+0x10>)
 800141e:	f002 fa57 	bl	80038d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	240007a4 	.word	0x240007a4

0800142c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001430:	4802      	ldr	r0, [pc, #8]	@ (800143c <DMA1_Stream1_IRQHandler+0x10>)
 8001432:	f002 fa4d 	bl	80038d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2400081c 	.word	0x2400081c

08001440 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <DMA1_Stream2_IRQHandler+0x10>)
 8001446:	f002 fa43 	bl	80038d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	240006b4 	.word	0x240006b4

08001454 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001458:	4802      	ldr	r0, [pc, #8]	@ (8001464 <DMA1_Stream3_IRQHandler+0x10>)
 800145a:	f002 fa39 	bl	80038d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2400072c 	.word	0x2400072c

08001468 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <DMA1_Stream5_IRQHandler+0x10>)
 800146e:	f002 fa2f 	bl	80038d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2400047c 	.word	0x2400047c

0800147c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAX30102_INT_Pin);
 8001480:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001484:	f003 ff7b 	bl	800537e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001490:	4802      	ldr	r0, [pc, #8]	@ (800149c <SPI1_IRQHandler+0x10>)
 8001492:	f007 fda5 	bl	8008fe0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	240003f4 	.word	0x240003f4

080014a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(InputButton_Pin);
 80014a4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014a8:	f003 ff69 	bl	800537e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80014b4:	4802      	ldr	r0, [pc, #8]	@ (80014c0 <UART4_IRQHandler+0x10>)
 80014b6:	f008 f9fd 	bl	80098b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	240004f8 	.word	0x240004f8

080014c4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80014c8:	4802      	ldr	r0, [pc, #8]	@ (80014d4 <UART5_IRQHandler+0x10>)
 80014ca:	f008 f9f3 	bl	80098b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2400058c 	.word	0x2400058c

080014d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return 1;
 80014dc:	2301      	movs	r3, #1
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <_kill>:

int _kill(int pid, int sig)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014f2:	f00b fbf5 	bl	800cce0 <__errno>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2216      	movs	r2, #22
 80014fa:	601a      	str	r2, [r3, #0]
  return -1;
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_exit>:

void _exit (int status)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001510:	f04f 31ff 	mov.w	r1, #4294967295
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ffe7 	bl	80014e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800151a:	bf00      	nop
 800151c:	e7fd      	b.n	800151a <_exit+0x12>

0800151e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	e00a      	b.n	8001546 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001530:	f3af 8000 	nop.w
 8001534:	4601      	mov	r1, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	60ba      	str	r2, [r7, #8]
 800153c:	b2ca      	uxtb	r2, r1
 800153e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3301      	adds	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	429a      	cmp	r2, r3
 800154c:	dbf0      	blt.n	8001530 <_read+0x12>
  }

  return len;
 800154e:	687b      	ldr	r3, [r7, #4]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	e009      	b.n	800157e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	60ba      	str	r2, [r7, #8]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fbfe 	bl	8000d74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3301      	adds	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	429a      	cmp	r2, r3
 8001584:	dbf1      	blt.n	800156a <_write+0x12>
  }
  return len;
 8001586:	687b      	ldr	r3, [r7, #4]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_close>:

int _close(int file)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015b8:	605a      	str	r2, [r3, #4]
  return 0;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <_isatty>:

int _isatty(int file)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015d0:	2301      	movs	r3, #1
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015de:	b480      	push	{r7}
 80015e0:	b085      	sub	sp, #20
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001600:	4a14      	ldr	r2, [pc, #80]	@ (8001654 <_sbrk+0x5c>)
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <_sbrk+0x60>)
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800160c:	4b13      	ldr	r3, [pc, #76]	@ (800165c <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001614:	4b11      	ldr	r3, [pc, #68]	@ (800165c <_sbrk+0x64>)
 8001616:	4a12      	ldr	r2, [pc, #72]	@ (8001660 <_sbrk+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	429a      	cmp	r2, r3
 8001626:	d207      	bcs.n	8001638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001628:	f00b fb5a 	bl	800cce0 <__errno>
 800162c:	4603      	mov	r3, r0
 800162e:	220c      	movs	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	e009      	b.n	800164c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001638:	4b08      	ldr	r3, [pc, #32]	@ (800165c <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163e:	4b07      	ldr	r3, [pc, #28]	@ (800165c <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	4a05      	ldr	r2, [pc, #20]	@ (800165c <_sbrk+0x64>)
 8001648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	24100000 	.word	0x24100000
 8001658:	00000400 	.word	0x00000400
 800165c:	240004f4 	.word	0x240004f4
 8001660:	24000e10 	.word	0x24000e10

08001664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001668:	4b3e      	ldr	r3, [pc, #248]	@ (8001764 <SystemInit+0x100>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800166e:	4a3d      	ldr	r2, [pc, #244]	@ (8001764 <SystemInit+0x100>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001678:	4b3b      	ldr	r3, [pc, #236]	@ (8001768 <SystemInit+0x104>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	2b02      	cmp	r3, #2
 8001682:	d807      	bhi.n	8001694 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001684:	4b38      	ldr	r3, [pc, #224]	@ (8001768 <SystemInit+0x104>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f023 030f 	bic.w	r3, r3, #15
 800168c:	4a36      	ldr	r2, [pc, #216]	@ (8001768 <SystemInit+0x104>)
 800168e:	f043 0303 	orr.w	r3, r3, #3
 8001692:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001694:	4b35      	ldr	r3, [pc, #212]	@ (800176c <SystemInit+0x108>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a34      	ldr	r2, [pc, #208]	@ (800176c <SystemInit+0x108>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016a0:	4b32      	ldr	r3, [pc, #200]	@ (800176c <SystemInit+0x108>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016a6:	4b31      	ldr	r3, [pc, #196]	@ (800176c <SystemInit+0x108>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	4930      	ldr	r1, [pc, #192]	@ (800176c <SystemInit+0x108>)
 80016ac:	4b30      	ldr	r3, [pc, #192]	@ (8001770 <SystemInit+0x10c>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001768 <SystemInit+0x104>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d007      	beq.n	80016ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016be:	4b2a      	ldr	r3, [pc, #168]	@ (8001768 <SystemInit+0x104>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 030f 	bic.w	r3, r3, #15
 80016c6:	4a28      	ldr	r2, [pc, #160]	@ (8001768 <SystemInit+0x104>)
 80016c8:	f043 0303 	orr.w	r3, r3, #3
 80016cc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80016ce:	4b27      	ldr	r3, [pc, #156]	@ (800176c <SystemInit+0x108>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80016d4:	4b25      	ldr	r3, [pc, #148]	@ (800176c <SystemInit+0x108>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80016da:	4b24      	ldr	r3, [pc, #144]	@ (800176c <SystemInit+0x108>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016e0:	4b22      	ldr	r3, [pc, #136]	@ (800176c <SystemInit+0x108>)
 80016e2:	4a24      	ldr	r2, [pc, #144]	@ (8001774 <SystemInit+0x110>)
 80016e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016e6:	4b21      	ldr	r3, [pc, #132]	@ (800176c <SystemInit+0x108>)
 80016e8:	4a23      	ldr	r2, [pc, #140]	@ (8001778 <SystemInit+0x114>)
 80016ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016ec:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <SystemInit+0x108>)
 80016ee:	4a23      	ldr	r2, [pc, #140]	@ (800177c <SystemInit+0x118>)
 80016f0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016f2:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <SystemInit+0x108>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016f8:	4b1c      	ldr	r3, [pc, #112]	@ (800176c <SystemInit+0x108>)
 80016fa:	4a20      	ldr	r2, [pc, #128]	@ (800177c <SystemInit+0x118>)
 80016fc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016fe:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <SystemInit+0x108>)
 8001700:	2200      	movs	r2, #0
 8001702:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <SystemInit+0x108>)
 8001706:	4a1d      	ldr	r2, [pc, #116]	@ (800177c <SystemInit+0x118>)
 8001708:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800170a:	4b18      	ldr	r3, [pc, #96]	@ (800176c <SystemInit+0x108>)
 800170c:	2200      	movs	r2, #0
 800170e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001710:	4b16      	ldr	r3, [pc, #88]	@ (800176c <SystemInit+0x108>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a15      	ldr	r2, [pc, #84]	@ (800176c <SystemInit+0x108>)
 8001716:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800171a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800171c:	4b13      	ldr	r3, [pc, #76]	@ (800176c <SystemInit+0x108>)
 800171e:	2200      	movs	r2, #0
 8001720:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <SystemInit+0x108>)
 8001724:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001728:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d113      	bne.n	8001758 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001730:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <SystemInit+0x108>)
 8001732:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001736:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <SystemInit+0x108>)
 8001738:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800173c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001740:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <SystemInit+0x11c>)
 8001742:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001746:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001748:	4b08      	ldr	r3, [pc, #32]	@ (800176c <SystemInit+0x108>)
 800174a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800174e:	4a07      	ldr	r2, [pc, #28]	@ (800176c <SystemInit+0x108>)
 8001750:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001754:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00
 8001768:	52002000 	.word	0x52002000
 800176c:	58024400 	.word	0x58024400
 8001770:	eaf6ed7f 	.word	0xeaf6ed7f
 8001774:	02020200 	.word	0x02020200
 8001778:	01ff0000 	.word	0x01ff0000
 800177c:	01010280 	.word	0x01010280
 8001780:	52004000 	.word	0x52004000

08001784 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8001788:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <ExitRun0Mode+0x2c>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	4a08      	ldr	r2, [pc, #32]	@ (80017b0 <ExitRun0Mode+0x2c>)
 800178e:	f023 0302 	bic.w	r3, r3, #2
 8001792:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001794:	bf00      	nop
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <ExitRun0Mode+0x2c>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f9      	beq.n	8001796 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80017a2:	bf00      	nop
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	58024800 	.word	0x58024800

080017b4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80017b8:	4b22      	ldr	r3, [pc, #136]	@ (8001844 <MX_UART4_Init+0x90>)
 80017ba:	4a23      	ldr	r2, [pc, #140]	@ (8001848 <MX_UART4_Init+0x94>)
 80017bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80017be:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <MX_UART4_Init+0x90>)
 80017c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80017c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001844 <MX_UART4_Init+0x90>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <MX_UART4_Init+0x90>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80017d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001844 <MX_UART4_Init+0x90>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80017d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <MX_UART4_Init+0x90>)
 80017da:	220c      	movs	r2, #12
 80017dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017de:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <MX_UART4_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e4:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <MX_UART4_Init+0x90>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ea:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <MX_UART4_Init+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017f0:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <MX_UART4_Init+0x90>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f6:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <MX_UART4_Init+0x90>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80017fc:	4811      	ldr	r0, [pc, #68]	@ (8001844 <MX_UART4_Init+0x90>)
 80017fe:	f007 fec4 	bl	800958a <HAL_UART_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001808:	f7ff fcbc 	bl	8001184 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800180c:	2100      	movs	r1, #0
 800180e:	480d      	ldr	r0, [pc, #52]	@ (8001844 <MX_UART4_Init+0x90>)
 8001810:	f009 ff49 	bl	800b6a6 <HAL_UARTEx_SetTxFifoThreshold>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800181a:	f7ff fcb3 	bl	8001184 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800181e:	2100      	movs	r1, #0
 8001820:	4808      	ldr	r0, [pc, #32]	@ (8001844 <MX_UART4_Init+0x90>)
 8001822:	f009 ff7e 	bl	800b722 <HAL_UARTEx_SetRxFifoThreshold>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800182c:	f7ff fcaa 	bl	8001184 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001830:	4804      	ldr	r0, [pc, #16]	@ (8001844 <MX_UART4_Init+0x90>)
 8001832:	f009 feff 	bl	800b634 <HAL_UARTEx_DisableFifoMode>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800183c:	f7ff fca2 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	240004f8 	.word	0x240004f8
 8001848:	40004c00 	.word	0x40004c00

0800184c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001850:	4b22      	ldr	r3, [pc, #136]	@ (80018dc <MX_UART5_Init+0x90>)
 8001852:	4a23      	ldr	r2, [pc, #140]	@ (80018e0 <MX_UART5_Init+0x94>)
 8001854:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001856:	4b21      	ldr	r3, [pc, #132]	@ (80018dc <MX_UART5_Init+0x90>)
 8001858:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800185c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800185e:	4b1f      	ldr	r3, [pc, #124]	@ (80018dc <MX_UART5_Init+0x90>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001864:	4b1d      	ldr	r3, [pc, #116]	@ (80018dc <MX_UART5_Init+0x90>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800186a:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <MX_UART5_Init+0x90>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001870:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <MX_UART5_Init+0x90>)
 8001872:	220c      	movs	r2, #12
 8001874:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001876:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <MX_UART5_Init+0x90>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800187c:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <MX_UART5_Init+0x90>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001882:	4b16      	ldr	r3, [pc, #88]	@ (80018dc <MX_UART5_Init+0x90>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001888:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <MX_UART5_Init+0x90>)
 800188a:	2200      	movs	r2, #0
 800188c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800188e:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <MX_UART5_Init+0x90>)
 8001890:	2200      	movs	r2, #0
 8001892:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001894:	4811      	ldr	r0, [pc, #68]	@ (80018dc <MX_UART5_Init+0x90>)
 8001896:	f007 fe78 	bl	800958a <HAL_UART_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80018a0:	f7ff fc70 	bl	8001184 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a4:	2100      	movs	r1, #0
 80018a6:	480d      	ldr	r0, [pc, #52]	@ (80018dc <MX_UART5_Init+0x90>)
 80018a8:	f009 fefd 	bl	800b6a6 <HAL_UARTEx_SetTxFifoThreshold>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80018b2:	f7ff fc67 	bl	8001184 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018b6:	2100      	movs	r1, #0
 80018b8:	4808      	ldr	r0, [pc, #32]	@ (80018dc <MX_UART5_Init+0x90>)
 80018ba:	f009 ff32 	bl	800b722 <HAL_UARTEx_SetRxFifoThreshold>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80018c4:	f7ff fc5e 	bl	8001184 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80018c8:	4804      	ldr	r0, [pc, #16]	@ (80018dc <MX_UART5_Init+0x90>)
 80018ca:	f009 feb3 	bl	800b634 <HAL_UARTEx_DisableFifoMode>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80018d4:	f7ff fc56 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	2400058c 	.word	0x2400058c
 80018e0:	40005000 	.word	0x40005000

080018e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018e8:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <MX_USART3_UART_Init+0x90>)
 80018ea:	4a23      	ldr	r2, [pc, #140]	@ (8001978 <MX_USART3_UART_Init+0x94>)
 80018ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018ee:	4b21      	ldr	r3, [pc, #132]	@ (8001974 <MX_USART3_UART_Init+0x90>)
 80018f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <MX_USART3_UART_Init+0x90>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <MX_USART3_UART_Init+0x90>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <MX_USART3_UART_Init+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001908:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <MX_USART3_UART_Init+0x90>)
 800190a:	220c      	movs	r2, #12
 800190c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <MX_USART3_UART_Init+0x90>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001914:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <MX_USART3_UART_Init+0x90>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191a:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <MX_USART3_UART_Init+0x90>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001920:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <MX_USART3_UART_Init+0x90>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001926:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <MX_USART3_UART_Init+0x90>)
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800192c:	4811      	ldr	r0, [pc, #68]	@ (8001974 <MX_USART3_UART_Init+0x90>)
 800192e:	f007 fe2c 	bl	800958a <HAL_UART_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001938:	f7ff fc24 	bl	8001184 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800193c:	2100      	movs	r1, #0
 800193e:	480d      	ldr	r0, [pc, #52]	@ (8001974 <MX_USART3_UART_Init+0x90>)
 8001940:	f009 feb1 	bl	800b6a6 <HAL_UARTEx_SetTxFifoThreshold>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800194a:	f7ff fc1b 	bl	8001184 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800194e:	2100      	movs	r1, #0
 8001950:	4808      	ldr	r0, [pc, #32]	@ (8001974 <MX_USART3_UART_Init+0x90>)
 8001952:	f009 fee6 	bl	800b722 <HAL_UARTEx_SetRxFifoThreshold>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800195c:	f7ff fc12 	bl	8001184 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001960:	4804      	ldr	r0, [pc, #16]	@ (8001974 <MX_USART3_UART_Init+0x90>)
 8001962:	f009 fe67 	bl	800b634 <HAL_UARTEx_DisableFifoMode>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800196c:	f7ff fc0a 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	24000620 	.word	0x24000620
 8001978:	40004800 	.word	0x40004800

0800197c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b0be      	sub	sp, #248	@ 0xf8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001994:	f107 0320 	add.w	r3, r7, #32
 8001998:	22c0      	movs	r2, #192	@ 0xc0
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f00b f93c 	bl	800cc1a <memset>
  if(uartHandle->Instance==UART4)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4ab0      	ldr	r2, [pc, #704]	@ (8001c68 <HAL_UART_MspInit+0x2ec>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	f040 80ac 	bne.w	8001b06 <HAL_UART_MspInit+0x18a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80019ae:	f04f 0202 	mov.w	r2, #2
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c0:	f107 0320 	add.w	r3, r7, #32
 80019c4:	4618      	mov	r0, r3
 80019c6:	f005 fc07 	bl	80071d8 <HAL_RCCEx_PeriphCLKConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80019d0:	f7ff fbd8 	bl	8001184 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80019d4:	4ba5      	ldr	r3, [pc, #660]	@ (8001c6c <HAL_UART_MspInit+0x2f0>)
 80019d6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80019da:	4aa4      	ldr	r2, [pc, #656]	@ (8001c6c <HAL_UART_MspInit+0x2f0>)
 80019dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80019e0:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80019e4:	4ba1      	ldr	r3, [pc, #644]	@ (8001c6c <HAL_UART_MspInit+0x2f0>)
 80019e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80019ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019ee:	61fb      	str	r3, [r7, #28]
 80019f0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f2:	4b9e      	ldr	r3, [pc, #632]	@ (8001c6c <HAL_UART_MspInit+0x2f0>)
 80019f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019f8:	4a9c      	ldr	r2, [pc, #624]	@ (8001c6c <HAL_UART_MspInit+0x2f0>)
 80019fa:	f043 0302 	orr.w	r3, r3, #2
 80019fe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001a02:	4b9a      	ldr	r3, [pc, #616]	@ (8001c6c <HAL_UART_MspInit+0x2f0>)
 8001a04:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = BLE_RX_Pin|BLE_TX_Pin;
 8001a10:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a2a:	2308      	movs	r3, #8
 8001a2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a34:	4619      	mov	r1, r3
 8001a36:	488e      	ldr	r0, [pc, #568]	@ (8001c70 <HAL_UART_MspInit+0x2f4>)
 8001a38:	f003 fad8 	bl	8004fec <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001a3c:	4b8d      	ldr	r3, [pc, #564]	@ (8001c74 <HAL_UART_MspInit+0x2f8>)
 8001a3e:	4a8e      	ldr	r2, [pc, #568]	@ (8001c78 <HAL_UART_MspInit+0x2fc>)
 8001a40:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001a42:	4b8c      	ldr	r3, [pc, #560]	@ (8001c74 <HAL_UART_MspInit+0x2f8>)
 8001a44:	223f      	movs	r2, #63	@ 0x3f
 8001a46:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a48:	4b8a      	ldr	r3, [pc, #552]	@ (8001c74 <HAL_UART_MspInit+0x2f8>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a4e:	4b89      	ldr	r3, [pc, #548]	@ (8001c74 <HAL_UART_MspInit+0x2f8>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a54:	4b87      	ldr	r3, [pc, #540]	@ (8001c74 <HAL_UART_MspInit+0x2f8>)
 8001a56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a5a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a5c:	4b85      	ldr	r3, [pc, #532]	@ (8001c74 <HAL_UART_MspInit+0x2f8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a62:	4b84      	ldr	r3, [pc, #528]	@ (8001c74 <HAL_UART_MspInit+0x2f8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001a68:	4b82      	ldr	r3, [pc, #520]	@ (8001c74 <HAL_UART_MspInit+0x2f8>)
 8001a6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a6e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a70:	4b80      	ldr	r3, [pc, #512]	@ (8001c74 <HAL_UART_MspInit+0x2f8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a76:	4b7f      	ldr	r3, [pc, #508]	@ (8001c74 <HAL_UART_MspInit+0x2f8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001a7c:	487d      	ldr	r0, [pc, #500]	@ (8001c74 <HAL_UART_MspInit+0x2f8>)
 8001a7e:	f000 fbcb 	bl	8002218 <HAL_DMA_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001a88:	f7ff fb7c 	bl	8001184 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a79      	ldr	r2, [pc, #484]	@ (8001c74 <HAL_UART_MspInit+0x2f8>)
 8001a90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001a94:	4a77      	ldr	r2, [pc, #476]	@ (8001c74 <HAL_UART_MspInit+0x2f8>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream3;
 8001a9a:	4b78      	ldr	r3, [pc, #480]	@ (8001c7c <HAL_UART_MspInit+0x300>)
 8001a9c:	4a78      	ldr	r2, [pc, #480]	@ (8001c80 <HAL_UART_MspInit+0x304>)
 8001a9e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001aa0:	4b76      	ldr	r3, [pc, #472]	@ (8001c7c <HAL_UART_MspInit+0x300>)
 8001aa2:	2240      	movs	r2, #64	@ 0x40
 8001aa4:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aa6:	4b75      	ldr	r3, [pc, #468]	@ (8001c7c <HAL_UART_MspInit+0x300>)
 8001aa8:	2240      	movs	r2, #64	@ 0x40
 8001aaa:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aac:	4b73      	ldr	r3, [pc, #460]	@ (8001c7c <HAL_UART_MspInit+0x300>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ab2:	4b72      	ldr	r3, [pc, #456]	@ (8001c7c <HAL_UART_MspInit+0x300>)
 8001ab4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ab8:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aba:	4b70      	ldr	r3, [pc, #448]	@ (8001c7c <HAL_UART_MspInit+0x300>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ac0:	4b6e      	ldr	r3, [pc, #440]	@ (8001c7c <HAL_UART_MspInit+0x300>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8001c7c <HAL_UART_MspInit+0x300>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001acc:	4b6b      	ldr	r3, [pc, #428]	@ (8001c7c <HAL_UART_MspInit+0x300>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ad2:	4b6a      	ldr	r3, [pc, #424]	@ (8001c7c <HAL_UART_MspInit+0x300>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001ad8:	4868      	ldr	r0, [pc, #416]	@ (8001c7c <HAL_UART_MspInit+0x300>)
 8001ada:	f000 fb9d 	bl	8002218 <HAL_DMA_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 8001ae4:	f7ff fb4e 	bl	8001184 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a64      	ldr	r2, [pc, #400]	@ (8001c7c <HAL_UART_MspInit+0x300>)
 8001aec:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001aee:	4a63      	ldr	r2, [pc, #396]	@ (8001c7c <HAL_UART_MspInit+0x300>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	2034      	movs	r0, #52	@ 0x34
 8001afa:	f000 fae0 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001afe:	2034      	movs	r0, #52	@ 0x34
 8001b00:	f000 faf7 	bl	80020f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b04:	e114      	b.n	8001d30 <HAL_UART_MspInit+0x3b4>
  else if(uartHandle->Instance==UART5)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a5e      	ldr	r2, [pc, #376]	@ (8001c84 <HAL_UART_MspInit+0x308>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	f040 80c3 	bne.w	8001c98 <HAL_UART_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001b12:	f04f 0202 	mov.w	r2, #2
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b24:	f107 0320 	add.w	r3, r7, #32
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f005 fb55 	bl	80071d8 <HAL_RCCEx_PeriphCLKConfig>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8001b34:	f7ff fb26 	bl	8001184 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001b38:	4b4c      	ldr	r3, [pc, #304]	@ (8001c6c <HAL_UART_MspInit+0x2f0>)
 8001b3a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001b3e:	4a4b      	ldr	r2, [pc, #300]	@ (8001c6c <HAL_UART_MspInit+0x2f0>)
 8001b40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b44:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001b48:	4b48      	ldr	r3, [pc, #288]	@ (8001c6c <HAL_UART_MspInit+0x2f0>)
 8001b4a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001b4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	4b45      	ldr	r3, [pc, #276]	@ (8001c6c <HAL_UART_MspInit+0x2f0>)
 8001b58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b5c:	4a43      	ldr	r2, [pc, #268]	@ (8001c6c <HAL_UART_MspInit+0x2f0>)
 8001b5e:	f043 0302 	orr.w	r3, r3, #2
 8001b62:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001b66:	4b41      	ldr	r3, [pc, #260]	@ (8001c6c <HAL_UART_MspInit+0x2f0>)
 8001b68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001b74:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001b78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001b8e:	230e      	movs	r3, #14
 8001b90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b94:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4835      	ldr	r0, [pc, #212]	@ (8001c70 <HAL_UART_MspInit+0x2f4>)
 8001b9c:	f003 fa26 	bl	8004fec <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001ba0:	4b39      	ldr	r3, [pc, #228]	@ (8001c88 <HAL_UART_MspInit+0x30c>)
 8001ba2:	4a3a      	ldr	r2, [pc, #232]	@ (8001c8c <HAL_UART_MspInit+0x310>)
 8001ba4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8001ba6:	4b38      	ldr	r3, [pc, #224]	@ (8001c88 <HAL_UART_MspInit+0x30c>)
 8001ba8:	2241      	movs	r2, #65	@ 0x41
 8001baa:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bac:	4b36      	ldr	r3, [pc, #216]	@ (8001c88 <HAL_UART_MspInit+0x30c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb2:	4b35      	ldr	r3, [pc, #212]	@ (8001c88 <HAL_UART_MspInit+0x30c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bb8:	4b33      	ldr	r3, [pc, #204]	@ (8001c88 <HAL_UART_MspInit+0x30c>)
 8001bba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bbe:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bc0:	4b31      	ldr	r3, [pc, #196]	@ (8001c88 <HAL_UART_MspInit+0x30c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bc6:	4b30      	ldr	r3, [pc, #192]	@ (8001c88 <HAL_UART_MspInit+0x30c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8001c88 <HAL_UART_MspInit+0x30c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c88 <HAL_UART_MspInit+0x30c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c88 <HAL_UART_MspInit+0x30c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001bde:	482a      	ldr	r0, [pc, #168]	@ (8001c88 <HAL_UART_MspInit+0x30c>)
 8001be0:	f000 fb1a 	bl	8002218 <HAL_DMA_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_UART_MspInit+0x272>
      Error_Handler();
 8001bea:	f7ff facb 	bl	8001184 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a25      	ldr	r2, [pc, #148]	@ (8001c88 <HAL_UART_MspInit+0x30c>)
 8001bf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001bf6:	4a24      	ldr	r2, [pc, #144]	@ (8001c88 <HAL_UART_MspInit+0x30c>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream1;
 8001bfc:	4b24      	ldr	r3, [pc, #144]	@ (8001c90 <HAL_UART_MspInit+0x314>)
 8001bfe:	4a25      	ldr	r2, [pc, #148]	@ (8001c94 <HAL_UART_MspInit+0x318>)
 8001c00:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8001c02:	4b23      	ldr	r3, [pc, #140]	@ (8001c90 <HAL_UART_MspInit+0x314>)
 8001c04:	2242      	movs	r2, #66	@ 0x42
 8001c06:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c08:	4b21      	ldr	r3, [pc, #132]	@ (8001c90 <HAL_UART_MspInit+0x314>)
 8001c0a:	2240      	movs	r2, #64	@ 0x40
 8001c0c:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0e:	4b20      	ldr	r3, [pc, #128]	@ (8001c90 <HAL_UART_MspInit+0x314>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c14:	4b1e      	ldr	r3, [pc, #120]	@ (8001c90 <HAL_UART_MspInit+0x314>)
 8001c16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c1a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c90 <HAL_UART_MspInit+0x314>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c22:	4b1b      	ldr	r3, [pc, #108]	@ (8001c90 <HAL_UART_MspInit+0x314>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001c28:	4b19      	ldr	r3, [pc, #100]	@ (8001c90 <HAL_UART_MspInit+0x314>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c2e:	4b18      	ldr	r3, [pc, #96]	@ (8001c90 <HAL_UART_MspInit+0x314>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c34:	4b16      	ldr	r3, [pc, #88]	@ (8001c90 <HAL_UART_MspInit+0x314>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001c3a:	4815      	ldr	r0, [pc, #84]	@ (8001c90 <HAL_UART_MspInit+0x314>)
 8001c3c:	f000 faec 	bl	8002218 <HAL_DMA_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 8001c46:	f7ff fa9d 	bl	8001184 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a10      	ldr	r2, [pc, #64]	@ (8001c90 <HAL_UART_MspInit+0x314>)
 8001c4e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001c50:	4a0f      	ldr	r2, [pc, #60]	@ (8001c90 <HAL_UART_MspInit+0x314>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2035      	movs	r0, #53	@ 0x35
 8001c5c:	f000 fa2f 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001c60:	2035      	movs	r0, #53	@ 0x35
 8001c62:	f000 fa46 	bl	80020f2 <HAL_NVIC_EnableIRQ>
}
 8001c66:	e063      	b.n	8001d30 <HAL_UART_MspInit+0x3b4>
 8001c68:	40004c00 	.word	0x40004c00
 8001c6c:	58024400 	.word	0x58024400
 8001c70:	58020400 	.word	0x58020400
 8001c74:	240006b4 	.word	0x240006b4
 8001c78:	40020040 	.word	0x40020040
 8001c7c:	2400072c 	.word	0x2400072c
 8001c80:	40020058 	.word	0x40020058
 8001c84:	40005000 	.word	0x40005000
 8001c88:	240007a4 	.word	0x240007a4
 8001c8c:	40020010 	.word	0x40020010
 8001c90:	2400081c 	.word	0x2400081c
 8001c94:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART3)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a26      	ldr	r2, [pc, #152]	@ (8001d38 <HAL_UART_MspInit+0x3bc>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d146      	bne.n	8001d30 <HAL_UART_MspInit+0x3b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ca2:	f04f 0202 	mov.w	r2, #2
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cb4:	f107 0320 	add.w	r3, r7, #32
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f005 fa8d 	bl	80071d8 <HAL_RCCEx_PeriphCLKConfig>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_UART_MspInit+0x34c>
      Error_Handler();
 8001cc4:	f7ff fa5e 	bl	8001184 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d3c <HAL_UART_MspInit+0x3c0>)
 8001cca:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001cce:	4a1b      	ldr	r2, [pc, #108]	@ (8001d3c <HAL_UART_MspInit+0x3c0>)
 8001cd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001cd8:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <HAL_UART_MspInit+0x3c0>)
 8001cda:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001cde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce6:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <HAL_UART_MspInit+0x3c0>)
 8001ce8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001cec:	4a13      	ldr	r2, [pc, #76]	@ (8001d3c <HAL_UART_MspInit+0x3c0>)
 8001cee:	f043 0308 	orr.w	r3, r3, #8
 8001cf2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001cf6:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <HAL_UART_MspInit+0x3c0>)
 8001cf8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d04:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d1e:	2307      	movs	r3, #7
 8001d20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d24:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <HAL_UART_MspInit+0x3c4>)
 8001d2c:	f003 f95e 	bl	8004fec <HAL_GPIO_Init>
}
 8001d30:	bf00      	nop
 8001d32:	37f8      	adds	r7, #248	@ 0xf8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40004800 	.word	0x40004800
 8001d3c:	58024400 	.word	0x58024400
 8001d40:	58020c00 	.word	0x58020c00

08001d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d44:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001d80 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001d48:	f7ff fd1c 	bl	8001784 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d4c:	f7ff fc8a 	bl	8001664 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d50:	480c      	ldr	r0, [pc, #48]	@ (8001d84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d52:	490d      	ldr	r1, [pc, #52]	@ (8001d88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d54:	4a0d      	ldr	r2, [pc, #52]	@ (8001d8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d58:	e002      	b.n	8001d60 <LoopCopyDataInit>

08001d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d5e:	3304      	adds	r3, #4

08001d60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d64:	d3f9      	bcc.n	8001d5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d66:	4a0a      	ldr	r2, [pc, #40]	@ (8001d90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d68:	4c0a      	ldr	r4, [pc, #40]	@ (8001d94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d6c:	e001      	b.n	8001d72 <LoopFillZerobss>

08001d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d70:	3204      	adds	r2, #4

08001d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d74:	d3fb      	bcc.n	8001d6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d76:	f00a ffb9 	bl	800ccec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d7a:	f7ff f80d 	bl	8000d98 <main>
  bx  lr
 8001d7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d80:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001d84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d88:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001d8c:	0800ec84 	.word	0x0800ec84
  ldr r2, =_sbss
 8001d90:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001d94:	24000e0c 	.word	0x24000e0c

08001d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d98:	e7fe      	b.n	8001d98 <ADC_IRQHandler>
	...

08001d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da2:	2003      	movs	r0, #3
 8001da4:	f000 f980 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001da8:	f005 f840 	bl	8006e2c <HAL_RCC_GetSysClockFreq>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <HAL_Init+0x68>)
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	f003 030f 	and.w	r3, r3, #15
 8001db8:	4913      	ldr	r1, [pc, #76]	@ (8001e08 <HAL_Init+0x6c>)
 8001dba:	5ccb      	ldrb	r3, [r1, r3]
 8001dbc:	f003 031f 	and.w	r3, r3, #31
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <HAL_Init+0x68>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	4a0e      	ldr	r2, [pc, #56]	@ (8001e08 <HAL_Init+0x6c>)
 8001dd0:	5cd3      	ldrb	r3, [r2, r3]
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ddc:	4a0b      	ldr	r2, [pc, #44]	@ (8001e0c <HAL_Init+0x70>)
 8001dde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001de0:	4a0b      	ldr	r2, [pc, #44]	@ (8001e10 <HAL_Init+0x74>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001de6:	2000      	movs	r0, #0
 8001de8:	f000 f814 	bl	8001e14 <HAL_InitTick>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e002      	b.n	8001dfc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001df6:	f7ff fac5 	bl	8001384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	58024400 	.word	0x58024400
 8001e08:	0800e8bc 	.word	0x0800e8bc
 8001e0c:	24000004 	.word	0x24000004
 8001e10:	24000000 	.word	0x24000000

08001e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e1c:	4b15      	ldr	r3, [pc, #84]	@ (8001e74 <HAL_InitTick+0x60>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e021      	b.n	8001e6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e28:	4b13      	ldr	r3, [pc, #76]	@ (8001e78 <HAL_InitTick+0x64>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <HAL_InitTick+0x60>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f965 	bl	800210e <HAL_SYSTICK_Config>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e00e      	b.n	8001e6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b0f      	cmp	r3, #15
 8001e52:	d80a      	bhi.n	8001e6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e54:	2200      	movs	r2, #0
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5c:	f000 f92f 	bl	80020be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e60:	4a06      	ldr	r2, [pc, #24]	@ (8001e7c <HAL_InitTick+0x68>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e000      	b.n	8001e6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	2400000c 	.word	0x2400000c
 8001e78:	24000000 	.word	0x24000000
 8001e7c:	24000008 	.word	0x24000008

08001e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <HAL_IncTick+0x20>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_IncTick+0x24>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a04      	ldr	r2, [pc, #16]	@ (8001ea4 <HAL_IncTick+0x24>)
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	2400000c 	.word	0x2400000c
 8001ea4:	24000894 	.word	0x24000894

08001ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001eac:	4b03      	ldr	r3, [pc, #12]	@ (8001ebc <HAL_GetTick+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	24000894 	.word	0x24000894

08001ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff ffee 	bl	8001ea8 <HAL_GetTick>
 8001ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d005      	beq.n	8001ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eda:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <HAL_Delay+0x44>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee6:	bf00      	nop
 8001ee8:	f7ff ffde 	bl	8001ea8 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d8f7      	bhi.n	8001ee8 <HAL_Delay+0x28>
  {
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2400000c 	.word	0x2400000c

08001f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f18:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <__NVIC_SetPriorityGrouping+0x40>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f24:	4013      	ands	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f36:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <__NVIC_SetPriorityGrouping+0x40>)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	60d3      	str	r3, [r2, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00
 8001f4c:	05fa0000 	.word	0x05fa0000

08001f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f54:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <__NVIC_GetPriorityGrouping+0x18>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	f003 0307 	and.w	r3, r3, #7
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	db0b      	blt.n	8001f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	f003 021f 	and.w	r2, r3, #31
 8001f84:	4907      	ldr	r1, [pc, #28]	@ (8001fa4 <__NVIC_EnableIRQ+0x38>)
 8001f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000e100 	.word	0xe000e100

08001fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db0a      	blt.n	8001fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	490c      	ldr	r1, [pc, #48]	@ (8001ff4 <__NVIC_SetPriority+0x4c>)
 8001fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd0:	e00a      	b.n	8001fe8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4908      	ldr	r1, [pc, #32]	@ (8001ff8 <__NVIC_SetPriority+0x50>)
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	761a      	strb	r2, [r3, #24]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	@ 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1c3 0307 	rsb	r3, r3, #7
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf28      	it	cs
 800201a:	2304      	movcs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3304      	adds	r3, #4
 8002022:	2b06      	cmp	r3, #6
 8002024:	d902      	bls.n	800202c <NVIC_EncodePriority+0x30>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b03      	subs	r3, #3
 800202a:	e000      	b.n	800202e <NVIC_EncodePriority+0x32>
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002044:	f04f 31ff 	mov.w	r1, #4294967295
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43d9      	mvns	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	4313      	orrs	r3, r2
         );
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	@ 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002074:	d301      	bcc.n	800207a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002076:	2301      	movs	r3, #1
 8002078:	e00f      	b.n	800209a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207a:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <SysTick_Config+0x40>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002082:	210f      	movs	r1, #15
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f7ff ff8e 	bl	8001fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800208c:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <SysTick_Config+0x40>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002092:	4b04      	ldr	r3, [pc, #16]	@ (80020a4 <SysTick_Config+0x40>)
 8002094:	2207      	movs	r2, #7
 8002096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	e000e010 	.word	0xe000e010

080020a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff29 	bl	8001f08 <__NVIC_SetPriorityGrouping>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020cc:	f7ff ff40 	bl	8001f50 <__NVIC_GetPriorityGrouping>
 80020d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	6978      	ldr	r0, [r7, #20]
 80020d8:	f7ff ff90 	bl	8001ffc <NVIC_EncodePriority>
 80020dc:	4602      	mov	r2, r0
 80020de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff5f 	bl	8001fa8 <__NVIC_SetPriority>
}
 80020ea:	bf00      	nop
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff33 	bl	8001f6c <__NVIC_EnableIRQ>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ffa4 	bl	8002064 <SysTick_Config>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800212c:	f3bf 8f5f 	dmb	sy
}
 8002130:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002132:	4b07      	ldr	r3, [pc, #28]	@ (8002150 <HAL_MPU_Disable+0x28>)
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	4a06      	ldr	r2, [pc, #24]	@ (8002150 <HAL_MPU_Disable+0x28>)
 8002138:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800213c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800213e:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <HAL_MPU_Disable+0x2c>)
 8002140:	2200      	movs	r2, #0
 8002142:	605a      	str	r2, [r3, #4]
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000ed00 	.word	0xe000ed00
 8002154:	e000ed90 	.word	0xe000ed90

08002158 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002160:	4a0b      	ldr	r2, [pc, #44]	@ (8002190 <HAL_MPU_Enable+0x38>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800216a:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <HAL_MPU_Enable+0x3c>)
 800216c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216e:	4a09      	ldr	r2, [pc, #36]	@ (8002194 <HAL_MPU_Enable+0x3c>)
 8002170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002174:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002176:	f3bf 8f4f 	dsb	sy
}
 800217a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800217c:	f3bf 8f6f 	isb	sy
}
 8002180:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000ed90 	.word	0xe000ed90
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	785a      	ldrb	r2, [r3, #1]
 80021a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <HAL_MPU_ConfigRegion+0x7c>)
 80021a6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80021a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002214 <HAL_MPU_ConfigRegion+0x7c>)
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	4a19      	ldr	r2, [pc, #100]	@ (8002214 <HAL_MPU_ConfigRegion+0x7c>)
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80021b4:	4a17      	ldr	r2, [pc, #92]	@ (8002214 <HAL_MPU_ConfigRegion+0x7c>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	7b1b      	ldrb	r3, [r3, #12]
 80021c0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	7adb      	ldrb	r3, [r3, #11]
 80021c6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7a9b      	ldrb	r3, [r3, #10]
 80021ce:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80021d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7b5b      	ldrb	r3, [r3, #13]
 80021d6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80021d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7b9b      	ldrb	r3, [r3, #14]
 80021de:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7bdb      	ldrb	r3, [r3, #15]
 80021e6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7a5b      	ldrb	r3, [r3, #9]
 80021ee:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7a1b      	ldrb	r3, [r3, #8]
 80021f6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021f8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	7812      	ldrb	r2, [r2, #0]
 80021fe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002200:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002202:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002204:	6113      	str	r3, [r2, #16]
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000ed90 	.word	0xe000ed90

08002218 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002220:	f7ff fe42 	bl	8001ea8 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e37d      	b.n	800292c <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a66      	ldr	r2, [pc, #408]	@ (80023d0 <HAL_DMA_Init+0x1b8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d04a      	beq.n	80022d0 <HAL_DMA_Init+0xb8>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a65      	ldr	r2, [pc, #404]	@ (80023d4 <HAL_DMA_Init+0x1bc>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d045      	beq.n	80022d0 <HAL_DMA_Init+0xb8>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a63      	ldr	r2, [pc, #396]	@ (80023d8 <HAL_DMA_Init+0x1c0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d040      	beq.n	80022d0 <HAL_DMA_Init+0xb8>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a62      	ldr	r2, [pc, #392]	@ (80023dc <HAL_DMA_Init+0x1c4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d03b      	beq.n	80022d0 <HAL_DMA_Init+0xb8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a60      	ldr	r2, [pc, #384]	@ (80023e0 <HAL_DMA_Init+0x1c8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d036      	beq.n	80022d0 <HAL_DMA_Init+0xb8>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a5f      	ldr	r2, [pc, #380]	@ (80023e4 <HAL_DMA_Init+0x1cc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d031      	beq.n	80022d0 <HAL_DMA_Init+0xb8>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a5d      	ldr	r2, [pc, #372]	@ (80023e8 <HAL_DMA_Init+0x1d0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d02c      	beq.n	80022d0 <HAL_DMA_Init+0xb8>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a5c      	ldr	r2, [pc, #368]	@ (80023ec <HAL_DMA_Init+0x1d4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d027      	beq.n	80022d0 <HAL_DMA_Init+0xb8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a5a      	ldr	r2, [pc, #360]	@ (80023f0 <HAL_DMA_Init+0x1d8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d022      	beq.n	80022d0 <HAL_DMA_Init+0xb8>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a59      	ldr	r2, [pc, #356]	@ (80023f4 <HAL_DMA_Init+0x1dc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d01d      	beq.n	80022d0 <HAL_DMA_Init+0xb8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a57      	ldr	r2, [pc, #348]	@ (80023f8 <HAL_DMA_Init+0x1e0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d018      	beq.n	80022d0 <HAL_DMA_Init+0xb8>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a56      	ldr	r2, [pc, #344]	@ (80023fc <HAL_DMA_Init+0x1e4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d013      	beq.n	80022d0 <HAL_DMA_Init+0xb8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a54      	ldr	r2, [pc, #336]	@ (8002400 <HAL_DMA_Init+0x1e8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00e      	beq.n	80022d0 <HAL_DMA_Init+0xb8>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a53      	ldr	r2, [pc, #332]	@ (8002404 <HAL_DMA_Init+0x1ec>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d009      	beq.n	80022d0 <HAL_DMA_Init+0xb8>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a51      	ldr	r2, [pc, #324]	@ (8002408 <HAL_DMA_Init+0x1f0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d004      	beq.n	80022d0 <HAL_DMA_Init+0xb8>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a50      	ldr	r2, [pc, #320]	@ (800240c <HAL_DMA_Init+0x1f4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d101      	bne.n	80022d4 <HAL_DMA_Init+0xbc>
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <HAL_DMA_Init+0xbe>
 80022d4:	2300      	movs	r3, #0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 813c 	beq.w	8002554 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a37      	ldr	r2, [pc, #220]	@ (80023d0 <HAL_DMA_Init+0x1b8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d04a      	beq.n	800238c <HAL_DMA_Init+0x174>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a36      	ldr	r2, [pc, #216]	@ (80023d4 <HAL_DMA_Init+0x1bc>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d045      	beq.n	800238c <HAL_DMA_Init+0x174>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a34      	ldr	r2, [pc, #208]	@ (80023d8 <HAL_DMA_Init+0x1c0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d040      	beq.n	800238c <HAL_DMA_Init+0x174>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a33      	ldr	r2, [pc, #204]	@ (80023dc <HAL_DMA_Init+0x1c4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d03b      	beq.n	800238c <HAL_DMA_Init+0x174>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a31      	ldr	r2, [pc, #196]	@ (80023e0 <HAL_DMA_Init+0x1c8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d036      	beq.n	800238c <HAL_DMA_Init+0x174>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a30      	ldr	r2, [pc, #192]	@ (80023e4 <HAL_DMA_Init+0x1cc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d031      	beq.n	800238c <HAL_DMA_Init+0x174>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a2e      	ldr	r2, [pc, #184]	@ (80023e8 <HAL_DMA_Init+0x1d0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d02c      	beq.n	800238c <HAL_DMA_Init+0x174>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a2d      	ldr	r2, [pc, #180]	@ (80023ec <HAL_DMA_Init+0x1d4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d027      	beq.n	800238c <HAL_DMA_Init+0x174>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a2b      	ldr	r2, [pc, #172]	@ (80023f0 <HAL_DMA_Init+0x1d8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d022      	beq.n	800238c <HAL_DMA_Init+0x174>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a2a      	ldr	r2, [pc, #168]	@ (80023f4 <HAL_DMA_Init+0x1dc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d01d      	beq.n	800238c <HAL_DMA_Init+0x174>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a28      	ldr	r2, [pc, #160]	@ (80023f8 <HAL_DMA_Init+0x1e0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d018      	beq.n	800238c <HAL_DMA_Init+0x174>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a27      	ldr	r2, [pc, #156]	@ (80023fc <HAL_DMA_Init+0x1e4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d013      	beq.n	800238c <HAL_DMA_Init+0x174>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a25      	ldr	r2, [pc, #148]	@ (8002400 <HAL_DMA_Init+0x1e8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00e      	beq.n	800238c <HAL_DMA_Init+0x174>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a24      	ldr	r2, [pc, #144]	@ (8002404 <HAL_DMA_Init+0x1ec>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d009      	beq.n	800238c <HAL_DMA_Init+0x174>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a22      	ldr	r2, [pc, #136]	@ (8002408 <HAL_DMA_Init+0x1f0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d004      	beq.n	800238c <HAL_DMA_Init+0x174>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a21      	ldr	r2, [pc, #132]	@ (800240c <HAL_DMA_Init+0x1f4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d108      	bne.n	800239e <HAL_DMA_Init+0x186>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	e007      	b.n	80023ae <HAL_DMA_Init+0x196>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0201 	bic.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023ae:	e02f      	b.n	8002410 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023b0:	f7ff fd7a 	bl	8001ea8 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b05      	cmp	r3, #5
 80023bc:	d928      	bls.n	8002410 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2220      	movs	r2, #32
 80023c2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2203      	movs	r2, #3
 80023c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e2ad      	b.n	800292c <HAL_DMA_Init+0x714>
 80023d0:	40020010 	.word	0x40020010
 80023d4:	40020028 	.word	0x40020028
 80023d8:	40020040 	.word	0x40020040
 80023dc:	40020058 	.word	0x40020058
 80023e0:	40020070 	.word	0x40020070
 80023e4:	40020088 	.word	0x40020088
 80023e8:	400200a0 	.word	0x400200a0
 80023ec:	400200b8 	.word	0x400200b8
 80023f0:	40020410 	.word	0x40020410
 80023f4:	40020428 	.word	0x40020428
 80023f8:	40020440 	.word	0x40020440
 80023fc:	40020458 	.word	0x40020458
 8002400:	40020470 	.word	0x40020470
 8002404:	40020488 	.word	0x40020488
 8002408:	400204a0 	.word	0x400204a0
 800240c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1c8      	bne.n	80023b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4b73      	ldr	r3, [pc, #460]	@ (80025f8 <HAL_DMA_Init+0x3e0>)
 800242a:	4013      	ands	r3, r2
 800242c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002436:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002442:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002460:	2b04      	cmp	r3, #4
 8002462:	d107      	bne.n	8002474 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246c:	4313      	orrs	r3, r2
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b28      	cmp	r3, #40	@ 0x28
 800247a:	d903      	bls.n	8002484 <HAL_DMA_Init+0x26c>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b2e      	cmp	r3, #46	@ 0x2e
 8002482:	d91f      	bls.n	80024c4 <HAL_DMA_Init+0x2ac>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b3e      	cmp	r3, #62	@ 0x3e
 800248a:	d903      	bls.n	8002494 <HAL_DMA_Init+0x27c>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b42      	cmp	r3, #66	@ 0x42
 8002492:	d917      	bls.n	80024c4 <HAL_DMA_Init+0x2ac>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b46      	cmp	r3, #70	@ 0x46
 800249a:	d903      	bls.n	80024a4 <HAL_DMA_Init+0x28c>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b48      	cmp	r3, #72	@ 0x48
 80024a2:	d90f      	bls.n	80024c4 <HAL_DMA_Init+0x2ac>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b4e      	cmp	r3, #78	@ 0x4e
 80024aa:	d903      	bls.n	80024b4 <HAL_DMA_Init+0x29c>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b52      	cmp	r3, #82	@ 0x52
 80024b2:	d907      	bls.n	80024c4 <HAL_DMA_Init+0x2ac>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b73      	cmp	r3, #115	@ 0x73
 80024ba:	d905      	bls.n	80024c8 <HAL_DMA_Init+0x2b0>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b77      	cmp	r3, #119	@ 0x77
 80024c2:	d801      	bhi.n	80024c8 <HAL_DMA_Init+0x2b0>
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <HAL_DMA_Init+0x2b2>
 80024c8:	2300      	movs	r3, #0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024d4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f023 0307 	bic.w	r3, r3, #7
 80024ec:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d117      	bne.n	8002530 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	4313      	orrs	r3, r2
 8002508:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00e      	beq.n	8002530 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f002 fbe0 	bl	8004cd8 <DMA_CheckFifoParam>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2240      	movs	r2, #64	@ 0x40
 8002522:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e1fd      	b.n	800292c <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f002 fb1b 	bl	8004b74 <DMA_CalcBaseAndBitshift>
 800253e:	4603      	mov	r3, r0
 8002540:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	223f      	movs	r2, #63	@ 0x3f
 800254c:	409a      	lsls	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	e0fd      	b.n	8002750 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a28      	ldr	r2, [pc, #160]	@ (80025fc <HAL_DMA_Init+0x3e4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d04a      	beq.n	80025f4 <HAL_DMA_Init+0x3dc>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a27      	ldr	r2, [pc, #156]	@ (8002600 <HAL_DMA_Init+0x3e8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d045      	beq.n	80025f4 <HAL_DMA_Init+0x3dc>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a25      	ldr	r2, [pc, #148]	@ (8002604 <HAL_DMA_Init+0x3ec>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d040      	beq.n	80025f4 <HAL_DMA_Init+0x3dc>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a24      	ldr	r2, [pc, #144]	@ (8002608 <HAL_DMA_Init+0x3f0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d03b      	beq.n	80025f4 <HAL_DMA_Init+0x3dc>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a22      	ldr	r2, [pc, #136]	@ (800260c <HAL_DMA_Init+0x3f4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d036      	beq.n	80025f4 <HAL_DMA_Init+0x3dc>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a21      	ldr	r2, [pc, #132]	@ (8002610 <HAL_DMA_Init+0x3f8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d031      	beq.n	80025f4 <HAL_DMA_Init+0x3dc>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1f      	ldr	r2, [pc, #124]	@ (8002614 <HAL_DMA_Init+0x3fc>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d02c      	beq.n	80025f4 <HAL_DMA_Init+0x3dc>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1e      	ldr	r2, [pc, #120]	@ (8002618 <HAL_DMA_Init+0x400>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d027      	beq.n	80025f4 <HAL_DMA_Init+0x3dc>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1c      	ldr	r2, [pc, #112]	@ (800261c <HAL_DMA_Init+0x404>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d022      	beq.n	80025f4 <HAL_DMA_Init+0x3dc>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002620 <HAL_DMA_Init+0x408>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d01d      	beq.n	80025f4 <HAL_DMA_Init+0x3dc>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a19      	ldr	r2, [pc, #100]	@ (8002624 <HAL_DMA_Init+0x40c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d018      	beq.n	80025f4 <HAL_DMA_Init+0x3dc>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a18      	ldr	r2, [pc, #96]	@ (8002628 <HAL_DMA_Init+0x410>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d013      	beq.n	80025f4 <HAL_DMA_Init+0x3dc>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a16      	ldr	r2, [pc, #88]	@ (800262c <HAL_DMA_Init+0x414>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00e      	beq.n	80025f4 <HAL_DMA_Init+0x3dc>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a15      	ldr	r2, [pc, #84]	@ (8002630 <HAL_DMA_Init+0x418>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d009      	beq.n	80025f4 <HAL_DMA_Init+0x3dc>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a13      	ldr	r2, [pc, #76]	@ (8002634 <HAL_DMA_Init+0x41c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d004      	beq.n	80025f4 <HAL_DMA_Init+0x3dc>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a12      	ldr	r2, [pc, #72]	@ (8002638 <HAL_DMA_Init+0x420>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d123      	bne.n	800263c <HAL_DMA_Init+0x424>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e022      	b.n	800263e <HAL_DMA_Init+0x426>
 80025f8:	fe10803f 	.word	0xfe10803f
 80025fc:	48022c08 	.word	0x48022c08
 8002600:	48022c1c 	.word	0x48022c1c
 8002604:	48022c30 	.word	0x48022c30
 8002608:	48022c44 	.word	0x48022c44
 800260c:	48022c58 	.word	0x48022c58
 8002610:	48022c6c 	.word	0x48022c6c
 8002614:	48022c80 	.word	0x48022c80
 8002618:	48022c94 	.word	0x48022c94
 800261c:	58025408 	.word	0x58025408
 8002620:	5802541c 	.word	0x5802541c
 8002624:	58025430 	.word	0x58025430
 8002628:	58025444 	.word	0x58025444
 800262c:	58025458 	.word	0x58025458
 8002630:	5802546c 	.word	0x5802546c
 8002634:	58025480 	.word	0x58025480
 8002638:	58025494 	.word	0x58025494
 800263c:	2300      	movs	r3, #0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d07d      	beq.n	800273e <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a7f      	ldr	r2, [pc, #508]	@ (8002844 <HAL_DMA_Init+0x62c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d021      	beq.n	8002690 <HAL_DMA_Init+0x478>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a7d      	ldr	r2, [pc, #500]	@ (8002848 <HAL_DMA_Init+0x630>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d01c      	beq.n	8002690 <HAL_DMA_Init+0x478>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a7c      	ldr	r2, [pc, #496]	@ (800284c <HAL_DMA_Init+0x634>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d017      	beq.n	8002690 <HAL_DMA_Init+0x478>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a7a      	ldr	r2, [pc, #488]	@ (8002850 <HAL_DMA_Init+0x638>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d012      	beq.n	8002690 <HAL_DMA_Init+0x478>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a79      	ldr	r2, [pc, #484]	@ (8002854 <HAL_DMA_Init+0x63c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d00d      	beq.n	8002690 <HAL_DMA_Init+0x478>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a77      	ldr	r2, [pc, #476]	@ (8002858 <HAL_DMA_Init+0x640>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d008      	beq.n	8002690 <HAL_DMA_Init+0x478>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a76      	ldr	r2, [pc, #472]	@ (800285c <HAL_DMA_Init+0x644>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d003      	beq.n	8002690 <HAL_DMA_Init+0x478>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a74      	ldr	r2, [pc, #464]	@ (8002860 <HAL_DMA_Init+0x648>)
 800268e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	4b6e      	ldr	r3, [pc, #440]	@ (8002864 <HAL_DMA_Init+0x64c>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b40      	cmp	r3, #64	@ 0x40
 80026b6:	d008      	beq.n	80026ca <HAL_DMA_Init+0x4b2>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b80      	cmp	r3, #128	@ 0x80
 80026be:	d102      	bne.n	80026c6 <HAL_DMA_Init+0x4ae>
 80026c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026c4:	e002      	b.n	80026cc <HAL_DMA_Init+0x4b4>
 80026c6:	2300      	movs	r3, #0
 80026c8:	e000      	b.n	80026cc <HAL_DMA_Init+0x4b4>
 80026ca:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68d2      	ldr	r2, [r2, #12]
 80026d0:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026d2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80026da:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80026e2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80026ea:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80026f2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80026fa:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	4b55      	ldr	r3, [pc, #340]	@ (8002868 <HAL_DMA_Init+0x650>)
 8002712:	4413      	add	r3, r2
 8002714:	4a55      	ldr	r2, [pc, #340]	@ (800286c <HAL_DMA_Init+0x654>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	009a      	lsls	r2, r3, #2
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f002 fa26 	bl	8004b74 <DMA_CalcBaseAndBitshift>
 8002728:	4603      	mov	r3, r0
 800272a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	2201      	movs	r2, #1
 8002736:	409a      	lsls	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	e008      	b.n	8002750 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2240      	movs	r2, #64	@ 0x40
 8002742:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2203      	movs	r2, #3
 8002748:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0ed      	b.n	800292c <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a46      	ldr	r2, [pc, #280]	@ (8002870 <HAL_DMA_Init+0x658>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d072      	beq.n	8002840 <HAL_DMA_Init+0x628>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a45      	ldr	r2, [pc, #276]	@ (8002874 <HAL_DMA_Init+0x65c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d06d      	beq.n	8002840 <HAL_DMA_Init+0x628>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a43      	ldr	r2, [pc, #268]	@ (8002878 <HAL_DMA_Init+0x660>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d068      	beq.n	8002840 <HAL_DMA_Init+0x628>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a42      	ldr	r2, [pc, #264]	@ (800287c <HAL_DMA_Init+0x664>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d063      	beq.n	8002840 <HAL_DMA_Init+0x628>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a40      	ldr	r2, [pc, #256]	@ (8002880 <HAL_DMA_Init+0x668>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d05e      	beq.n	8002840 <HAL_DMA_Init+0x628>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a3f      	ldr	r2, [pc, #252]	@ (8002884 <HAL_DMA_Init+0x66c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d059      	beq.n	8002840 <HAL_DMA_Init+0x628>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a3d      	ldr	r2, [pc, #244]	@ (8002888 <HAL_DMA_Init+0x670>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d054      	beq.n	8002840 <HAL_DMA_Init+0x628>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a3c      	ldr	r2, [pc, #240]	@ (800288c <HAL_DMA_Init+0x674>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d04f      	beq.n	8002840 <HAL_DMA_Init+0x628>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002890 <HAL_DMA_Init+0x678>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d04a      	beq.n	8002840 <HAL_DMA_Init+0x628>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a39      	ldr	r2, [pc, #228]	@ (8002894 <HAL_DMA_Init+0x67c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d045      	beq.n	8002840 <HAL_DMA_Init+0x628>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a37      	ldr	r2, [pc, #220]	@ (8002898 <HAL_DMA_Init+0x680>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d040      	beq.n	8002840 <HAL_DMA_Init+0x628>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a36      	ldr	r2, [pc, #216]	@ (800289c <HAL_DMA_Init+0x684>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d03b      	beq.n	8002840 <HAL_DMA_Init+0x628>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a34      	ldr	r2, [pc, #208]	@ (80028a0 <HAL_DMA_Init+0x688>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d036      	beq.n	8002840 <HAL_DMA_Init+0x628>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a33      	ldr	r2, [pc, #204]	@ (80028a4 <HAL_DMA_Init+0x68c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d031      	beq.n	8002840 <HAL_DMA_Init+0x628>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a31      	ldr	r2, [pc, #196]	@ (80028a8 <HAL_DMA_Init+0x690>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d02c      	beq.n	8002840 <HAL_DMA_Init+0x628>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a30      	ldr	r2, [pc, #192]	@ (80028ac <HAL_DMA_Init+0x694>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d027      	beq.n	8002840 <HAL_DMA_Init+0x628>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a13      	ldr	r2, [pc, #76]	@ (8002844 <HAL_DMA_Init+0x62c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d022      	beq.n	8002840 <HAL_DMA_Init+0x628>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a12      	ldr	r2, [pc, #72]	@ (8002848 <HAL_DMA_Init+0x630>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d01d      	beq.n	8002840 <HAL_DMA_Init+0x628>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a10      	ldr	r2, [pc, #64]	@ (800284c <HAL_DMA_Init+0x634>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d018      	beq.n	8002840 <HAL_DMA_Init+0x628>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a0f      	ldr	r2, [pc, #60]	@ (8002850 <HAL_DMA_Init+0x638>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d013      	beq.n	8002840 <HAL_DMA_Init+0x628>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0d      	ldr	r2, [pc, #52]	@ (8002854 <HAL_DMA_Init+0x63c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00e      	beq.n	8002840 <HAL_DMA_Init+0x628>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a0c      	ldr	r2, [pc, #48]	@ (8002858 <HAL_DMA_Init+0x640>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d009      	beq.n	8002840 <HAL_DMA_Init+0x628>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0a      	ldr	r2, [pc, #40]	@ (800285c <HAL_DMA_Init+0x644>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d004      	beq.n	8002840 <HAL_DMA_Init+0x628>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a09      	ldr	r2, [pc, #36]	@ (8002860 <HAL_DMA_Init+0x648>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d137      	bne.n	80028b0 <HAL_DMA_Init+0x698>
 8002840:	2301      	movs	r3, #1
 8002842:	e036      	b.n	80028b2 <HAL_DMA_Init+0x69a>
 8002844:	58025408 	.word	0x58025408
 8002848:	5802541c 	.word	0x5802541c
 800284c:	58025430 	.word	0x58025430
 8002850:	58025444 	.word	0x58025444
 8002854:	58025458 	.word	0x58025458
 8002858:	5802546c 	.word	0x5802546c
 800285c:	58025480 	.word	0x58025480
 8002860:	58025494 	.word	0x58025494
 8002864:	fffe000f 	.word	0xfffe000f
 8002868:	a7fdabf8 	.word	0xa7fdabf8
 800286c:	cccccccd 	.word	0xcccccccd
 8002870:	40020010 	.word	0x40020010
 8002874:	40020028 	.word	0x40020028
 8002878:	40020040 	.word	0x40020040
 800287c:	40020058 	.word	0x40020058
 8002880:	40020070 	.word	0x40020070
 8002884:	40020088 	.word	0x40020088
 8002888:	400200a0 	.word	0x400200a0
 800288c:	400200b8 	.word	0x400200b8
 8002890:	40020410 	.word	0x40020410
 8002894:	40020428 	.word	0x40020428
 8002898:	40020440 	.word	0x40020440
 800289c:	40020458 	.word	0x40020458
 80028a0:	40020470 	.word	0x40020470
 80028a4:	40020488 	.word	0x40020488
 80028a8:	400204a0 	.word	0x400204a0
 80028ac:	400204b8 	.word	0x400204b8
 80028b0:	2300      	movs	r3, #0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d032      	beq.n	800291c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f002 fa8a 	bl	8004dd0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b80      	cmp	r3, #128	@ 0x80
 80028c2:	d102      	bne.n	80028ca <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80028de:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d010      	beq.n	800290a <HAL_DMA_Init+0x6f2>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d80c      	bhi.n	800290a <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f002 fb07 	bl	8004f04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	e008      	b.n	800291c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e226      	b.n	8002d9e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_DMA_Start_IT+0x2a>
 800295a:	2302      	movs	r3, #2
 800295c:	e21f      	b.n	8002d9e <HAL_DMA_Start_IT+0x46a>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b01      	cmp	r3, #1
 8002970:	f040 820a 	bne.w	8002d88 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a68      	ldr	r2, [pc, #416]	@ (8002b28 <HAL_DMA_Start_IT+0x1f4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d04a      	beq.n	8002a22 <HAL_DMA_Start_IT+0xee>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a66      	ldr	r2, [pc, #408]	@ (8002b2c <HAL_DMA_Start_IT+0x1f8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d045      	beq.n	8002a22 <HAL_DMA_Start_IT+0xee>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a65      	ldr	r2, [pc, #404]	@ (8002b30 <HAL_DMA_Start_IT+0x1fc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d040      	beq.n	8002a22 <HAL_DMA_Start_IT+0xee>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a63      	ldr	r2, [pc, #396]	@ (8002b34 <HAL_DMA_Start_IT+0x200>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d03b      	beq.n	8002a22 <HAL_DMA_Start_IT+0xee>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a62      	ldr	r2, [pc, #392]	@ (8002b38 <HAL_DMA_Start_IT+0x204>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d036      	beq.n	8002a22 <HAL_DMA_Start_IT+0xee>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a60      	ldr	r2, [pc, #384]	@ (8002b3c <HAL_DMA_Start_IT+0x208>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d031      	beq.n	8002a22 <HAL_DMA_Start_IT+0xee>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a5f      	ldr	r2, [pc, #380]	@ (8002b40 <HAL_DMA_Start_IT+0x20c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d02c      	beq.n	8002a22 <HAL_DMA_Start_IT+0xee>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a5d      	ldr	r2, [pc, #372]	@ (8002b44 <HAL_DMA_Start_IT+0x210>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d027      	beq.n	8002a22 <HAL_DMA_Start_IT+0xee>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002b48 <HAL_DMA_Start_IT+0x214>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d022      	beq.n	8002a22 <HAL_DMA_Start_IT+0xee>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a5a      	ldr	r2, [pc, #360]	@ (8002b4c <HAL_DMA_Start_IT+0x218>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d01d      	beq.n	8002a22 <HAL_DMA_Start_IT+0xee>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a59      	ldr	r2, [pc, #356]	@ (8002b50 <HAL_DMA_Start_IT+0x21c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d018      	beq.n	8002a22 <HAL_DMA_Start_IT+0xee>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a57      	ldr	r2, [pc, #348]	@ (8002b54 <HAL_DMA_Start_IT+0x220>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_DMA_Start_IT+0xee>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a56      	ldr	r2, [pc, #344]	@ (8002b58 <HAL_DMA_Start_IT+0x224>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00e      	beq.n	8002a22 <HAL_DMA_Start_IT+0xee>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a54      	ldr	r2, [pc, #336]	@ (8002b5c <HAL_DMA_Start_IT+0x228>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d009      	beq.n	8002a22 <HAL_DMA_Start_IT+0xee>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a53      	ldr	r2, [pc, #332]	@ (8002b60 <HAL_DMA_Start_IT+0x22c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d004      	beq.n	8002a22 <HAL_DMA_Start_IT+0xee>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a51      	ldr	r2, [pc, #324]	@ (8002b64 <HAL_DMA_Start_IT+0x230>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d108      	bne.n	8002a34 <HAL_DMA_Start_IT+0x100>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0201 	bic.w	r2, r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	e007      	b.n	8002a44 <HAL_DMA_Start_IT+0x110>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f001 feae 	bl	80047ac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a34      	ldr	r2, [pc, #208]	@ (8002b28 <HAL_DMA_Start_IT+0x1f4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d04a      	beq.n	8002af0 <HAL_DMA_Start_IT+0x1bc>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a33      	ldr	r2, [pc, #204]	@ (8002b2c <HAL_DMA_Start_IT+0x1f8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d045      	beq.n	8002af0 <HAL_DMA_Start_IT+0x1bc>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a31      	ldr	r2, [pc, #196]	@ (8002b30 <HAL_DMA_Start_IT+0x1fc>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d040      	beq.n	8002af0 <HAL_DMA_Start_IT+0x1bc>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a30      	ldr	r2, [pc, #192]	@ (8002b34 <HAL_DMA_Start_IT+0x200>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d03b      	beq.n	8002af0 <HAL_DMA_Start_IT+0x1bc>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a2e      	ldr	r2, [pc, #184]	@ (8002b38 <HAL_DMA_Start_IT+0x204>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d036      	beq.n	8002af0 <HAL_DMA_Start_IT+0x1bc>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a2d      	ldr	r2, [pc, #180]	@ (8002b3c <HAL_DMA_Start_IT+0x208>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d031      	beq.n	8002af0 <HAL_DMA_Start_IT+0x1bc>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a2b      	ldr	r2, [pc, #172]	@ (8002b40 <HAL_DMA_Start_IT+0x20c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d02c      	beq.n	8002af0 <HAL_DMA_Start_IT+0x1bc>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a2a      	ldr	r2, [pc, #168]	@ (8002b44 <HAL_DMA_Start_IT+0x210>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d027      	beq.n	8002af0 <HAL_DMA_Start_IT+0x1bc>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a28      	ldr	r2, [pc, #160]	@ (8002b48 <HAL_DMA_Start_IT+0x214>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d022      	beq.n	8002af0 <HAL_DMA_Start_IT+0x1bc>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a27      	ldr	r2, [pc, #156]	@ (8002b4c <HAL_DMA_Start_IT+0x218>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d01d      	beq.n	8002af0 <HAL_DMA_Start_IT+0x1bc>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a25      	ldr	r2, [pc, #148]	@ (8002b50 <HAL_DMA_Start_IT+0x21c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d018      	beq.n	8002af0 <HAL_DMA_Start_IT+0x1bc>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a24      	ldr	r2, [pc, #144]	@ (8002b54 <HAL_DMA_Start_IT+0x220>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d013      	beq.n	8002af0 <HAL_DMA_Start_IT+0x1bc>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a22      	ldr	r2, [pc, #136]	@ (8002b58 <HAL_DMA_Start_IT+0x224>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00e      	beq.n	8002af0 <HAL_DMA_Start_IT+0x1bc>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a21      	ldr	r2, [pc, #132]	@ (8002b5c <HAL_DMA_Start_IT+0x228>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_DMA_Start_IT+0x1bc>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b60 <HAL_DMA_Start_IT+0x22c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_DMA_Start_IT+0x1bc>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a1e      	ldr	r2, [pc, #120]	@ (8002b64 <HAL_DMA_Start_IT+0x230>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d101      	bne.n	8002af4 <HAL_DMA_Start_IT+0x1c0>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <HAL_DMA_Start_IT+0x1c2>
 8002af4:	2300      	movs	r3, #0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d036      	beq.n	8002b68 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f023 021e 	bic.w	r2, r3, #30
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0216 	orr.w	r2, r2, #22
 8002b0c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d03e      	beq.n	8002b94 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0208 	orr.w	r2, r2, #8
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	e035      	b.n	8002b94 <HAL_DMA_Start_IT+0x260>
 8002b28:	40020010 	.word	0x40020010
 8002b2c:	40020028 	.word	0x40020028
 8002b30:	40020040 	.word	0x40020040
 8002b34:	40020058 	.word	0x40020058
 8002b38:	40020070 	.word	0x40020070
 8002b3c:	40020088 	.word	0x40020088
 8002b40:	400200a0 	.word	0x400200a0
 8002b44:	400200b8 	.word	0x400200b8
 8002b48:	40020410 	.word	0x40020410
 8002b4c:	40020428 	.word	0x40020428
 8002b50:	40020440 	.word	0x40020440
 8002b54:	40020458 	.word	0x40020458
 8002b58:	40020470 	.word	0x40020470
 8002b5c:	40020488 	.word	0x40020488
 8002b60:	400204a0 	.word	0x400204a0
 8002b64:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 020e 	bic.w	r2, r3, #14
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 020a 	orr.w	r2, r2, #10
 8002b7a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0204 	orr.w	r2, r2, #4
 8002b92:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a83      	ldr	r2, [pc, #524]	@ (8002da8 <HAL_DMA_Start_IT+0x474>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d072      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a82      	ldr	r2, [pc, #520]	@ (8002dac <HAL_DMA_Start_IT+0x478>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d06d      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a80      	ldr	r2, [pc, #512]	@ (8002db0 <HAL_DMA_Start_IT+0x47c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d068      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a7f      	ldr	r2, [pc, #508]	@ (8002db4 <HAL_DMA_Start_IT+0x480>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d063      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a7d      	ldr	r2, [pc, #500]	@ (8002db8 <HAL_DMA_Start_IT+0x484>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d05e      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a7c      	ldr	r2, [pc, #496]	@ (8002dbc <HAL_DMA_Start_IT+0x488>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d059      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a7a      	ldr	r2, [pc, #488]	@ (8002dc0 <HAL_DMA_Start_IT+0x48c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d054      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a79      	ldr	r2, [pc, #484]	@ (8002dc4 <HAL_DMA_Start_IT+0x490>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d04f      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a77      	ldr	r2, [pc, #476]	@ (8002dc8 <HAL_DMA_Start_IT+0x494>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d04a      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a76      	ldr	r2, [pc, #472]	@ (8002dcc <HAL_DMA_Start_IT+0x498>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d045      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a74      	ldr	r2, [pc, #464]	@ (8002dd0 <HAL_DMA_Start_IT+0x49c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d040      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a73      	ldr	r2, [pc, #460]	@ (8002dd4 <HAL_DMA_Start_IT+0x4a0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d03b      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a71      	ldr	r2, [pc, #452]	@ (8002dd8 <HAL_DMA_Start_IT+0x4a4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d036      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a70      	ldr	r2, [pc, #448]	@ (8002ddc <HAL_DMA_Start_IT+0x4a8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d031      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a6e      	ldr	r2, [pc, #440]	@ (8002de0 <HAL_DMA_Start_IT+0x4ac>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d02c      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a6d      	ldr	r2, [pc, #436]	@ (8002de4 <HAL_DMA_Start_IT+0x4b0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d027      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a6b      	ldr	r2, [pc, #428]	@ (8002de8 <HAL_DMA_Start_IT+0x4b4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d022      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a6a      	ldr	r2, [pc, #424]	@ (8002dec <HAL_DMA_Start_IT+0x4b8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d01d      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a68      	ldr	r2, [pc, #416]	@ (8002df0 <HAL_DMA_Start_IT+0x4bc>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d018      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a67      	ldr	r2, [pc, #412]	@ (8002df4 <HAL_DMA_Start_IT+0x4c0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d013      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a65      	ldr	r2, [pc, #404]	@ (8002df8 <HAL_DMA_Start_IT+0x4c4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00e      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a64      	ldr	r2, [pc, #400]	@ (8002dfc <HAL_DMA_Start_IT+0x4c8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d009      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a62      	ldr	r2, [pc, #392]	@ (8002e00 <HAL_DMA_Start_IT+0x4cc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d004      	beq.n	8002c84 <HAL_DMA_Start_IT+0x350>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a61      	ldr	r2, [pc, #388]	@ (8002e04 <HAL_DMA_Start_IT+0x4d0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d101      	bne.n	8002c88 <HAL_DMA_Start_IT+0x354>
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <HAL_DMA_Start_IT+0x356>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01a      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002caa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d007      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cc2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a37      	ldr	r2, [pc, #220]	@ (8002da8 <HAL_DMA_Start_IT+0x474>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d04a      	beq.n	8002d64 <HAL_DMA_Start_IT+0x430>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a36      	ldr	r2, [pc, #216]	@ (8002dac <HAL_DMA_Start_IT+0x478>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d045      	beq.n	8002d64 <HAL_DMA_Start_IT+0x430>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a34      	ldr	r2, [pc, #208]	@ (8002db0 <HAL_DMA_Start_IT+0x47c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d040      	beq.n	8002d64 <HAL_DMA_Start_IT+0x430>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a33      	ldr	r2, [pc, #204]	@ (8002db4 <HAL_DMA_Start_IT+0x480>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d03b      	beq.n	8002d64 <HAL_DMA_Start_IT+0x430>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a31      	ldr	r2, [pc, #196]	@ (8002db8 <HAL_DMA_Start_IT+0x484>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d036      	beq.n	8002d64 <HAL_DMA_Start_IT+0x430>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a30      	ldr	r2, [pc, #192]	@ (8002dbc <HAL_DMA_Start_IT+0x488>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d031      	beq.n	8002d64 <HAL_DMA_Start_IT+0x430>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a2e      	ldr	r2, [pc, #184]	@ (8002dc0 <HAL_DMA_Start_IT+0x48c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d02c      	beq.n	8002d64 <HAL_DMA_Start_IT+0x430>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a2d      	ldr	r2, [pc, #180]	@ (8002dc4 <HAL_DMA_Start_IT+0x490>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d027      	beq.n	8002d64 <HAL_DMA_Start_IT+0x430>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a2b      	ldr	r2, [pc, #172]	@ (8002dc8 <HAL_DMA_Start_IT+0x494>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d022      	beq.n	8002d64 <HAL_DMA_Start_IT+0x430>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a2a      	ldr	r2, [pc, #168]	@ (8002dcc <HAL_DMA_Start_IT+0x498>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d01d      	beq.n	8002d64 <HAL_DMA_Start_IT+0x430>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a28      	ldr	r2, [pc, #160]	@ (8002dd0 <HAL_DMA_Start_IT+0x49c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d018      	beq.n	8002d64 <HAL_DMA_Start_IT+0x430>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a27      	ldr	r2, [pc, #156]	@ (8002dd4 <HAL_DMA_Start_IT+0x4a0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <HAL_DMA_Start_IT+0x430>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a25      	ldr	r2, [pc, #148]	@ (8002dd8 <HAL_DMA_Start_IT+0x4a4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00e      	beq.n	8002d64 <HAL_DMA_Start_IT+0x430>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a24      	ldr	r2, [pc, #144]	@ (8002ddc <HAL_DMA_Start_IT+0x4a8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d009      	beq.n	8002d64 <HAL_DMA_Start_IT+0x430>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a22      	ldr	r2, [pc, #136]	@ (8002de0 <HAL_DMA_Start_IT+0x4ac>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d004      	beq.n	8002d64 <HAL_DMA_Start_IT+0x430>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a21      	ldr	r2, [pc, #132]	@ (8002de4 <HAL_DMA_Start_IT+0x4b0>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d108      	bne.n	8002d76 <HAL_DMA_Start_IT+0x442>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	e012      	b.n	8002d9c <HAL_DMA_Start_IT+0x468>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0201 	orr.w	r2, r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e009      	b.n	8002d9c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d8e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40020010 	.word	0x40020010
 8002dac:	40020028 	.word	0x40020028
 8002db0:	40020040 	.word	0x40020040
 8002db4:	40020058 	.word	0x40020058
 8002db8:	40020070 	.word	0x40020070
 8002dbc:	40020088 	.word	0x40020088
 8002dc0:	400200a0 	.word	0x400200a0
 8002dc4:	400200b8 	.word	0x400200b8
 8002dc8:	40020410 	.word	0x40020410
 8002dcc:	40020428 	.word	0x40020428
 8002dd0:	40020440 	.word	0x40020440
 8002dd4:	40020458 	.word	0x40020458
 8002dd8:	40020470 	.word	0x40020470
 8002ddc:	40020488 	.word	0x40020488
 8002de0:	400204a0 	.word	0x400204a0
 8002de4:	400204b8 	.word	0x400204b8
 8002de8:	58025408 	.word	0x58025408
 8002dec:	5802541c 	.word	0x5802541c
 8002df0:	58025430 	.word	0x58025430
 8002df4:	58025444 	.word	0x58025444
 8002df8:	58025458 	.word	0x58025458
 8002dfc:	5802546c 	.word	0x5802546c
 8002e00:	58025480 	.word	0x58025480
 8002e04:	58025494 	.word	0x58025494

08002e08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e10:	f7ff f84a 	bl	8001ea8 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e2dc      	b.n	80033da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d008      	beq.n	8002e3e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2280      	movs	r2, #128	@ 0x80
 8002e30:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e2cd      	b.n	80033da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a76      	ldr	r2, [pc, #472]	@ (800301c <HAL_DMA_Abort+0x214>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d04a      	beq.n	8002ede <HAL_DMA_Abort+0xd6>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a74      	ldr	r2, [pc, #464]	@ (8003020 <HAL_DMA_Abort+0x218>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d045      	beq.n	8002ede <HAL_DMA_Abort+0xd6>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a73      	ldr	r2, [pc, #460]	@ (8003024 <HAL_DMA_Abort+0x21c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d040      	beq.n	8002ede <HAL_DMA_Abort+0xd6>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a71      	ldr	r2, [pc, #452]	@ (8003028 <HAL_DMA_Abort+0x220>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d03b      	beq.n	8002ede <HAL_DMA_Abort+0xd6>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a70      	ldr	r2, [pc, #448]	@ (800302c <HAL_DMA_Abort+0x224>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d036      	beq.n	8002ede <HAL_DMA_Abort+0xd6>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a6e      	ldr	r2, [pc, #440]	@ (8003030 <HAL_DMA_Abort+0x228>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d031      	beq.n	8002ede <HAL_DMA_Abort+0xd6>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a6d      	ldr	r2, [pc, #436]	@ (8003034 <HAL_DMA_Abort+0x22c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d02c      	beq.n	8002ede <HAL_DMA_Abort+0xd6>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a6b      	ldr	r2, [pc, #428]	@ (8003038 <HAL_DMA_Abort+0x230>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d027      	beq.n	8002ede <HAL_DMA_Abort+0xd6>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a6a      	ldr	r2, [pc, #424]	@ (800303c <HAL_DMA_Abort+0x234>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d022      	beq.n	8002ede <HAL_DMA_Abort+0xd6>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a68      	ldr	r2, [pc, #416]	@ (8003040 <HAL_DMA_Abort+0x238>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d01d      	beq.n	8002ede <HAL_DMA_Abort+0xd6>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a67      	ldr	r2, [pc, #412]	@ (8003044 <HAL_DMA_Abort+0x23c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d018      	beq.n	8002ede <HAL_DMA_Abort+0xd6>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a65      	ldr	r2, [pc, #404]	@ (8003048 <HAL_DMA_Abort+0x240>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d013      	beq.n	8002ede <HAL_DMA_Abort+0xd6>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a64      	ldr	r2, [pc, #400]	@ (800304c <HAL_DMA_Abort+0x244>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00e      	beq.n	8002ede <HAL_DMA_Abort+0xd6>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a62      	ldr	r2, [pc, #392]	@ (8003050 <HAL_DMA_Abort+0x248>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d009      	beq.n	8002ede <HAL_DMA_Abort+0xd6>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a61      	ldr	r2, [pc, #388]	@ (8003054 <HAL_DMA_Abort+0x24c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d004      	beq.n	8002ede <HAL_DMA_Abort+0xd6>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a5f      	ldr	r2, [pc, #380]	@ (8003058 <HAL_DMA_Abort+0x250>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d101      	bne.n	8002ee2 <HAL_DMA_Abort+0xda>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_DMA_Abort+0xdc>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d013      	beq.n	8002f10 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 021e 	bic.w	r2, r2, #30
 8002ef6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695a      	ldr	r2, [r3, #20]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f06:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	e00a      	b.n	8002f26 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 020e 	bic.w	r2, r2, #14
 8002f1e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a3c      	ldr	r2, [pc, #240]	@ (800301c <HAL_DMA_Abort+0x214>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d072      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a3a      	ldr	r2, [pc, #232]	@ (8003020 <HAL_DMA_Abort+0x218>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d06d      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a39      	ldr	r2, [pc, #228]	@ (8003024 <HAL_DMA_Abort+0x21c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d068      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a37      	ldr	r2, [pc, #220]	@ (8003028 <HAL_DMA_Abort+0x220>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d063      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a36      	ldr	r2, [pc, #216]	@ (800302c <HAL_DMA_Abort+0x224>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d05e      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a34      	ldr	r2, [pc, #208]	@ (8003030 <HAL_DMA_Abort+0x228>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d059      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a33      	ldr	r2, [pc, #204]	@ (8003034 <HAL_DMA_Abort+0x22c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d054      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a31      	ldr	r2, [pc, #196]	@ (8003038 <HAL_DMA_Abort+0x230>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d04f      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a30      	ldr	r2, [pc, #192]	@ (800303c <HAL_DMA_Abort+0x234>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d04a      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2e      	ldr	r2, [pc, #184]	@ (8003040 <HAL_DMA_Abort+0x238>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d045      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a2d      	ldr	r2, [pc, #180]	@ (8003044 <HAL_DMA_Abort+0x23c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d040      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a2b      	ldr	r2, [pc, #172]	@ (8003048 <HAL_DMA_Abort+0x240>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d03b      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800304c <HAL_DMA_Abort+0x244>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d036      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a28      	ldr	r2, [pc, #160]	@ (8003050 <HAL_DMA_Abort+0x248>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d031      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a27      	ldr	r2, [pc, #156]	@ (8003054 <HAL_DMA_Abort+0x24c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d02c      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a25      	ldr	r2, [pc, #148]	@ (8003058 <HAL_DMA_Abort+0x250>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d027      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a24      	ldr	r2, [pc, #144]	@ (800305c <HAL_DMA_Abort+0x254>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d022      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a22      	ldr	r2, [pc, #136]	@ (8003060 <HAL_DMA_Abort+0x258>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d01d      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a21      	ldr	r2, [pc, #132]	@ (8003064 <HAL_DMA_Abort+0x25c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d018      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8003068 <HAL_DMA_Abort+0x260>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d013      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800306c <HAL_DMA_Abort+0x264>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d00e      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8003070 <HAL_DMA_Abort+0x268>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d009      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a1b      	ldr	r2, [pc, #108]	@ (8003074 <HAL_DMA_Abort+0x26c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d004      	beq.n	8003016 <HAL_DMA_Abort+0x20e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a19      	ldr	r2, [pc, #100]	@ (8003078 <HAL_DMA_Abort+0x270>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d132      	bne.n	800307c <HAL_DMA_Abort+0x274>
 8003016:	2301      	movs	r3, #1
 8003018:	e031      	b.n	800307e <HAL_DMA_Abort+0x276>
 800301a:	bf00      	nop
 800301c:	40020010 	.word	0x40020010
 8003020:	40020028 	.word	0x40020028
 8003024:	40020040 	.word	0x40020040
 8003028:	40020058 	.word	0x40020058
 800302c:	40020070 	.word	0x40020070
 8003030:	40020088 	.word	0x40020088
 8003034:	400200a0 	.word	0x400200a0
 8003038:	400200b8 	.word	0x400200b8
 800303c:	40020410 	.word	0x40020410
 8003040:	40020428 	.word	0x40020428
 8003044:	40020440 	.word	0x40020440
 8003048:	40020458 	.word	0x40020458
 800304c:	40020470 	.word	0x40020470
 8003050:	40020488 	.word	0x40020488
 8003054:	400204a0 	.word	0x400204a0
 8003058:	400204b8 	.word	0x400204b8
 800305c:	58025408 	.word	0x58025408
 8003060:	5802541c 	.word	0x5802541c
 8003064:	58025430 	.word	0x58025430
 8003068:	58025444 	.word	0x58025444
 800306c:	58025458 	.word	0x58025458
 8003070:	5802546c 	.word	0x5802546c
 8003074:	58025480 	.word	0x58025480
 8003078:	58025494 	.word	0x58025494
 800307c:	2300      	movs	r3, #0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003090:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a6d      	ldr	r2, [pc, #436]	@ (800324c <HAL_DMA_Abort+0x444>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d04a      	beq.n	8003132 <HAL_DMA_Abort+0x32a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a6b      	ldr	r2, [pc, #428]	@ (8003250 <HAL_DMA_Abort+0x448>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d045      	beq.n	8003132 <HAL_DMA_Abort+0x32a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6a      	ldr	r2, [pc, #424]	@ (8003254 <HAL_DMA_Abort+0x44c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d040      	beq.n	8003132 <HAL_DMA_Abort+0x32a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a68      	ldr	r2, [pc, #416]	@ (8003258 <HAL_DMA_Abort+0x450>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d03b      	beq.n	8003132 <HAL_DMA_Abort+0x32a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a67      	ldr	r2, [pc, #412]	@ (800325c <HAL_DMA_Abort+0x454>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d036      	beq.n	8003132 <HAL_DMA_Abort+0x32a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a65      	ldr	r2, [pc, #404]	@ (8003260 <HAL_DMA_Abort+0x458>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d031      	beq.n	8003132 <HAL_DMA_Abort+0x32a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a64      	ldr	r2, [pc, #400]	@ (8003264 <HAL_DMA_Abort+0x45c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d02c      	beq.n	8003132 <HAL_DMA_Abort+0x32a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a62      	ldr	r2, [pc, #392]	@ (8003268 <HAL_DMA_Abort+0x460>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d027      	beq.n	8003132 <HAL_DMA_Abort+0x32a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a61      	ldr	r2, [pc, #388]	@ (800326c <HAL_DMA_Abort+0x464>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d022      	beq.n	8003132 <HAL_DMA_Abort+0x32a>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a5f      	ldr	r2, [pc, #380]	@ (8003270 <HAL_DMA_Abort+0x468>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d01d      	beq.n	8003132 <HAL_DMA_Abort+0x32a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a5e      	ldr	r2, [pc, #376]	@ (8003274 <HAL_DMA_Abort+0x46c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d018      	beq.n	8003132 <HAL_DMA_Abort+0x32a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a5c      	ldr	r2, [pc, #368]	@ (8003278 <HAL_DMA_Abort+0x470>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d013      	beq.n	8003132 <HAL_DMA_Abort+0x32a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a5b      	ldr	r2, [pc, #364]	@ (800327c <HAL_DMA_Abort+0x474>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d00e      	beq.n	8003132 <HAL_DMA_Abort+0x32a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a59      	ldr	r2, [pc, #356]	@ (8003280 <HAL_DMA_Abort+0x478>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d009      	beq.n	8003132 <HAL_DMA_Abort+0x32a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a58      	ldr	r2, [pc, #352]	@ (8003284 <HAL_DMA_Abort+0x47c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d004      	beq.n	8003132 <HAL_DMA_Abort+0x32a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a56      	ldr	r2, [pc, #344]	@ (8003288 <HAL_DMA_Abort+0x480>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d108      	bne.n	8003144 <HAL_DMA_Abort+0x33c>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0201 	bic.w	r2, r2, #1
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	e007      	b.n	8003154 <HAL_DMA_Abort+0x34c>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003154:	e013      	b.n	800317e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003156:	f7fe fea7 	bl	8001ea8 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b05      	cmp	r3, #5
 8003162:	d90c      	bls.n	800317e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2203      	movs	r2, #3
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e12d      	b.n	80033da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1e5      	bne.n	8003156 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2f      	ldr	r2, [pc, #188]	@ (800324c <HAL_DMA_Abort+0x444>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d04a      	beq.n	800322a <HAL_DMA_Abort+0x422>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a2d      	ldr	r2, [pc, #180]	@ (8003250 <HAL_DMA_Abort+0x448>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d045      	beq.n	800322a <HAL_DMA_Abort+0x422>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003254 <HAL_DMA_Abort+0x44c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d040      	beq.n	800322a <HAL_DMA_Abort+0x422>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003258 <HAL_DMA_Abort+0x450>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d03b      	beq.n	800322a <HAL_DMA_Abort+0x422>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a29      	ldr	r2, [pc, #164]	@ (800325c <HAL_DMA_Abort+0x454>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d036      	beq.n	800322a <HAL_DMA_Abort+0x422>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a27      	ldr	r2, [pc, #156]	@ (8003260 <HAL_DMA_Abort+0x458>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d031      	beq.n	800322a <HAL_DMA_Abort+0x422>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a26      	ldr	r2, [pc, #152]	@ (8003264 <HAL_DMA_Abort+0x45c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d02c      	beq.n	800322a <HAL_DMA_Abort+0x422>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a24      	ldr	r2, [pc, #144]	@ (8003268 <HAL_DMA_Abort+0x460>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d027      	beq.n	800322a <HAL_DMA_Abort+0x422>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a23      	ldr	r2, [pc, #140]	@ (800326c <HAL_DMA_Abort+0x464>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d022      	beq.n	800322a <HAL_DMA_Abort+0x422>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a21      	ldr	r2, [pc, #132]	@ (8003270 <HAL_DMA_Abort+0x468>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01d      	beq.n	800322a <HAL_DMA_Abort+0x422>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a20      	ldr	r2, [pc, #128]	@ (8003274 <HAL_DMA_Abort+0x46c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d018      	beq.n	800322a <HAL_DMA_Abort+0x422>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003278 <HAL_DMA_Abort+0x470>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_DMA_Abort+0x422>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a1d      	ldr	r2, [pc, #116]	@ (800327c <HAL_DMA_Abort+0x474>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00e      	beq.n	800322a <HAL_DMA_Abort+0x422>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1b      	ldr	r2, [pc, #108]	@ (8003280 <HAL_DMA_Abort+0x478>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d009      	beq.n	800322a <HAL_DMA_Abort+0x422>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1a      	ldr	r2, [pc, #104]	@ (8003284 <HAL_DMA_Abort+0x47c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d004      	beq.n	800322a <HAL_DMA_Abort+0x422>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a18      	ldr	r2, [pc, #96]	@ (8003288 <HAL_DMA_Abort+0x480>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d101      	bne.n	800322e <HAL_DMA_Abort+0x426>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <HAL_DMA_Abort+0x428>
 800322e:	2300      	movs	r3, #0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d02b      	beq.n	800328c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003238:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	223f      	movs	r2, #63	@ 0x3f
 8003244:	409a      	lsls	r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	609a      	str	r2, [r3, #8]
 800324a:	e02a      	b.n	80032a2 <HAL_DMA_Abort+0x49a>
 800324c:	40020010 	.word	0x40020010
 8003250:	40020028 	.word	0x40020028
 8003254:	40020040 	.word	0x40020040
 8003258:	40020058 	.word	0x40020058
 800325c:	40020070 	.word	0x40020070
 8003260:	40020088 	.word	0x40020088
 8003264:	400200a0 	.word	0x400200a0
 8003268:	400200b8 	.word	0x400200b8
 800326c:	40020410 	.word	0x40020410
 8003270:	40020428 	.word	0x40020428
 8003274:	40020440 	.word	0x40020440
 8003278:	40020458 	.word	0x40020458
 800327c:	40020470 	.word	0x40020470
 8003280:	40020488 	.word	0x40020488
 8003284:	400204a0 	.word	0x400204a0
 8003288:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003290:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	2201      	movs	r2, #1
 800329c:	409a      	lsls	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a4f      	ldr	r2, [pc, #316]	@ (80033e4 <HAL_DMA_Abort+0x5dc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d072      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a4d      	ldr	r2, [pc, #308]	@ (80033e8 <HAL_DMA_Abort+0x5e0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d06d      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a4c      	ldr	r2, [pc, #304]	@ (80033ec <HAL_DMA_Abort+0x5e4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d068      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a4a      	ldr	r2, [pc, #296]	@ (80033f0 <HAL_DMA_Abort+0x5e8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d063      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a49      	ldr	r2, [pc, #292]	@ (80033f4 <HAL_DMA_Abort+0x5ec>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d05e      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a47      	ldr	r2, [pc, #284]	@ (80033f8 <HAL_DMA_Abort+0x5f0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d059      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a46      	ldr	r2, [pc, #280]	@ (80033fc <HAL_DMA_Abort+0x5f4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d054      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a44      	ldr	r2, [pc, #272]	@ (8003400 <HAL_DMA_Abort+0x5f8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d04f      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a43      	ldr	r2, [pc, #268]	@ (8003404 <HAL_DMA_Abort+0x5fc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d04a      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a41      	ldr	r2, [pc, #260]	@ (8003408 <HAL_DMA_Abort+0x600>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d045      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a40      	ldr	r2, [pc, #256]	@ (800340c <HAL_DMA_Abort+0x604>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d040      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a3e      	ldr	r2, [pc, #248]	@ (8003410 <HAL_DMA_Abort+0x608>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d03b      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a3d      	ldr	r2, [pc, #244]	@ (8003414 <HAL_DMA_Abort+0x60c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d036      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a3b      	ldr	r2, [pc, #236]	@ (8003418 <HAL_DMA_Abort+0x610>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d031      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a3a      	ldr	r2, [pc, #232]	@ (800341c <HAL_DMA_Abort+0x614>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d02c      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a38      	ldr	r2, [pc, #224]	@ (8003420 <HAL_DMA_Abort+0x618>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d027      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a37      	ldr	r2, [pc, #220]	@ (8003424 <HAL_DMA_Abort+0x61c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d022      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a35      	ldr	r2, [pc, #212]	@ (8003428 <HAL_DMA_Abort+0x620>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d01d      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a34      	ldr	r2, [pc, #208]	@ (800342c <HAL_DMA_Abort+0x624>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d018      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a32      	ldr	r2, [pc, #200]	@ (8003430 <HAL_DMA_Abort+0x628>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a31      	ldr	r2, [pc, #196]	@ (8003434 <HAL_DMA_Abort+0x62c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00e      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a2f      	ldr	r2, [pc, #188]	@ (8003438 <HAL_DMA_Abort+0x630>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d009      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a2e      	ldr	r2, [pc, #184]	@ (800343c <HAL_DMA_Abort+0x634>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_DMA_Abort+0x58a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2c      	ldr	r2, [pc, #176]	@ (8003440 <HAL_DMA_Abort+0x638>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d101      	bne.n	8003396 <HAL_DMA_Abort+0x58e>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <HAL_DMA_Abort+0x590>
 8003396:	2300      	movs	r3, #0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d015      	beq.n	80033c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80033a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00c      	beq.n	80033c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80033c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40020010 	.word	0x40020010
 80033e8:	40020028 	.word	0x40020028
 80033ec:	40020040 	.word	0x40020040
 80033f0:	40020058 	.word	0x40020058
 80033f4:	40020070 	.word	0x40020070
 80033f8:	40020088 	.word	0x40020088
 80033fc:	400200a0 	.word	0x400200a0
 8003400:	400200b8 	.word	0x400200b8
 8003404:	40020410 	.word	0x40020410
 8003408:	40020428 	.word	0x40020428
 800340c:	40020440 	.word	0x40020440
 8003410:	40020458 	.word	0x40020458
 8003414:	40020470 	.word	0x40020470
 8003418:	40020488 	.word	0x40020488
 800341c:	400204a0 	.word	0x400204a0
 8003420:	400204b8 	.word	0x400204b8
 8003424:	58025408 	.word	0x58025408
 8003428:	5802541c 	.word	0x5802541c
 800342c:	58025430 	.word	0x58025430
 8003430:	58025444 	.word	0x58025444
 8003434:	58025458 	.word	0x58025458
 8003438:	5802546c 	.word	0x5802546c
 800343c:	58025480 	.word	0x58025480
 8003440:	58025494 	.word	0x58025494

08003444 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e237      	b.n	80038c6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d004      	beq.n	800346c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2280      	movs	r2, #128	@ 0x80
 8003466:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e22c      	b.n	80038c6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a5c      	ldr	r2, [pc, #368]	@ (80035e4 <HAL_DMA_Abort_IT+0x1a0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d04a      	beq.n	800350c <HAL_DMA_Abort_IT+0xc8>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a5b      	ldr	r2, [pc, #364]	@ (80035e8 <HAL_DMA_Abort_IT+0x1a4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d045      	beq.n	800350c <HAL_DMA_Abort_IT+0xc8>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a59      	ldr	r2, [pc, #356]	@ (80035ec <HAL_DMA_Abort_IT+0x1a8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d040      	beq.n	800350c <HAL_DMA_Abort_IT+0xc8>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a58      	ldr	r2, [pc, #352]	@ (80035f0 <HAL_DMA_Abort_IT+0x1ac>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d03b      	beq.n	800350c <HAL_DMA_Abort_IT+0xc8>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a56      	ldr	r2, [pc, #344]	@ (80035f4 <HAL_DMA_Abort_IT+0x1b0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d036      	beq.n	800350c <HAL_DMA_Abort_IT+0xc8>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a55      	ldr	r2, [pc, #340]	@ (80035f8 <HAL_DMA_Abort_IT+0x1b4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d031      	beq.n	800350c <HAL_DMA_Abort_IT+0xc8>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a53      	ldr	r2, [pc, #332]	@ (80035fc <HAL_DMA_Abort_IT+0x1b8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d02c      	beq.n	800350c <HAL_DMA_Abort_IT+0xc8>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a52      	ldr	r2, [pc, #328]	@ (8003600 <HAL_DMA_Abort_IT+0x1bc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d027      	beq.n	800350c <HAL_DMA_Abort_IT+0xc8>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a50      	ldr	r2, [pc, #320]	@ (8003604 <HAL_DMA_Abort_IT+0x1c0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d022      	beq.n	800350c <HAL_DMA_Abort_IT+0xc8>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a4f      	ldr	r2, [pc, #316]	@ (8003608 <HAL_DMA_Abort_IT+0x1c4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d01d      	beq.n	800350c <HAL_DMA_Abort_IT+0xc8>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a4d      	ldr	r2, [pc, #308]	@ (800360c <HAL_DMA_Abort_IT+0x1c8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d018      	beq.n	800350c <HAL_DMA_Abort_IT+0xc8>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a4c      	ldr	r2, [pc, #304]	@ (8003610 <HAL_DMA_Abort_IT+0x1cc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d013      	beq.n	800350c <HAL_DMA_Abort_IT+0xc8>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003614 <HAL_DMA_Abort_IT+0x1d0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00e      	beq.n	800350c <HAL_DMA_Abort_IT+0xc8>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a49      	ldr	r2, [pc, #292]	@ (8003618 <HAL_DMA_Abort_IT+0x1d4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d009      	beq.n	800350c <HAL_DMA_Abort_IT+0xc8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a47      	ldr	r2, [pc, #284]	@ (800361c <HAL_DMA_Abort_IT+0x1d8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_DMA_Abort_IT+0xc8>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a46      	ldr	r2, [pc, #280]	@ (8003620 <HAL_DMA_Abort_IT+0x1dc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d101      	bne.n	8003510 <HAL_DMA_Abort_IT+0xcc>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <HAL_DMA_Abort_IT+0xce>
 8003510:	2300      	movs	r3, #0
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 8086 	beq.w	8003624 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2204      	movs	r2, #4
 800351c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a2f      	ldr	r2, [pc, #188]	@ (80035e4 <HAL_DMA_Abort_IT+0x1a0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d04a      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x17c>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a2e      	ldr	r2, [pc, #184]	@ (80035e8 <HAL_DMA_Abort_IT+0x1a4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d045      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x17c>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a2c      	ldr	r2, [pc, #176]	@ (80035ec <HAL_DMA_Abort_IT+0x1a8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d040      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x17c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2b      	ldr	r2, [pc, #172]	@ (80035f0 <HAL_DMA_Abort_IT+0x1ac>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d03b      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x17c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a29      	ldr	r2, [pc, #164]	@ (80035f4 <HAL_DMA_Abort_IT+0x1b0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d036      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x17c>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a28      	ldr	r2, [pc, #160]	@ (80035f8 <HAL_DMA_Abort_IT+0x1b4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d031      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x17c>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a26      	ldr	r2, [pc, #152]	@ (80035fc <HAL_DMA_Abort_IT+0x1b8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d02c      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x17c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a25      	ldr	r2, [pc, #148]	@ (8003600 <HAL_DMA_Abort_IT+0x1bc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d027      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x17c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a23      	ldr	r2, [pc, #140]	@ (8003604 <HAL_DMA_Abort_IT+0x1c0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d022      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x17c>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a22      	ldr	r2, [pc, #136]	@ (8003608 <HAL_DMA_Abort_IT+0x1c4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d01d      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x17c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a20      	ldr	r2, [pc, #128]	@ (800360c <HAL_DMA_Abort_IT+0x1c8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d018      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x17c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1f      	ldr	r2, [pc, #124]	@ (8003610 <HAL_DMA_Abort_IT+0x1cc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d013      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x17c>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1d      	ldr	r2, [pc, #116]	@ (8003614 <HAL_DMA_Abort_IT+0x1d0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00e      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x17c>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003618 <HAL_DMA_Abort_IT+0x1d4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d009      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x17c>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1a      	ldr	r2, [pc, #104]	@ (800361c <HAL_DMA_Abort_IT+0x1d8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x17c>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a19      	ldr	r2, [pc, #100]	@ (8003620 <HAL_DMA_Abort_IT+0x1dc>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d108      	bne.n	80035d2 <HAL_DMA_Abort_IT+0x18e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	e178      	b.n	80038c4 <HAL_DMA_Abort_IT+0x480>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0201 	bic.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	e16f      	b.n	80038c4 <HAL_DMA_Abort_IT+0x480>
 80035e4:	40020010 	.word	0x40020010
 80035e8:	40020028 	.word	0x40020028
 80035ec:	40020040 	.word	0x40020040
 80035f0:	40020058 	.word	0x40020058
 80035f4:	40020070 	.word	0x40020070
 80035f8:	40020088 	.word	0x40020088
 80035fc:	400200a0 	.word	0x400200a0
 8003600:	400200b8 	.word	0x400200b8
 8003604:	40020410 	.word	0x40020410
 8003608:	40020428 	.word	0x40020428
 800360c:	40020440 	.word	0x40020440
 8003610:	40020458 	.word	0x40020458
 8003614:	40020470 	.word	0x40020470
 8003618:	40020488 	.word	0x40020488
 800361c:	400204a0 	.word	0x400204a0
 8003620:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 020e 	bic.w	r2, r2, #14
 8003632:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a6c      	ldr	r2, [pc, #432]	@ (80037ec <HAL_DMA_Abort_IT+0x3a8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d04a      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x290>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a6b      	ldr	r2, [pc, #428]	@ (80037f0 <HAL_DMA_Abort_IT+0x3ac>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d045      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x290>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a69      	ldr	r2, [pc, #420]	@ (80037f4 <HAL_DMA_Abort_IT+0x3b0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d040      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x290>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a68      	ldr	r2, [pc, #416]	@ (80037f8 <HAL_DMA_Abort_IT+0x3b4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d03b      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x290>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a66      	ldr	r2, [pc, #408]	@ (80037fc <HAL_DMA_Abort_IT+0x3b8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d036      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x290>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a65      	ldr	r2, [pc, #404]	@ (8003800 <HAL_DMA_Abort_IT+0x3bc>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d031      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x290>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a63      	ldr	r2, [pc, #396]	@ (8003804 <HAL_DMA_Abort_IT+0x3c0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d02c      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x290>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a62      	ldr	r2, [pc, #392]	@ (8003808 <HAL_DMA_Abort_IT+0x3c4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d027      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x290>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a60      	ldr	r2, [pc, #384]	@ (800380c <HAL_DMA_Abort_IT+0x3c8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d022      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x290>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a5f      	ldr	r2, [pc, #380]	@ (8003810 <HAL_DMA_Abort_IT+0x3cc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d01d      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x290>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a5d      	ldr	r2, [pc, #372]	@ (8003814 <HAL_DMA_Abort_IT+0x3d0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d018      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x290>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a5c      	ldr	r2, [pc, #368]	@ (8003818 <HAL_DMA_Abort_IT+0x3d4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d013      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x290>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a5a      	ldr	r2, [pc, #360]	@ (800381c <HAL_DMA_Abort_IT+0x3d8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00e      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x290>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a59      	ldr	r2, [pc, #356]	@ (8003820 <HAL_DMA_Abort_IT+0x3dc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d009      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x290>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a57      	ldr	r2, [pc, #348]	@ (8003824 <HAL_DMA_Abort_IT+0x3e0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d004      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x290>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a56      	ldr	r2, [pc, #344]	@ (8003828 <HAL_DMA_Abort_IT+0x3e4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d108      	bne.n	80036e6 <HAL_DMA_Abort_IT+0x2a2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e007      	b.n	80036f6 <HAL_DMA_Abort_IT+0x2b2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a3c      	ldr	r2, [pc, #240]	@ (80037ec <HAL_DMA_Abort_IT+0x3a8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d072      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a3a      	ldr	r2, [pc, #232]	@ (80037f0 <HAL_DMA_Abort_IT+0x3ac>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d06d      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a39      	ldr	r2, [pc, #228]	@ (80037f4 <HAL_DMA_Abort_IT+0x3b0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d068      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a37      	ldr	r2, [pc, #220]	@ (80037f8 <HAL_DMA_Abort_IT+0x3b4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d063      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a36      	ldr	r2, [pc, #216]	@ (80037fc <HAL_DMA_Abort_IT+0x3b8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d05e      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a34      	ldr	r2, [pc, #208]	@ (8003800 <HAL_DMA_Abort_IT+0x3bc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d059      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a33      	ldr	r2, [pc, #204]	@ (8003804 <HAL_DMA_Abort_IT+0x3c0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d054      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a31      	ldr	r2, [pc, #196]	@ (8003808 <HAL_DMA_Abort_IT+0x3c4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d04f      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a30      	ldr	r2, [pc, #192]	@ (800380c <HAL_DMA_Abort_IT+0x3c8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d04a      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a2e      	ldr	r2, [pc, #184]	@ (8003810 <HAL_DMA_Abort_IT+0x3cc>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d045      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a2d      	ldr	r2, [pc, #180]	@ (8003814 <HAL_DMA_Abort_IT+0x3d0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d040      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a2b      	ldr	r2, [pc, #172]	@ (8003818 <HAL_DMA_Abort_IT+0x3d4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d03b      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a2a      	ldr	r2, [pc, #168]	@ (800381c <HAL_DMA_Abort_IT+0x3d8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d036      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a28      	ldr	r2, [pc, #160]	@ (8003820 <HAL_DMA_Abort_IT+0x3dc>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d031      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a27      	ldr	r2, [pc, #156]	@ (8003824 <HAL_DMA_Abort_IT+0x3e0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d02c      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a25      	ldr	r2, [pc, #148]	@ (8003828 <HAL_DMA_Abort_IT+0x3e4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d027      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a24      	ldr	r2, [pc, #144]	@ (800382c <HAL_DMA_Abort_IT+0x3e8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d022      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a22      	ldr	r2, [pc, #136]	@ (8003830 <HAL_DMA_Abort_IT+0x3ec>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d01d      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a21      	ldr	r2, [pc, #132]	@ (8003834 <HAL_DMA_Abort_IT+0x3f0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d018      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003838 <HAL_DMA_Abort_IT+0x3f4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d013      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a1e      	ldr	r2, [pc, #120]	@ (800383c <HAL_DMA_Abort_IT+0x3f8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00e      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003840 <HAL_DMA_Abort_IT+0x3fc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d009      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003844 <HAL_DMA_Abort_IT+0x400>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d004      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x3a2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a19      	ldr	r2, [pc, #100]	@ (8003848 <HAL_DMA_Abort_IT+0x404>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d132      	bne.n	800384c <HAL_DMA_Abort_IT+0x408>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e031      	b.n	800384e <HAL_DMA_Abort_IT+0x40a>
 80037ea:	bf00      	nop
 80037ec:	40020010 	.word	0x40020010
 80037f0:	40020028 	.word	0x40020028
 80037f4:	40020040 	.word	0x40020040
 80037f8:	40020058 	.word	0x40020058
 80037fc:	40020070 	.word	0x40020070
 8003800:	40020088 	.word	0x40020088
 8003804:	400200a0 	.word	0x400200a0
 8003808:	400200b8 	.word	0x400200b8
 800380c:	40020410 	.word	0x40020410
 8003810:	40020428 	.word	0x40020428
 8003814:	40020440 	.word	0x40020440
 8003818:	40020458 	.word	0x40020458
 800381c:	40020470 	.word	0x40020470
 8003820:	40020488 	.word	0x40020488
 8003824:	400204a0 	.word	0x400204a0
 8003828:	400204b8 	.word	0x400204b8
 800382c:	58025408 	.word	0x58025408
 8003830:	5802541c 	.word	0x5802541c
 8003834:	58025430 	.word	0x58025430
 8003838:	58025444 	.word	0x58025444
 800383c:	58025458 	.word	0x58025458
 8003840:	5802546c 	.word	0x5802546c
 8003844:	58025480 	.word	0x58025480
 8003848:	58025494 	.word	0x58025494
 800384c:	2300      	movs	r3, #0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d028      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003860:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003866:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	2201      	movs	r2, #1
 8003872:	409a      	lsls	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003880:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00c      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003894:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003898:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop

080038d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	@ 0x28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038dc:	4b67      	ldr	r3, [pc, #412]	@ (8003a7c <HAL_DMA_IRQHandler+0x1ac>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a67      	ldr	r2, [pc, #412]	@ (8003a80 <HAL_DMA_IRQHandler+0x1b0>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	0a9b      	lsrs	r3, r3, #10
 80038e8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a5f      	ldr	r2, [pc, #380]	@ (8003a84 <HAL_DMA_IRQHandler+0x1b4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d04a      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a5d      	ldr	r2, [pc, #372]	@ (8003a88 <HAL_DMA_IRQHandler+0x1b8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d045      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a5c      	ldr	r2, [pc, #368]	@ (8003a8c <HAL_DMA_IRQHandler+0x1bc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d040      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a5a      	ldr	r2, [pc, #360]	@ (8003a90 <HAL_DMA_IRQHandler+0x1c0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d03b      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a59      	ldr	r2, [pc, #356]	@ (8003a94 <HAL_DMA_IRQHandler+0x1c4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d036      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a57      	ldr	r2, [pc, #348]	@ (8003a98 <HAL_DMA_IRQHandler+0x1c8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d031      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a56      	ldr	r2, [pc, #344]	@ (8003a9c <HAL_DMA_IRQHandler+0x1cc>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d02c      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a54      	ldr	r2, [pc, #336]	@ (8003aa0 <HAL_DMA_IRQHandler+0x1d0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d027      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a53      	ldr	r2, [pc, #332]	@ (8003aa4 <HAL_DMA_IRQHandler+0x1d4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d022      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a51      	ldr	r2, [pc, #324]	@ (8003aa8 <HAL_DMA_IRQHandler+0x1d8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01d      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a50      	ldr	r2, [pc, #320]	@ (8003aac <HAL_DMA_IRQHandler+0x1dc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d018      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a4e      	ldr	r2, [pc, #312]	@ (8003ab0 <HAL_DMA_IRQHandler+0x1e0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a4d      	ldr	r2, [pc, #308]	@ (8003ab4 <HAL_DMA_IRQHandler+0x1e4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00e      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a4b      	ldr	r2, [pc, #300]	@ (8003ab8 <HAL_DMA_IRQHandler+0x1e8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d009      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a4a      	ldr	r2, [pc, #296]	@ (8003abc <HAL_DMA_IRQHandler+0x1ec>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d004      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xd2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a48      	ldr	r2, [pc, #288]	@ (8003ac0 <HAL_DMA_IRQHandler+0x1f0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d101      	bne.n	80039a6 <HAL_DMA_IRQHandler+0xd6>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <HAL_DMA_IRQHandler+0xd8>
 80039a6:	2300      	movs	r3, #0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 842b 	beq.w	8004204 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	2208      	movs	r2, #8
 80039b8:	409a      	lsls	r2, r3
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80a2 	beq.w	8003b08 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a2e      	ldr	r2, [pc, #184]	@ (8003a84 <HAL_DMA_IRQHandler+0x1b4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d04a      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003a88 <HAL_DMA_IRQHandler+0x1b8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d045      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a2b      	ldr	r2, [pc, #172]	@ (8003a8c <HAL_DMA_IRQHandler+0x1bc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d040      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a2a      	ldr	r2, [pc, #168]	@ (8003a90 <HAL_DMA_IRQHandler+0x1c0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d03b      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a28      	ldr	r2, [pc, #160]	@ (8003a94 <HAL_DMA_IRQHandler+0x1c4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d036      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a27      	ldr	r2, [pc, #156]	@ (8003a98 <HAL_DMA_IRQHandler+0x1c8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d031      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a25      	ldr	r2, [pc, #148]	@ (8003a9c <HAL_DMA_IRQHandler+0x1cc>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d02c      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a24      	ldr	r2, [pc, #144]	@ (8003aa0 <HAL_DMA_IRQHandler+0x1d0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d027      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a22      	ldr	r2, [pc, #136]	@ (8003aa4 <HAL_DMA_IRQHandler+0x1d4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d022      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a21      	ldr	r2, [pc, #132]	@ (8003aa8 <HAL_DMA_IRQHandler+0x1d8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d01d      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8003aac <HAL_DMA_IRQHandler+0x1dc>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d018      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1e      	ldr	r2, [pc, #120]	@ (8003ab0 <HAL_DMA_IRQHandler+0x1e0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d013      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab4 <HAL_DMA_IRQHandler+0x1e4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00e      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab8 <HAL_DMA_IRQHandler+0x1e8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a19      	ldr	r2, [pc, #100]	@ (8003abc <HAL_DMA_IRQHandler+0x1ec>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x194>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a18      	ldr	r2, [pc, #96]	@ (8003ac0 <HAL_DMA_IRQHandler+0x1f0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d12f      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x1f4>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bf14      	ite	ne
 8003a72:	2301      	movne	r3, #1
 8003a74:	2300      	moveq	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	e02e      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x208>
 8003a7a:	bf00      	nop
 8003a7c:	24000000 	.word	0x24000000
 8003a80:	1b4e81b5 	.word	0x1b4e81b5
 8003a84:	40020010 	.word	0x40020010
 8003a88:	40020028 	.word	0x40020028
 8003a8c:	40020040 	.word	0x40020040
 8003a90:	40020058 	.word	0x40020058
 8003a94:	40020070 	.word	0x40020070
 8003a98:	40020088 	.word	0x40020088
 8003a9c:	400200a0 	.word	0x400200a0
 8003aa0:	400200b8 	.word	0x400200b8
 8003aa4:	40020410 	.word	0x40020410
 8003aa8:	40020428 	.word	0x40020428
 8003aac:	40020440 	.word	0x40020440
 8003ab0:	40020458 	.word	0x40020458
 8003ab4:	40020470 	.word	0x40020470
 8003ab8:	40020488 	.word	0x40020488
 8003abc:	400204a0 	.word	0x400204a0
 8003ac0:	400204b8 	.word	0x400204b8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bf14      	ite	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	2300      	moveq	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0204 	bic.w	r2, r2, #4
 8003aea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	2208      	movs	r2, #8
 8003af6:	409a      	lsls	r2, r3
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b00:	f043 0201 	orr.w	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	fa22 f303 	lsr.w	r3, r2, r3
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d06e      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a69      	ldr	r2, [pc, #420]	@ (8003cc8 <HAL_DMA_IRQHandler+0x3f8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d04a      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a67      	ldr	r2, [pc, #412]	@ (8003ccc <HAL_DMA_IRQHandler+0x3fc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d045      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a66      	ldr	r2, [pc, #408]	@ (8003cd0 <HAL_DMA_IRQHandler+0x400>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d040      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a64      	ldr	r2, [pc, #400]	@ (8003cd4 <HAL_DMA_IRQHandler+0x404>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d03b      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a63      	ldr	r2, [pc, #396]	@ (8003cd8 <HAL_DMA_IRQHandler+0x408>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d036      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a61      	ldr	r2, [pc, #388]	@ (8003cdc <HAL_DMA_IRQHandler+0x40c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d031      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a60      	ldr	r2, [pc, #384]	@ (8003ce0 <HAL_DMA_IRQHandler+0x410>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d02c      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a5e      	ldr	r2, [pc, #376]	@ (8003ce4 <HAL_DMA_IRQHandler+0x414>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d027      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a5d      	ldr	r2, [pc, #372]	@ (8003ce8 <HAL_DMA_IRQHandler+0x418>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d022      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a5b      	ldr	r2, [pc, #364]	@ (8003cec <HAL_DMA_IRQHandler+0x41c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d01d      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a5a      	ldr	r2, [pc, #360]	@ (8003cf0 <HAL_DMA_IRQHandler+0x420>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d018      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a58      	ldr	r2, [pc, #352]	@ (8003cf4 <HAL_DMA_IRQHandler+0x424>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d013      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a57      	ldr	r2, [pc, #348]	@ (8003cf8 <HAL_DMA_IRQHandler+0x428>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00e      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a55      	ldr	r2, [pc, #340]	@ (8003cfc <HAL_DMA_IRQHandler+0x42c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d009      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a54      	ldr	r2, [pc, #336]	@ (8003d00 <HAL_DMA_IRQHandler+0x430>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d004      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x2ee>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a52      	ldr	r2, [pc, #328]	@ (8003d04 <HAL_DMA_IRQHandler+0x434>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d10a      	bne.n	8003bd4 <HAL_DMA_IRQHandler+0x304>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf14      	ite	ne
 8003bcc:	2301      	movne	r3, #1
 8003bce:	2300      	moveq	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e003      	b.n	8003bdc <HAL_DMA_IRQHandler+0x30c>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00d      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	2201      	movs	r2, #1
 8003bea:	409a      	lsls	r2, r3
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf4:	f043 0202 	orr.w	r2, r3, #2
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	2204      	movs	r2, #4
 8003c06:	409a      	lsls	r2, r3
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 808f 	beq.w	8003d30 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a2c      	ldr	r2, [pc, #176]	@ (8003cc8 <HAL_DMA_IRQHandler+0x3f8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d04a      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2a      	ldr	r2, [pc, #168]	@ (8003ccc <HAL_DMA_IRQHandler+0x3fc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d045      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a29      	ldr	r2, [pc, #164]	@ (8003cd0 <HAL_DMA_IRQHandler+0x400>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d040      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a27      	ldr	r2, [pc, #156]	@ (8003cd4 <HAL_DMA_IRQHandler+0x404>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d03b      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a26      	ldr	r2, [pc, #152]	@ (8003cd8 <HAL_DMA_IRQHandler+0x408>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d036      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a24      	ldr	r2, [pc, #144]	@ (8003cdc <HAL_DMA_IRQHandler+0x40c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d031      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a23      	ldr	r2, [pc, #140]	@ (8003ce0 <HAL_DMA_IRQHandler+0x410>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d02c      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a21      	ldr	r2, [pc, #132]	@ (8003ce4 <HAL_DMA_IRQHandler+0x414>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d027      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a20      	ldr	r2, [pc, #128]	@ (8003ce8 <HAL_DMA_IRQHandler+0x418>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d022      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1e      	ldr	r2, [pc, #120]	@ (8003cec <HAL_DMA_IRQHandler+0x41c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d01d      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003cf0 <HAL_DMA_IRQHandler+0x420>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d018      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf4 <HAL_DMA_IRQHandler+0x424>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003cf8 <HAL_DMA_IRQHandler+0x428>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00e      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a18      	ldr	r2, [pc, #96]	@ (8003cfc <HAL_DMA_IRQHandler+0x42c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d009      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a17      	ldr	r2, [pc, #92]	@ (8003d00 <HAL_DMA_IRQHandler+0x430>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x3e2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a15      	ldr	r2, [pc, #84]	@ (8003d04 <HAL_DMA_IRQHandler+0x434>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d12a      	bne.n	8003d08 <HAL_DMA_IRQHandler+0x438>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	e023      	b.n	8003d10 <HAL_DMA_IRQHandler+0x440>
 8003cc8:	40020010 	.word	0x40020010
 8003ccc:	40020028 	.word	0x40020028
 8003cd0:	40020040 	.word	0x40020040
 8003cd4:	40020058 	.word	0x40020058
 8003cd8:	40020070 	.word	0x40020070
 8003cdc:	40020088 	.word	0x40020088
 8003ce0:	400200a0 	.word	0x400200a0
 8003ce4:	400200b8 	.word	0x400200b8
 8003ce8:	40020410 	.word	0x40020410
 8003cec:	40020428 	.word	0x40020428
 8003cf0:	40020440 	.word	0x40020440
 8003cf4:	40020458 	.word	0x40020458
 8003cf8:	40020470 	.word	0x40020470
 8003cfc:	40020488 	.word	0x40020488
 8003d00:	400204a0 	.word	0x400204a0
 8003d04:	400204b8 	.word	0x400204b8
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00d      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d28:	f043 0204 	orr.w	r2, r3, #4
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	2210      	movs	r2, #16
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80a6 	beq.w	8003e92 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a85      	ldr	r2, [pc, #532]	@ (8003f60 <HAL_DMA_IRQHandler+0x690>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d04a      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a83      	ldr	r2, [pc, #524]	@ (8003f64 <HAL_DMA_IRQHandler+0x694>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d045      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a82      	ldr	r2, [pc, #520]	@ (8003f68 <HAL_DMA_IRQHandler+0x698>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d040      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a80      	ldr	r2, [pc, #512]	@ (8003f6c <HAL_DMA_IRQHandler+0x69c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d03b      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a7f      	ldr	r2, [pc, #508]	@ (8003f70 <HAL_DMA_IRQHandler+0x6a0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d036      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a7d      	ldr	r2, [pc, #500]	@ (8003f74 <HAL_DMA_IRQHandler+0x6a4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d031      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a7c      	ldr	r2, [pc, #496]	@ (8003f78 <HAL_DMA_IRQHandler+0x6a8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d02c      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a7a      	ldr	r2, [pc, #488]	@ (8003f7c <HAL_DMA_IRQHandler+0x6ac>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d027      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a79      	ldr	r2, [pc, #484]	@ (8003f80 <HAL_DMA_IRQHandler+0x6b0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d022      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a77      	ldr	r2, [pc, #476]	@ (8003f84 <HAL_DMA_IRQHandler+0x6b4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01d      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a76      	ldr	r2, [pc, #472]	@ (8003f88 <HAL_DMA_IRQHandler+0x6b8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d018      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a74      	ldr	r2, [pc, #464]	@ (8003f8c <HAL_DMA_IRQHandler+0x6bc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a73      	ldr	r2, [pc, #460]	@ (8003f90 <HAL_DMA_IRQHandler+0x6c0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00e      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a71      	ldr	r2, [pc, #452]	@ (8003f94 <HAL_DMA_IRQHandler+0x6c4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d009      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a70      	ldr	r2, [pc, #448]	@ (8003f98 <HAL_DMA_IRQHandler+0x6c8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x516>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a6e      	ldr	r2, [pc, #440]	@ (8003f9c <HAL_DMA_IRQHandler+0x6cc>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d10a      	bne.n	8003dfc <HAL_DMA_IRQHandler+0x52c>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf14      	ite	ne
 8003df4:	2301      	movne	r3, #1
 8003df6:	2300      	moveq	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	e009      	b.n	8003e10 <HAL_DMA_IRQHandler+0x540>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bf14      	ite	ne
 8003e0a:	2301      	movne	r3, #1
 8003e0c:	2300      	moveq	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d03e      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	2210      	movs	r2, #16
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d018      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d108      	bne.n	8003e52 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d024      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	4798      	blx	r3
 8003e50:	e01f      	b.n	8003e92 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01b      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	4798      	blx	r3
 8003e62:	e016      	b.n	8003e92 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d107      	bne.n	8003e82 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0208 	bic.w	r2, r2, #8
 8003e80:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 8110 	beq.w	80040c8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a2c      	ldr	r2, [pc, #176]	@ (8003f60 <HAL_DMA_IRQHandler+0x690>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d04a      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a2b      	ldr	r2, [pc, #172]	@ (8003f64 <HAL_DMA_IRQHandler+0x694>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d045      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a29      	ldr	r2, [pc, #164]	@ (8003f68 <HAL_DMA_IRQHandler+0x698>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d040      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a28      	ldr	r2, [pc, #160]	@ (8003f6c <HAL_DMA_IRQHandler+0x69c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d03b      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a26      	ldr	r2, [pc, #152]	@ (8003f70 <HAL_DMA_IRQHandler+0x6a0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d036      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a25      	ldr	r2, [pc, #148]	@ (8003f74 <HAL_DMA_IRQHandler+0x6a4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d031      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a23      	ldr	r2, [pc, #140]	@ (8003f78 <HAL_DMA_IRQHandler+0x6a8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d02c      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a22      	ldr	r2, [pc, #136]	@ (8003f7c <HAL_DMA_IRQHandler+0x6ac>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d027      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a20      	ldr	r2, [pc, #128]	@ (8003f80 <HAL_DMA_IRQHandler+0x6b0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d022      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1f      	ldr	r2, [pc, #124]	@ (8003f84 <HAL_DMA_IRQHandler+0x6b4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d01d      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1d      	ldr	r2, [pc, #116]	@ (8003f88 <HAL_DMA_IRQHandler+0x6b8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d018      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f8c <HAL_DMA_IRQHandler+0x6bc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d013      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1a      	ldr	r2, [pc, #104]	@ (8003f90 <HAL_DMA_IRQHandler+0x6c0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00e      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a19      	ldr	r2, [pc, #100]	@ (8003f94 <HAL_DMA_IRQHandler+0x6c4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d009      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a17      	ldr	r2, [pc, #92]	@ (8003f98 <HAL_DMA_IRQHandler+0x6c8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d004      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x678>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a16      	ldr	r2, [pc, #88]	@ (8003f9c <HAL_DMA_IRQHandler+0x6cc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d12b      	bne.n	8003fa0 <HAL_DMA_IRQHandler+0x6d0>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	bf14      	ite	ne
 8003f56:	2301      	movne	r3, #1
 8003f58:	2300      	moveq	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	e02a      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x6e4>
 8003f5e:	bf00      	nop
 8003f60:	40020010 	.word	0x40020010
 8003f64:	40020028 	.word	0x40020028
 8003f68:	40020040 	.word	0x40020040
 8003f6c:	40020058 	.word	0x40020058
 8003f70:	40020070 	.word	0x40020070
 8003f74:	40020088 	.word	0x40020088
 8003f78:	400200a0 	.word	0x400200a0
 8003f7c:	400200b8 	.word	0x400200b8
 8003f80:	40020410 	.word	0x40020410
 8003f84:	40020428 	.word	0x40020428
 8003f88:	40020440 	.word	0x40020440
 8003f8c:	40020458 	.word	0x40020458
 8003f90:	40020470 	.word	0x40020470
 8003f94:	40020488 	.word	0x40020488
 8003f98:	400204a0 	.word	0x400204a0
 8003f9c:	400204b8 	.word	0x400204b8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	bf14      	ite	ne
 8003fae:	2301      	movne	r3, #1
 8003fb0:	2300      	moveq	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8087 	beq.w	80040c8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fbe:	f003 031f 	and.w	r3, r3, #31
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d139      	bne.n	800404a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0216 	bic.w	r2, r2, #22
 8003fe4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ff4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d103      	bne.n	8004006 <HAL_DMA_IRQHandler+0x736>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0208 	bic.w	r2, r2, #8
 8004014:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401a:	f003 031f 	and.w	r3, r3, #31
 800401e:	223f      	movs	r2, #63	@ 0x3f
 8004020:	409a      	lsls	r2, r3
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 8382 	beq.w	8004744 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	4798      	blx	r3
          }
          return;
 8004048:	e37c      	b.n	8004744 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d018      	beq.n	800408a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d108      	bne.n	8004078 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406a:	2b00      	cmp	r3, #0
 800406c:	d02c      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	4798      	blx	r3
 8004076:	e027      	b.n	80040c8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d023      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	4798      	blx	r3
 8004088:	e01e      	b.n	80040c8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10f      	bne.n	80040b8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0210 	bic.w	r2, r2, #16
 80040a6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 833e 	beq.w	800474e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 8088 	beq.w	80041f0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2204      	movs	r2, #4
 80040e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a89      	ldr	r2, [pc, #548]	@ (8004314 <HAL_DMA_IRQHandler+0xa44>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d04a      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a88      	ldr	r2, [pc, #544]	@ (8004318 <HAL_DMA_IRQHandler+0xa48>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d045      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a86      	ldr	r2, [pc, #536]	@ (800431c <HAL_DMA_IRQHandler+0xa4c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d040      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a85      	ldr	r2, [pc, #532]	@ (8004320 <HAL_DMA_IRQHandler+0xa50>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d03b      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a83      	ldr	r2, [pc, #524]	@ (8004324 <HAL_DMA_IRQHandler+0xa54>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d036      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a82      	ldr	r2, [pc, #520]	@ (8004328 <HAL_DMA_IRQHandler+0xa58>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d031      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a80      	ldr	r2, [pc, #512]	@ (800432c <HAL_DMA_IRQHandler+0xa5c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d02c      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a7f      	ldr	r2, [pc, #508]	@ (8004330 <HAL_DMA_IRQHandler+0xa60>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d027      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a7d      	ldr	r2, [pc, #500]	@ (8004334 <HAL_DMA_IRQHandler+0xa64>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d022      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a7c      	ldr	r2, [pc, #496]	@ (8004338 <HAL_DMA_IRQHandler+0xa68>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d01d      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a7a      	ldr	r2, [pc, #488]	@ (800433c <HAL_DMA_IRQHandler+0xa6c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d018      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a79      	ldr	r2, [pc, #484]	@ (8004340 <HAL_DMA_IRQHandler+0xa70>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d013      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a77      	ldr	r2, [pc, #476]	@ (8004344 <HAL_DMA_IRQHandler+0xa74>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00e      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a76      	ldr	r2, [pc, #472]	@ (8004348 <HAL_DMA_IRQHandler+0xa78>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d009      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a74      	ldr	r2, [pc, #464]	@ (800434c <HAL_DMA_IRQHandler+0xa7c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d004      	beq.n	8004188 <HAL_DMA_IRQHandler+0x8b8>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a73      	ldr	r2, [pc, #460]	@ (8004350 <HAL_DMA_IRQHandler+0xa80>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d108      	bne.n	800419a <HAL_DMA_IRQHandler+0x8ca>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	e007      	b.n	80041aa <HAL_DMA_IRQHandler+0x8da>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0201 	bic.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3301      	adds	r3, #1
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d307      	bcc.n	80041c6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f2      	bne.n	80041aa <HAL_DMA_IRQHandler+0x8da>
 80041c4:	e000      	b.n	80041c8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80041c6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d004      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2203      	movs	r2, #3
 80041da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80041de:	e003      	b.n	80041e8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 82aa 	beq.w	800474e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4798      	blx	r3
 8004202:	e2a4      	b.n	800474e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a52      	ldr	r2, [pc, #328]	@ (8004354 <HAL_DMA_IRQHandler+0xa84>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d04a      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x9d4>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a51      	ldr	r2, [pc, #324]	@ (8004358 <HAL_DMA_IRQHandler+0xa88>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d045      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x9d4>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a4f      	ldr	r2, [pc, #316]	@ (800435c <HAL_DMA_IRQHandler+0xa8c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d040      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x9d4>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a4e      	ldr	r2, [pc, #312]	@ (8004360 <HAL_DMA_IRQHandler+0xa90>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d03b      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x9d4>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a4c      	ldr	r2, [pc, #304]	@ (8004364 <HAL_DMA_IRQHandler+0xa94>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d036      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x9d4>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a4b      	ldr	r2, [pc, #300]	@ (8004368 <HAL_DMA_IRQHandler+0xa98>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d031      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x9d4>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a49      	ldr	r2, [pc, #292]	@ (800436c <HAL_DMA_IRQHandler+0xa9c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d02c      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x9d4>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a48      	ldr	r2, [pc, #288]	@ (8004370 <HAL_DMA_IRQHandler+0xaa0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d027      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x9d4>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a46      	ldr	r2, [pc, #280]	@ (8004374 <HAL_DMA_IRQHandler+0xaa4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d022      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x9d4>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a45      	ldr	r2, [pc, #276]	@ (8004378 <HAL_DMA_IRQHandler+0xaa8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d01d      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x9d4>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a43      	ldr	r2, [pc, #268]	@ (800437c <HAL_DMA_IRQHandler+0xaac>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d018      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x9d4>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a42      	ldr	r2, [pc, #264]	@ (8004380 <HAL_DMA_IRQHandler+0xab0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d013      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x9d4>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a40      	ldr	r2, [pc, #256]	@ (8004384 <HAL_DMA_IRQHandler+0xab4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00e      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x9d4>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a3f      	ldr	r2, [pc, #252]	@ (8004388 <HAL_DMA_IRQHandler+0xab8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d009      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x9d4>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a3d      	ldr	r2, [pc, #244]	@ (800438c <HAL_DMA_IRQHandler+0xabc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d004      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x9d4>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a3c      	ldr	r2, [pc, #240]	@ (8004390 <HAL_DMA_IRQHandler+0xac0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d101      	bne.n	80042a8 <HAL_DMA_IRQHandler+0x9d8>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <HAL_DMA_IRQHandler+0x9da>
 80042a8:	2300      	movs	r3, #0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 824f 	beq.w	800474e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	2204      	movs	r2, #4
 80042c2:	409a      	lsls	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80dd 	beq.w	8004488 <HAL_DMA_IRQHandler+0xbb8>
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 80d7 	beq.w	8004488 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	2204      	movs	r2, #4
 80042e4:	409a      	lsls	r2, r3
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d059      	beq.n	80043a8 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d14a      	bne.n	8004394 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 8220 	beq.w	8004748 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004310:	e21a      	b.n	8004748 <HAL_DMA_IRQHandler+0xe78>
 8004312:	bf00      	nop
 8004314:	40020010 	.word	0x40020010
 8004318:	40020028 	.word	0x40020028
 800431c:	40020040 	.word	0x40020040
 8004320:	40020058 	.word	0x40020058
 8004324:	40020070 	.word	0x40020070
 8004328:	40020088 	.word	0x40020088
 800432c:	400200a0 	.word	0x400200a0
 8004330:	400200b8 	.word	0x400200b8
 8004334:	40020410 	.word	0x40020410
 8004338:	40020428 	.word	0x40020428
 800433c:	40020440 	.word	0x40020440
 8004340:	40020458 	.word	0x40020458
 8004344:	40020470 	.word	0x40020470
 8004348:	40020488 	.word	0x40020488
 800434c:	400204a0 	.word	0x400204a0
 8004350:	400204b8 	.word	0x400204b8
 8004354:	48022c08 	.word	0x48022c08
 8004358:	48022c1c 	.word	0x48022c1c
 800435c:	48022c30 	.word	0x48022c30
 8004360:	48022c44 	.word	0x48022c44
 8004364:	48022c58 	.word	0x48022c58
 8004368:	48022c6c 	.word	0x48022c6c
 800436c:	48022c80 	.word	0x48022c80
 8004370:	48022c94 	.word	0x48022c94
 8004374:	58025408 	.word	0x58025408
 8004378:	5802541c 	.word	0x5802541c
 800437c:	58025430 	.word	0x58025430
 8004380:	58025444 	.word	0x58025444
 8004384:	58025458 	.word	0x58025458
 8004388:	5802546c 	.word	0x5802546c
 800438c:	58025480 	.word	0x58025480
 8004390:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 81d5 	beq.w	8004748 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043a6:	e1cf      	b.n	8004748 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d160      	bne.n	8004474 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a7f      	ldr	r2, [pc, #508]	@ (80045b4 <HAL_DMA_IRQHandler+0xce4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d04a      	beq.n	8004452 <HAL_DMA_IRQHandler+0xb82>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a7d      	ldr	r2, [pc, #500]	@ (80045b8 <HAL_DMA_IRQHandler+0xce8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d045      	beq.n	8004452 <HAL_DMA_IRQHandler+0xb82>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a7c      	ldr	r2, [pc, #496]	@ (80045bc <HAL_DMA_IRQHandler+0xcec>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d040      	beq.n	8004452 <HAL_DMA_IRQHandler+0xb82>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a7a      	ldr	r2, [pc, #488]	@ (80045c0 <HAL_DMA_IRQHandler+0xcf0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d03b      	beq.n	8004452 <HAL_DMA_IRQHandler+0xb82>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a79      	ldr	r2, [pc, #484]	@ (80045c4 <HAL_DMA_IRQHandler+0xcf4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d036      	beq.n	8004452 <HAL_DMA_IRQHandler+0xb82>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a77      	ldr	r2, [pc, #476]	@ (80045c8 <HAL_DMA_IRQHandler+0xcf8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d031      	beq.n	8004452 <HAL_DMA_IRQHandler+0xb82>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a76      	ldr	r2, [pc, #472]	@ (80045cc <HAL_DMA_IRQHandler+0xcfc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d02c      	beq.n	8004452 <HAL_DMA_IRQHandler+0xb82>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a74      	ldr	r2, [pc, #464]	@ (80045d0 <HAL_DMA_IRQHandler+0xd00>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d027      	beq.n	8004452 <HAL_DMA_IRQHandler+0xb82>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a73      	ldr	r2, [pc, #460]	@ (80045d4 <HAL_DMA_IRQHandler+0xd04>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d022      	beq.n	8004452 <HAL_DMA_IRQHandler+0xb82>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a71      	ldr	r2, [pc, #452]	@ (80045d8 <HAL_DMA_IRQHandler+0xd08>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d01d      	beq.n	8004452 <HAL_DMA_IRQHandler+0xb82>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a70      	ldr	r2, [pc, #448]	@ (80045dc <HAL_DMA_IRQHandler+0xd0c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d018      	beq.n	8004452 <HAL_DMA_IRQHandler+0xb82>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a6e      	ldr	r2, [pc, #440]	@ (80045e0 <HAL_DMA_IRQHandler+0xd10>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_DMA_IRQHandler+0xb82>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a6d      	ldr	r2, [pc, #436]	@ (80045e4 <HAL_DMA_IRQHandler+0xd14>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d00e      	beq.n	8004452 <HAL_DMA_IRQHandler+0xb82>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a6b      	ldr	r2, [pc, #428]	@ (80045e8 <HAL_DMA_IRQHandler+0xd18>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d009      	beq.n	8004452 <HAL_DMA_IRQHandler+0xb82>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a6a      	ldr	r2, [pc, #424]	@ (80045ec <HAL_DMA_IRQHandler+0xd1c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d004      	beq.n	8004452 <HAL_DMA_IRQHandler+0xb82>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a68      	ldr	r2, [pc, #416]	@ (80045f0 <HAL_DMA_IRQHandler+0xd20>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d108      	bne.n	8004464 <HAL_DMA_IRQHandler+0xb94>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0208 	bic.w	r2, r2, #8
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	e007      	b.n	8004474 <HAL_DMA_IRQHandler+0xba4>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0204 	bic.w	r2, r2, #4
 8004472:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8165 	beq.w	8004748 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004486:	e15f      	b.n	8004748 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448c:	f003 031f 	and.w	r3, r3, #31
 8004490:	2202      	movs	r2, #2
 8004492:	409a      	lsls	r2, r3
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	4013      	ands	r3, r2
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80c5 	beq.w	8004628 <HAL_DMA_IRQHandler+0xd58>
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80bf 	beq.w	8004628 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	2202      	movs	r2, #2
 80044b4:	409a      	lsls	r2, r3
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d018      	beq.n	80044f6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 813a 	beq.w	800474c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044e0:	e134      	b.n	800474c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8130 	beq.w	800474c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044f4:	e12a      	b.n	800474c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f040 8089 	bne.w	8004614 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a2b      	ldr	r2, [pc, #172]	@ (80045b4 <HAL_DMA_IRQHandler+0xce4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d04a      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xcd2>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a29      	ldr	r2, [pc, #164]	@ (80045b8 <HAL_DMA_IRQHandler+0xce8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d045      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xcd2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a28      	ldr	r2, [pc, #160]	@ (80045bc <HAL_DMA_IRQHandler+0xcec>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d040      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xcd2>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a26      	ldr	r2, [pc, #152]	@ (80045c0 <HAL_DMA_IRQHandler+0xcf0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d03b      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xcd2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a25      	ldr	r2, [pc, #148]	@ (80045c4 <HAL_DMA_IRQHandler+0xcf4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d036      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xcd2>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a23      	ldr	r2, [pc, #140]	@ (80045c8 <HAL_DMA_IRQHandler+0xcf8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d031      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xcd2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a22      	ldr	r2, [pc, #136]	@ (80045cc <HAL_DMA_IRQHandler+0xcfc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d02c      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xcd2>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a20      	ldr	r2, [pc, #128]	@ (80045d0 <HAL_DMA_IRQHandler+0xd00>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d027      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xcd2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1f      	ldr	r2, [pc, #124]	@ (80045d4 <HAL_DMA_IRQHandler+0xd04>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d022      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xcd2>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1d      	ldr	r2, [pc, #116]	@ (80045d8 <HAL_DMA_IRQHandler+0xd08>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d01d      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xcd2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1c      	ldr	r2, [pc, #112]	@ (80045dc <HAL_DMA_IRQHandler+0xd0c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d018      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xcd2>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a1a      	ldr	r2, [pc, #104]	@ (80045e0 <HAL_DMA_IRQHandler+0xd10>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d013      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xcd2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a19      	ldr	r2, [pc, #100]	@ (80045e4 <HAL_DMA_IRQHandler+0xd14>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00e      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xcd2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a17      	ldr	r2, [pc, #92]	@ (80045e8 <HAL_DMA_IRQHandler+0xd18>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d009      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xcd2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a16      	ldr	r2, [pc, #88]	@ (80045ec <HAL_DMA_IRQHandler+0xd1c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d004      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xcd2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a14      	ldr	r2, [pc, #80]	@ (80045f0 <HAL_DMA_IRQHandler+0xd20>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d128      	bne.n	80045f4 <HAL_DMA_IRQHandler+0xd24>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0214 	bic.w	r2, r2, #20
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	e027      	b.n	8004604 <HAL_DMA_IRQHandler+0xd34>
 80045b4:	40020010 	.word	0x40020010
 80045b8:	40020028 	.word	0x40020028
 80045bc:	40020040 	.word	0x40020040
 80045c0:	40020058 	.word	0x40020058
 80045c4:	40020070 	.word	0x40020070
 80045c8:	40020088 	.word	0x40020088
 80045cc:	400200a0 	.word	0x400200a0
 80045d0:	400200b8 	.word	0x400200b8
 80045d4:	40020410 	.word	0x40020410
 80045d8:	40020428 	.word	0x40020428
 80045dc:	40020440 	.word	0x40020440
 80045e0:	40020458 	.word	0x40020458
 80045e4:	40020470 	.word	0x40020470
 80045e8:	40020488 	.word	0x40020488
 80045ec:	400204a0 	.word	0x400204a0
 80045f0:	400204b8 	.word	0x400204b8
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 020a 	bic.w	r2, r2, #10
 8004602:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8097 	beq.w	800474c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004626:	e091      	b.n	800474c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	2208      	movs	r2, #8
 8004632:	409a      	lsls	r2, r3
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	4013      	ands	r3, r2
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 8088 	beq.w	800474e <HAL_DMA_IRQHandler+0xe7e>
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8082 	beq.w	800474e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a41      	ldr	r2, [pc, #260]	@ (8004754 <HAL_DMA_IRQHandler+0xe84>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d04a      	beq.n	80046ea <HAL_DMA_IRQHandler+0xe1a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a3f      	ldr	r2, [pc, #252]	@ (8004758 <HAL_DMA_IRQHandler+0xe88>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d045      	beq.n	80046ea <HAL_DMA_IRQHandler+0xe1a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a3e      	ldr	r2, [pc, #248]	@ (800475c <HAL_DMA_IRQHandler+0xe8c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d040      	beq.n	80046ea <HAL_DMA_IRQHandler+0xe1a>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a3c      	ldr	r2, [pc, #240]	@ (8004760 <HAL_DMA_IRQHandler+0xe90>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d03b      	beq.n	80046ea <HAL_DMA_IRQHandler+0xe1a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a3b      	ldr	r2, [pc, #236]	@ (8004764 <HAL_DMA_IRQHandler+0xe94>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d036      	beq.n	80046ea <HAL_DMA_IRQHandler+0xe1a>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a39      	ldr	r2, [pc, #228]	@ (8004768 <HAL_DMA_IRQHandler+0xe98>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d031      	beq.n	80046ea <HAL_DMA_IRQHandler+0xe1a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a38      	ldr	r2, [pc, #224]	@ (800476c <HAL_DMA_IRQHandler+0xe9c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d02c      	beq.n	80046ea <HAL_DMA_IRQHandler+0xe1a>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a36      	ldr	r2, [pc, #216]	@ (8004770 <HAL_DMA_IRQHandler+0xea0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d027      	beq.n	80046ea <HAL_DMA_IRQHandler+0xe1a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a35      	ldr	r2, [pc, #212]	@ (8004774 <HAL_DMA_IRQHandler+0xea4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d022      	beq.n	80046ea <HAL_DMA_IRQHandler+0xe1a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a33      	ldr	r2, [pc, #204]	@ (8004778 <HAL_DMA_IRQHandler+0xea8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d01d      	beq.n	80046ea <HAL_DMA_IRQHandler+0xe1a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a32      	ldr	r2, [pc, #200]	@ (800477c <HAL_DMA_IRQHandler+0xeac>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d018      	beq.n	80046ea <HAL_DMA_IRQHandler+0xe1a>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a30      	ldr	r2, [pc, #192]	@ (8004780 <HAL_DMA_IRQHandler+0xeb0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <HAL_DMA_IRQHandler+0xe1a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004784 <HAL_DMA_IRQHandler+0xeb4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00e      	beq.n	80046ea <HAL_DMA_IRQHandler+0xe1a>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004788 <HAL_DMA_IRQHandler+0xeb8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d009      	beq.n	80046ea <HAL_DMA_IRQHandler+0xe1a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2c      	ldr	r2, [pc, #176]	@ (800478c <HAL_DMA_IRQHandler+0xebc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d004      	beq.n	80046ea <HAL_DMA_IRQHandler+0xe1a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004790 <HAL_DMA_IRQHandler+0xec0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d108      	bne.n	80046fc <HAL_DMA_IRQHandler+0xe2c>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 021c 	bic.w	r2, r2, #28
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	e007      	b.n	800470c <HAL_DMA_IRQHandler+0xe3c>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 020e 	bic.w	r2, r2, #14
 800470a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	2201      	movs	r2, #1
 8004716:	409a      	lsls	r2, r3
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	4798      	blx	r3
 8004742:	e004      	b.n	800474e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004744:	bf00      	nop
 8004746:	e002      	b.n	800474e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004748:	bf00      	nop
 800474a:	e000      	b.n	800474e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800474c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800474e:	3728      	adds	r7, #40	@ 0x28
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40020010 	.word	0x40020010
 8004758:	40020028 	.word	0x40020028
 800475c:	40020040 	.word	0x40020040
 8004760:	40020058 	.word	0x40020058
 8004764:	40020070 	.word	0x40020070
 8004768:	40020088 	.word	0x40020088
 800476c:	400200a0 	.word	0x400200a0
 8004770:	400200b8 	.word	0x400200b8
 8004774:	40020410 	.word	0x40020410
 8004778:	40020428 	.word	0x40020428
 800477c:	40020440 	.word	0x40020440
 8004780:	40020458 	.word	0x40020458
 8004784:	40020470 	.word	0x40020470
 8004788:	40020488 	.word	0x40020488
 800478c:	400204a0 	.word	0x400204a0
 8004790:	400204b8 	.word	0x400204b8

08004794 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047be:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a7f      	ldr	r2, [pc, #508]	@ (80049c8 <DMA_SetConfig+0x21c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d072      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a7d      	ldr	r2, [pc, #500]	@ (80049cc <DMA_SetConfig+0x220>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d06d      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a7c      	ldr	r2, [pc, #496]	@ (80049d0 <DMA_SetConfig+0x224>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d068      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a7a      	ldr	r2, [pc, #488]	@ (80049d4 <DMA_SetConfig+0x228>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d063      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a79      	ldr	r2, [pc, #484]	@ (80049d8 <DMA_SetConfig+0x22c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d05e      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a77      	ldr	r2, [pc, #476]	@ (80049dc <DMA_SetConfig+0x230>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d059      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a76      	ldr	r2, [pc, #472]	@ (80049e0 <DMA_SetConfig+0x234>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d054      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a74      	ldr	r2, [pc, #464]	@ (80049e4 <DMA_SetConfig+0x238>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d04f      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a73      	ldr	r2, [pc, #460]	@ (80049e8 <DMA_SetConfig+0x23c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d04a      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a71      	ldr	r2, [pc, #452]	@ (80049ec <DMA_SetConfig+0x240>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d045      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a70      	ldr	r2, [pc, #448]	@ (80049f0 <DMA_SetConfig+0x244>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d040      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a6e      	ldr	r2, [pc, #440]	@ (80049f4 <DMA_SetConfig+0x248>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d03b      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a6d      	ldr	r2, [pc, #436]	@ (80049f8 <DMA_SetConfig+0x24c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d036      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a6b      	ldr	r2, [pc, #428]	@ (80049fc <DMA_SetConfig+0x250>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d031      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a6a      	ldr	r2, [pc, #424]	@ (8004a00 <DMA_SetConfig+0x254>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d02c      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a68      	ldr	r2, [pc, #416]	@ (8004a04 <DMA_SetConfig+0x258>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d027      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a67      	ldr	r2, [pc, #412]	@ (8004a08 <DMA_SetConfig+0x25c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d022      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a65      	ldr	r2, [pc, #404]	@ (8004a0c <DMA_SetConfig+0x260>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d01d      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a64      	ldr	r2, [pc, #400]	@ (8004a10 <DMA_SetConfig+0x264>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d018      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a62      	ldr	r2, [pc, #392]	@ (8004a14 <DMA_SetConfig+0x268>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d013      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a61      	ldr	r2, [pc, #388]	@ (8004a18 <DMA_SetConfig+0x26c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00e      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a5f      	ldr	r2, [pc, #380]	@ (8004a1c <DMA_SetConfig+0x270>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d009      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a5e      	ldr	r2, [pc, #376]	@ (8004a20 <DMA_SetConfig+0x274>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d004      	beq.n	80048b6 <DMA_SetConfig+0x10a>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a5c      	ldr	r2, [pc, #368]	@ (8004a24 <DMA_SetConfig+0x278>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d101      	bne.n	80048ba <DMA_SetConfig+0x10e>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <DMA_SetConfig+0x110>
 80048ba:	2300      	movs	r3, #0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00d      	beq.n	80048dc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80048c8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d004      	beq.n	80048dc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80048da:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a39      	ldr	r2, [pc, #228]	@ (80049c8 <DMA_SetConfig+0x21c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d04a      	beq.n	800497c <DMA_SetConfig+0x1d0>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a38      	ldr	r2, [pc, #224]	@ (80049cc <DMA_SetConfig+0x220>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d045      	beq.n	800497c <DMA_SetConfig+0x1d0>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a36      	ldr	r2, [pc, #216]	@ (80049d0 <DMA_SetConfig+0x224>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d040      	beq.n	800497c <DMA_SetConfig+0x1d0>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a35      	ldr	r2, [pc, #212]	@ (80049d4 <DMA_SetConfig+0x228>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d03b      	beq.n	800497c <DMA_SetConfig+0x1d0>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a33      	ldr	r2, [pc, #204]	@ (80049d8 <DMA_SetConfig+0x22c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d036      	beq.n	800497c <DMA_SetConfig+0x1d0>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a32      	ldr	r2, [pc, #200]	@ (80049dc <DMA_SetConfig+0x230>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d031      	beq.n	800497c <DMA_SetConfig+0x1d0>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a30      	ldr	r2, [pc, #192]	@ (80049e0 <DMA_SetConfig+0x234>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d02c      	beq.n	800497c <DMA_SetConfig+0x1d0>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2f      	ldr	r2, [pc, #188]	@ (80049e4 <DMA_SetConfig+0x238>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d027      	beq.n	800497c <DMA_SetConfig+0x1d0>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a2d      	ldr	r2, [pc, #180]	@ (80049e8 <DMA_SetConfig+0x23c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d022      	beq.n	800497c <DMA_SetConfig+0x1d0>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a2c      	ldr	r2, [pc, #176]	@ (80049ec <DMA_SetConfig+0x240>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d01d      	beq.n	800497c <DMA_SetConfig+0x1d0>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a2a      	ldr	r2, [pc, #168]	@ (80049f0 <DMA_SetConfig+0x244>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d018      	beq.n	800497c <DMA_SetConfig+0x1d0>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a29      	ldr	r2, [pc, #164]	@ (80049f4 <DMA_SetConfig+0x248>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d013      	beq.n	800497c <DMA_SetConfig+0x1d0>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a27      	ldr	r2, [pc, #156]	@ (80049f8 <DMA_SetConfig+0x24c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00e      	beq.n	800497c <DMA_SetConfig+0x1d0>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a26      	ldr	r2, [pc, #152]	@ (80049fc <DMA_SetConfig+0x250>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d009      	beq.n	800497c <DMA_SetConfig+0x1d0>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a24      	ldr	r2, [pc, #144]	@ (8004a00 <DMA_SetConfig+0x254>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d004      	beq.n	800497c <DMA_SetConfig+0x1d0>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a23      	ldr	r2, [pc, #140]	@ (8004a04 <DMA_SetConfig+0x258>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d101      	bne.n	8004980 <DMA_SetConfig+0x1d4>
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <DMA_SetConfig+0x1d6>
 8004980:	2300      	movs	r3, #0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d059      	beq.n	8004a3a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	223f      	movs	r2, #63	@ 0x3f
 8004990:	409a      	lsls	r2, r3
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80049a4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b40      	cmp	r3, #64	@ 0x40
 80049b4:	d138      	bne.n	8004a28 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80049c6:	e0ae      	b.n	8004b26 <DMA_SetConfig+0x37a>
 80049c8:	40020010 	.word	0x40020010
 80049cc:	40020028 	.word	0x40020028
 80049d0:	40020040 	.word	0x40020040
 80049d4:	40020058 	.word	0x40020058
 80049d8:	40020070 	.word	0x40020070
 80049dc:	40020088 	.word	0x40020088
 80049e0:	400200a0 	.word	0x400200a0
 80049e4:	400200b8 	.word	0x400200b8
 80049e8:	40020410 	.word	0x40020410
 80049ec:	40020428 	.word	0x40020428
 80049f0:	40020440 	.word	0x40020440
 80049f4:	40020458 	.word	0x40020458
 80049f8:	40020470 	.word	0x40020470
 80049fc:	40020488 	.word	0x40020488
 8004a00:	400204a0 	.word	0x400204a0
 8004a04:	400204b8 	.word	0x400204b8
 8004a08:	58025408 	.word	0x58025408
 8004a0c:	5802541c 	.word	0x5802541c
 8004a10:	58025430 	.word	0x58025430
 8004a14:	58025444 	.word	0x58025444
 8004a18:	58025458 	.word	0x58025458
 8004a1c:	5802546c 	.word	0x5802546c
 8004a20:	58025480 	.word	0x58025480
 8004a24:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	60da      	str	r2, [r3, #12]
}
 8004a38:	e075      	b.n	8004b26 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a3d      	ldr	r2, [pc, #244]	@ (8004b34 <DMA_SetConfig+0x388>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d04a      	beq.n	8004ada <DMA_SetConfig+0x32e>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a3b      	ldr	r2, [pc, #236]	@ (8004b38 <DMA_SetConfig+0x38c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d045      	beq.n	8004ada <DMA_SetConfig+0x32e>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a3a      	ldr	r2, [pc, #232]	@ (8004b3c <DMA_SetConfig+0x390>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d040      	beq.n	8004ada <DMA_SetConfig+0x32e>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a38      	ldr	r2, [pc, #224]	@ (8004b40 <DMA_SetConfig+0x394>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d03b      	beq.n	8004ada <DMA_SetConfig+0x32e>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a37      	ldr	r2, [pc, #220]	@ (8004b44 <DMA_SetConfig+0x398>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d036      	beq.n	8004ada <DMA_SetConfig+0x32e>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a35      	ldr	r2, [pc, #212]	@ (8004b48 <DMA_SetConfig+0x39c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d031      	beq.n	8004ada <DMA_SetConfig+0x32e>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a34      	ldr	r2, [pc, #208]	@ (8004b4c <DMA_SetConfig+0x3a0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d02c      	beq.n	8004ada <DMA_SetConfig+0x32e>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a32      	ldr	r2, [pc, #200]	@ (8004b50 <DMA_SetConfig+0x3a4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d027      	beq.n	8004ada <DMA_SetConfig+0x32e>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a31      	ldr	r2, [pc, #196]	@ (8004b54 <DMA_SetConfig+0x3a8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d022      	beq.n	8004ada <DMA_SetConfig+0x32e>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a2f      	ldr	r2, [pc, #188]	@ (8004b58 <DMA_SetConfig+0x3ac>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d01d      	beq.n	8004ada <DMA_SetConfig+0x32e>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a2e      	ldr	r2, [pc, #184]	@ (8004b5c <DMA_SetConfig+0x3b0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d018      	beq.n	8004ada <DMA_SetConfig+0x32e>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a2c      	ldr	r2, [pc, #176]	@ (8004b60 <DMA_SetConfig+0x3b4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <DMA_SetConfig+0x32e>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a2b      	ldr	r2, [pc, #172]	@ (8004b64 <DMA_SetConfig+0x3b8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00e      	beq.n	8004ada <DMA_SetConfig+0x32e>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a29      	ldr	r2, [pc, #164]	@ (8004b68 <DMA_SetConfig+0x3bc>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d009      	beq.n	8004ada <DMA_SetConfig+0x32e>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a28      	ldr	r2, [pc, #160]	@ (8004b6c <DMA_SetConfig+0x3c0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d004      	beq.n	8004ada <DMA_SetConfig+0x32e>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a26      	ldr	r2, [pc, #152]	@ (8004b70 <DMA_SetConfig+0x3c4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d101      	bne.n	8004ade <DMA_SetConfig+0x332>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <DMA_SetConfig+0x334>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d020      	beq.n	8004b26 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	2201      	movs	r2, #1
 8004aee:	409a      	lsls	r2, r3
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2b40      	cmp	r3, #64	@ 0x40
 8004b02:	d108      	bne.n	8004b16 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	60da      	str	r2, [r3, #12]
}
 8004b14:	e007      	b.n	8004b26 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	60da      	str	r2, [r3, #12]
}
 8004b26:	bf00      	nop
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	48022c08 	.word	0x48022c08
 8004b38:	48022c1c 	.word	0x48022c1c
 8004b3c:	48022c30 	.word	0x48022c30
 8004b40:	48022c44 	.word	0x48022c44
 8004b44:	48022c58 	.word	0x48022c58
 8004b48:	48022c6c 	.word	0x48022c6c
 8004b4c:	48022c80 	.word	0x48022c80
 8004b50:	48022c94 	.word	0x48022c94
 8004b54:	58025408 	.word	0x58025408
 8004b58:	5802541c 	.word	0x5802541c
 8004b5c:	58025430 	.word	0x58025430
 8004b60:	58025444 	.word	0x58025444
 8004b64:	58025458 	.word	0x58025458
 8004b68:	5802546c 	.word	0x5802546c
 8004b6c:	58025480 	.word	0x58025480
 8004b70:	58025494 	.word	0x58025494

08004b74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a42      	ldr	r2, [pc, #264]	@ (8004c8c <DMA_CalcBaseAndBitshift+0x118>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d04a      	beq.n	8004c1c <DMA_CalcBaseAndBitshift+0xa8>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a41      	ldr	r2, [pc, #260]	@ (8004c90 <DMA_CalcBaseAndBitshift+0x11c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d045      	beq.n	8004c1c <DMA_CalcBaseAndBitshift+0xa8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a3f      	ldr	r2, [pc, #252]	@ (8004c94 <DMA_CalcBaseAndBitshift+0x120>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d040      	beq.n	8004c1c <DMA_CalcBaseAndBitshift+0xa8>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a3e      	ldr	r2, [pc, #248]	@ (8004c98 <DMA_CalcBaseAndBitshift+0x124>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d03b      	beq.n	8004c1c <DMA_CalcBaseAndBitshift+0xa8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a3c      	ldr	r2, [pc, #240]	@ (8004c9c <DMA_CalcBaseAndBitshift+0x128>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d036      	beq.n	8004c1c <DMA_CalcBaseAndBitshift+0xa8>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a3b      	ldr	r2, [pc, #236]	@ (8004ca0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d031      	beq.n	8004c1c <DMA_CalcBaseAndBitshift+0xa8>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a39      	ldr	r2, [pc, #228]	@ (8004ca4 <DMA_CalcBaseAndBitshift+0x130>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d02c      	beq.n	8004c1c <DMA_CalcBaseAndBitshift+0xa8>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a38      	ldr	r2, [pc, #224]	@ (8004ca8 <DMA_CalcBaseAndBitshift+0x134>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d027      	beq.n	8004c1c <DMA_CalcBaseAndBitshift+0xa8>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a36      	ldr	r2, [pc, #216]	@ (8004cac <DMA_CalcBaseAndBitshift+0x138>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d022      	beq.n	8004c1c <DMA_CalcBaseAndBitshift+0xa8>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a35      	ldr	r2, [pc, #212]	@ (8004cb0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d01d      	beq.n	8004c1c <DMA_CalcBaseAndBitshift+0xa8>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a33      	ldr	r2, [pc, #204]	@ (8004cb4 <DMA_CalcBaseAndBitshift+0x140>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d018      	beq.n	8004c1c <DMA_CalcBaseAndBitshift+0xa8>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a32      	ldr	r2, [pc, #200]	@ (8004cb8 <DMA_CalcBaseAndBitshift+0x144>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d013      	beq.n	8004c1c <DMA_CalcBaseAndBitshift+0xa8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a30      	ldr	r2, [pc, #192]	@ (8004cbc <DMA_CalcBaseAndBitshift+0x148>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00e      	beq.n	8004c1c <DMA_CalcBaseAndBitshift+0xa8>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a2f      	ldr	r2, [pc, #188]	@ (8004cc0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d009      	beq.n	8004c1c <DMA_CalcBaseAndBitshift+0xa8>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a2d      	ldr	r2, [pc, #180]	@ (8004cc4 <DMA_CalcBaseAndBitshift+0x150>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d004      	beq.n	8004c1c <DMA_CalcBaseAndBitshift+0xa8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a2c      	ldr	r2, [pc, #176]	@ (8004cc8 <DMA_CalcBaseAndBitshift+0x154>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d101      	bne.n	8004c20 <DMA_CalcBaseAndBitshift+0xac>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <DMA_CalcBaseAndBitshift+0xae>
 8004c20:	2300      	movs	r3, #0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d024      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	3b10      	subs	r3, #16
 8004c2e:	4a27      	ldr	r2, [pc, #156]	@ (8004ccc <DMA_CalcBaseAndBitshift+0x158>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	091b      	lsrs	r3, r3, #4
 8004c36:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	4a24      	ldr	r2, [pc, #144]	@ (8004cd0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004c40:	5cd3      	ldrb	r3, [r2, r3]
 8004c42:	461a      	mov	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d908      	bls.n	8004c60 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	4b1f      	ldr	r3, [pc, #124]	@ (8004cd4 <DMA_CalcBaseAndBitshift+0x160>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	1d1a      	adds	r2, r3, #4
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c5e:	e00d      	b.n	8004c7c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	461a      	mov	r2, r3
 8004c66:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd4 <DMA_CalcBaseAndBitshift+0x160>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c6e:	e005      	b.n	8004c7c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	40020010 	.word	0x40020010
 8004c90:	40020028 	.word	0x40020028
 8004c94:	40020040 	.word	0x40020040
 8004c98:	40020058 	.word	0x40020058
 8004c9c:	40020070 	.word	0x40020070
 8004ca0:	40020088 	.word	0x40020088
 8004ca4:	400200a0 	.word	0x400200a0
 8004ca8:	400200b8 	.word	0x400200b8
 8004cac:	40020410 	.word	0x40020410
 8004cb0:	40020428 	.word	0x40020428
 8004cb4:	40020440 	.word	0x40020440
 8004cb8:	40020458 	.word	0x40020458
 8004cbc:	40020470 	.word	0x40020470
 8004cc0:	40020488 	.word	0x40020488
 8004cc4:	400204a0 	.word	0x400204a0
 8004cc8:	400204b8 	.word	0x400204b8
 8004ccc:	aaaaaaab 	.word	0xaaaaaaab
 8004cd0:	0800e8cc 	.word	0x0800e8cc
 8004cd4:	fffffc00 	.word	0xfffffc00

08004cd8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d120      	bne.n	8004d2e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d858      	bhi.n	8004da6 <DMA_CheckFifoParam+0xce>
 8004cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cfc <DMA_CheckFifoParam+0x24>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d0d 	.word	0x08004d0d
 8004d00:	08004d1f 	.word	0x08004d1f
 8004d04:	08004d0d 	.word	0x08004d0d
 8004d08:	08004da7 	.word	0x08004da7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d048      	beq.n	8004daa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d1c:	e045      	b.n	8004daa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d22:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d26:	d142      	bne.n	8004dae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d2c:	e03f      	b.n	8004dae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d36:	d123      	bne.n	8004d80 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d838      	bhi.n	8004db2 <DMA_CheckFifoParam+0xda>
 8004d40:	a201      	add	r2, pc, #4	@ (adr r2, 8004d48 <DMA_CheckFifoParam+0x70>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004d5f 	.word	0x08004d5f
 8004d50:	08004d59 	.word	0x08004d59
 8004d54:	08004d71 	.word	0x08004d71
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	73fb      	strb	r3, [r7, #15]
        break;
 8004d5c:	e030      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d025      	beq.n	8004db6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d6e:	e022      	b.n	8004db6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d78:	d11f      	bne.n	8004dba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d7e:	e01c      	b.n	8004dba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d902      	bls.n	8004d8e <DMA_CheckFifoParam+0xb6>
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d003      	beq.n	8004d94 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004d8c:	e018      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	73fb      	strb	r3, [r7, #15]
        break;
 8004d92:	e015      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00e      	beq.n	8004dbe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
    break;
 8004da4:	e00b      	b.n	8004dbe <DMA_CheckFifoParam+0xe6>
        break;
 8004da6:	bf00      	nop
 8004da8:	e00a      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
        break;
 8004daa:	bf00      	nop
 8004dac:	e008      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
        break;
 8004dae:	bf00      	nop
 8004db0:	e006      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
        break;
 8004db2:	bf00      	nop
 8004db4:	e004      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
        break;
 8004db6:	bf00      	nop
 8004db8:	e002      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
        break;
 8004dba:	bf00      	nop
 8004dbc:	e000      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
    break;
 8004dbe:	bf00      	nop
    }
  }

  return status;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop

08004dd0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a38      	ldr	r2, [pc, #224]	@ (8004ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d022      	beq.n	8004e2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a36      	ldr	r2, [pc, #216]	@ (8004ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d01d      	beq.n	8004e2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a35      	ldr	r2, [pc, #212]	@ (8004ecc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d018      	beq.n	8004e2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a33      	ldr	r2, [pc, #204]	@ (8004ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d013      	beq.n	8004e2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a32      	ldr	r2, [pc, #200]	@ (8004ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00e      	beq.n	8004e2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a30      	ldr	r2, [pc, #192]	@ (8004ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d009      	beq.n	8004e2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a2f      	ldr	r2, [pc, #188]	@ (8004edc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d004      	beq.n	8004e2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a2d      	ldr	r2, [pc, #180]	@ (8004ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d101      	bne.n	8004e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004e32:	2300      	movs	r3, #0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01a      	beq.n	8004e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	3b08      	subs	r3, #8
 8004e40:	4a28      	ldr	r2, [pc, #160]	@ (8004ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4b26      	ldr	r3, [pc, #152]	@ (8004ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	461a      	mov	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a24      	ldr	r2, [pc, #144]	@ (8004eec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004e5c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f003 031f 	and.w	r3, r3, #31
 8004e64:	2201      	movs	r2, #1
 8004e66:	409a      	lsls	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004e6c:	e024      	b.n	8004eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	3b10      	subs	r3, #16
 8004e76:	4a1e      	ldr	r2, [pc, #120]	@ (8004ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	091b      	lsrs	r3, r3, #4
 8004e7e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d806      	bhi.n	8004e96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d902      	bls.n	8004e96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3308      	adds	r3, #8
 8004e94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4b18      	ldr	r3, [pc, #96]	@ (8004efc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a16      	ldr	r2, [pc, #88]	@ (8004f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004ea8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	58025408 	.word	0x58025408
 8004ec8:	5802541c 	.word	0x5802541c
 8004ecc:	58025430 	.word	0x58025430
 8004ed0:	58025444 	.word	0x58025444
 8004ed4:	58025458 	.word	0x58025458
 8004ed8:	5802546c 	.word	0x5802546c
 8004edc:	58025480 	.word	0x58025480
 8004ee0:	58025494 	.word	0x58025494
 8004ee4:	cccccccd 	.word	0xcccccccd
 8004ee8:	16009600 	.word	0x16009600
 8004eec:	58025880 	.word	0x58025880
 8004ef0:	aaaaaaab 	.word	0xaaaaaaab
 8004ef4:	400204b8 	.word	0x400204b8
 8004ef8:	4002040f 	.word	0x4002040f
 8004efc:	10008200 	.word	0x10008200
 8004f00:	40020880 	.word	0x40020880

08004f04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d04a      	beq.n	8004fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d847      	bhi.n	8004fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a25      	ldr	r2, [pc, #148]	@ (8004fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d022      	beq.n	8004f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a24      	ldr	r2, [pc, #144]	@ (8004fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d01d      	beq.n	8004f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a22      	ldr	r2, [pc, #136]	@ (8004fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d018      	beq.n	8004f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a21      	ldr	r2, [pc, #132]	@ (8004fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d013      	beq.n	8004f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00e      	beq.n	8004f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a1e      	ldr	r2, [pc, #120]	@ (8004fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d009      	beq.n	8004f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d004      	beq.n	8004f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d101      	bne.n	8004f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004f70:	2301      	movs	r3, #1
 8004f72:	e000      	b.n	8004f76 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004f74:	2300      	movs	r3, #0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4b17      	ldr	r3, [pc, #92]	@ (8004fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	461a      	mov	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a15      	ldr	r2, [pc, #84]	@ (8004fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004f8c:	671a      	str	r2, [r3, #112]	@ 0x70
 8004f8e:	e009      	b.n	8004fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4b14      	ldr	r3, [pc, #80]	@ (8004fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	461a      	mov	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a11      	ldr	r2, [pc, #68]	@ (8004fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004fa2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	2201      	movs	r2, #1
 8004faa:	409a      	lsls	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004fb0:	bf00      	nop
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	58025408 	.word	0x58025408
 8004fc0:	5802541c 	.word	0x5802541c
 8004fc4:	58025430 	.word	0x58025430
 8004fc8:	58025444 	.word	0x58025444
 8004fcc:	58025458 	.word	0x58025458
 8004fd0:	5802546c 	.word	0x5802546c
 8004fd4:	58025480 	.word	0x58025480
 8004fd8:	58025494 	.word	0x58025494
 8004fdc:	1600963f 	.word	0x1600963f
 8004fe0:	58025940 	.word	0x58025940
 8004fe4:	1000823f 	.word	0x1000823f
 8004fe8:	40020940 	.word	0x40020940

08004fec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b089      	sub	sp, #36	@ 0x24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004ffa:	4b89      	ldr	r3, [pc, #548]	@ (8005220 <HAL_GPIO_Init+0x234>)
 8004ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ffe:	e194      	b.n	800532a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	2101      	movs	r1, #1
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	fa01 f303 	lsl.w	r3, r1, r3
 800500c:	4013      	ands	r3, r2
 800500e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 8186 	beq.w	8005324 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 0303 	and.w	r3, r3, #3
 8005020:	2b01      	cmp	r3, #1
 8005022:	d005      	beq.n	8005030 <HAL_GPIO_Init+0x44>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f003 0303 	and.w	r3, r3, #3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d130      	bne.n	8005092 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	2203      	movs	r2, #3
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43db      	mvns	r3, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4313      	orrs	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005066:	2201      	movs	r2, #1
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	43db      	mvns	r3, r3
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	4013      	ands	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	091b      	lsrs	r3, r3, #4
 800507c:	f003 0201 	and.w	r2, r3, #1
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	4313      	orrs	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b03      	cmp	r3, #3
 800509c:	d017      	beq.n	80050ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	2203      	movs	r2, #3
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	43db      	mvns	r3, r3
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	4013      	ands	r3, r2
 80050b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d123      	bne.n	8005122 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	08da      	lsrs	r2, r3, #3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3208      	adds	r2, #8
 80050e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	220f      	movs	r2, #15
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	43db      	mvns	r3, r3
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4013      	ands	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	4313      	orrs	r3, r2
 8005112:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	08da      	lsrs	r2, r3, #3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3208      	adds	r2, #8
 800511c:	69b9      	ldr	r1, [r7, #24]
 800511e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	2203      	movs	r2, #3
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	43db      	mvns	r3, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	4013      	ands	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f003 0203 	and.w	r2, r3, #3
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	4313      	orrs	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 80e0 	beq.w	8005324 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005164:	4b2f      	ldr	r3, [pc, #188]	@ (8005224 <HAL_GPIO_Init+0x238>)
 8005166:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800516a:	4a2e      	ldr	r2, [pc, #184]	@ (8005224 <HAL_GPIO_Init+0x238>)
 800516c:	f043 0302 	orr.w	r3, r3, #2
 8005170:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8005174:	4b2b      	ldr	r3, [pc, #172]	@ (8005224 <HAL_GPIO_Init+0x238>)
 8005176:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005182:	4a29      	ldr	r2, [pc, #164]	@ (8005228 <HAL_GPIO_Init+0x23c>)
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	089b      	lsrs	r3, r3, #2
 8005188:	3302      	adds	r3, #2
 800518a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800518e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	220f      	movs	r2, #15
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	43db      	mvns	r3, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4013      	ands	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a20      	ldr	r2, [pc, #128]	@ (800522c <HAL_GPIO_Init+0x240>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d052      	beq.n	8005254 <HAL_GPIO_Init+0x268>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005230 <HAL_GPIO_Init+0x244>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d031      	beq.n	800521a <HAL_GPIO_Init+0x22e>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005234 <HAL_GPIO_Init+0x248>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d02b      	beq.n	8005216 <HAL_GPIO_Init+0x22a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005238 <HAL_GPIO_Init+0x24c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d025      	beq.n	8005212 <HAL_GPIO_Init+0x226>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a1c      	ldr	r2, [pc, #112]	@ (800523c <HAL_GPIO_Init+0x250>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d01f      	beq.n	800520e <HAL_GPIO_Init+0x222>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005240 <HAL_GPIO_Init+0x254>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d019      	beq.n	800520a <HAL_GPIO_Init+0x21e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005244 <HAL_GPIO_Init+0x258>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d013      	beq.n	8005206 <HAL_GPIO_Init+0x21a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a19      	ldr	r2, [pc, #100]	@ (8005248 <HAL_GPIO_Init+0x25c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00d      	beq.n	8005202 <HAL_GPIO_Init+0x216>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a18      	ldr	r2, [pc, #96]	@ (800524c <HAL_GPIO_Init+0x260>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d007      	beq.n	80051fe <HAL_GPIO_Init+0x212>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a17      	ldr	r2, [pc, #92]	@ (8005250 <HAL_GPIO_Init+0x264>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d101      	bne.n	80051fa <HAL_GPIO_Init+0x20e>
 80051f6:	2309      	movs	r3, #9
 80051f8:	e02d      	b.n	8005256 <HAL_GPIO_Init+0x26a>
 80051fa:	230a      	movs	r3, #10
 80051fc:	e02b      	b.n	8005256 <HAL_GPIO_Init+0x26a>
 80051fe:	2308      	movs	r3, #8
 8005200:	e029      	b.n	8005256 <HAL_GPIO_Init+0x26a>
 8005202:	2307      	movs	r3, #7
 8005204:	e027      	b.n	8005256 <HAL_GPIO_Init+0x26a>
 8005206:	2306      	movs	r3, #6
 8005208:	e025      	b.n	8005256 <HAL_GPIO_Init+0x26a>
 800520a:	2305      	movs	r3, #5
 800520c:	e023      	b.n	8005256 <HAL_GPIO_Init+0x26a>
 800520e:	2304      	movs	r3, #4
 8005210:	e021      	b.n	8005256 <HAL_GPIO_Init+0x26a>
 8005212:	2303      	movs	r3, #3
 8005214:	e01f      	b.n	8005256 <HAL_GPIO_Init+0x26a>
 8005216:	2302      	movs	r3, #2
 8005218:	e01d      	b.n	8005256 <HAL_GPIO_Init+0x26a>
 800521a:	2301      	movs	r3, #1
 800521c:	e01b      	b.n	8005256 <HAL_GPIO_Init+0x26a>
 800521e:	bf00      	nop
 8005220:	58000080 	.word	0x58000080
 8005224:	58024400 	.word	0x58024400
 8005228:	58000400 	.word	0x58000400
 800522c:	58020000 	.word	0x58020000
 8005230:	58020400 	.word	0x58020400
 8005234:	58020800 	.word	0x58020800
 8005238:	58020c00 	.word	0x58020c00
 800523c:	58021000 	.word	0x58021000
 8005240:	58021400 	.word	0x58021400
 8005244:	58021800 	.word	0x58021800
 8005248:	58021c00 	.word	0x58021c00
 800524c:	58022000 	.word	0x58022000
 8005250:	58022400 	.word	0x58022400
 8005254:	2300      	movs	r3, #0
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	f002 0203 	and.w	r2, r2, #3
 800525c:	0092      	lsls	r2, r2, #2
 800525e:	4093      	lsls	r3, r2
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	4313      	orrs	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005266:	4938      	ldr	r1, [pc, #224]	@ (8005348 <HAL_GPIO_Init+0x35c>)
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	089b      	lsrs	r3, r3, #2
 800526c:	3302      	adds	r3, #2
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	43db      	mvns	r3, r3
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	4013      	ands	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	4313      	orrs	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800529a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80052a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	43db      	mvns	r3, r3
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	4013      	ands	r3, r2
 80052b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80052c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	43db      	mvns	r3, r3
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	4013      	ands	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	43db      	mvns	r3, r3
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	4013      	ands	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	3301      	adds	r3, #1
 8005328:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	fa22 f303 	lsr.w	r3, r2, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	f47f ae63 	bne.w	8005000 <HAL_GPIO_Init+0x14>
  }
}
 800533a:	bf00      	nop
 800533c:	bf00      	nop
 800533e:	3724      	adds	r7, #36	@ 0x24
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	58000400 	.word	0x58000400

0800534c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	807b      	strh	r3, [r7, #2]
 8005358:	4613      	mov	r3, r2
 800535a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800535c:	787b      	ldrb	r3, [r7, #1]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005362:	887a      	ldrh	r2, [r7, #2]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005368:	e003      	b.n	8005372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800536a:	887b      	ldrh	r3, [r7, #2]
 800536c:	041a      	lsls	r2, r3, #16
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	619a      	str	r2, [r3, #24]
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b082      	sub	sp, #8
 8005382:	af00      	add	r7, sp, #0
 8005384:	4603      	mov	r3, r0
 8005386:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800538c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005390:	88fb      	ldrh	r3, [r7, #6]
 8005392:	4013      	ands	r3, r2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d008      	beq.n	80053aa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005398:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800539c:	88fb      	ldrh	r3, [r7, #6]
 800539e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053a2:	88fb      	ldrh	r3, [r7, #6]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fb feab 	bl	8001100 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80053aa:	bf00      	nop
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e08b      	b.n	80054de <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fb fbc2 	bl	8000b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2224      	movs	r2, #36	@ 0x24
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0201 	bic.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005404:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005414:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d107      	bne.n	800542e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800542a:	609a      	str	r2, [r3, #8]
 800542c:	e006      	b.n	800543c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800543a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d108      	bne.n	8005456 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005452:	605a      	str	r2, [r3, #4]
 8005454:	e007      	b.n	8005466 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005464:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6859      	ldr	r1, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	4b1d      	ldr	r3, [pc, #116]	@ (80054e8 <HAL_I2C_Init+0x134>)
 8005472:	430b      	orrs	r3, r1
 8005474:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005484:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	69d9      	ldr	r1, [r3, #28]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a1a      	ldr	r2, [r3, #32]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	02008000 	.word	0x02008000

080054ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af02      	add	r7, sp, #8
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	607a      	str	r2, [r7, #4]
 80054f6:	461a      	mov	r2, r3
 80054f8:	460b      	mov	r3, r1
 80054fa:	817b      	strh	r3, [r7, #10]
 80054fc:	4613      	mov	r3, r2
 80054fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b20      	cmp	r3, #32
 800550a:	f040 80fd 	bne.w	8005708 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_I2C_Master_Transmit+0x30>
 8005518:	2302      	movs	r3, #2
 800551a:	e0f6      	b.n	800570a <HAL_I2C_Master_Transmit+0x21e>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005524:	f7fc fcc0 	bl	8001ea8 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	2319      	movs	r3, #25
 8005530:	2201      	movs	r2, #1
 8005532:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 fb1c 	bl	8005b74 <I2C_WaitOnFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e0e1      	b.n	800570a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2221      	movs	r2, #33	@ 0x21
 800554a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2210      	movs	r2, #16
 8005552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	893a      	ldrh	r2, [r7, #8]
 8005566:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005572:	b29b      	uxth	r3, r3
 8005574:	2bff      	cmp	r3, #255	@ 0xff
 8005576:	d906      	bls.n	8005586 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	22ff      	movs	r2, #255	@ 0xff
 800557c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800557e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	e007      	b.n	8005596 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005590:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005594:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800559a:	2b00      	cmp	r3, #0
 800559c:	d024      	beq.n	80055e8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a2:	781a      	ldrb	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	3301      	adds	r3, #1
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	8979      	ldrh	r1, [r7, #10]
 80055da:	4b4e      	ldr	r3, [pc, #312]	@ (8005714 <HAL_I2C_Master_Transmit+0x228>)
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 fd17 	bl	8006014 <I2C_TransferConfig>
 80055e6:	e066      	b.n	80056b6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	8979      	ldrh	r1, [r7, #10]
 80055f0:	4b48      	ldr	r3, [pc, #288]	@ (8005714 <HAL_I2C_Master_Transmit+0x228>)
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 fd0c 	bl	8006014 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80055fc:	e05b      	b.n	80056b6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	6a39      	ldr	r1, [r7, #32]
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 fb0f 	bl	8005c26 <I2C_WaitOnTXISFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e07b      	b.n	800570a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	781a      	ldrb	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d034      	beq.n	80056b6 <HAL_I2C_Master_Transmit+0x1ca>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005650:	2b00      	cmp	r3, #0
 8005652:	d130      	bne.n	80056b6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	2200      	movs	r2, #0
 800565c:	2180      	movs	r1, #128	@ 0x80
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 fa88 	bl	8005b74 <I2C_WaitOnFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e04d      	b.n	800570a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005672:	b29b      	uxth	r3, r3
 8005674:	2bff      	cmp	r3, #255	@ 0xff
 8005676:	d90e      	bls.n	8005696 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	22ff      	movs	r2, #255	@ 0xff
 800567c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005682:	b2da      	uxtb	r2, r3
 8005684:	8979      	ldrh	r1, [r7, #10]
 8005686:	2300      	movs	r3, #0
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 fcc0 	bl	8006014 <I2C_TransferConfig>
 8005694:	e00f      	b.n	80056b6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	8979      	ldrh	r1, [r7, #10]
 80056a8:	2300      	movs	r3, #0
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fcaf 	bl	8006014 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d19e      	bne.n	80055fe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	6a39      	ldr	r1, [r7, #32]
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 faf5 	bl	8005cb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e01a      	b.n	800570a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2220      	movs	r2, #32
 80056da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6859      	ldr	r1, [r3, #4]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005718 <HAL_I2C_Master_Transmit+0x22c>)
 80056e8:	400b      	ands	r3, r1
 80056ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	e000      	b.n	800570a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005708:	2302      	movs	r3, #2
  }
}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	80002000 	.word	0x80002000
 8005718:	fe00e800 	.word	0xfe00e800

0800571c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af02      	add	r7, sp, #8
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	607a      	str	r2, [r7, #4]
 8005726:	461a      	mov	r2, r3
 8005728:	460b      	mov	r3, r1
 800572a:	817b      	strh	r3, [r7, #10]
 800572c:	4613      	mov	r3, r2
 800572e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b20      	cmp	r3, #32
 800573a:	f040 80db 	bne.w	80058f4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_I2C_Master_Receive+0x30>
 8005748:	2302      	movs	r3, #2
 800574a:	e0d4      	b.n	80058f6 <HAL_I2C_Master_Receive+0x1da>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005754:	f7fc fba8 	bl	8001ea8 <HAL_GetTick>
 8005758:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	2319      	movs	r3, #25
 8005760:	2201      	movs	r2, #1
 8005762:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 fa04 	bl	8005b74 <I2C_WaitOnFlagUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e0bf      	b.n	80058f6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2222      	movs	r2, #34	@ 0x22
 800577a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2210      	movs	r2, #16
 8005782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	893a      	ldrh	r2, [r7, #8]
 8005796:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2bff      	cmp	r3, #255	@ 0xff
 80057a6:	d90e      	bls.n	80057c6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	22ff      	movs	r2, #255	@ 0xff
 80057ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	8979      	ldrh	r1, [r7, #10]
 80057b6:	4b52      	ldr	r3, [pc, #328]	@ (8005900 <HAL_I2C_Master_Receive+0x1e4>)
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 fc28 	bl	8006014 <I2C_TransferConfig>
 80057c4:	e06d      	b.n	80058a2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	8979      	ldrh	r1, [r7, #10]
 80057d8:	4b49      	ldr	r3, [pc, #292]	@ (8005900 <HAL_I2C_Master_Receive+0x1e4>)
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 fc17 	bl	8006014 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80057e6:	e05c      	b.n	80058a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	6a39      	ldr	r1, [r7, #32]
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 faa5 	bl	8005d3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e07c      	b.n	80058f6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005824:	b29b      	uxth	r3, r3
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d034      	beq.n	80058a2 <HAL_I2C_Master_Receive+0x186>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800583c:	2b00      	cmp	r3, #0
 800583e:	d130      	bne.n	80058a2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	2200      	movs	r2, #0
 8005848:	2180      	movs	r1, #128	@ 0x80
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 f992 	bl	8005b74 <I2C_WaitOnFlagUntilTimeout>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e04d      	b.n	80058f6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800585e:	b29b      	uxth	r3, r3
 8005860:	2bff      	cmp	r3, #255	@ 0xff
 8005862:	d90e      	bls.n	8005882 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	22ff      	movs	r2, #255	@ 0xff
 8005868:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800586e:	b2da      	uxtb	r2, r3
 8005870:	8979      	ldrh	r1, [r7, #10]
 8005872:	2300      	movs	r3, #0
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 fbca 	bl	8006014 <I2C_TransferConfig>
 8005880:	e00f      	b.n	80058a2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005890:	b2da      	uxtb	r2, r3
 8005892:	8979      	ldrh	r1, [r7, #10]
 8005894:	2300      	movs	r3, #0
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 fbb9 	bl	8006014 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d19d      	bne.n	80057e8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	6a39      	ldr	r1, [r7, #32]
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 f9ff 	bl	8005cb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e01a      	b.n	80058f6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2220      	movs	r2, #32
 80058c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6859      	ldr	r1, [r3, #4]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005904 <HAL_I2C_Master_Receive+0x1e8>)
 80058d4:	400b      	ands	r3, r1
 80058d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	e000      	b.n	80058f6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80058f4:	2302      	movs	r3, #2
  }
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	80002400 	.word	0x80002400
 8005904:	fe00e800 	.word	0xfe00e800

08005908 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08a      	sub	sp, #40	@ 0x28
 800590c:	af02      	add	r7, sp, #8
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	607a      	str	r2, [r7, #4]
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	460b      	mov	r3, r1
 8005916:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b20      	cmp	r3, #32
 800592a:	f040 80e9 	bne.w	8005b00 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005938:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800593c:	d101      	bne.n	8005942 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 800593e:	2302      	movs	r3, #2
 8005940:	e0df      	b.n	8005b02 <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005948:	2b01      	cmp	r3, #1
 800594a:	d101      	bne.n	8005950 <HAL_I2C_IsDeviceReady+0x48>
 800594c:	2302      	movs	r3, #2
 800594e:	e0d8      	b.n	8005b02 <HAL_I2C_IsDeviceReady+0x1fa>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2224      	movs	r2, #36	@ 0x24
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d105      	bne.n	800597a <HAL_I2C_IsDeviceReady+0x72>
 800596e:	897b      	ldrh	r3, [r7, #10]
 8005970:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005974:	4b65      	ldr	r3, [pc, #404]	@ (8005b0c <HAL_I2C_IsDeviceReady+0x204>)
 8005976:	4313      	orrs	r3, r2
 8005978:	e004      	b.n	8005984 <HAL_I2C_IsDeviceReady+0x7c>
 800597a:	897b      	ldrh	r3, [r7, #10]
 800597c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005980:	4b63      	ldr	r3, [pc, #396]	@ (8005b10 <HAL_I2C_IsDeviceReady+0x208>)
 8005982:	4313      	orrs	r3, r2
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	6812      	ldr	r2, [r2, #0]
 8005988:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800598a:	f7fc fa8d 	bl	8001ea8 <HAL_GetTick>
 800598e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b20      	cmp	r3, #32
 800599c:	bf0c      	ite	eq
 800599e:	2301      	moveq	r3, #1
 80059a0:	2300      	movne	r3, #0
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	2b10      	cmp	r3, #16
 80059b2:	bf0c      	ite	eq
 80059b4:	2301      	moveq	r3, #1
 80059b6:	2300      	movne	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80059bc:	e034      	b.n	8005a28 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d01a      	beq.n	80059fc <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059c6:	f7fc fa6f 	bl	8001ea8 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d302      	bcc.n	80059dc <HAL_I2C_IsDeviceReady+0xd4>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10f      	bne.n	80059fc <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e8:	f043 0220 	orr.w	r2, r3, #32
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e082      	b.n	8005b02 <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	bf0c      	ite	eq
 8005a0a:	2301      	moveq	r3, #1
 8005a0c:	2300      	movne	r3, #0
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	2b10      	cmp	r3, #16
 8005a1e:	bf0c      	ite	eq
 8005a20:	2301      	moveq	r3, #1
 8005a22:	2300      	movne	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005a28:	7fbb      	ldrb	r3, [r7, #30]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d102      	bne.n	8005a34 <HAL_I2C_IsDeviceReady+0x12c>
 8005a2e:	7f7b      	ldrb	r3, [r7, #29]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0c4      	beq.n	80059be <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f003 0310 	and.w	r3, r3, #16
 8005a3e:	2b10      	cmp	r3, #16
 8005a40:	d027      	beq.n	8005a92 <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2120      	movs	r1, #32
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f891 	bl	8005b74 <I2C_WaitOnFlagUntilTimeout>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00e      	beq.n	8005a76 <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d107      	bne.n	8005a70 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2220      	movs	r2, #32
 8005a66:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a6e:	e026      	b.n	8005abe <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	77fb      	strb	r3, [r7, #31]
 8005a74:	e023      	b.n	8005abe <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e037      	b.n	8005b02 <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2210      	movs	r2, #16
 8005a98:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2120      	movs	r1, #32
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 f865 	bl	8005b74 <I2C_WaitOnFlagUntilTimeout>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	77fb      	strb	r3, [r7, #31]
 8005ab4:	e003      	b.n	8005abe <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2220      	movs	r2, #32
 8005abc:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d904      	bls.n	8005ad6 <HAL_I2C_IsDeviceReady+0x1ce>
 8005acc:	7ffb      	ldrb	r3, [r7, #31]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	f63f af43 	bhi.w	8005966 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aec:	f043 0220 	orr.w	r2, r3, #32
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3720      	adds	r7, #32
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	02002000 	.word	0x02002000
 8005b10:	02002800 	.word	0x02002800

08005b14 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d103      	bne.n	8005b4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2200      	movs	r2, #0
 8005b48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d007      	beq.n	8005b68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699a      	ldr	r2, [r3, #24]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0201 	orr.w	r2, r2, #1
 8005b66:	619a      	str	r2, [r3, #24]
  }
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	603b      	str	r3, [r7, #0]
 8005b80:	4613      	mov	r3, r2
 8005b82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b84:	e03b      	b.n	8005bfe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	6839      	ldr	r1, [r7, #0]
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 f962 	bl	8005e54 <I2C_IsErrorOccurred>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e041      	b.n	8005c1e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d02d      	beq.n	8005bfe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba2:	f7fc f981 	bl	8001ea8 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d302      	bcc.n	8005bb8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d122      	bne.n	8005bfe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	bf0c      	ite	eq
 8005bc8:	2301      	moveq	r3, #1
 8005bca:	2300      	movne	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d113      	bne.n	8005bfe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bda:	f043 0220 	orr.w	r2, r3, #32
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e00f      	b.n	8005c1e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	699a      	ldr	r2, [r3, #24]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4013      	ands	r3, r2
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	bf0c      	ite	eq
 8005c0e:	2301      	moveq	r3, #1
 8005c10:	2300      	movne	r3, #0
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	461a      	mov	r2, r3
 8005c16:	79fb      	ldrb	r3, [r7, #7]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d0b4      	beq.n	8005b86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c32:	e033      	b.n	8005c9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f90b 	bl	8005e54 <I2C_IsErrorOccurred>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e031      	b.n	8005cac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4e:	d025      	beq.n	8005c9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c50:	f7fc f92a 	bl	8001ea8 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d302      	bcc.n	8005c66 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d11a      	bne.n	8005c9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d013      	beq.n	8005c9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c78:	f043 0220 	orr.w	r2, r3, #32
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e007      	b.n	8005cac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d1c4      	bne.n	8005c34 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cc0:	e02f      	b.n	8005d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	68b9      	ldr	r1, [r7, #8]
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 f8c4 	bl	8005e54 <I2C_IsErrorOccurred>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e02d      	b.n	8005d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd6:	f7fc f8e7 	bl	8001ea8 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d302      	bcc.n	8005cec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d11a      	bne.n	8005d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d013      	beq.n	8005d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfe:	f043 0220 	orr.w	r2, r3, #32
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e007      	b.n	8005d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	f003 0320 	and.w	r3, r3, #32
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	d1c8      	bne.n	8005cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005d4c:	e071      	b.n	8005e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	68b9      	ldr	r1, [r7, #8]
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 f87e 	bl	8005e54 <I2C_IsErrorOccurred>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	f003 0320 	and.w	r3, r3, #32
 8005d6c:	2b20      	cmp	r3, #32
 8005d6e:	d13b      	bne.n	8005de8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d138      	bne.n	8005de8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d105      	bne.n	8005d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	f003 0310 	and.w	r3, r3, #16
 8005d9a:	2b10      	cmp	r3, #16
 8005d9c:	d121      	bne.n	8005de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2210      	movs	r2, #16
 8005da4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2204      	movs	r2, #4
 8005daa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2220      	movs	r2, #32
 8005db2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6859      	ldr	r1, [r3, #4]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	4b24      	ldr	r3, [pc, #144]	@ (8005e50 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005dc0:	400b      	ands	r3, r1
 8005dc2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	75fb      	strb	r3, [r7, #23]
 8005de0:	e002      	b.n	8005de8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005de8:	f7fc f85e 	bl	8001ea8 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d302      	bcc.n	8005dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d119      	bne.n	8005e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005dfe:	7dfb      	ldrb	r3, [r7, #23]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d116      	bne.n	8005e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	f003 0304 	and.w	r3, r3, #4
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d00f      	beq.n	8005e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e16:	f043 0220 	orr.w	r2, r3, #32
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d002      	beq.n	8005e46 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005e40:	7dfb      	ldrb	r3, [r7, #23]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d083      	beq.n	8005d4e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	fe00e800 	.word	0xfe00e800

08005e54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08a      	sub	sp, #40	@ 0x28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	f003 0310 	and.w	r3, r3, #16
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d068      	beq.n	8005f52 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2210      	movs	r2, #16
 8005e86:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e88:	e049      	b.n	8005f1e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e90:	d045      	beq.n	8005f1e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e92:	f7fc f809 	bl	8001ea8 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d302      	bcc.n	8005ea8 <I2C_IsErrorOccurred+0x54>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d13a      	bne.n	8005f1e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005eba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ec6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005eca:	d121      	bne.n	8005f10 <I2C_IsErrorOccurred+0xbc>
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ed2:	d01d      	beq.n	8005f10 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005ed4:	7cfb      	ldrb	r3, [r7, #19]
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	d01a      	beq.n	8005f10 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ee8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005eea:	f7fb ffdd 	bl	8001ea8 <HAL_GetTick>
 8005eee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ef0:	e00e      	b.n	8005f10 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005ef2:	f7fb ffd9 	bl	8001ea8 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b19      	cmp	r3, #25
 8005efe:	d907      	bls.n	8005f10 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	f043 0320 	orr.w	r3, r3, #32
 8005f06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005f0e:	e006      	b.n	8005f1e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b20      	cmp	r3, #32
 8005f1c:	d1e9      	bne.n	8005ef2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b20      	cmp	r3, #32
 8005f2a:	d003      	beq.n	8005f34 <I2C_IsErrorOccurred+0xe0>
 8005f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0aa      	beq.n	8005e8a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005f34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d103      	bne.n	8005f44 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2220      	movs	r2, #32
 8005f42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	f043 0304 	orr.w	r3, r3, #4
 8005f4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00b      	beq.n	8005f7c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	f043 0301 	orr.w	r3, r3, #1
 8005f6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	f043 0308 	orr.w	r3, r3, #8
 8005f8c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00b      	beq.n	8005fc0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	f043 0302 	orr.w	r3, r3, #2
 8005fae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01c      	beq.n	8006002 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7ff fdaf 	bl	8005b2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6859      	ldr	r1, [r3, #4]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8006010 <I2C_IsErrorOccurred+0x1bc>)
 8005fda:	400b      	ands	r3, r1
 8005fdc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006002:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006006:	4618      	mov	r0, r3
 8006008:	3728      	adds	r7, #40	@ 0x28
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	fe00e800 	.word	0xfe00e800

08006014 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	607b      	str	r3, [r7, #4]
 800601e:	460b      	mov	r3, r1
 8006020:	817b      	strh	r3, [r7, #10]
 8006022:	4613      	mov	r3, r2
 8006024:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006026:	897b      	ldrh	r3, [r7, #10]
 8006028:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800602c:	7a7b      	ldrb	r3, [r7, #9]
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006034:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	4313      	orrs	r3, r2
 800603e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006042:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	0d5b      	lsrs	r3, r3, #21
 800604e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006052:	4b08      	ldr	r3, [pc, #32]	@ (8006074 <I2C_TransferConfig+0x60>)
 8006054:	430b      	orrs	r3, r1
 8006056:	43db      	mvns	r3, r3
 8006058:	ea02 0103 	and.w	r1, r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	430a      	orrs	r2, r1
 8006064:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006066:	bf00      	nop
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	03ff63ff 	.word	0x03ff63ff

08006078 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b20      	cmp	r3, #32
 800608c:	d138      	bne.n	8006100 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006098:	2302      	movs	r3, #2
 800609a:	e032      	b.n	8006102 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2224      	movs	r2, #36	@ 0x24
 80060a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0201 	bic.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80060ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6819      	ldr	r1, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0201 	orr.w	r2, r2, #1
 80060ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	e000      	b.n	8006102 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006100:	2302      	movs	r3, #2
  }
}
 8006102:	4618      	mov	r0, r3
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b20      	cmp	r3, #32
 8006122:	d139      	bne.n	8006198 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800612e:	2302      	movs	r3, #2
 8006130:	e033      	b.n	800619a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2224      	movs	r2, #36	@ 0x24
 800613e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0201 	bic.w	r2, r2, #1
 8006150:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006160:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0201 	orr.w	r2, r2, #1
 8006182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	e000      	b.n	800619a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006198:	2302      	movs	r3, #2
  }
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
	...

080061a8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80061b0:	4b29      	ldr	r3, [pc, #164]	@ (8006258 <HAL_PWREx_ConfigSupply+0xb0>)
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f003 0307 	and.w	r3, r3, #7
 80061b8:	2b06      	cmp	r3, #6
 80061ba:	d00a      	beq.n	80061d2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80061bc:	4b26      	ldr	r3, [pc, #152]	@ (8006258 <HAL_PWREx_ConfigSupply+0xb0>)
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d001      	beq.n	80061ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e040      	b.n	8006250 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	e03e      	b.n	8006250 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80061d2:	4b21      	ldr	r3, [pc, #132]	@ (8006258 <HAL_PWREx_ConfigSupply+0xb0>)
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80061da:	491f      	ldr	r1, [pc, #124]	@ (8006258 <HAL_PWREx_ConfigSupply+0xb0>)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4313      	orrs	r3, r2
 80061e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80061e2:	f7fb fe61 	bl	8001ea8 <HAL_GetTick>
 80061e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061e8:	e009      	b.n	80061fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80061ea:	f7fb fe5d 	bl	8001ea8 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061f8:	d901      	bls.n	80061fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e028      	b.n	8006250 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061fe:	4b16      	ldr	r3, [pc, #88]	@ (8006258 <HAL_PWREx_ConfigSupply+0xb0>)
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800620a:	d1ee      	bne.n	80061ea <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b1e      	cmp	r3, #30
 8006210:	d008      	beq.n	8006224 <HAL_PWREx_ConfigSupply+0x7c>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b2e      	cmp	r3, #46	@ 0x2e
 8006216:	d005      	beq.n	8006224 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b1d      	cmp	r3, #29
 800621c:	d002      	beq.n	8006224 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b2d      	cmp	r3, #45	@ 0x2d
 8006222:	d114      	bne.n	800624e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006224:	f7fb fe40 	bl	8001ea8 <HAL_GetTick>
 8006228:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800622a:	e009      	b.n	8006240 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800622c:	f7fb fe3c 	bl	8001ea8 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800623a:	d901      	bls.n	8006240 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e007      	b.n	8006250 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006240:	4b05      	ldr	r3, [pc, #20]	@ (8006258 <HAL_PWREx_ConfigSupply+0xb0>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800624c:	d1ee      	bne.n	800622c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	58024800 	.word	0x58024800

0800625c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08c      	sub	sp, #48	@ 0x30
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d102      	bne.n	8006270 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	f000 bc1f 	b.w	8006aae <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 80b3 	beq.w	80063e4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800627e:	4b95      	ldr	r3, [pc, #596]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006288:	4b92      	ldr	r3, [pc, #584]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 800628a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800628e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006290:	2b10      	cmp	r3, #16
 8006292:	d007      	beq.n	80062a4 <HAL_RCC_OscConfig+0x48>
 8006294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006296:	2b18      	cmp	r3, #24
 8006298:	d112      	bne.n	80062c0 <HAL_RCC_OscConfig+0x64>
 800629a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d10d      	bne.n	80062c0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062a4:	4b8b      	ldr	r3, [pc, #556]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8098 	beq.w	80063e2 <HAL_RCC_OscConfig+0x186>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f040 8093 	bne.w	80063e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e3f6      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062c8:	d106      	bne.n	80062d8 <HAL_RCC_OscConfig+0x7c>
 80062ca:	4b82      	ldr	r3, [pc, #520]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a81      	ldr	r2, [pc, #516]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 80062d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	e058      	b.n	800638a <HAL_RCC_OscConfig+0x12e>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d112      	bne.n	8006306 <HAL_RCC_OscConfig+0xaa>
 80062e0:	4b7c      	ldr	r3, [pc, #496]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a7b      	ldr	r2, [pc, #492]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 80062e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	4b79      	ldr	r3, [pc, #484]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a78      	ldr	r2, [pc, #480]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 80062f2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	4b76      	ldr	r3, [pc, #472]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a75      	ldr	r2, [pc, #468]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 80062fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	e041      	b.n	800638a <HAL_RCC_OscConfig+0x12e>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800630e:	d112      	bne.n	8006336 <HAL_RCC_OscConfig+0xda>
 8006310:	4b70      	ldr	r3, [pc, #448]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a6f      	ldr	r2, [pc, #444]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 8006316:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	4b6d      	ldr	r3, [pc, #436]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a6c      	ldr	r2, [pc, #432]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 8006322:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	4b6a      	ldr	r3, [pc, #424]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a69      	ldr	r2, [pc, #420]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 800632e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	e029      	b.n	800638a <HAL_RCC_OscConfig+0x12e>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800633e:	d112      	bne.n	8006366 <HAL_RCC_OscConfig+0x10a>
 8006340:	4b64      	ldr	r3, [pc, #400]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a63      	ldr	r2, [pc, #396]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 8006346:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	4b61      	ldr	r3, [pc, #388]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a60      	ldr	r2, [pc, #384]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 8006352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	4b5e      	ldr	r3, [pc, #376]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a5d      	ldr	r2, [pc, #372]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 800635e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	e011      	b.n	800638a <HAL_RCC_OscConfig+0x12e>
 8006366:	4b5b      	ldr	r3, [pc, #364]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a5a      	ldr	r2, [pc, #360]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 800636c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	4b58      	ldr	r3, [pc, #352]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a57      	ldr	r2, [pc, #348]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 8006378:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	4b55      	ldr	r3, [pc, #340]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a54      	ldr	r2, [pc, #336]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 8006384:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006388:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d013      	beq.n	80063ba <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006392:	f7fb fd89 	bl	8001ea8 <HAL_GetTick>
 8006396:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006398:	e008      	b.n	80063ac <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800639a:	f7fb fd85 	bl	8001ea8 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b64      	cmp	r3, #100	@ 0x64
 80063a6:	d901      	bls.n	80063ac <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e380      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063ac:	4b49      	ldr	r3, [pc, #292]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0f0      	beq.n	800639a <HAL_RCC_OscConfig+0x13e>
 80063b8:	e014      	b.n	80063e4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ba:	f7fb fd75 	bl	8001ea8 <HAL_GetTick>
 80063be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063c0:	e008      	b.n	80063d4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063c2:	f7fb fd71 	bl	8001ea8 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b64      	cmp	r3, #100	@ 0x64
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e36c      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063d4:	4b3f      	ldr	r3, [pc, #252]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1f0      	bne.n	80063c2 <HAL_RCC_OscConfig+0x166>
 80063e0:	e000      	b.n	80063e4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 808c 	beq.w	800650a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063f2:	4b38      	ldr	r3, [pc, #224]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063fa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063fc:	4b35      	ldr	r3, [pc, #212]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 80063fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006400:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d007      	beq.n	8006418 <HAL_RCC_OscConfig+0x1bc>
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	2b18      	cmp	r3, #24
 800640c:	d137      	bne.n	800647e <HAL_RCC_OscConfig+0x222>
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d132      	bne.n	800647e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006418:	4b2e      	ldr	r3, [pc, #184]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d005      	beq.n	8006430 <HAL_RCC_OscConfig+0x1d4>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e33e      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006430:	4b28      	ldr	r3, [pc, #160]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f023 0219 	bic.w	r2, r3, #25
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	4925      	ldr	r1, [pc, #148]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 800643e:	4313      	orrs	r3, r2
 8006440:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006442:	f7fb fd31 	bl	8001ea8 <HAL_GetTick>
 8006446:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006448:	e008      	b.n	800645c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800644a:	f7fb fd2d 	bl	8001ea8 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e328      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800645c:	4b1d      	ldr	r3, [pc, #116]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0f0      	beq.n	800644a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006468:	4b1a      	ldr	r3, [pc, #104]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	061b      	lsls	r3, r3, #24
 8006476:	4917      	ldr	r1, [pc, #92]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 8006478:	4313      	orrs	r3, r2
 800647a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800647c:	e045      	b.n	800650a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d028      	beq.n	80064d8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006486:	4b13      	ldr	r3, [pc, #76]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f023 0219 	bic.w	r2, r3, #25
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	4910      	ldr	r1, [pc, #64]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 8006494:	4313      	orrs	r3, r2
 8006496:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006498:	f7fb fd06 	bl	8001ea8 <HAL_GetTick>
 800649c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064a0:	f7fb fd02 	bl	8001ea8 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e2fd      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064b2:	4b08      	ldr	r3, [pc, #32]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0f0      	beq.n	80064a0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064be:	4b05      	ldr	r3, [pc, #20]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	061b      	lsls	r3, r3, #24
 80064cc:	4901      	ldr	r1, [pc, #4]	@ (80064d4 <HAL_RCC_OscConfig+0x278>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	604b      	str	r3, [r1, #4]
 80064d2:	e01a      	b.n	800650a <HAL_RCC_OscConfig+0x2ae>
 80064d4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064d8:	4b97      	ldr	r3, [pc, #604]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a96      	ldr	r2, [pc, #600]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 80064de:	f023 0301 	bic.w	r3, r3, #1
 80064e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e4:	f7fb fce0 	bl	8001ea8 <HAL_GetTick>
 80064e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064ea:	e008      	b.n	80064fe <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064ec:	f7fb fcdc 	bl	8001ea8 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e2d7      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064fe:	4b8e      	ldr	r3, [pc, #568]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1f0      	bne.n	80064ec <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0310 	and.w	r3, r3, #16
 8006512:	2b00      	cmp	r3, #0
 8006514:	d06a      	beq.n	80065ec <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006516:	4b88      	ldr	r3, [pc, #544]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800651e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006520:	4b85      	ldr	r3, [pc, #532]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 8006522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006524:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	2b08      	cmp	r3, #8
 800652a:	d007      	beq.n	800653c <HAL_RCC_OscConfig+0x2e0>
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	2b18      	cmp	r3, #24
 8006530:	d11b      	bne.n	800656a <HAL_RCC_OscConfig+0x30e>
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f003 0303 	and.w	r3, r3, #3
 8006538:	2b01      	cmp	r3, #1
 800653a:	d116      	bne.n	800656a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800653c:	4b7e      	ldr	r3, [pc, #504]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <HAL_RCC_OscConfig+0x2f8>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	2b80      	cmp	r3, #128	@ 0x80
 800654e:	d001      	beq.n	8006554 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e2ac      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006554:	4b78      	ldr	r3, [pc, #480]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	061b      	lsls	r3, r3, #24
 8006562:	4975      	ldr	r1, [pc, #468]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 8006564:	4313      	orrs	r3, r2
 8006566:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006568:	e040      	b.n	80065ec <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d023      	beq.n	80065ba <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006572:	4b71      	ldr	r3, [pc, #452]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a70      	ldr	r2, [pc, #448]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 8006578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800657c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800657e:	f7fb fc93 	bl	8001ea8 <HAL_GetTick>
 8006582:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006584:	e008      	b.n	8006598 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006586:	f7fb fc8f 	bl	8001ea8 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d901      	bls.n	8006598 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e28a      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006598:	4b67      	ldr	r3, [pc, #412]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d0f0      	beq.n	8006586 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065a4:	4b64      	ldr	r3, [pc, #400]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	061b      	lsls	r3, r3, #24
 80065b2:	4961      	ldr	r1, [pc, #388]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60cb      	str	r3, [r1, #12]
 80065b8:	e018      	b.n	80065ec <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80065ba:	4b5f      	ldr	r3, [pc, #380]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a5e      	ldr	r2, [pc, #376]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 80065c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c6:	f7fb fc6f 	bl	8001ea8 <HAL_GetTick>
 80065ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80065cc:	e008      	b.n	80065e0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80065ce:	f7fb fc6b 	bl	8001ea8 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d901      	bls.n	80065e0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e266      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80065e0:	4b55      	ldr	r3, [pc, #340]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1f0      	bne.n	80065ce <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0308 	and.w	r3, r3, #8
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d036      	beq.n	8006666 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d019      	beq.n	8006634 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006600:	4b4d      	ldr	r3, [pc, #308]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 8006602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006604:	4a4c      	ldr	r2, [pc, #304]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 8006606:	f043 0301 	orr.w	r3, r3, #1
 800660a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800660c:	f7fb fc4c 	bl	8001ea8 <HAL_GetTick>
 8006610:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006614:	f7fb fc48 	bl	8001ea8 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e243      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006626:	4b44      	ldr	r3, [pc, #272]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 8006628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d0f0      	beq.n	8006614 <HAL_RCC_OscConfig+0x3b8>
 8006632:	e018      	b.n	8006666 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006634:	4b40      	ldr	r3, [pc, #256]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 8006636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006638:	4a3f      	ldr	r2, [pc, #252]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 800663a:	f023 0301 	bic.w	r3, r3, #1
 800663e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006640:	f7fb fc32 	bl	8001ea8 <HAL_GetTick>
 8006644:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006646:	e008      	b.n	800665a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006648:	f7fb fc2e 	bl	8001ea8 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d901      	bls.n	800665a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e229      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800665a:	4b37      	ldr	r3, [pc, #220]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 800665c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1f0      	bne.n	8006648 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0320 	and.w	r3, r3, #32
 800666e:	2b00      	cmp	r3, #0
 8006670:	d036      	beq.n	80066e0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d019      	beq.n	80066ae <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800667a:	4b2f      	ldr	r3, [pc, #188]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a2e      	ldr	r2, [pc, #184]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 8006680:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006684:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006686:	f7fb fc0f 	bl	8001ea8 <HAL_GetTick>
 800668a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800668c:	e008      	b.n	80066a0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800668e:	f7fb fc0b 	bl	8001ea8 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d901      	bls.n	80066a0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e206      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066a0:	4b25      	ldr	r3, [pc, #148]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0f0      	beq.n	800668e <HAL_RCC_OscConfig+0x432>
 80066ac:	e018      	b.n	80066e0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066ae:	4b22      	ldr	r3, [pc, #136]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a21      	ldr	r2, [pc, #132]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 80066b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066ba:	f7fb fbf5 	bl	8001ea8 <HAL_GetTick>
 80066be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066c0:	e008      	b.n	80066d4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066c2:	f7fb fbf1 	bl	8001ea8 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e1ec      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066d4:	4b18      	ldr	r3, [pc, #96]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1f0      	bne.n	80066c2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 80af 	beq.w	800684c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80066ee:	4b13      	ldr	r3, [pc, #76]	@ (800673c <HAL_RCC_OscConfig+0x4e0>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a12      	ldr	r2, [pc, #72]	@ (800673c <HAL_RCC_OscConfig+0x4e0>)
 80066f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066fa:	f7fb fbd5 	bl	8001ea8 <HAL_GetTick>
 80066fe:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006702:	f7fb fbd1 	bl	8001ea8 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b64      	cmp	r3, #100	@ 0x64
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e1cc      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006714:	4b09      	ldr	r3, [pc, #36]	@ (800673c <HAL_RCC_OscConfig+0x4e0>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0f0      	beq.n	8006702 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d10b      	bne.n	8006740 <HAL_RCC_OscConfig+0x4e4>
 8006728:	4b03      	ldr	r3, [pc, #12]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 800672a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672c:	4a02      	ldr	r2, [pc, #8]	@ (8006738 <HAL_RCC_OscConfig+0x4dc>)
 800672e:	f043 0301 	orr.w	r3, r3, #1
 8006732:	6713      	str	r3, [r2, #112]	@ 0x70
 8006734:	e05b      	b.n	80067ee <HAL_RCC_OscConfig+0x592>
 8006736:	bf00      	nop
 8006738:	58024400 	.word	0x58024400
 800673c:	58024800 	.word	0x58024800
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d112      	bne.n	800676e <HAL_RCC_OscConfig+0x512>
 8006748:	4b9d      	ldr	r3, [pc, #628]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 800674a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800674c:	4a9c      	ldr	r2, [pc, #624]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 800674e:	f023 0301 	bic.w	r3, r3, #1
 8006752:	6713      	str	r3, [r2, #112]	@ 0x70
 8006754:	4b9a      	ldr	r3, [pc, #616]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006758:	4a99      	ldr	r2, [pc, #612]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 800675a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800675e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006760:	4b97      	ldr	r3, [pc, #604]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006764:	4a96      	ldr	r2, [pc, #600]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006766:	f023 0304 	bic.w	r3, r3, #4
 800676a:	6713      	str	r3, [r2, #112]	@ 0x70
 800676c:	e03f      	b.n	80067ee <HAL_RCC_OscConfig+0x592>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	2b05      	cmp	r3, #5
 8006774:	d112      	bne.n	800679c <HAL_RCC_OscConfig+0x540>
 8006776:	4b92      	ldr	r3, [pc, #584]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800677a:	4a91      	ldr	r2, [pc, #580]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 800677c:	f043 0304 	orr.w	r3, r3, #4
 8006780:	6713      	str	r3, [r2, #112]	@ 0x70
 8006782:	4b8f      	ldr	r3, [pc, #572]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006786:	4a8e      	ldr	r2, [pc, #568]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006788:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800678c:	6713      	str	r3, [r2, #112]	@ 0x70
 800678e:	4b8c      	ldr	r3, [pc, #560]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006792:	4a8b      	ldr	r2, [pc, #556]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006794:	f043 0301 	orr.w	r3, r3, #1
 8006798:	6713      	str	r3, [r2, #112]	@ 0x70
 800679a:	e028      	b.n	80067ee <HAL_RCC_OscConfig+0x592>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	2b85      	cmp	r3, #133	@ 0x85
 80067a2:	d112      	bne.n	80067ca <HAL_RCC_OscConfig+0x56e>
 80067a4:	4b86      	ldr	r3, [pc, #536]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 80067a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a8:	4a85      	ldr	r2, [pc, #532]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 80067aa:	f043 0304 	orr.w	r3, r3, #4
 80067ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80067b0:	4b83      	ldr	r3, [pc, #524]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 80067b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067b4:	4a82      	ldr	r2, [pc, #520]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 80067b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80067bc:	4b80      	ldr	r3, [pc, #512]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 80067be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c0:	4a7f      	ldr	r2, [pc, #508]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 80067c2:	f043 0301 	orr.w	r3, r3, #1
 80067c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80067c8:	e011      	b.n	80067ee <HAL_RCC_OscConfig+0x592>
 80067ca:	4b7d      	ldr	r3, [pc, #500]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 80067cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ce:	4a7c      	ldr	r2, [pc, #496]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 80067d0:	f023 0301 	bic.w	r3, r3, #1
 80067d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80067d6:	4b7a      	ldr	r3, [pc, #488]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 80067d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067da:	4a79      	ldr	r2, [pc, #484]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 80067dc:	f023 0304 	bic.w	r3, r3, #4
 80067e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80067e2:	4b77      	ldr	r3, [pc, #476]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 80067e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e6:	4a76      	ldr	r2, [pc, #472]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 80067e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067ec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d015      	beq.n	8006822 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f6:	f7fb fb57 	bl	8001ea8 <HAL_GetTick>
 80067fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067fc:	e00a      	b.n	8006814 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067fe:	f7fb fb53 	bl	8001ea8 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800680c:	4293      	cmp	r3, r2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e14c      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006814:	4b6a      	ldr	r3, [pc, #424]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0ee      	beq.n	80067fe <HAL_RCC_OscConfig+0x5a2>
 8006820:	e014      	b.n	800684c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006822:	f7fb fb41 	bl	8001ea8 <HAL_GetTick>
 8006826:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006828:	e00a      	b.n	8006840 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800682a:	f7fb fb3d 	bl	8001ea8 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006838:	4293      	cmp	r3, r2
 800683a:	d901      	bls.n	8006840 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e136      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006840:	4b5f      	ldr	r3, [pc, #380]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1ee      	bne.n	800682a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 812b 	beq.w	8006aac <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006856:	4b5a      	ldr	r3, [pc, #360]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800685e:	2b18      	cmp	r3, #24
 8006860:	f000 80bb 	beq.w	80069da <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006868:	2b02      	cmp	r3, #2
 800686a:	f040 8095 	bne.w	8006998 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800686e:	4b54      	ldr	r3, [pc, #336]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a53      	ldr	r2, [pc, #332]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006874:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800687a:	f7fb fb15 	bl	8001ea8 <HAL_GetTick>
 800687e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006882:	f7fb fb11 	bl	8001ea8 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e10c      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006894:	4b4a      	ldr	r3, [pc, #296]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1f0      	bne.n	8006882 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068a0:	4b47      	ldr	r3, [pc, #284]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 80068a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068a4:	4b47      	ldr	r3, [pc, #284]	@ (80069c4 <HAL_RCC_OscConfig+0x768>)
 80068a6:	4013      	ands	r3, r2
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80068b0:	0112      	lsls	r2, r2, #4
 80068b2:	430a      	orrs	r2, r1
 80068b4:	4942      	ldr	r1, [pc, #264]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	628b      	str	r3, [r1, #40]	@ 0x28
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068be:	3b01      	subs	r3, #1
 80068c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068c8:	3b01      	subs	r3, #1
 80068ca:	025b      	lsls	r3, r3, #9
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	431a      	orrs	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d4:	3b01      	subs	r3, #1
 80068d6:	041b      	lsls	r3, r3, #16
 80068d8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e2:	3b01      	subs	r3, #1
 80068e4:	061b      	lsls	r3, r3, #24
 80068e6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80068ea:	4935      	ldr	r1, [pc, #212]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80068f0:	4b33      	ldr	r3, [pc, #204]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 80068f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f4:	4a32      	ldr	r2, [pc, #200]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 80068f6:	f023 0301 	bic.w	r3, r3, #1
 80068fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80068fc:	4b30      	ldr	r3, [pc, #192]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 80068fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006900:	4b31      	ldr	r3, [pc, #196]	@ (80069c8 <HAL_RCC_OscConfig+0x76c>)
 8006902:	4013      	ands	r3, r2
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006908:	00d2      	lsls	r2, r2, #3
 800690a:	492d      	ldr	r1, [pc, #180]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 800690c:	4313      	orrs	r3, r2
 800690e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006910:	4b2b      	ldr	r3, [pc, #172]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006914:	f023 020c 	bic.w	r2, r3, #12
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691c:	4928      	ldr	r1, [pc, #160]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 800691e:	4313      	orrs	r3, r2
 8006920:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006922:	4b27      	ldr	r3, [pc, #156]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006926:	f023 0202 	bic.w	r2, r3, #2
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800692e:	4924      	ldr	r1, [pc, #144]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006930:	4313      	orrs	r3, r2
 8006932:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006934:	4b22      	ldr	r3, [pc, #136]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006938:	4a21      	ldr	r2, [pc, #132]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 800693a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800693e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006940:	4b1f      	ldr	r3, [pc, #124]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006944:	4a1e      	ldr	r2, [pc, #120]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800694a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800694c:	4b1c      	ldr	r3, [pc, #112]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 800694e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006950:	4a1b      	ldr	r2, [pc, #108]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006952:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006956:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006958:	4b19      	ldr	r3, [pc, #100]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 800695a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695c:	4a18      	ldr	r2, [pc, #96]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 800695e:	f043 0301 	orr.w	r3, r3, #1
 8006962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006964:	4b16      	ldr	r3, [pc, #88]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a15      	ldr	r2, [pc, #84]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 800696a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800696e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006970:	f7fb fa9a 	bl	8001ea8 <HAL_GetTick>
 8006974:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006976:	e008      	b.n	800698a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006978:	f7fb fa96 	bl	8001ea8 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b02      	cmp	r3, #2
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e091      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800698a:	4b0d      	ldr	r3, [pc, #52]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d0f0      	beq.n	8006978 <HAL_RCC_OscConfig+0x71c>
 8006996:	e089      	b.n	8006aac <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006998:	4b09      	ldr	r3, [pc, #36]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a08      	ldr	r2, [pc, #32]	@ (80069c0 <HAL_RCC_OscConfig+0x764>)
 800699e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a4:	f7fb fa80 	bl	8001ea8 <HAL_GetTick>
 80069a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069aa:	e00f      	b.n	80069cc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ac:	f7fb fa7c 	bl	8001ea8 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d908      	bls.n	80069cc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e077      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
 80069be:	bf00      	nop
 80069c0:	58024400 	.word	0x58024400
 80069c4:	fffffc0c 	.word	0xfffffc0c
 80069c8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069cc:	4b3a      	ldr	r3, [pc, #232]	@ (8006ab8 <HAL_RCC_OscConfig+0x85c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1e9      	bne.n	80069ac <HAL_RCC_OscConfig+0x750>
 80069d8:	e068      	b.n	8006aac <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80069da:	4b37      	ldr	r3, [pc, #220]	@ (8006ab8 <HAL_RCC_OscConfig+0x85c>)
 80069dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069de:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80069e0:	4b35      	ldr	r3, [pc, #212]	@ (8006ab8 <HAL_RCC_OscConfig+0x85c>)
 80069e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d031      	beq.n	8006a52 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f003 0203 	and.w	r2, r3, #3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d12a      	bne.n	8006a52 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	091b      	lsrs	r3, r3, #4
 8006a00:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d122      	bne.n	8006a52 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a16:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d11a      	bne.n	8006a52 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	0a5b      	lsrs	r3, r3, #9
 8006a20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a28:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d111      	bne.n	8006a52 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	0c1b      	lsrs	r3, r3, #16
 8006a32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d108      	bne.n	8006a52 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	0e1b      	lsrs	r3, r3, #24
 8006a44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d001      	beq.n	8006a56 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e02b      	b.n	8006aae <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006a56:	4b18      	ldr	r3, [pc, #96]	@ (8006ab8 <HAL_RCC_OscConfig+0x85c>)
 8006a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a5a:	08db      	lsrs	r3, r3, #3
 8006a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a60:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d01f      	beq.n	8006aac <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006a6c:	4b12      	ldr	r3, [pc, #72]	@ (8006ab8 <HAL_RCC_OscConfig+0x85c>)
 8006a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a70:	4a11      	ldr	r2, [pc, #68]	@ (8006ab8 <HAL_RCC_OscConfig+0x85c>)
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a78:	f7fb fa16 	bl	8001ea8 <HAL_GetTick>
 8006a7c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006a7e:	bf00      	nop
 8006a80:	f7fb fa12 	bl	8001ea8 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d0f9      	beq.n	8006a80 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab8 <HAL_RCC_OscConfig+0x85c>)
 8006a8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a90:	4b0a      	ldr	r3, [pc, #40]	@ (8006abc <HAL_RCC_OscConfig+0x860>)
 8006a92:	4013      	ands	r3, r2
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a98:	00d2      	lsls	r2, r2, #3
 8006a9a:	4907      	ldr	r1, [pc, #28]	@ (8006ab8 <HAL_RCC_OscConfig+0x85c>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006aa0:	4b05      	ldr	r3, [pc, #20]	@ (8006ab8 <HAL_RCC_OscConfig+0x85c>)
 8006aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa4:	4a04      	ldr	r2, [pc, #16]	@ (8006ab8 <HAL_RCC_OscConfig+0x85c>)
 8006aa6:	f043 0301 	orr.w	r3, r3, #1
 8006aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3730      	adds	r7, #48	@ 0x30
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	58024400 	.word	0x58024400
 8006abc:	ffff0007 	.word	0xffff0007

08006ac0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e19c      	b.n	8006e0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ad4:	4b8a      	ldr	r3, [pc, #552]	@ (8006d00 <HAL_RCC_ClockConfig+0x240>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 030f 	and.w	r3, r3, #15
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d910      	bls.n	8006b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ae2:	4b87      	ldr	r3, [pc, #540]	@ (8006d00 <HAL_RCC_ClockConfig+0x240>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f023 020f 	bic.w	r2, r3, #15
 8006aea:	4985      	ldr	r1, [pc, #532]	@ (8006d00 <HAL_RCC_ClockConfig+0x240>)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006af2:	4b83      	ldr	r3, [pc, #524]	@ (8006d00 <HAL_RCC_ClockConfig+0x240>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 030f 	and.w	r3, r3, #15
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d001      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e184      	b.n	8006e0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d010      	beq.n	8006b32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691a      	ldr	r2, [r3, #16]
 8006b14:	4b7b      	ldr	r3, [pc, #492]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d908      	bls.n	8006b32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b20:	4b78      	ldr	r3, [pc, #480]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	4975      	ldr	r1, [pc, #468]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d010      	beq.n	8006b60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	695a      	ldr	r2, [r3, #20]
 8006b42:	4b70      	ldr	r3, [pc, #448]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d908      	bls.n	8006b60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b4e:	4b6d      	ldr	r3, [pc, #436]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	496a      	ldr	r1, [pc, #424]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0310 	and.w	r3, r3, #16
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d010      	beq.n	8006b8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699a      	ldr	r2, [r3, #24]
 8006b70:	4b64      	ldr	r3, [pc, #400]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d908      	bls.n	8006b8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b7c:	4b61      	ldr	r3, [pc, #388]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	495e      	ldr	r1, [pc, #376]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0320 	and.w	r3, r3, #32
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d010      	beq.n	8006bbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	69da      	ldr	r2, [r3, #28]
 8006b9e:	4b59      	ldr	r3, [pc, #356]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d908      	bls.n	8006bbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006baa:	4b56      	ldr	r3, [pc, #344]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	4953      	ldr	r1, [pc, #332]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d010      	beq.n	8006bea <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68da      	ldr	r2, [r3, #12]
 8006bcc:	4b4d      	ldr	r3, [pc, #308]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	f003 030f 	and.w	r3, r3, #15
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d908      	bls.n	8006bea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bd8:	4b4a      	ldr	r3, [pc, #296]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	f023 020f 	bic.w	r2, r3, #15
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	4947      	ldr	r1, [pc, #284]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d055      	beq.n	8006ca2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006bf6:	4b43      	ldr	r3, [pc, #268]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	4940      	ldr	r1, [pc, #256]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d107      	bne.n	8006c20 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c10:	4b3c      	ldr	r3, [pc, #240]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d121      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e0f6      	b.n	8006e0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d107      	bne.n	8006c38 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c28:	4b36      	ldr	r3, [pc, #216]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d115      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e0ea      	b.n	8006e0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d107      	bne.n	8006c50 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c40:	4b30      	ldr	r3, [pc, #192]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d109      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e0de      	b.n	8006e0e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c50:	4b2c      	ldr	r3, [pc, #176]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e0d6      	b.n	8006e0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c60:	4b28      	ldr	r3, [pc, #160]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	f023 0207 	bic.w	r2, r3, #7
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	4925      	ldr	r1, [pc, #148]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c72:	f7fb f919 	bl	8001ea8 <HAL_GetTick>
 8006c76:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c78:	e00a      	b.n	8006c90 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c7a:	f7fb f915 	bl	8001ea8 <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e0be      	b.n	8006e0e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c90:	4b1c      	ldr	r3, [pc, #112]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	00db      	lsls	r3, r3, #3
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d1eb      	bne.n	8006c7a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d010      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	4b14      	ldr	r3, [pc, #80]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d208      	bcs.n	8006cd0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cbe:	4b11      	ldr	r3, [pc, #68]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	f023 020f 	bic.w	r2, r3, #15
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	490e      	ldr	r1, [pc, #56]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006d00 <HAL_RCC_ClockConfig+0x240>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 030f 	and.w	r3, r3, #15
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d214      	bcs.n	8006d08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cde:	4b08      	ldr	r3, [pc, #32]	@ (8006d00 <HAL_RCC_ClockConfig+0x240>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f023 020f 	bic.w	r2, r3, #15
 8006ce6:	4906      	ldr	r1, [pc, #24]	@ (8006d00 <HAL_RCC_ClockConfig+0x240>)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cee:	4b04      	ldr	r3, [pc, #16]	@ (8006d00 <HAL_RCC_ClockConfig+0x240>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 030f 	and.w	r3, r3, #15
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d005      	beq.n	8006d08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e086      	b.n	8006e0e <HAL_RCC_ClockConfig+0x34e>
 8006d00:	52002000 	.word	0x52002000
 8006d04:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d010      	beq.n	8006d36 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691a      	ldr	r2, [r3, #16]
 8006d18:	4b3f      	ldr	r3, [pc, #252]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d208      	bcs.n	8006d36 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d24:	4b3c      	ldr	r3, [pc, #240]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	4939      	ldr	r1, [pc, #228]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d010      	beq.n	8006d64 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695a      	ldr	r2, [r3, #20]
 8006d46:	4b34      	ldr	r3, [pc, #208]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d208      	bcs.n	8006d64 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d52:	4b31      	ldr	r3, [pc, #196]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	492e      	ldr	r1, [pc, #184]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0310 	and.w	r3, r3, #16
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d010      	beq.n	8006d92 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	699a      	ldr	r2, [r3, #24]
 8006d74:	4b28      	ldr	r3, [pc, #160]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d208      	bcs.n	8006d92 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d80:	4b25      	ldr	r3, [pc, #148]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	4922      	ldr	r1, [pc, #136]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d010      	beq.n	8006dc0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	69da      	ldr	r2, [r3, #28]
 8006da2:	4b1d      	ldr	r3, [pc, #116]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d208      	bcs.n	8006dc0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006dae:	4b1a      	ldr	r3, [pc, #104]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	4917      	ldr	r1, [pc, #92]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006dc0:	f000 f834 	bl	8006e2c <HAL_RCC_GetSysClockFreq>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	4b14      	ldr	r3, [pc, #80]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	0a1b      	lsrs	r3, r3, #8
 8006dcc:	f003 030f 	and.w	r3, r3, #15
 8006dd0:	4912      	ldr	r1, [pc, #72]	@ (8006e1c <HAL_RCC_ClockConfig+0x35c>)
 8006dd2:	5ccb      	ldrb	r3, [r1, r3]
 8006dd4:	f003 031f 	and.w	r3, r3, #31
 8006dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ddc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006dde:	4b0e      	ldr	r3, [pc, #56]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	f003 030f 	and.w	r3, r3, #15
 8006de6:	4a0d      	ldr	r2, [pc, #52]	@ (8006e1c <HAL_RCC_ClockConfig+0x35c>)
 8006de8:	5cd3      	ldrb	r3, [r2, r3]
 8006dea:	f003 031f 	and.w	r3, r3, #31
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	fa22 f303 	lsr.w	r3, r2, r3
 8006df4:	4a0a      	ldr	r2, [pc, #40]	@ (8006e20 <HAL_RCC_ClockConfig+0x360>)
 8006df6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006df8:	4a0a      	ldr	r2, [pc, #40]	@ (8006e24 <HAL_RCC_ClockConfig+0x364>)
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8006e28 <HAL_RCC_ClockConfig+0x368>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fb f806 	bl	8001e14 <HAL_InitTick>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	58024400 	.word	0x58024400
 8006e1c:	0800e8bc 	.word	0x0800e8bc
 8006e20:	24000004 	.word	0x24000004
 8006e24:	24000000 	.word	0x24000000
 8006e28:	24000008 	.word	0x24000008

08006e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b089      	sub	sp, #36	@ 0x24
 8006e30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e32:	4bb3      	ldr	r3, [pc, #716]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e3a:	2b18      	cmp	r3, #24
 8006e3c:	f200 8155 	bhi.w	80070ea <HAL_RCC_GetSysClockFreq+0x2be>
 8006e40:	a201      	add	r2, pc, #4	@ (adr r2, 8006e48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e46:	bf00      	nop
 8006e48:	08006ead 	.word	0x08006ead
 8006e4c:	080070eb 	.word	0x080070eb
 8006e50:	080070eb 	.word	0x080070eb
 8006e54:	080070eb 	.word	0x080070eb
 8006e58:	080070eb 	.word	0x080070eb
 8006e5c:	080070eb 	.word	0x080070eb
 8006e60:	080070eb 	.word	0x080070eb
 8006e64:	080070eb 	.word	0x080070eb
 8006e68:	08006ed3 	.word	0x08006ed3
 8006e6c:	080070eb 	.word	0x080070eb
 8006e70:	080070eb 	.word	0x080070eb
 8006e74:	080070eb 	.word	0x080070eb
 8006e78:	080070eb 	.word	0x080070eb
 8006e7c:	080070eb 	.word	0x080070eb
 8006e80:	080070eb 	.word	0x080070eb
 8006e84:	080070eb 	.word	0x080070eb
 8006e88:	08006ed9 	.word	0x08006ed9
 8006e8c:	080070eb 	.word	0x080070eb
 8006e90:	080070eb 	.word	0x080070eb
 8006e94:	080070eb 	.word	0x080070eb
 8006e98:	080070eb 	.word	0x080070eb
 8006e9c:	080070eb 	.word	0x080070eb
 8006ea0:	080070eb 	.word	0x080070eb
 8006ea4:	080070eb 	.word	0x080070eb
 8006ea8:	08006edf 	.word	0x08006edf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006eac:	4b94      	ldr	r3, [pc, #592]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0320 	and.w	r3, r3, #32
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d009      	beq.n	8006ecc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006eb8:	4b91      	ldr	r3, [pc, #580]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	08db      	lsrs	r3, r3, #3
 8006ebe:	f003 0303 	and.w	r3, r3, #3
 8006ec2:	4a90      	ldr	r2, [pc, #576]	@ (8007104 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006eca:	e111      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ecc:	4b8d      	ldr	r3, [pc, #564]	@ (8007104 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ece:	61bb      	str	r3, [r7, #24]
      break;
 8006ed0:	e10e      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006ed2:	4b8d      	ldr	r3, [pc, #564]	@ (8007108 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ed4:	61bb      	str	r3, [r7, #24]
      break;
 8006ed6:	e10b      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006ed8:	4b8c      	ldr	r3, [pc, #560]	@ (800710c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006eda:	61bb      	str	r3, [r7, #24]
      break;
 8006edc:	e108      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ede:	4b88      	ldr	r3, [pc, #544]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee2:	f003 0303 	and.w	r3, r3, #3
 8006ee6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006ee8:	4b85      	ldr	r3, [pc, #532]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eec:	091b      	lsrs	r3, r3, #4
 8006eee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ef2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006ef4:	4b82      	ldr	r3, [pc, #520]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006efe:	4b80      	ldr	r3, [pc, #512]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f02:	08db      	lsrs	r3, r3, #3
 8006f04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	fb02 f303 	mul.w	r3, r2, r3
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 80e1 	beq.w	80070e4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	f000 8083 	beq.w	8007030 <HAL_RCC_GetSysClockFreq+0x204>
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	f200 80a1 	bhi.w	8007074 <HAL_RCC_GetSysClockFreq+0x248>
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d003      	beq.n	8006f40 <HAL_RCC_GetSysClockFreq+0x114>
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d056      	beq.n	8006fec <HAL_RCC_GetSysClockFreq+0x1c0>
 8006f3e:	e099      	b.n	8007074 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f40:	4b6f      	ldr	r3, [pc, #444]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0320 	and.w	r3, r3, #32
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d02d      	beq.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f4c:	4b6c      	ldr	r3, [pc, #432]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	08db      	lsrs	r3, r3, #3
 8006f52:	f003 0303 	and.w	r3, r3, #3
 8006f56:	4a6b      	ldr	r2, [pc, #428]	@ (8007104 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f58:	fa22 f303 	lsr.w	r3, r2, r3
 8006f5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	ee07 3a90 	vmov	s15, r3
 8006f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f76:	4b62      	ldr	r3, [pc, #392]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f8a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007110 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006fa6:	e087      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	ee07 3a90 	vmov	s15, r3
 8006fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007114 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fba:	4b51      	ldr	r3, [pc, #324]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc2:	ee07 3a90 	vmov	s15, r3
 8006fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007110 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006fea:	e065      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007118 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffe:	4b40      	ldr	r3, [pc, #256]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007012:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007110 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800701a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800702e:	e043      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800711c <HAL_RCC_GetSysClockFreq+0x2f0>
 800703e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007042:	4b2f      	ldr	r3, [pc, #188]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007052:	ed97 6a02 	vldr	s12, [r7, #8]
 8007056:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007110 <HAL_RCC_GetSysClockFreq+0x2e4>
 800705a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800706a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007072:	e021      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007118 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007086:	4b1e      	ldr	r3, [pc, #120]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800708a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007096:	ed97 6a02 	vldr	s12, [r7, #8]
 800709a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007110 <HAL_RCC_GetSysClockFreq+0x2e4>
 800709e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80070b8:	4b11      	ldr	r3, [pc, #68]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070bc:	0a5b      	lsrs	r3, r3, #9
 80070be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070c2:	3301      	adds	r3, #1
 80070c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	ee07 3a90 	vmov	s15, r3
 80070cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80070d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80070d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070dc:	ee17 3a90 	vmov	r3, s15
 80070e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80070e2:	e005      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	61bb      	str	r3, [r7, #24]
      break;
 80070e8:	e002      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80070ea:	4b07      	ldr	r3, [pc, #28]	@ (8007108 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80070ec:	61bb      	str	r3, [r7, #24]
      break;
 80070ee:	bf00      	nop
  }

  return sysclockfreq;
 80070f0:	69bb      	ldr	r3, [r7, #24]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3724      	adds	r7, #36	@ 0x24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	58024400 	.word	0x58024400
 8007104:	03d09000 	.word	0x03d09000
 8007108:	003d0900 	.word	0x003d0900
 800710c:	007a1200 	.word	0x007a1200
 8007110:	46000000 	.word	0x46000000
 8007114:	4c742400 	.word	0x4c742400
 8007118:	4a742400 	.word	0x4a742400
 800711c:	4af42400 	.word	0x4af42400

08007120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007126:	f7ff fe81 	bl	8006e2c <HAL_RCC_GetSysClockFreq>
 800712a:	4602      	mov	r2, r0
 800712c:	4b10      	ldr	r3, [pc, #64]	@ (8007170 <HAL_RCC_GetHCLKFreq+0x50>)
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	0a1b      	lsrs	r3, r3, #8
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	490f      	ldr	r1, [pc, #60]	@ (8007174 <HAL_RCC_GetHCLKFreq+0x54>)
 8007138:	5ccb      	ldrb	r3, [r1, r3]
 800713a:	f003 031f 	and.w	r3, r3, #31
 800713e:	fa22 f303 	lsr.w	r3, r2, r3
 8007142:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007144:	4b0a      	ldr	r3, [pc, #40]	@ (8007170 <HAL_RCC_GetHCLKFreq+0x50>)
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	f003 030f 	and.w	r3, r3, #15
 800714c:	4a09      	ldr	r2, [pc, #36]	@ (8007174 <HAL_RCC_GetHCLKFreq+0x54>)
 800714e:	5cd3      	ldrb	r3, [r2, r3]
 8007150:	f003 031f 	and.w	r3, r3, #31
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	fa22 f303 	lsr.w	r3, r2, r3
 800715a:	4a07      	ldr	r2, [pc, #28]	@ (8007178 <HAL_RCC_GetHCLKFreq+0x58>)
 800715c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800715e:	4a07      	ldr	r2, [pc, #28]	@ (800717c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007164:	4b04      	ldr	r3, [pc, #16]	@ (8007178 <HAL_RCC_GetHCLKFreq+0x58>)
 8007166:	681b      	ldr	r3, [r3, #0]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	58024400 	.word	0x58024400
 8007174:	0800e8bc 	.word	0x0800e8bc
 8007178:	24000004 	.word	0x24000004
 800717c:	24000000 	.word	0x24000000

08007180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007184:	f7ff ffcc 	bl	8007120 <HAL_RCC_GetHCLKFreq>
 8007188:	4602      	mov	r2, r0
 800718a:	4b06      	ldr	r3, [pc, #24]	@ (80071a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	091b      	lsrs	r3, r3, #4
 8007190:	f003 0307 	and.w	r3, r3, #7
 8007194:	4904      	ldr	r1, [pc, #16]	@ (80071a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007196:	5ccb      	ldrb	r3, [r1, r3]
 8007198:	f003 031f 	and.w	r3, r3, #31
 800719c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	58024400 	.word	0x58024400
 80071a8:	0800e8bc 	.word	0x0800e8bc

080071ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80071b0:	f7ff ffb6 	bl	8007120 <HAL_RCC_GetHCLKFreq>
 80071b4:	4602      	mov	r2, r0
 80071b6:	4b06      	ldr	r3, [pc, #24]	@ (80071d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	0a1b      	lsrs	r3, r3, #8
 80071bc:	f003 0307 	and.w	r3, r3, #7
 80071c0:	4904      	ldr	r1, [pc, #16]	@ (80071d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80071c2:	5ccb      	ldrb	r3, [r1, r3]
 80071c4:	f003 031f 	and.w	r3, r3, #31
 80071c8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	58024400 	.word	0x58024400
 80071d4:	0800e8bc 	.word	0x0800e8bc

080071d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071dc:	b0c8      	sub	sp, #288	@ 0x120
 80071de:	af00      	add	r7, sp, #0
 80071e0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80071e4:	2300      	movs	r3, #0
 80071e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80071ea:	2300      	movs	r3, #0
 80071ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80071f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80071fc:	2500      	movs	r5, #0
 80071fe:	ea54 0305 	orrs.w	r3, r4, r5
 8007202:	d049      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007204:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800720a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800720e:	d02f      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007210:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007214:	d828      	bhi.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007216:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800721a:	d01a      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800721c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007220:	d822      	bhi.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007226:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800722a:	d007      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800722c:	e01c      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800722e:	4ba7      	ldr	r3, [pc, #668]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007232:	4aa6      	ldr	r2, [pc, #664]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007238:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800723a:	e01a      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800723c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007240:	3308      	adds	r3, #8
 8007242:	2102      	movs	r1, #2
 8007244:	4618      	mov	r0, r3
 8007246:	f001 fc43 	bl	8008ad0 <RCCEx_PLL2_Config>
 800724a:	4603      	mov	r3, r0
 800724c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007250:	e00f      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007252:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007256:	3328      	adds	r3, #40	@ 0x28
 8007258:	2102      	movs	r1, #2
 800725a:	4618      	mov	r0, r3
 800725c:	f001 fcea 	bl	8008c34 <RCCEx_PLL3_Config>
 8007260:	4603      	mov	r3, r0
 8007262:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007266:	e004      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800726e:	e000      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007270:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007272:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10a      	bne.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800727a:	4b94      	ldr	r3, [pc, #592]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800727c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800727e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007282:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007288:	4a90      	ldr	r2, [pc, #576]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800728a:	430b      	orrs	r3, r1
 800728c:	6513      	str	r3, [r2, #80]	@ 0x50
 800728e:	e003      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007290:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007294:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007298:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80072a4:	f04f 0900 	mov.w	r9, #0
 80072a8:	ea58 0309 	orrs.w	r3, r8, r9
 80072ac:	d047      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80072ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d82a      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80072b8:	a201      	add	r2, pc, #4	@ (adr r2, 80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80072ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072be:	bf00      	nop
 80072c0:	080072d5 	.word	0x080072d5
 80072c4:	080072e3 	.word	0x080072e3
 80072c8:	080072f9 	.word	0x080072f9
 80072cc:	08007317 	.word	0x08007317
 80072d0:	08007317 	.word	0x08007317
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072d4:	4b7d      	ldr	r3, [pc, #500]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d8:	4a7c      	ldr	r2, [pc, #496]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072e0:	e01a      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072e6:	3308      	adds	r3, #8
 80072e8:	2100      	movs	r1, #0
 80072ea:	4618      	mov	r0, r3
 80072ec:	f001 fbf0 	bl	8008ad0 <RCCEx_PLL2_Config>
 80072f0:	4603      	mov	r3, r0
 80072f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072f6:	e00f      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072fc:	3328      	adds	r3, #40	@ 0x28
 80072fe:	2100      	movs	r1, #0
 8007300:	4618      	mov	r0, r3
 8007302:	f001 fc97 	bl	8008c34 <RCCEx_PLL3_Config>
 8007306:	4603      	mov	r3, r0
 8007308:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800730c:	e004      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007314:	e000      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007318:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10a      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007320:	4b6a      	ldr	r3, [pc, #424]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007324:	f023 0107 	bic.w	r1, r3, #7
 8007328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800732c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800732e:	4a67      	ldr	r2, [pc, #412]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007330:	430b      	orrs	r3, r1
 8007332:	6513      	str	r3, [r2, #80]	@ 0x50
 8007334:	e003      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007336:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800733a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800733e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800734a:	f04f 0b00 	mov.w	fp, #0
 800734e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007352:	d054      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800735a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800735e:	d036      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007360:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007364:	d82f      	bhi.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800736a:	d032      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800736c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007370:	d829      	bhi.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007372:	2bc0      	cmp	r3, #192	@ 0xc0
 8007374:	d02f      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007376:	2bc0      	cmp	r3, #192	@ 0xc0
 8007378:	d825      	bhi.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800737a:	2b80      	cmp	r3, #128	@ 0x80
 800737c:	d018      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800737e:	2b80      	cmp	r3, #128	@ 0x80
 8007380:	d821      	bhi.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007386:	2b40      	cmp	r3, #64	@ 0x40
 8007388:	d007      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800738a:	e01c      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800738c:	4b4f      	ldr	r3, [pc, #316]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800738e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007390:	4a4e      	ldr	r2, [pc, #312]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007396:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007398:	e01e      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800739a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800739e:	3308      	adds	r3, #8
 80073a0:	2100      	movs	r1, #0
 80073a2:	4618      	mov	r0, r3
 80073a4:	f001 fb94 	bl	8008ad0 <RCCEx_PLL2_Config>
 80073a8:	4603      	mov	r3, r0
 80073aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80073ae:	e013      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073b4:	3328      	adds	r3, #40	@ 0x28
 80073b6:	2100      	movs	r1, #0
 80073b8:	4618      	mov	r0, r3
 80073ba:	f001 fc3b 	bl	8008c34 <RCCEx_PLL3_Config>
 80073be:	4603      	mov	r3, r0
 80073c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80073c4:	e008      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80073cc:	e004      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80073ce:	bf00      	nop
 80073d0:	e002      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80073d2:	bf00      	nop
 80073d4:	e000      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80073d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10a      	bne.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80073e0:	4b3a      	ldr	r3, [pc, #232]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073e4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80073e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073ee:	4a37      	ldr	r2, [pc, #220]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073f0:	430b      	orrs	r3, r1
 80073f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80073f4:	e003      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80073fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007406:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800740a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800740e:	2300      	movs	r3, #0
 8007410:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007414:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007418:	460b      	mov	r3, r1
 800741a:	4313      	orrs	r3, r2
 800741c:	d05c      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800741e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007424:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007428:	d03b      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800742a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800742e:	d834      	bhi.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007434:	d037      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007436:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800743a:	d82e      	bhi.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800743c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007440:	d033      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007442:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007446:	d828      	bhi.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800744c:	d01a      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800744e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007452:	d822      	bhi.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800745c:	d007      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800745e:	e01c      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007460:	4b1a      	ldr	r3, [pc, #104]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007464:	4a19      	ldr	r2, [pc, #100]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800746a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800746c:	e01e      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800746e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007472:	3308      	adds	r3, #8
 8007474:	2100      	movs	r1, #0
 8007476:	4618      	mov	r0, r3
 8007478:	f001 fb2a 	bl	8008ad0 <RCCEx_PLL2_Config>
 800747c:	4603      	mov	r3, r0
 800747e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007482:	e013      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007488:	3328      	adds	r3, #40	@ 0x28
 800748a:	2100      	movs	r1, #0
 800748c:	4618      	mov	r0, r3
 800748e:	f001 fbd1 	bl	8008c34 <RCCEx_PLL3_Config>
 8007492:	4603      	mov	r3, r0
 8007494:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007498:	e008      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80074a0:	e004      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80074a2:	bf00      	nop
 80074a4:	e002      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80074a6:	bf00      	nop
 80074a8:	e000      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80074aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10d      	bne.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80074b4:	4b05      	ldr	r3, [pc, #20]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074b8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80074bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074c2:	4a02      	ldr	r2, [pc, #8]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074c4:	430b      	orrs	r3, r1
 80074c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80074c8:	e006      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80074ca:	bf00      	nop
 80074cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80074d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80074e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80074e8:	2300      	movs	r3, #0
 80074ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80074f2:	460b      	mov	r3, r1
 80074f4:	4313      	orrs	r3, r2
 80074f6:	d03a      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80074f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074fe:	2b30      	cmp	r3, #48	@ 0x30
 8007500:	d01f      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007502:	2b30      	cmp	r3, #48	@ 0x30
 8007504:	d819      	bhi.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007506:	2b20      	cmp	r3, #32
 8007508:	d00c      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800750a:	2b20      	cmp	r3, #32
 800750c:	d815      	bhi.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800750e:	2b00      	cmp	r3, #0
 8007510:	d019      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007512:	2b10      	cmp	r3, #16
 8007514:	d111      	bne.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007516:	4bae      	ldr	r3, [pc, #696]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751a:	4aad      	ldr	r2, [pc, #692]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800751c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007520:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007522:	e011      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007528:	3308      	adds	r3, #8
 800752a:	2102      	movs	r1, #2
 800752c:	4618      	mov	r0, r3
 800752e:	f001 facf 	bl	8008ad0 <RCCEx_PLL2_Config>
 8007532:	4603      	mov	r3, r0
 8007534:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007538:	e006      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007540:	e002      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007542:	bf00      	nop
 8007544:	e000      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007546:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007548:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007550:	4b9f      	ldr	r3, [pc, #636]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007554:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800755c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800755e:	4a9c      	ldr	r2, [pc, #624]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007560:	430b      	orrs	r3, r1
 8007562:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007564:	e003      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007566:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800756a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800756e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007576:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800757a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800757e:	2300      	movs	r3, #0
 8007580:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007584:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007588:	460b      	mov	r3, r1
 800758a:	4313      	orrs	r3, r2
 800758c:	d051      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800758e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007594:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007598:	d035      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800759a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800759e:	d82e      	bhi.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x426>
 80075a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075a4:	d031      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80075a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075aa:	d828      	bhi.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x426>
 80075ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075b0:	d01a      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80075b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075b6:	d822      	bhi.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x426>
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80075bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075c0:	d007      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80075c2:	e01c      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075c4:	4b82      	ldr	r3, [pc, #520]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c8:	4a81      	ldr	r2, [pc, #516]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075d0:	e01c      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075d6:	3308      	adds	r3, #8
 80075d8:	2100      	movs	r1, #0
 80075da:	4618      	mov	r0, r3
 80075dc:	f001 fa78 	bl	8008ad0 <RCCEx_PLL2_Config>
 80075e0:	4603      	mov	r3, r0
 80075e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075e6:	e011      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075ec:	3328      	adds	r3, #40	@ 0x28
 80075ee:	2100      	movs	r1, #0
 80075f0:	4618      	mov	r0, r3
 80075f2:	f001 fb1f 	bl	8008c34 <RCCEx_PLL3_Config>
 80075f6:	4603      	mov	r3, r0
 80075f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075fc:	e006      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007604:	e002      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007606:	bf00      	nop
 8007608:	e000      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800760a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800760c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10a      	bne.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007614:	4b6e      	ldr	r3, [pc, #440]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007618:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800761c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007620:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007622:	4a6b      	ldr	r2, [pc, #428]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007624:	430b      	orrs	r3, r1
 8007626:	6513      	str	r3, [r2, #80]	@ 0x50
 8007628:	e003      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800762a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800762e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800763e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007642:	2300      	movs	r3, #0
 8007644:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007648:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800764c:	460b      	mov	r3, r1
 800764e:	4313      	orrs	r3, r2
 8007650:	d053      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007652:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007656:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007658:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800765c:	d033      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800765e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007662:	d82c      	bhi.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007664:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007668:	d02f      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800766a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800766e:	d826      	bhi.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007670:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007674:	d02b      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007676:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800767a:	d820      	bhi.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800767c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007680:	d012      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007682:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007686:	d81a      	bhi.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d022      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800768c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007690:	d115      	bne.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007692:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007696:	3308      	adds	r3, #8
 8007698:	2101      	movs	r1, #1
 800769a:	4618      	mov	r0, r3
 800769c:	f001 fa18 	bl	8008ad0 <RCCEx_PLL2_Config>
 80076a0:	4603      	mov	r3, r0
 80076a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80076a6:	e015      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ac:	3328      	adds	r3, #40	@ 0x28
 80076ae:	2101      	movs	r1, #1
 80076b0:	4618      	mov	r0, r3
 80076b2:	f001 fabf 	bl	8008c34 <RCCEx_PLL3_Config>
 80076b6:	4603      	mov	r3, r0
 80076b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80076bc:	e00a      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80076c4:	e006      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80076c6:	bf00      	nop
 80076c8:	e004      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80076ca:	bf00      	nop
 80076cc:	e002      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80076ce:	bf00      	nop
 80076d0:	e000      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80076d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10a      	bne.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80076dc:	4b3c      	ldr	r3, [pc, #240]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80076e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076ea:	4a39      	ldr	r2, [pc, #228]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076ec:	430b      	orrs	r3, r1
 80076ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80076f0:	e003      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80076fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007706:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800770a:	2300      	movs	r3, #0
 800770c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007710:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007714:	460b      	mov	r3, r1
 8007716:	4313      	orrs	r3, r2
 8007718:	d060      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800771a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800771e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007722:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007726:	d039      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007728:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800772c:	d832      	bhi.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800772e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007732:	d035      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007734:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007738:	d82c      	bhi.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800773a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800773e:	d031      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007744:	d826      	bhi.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007746:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800774a:	d02d      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800774c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007750:	d820      	bhi.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007756:	d012      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007758:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800775c:	d81a      	bhi.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800775e:	2b00      	cmp	r3, #0
 8007760:	d024      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007762:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007766:	d115      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007768:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800776c:	3308      	adds	r3, #8
 800776e:	2101      	movs	r1, #1
 8007770:	4618      	mov	r0, r3
 8007772:	f001 f9ad 	bl	8008ad0 <RCCEx_PLL2_Config>
 8007776:	4603      	mov	r3, r0
 8007778:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800777c:	e017      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800777e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007782:	3328      	adds	r3, #40	@ 0x28
 8007784:	2101      	movs	r1, #1
 8007786:	4618      	mov	r0, r3
 8007788:	f001 fa54 	bl	8008c34 <RCCEx_PLL3_Config>
 800778c:	4603      	mov	r3, r0
 800778e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007792:	e00c      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800779a:	e008      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800779c:	bf00      	nop
 800779e:	e006      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80077a0:	bf00      	nop
 80077a2:	e004      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80077a4:	bf00      	nop
 80077a6:	e002      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80077a8:	bf00      	nop
 80077aa:	e000      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80077ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10e      	bne.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80077b6:	4b06      	ldr	r3, [pc, #24]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80077be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077c6:	4a02      	ldr	r2, [pc, #8]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077c8:	430b      	orrs	r3, r1
 80077ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80077cc:	e006      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80077ce:	bf00      	nop
 80077d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80077dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80077e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077ec:	2300      	movs	r3, #0
 80077ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80077f6:	460b      	mov	r3, r1
 80077f8:	4313      	orrs	r3, r2
 80077fa:	d037      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80077fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007800:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007802:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007806:	d00e      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007808:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800780c:	d816      	bhi.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800780e:	2b00      	cmp	r3, #0
 8007810:	d018      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007812:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007816:	d111      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007818:	4bc4      	ldr	r3, [pc, #784]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800781a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781c:	4ac3      	ldr	r2, [pc, #780]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800781e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007822:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007824:	e00f      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800782a:	3308      	adds	r3, #8
 800782c:	2101      	movs	r1, #1
 800782e:	4618      	mov	r0, r3
 8007830:	f001 f94e 	bl	8008ad0 <RCCEx_PLL2_Config>
 8007834:	4603      	mov	r3, r0
 8007836:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800783a:	e004      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007842:	e000      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007846:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10a      	bne.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800784e:	4bb7      	ldr	r3, [pc, #732]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007852:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007856:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800785a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800785c:	4ab3      	ldr	r2, [pc, #716]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800785e:	430b      	orrs	r3, r1
 8007860:	6513      	str	r3, [r2, #80]	@ 0x50
 8007862:	e003      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007864:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007868:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800786c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007878:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800787c:	2300      	movs	r3, #0
 800787e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007882:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007886:	460b      	mov	r3, r1
 8007888:	4313      	orrs	r3, r2
 800788a:	d039      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800788c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007892:	2b03      	cmp	r3, #3
 8007894:	d81c      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007896:	a201      	add	r2, pc, #4	@ (adr r2, 800789c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789c:	080078d9 	.word	0x080078d9
 80078a0:	080078ad 	.word	0x080078ad
 80078a4:	080078bb 	.word	0x080078bb
 80078a8:	080078d9 	.word	0x080078d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ac:	4b9f      	ldr	r3, [pc, #636]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b0:	4a9e      	ldr	r2, [pc, #632]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80078b8:	e00f      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078be:	3308      	adds	r3, #8
 80078c0:	2102      	movs	r1, #2
 80078c2:	4618      	mov	r0, r3
 80078c4:	f001 f904 	bl	8008ad0 <RCCEx_PLL2_Config>
 80078c8:	4603      	mov	r3, r0
 80078ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80078ce:	e004      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80078d6:	e000      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80078d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80078e2:	4b92      	ldr	r3, [pc, #584]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078e6:	f023 0103 	bic.w	r1, r3, #3
 80078ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078f0:	4a8e      	ldr	r2, [pc, #568]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078f2:	430b      	orrs	r3, r1
 80078f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80078f6:	e003      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800790c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007910:	2300      	movs	r3, #0
 8007912:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007916:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800791a:	460b      	mov	r3, r1
 800791c:	4313      	orrs	r3, r2
 800791e:	f000 8099 	beq.w	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007922:	4b83      	ldr	r3, [pc, #524]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a82      	ldr	r2, [pc, #520]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800792c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800792e:	f7fa fabb 	bl	8001ea8 <HAL_GetTick>
 8007932:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007936:	e00b      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007938:	f7fa fab6 	bl	8001ea8 <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	2b64      	cmp	r3, #100	@ 0x64
 8007946:	d903      	bls.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800794e:	e005      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007950:	4b77      	ldr	r3, [pc, #476]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007958:	2b00      	cmp	r3, #0
 800795a:	d0ed      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800795c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007960:	2b00      	cmp	r3, #0
 8007962:	d173      	bne.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007964:	4b71      	ldr	r3, [pc, #452]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007966:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007968:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800796c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007970:	4053      	eors	r3, r2
 8007972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007976:	2b00      	cmp	r3, #0
 8007978:	d015      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800797a:	4b6c      	ldr	r3, [pc, #432]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800797c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800797e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007982:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007986:	4b69      	ldr	r3, [pc, #420]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800798a:	4a68      	ldr	r2, [pc, #416]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800798c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007990:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007992:	4b66      	ldr	r3, [pc, #408]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007996:	4a65      	ldr	r2, [pc, #404]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800799c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800799e:	4a63      	ldr	r2, [pc, #396]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80079a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079b2:	d118      	bne.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b4:	f7fa fa78 	bl	8001ea8 <HAL_GetTick>
 80079b8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079bc:	e00d      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079be:	f7fa fa73 	bl	8001ea8 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80079c8:	1ad2      	subs	r2, r2, r3
 80079ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d903      	bls.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80079d8:	e005      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079da:	4b54      	ldr	r3, [pc, #336]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d0eb      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80079e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d129      	bne.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079fe:	d10e      	bne.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007a00:	4b4a      	ldr	r3, [pc, #296]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a10:	091a      	lsrs	r2, r3, #4
 8007a12:	4b48      	ldr	r3, [pc, #288]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007a14:	4013      	ands	r3, r2
 8007a16:	4a45      	ldr	r2, [pc, #276]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a18:	430b      	orrs	r3, r1
 8007a1a:	6113      	str	r3, [r2, #16]
 8007a1c:	e005      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007a1e:	4b43      	ldr	r3, [pc, #268]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	4a42      	ldr	r2, [pc, #264]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007a28:	6113      	str	r3, [r2, #16]
 8007a2a:	4b40      	ldr	r3, [pc, #256]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a2c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a3a:	4a3c      	ldr	r2, [pc, #240]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a3c:	430b      	orrs	r3, r1
 8007a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a40:	e008      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a46:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007a4a:	e003      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a50:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5c:	f002 0301 	and.w	r3, r2, #1
 8007a60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a64:	2300      	movs	r3, #0
 8007a66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a6a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4313      	orrs	r3, r2
 8007a72:	f000 8090 	beq.w	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a7e:	2b28      	cmp	r3, #40	@ 0x28
 8007a80:	d870      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007a82:	a201      	add	r2, pc, #4	@ (adr r2, 8007a88 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a88:	08007b6d 	.word	0x08007b6d
 8007a8c:	08007b65 	.word	0x08007b65
 8007a90:	08007b65 	.word	0x08007b65
 8007a94:	08007b65 	.word	0x08007b65
 8007a98:	08007b65 	.word	0x08007b65
 8007a9c:	08007b65 	.word	0x08007b65
 8007aa0:	08007b65 	.word	0x08007b65
 8007aa4:	08007b65 	.word	0x08007b65
 8007aa8:	08007b39 	.word	0x08007b39
 8007aac:	08007b65 	.word	0x08007b65
 8007ab0:	08007b65 	.word	0x08007b65
 8007ab4:	08007b65 	.word	0x08007b65
 8007ab8:	08007b65 	.word	0x08007b65
 8007abc:	08007b65 	.word	0x08007b65
 8007ac0:	08007b65 	.word	0x08007b65
 8007ac4:	08007b65 	.word	0x08007b65
 8007ac8:	08007b4f 	.word	0x08007b4f
 8007acc:	08007b65 	.word	0x08007b65
 8007ad0:	08007b65 	.word	0x08007b65
 8007ad4:	08007b65 	.word	0x08007b65
 8007ad8:	08007b65 	.word	0x08007b65
 8007adc:	08007b65 	.word	0x08007b65
 8007ae0:	08007b65 	.word	0x08007b65
 8007ae4:	08007b65 	.word	0x08007b65
 8007ae8:	08007b6d 	.word	0x08007b6d
 8007aec:	08007b65 	.word	0x08007b65
 8007af0:	08007b65 	.word	0x08007b65
 8007af4:	08007b65 	.word	0x08007b65
 8007af8:	08007b65 	.word	0x08007b65
 8007afc:	08007b65 	.word	0x08007b65
 8007b00:	08007b65 	.word	0x08007b65
 8007b04:	08007b65 	.word	0x08007b65
 8007b08:	08007b6d 	.word	0x08007b6d
 8007b0c:	08007b65 	.word	0x08007b65
 8007b10:	08007b65 	.word	0x08007b65
 8007b14:	08007b65 	.word	0x08007b65
 8007b18:	08007b65 	.word	0x08007b65
 8007b1c:	08007b65 	.word	0x08007b65
 8007b20:	08007b65 	.word	0x08007b65
 8007b24:	08007b65 	.word	0x08007b65
 8007b28:	08007b6d 	.word	0x08007b6d
 8007b2c:	58024400 	.word	0x58024400
 8007b30:	58024800 	.word	0x58024800
 8007b34:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	2101      	movs	r1, #1
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 ffc5 	bl	8008ad0 <RCCEx_PLL2_Config>
 8007b46:	4603      	mov	r3, r0
 8007b48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007b4c:	e00f      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b52:	3328      	adds	r3, #40	@ 0x28
 8007b54:	2101      	movs	r1, #1
 8007b56:	4618      	mov	r0, r3
 8007b58:	f001 f86c 	bl	8008c34 <RCCEx_PLL3_Config>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007b62:	e004      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007b6a:	e000      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b6e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10b      	bne.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007b76:	4bc0      	ldr	r3, [pc, #768]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b7a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b86:	4abc      	ldr	r2, [pc, #752]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007b88:	430b      	orrs	r3, r1
 8007b8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b8c:	e003      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b92:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9e:	f002 0302 	and.w	r3, r2, #2
 8007ba2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007bac:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	d043      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bbe:	2b05      	cmp	r3, #5
 8007bc0:	d824      	bhi.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc8:	08007c15 	.word	0x08007c15
 8007bcc:	08007be1 	.word	0x08007be1
 8007bd0:	08007bf7 	.word	0x08007bf7
 8007bd4:	08007c15 	.word	0x08007c15
 8007bd8:	08007c15 	.word	0x08007c15
 8007bdc:	08007c15 	.word	0x08007c15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007be4:	3308      	adds	r3, #8
 8007be6:	2101      	movs	r1, #1
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 ff71 	bl	8008ad0 <RCCEx_PLL2_Config>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007bf4:	e00f      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bfa:	3328      	adds	r3, #40	@ 0x28
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f001 f818 	bl	8008c34 <RCCEx_PLL3_Config>
 8007c04:	4603      	mov	r3, r0
 8007c06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007c0a:	e004      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007c12:	e000      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10b      	bne.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c1e:	4b96      	ldr	r3, [pc, #600]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c22:	f023 0107 	bic.w	r1, r3, #7
 8007c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c2e:	4a92      	ldr	r2, [pc, #584]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007c30:	430b      	orrs	r3, r1
 8007c32:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c34:	e003      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	f002 0304 	and.w	r3, r2, #4
 8007c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c54:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	d043      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c66:	2b05      	cmp	r3, #5
 8007c68:	d824      	bhi.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c70 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c70:	08007cbd 	.word	0x08007cbd
 8007c74:	08007c89 	.word	0x08007c89
 8007c78:	08007c9f 	.word	0x08007c9f
 8007c7c:	08007cbd 	.word	0x08007cbd
 8007c80:	08007cbd 	.word	0x08007cbd
 8007c84:	08007cbd 	.word	0x08007cbd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	2101      	movs	r1, #1
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 ff1d 	bl	8008ad0 <RCCEx_PLL2_Config>
 8007c96:	4603      	mov	r3, r0
 8007c98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007c9c:	e00f      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ca2:	3328      	adds	r3, #40	@ 0x28
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 ffc4 	bl	8008c34 <RCCEx_PLL3_Config>
 8007cac:	4603      	mov	r3, r0
 8007cae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007cb2:	e004      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007cba:	e000      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cbe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10b      	bne.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cc6:	4b6c      	ldr	r3, [pc, #432]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cca:	f023 0107 	bic.w	r1, r3, #7
 8007cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cd6:	4a68      	ldr	r2, [pc, #416]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cdc:	e003      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cde:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ce2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cee:	f002 0320 	and.w	r3, r2, #32
 8007cf2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007cfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d00:	460b      	mov	r3, r1
 8007d02:	4313      	orrs	r3, r2
 8007d04:	d055      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d12:	d033      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d18:	d82c      	bhi.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d1e:	d02f      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d24:	d826      	bhi.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007d26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d2a:	d02b      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007d2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d30:	d820      	bhi.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007d32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d36:	d012      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d3c:	d81a      	bhi.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d022      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007d42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d46:	d115      	bne.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	2100      	movs	r1, #0
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 febd 	bl	8008ad0 <RCCEx_PLL2_Config>
 8007d56:	4603      	mov	r3, r0
 8007d58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007d5c:	e015      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d62:	3328      	adds	r3, #40	@ 0x28
 8007d64:	2102      	movs	r1, #2
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 ff64 	bl	8008c34 <RCCEx_PLL3_Config>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007d72:	e00a      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d7a:	e006      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007d7c:	bf00      	nop
 8007d7e:	e004      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007d80:	bf00      	nop
 8007d82:	e002      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007d84:	bf00      	nop
 8007d86:	e000      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10b      	bne.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d92:	4b39      	ldr	r3, [pc, #228]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d96:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007da2:	4a35      	ldr	r2, [pc, #212]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007da4:	430b      	orrs	r3, r1
 8007da6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007da8:	e003      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007daa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007dae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007dc8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	d058      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007dda:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007dde:	d033      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007de0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007de4:	d82c      	bhi.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dea:	d02f      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007dec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007df0:	d826      	bhi.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007df2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007df6:	d02b      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007df8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dfc:	d820      	bhi.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007dfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e02:	d012      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007e04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e08:	d81a      	bhi.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d022      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e12:	d115      	bne.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e18:	3308      	adds	r3, #8
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 fe57 	bl	8008ad0 <RCCEx_PLL2_Config>
 8007e22:	4603      	mov	r3, r0
 8007e24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e28:	e015      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e2e:	3328      	adds	r3, #40	@ 0x28
 8007e30:	2102      	movs	r1, #2
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 fefe 	bl	8008c34 <RCCEx_PLL3_Config>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e3e:	e00a      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e46:	e006      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007e48:	bf00      	nop
 8007e4a:	e004      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007e4c:	bf00      	nop
 8007e4e:	e002      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007e50:	bf00      	nop
 8007e52:	e000      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10e      	bne.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e5e:	4b06      	ldr	r3, [pc, #24]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e62:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e6e:	4a02      	ldr	r2, [pc, #8]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007e70:	430b      	orrs	r3, r1
 8007e72:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e74:	e006      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8007e76:	bf00      	nop
 8007e78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007e90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e94:	2300      	movs	r3, #0
 8007e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e9a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	d055      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ea8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007eac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007eb0:	d033      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007eb2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007eb6:	d82c      	bhi.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007eb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ebc:	d02f      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007ebe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ec2:	d826      	bhi.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007ec4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007ec8:	d02b      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007eca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007ece:	d820      	bhi.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007ed0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ed4:	d012      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007ed6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007eda:	d81a      	bhi.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d022      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ee4:	d115      	bne.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eea:	3308      	adds	r3, #8
 8007eec:	2100      	movs	r1, #0
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 fdee 	bl	8008ad0 <RCCEx_PLL2_Config>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007efa:	e015      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f00:	3328      	adds	r3, #40	@ 0x28
 8007f02:	2102      	movs	r1, #2
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 fe95 	bl	8008c34 <RCCEx_PLL3_Config>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007f10:	e00a      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f18:	e006      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007f1a:	bf00      	nop
 8007f1c:	e004      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007f1e:	bf00      	nop
 8007f20:	e002      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007f22:	bf00      	nop
 8007f24:	e000      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10b      	bne.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f30:	4ba1      	ldr	r3, [pc, #644]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f34:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007f40:	4a9d      	ldr	r2, [pc, #628]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f42:	430b      	orrs	r3, r1
 8007f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f46:	e003      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f002 0308 	and.w	r3, r2, #8
 8007f5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f60:	2300      	movs	r3, #0
 8007f62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	d01e      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f7c:	d10c      	bne.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f82:	3328      	adds	r3, #40	@ 0x28
 8007f84:	2102      	movs	r1, #2
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fe54 	bl	8008c34 <RCCEx_PLL3_Config>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d002      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f98:	4b87      	ldr	r3, [pc, #540]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f9c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fa8:	4a83      	ldr	r2, [pc, #524]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007faa:	430b      	orrs	r3, r1
 8007fac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	f002 0310 	and.w	r3, r2, #16
 8007fba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007fc4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	d01e      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fda:	d10c      	bne.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fe0:	3328      	adds	r3, #40	@ 0x28
 8007fe2:	2102      	movs	r1, #2
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fe25 	bl	8008c34 <RCCEx_PLL3_Config>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d002      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ff6:	4b70      	ldr	r3, [pc, #448]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ffa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008002:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008006:	4a6c      	ldr	r2, [pc, #432]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008008:	430b      	orrs	r3, r1
 800800a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800800c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008018:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800801c:	2300      	movs	r3, #0
 800801e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008022:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008026:	460b      	mov	r3, r1
 8008028:	4313      	orrs	r3, r2
 800802a:	d03e      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800802c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008030:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008034:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008038:	d022      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800803a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800803e:	d81b      	bhi.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008040:	2b00      	cmp	r3, #0
 8008042:	d003      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008048:	d00b      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800804a:	e015      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800804c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008050:	3308      	adds	r3, #8
 8008052:	2100      	movs	r1, #0
 8008054:	4618      	mov	r0, r3
 8008056:	f000 fd3b 	bl	8008ad0 <RCCEx_PLL2_Config>
 800805a:	4603      	mov	r3, r0
 800805c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008060:	e00f      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008062:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008066:	3328      	adds	r3, #40	@ 0x28
 8008068:	2102      	movs	r1, #2
 800806a:	4618      	mov	r0, r3
 800806c:	f000 fde2 	bl	8008c34 <RCCEx_PLL3_Config>
 8008070:	4603      	mov	r3, r0
 8008072:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008076:	e004      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800807e:	e000      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008082:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10b      	bne.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800808a:	4b4b      	ldr	r3, [pc, #300]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800808c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800808e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008096:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800809a:	4a47      	ldr	r2, [pc, #284]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800809c:	430b      	orrs	r3, r1
 800809e:	6593      	str	r3, [r2, #88]	@ 0x58
 80080a0:	e003      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80080aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80080b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80080b8:	2300      	movs	r3, #0
 80080ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80080bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80080c0:	460b      	mov	r3, r1
 80080c2:	4313      	orrs	r3, r2
 80080c4:	d03b      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80080c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080d2:	d01f      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80080d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080d8:	d818      	bhi.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80080da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080de:	d003      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80080e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080e4:	d007      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80080e6:	e011      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080e8:	4b33      	ldr	r3, [pc, #204]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ec:	4a32      	ldr	r2, [pc, #200]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80080f4:	e00f      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080fa:	3328      	adds	r3, #40	@ 0x28
 80080fc:	2101      	movs	r1, #1
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 fd98 	bl	8008c34 <RCCEx_PLL3_Config>
 8008104:	4603      	mov	r3, r0
 8008106:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800810a:	e004      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008112:	e000      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008116:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10b      	bne.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800811e:	4b26      	ldr	r3, [pc, #152]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008122:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008126:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800812a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800812e:	4a22      	ldr	r2, [pc, #136]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008130:	430b      	orrs	r3, r1
 8008132:	6553      	str	r3, [r2, #84]	@ 0x54
 8008134:	e003      	b.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008136:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800813a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800813e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008146:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800814a:	673b      	str	r3, [r7, #112]	@ 0x70
 800814c:	2300      	movs	r3, #0
 800814e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008150:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008154:	460b      	mov	r3, r1
 8008156:	4313      	orrs	r3, r2
 8008158:	d034      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800815a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800815e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008168:	d007      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800816a:	e011      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800816c:	4b12      	ldr	r3, [pc, #72]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800816e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008170:	4a11      	ldr	r2, [pc, #68]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008176:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008178:	e00e      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800817a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800817e:	3308      	adds	r3, #8
 8008180:	2102      	movs	r1, #2
 8008182:	4618      	mov	r0, r3
 8008184:	f000 fca4 	bl	8008ad0 <RCCEx_PLL2_Config>
 8008188:	4603      	mov	r3, r0
 800818a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800818e:	e003      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008198:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10d      	bne.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80081a0:	4b05      	ldr	r3, [pc, #20]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80081a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80081a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ae:	4a02      	ldr	r2, [pc, #8]	@ (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80081b0:	430b      	orrs	r3, r1
 80081b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80081b4:	e006      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80081b6:	bf00      	nop
 80081b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80081c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80081d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80081d2:	2300      	movs	r3, #0
 80081d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80081d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80081da:	460b      	mov	r3, r1
 80081dc:	4313      	orrs	r3, r2
 80081de:	d00c      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081e4:	3328      	adds	r3, #40	@ 0x28
 80081e6:	2102      	movs	r1, #2
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fd23 	bl	8008c34 <RCCEx_PLL3_Config>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80081fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008202:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008206:	663b      	str	r3, [r7, #96]	@ 0x60
 8008208:	2300      	movs	r3, #0
 800820a:	667b      	str	r3, [r7, #100]	@ 0x64
 800820c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008210:	460b      	mov	r3, r1
 8008212:	4313      	orrs	r3, r2
 8008214:	d038      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008216:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800821a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800821e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008222:	d018      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008224:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008228:	d811      	bhi.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800822a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800822e:	d014      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008234:	d80b      	bhi.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008236:	2b00      	cmp	r3, #0
 8008238:	d011      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800823a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800823e:	d106      	bne.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008240:	4bc3      	ldr	r3, [pc, #780]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008244:	4ac2      	ldr	r2, [pc, #776]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800824a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800824c:	e008      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008254:	e004      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008256:	bf00      	nop
 8008258:	e002      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800825a:	bf00      	nop
 800825c:	e000      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800825e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008260:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10b      	bne.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008268:	4bb9      	ldr	r3, [pc, #740]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800826a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800826c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008270:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008278:	4ab5      	ldr	r2, [pc, #724]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800827a:	430b      	orrs	r3, r1
 800827c:	6553      	str	r3, [r2, #84]	@ 0x54
 800827e:	e003      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008280:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008284:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008288:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800828c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008290:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008294:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008296:	2300      	movs	r3, #0
 8008298:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800829a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800829e:	460b      	mov	r3, r1
 80082a0:	4313      	orrs	r3, r2
 80082a2:	d009      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80082a4:	4baa      	ldr	r3, [pc, #680]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80082ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082b2:	4aa7      	ldr	r2, [pc, #668]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082b4:	430b      	orrs	r3, r1
 80082b6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80082b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80082c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80082c6:	2300      	movs	r3, #0
 80082c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80082ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80082ce:	460b      	mov	r3, r1
 80082d0:	4313      	orrs	r3, r2
 80082d2:	d009      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80082d4:	4b9e      	ldr	r3, [pc, #632]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082d8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80082dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082e2:	4a9b      	ldr	r2, [pc, #620]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082e4:	430b      	orrs	r3, r1
 80082e6:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80082e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80082f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082f6:	2300      	movs	r3, #0
 80082f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082fa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80082fe:	460b      	mov	r3, r1
 8008300:	4313      	orrs	r3, r2
 8008302:	d009      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008304:	4b92      	ldr	r3, [pc, #584]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008308:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800830c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008312:	4a8f      	ldr	r2, [pc, #572]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008314:	430b      	orrs	r3, r1
 8008316:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008318:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008320:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008324:	643b      	str	r3, [r7, #64]	@ 0x40
 8008326:	2300      	movs	r3, #0
 8008328:	647b      	str	r3, [r7, #68]	@ 0x44
 800832a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800832e:	460b      	mov	r3, r1
 8008330:	4313      	orrs	r3, r2
 8008332:	d00e      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008334:	4b86      	ldr	r3, [pc, #536]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	4a85      	ldr	r2, [pc, #532]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800833a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800833e:	6113      	str	r3, [r2, #16]
 8008340:	4b83      	ldr	r3, [pc, #524]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008342:	6919      	ldr	r1, [r3, #16]
 8008344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008348:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800834c:	4a80      	ldr	r2, [pc, #512]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800834e:	430b      	orrs	r3, r1
 8008350:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008352:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800835e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008360:	2300      	movs	r3, #0
 8008362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008364:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008368:	460b      	mov	r3, r1
 800836a:	4313      	orrs	r3, r2
 800836c:	d009      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800836e:	4b78      	ldr	r3, [pc, #480]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008372:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800837a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800837c:	4a74      	ldr	r2, [pc, #464]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800837e:	430b      	orrs	r3, r1
 8008380:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800838e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008390:	2300      	movs	r3, #0
 8008392:	637b      	str	r3, [r7, #52]	@ 0x34
 8008394:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008398:	460b      	mov	r3, r1
 800839a:	4313      	orrs	r3, r2
 800839c:	d00a      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800839e:	4b6c      	ldr	r3, [pc, #432]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083a2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80083a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083ae:	4a68      	ldr	r2, [pc, #416]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083b0:	430b      	orrs	r3, r1
 80083b2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80083b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	2100      	movs	r1, #0
 80083be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80083ca:	460b      	mov	r3, r1
 80083cc:	4313      	orrs	r3, r2
 80083ce:	d011      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083d4:	3308      	adds	r3, #8
 80083d6:	2100      	movs	r1, #0
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 fb79 	bl	8008ad0 <RCCEx_PLL2_Config>
 80083de:	4603      	mov	r3, r0
 80083e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80083e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80083f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	2100      	movs	r1, #0
 80083fe:	6239      	str	r1, [r7, #32]
 8008400:	f003 0302 	and.w	r3, r3, #2
 8008404:	627b      	str	r3, [r7, #36]	@ 0x24
 8008406:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800840a:	460b      	mov	r3, r1
 800840c:	4313      	orrs	r3, r2
 800840e:	d011      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008414:	3308      	adds	r3, #8
 8008416:	2101      	movs	r1, #1
 8008418:	4618      	mov	r0, r3
 800841a:	f000 fb59 	bl	8008ad0 <RCCEx_PLL2_Config>
 800841e:	4603      	mov	r3, r0
 8008420:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008424:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800842c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008430:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843c:	2100      	movs	r1, #0
 800843e:	61b9      	str	r1, [r7, #24]
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	61fb      	str	r3, [r7, #28]
 8008446:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800844a:	460b      	mov	r3, r1
 800844c:	4313      	orrs	r3, r2
 800844e:	d011      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008454:	3308      	adds	r3, #8
 8008456:	2102      	movs	r1, #2
 8008458:	4618      	mov	r0, r3
 800845a:	f000 fb39 	bl	8008ad0 <RCCEx_PLL2_Config>
 800845e:	4603      	mov	r3, r0
 8008460:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008464:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800846c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008470:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847c:	2100      	movs	r1, #0
 800847e:	6139      	str	r1, [r7, #16]
 8008480:	f003 0308 	and.w	r3, r3, #8
 8008484:	617b      	str	r3, [r7, #20]
 8008486:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800848a:	460b      	mov	r3, r1
 800848c:	4313      	orrs	r3, r2
 800848e:	d011      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008490:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008494:	3328      	adds	r3, #40	@ 0x28
 8008496:	2100      	movs	r1, #0
 8008498:	4618      	mov	r0, r3
 800849a:	f000 fbcb 	bl	8008c34 <RCCEx_PLL3_Config>
 800849e:	4603      	mov	r3, r0
 80084a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80084a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d003      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80084b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	2100      	movs	r1, #0
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	f003 0310 	and.w	r3, r3, #16
 80084c4:	60fb      	str	r3, [r7, #12]
 80084c6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80084ca:	460b      	mov	r3, r1
 80084cc:	4313      	orrs	r3, r2
 80084ce:	d011      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084d4:	3328      	adds	r3, #40	@ 0x28
 80084d6:	2101      	movs	r1, #1
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 fbab 	bl	8008c34 <RCCEx_PLL3_Config>
 80084de:	4603      	mov	r3, r0
 80084e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80084e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80084f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fc:	2100      	movs	r1, #0
 80084fe:	6039      	str	r1, [r7, #0]
 8008500:	f003 0320 	and.w	r3, r3, #32
 8008504:	607b      	str	r3, [r7, #4]
 8008506:	e9d7 1200 	ldrd	r1, r2, [r7]
 800850a:	460b      	mov	r3, r1
 800850c:	4313      	orrs	r3, r2
 800850e:	d011      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008514:	3328      	adds	r3, #40	@ 0x28
 8008516:	2102      	movs	r1, #2
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fb8b 	bl	8008c34 <RCCEx_PLL3_Config>
 800851e:	4603      	mov	r3, r0
 8008520:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008524:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008528:	2b00      	cmp	r3, #0
 800852a:	d003      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800852c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008530:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8008534:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	e000      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
}
 8008542:	4618      	mov	r0, r3
 8008544:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8008548:	46bd      	mov	sp, r7
 800854a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800854e:	bf00      	nop
 8008550:	58024400 	.word	0x58024400

08008554 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008558:	f7fe fde2 	bl	8007120 <HAL_RCC_GetHCLKFreq>
 800855c:	4602      	mov	r2, r0
 800855e:	4b06      	ldr	r3, [pc, #24]	@ (8008578 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	091b      	lsrs	r3, r3, #4
 8008564:	f003 0307 	and.w	r3, r3, #7
 8008568:	4904      	ldr	r1, [pc, #16]	@ (800857c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800856a:	5ccb      	ldrb	r3, [r1, r3]
 800856c:	f003 031f 	and.w	r3, r3, #31
 8008570:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008574:	4618      	mov	r0, r3
 8008576:	bd80      	pop	{r7, pc}
 8008578:	58024400 	.word	0x58024400
 800857c:	0800e8bc 	.word	0x0800e8bc

08008580 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008580:	b480      	push	{r7}
 8008582:	b089      	sub	sp, #36	@ 0x24
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008588:	4ba1      	ldr	r3, [pc, #644]	@ (8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800858a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800858c:	f003 0303 	and.w	r3, r3, #3
 8008590:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008592:	4b9f      	ldr	r3, [pc, #636]	@ (8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008596:	0b1b      	lsrs	r3, r3, #12
 8008598:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800859c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800859e:	4b9c      	ldr	r3, [pc, #624]	@ (8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a2:	091b      	lsrs	r3, r3, #4
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80085aa:	4b99      	ldr	r3, [pc, #612]	@ (8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ae:	08db      	lsrs	r3, r3, #3
 80085b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	fb02 f303 	mul.w	r3, r2, r3
 80085ba:	ee07 3a90 	vmov	s15, r3
 80085be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 8111 	beq.w	80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	f000 8083 	beq.w	80086dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	2b02      	cmp	r3, #2
 80085da:	f200 80a1 	bhi.w	8008720 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d003      	beq.n	80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d056      	beq.n	8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80085ea:	e099      	b.n	8008720 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085ec:	4b88      	ldr	r3, [pc, #544]	@ (8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0320 	and.w	r3, r3, #32
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d02d      	beq.n	8008654 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085f8:	4b85      	ldr	r3, [pc, #532]	@ (8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	08db      	lsrs	r3, r3, #3
 80085fe:	f003 0303 	and.w	r3, r3, #3
 8008602:	4a84      	ldr	r2, [pc, #528]	@ (8008814 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008604:	fa22 f303 	lsr.w	r3, r2, r3
 8008608:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	ee07 3a90 	vmov	s15, r3
 8008610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	ee07 3a90 	vmov	s15, r3
 800861a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800861e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008622:	4b7b      	ldr	r3, [pc, #492]	@ (8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800862a:	ee07 3a90 	vmov	s15, r3
 800862e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008632:	ed97 6a03 	vldr	s12, [r7, #12]
 8008636:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800863a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800863e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800864a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800864e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008652:	e087      	b.n	8008764 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	ee07 3a90 	vmov	s15, r3
 800865a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800865e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800881c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008666:	4b6a      	ldr	r3, [pc, #424]	@ (8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800866a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800866e:	ee07 3a90 	vmov	s15, r3
 8008672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008676:	ed97 6a03 	vldr	s12, [r7, #12]
 800867a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800867e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800868a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800868e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008696:	e065      	b.n	8008764 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	ee07 3a90 	vmov	s15, r3
 800869e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008820 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80086a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086aa:	4b59      	ldr	r3, [pc, #356]	@ (8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b2:	ee07 3a90 	vmov	s15, r3
 80086b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80086be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086da:	e043      	b.n	8008764 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	ee07 3a90 	vmov	s15, r3
 80086e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80086ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ee:	4b48      	ldr	r3, [pc, #288]	@ (8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f6:	ee07 3a90 	vmov	s15, r3
 80086fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008702:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800870a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800870e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800871a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800871e:	e021      	b.n	8008764 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800872a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008820 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800872e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008732:	4b37      	ldr	r3, [pc, #220]	@ (8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800873a:	ee07 3a90 	vmov	s15, r3
 800873e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008742:	ed97 6a03 	vldr	s12, [r7, #12]
 8008746:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800874a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800874e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800875a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800875e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008762:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008764:	4b2a      	ldr	r3, [pc, #168]	@ (8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008768:	0a5b      	lsrs	r3, r3, #9
 800876a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800876e:	ee07 3a90 	vmov	s15, r3
 8008772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008776:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800877a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800877e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800878a:	ee17 2a90 	vmov	r2, s15
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008792:	4b1f      	ldr	r3, [pc, #124]	@ (8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008796:	0c1b      	lsrs	r3, r3, #16
 8008798:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800879c:	ee07 3a90 	vmov	s15, r3
 80087a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80087b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087b8:	ee17 2a90 	vmov	r2, s15
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80087c0:	4b13      	ldr	r3, [pc, #76]	@ (8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c4:	0e1b      	lsrs	r3, r3, #24
 80087c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087ca:	ee07 3a90 	vmov	s15, r3
 80087ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087da:	edd7 6a07 	vldr	s13, [r7, #28]
 80087de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087e6:	ee17 2a90 	vmov	r2, s15
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80087ee:	e008      	b.n	8008802 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	609a      	str	r2, [r3, #8]
}
 8008802:	bf00      	nop
 8008804:	3724      	adds	r7, #36	@ 0x24
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	58024400 	.word	0x58024400
 8008814:	03d09000 	.word	0x03d09000
 8008818:	46000000 	.word	0x46000000
 800881c:	4c742400 	.word	0x4c742400
 8008820:	4a742400 	.word	0x4a742400
 8008824:	4af42400 	.word	0x4af42400

08008828 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008828:	b480      	push	{r7}
 800882a:	b089      	sub	sp, #36	@ 0x24
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008830:	4ba1      	ldr	r3, [pc, #644]	@ (8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008834:	f003 0303 	and.w	r3, r3, #3
 8008838:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800883a:	4b9f      	ldr	r3, [pc, #636]	@ (8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800883c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800883e:	0d1b      	lsrs	r3, r3, #20
 8008840:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008844:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008846:	4b9c      	ldr	r3, [pc, #624]	@ (8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884a:	0a1b      	lsrs	r3, r3, #8
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008852:	4b99      	ldr	r3, [pc, #612]	@ (8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008856:	08db      	lsrs	r3, r3, #3
 8008858:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	fb02 f303 	mul.w	r3, r2, r3
 8008862:	ee07 3a90 	vmov	s15, r3
 8008866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800886a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b00      	cmp	r3, #0
 8008872:	f000 8111 	beq.w	8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	2b02      	cmp	r3, #2
 800887a:	f000 8083 	beq.w	8008984 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	2b02      	cmp	r3, #2
 8008882:	f200 80a1 	bhi.w	80089c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d003      	beq.n	8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	2b01      	cmp	r3, #1
 8008890:	d056      	beq.n	8008940 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008892:	e099      	b.n	80089c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008894:	4b88      	ldr	r3, [pc, #544]	@ (8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0320 	and.w	r3, r3, #32
 800889c:	2b00      	cmp	r3, #0
 800889e:	d02d      	beq.n	80088fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088a0:	4b85      	ldr	r3, [pc, #532]	@ (8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	08db      	lsrs	r3, r3, #3
 80088a6:	f003 0303 	and.w	r3, r3, #3
 80088aa:	4a84      	ldr	r2, [pc, #528]	@ (8008abc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80088ac:	fa22 f303 	lsr.w	r3, r2, r3
 80088b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	ee07 3a90 	vmov	s15, r3
 80088b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	ee07 3a90 	vmov	s15, r3
 80088c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ca:	4b7b      	ldr	r3, [pc, #492]	@ (8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d2:	ee07 3a90 	vmov	s15, r3
 80088d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088da:	ed97 6a03 	vldr	s12, [r7, #12]
 80088de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80088fa:	e087      	b.n	8008a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008906:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800890a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800890e:	4b6a      	ldr	r3, [pc, #424]	@ (8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008916:	ee07 3a90 	vmov	s15, r3
 800891a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800891e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008922:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800892a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800892e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800893a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800893e:	e065      	b.n	8008a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800894e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008952:	4b59      	ldr	r3, [pc, #356]	@ (8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800895a:	ee07 3a90 	vmov	s15, r3
 800895e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008962:	ed97 6a03 	vldr	s12, [r7, #12]
 8008966:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800896a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800896e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800897a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800897e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008982:	e043      	b.n	8008a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008996:	4b48      	ldr	r3, [pc, #288]	@ (8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800899e:	ee07 3a90 	vmov	s15, r3
 80089a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089c6:	e021      	b.n	8008a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	ee07 3a90 	vmov	s15, r3
 80089ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80089d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089da:	4b37      	ldr	r3, [pc, #220]	@ (8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e2:	ee07 3a90 	vmov	s15, r3
 80089e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a10:	0a5b      	lsrs	r3, r3, #9
 8008a12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a16:	ee07 3a90 	vmov	s15, r3
 8008a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a26:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a32:	ee17 2a90 	vmov	r2, s15
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3e:	0c1b      	lsrs	r3, r3, #16
 8008a40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a44:	ee07 3a90 	vmov	s15, r3
 8008a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a54:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a60:	ee17 2a90 	vmov	r2, s15
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008a68:	4b13      	ldr	r3, [pc, #76]	@ (8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a6c:	0e1b      	lsrs	r3, r3, #24
 8008a6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a72:	ee07 3a90 	vmov	s15, r3
 8008a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a8e:	ee17 2a90 	vmov	r2, s15
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008a96:	e008      	b.n	8008aaa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	609a      	str	r2, [r3, #8]
}
 8008aaa:	bf00      	nop
 8008aac:	3724      	adds	r7, #36	@ 0x24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	58024400 	.word	0x58024400
 8008abc:	03d09000 	.word	0x03d09000
 8008ac0:	46000000 	.word	0x46000000
 8008ac4:	4c742400 	.word	0x4c742400
 8008ac8:	4a742400 	.word	0x4a742400
 8008acc:	4af42400 	.word	0x4af42400

08008ad0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ade:	4b53      	ldr	r3, [pc, #332]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae2:	f003 0303 	and.w	r3, r3, #3
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d101      	bne.n	8008aee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e099      	b.n	8008c22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008aee:	4b4f      	ldr	r3, [pc, #316]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a4e      	ldr	r2, [pc, #312]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008af4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008af8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008afa:	f7f9 f9d5 	bl	8001ea8 <HAL_GetTick>
 8008afe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b00:	e008      	b.n	8008b14 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b02:	f7f9 f9d1 	bl	8001ea8 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d901      	bls.n	8008b14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e086      	b.n	8008c22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b14:	4b45      	ldr	r3, [pc, #276]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1f0      	bne.n	8008b02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b20:	4b42      	ldr	r3, [pc, #264]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b24:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	031b      	lsls	r3, r3, #12
 8008b2e:	493f      	ldr	r1, [pc, #252]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008b30:	4313      	orrs	r3, r2
 8008b32:	628b      	str	r3, [r1, #40]	@ 0x28
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	3b01      	subs	r3, #1
 8008b44:	025b      	lsls	r3, r3, #9
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	431a      	orrs	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	041b      	lsls	r3, r3, #16
 8008b52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b56:	431a      	orrs	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	061b      	lsls	r3, r3, #24
 8008b60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b64:	4931      	ldr	r1, [pc, #196]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b6a:	4b30      	ldr	r3, [pc, #192]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	492d      	ldr	r1, [pc, #180]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b80:	f023 0220 	bic.w	r2, r3, #32
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	4928      	ldr	r1, [pc, #160]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b8e:	4b27      	ldr	r3, [pc, #156]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b92:	4a26      	ldr	r2, [pc, #152]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008b94:	f023 0310 	bic.w	r3, r3, #16
 8008b98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b9a:	4b24      	ldr	r3, [pc, #144]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008b9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b9e:	4b24      	ldr	r3, [pc, #144]	@ (8008c30 <RCCEx_PLL2_Config+0x160>)
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	69d2      	ldr	r2, [r2, #28]
 8008ba6:	00d2      	lsls	r2, r2, #3
 8008ba8:	4920      	ldr	r1, [pc, #128]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008baa:	4313      	orrs	r3, r2
 8008bac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008bae:	4b1f      	ldr	r3, [pc, #124]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008bb4:	f043 0310 	orr.w	r3, r3, #16
 8008bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d106      	bne.n	8008bce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc4:	4a19      	ldr	r2, [pc, #100]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008bc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008bca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008bcc:	e00f      	b.n	8008bee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d106      	bne.n	8008be2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008bd4:	4b15      	ldr	r3, [pc, #84]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd8:	4a14      	ldr	r2, [pc, #80]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008bda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008be0:	e005      	b.n	8008bee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008be2:	4b12      	ldr	r3, [pc, #72]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be6:	4a11      	ldr	r2, [pc, #68]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008be8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008bec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008bee:	4b0f      	ldr	r3, [pc, #60]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008bf4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008bf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bfa:	f7f9 f955 	bl	8001ea8 <HAL_GetTick>
 8008bfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c00:	e008      	b.n	8008c14 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c02:	f7f9 f951 	bl	8001ea8 <HAL_GetTick>
 8008c06:	4602      	mov	r2, r0
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d901      	bls.n	8008c14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e006      	b.n	8008c22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c14:	4b05      	ldr	r3, [pc, #20]	@ (8008c2c <RCCEx_PLL2_Config+0x15c>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d0f0      	beq.n	8008c02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	58024400 	.word	0x58024400
 8008c30:	ffff0007 	.word	0xffff0007

08008c34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c42:	4b53      	ldr	r3, [pc, #332]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c46:	f003 0303 	and.w	r3, r3, #3
 8008c4a:	2b03      	cmp	r3, #3
 8008c4c:	d101      	bne.n	8008c52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e099      	b.n	8008d86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c52:	4b4f      	ldr	r3, [pc, #316]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a4e      	ldr	r2, [pc, #312]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c5e:	f7f9 f923 	bl	8001ea8 <HAL_GetTick>
 8008c62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c64:	e008      	b.n	8008c78 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c66:	f7f9 f91f 	bl	8001ea8 <HAL_GetTick>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d901      	bls.n	8008c78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e086      	b.n	8008d86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c78:	4b45      	ldr	r3, [pc, #276]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1f0      	bne.n	8008c66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c84:	4b42      	ldr	r3, [pc, #264]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c88:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	051b      	lsls	r3, r3, #20
 8008c92:	493f      	ldr	r1, [pc, #252]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008c94:	4313      	orrs	r3, r2
 8008c96:	628b      	str	r3, [r1, #40]	@ 0x28
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	025b      	lsls	r3, r3, #9
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	431a      	orrs	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	041b      	lsls	r3, r3, #16
 8008cb6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	061b      	lsls	r3, r3, #24
 8008cc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008cc8:	4931      	ldr	r1, [pc, #196]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008cce:	4b30      	ldr	r3, [pc, #192]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	695b      	ldr	r3, [r3, #20]
 8008cda:	492d      	ldr	r1, [pc, #180]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	4928      	ldr	r1, [pc, #160]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008cf2:	4b27      	ldr	r3, [pc, #156]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf6:	4a26      	ldr	r2, [pc, #152]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008cf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008cfe:	4b24      	ldr	r3, [pc, #144]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008d00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d02:	4b24      	ldr	r3, [pc, #144]	@ (8008d94 <RCCEx_PLL3_Config+0x160>)
 8008d04:	4013      	ands	r3, r2
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	69d2      	ldr	r2, [r2, #28]
 8008d0a:	00d2      	lsls	r2, r2, #3
 8008d0c:	4920      	ldr	r1, [pc, #128]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d12:	4b1f      	ldr	r3, [pc, #124]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d16:	4a1e      	ldr	r2, [pc, #120]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d106      	bne.n	8008d32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d24:	4b1a      	ldr	r3, [pc, #104]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d28:	4a19      	ldr	r2, [pc, #100]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008d2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d30:	e00f      	b.n	8008d52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d106      	bne.n	8008d46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d38:	4b15      	ldr	r3, [pc, #84]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3c:	4a14      	ldr	r2, [pc, #80]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008d3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008d42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d44:	e005      	b.n	8008d52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d46:	4b12      	ldr	r3, [pc, #72]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4a:	4a11      	ldr	r2, [pc, #68]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008d4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d52:	4b0f      	ldr	r3, [pc, #60]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a0e      	ldr	r2, [pc, #56]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d5e:	f7f9 f8a3 	bl	8001ea8 <HAL_GetTick>
 8008d62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d64:	e008      	b.n	8008d78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008d66:	f7f9 f89f 	bl	8001ea8 <HAL_GetTick>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d901      	bls.n	8008d78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e006      	b.n	8008d86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d78:	4b05      	ldr	r3, [pc, #20]	@ (8008d90 <RCCEx_PLL3_Config+0x15c>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d0f0      	beq.n	8008d66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	58024400 	.word	0x58024400
 8008d94:	ffff0007 	.word	0xffff0007

08008d98 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e10f      	b.n	8008fca <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a87      	ldr	r2, [pc, #540]	@ (8008fd4 <HAL_SPI_Init+0x23c>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d00f      	beq.n	8008dda <HAL_SPI_Init+0x42>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a86      	ldr	r2, [pc, #536]	@ (8008fd8 <HAL_SPI_Init+0x240>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d00a      	beq.n	8008dda <HAL_SPI_Init+0x42>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a84      	ldr	r2, [pc, #528]	@ (8008fdc <HAL_SPI_Init+0x244>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d005      	beq.n	8008dda <HAL_SPI_Init+0x42>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	2b0f      	cmp	r3, #15
 8008dd4:	d901      	bls.n	8008dda <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e0f7      	b.n	8008fca <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fbba 	bl	8009554 <SPI_GetPacketSize>
 8008de0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a7b      	ldr	r2, [pc, #492]	@ (8008fd4 <HAL_SPI_Init+0x23c>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d00c      	beq.n	8008e06 <HAL_SPI_Init+0x6e>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a79      	ldr	r2, [pc, #484]	@ (8008fd8 <HAL_SPI_Init+0x240>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d007      	beq.n	8008e06 <HAL_SPI_Init+0x6e>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a78      	ldr	r2, [pc, #480]	@ (8008fdc <HAL_SPI_Init+0x244>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d002      	beq.n	8008e06 <HAL_SPI_Init+0x6e>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2b08      	cmp	r3, #8
 8008e04:	d811      	bhi.n	8008e2a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008e0a:	4a72      	ldr	r2, [pc, #456]	@ (8008fd4 <HAL_SPI_Init+0x23c>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d009      	beq.n	8008e24 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a70      	ldr	r2, [pc, #448]	@ (8008fd8 <HAL_SPI_Init+0x240>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d004      	beq.n	8008e24 <HAL_SPI_Init+0x8c>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a6f      	ldr	r2, [pc, #444]	@ (8008fdc <HAL_SPI_Init+0x244>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d104      	bne.n	8008e2e <HAL_SPI_Init+0x96>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2b10      	cmp	r3, #16
 8008e28:	d901      	bls.n	8008e2e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e0cd      	b.n	8008fca <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d106      	bne.n	8008e48 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7f8 f9fe 	bl	8001244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f022 0201 	bic.w	r2, r2, #1
 8008e5e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008e6a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e74:	d119      	bne.n	8008eaa <HAL_SPI_Init+0x112>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e7e:	d103      	bne.n	8008e88 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d008      	beq.n	8008e9a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10c      	bne.n	8008eaa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008e94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e98:	d107      	bne.n	8008eaa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008ea8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00f      	beq.n	8008ed6 <HAL_SPI_Init+0x13e>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	2b06      	cmp	r3, #6
 8008ebc:	d90b      	bls.n	8008ed6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	430a      	orrs	r2, r1
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	e007      	b.n	8008ee6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008ee4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	69da      	ldr	r2, [r3, #28]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eee:	431a      	orrs	r2, r3
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ef8:	ea42 0103 	orr.w	r1, r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	68da      	ldr	r2, [r3, #12]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	430a      	orrs	r2, r1
 8008f06:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f10:	431a      	orrs	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f16:	431a      	orrs	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	431a      	orrs	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	431a      	orrs	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	431a      	orrs	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	431a      	orrs	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	431a      	orrs	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f46:	ea42 0103 	orr.w	r1, r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	430a      	orrs	r2, r1
 8008f54:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d113      	bne.n	8008f86 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f70:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008f84:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f022 0201 	bic.w	r2, r2, #1
 8008f94:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00a      	beq.n	8008fb8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	40013000 	.word	0x40013000
 8008fd8:	40003800 	.word	0x40003800
 8008fdc:	40003c00 	.word	0x40003c00

08008fe0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b08a      	sub	sp, #40	@ 0x28
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008ff8:	6a3a      	ldr	r2, [r7, #32]
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009008:	2300      	movs	r3, #0
 800900a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009012:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3330      	adds	r3, #48	@ 0x30
 800901a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009022:	2b00      	cmp	r3, #0
 8009024:	d010      	beq.n	8009048 <HAL_SPI_IRQHandler+0x68>
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	f003 0308 	and.w	r3, r3, #8
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00b      	beq.n	8009048 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	699a      	ldr	r2, [r3, #24]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800903e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f9c3 	bl	80093cc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8009046:	e192      	b.n	800936e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800904e:	2b00      	cmp	r3, #0
 8009050:	d113      	bne.n	800907a <HAL_SPI_IRQHandler+0x9a>
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	f003 0320 	and.w	r3, r3, #32
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10e      	bne.n	800907a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009062:	2b00      	cmp	r3, #0
 8009064:	d009      	beq.n	800907a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	4798      	blx	r3
    handled = 1UL;
 8009076:	2301      	movs	r3, #1
 8009078:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009080:	2b00      	cmp	r3, #0
 8009082:	d10f      	bne.n	80090a4 <HAL_SPI_IRQHandler+0xc4>
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	f003 0301 	and.w	r3, r3, #1
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00a      	beq.n	80090a4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009094:	2b00      	cmp	r3, #0
 8009096:	d105      	bne.n	80090a4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	4798      	blx	r3
    handled = 1UL;
 80090a0:	2301      	movs	r3, #1
 80090a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	f003 0320 	and.w	r3, r3, #32
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d10f      	bne.n	80090ce <HAL_SPI_IRQHandler+0xee>
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	f003 0302 	and.w	r3, r3, #2
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00a      	beq.n	80090ce <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d105      	bne.n	80090ce <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	4798      	blx	r3
    handled = 1UL;
 80090ca:	2301      	movs	r3, #1
 80090cc:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80090ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f040 8147 	bne.w	8009364 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	f003 0308 	and.w	r3, r3, #8
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f000 808b 	beq.w	80091f8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	699a      	ldr	r2, [r3, #24]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f042 0208 	orr.w	r2, r2, #8
 80090f0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	699a      	ldr	r2, [r3, #24]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f042 0210 	orr.w	r2, r2, #16
 8009100:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	699a      	ldr	r2, [r3, #24]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009110:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	691a      	ldr	r2, [r3, #16]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f022 0208 	bic.w	r2, r2, #8
 8009120:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d13d      	bne.n	80091ac <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8009130:	e036      	b.n	80091a0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	2b0f      	cmp	r3, #15
 8009138:	d90b      	bls.n	8009152 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009142:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009144:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800914a:	1d1a      	adds	r2, r3, #4
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	665a      	str	r2, [r3, #100]	@ 0x64
 8009150:	e01d      	b.n	800918e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	2b07      	cmp	r3, #7
 8009158:	d90b      	bls.n	8009172 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	8812      	ldrh	r2, [r2, #0]
 8009162:	b292      	uxth	r2, r2
 8009164:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800916a:	1c9a      	adds	r2, r3, #2
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	665a      	str	r2, [r3, #100]	@ 0x64
 8009170:	e00d      	b.n	800918e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800917e:	7812      	ldrb	r2, [r2, #0]
 8009180:	b2d2      	uxtb	r2, r2
 8009182:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009188:	1c5a      	adds	r2, r3, #1
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009194:	b29b      	uxth	r3, r3
 8009196:	3b01      	subs	r3, #1
 8009198:	b29a      	uxth	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1c2      	bne.n	8009132 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f931 	bl	8009414 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d003      	beq.n	80091cc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f8f7 	bl	80093b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80091ca:	e0d0      	b.n	800936e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80091cc:	7cfb      	ldrb	r3, [r7, #19]
 80091ce:	2b05      	cmp	r3, #5
 80091d0:	d103      	bne.n	80091da <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f8e6 	bl	80093a4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80091d8:	e0c6      	b.n	8009368 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80091da:	7cfb      	ldrb	r3, [r7, #19]
 80091dc:	2b04      	cmp	r3, #4
 80091de:	d103      	bne.n	80091e8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f8d5 	bl	8009390 <HAL_SPI_RxCpltCallback>
    return;
 80091e6:	e0bf      	b.n	8009368 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80091e8:	7cfb      	ldrb	r3, [r7, #19]
 80091ea:	2b03      	cmp	r3, #3
 80091ec:	f040 80bc 	bne.w	8009368 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f8c3 	bl	800937c <HAL_SPI_TxCpltCallback>
    return;
 80091f6:	e0b7      	b.n	8009368 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f000 80b5 	beq.w	800936e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00f      	beq.n	800922e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009214:	f043 0204 	orr.w	r2, r3, #4
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	699a      	ldr	r2, [r3, #24]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800922c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00f      	beq.n	8009258 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800923e:	f043 0201 	orr.w	r2, r3, #1
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	699a      	ldr	r2, [r3, #24]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009256:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00f      	beq.n	8009282 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009268:	f043 0208 	orr.w	r2, r3, #8
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	699a      	ldr	r2, [r3, #24]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009280:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	f003 0320 	and.w	r3, r3, #32
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00f      	beq.n	80092ac <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009292:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	699a      	ldr	r2, [r3, #24]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f042 0220 	orr.w	r2, r2, #32
 80092aa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d05a      	beq.n	800936c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f022 0201 	bic.w	r2, r2, #1
 80092c4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	6919      	ldr	r1, [r3, #16]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	4b28      	ldr	r3, [pc, #160]	@ (8009374 <HAL_SPI_IRQHandler+0x394>)
 80092d2:	400b      	ands	r3, r1
 80092d4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80092dc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80092e0:	d138      	bne.n	8009354 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	689a      	ldr	r2, [r3, #8]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80092f0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d013      	beq.n	8009322 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009378 <HAL_SPI_IRQHandler+0x398>)
 8009300:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009306:	4618      	mov	r0, r3
 8009308:	f7fa f89c 	bl	8003444 <HAL_DMA_Abort_IT>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d007      	beq.n	8009322 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009318:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009326:	2b00      	cmp	r3, #0
 8009328:	d020      	beq.n	800936c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800932e:	4a12      	ldr	r2, [pc, #72]	@ (8009378 <HAL_SPI_IRQHandler+0x398>)
 8009330:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009336:	4618      	mov	r0, r3
 8009338:	f7fa f884 	bl	8003444 <HAL_DMA_Abort_IT>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d014      	beq.n	800936c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009348:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009352:	e00b      	b.n	800936c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f82b 	bl	80093b8 <HAL_SPI_ErrorCallback>
    return;
 8009362:	e003      	b.n	800936c <HAL_SPI_IRQHandler+0x38c>
    return;
 8009364:	bf00      	nop
 8009366:	e002      	b.n	800936e <HAL_SPI_IRQHandler+0x38e>
    return;
 8009368:	bf00      	nop
 800936a:	e000      	b.n	800936e <HAL_SPI_IRQHandler+0x38e>
    return;
 800936c:	bf00      	nop
  }
}
 800936e:	3728      	adds	r7, #40	@ 0x28
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	fffffc94 	.word	0xfffffc94
 8009378:	080093e1 	.word	0x080093e1

0800937c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2201      	movs	r2, #1
 8009402:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f7ff ffd6 	bl	80093b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800940c:	bf00      	nop
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	699a      	ldr	r2, [r3, #24]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f042 0208 	orr.w	r2, r2, #8
 8009432:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	699a      	ldr	r2, [r3, #24]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f042 0210 	orr.w	r2, r2, #16
 8009442:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f022 0201 	bic.w	r2, r2, #1
 8009452:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6919      	ldr	r1, [r3, #16]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	4b3c      	ldr	r3, [pc, #240]	@ (8009550 <SPI_CloseTransfer+0x13c>)
 8009460:	400b      	ands	r3, r1
 8009462:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689a      	ldr	r2, [r3, #8]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009472:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800947a:	b2db      	uxtb	r3, r3
 800947c:	2b04      	cmp	r3, #4
 800947e:	d014      	beq.n	80094aa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f003 0320 	and.w	r3, r3, #32
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00f      	beq.n	80094aa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009490:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	699a      	ldr	r2, [r3, #24]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f042 0220 	orr.w	r2, r2, #32
 80094a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d014      	beq.n	80094e0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00f      	beq.n	80094e0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094c6:	f043 0204 	orr.w	r2, r3, #4
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	699a      	ldr	r2, [r3, #24]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094de:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00f      	beq.n	800950a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094f0:	f043 0201 	orr.w	r2, r3, #1
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	699a      	ldr	r2, [r3, #24]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009508:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00f      	beq.n	8009534 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800951a:	f043 0208 	orr.w	r2, r3, #8
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	699a      	ldr	r2, [r3, #24]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009532:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009544:	bf00      	nop
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	fffffc90 	.word	0xfffffc90

08009554 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009560:	095b      	lsrs	r3, r3, #5
 8009562:	3301      	adds	r3, #1
 8009564:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	3301      	adds	r3, #1
 800956c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	3307      	adds	r3, #7
 8009572:	08db      	lsrs	r3, r3, #3
 8009574:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	fb02 f303 	mul.w	r3, r2, r3
}
 800957e:	4618      	mov	r0, r3
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr

0800958a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b082      	sub	sp, #8
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d101      	bne.n	800959c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e042      	b.n	8009622 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d106      	bne.n	80095b4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7f8 f9e4 	bl	800197c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2224      	movs	r2, #36	@ 0x24
 80095b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f022 0201 	bic.w	r2, r2, #1
 80095ca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d002      	beq.n	80095da <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f001 fbd7 	bl	800ad88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fd68 	bl	800a0b0 <UART_SetConfig>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d101      	bne.n	80095ea <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e01b      	b.n	8009622 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	685a      	ldr	r2, [r3, #4]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80095f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689a      	ldr	r2, [r3, #8]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009608:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f042 0201 	orr.w	r2, r2, #1
 8009618:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f001 fc56 	bl	800aecc <UART_CheckIdleState>
 8009620:	4603      	mov	r3, r0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b08a      	sub	sp, #40	@ 0x28
 800962e:	af02      	add	r7, sp, #8
 8009630:	60f8      	str	r0, [r7, #12]
 8009632:	60b9      	str	r1, [r7, #8]
 8009634:	603b      	str	r3, [r7, #0]
 8009636:	4613      	mov	r3, r2
 8009638:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009640:	2b20      	cmp	r3, #32
 8009642:	d17b      	bne.n	800973c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d002      	beq.n	8009650 <HAL_UART_Transmit+0x26>
 800964a:	88fb      	ldrh	r3, [r7, #6]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d101      	bne.n	8009654 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e074      	b.n	800973e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2221      	movs	r2, #33	@ 0x21
 8009660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009664:	f7f8 fc20 	bl	8001ea8 <HAL_GetTick>
 8009668:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	88fa      	ldrh	r2, [r7, #6]
 800966e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	88fa      	ldrh	r2, [r7, #6]
 8009676:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009682:	d108      	bne.n	8009696 <HAL_UART_Transmit+0x6c>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d104      	bne.n	8009696 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800968c:	2300      	movs	r3, #0
 800968e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	61bb      	str	r3, [r7, #24]
 8009694:	e003      	b.n	800969e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800969a:	2300      	movs	r3, #0
 800969c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800969e:	e030      	b.n	8009702 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	2200      	movs	r2, #0
 80096a8:	2180      	movs	r1, #128	@ 0x80
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f001 fcb8 	bl	800b020 <UART_WaitOnFlagUntilTimeout>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d005      	beq.n	80096c2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2220      	movs	r2, #32
 80096ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	e03d      	b.n	800973e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10b      	bne.n	80096e0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	881b      	ldrh	r3, [r3, #0]
 80096cc:	461a      	mov	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	3302      	adds	r3, #2
 80096dc:	61bb      	str	r3, [r7, #24]
 80096de:	e007      	b.n	80096f0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	781a      	ldrb	r2, [r3, #0]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	3301      	adds	r3, #1
 80096ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	3b01      	subs	r3, #1
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009708:	b29b      	uxth	r3, r3
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1c8      	bne.n	80096a0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	2200      	movs	r2, #0
 8009716:	2140      	movs	r1, #64	@ 0x40
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	f001 fc81 	bl	800b020 <UART_WaitOnFlagUntilTimeout>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d005      	beq.n	8009730 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2220      	movs	r2, #32
 8009728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	e006      	b.n	800973e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2220      	movs	r2, #32
 8009734:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	e000      	b.n	800973e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800973c:	2302      	movs	r3, #2
  }
}
 800973e:	4618      	mov	r0, r3
 8009740:	3720      	adds	r7, #32
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
	...

08009748 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b09a      	sub	sp, #104	@ 0x68
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009758:	e853 3f00 	ldrex	r3, [r3]
 800975c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800975e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009760:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009764:	667b      	str	r3, [r7, #100]	@ 0x64
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	461a      	mov	r2, r3
 800976c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800976e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009770:	653a      	str	r2, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009772:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009774:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009776:	e841 2300 	strex	r3, r2, [r1]
 800977a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800977c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1e6      	bne.n	8009750 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3308      	adds	r3, #8
 8009788:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800978c:	e853 3f00 	ldrex	r3, [r3]
 8009790:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009794:	4b46      	ldr	r3, [pc, #280]	@ (80098b0 <HAL_UART_AbortReceive+0x168>)
 8009796:	4013      	ands	r3, r2
 8009798:	663b      	str	r3, [r7, #96]	@ 0x60
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3308      	adds	r3, #8
 80097a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80097a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80097a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097aa:	e841 2300 	strex	r3, r2, [r1]
 80097ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1e5      	bne.n	8009782 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d118      	bne.n	80097f0 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c4:	6a3b      	ldr	r3, [r7, #32]
 80097c6:	e853 3f00 	ldrex	r3, [r3]
 80097ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	f023 0310 	bic.w	r3, r3, #16
 80097d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	461a      	mov	r2, r3
 80097da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097de:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097e4:	e841 2300 	strex	r3, r2, [r1]
 80097e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1e6      	bne.n	80097be <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097fa:	2b40      	cmp	r3, #64	@ 0x40
 80097fc:	d13b      	bne.n	8009876 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3308      	adds	r3, #8
 8009804:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	e853 3f00 	ldrex	r3, [r3]
 800980c:	60bb      	str	r3, [r7, #8]
   return(result);
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009814:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3308      	adds	r3, #8
 800981c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800981e:	61ba      	str	r2, [r7, #24]
 8009820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009822:	6979      	ldr	r1, [r7, #20]
 8009824:	69ba      	ldr	r2, [r7, #24]
 8009826:	e841 2300 	strex	r3, r2, [r1]
 800982a:	613b      	str	r3, [r7, #16]
   return(result);
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1e5      	bne.n	80097fe <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009838:	2b00      	cmp	r3, #0
 800983a:	d01c      	beq.n	8009876 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009842:	2200      	movs	r2, #0
 8009844:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800984c:	4618      	mov	r0, r3
 800984e:	f7f9 fadb 	bl	8002e08 <HAL_DMA_Abort>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00e      	beq.n	8009876 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800985e:	4618      	mov	r0, r3
 8009860:	f7fa ff98 	bl	8004794 <HAL_DMA_GetError>
 8009864:	4603      	mov	r3, r0
 8009866:	2b20      	cmp	r3, #32
 8009868:	d105      	bne.n	8009876 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2210      	movs	r2, #16
 800986e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009872:	2303      	movs	r3, #3
 8009874:	e017      	b.n	80098a6 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	220f      	movs	r2, #15
 8009884:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	699a      	ldr	r2, [r3, #24]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f042 0208 	orr.w	r2, r2, #8
 8009894:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2220      	movs	r2, #32
 800989a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3768      	adds	r7, #104	@ 0x68
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	effffffe 	.word	0xeffffffe

080098b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b0ba      	sub	sp, #232	@ 0xe8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80098da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80098de:	f640 030f 	movw	r3, #2063	@ 0x80f
 80098e2:	4013      	ands	r3, r2
 80098e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80098e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d11b      	bne.n	8009928 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098f4:	f003 0320 	and.w	r3, r3, #32
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d015      	beq.n	8009928 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009900:	f003 0320 	and.w	r3, r3, #32
 8009904:	2b00      	cmp	r3, #0
 8009906:	d105      	bne.n	8009914 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800990c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d009      	beq.n	8009928 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 8393 	beq.w	800a044 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	4798      	blx	r3
      }
      return;
 8009926:	e38d      	b.n	800a044 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009928:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800992c:	2b00      	cmp	r3, #0
 800992e:	f000 8123 	beq.w	8009b78 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009932:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009936:	4b8d      	ldr	r3, [pc, #564]	@ (8009b6c <HAL_UART_IRQHandler+0x2b8>)
 8009938:	4013      	ands	r3, r2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d106      	bne.n	800994c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800993e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009942:	4b8b      	ldr	r3, [pc, #556]	@ (8009b70 <HAL_UART_IRQHandler+0x2bc>)
 8009944:	4013      	ands	r3, r2
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 8116 	beq.w	8009b78 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800994c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009950:	f003 0301 	and.w	r3, r3, #1
 8009954:	2b00      	cmp	r3, #0
 8009956:	d011      	beq.n	800997c <HAL_UART_IRQHandler+0xc8>
 8009958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800995c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00b      	beq.n	800997c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2201      	movs	r2, #1
 800996a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009972:	f043 0201 	orr.w	r2, r3, #1
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800997c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009980:	f003 0302 	and.w	r3, r3, #2
 8009984:	2b00      	cmp	r3, #0
 8009986:	d011      	beq.n	80099ac <HAL_UART_IRQHandler+0xf8>
 8009988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800998c:	f003 0301 	and.w	r3, r3, #1
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00b      	beq.n	80099ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2202      	movs	r2, #2
 800999a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099a2:	f043 0204 	orr.w	r2, r3, #4
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099b0:	f003 0304 	and.w	r3, r3, #4
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d011      	beq.n	80099dc <HAL_UART_IRQHandler+0x128>
 80099b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00b      	beq.n	80099dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2204      	movs	r2, #4
 80099ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099d2:	f043 0202 	orr.w	r2, r3, #2
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80099dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099e0:	f003 0308 	and.w	r3, r3, #8
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d017      	beq.n	8009a18 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099ec:	f003 0320 	and.w	r3, r3, #32
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d105      	bne.n	8009a00 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80099f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80099f8:	4b5c      	ldr	r3, [pc, #368]	@ (8009b6c <HAL_UART_IRQHandler+0x2b8>)
 80099fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00b      	beq.n	8009a18 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2208      	movs	r2, #8
 8009a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a0e:	f043 0208 	orr.w	r2, r3, #8
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d012      	beq.n	8009a4a <HAL_UART_IRQHandler+0x196>
 8009a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00c      	beq.n	8009a4a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a40:	f043 0220 	orr.w	r2, r3, #32
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 82f9 	beq.w	800a048 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a5a:	f003 0320 	and.w	r3, r3, #32
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d013      	beq.n	8009a8a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a66:	f003 0320 	and.w	r3, r3, #32
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d105      	bne.n	8009a7a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d007      	beq.n	8009a8a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a9e:	2b40      	cmp	r3, #64	@ 0x40
 8009aa0:	d005      	beq.n	8009aae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009aa6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d054      	beq.n	8009b58 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f001 fc0c 	bl	800b2cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009abe:	2b40      	cmp	r3, #64	@ 0x40
 8009ac0:	d146      	bne.n	8009b50 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	3308      	adds	r3, #8
 8009ac8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ad0:	e853 3f00 	ldrex	r3, [r3]
 8009ad4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009adc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3308      	adds	r3, #8
 8009aea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009aee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009af2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009afa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009afe:	e841 2300 	strex	r3, r2, [r1]
 8009b02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009b06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1d9      	bne.n	8009ac2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d017      	beq.n	8009b48 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b1e:	4a15      	ldr	r2, [pc, #84]	@ (8009b74 <HAL_UART_IRQHandler+0x2c0>)
 8009b20:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7f9 fc8b 	bl	8003444 <HAL_DMA_Abort_IT>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d019      	beq.n	8009b68 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009b42:	4610      	mov	r0, r2
 8009b44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b46:	e00f      	b.n	8009b68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 faa7 	bl	800a09c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b4e:	e00b      	b.n	8009b68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 faa3 	bl	800a09c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b56:	e007      	b.n	8009b68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fa9f 	bl	800a09c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009b66:	e26f      	b.n	800a048 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b68:	bf00      	nop
    return;
 8009b6a:	e26d      	b.n	800a048 <HAL_UART_IRQHandler+0x794>
 8009b6c:	10000001 	.word	0x10000001
 8009b70:	04000120 	.word	0x04000120
 8009b74:	0800b57f 	.word	0x0800b57f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	f040 8203 	bne.w	8009f88 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b86:	f003 0310 	and.w	r3, r3, #16
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 81fc 	beq.w	8009f88 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b94:	f003 0310 	and.w	r3, r3, #16
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f000 81f5 	beq.w	8009f88 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2210      	movs	r2, #16
 8009ba4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bb0:	2b40      	cmp	r3, #64	@ 0x40
 8009bb2:	f040 816d 	bne.w	8009e90 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4aa4      	ldr	r2, [pc, #656]	@ (8009e50 <HAL_UART_IRQHandler+0x59c>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d068      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4aa1      	ldr	r2, [pc, #644]	@ (8009e54 <HAL_UART_IRQHandler+0x5a0>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d061      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a9f      	ldr	r2, [pc, #636]	@ (8009e58 <HAL_UART_IRQHandler+0x5a4>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d05a      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a9c      	ldr	r2, [pc, #624]	@ (8009e5c <HAL_UART_IRQHandler+0x5a8>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d053      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a9a      	ldr	r2, [pc, #616]	@ (8009e60 <HAL_UART_IRQHandler+0x5ac>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d04c      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a97      	ldr	r2, [pc, #604]	@ (8009e64 <HAL_UART_IRQHandler+0x5b0>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d045      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a95      	ldr	r2, [pc, #596]	@ (8009e68 <HAL_UART_IRQHandler+0x5b4>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d03e      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a92      	ldr	r2, [pc, #584]	@ (8009e6c <HAL_UART_IRQHandler+0x5b8>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d037      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a90      	ldr	r2, [pc, #576]	@ (8009e70 <HAL_UART_IRQHandler+0x5bc>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d030      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a8d      	ldr	r2, [pc, #564]	@ (8009e74 <HAL_UART_IRQHandler+0x5c0>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d029      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a8b      	ldr	r2, [pc, #556]	@ (8009e78 <HAL_UART_IRQHandler+0x5c4>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d022      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a88      	ldr	r2, [pc, #544]	@ (8009e7c <HAL_UART_IRQHandler+0x5c8>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d01b      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a86      	ldr	r2, [pc, #536]	@ (8009e80 <HAL_UART_IRQHandler+0x5cc>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d014      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a83      	ldr	r2, [pc, #524]	@ (8009e84 <HAL_UART_IRQHandler+0x5d0>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d00d      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a81      	ldr	r2, [pc, #516]	@ (8009e88 <HAL_UART_IRQHandler+0x5d4>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d006      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a7e      	ldr	r2, [pc, #504]	@ (8009e8c <HAL_UART_IRQHandler+0x5d8>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d106      	bne.n	8009ca4 <HAL_UART_IRQHandler+0x3f0>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	e005      	b.n	8009cb0 <HAL_UART_IRQHandler+0x3fc>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009cb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 80ad 	beq.w	8009e18 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009cc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	f080 80a5 	bcs.w	8009e18 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009cd4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cde:	69db      	ldr	r3, [r3, #28]
 8009ce0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ce4:	f000 8087 	beq.w	8009df6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009cf4:	e853 3f00 	ldrex	r3, [r3]
 8009cf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009d12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009d1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009d22:	e841 2300 	strex	r3, r2, [r1]
 8009d26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009d2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1da      	bne.n	8009ce8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3308      	adds	r3, #8
 8009d38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d3c:	e853 3f00 	ldrex	r3, [r3]
 8009d40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009d42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d44:	f023 0301 	bic.w	r3, r3, #1
 8009d48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3308      	adds	r3, #8
 8009d52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009d56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009d5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009d5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009d62:	e841 2300 	strex	r3, r2, [r1]
 8009d66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009d68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1e1      	bne.n	8009d32 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3308      	adds	r3, #8
 8009d74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d78:	e853 3f00 	ldrex	r3, [r3]
 8009d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009d7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	3308      	adds	r3, #8
 8009d8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009d92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009d98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d9a:	e841 2300 	strex	r3, r2, [r1]
 8009d9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009da0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1e3      	bne.n	8009d6e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2220      	movs	r2, #32
 8009daa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dbc:	e853 3f00 	ldrex	r3, [r3]
 8009dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dc4:	f023 0310 	bic.w	r3, r3, #16
 8009dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009dd8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ddc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009dde:	e841 2300 	strex	r3, r2, [r1]
 8009de2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009de4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1e4      	bne.n	8009db4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7f9 f809 	bl	8002e08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2202      	movs	r2, #2
 8009dfa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	4619      	mov	r1, r3
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f7f7 f897 	bl	8000f44 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009e16:	e119      	b.n	800a04c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e22:	429a      	cmp	r2, r3
 8009e24:	f040 8112 	bne.w	800a04c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e2e:	69db      	ldr	r3, [r3, #28]
 8009e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e34:	f040 810a 	bne.w	800a04c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2202      	movs	r2, #2
 8009e3c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e44:	4619      	mov	r1, r3
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7f7 f87c 	bl	8000f44 <HAL_UARTEx_RxEventCallback>
      return;
 8009e4c:	e0fe      	b.n	800a04c <HAL_UART_IRQHandler+0x798>
 8009e4e:	bf00      	nop
 8009e50:	40020010 	.word	0x40020010
 8009e54:	40020028 	.word	0x40020028
 8009e58:	40020040 	.word	0x40020040
 8009e5c:	40020058 	.word	0x40020058
 8009e60:	40020070 	.word	0x40020070
 8009e64:	40020088 	.word	0x40020088
 8009e68:	400200a0 	.word	0x400200a0
 8009e6c:	400200b8 	.word	0x400200b8
 8009e70:	40020410 	.word	0x40020410
 8009e74:	40020428 	.word	0x40020428
 8009e78:	40020440 	.word	0x40020440
 8009e7c:	40020458 	.word	0x40020458
 8009e80:	40020470 	.word	0x40020470
 8009e84:	40020488 	.word	0x40020488
 8009e88:	400204a0 	.word	0x400204a0
 8009e8c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f000 80cf 	beq.w	800a050 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8009eb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f000 80ca 	beq.w	800a050 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec4:	e853 3f00 	ldrex	r3, [r3]
 8009ec8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ecc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ed0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	461a      	mov	r2, r3
 8009eda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009ede:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ee0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ee4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ee6:	e841 2300 	strex	r3, r2, [r1]
 8009eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1e4      	bne.n	8009ebc <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3308      	adds	r3, #8
 8009ef8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	623b      	str	r3, [r7, #32]
   return(result);
 8009f02:	6a3a      	ldr	r2, [r7, #32]
 8009f04:	4b55      	ldr	r3, [pc, #340]	@ (800a05c <HAL_UART_IRQHandler+0x7a8>)
 8009f06:	4013      	ands	r3, r2
 8009f08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3308      	adds	r3, #8
 8009f12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009f16:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f1e:	e841 2300 	strex	r3, r2, [r1]
 8009f22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1e3      	bne.n	8009ef2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	e853 3f00 	ldrex	r3, [r3]
 8009f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f023 0310 	bic.w	r3, r3, #16
 8009f52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009f60:	61fb      	str	r3, [r7, #28]
 8009f62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f64:	69b9      	ldr	r1, [r7, #24]
 8009f66:	69fa      	ldr	r2, [r7, #28]
 8009f68:	e841 2300 	strex	r3, r2, [r1]
 8009f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1e4      	bne.n	8009f3e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f7f6 ffdf 	bl	8000f44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f86:	e063      	b.n	800a050 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00e      	beq.n	8009fb2 <HAL_UART_IRQHandler+0x6fe>
 8009f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d008      	beq.n	8009fb2 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009fa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f001 fb24 	bl	800b5f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fb0:	e051      	b.n	800a056 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d014      	beq.n	8009fe8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d105      	bne.n	8009fd6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d008      	beq.n	8009fe8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d03a      	beq.n	800a054 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	4798      	blx	r3
    }
    return;
 8009fe6:	e035      	b.n	800a054 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d009      	beq.n	800a008 <HAL_UART_IRQHandler+0x754>
 8009ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d003      	beq.n	800a008 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f001 face 	bl	800b5a2 <UART_EndTransmit_IT>
    return;
 800a006:	e026      	b.n	800a056 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a00c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a010:	2b00      	cmp	r3, #0
 800a012:	d009      	beq.n	800a028 <HAL_UART_IRQHandler+0x774>
 800a014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a018:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d003      	beq.n	800a028 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f001 fafd 	bl	800b620 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a026:	e016      	b.n	800a056 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a02c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d010      	beq.n	800a056 <HAL_UART_IRQHandler+0x7a2>
 800a034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	da0c      	bge.n	800a056 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f001 fae5 	bl	800b60c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a042:	e008      	b.n	800a056 <HAL_UART_IRQHandler+0x7a2>
      return;
 800a044:	bf00      	nop
 800a046:	e006      	b.n	800a056 <HAL_UART_IRQHandler+0x7a2>
    return;
 800a048:	bf00      	nop
 800a04a:	e004      	b.n	800a056 <HAL_UART_IRQHandler+0x7a2>
      return;
 800a04c:	bf00      	nop
 800a04e:	e002      	b.n	800a056 <HAL_UART_IRQHandler+0x7a2>
      return;
 800a050:	bf00      	nop
 800a052:	e000      	b.n	800a056 <HAL_UART_IRQHandler+0x7a2>
    return;
 800a054:	bf00      	nop
  }
}
 800a056:	37e8      	adds	r7, #232	@ 0xe8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	effffffe 	.word	0xeffffffe

0800a060 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a068:	bf00      	nop
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a090:	bf00      	nop
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a0a4:	bf00      	nop
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0b4:	b092      	sub	sp, #72	@ 0x48
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	689a      	ldr	r2, [r3, #8]
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	431a      	orrs	r2, r3
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	431a      	orrs	r2, r3
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	69db      	ldr	r3, [r3, #28]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	4bbe      	ldr	r3, [pc, #760]	@ (800a3d8 <UART_SetConfig+0x328>)
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	697a      	ldr	r2, [r7, #20]
 800a0e4:	6812      	ldr	r2, [r2, #0]
 800a0e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a0e8:	430b      	orrs	r3, r1
 800a0ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	68da      	ldr	r2, [r3, #12]
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	430a      	orrs	r2, r1
 800a100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4ab3      	ldr	r2, [pc, #716]	@ (800a3dc <UART_SetConfig+0x32c>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d004      	beq.n	800a11c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a118:	4313      	orrs	r3, r2
 800a11a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	689a      	ldr	r2, [r3, #8]
 800a122:	4baf      	ldr	r3, [pc, #700]	@ (800a3e0 <UART_SetConfig+0x330>)
 800a124:	4013      	ands	r3, r2
 800a126:	697a      	ldr	r2, [r7, #20]
 800a128:	6812      	ldr	r2, [r2, #0]
 800a12a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a12c:	430b      	orrs	r3, r1
 800a12e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a136:	f023 010f 	bic.w	r1, r3, #15
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	430a      	orrs	r2, r1
 800a144:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4aa6      	ldr	r2, [pc, #664]	@ (800a3e4 <UART_SetConfig+0x334>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d177      	bne.n	800a240 <UART_SetConfig+0x190>
 800a150:	4ba5      	ldr	r3, [pc, #660]	@ (800a3e8 <UART_SetConfig+0x338>)
 800a152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a154:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a158:	2b28      	cmp	r3, #40	@ 0x28
 800a15a:	d86d      	bhi.n	800a238 <UART_SetConfig+0x188>
 800a15c:	a201      	add	r2, pc, #4	@ (adr r2, 800a164 <UART_SetConfig+0xb4>)
 800a15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a162:	bf00      	nop
 800a164:	0800a209 	.word	0x0800a209
 800a168:	0800a239 	.word	0x0800a239
 800a16c:	0800a239 	.word	0x0800a239
 800a170:	0800a239 	.word	0x0800a239
 800a174:	0800a239 	.word	0x0800a239
 800a178:	0800a239 	.word	0x0800a239
 800a17c:	0800a239 	.word	0x0800a239
 800a180:	0800a239 	.word	0x0800a239
 800a184:	0800a211 	.word	0x0800a211
 800a188:	0800a239 	.word	0x0800a239
 800a18c:	0800a239 	.word	0x0800a239
 800a190:	0800a239 	.word	0x0800a239
 800a194:	0800a239 	.word	0x0800a239
 800a198:	0800a239 	.word	0x0800a239
 800a19c:	0800a239 	.word	0x0800a239
 800a1a0:	0800a239 	.word	0x0800a239
 800a1a4:	0800a219 	.word	0x0800a219
 800a1a8:	0800a239 	.word	0x0800a239
 800a1ac:	0800a239 	.word	0x0800a239
 800a1b0:	0800a239 	.word	0x0800a239
 800a1b4:	0800a239 	.word	0x0800a239
 800a1b8:	0800a239 	.word	0x0800a239
 800a1bc:	0800a239 	.word	0x0800a239
 800a1c0:	0800a239 	.word	0x0800a239
 800a1c4:	0800a221 	.word	0x0800a221
 800a1c8:	0800a239 	.word	0x0800a239
 800a1cc:	0800a239 	.word	0x0800a239
 800a1d0:	0800a239 	.word	0x0800a239
 800a1d4:	0800a239 	.word	0x0800a239
 800a1d8:	0800a239 	.word	0x0800a239
 800a1dc:	0800a239 	.word	0x0800a239
 800a1e0:	0800a239 	.word	0x0800a239
 800a1e4:	0800a229 	.word	0x0800a229
 800a1e8:	0800a239 	.word	0x0800a239
 800a1ec:	0800a239 	.word	0x0800a239
 800a1f0:	0800a239 	.word	0x0800a239
 800a1f4:	0800a239 	.word	0x0800a239
 800a1f8:	0800a239 	.word	0x0800a239
 800a1fc:	0800a239 	.word	0x0800a239
 800a200:	0800a239 	.word	0x0800a239
 800a204:	0800a231 	.word	0x0800a231
 800a208:	2301      	movs	r3, #1
 800a20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a20e:	e326      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a210:	2304      	movs	r3, #4
 800a212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a216:	e322      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a218:	2308      	movs	r3, #8
 800a21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a21e:	e31e      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a220:	2310      	movs	r3, #16
 800a222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a226:	e31a      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a228:	2320      	movs	r3, #32
 800a22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a22e:	e316      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a230:	2340      	movs	r3, #64	@ 0x40
 800a232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a236:	e312      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a238:	2380      	movs	r3, #128	@ 0x80
 800a23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a23e:	e30e      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a69      	ldr	r2, [pc, #420]	@ (800a3ec <UART_SetConfig+0x33c>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d130      	bne.n	800a2ac <UART_SetConfig+0x1fc>
 800a24a:	4b67      	ldr	r3, [pc, #412]	@ (800a3e8 <UART_SetConfig+0x338>)
 800a24c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a24e:	f003 0307 	and.w	r3, r3, #7
 800a252:	2b05      	cmp	r3, #5
 800a254:	d826      	bhi.n	800a2a4 <UART_SetConfig+0x1f4>
 800a256:	a201      	add	r2, pc, #4	@ (adr r2, 800a25c <UART_SetConfig+0x1ac>)
 800a258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25c:	0800a275 	.word	0x0800a275
 800a260:	0800a27d 	.word	0x0800a27d
 800a264:	0800a285 	.word	0x0800a285
 800a268:	0800a28d 	.word	0x0800a28d
 800a26c:	0800a295 	.word	0x0800a295
 800a270:	0800a29d 	.word	0x0800a29d
 800a274:	2300      	movs	r3, #0
 800a276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a27a:	e2f0      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a27c:	2304      	movs	r3, #4
 800a27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a282:	e2ec      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a284:	2308      	movs	r3, #8
 800a286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a28a:	e2e8      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a28c:	2310      	movs	r3, #16
 800a28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a292:	e2e4      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a294:	2320      	movs	r3, #32
 800a296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a29a:	e2e0      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a29c:	2340      	movs	r3, #64	@ 0x40
 800a29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2a2:	e2dc      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a2a4:	2380      	movs	r3, #128	@ 0x80
 800a2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2aa:	e2d8      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a4f      	ldr	r2, [pc, #316]	@ (800a3f0 <UART_SetConfig+0x340>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d130      	bne.n	800a318 <UART_SetConfig+0x268>
 800a2b6:	4b4c      	ldr	r3, [pc, #304]	@ (800a3e8 <UART_SetConfig+0x338>)
 800a2b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2ba:	f003 0307 	and.w	r3, r3, #7
 800a2be:	2b05      	cmp	r3, #5
 800a2c0:	d826      	bhi.n	800a310 <UART_SetConfig+0x260>
 800a2c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a2c8 <UART_SetConfig+0x218>)
 800a2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c8:	0800a2e1 	.word	0x0800a2e1
 800a2cc:	0800a2e9 	.word	0x0800a2e9
 800a2d0:	0800a2f1 	.word	0x0800a2f1
 800a2d4:	0800a2f9 	.word	0x0800a2f9
 800a2d8:	0800a301 	.word	0x0800a301
 800a2dc:	0800a309 	.word	0x0800a309
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2e6:	e2ba      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a2e8:	2304      	movs	r3, #4
 800a2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ee:	e2b6      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a2f0:	2308      	movs	r3, #8
 800a2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2f6:	e2b2      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a2f8:	2310      	movs	r3, #16
 800a2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2fe:	e2ae      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a300:	2320      	movs	r3, #32
 800a302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a306:	e2aa      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a308:	2340      	movs	r3, #64	@ 0x40
 800a30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a30e:	e2a6      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a310:	2380      	movs	r3, #128	@ 0x80
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a316:	e2a2      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a35      	ldr	r2, [pc, #212]	@ (800a3f4 <UART_SetConfig+0x344>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d130      	bne.n	800a384 <UART_SetConfig+0x2d4>
 800a322:	4b31      	ldr	r3, [pc, #196]	@ (800a3e8 <UART_SetConfig+0x338>)
 800a324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a326:	f003 0307 	and.w	r3, r3, #7
 800a32a:	2b05      	cmp	r3, #5
 800a32c:	d826      	bhi.n	800a37c <UART_SetConfig+0x2cc>
 800a32e:	a201      	add	r2, pc, #4	@ (adr r2, 800a334 <UART_SetConfig+0x284>)
 800a330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a334:	0800a34d 	.word	0x0800a34d
 800a338:	0800a355 	.word	0x0800a355
 800a33c:	0800a35d 	.word	0x0800a35d
 800a340:	0800a365 	.word	0x0800a365
 800a344:	0800a36d 	.word	0x0800a36d
 800a348:	0800a375 	.word	0x0800a375
 800a34c:	2300      	movs	r3, #0
 800a34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a352:	e284      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a354:	2304      	movs	r3, #4
 800a356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a35a:	e280      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a35c:	2308      	movs	r3, #8
 800a35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a362:	e27c      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a364:	2310      	movs	r3, #16
 800a366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a36a:	e278      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a36c:	2320      	movs	r3, #32
 800a36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a372:	e274      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a374:	2340      	movs	r3, #64	@ 0x40
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37a:	e270      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a37c:	2380      	movs	r3, #128	@ 0x80
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a382:	e26c      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a1b      	ldr	r2, [pc, #108]	@ (800a3f8 <UART_SetConfig+0x348>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d142      	bne.n	800a414 <UART_SetConfig+0x364>
 800a38e:	4b16      	ldr	r3, [pc, #88]	@ (800a3e8 <UART_SetConfig+0x338>)
 800a390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a392:	f003 0307 	and.w	r3, r3, #7
 800a396:	2b05      	cmp	r3, #5
 800a398:	d838      	bhi.n	800a40c <UART_SetConfig+0x35c>
 800a39a:	a201      	add	r2, pc, #4	@ (adr r2, 800a3a0 <UART_SetConfig+0x2f0>)
 800a39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a0:	0800a3b9 	.word	0x0800a3b9
 800a3a4:	0800a3c1 	.word	0x0800a3c1
 800a3a8:	0800a3c9 	.word	0x0800a3c9
 800a3ac:	0800a3d1 	.word	0x0800a3d1
 800a3b0:	0800a3fd 	.word	0x0800a3fd
 800a3b4:	0800a405 	.word	0x0800a405
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3be:	e24e      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a3c0:	2304      	movs	r3, #4
 800a3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c6:	e24a      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a3c8:	2308      	movs	r3, #8
 800a3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ce:	e246      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a3d0:	2310      	movs	r3, #16
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d6:	e242      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a3d8:	cfff69f3 	.word	0xcfff69f3
 800a3dc:	58000c00 	.word	0x58000c00
 800a3e0:	11fff4ff 	.word	0x11fff4ff
 800a3e4:	40011000 	.word	0x40011000
 800a3e8:	58024400 	.word	0x58024400
 800a3ec:	40004400 	.word	0x40004400
 800a3f0:	40004800 	.word	0x40004800
 800a3f4:	40004c00 	.word	0x40004c00
 800a3f8:	40005000 	.word	0x40005000
 800a3fc:	2320      	movs	r3, #32
 800a3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a402:	e22c      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a404:	2340      	movs	r3, #64	@ 0x40
 800a406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40a:	e228      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a40c:	2380      	movs	r3, #128	@ 0x80
 800a40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a412:	e224      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4ab1      	ldr	r2, [pc, #708]	@ (800a6e0 <UART_SetConfig+0x630>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d176      	bne.n	800a50c <UART_SetConfig+0x45c>
 800a41e:	4bb1      	ldr	r3, [pc, #708]	@ (800a6e4 <UART_SetConfig+0x634>)
 800a420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a422:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a426:	2b28      	cmp	r3, #40	@ 0x28
 800a428:	d86c      	bhi.n	800a504 <UART_SetConfig+0x454>
 800a42a:	a201      	add	r2, pc, #4	@ (adr r2, 800a430 <UART_SetConfig+0x380>)
 800a42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a430:	0800a4d5 	.word	0x0800a4d5
 800a434:	0800a505 	.word	0x0800a505
 800a438:	0800a505 	.word	0x0800a505
 800a43c:	0800a505 	.word	0x0800a505
 800a440:	0800a505 	.word	0x0800a505
 800a444:	0800a505 	.word	0x0800a505
 800a448:	0800a505 	.word	0x0800a505
 800a44c:	0800a505 	.word	0x0800a505
 800a450:	0800a4dd 	.word	0x0800a4dd
 800a454:	0800a505 	.word	0x0800a505
 800a458:	0800a505 	.word	0x0800a505
 800a45c:	0800a505 	.word	0x0800a505
 800a460:	0800a505 	.word	0x0800a505
 800a464:	0800a505 	.word	0x0800a505
 800a468:	0800a505 	.word	0x0800a505
 800a46c:	0800a505 	.word	0x0800a505
 800a470:	0800a4e5 	.word	0x0800a4e5
 800a474:	0800a505 	.word	0x0800a505
 800a478:	0800a505 	.word	0x0800a505
 800a47c:	0800a505 	.word	0x0800a505
 800a480:	0800a505 	.word	0x0800a505
 800a484:	0800a505 	.word	0x0800a505
 800a488:	0800a505 	.word	0x0800a505
 800a48c:	0800a505 	.word	0x0800a505
 800a490:	0800a4ed 	.word	0x0800a4ed
 800a494:	0800a505 	.word	0x0800a505
 800a498:	0800a505 	.word	0x0800a505
 800a49c:	0800a505 	.word	0x0800a505
 800a4a0:	0800a505 	.word	0x0800a505
 800a4a4:	0800a505 	.word	0x0800a505
 800a4a8:	0800a505 	.word	0x0800a505
 800a4ac:	0800a505 	.word	0x0800a505
 800a4b0:	0800a4f5 	.word	0x0800a4f5
 800a4b4:	0800a505 	.word	0x0800a505
 800a4b8:	0800a505 	.word	0x0800a505
 800a4bc:	0800a505 	.word	0x0800a505
 800a4c0:	0800a505 	.word	0x0800a505
 800a4c4:	0800a505 	.word	0x0800a505
 800a4c8:	0800a505 	.word	0x0800a505
 800a4cc:	0800a505 	.word	0x0800a505
 800a4d0:	0800a4fd 	.word	0x0800a4fd
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4da:	e1c0      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a4dc:	2304      	movs	r3, #4
 800a4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e2:	e1bc      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a4e4:	2308      	movs	r3, #8
 800a4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ea:	e1b8      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a4ec:	2310      	movs	r3, #16
 800a4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4f2:	e1b4      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a4f4:	2320      	movs	r3, #32
 800a4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4fa:	e1b0      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a4fc:	2340      	movs	r3, #64	@ 0x40
 800a4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a502:	e1ac      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a504:	2380      	movs	r3, #128	@ 0x80
 800a506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50a:	e1a8      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a75      	ldr	r2, [pc, #468]	@ (800a6e8 <UART_SetConfig+0x638>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d130      	bne.n	800a578 <UART_SetConfig+0x4c8>
 800a516:	4b73      	ldr	r3, [pc, #460]	@ (800a6e4 <UART_SetConfig+0x634>)
 800a518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a51a:	f003 0307 	and.w	r3, r3, #7
 800a51e:	2b05      	cmp	r3, #5
 800a520:	d826      	bhi.n	800a570 <UART_SetConfig+0x4c0>
 800a522:	a201      	add	r2, pc, #4	@ (adr r2, 800a528 <UART_SetConfig+0x478>)
 800a524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a528:	0800a541 	.word	0x0800a541
 800a52c:	0800a549 	.word	0x0800a549
 800a530:	0800a551 	.word	0x0800a551
 800a534:	0800a559 	.word	0x0800a559
 800a538:	0800a561 	.word	0x0800a561
 800a53c:	0800a569 	.word	0x0800a569
 800a540:	2300      	movs	r3, #0
 800a542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a546:	e18a      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a548:	2304      	movs	r3, #4
 800a54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a54e:	e186      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a550:	2308      	movs	r3, #8
 800a552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a556:	e182      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a558:	2310      	movs	r3, #16
 800a55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a55e:	e17e      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a560:	2320      	movs	r3, #32
 800a562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a566:	e17a      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a568:	2340      	movs	r3, #64	@ 0x40
 800a56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56e:	e176      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a570:	2380      	movs	r3, #128	@ 0x80
 800a572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a576:	e172      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a5b      	ldr	r2, [pc, #364]	@ (800a6ec <UART_SetConfig+0x63c>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d130      	bne.n	800a5e4 <UART_SetConfig+0x534>
 800a582:	4b58      	ldr	r3, [pc, #352]	@ (800a6e4 <UART_SetConfig+0x634>)
 800a584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a586:	f003 0307 	and.w	r3, r3, #7
 800a58a:	2b05      	cmp	r3, #5
 800a58c:	d826      	bhi.n	800a5dc <UART_SetConfig+0x52c>
 800a58e:	a201      	add	r2, pc, #4	@ (adr r2, 800a594 <UART_SetConfig+0x4e4>)
 800a590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a594:	0800a5ad 	.word	0x0800a5ad
 800a598:	0800a5b5 	.word	0x0800a5b5
 800a59c:	0800a5bd 	.word	0x0800a5bd
 800a5a0:	0800a5c5 	.word	0x0800a5c5
 800a5a4:	0800a5cd 	.word	0x0800a5cd
 800a5a8:	0800a5d5 	.word	0x0800a5d5
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5b2:	e154      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a5b4:	2304      	movs	r3, #4
 800a5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ba:	e150      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a5bc:	2308      	movs	r3, #8
 800a5be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5c2:	e14c      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a5c4:	2310      	movs	r3, #16
 800a5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ca:	e148      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a5cc:	2320      	movs	r3, #32
 800a5ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5d2:	e144      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a5d4:	2340      	movs	r3, #64	@ 0x40
 800a5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5da:	e140      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a5dc:	2380      	movs	r3, #128	@ 0x80
 800a5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5e2:	e13c      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a41      	ldr	r2, [pc, #260]	@ (800a6f0 <UART_SetConfig+0x640>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	f040 8082 	bne.w	800a6f4 <UART_SetConfig+0x644>
 800a5f0:	4b3c      	ldr	r3, [pc, #240]	@ (800a6e4 <UART_SetConfig+0x634>)
 800a5f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5f8:	2b28      	cmp	r3, #40	@ 0x28
 800a5fa:	d86d      	bhi.n	800a6d8 <UART_SetConfig+0x628>
 800a5fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a604 <UART_SetConfig+0x554>)
 800a5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a602:	bf00      	nop
 800a604:	0800a6a9 	.word	0x0800a6a9
 800a608:	0800a6d9 	.word	0x0800a6d9
 800a60c:	0800a6d9 	.word	0x0800a6d9
 800a610:	0800a6d9 	.word	0x0800a6d9
 800a614:	0800a6d9 	.word	0x0800a6d9
 800a618:	0800a6d9 	.word	0x0800a6d9
 800a61c:	0800a6d9 	.word	0x0800a6d9
 800a620:	0800a6d9 	.word	0x0800a6d9
 800a624:	0800a6b1 	.word	0x0800a6b1
 800a628:	0800a6d9 	.word	0x0800a6d9
 800a62c:	0800a6d9 	.word	0x0800a6d9
 800a630:	0800a6d9 	.word	0x0800a6d9
 800a634:	0800a6d9 	.word	0x0800a6d9
 800a638:	0800a6d9 	.word	0x0800a6d9
 800a63c:	0800a6d9 	.word	0x0800a6d9
 800a640:	0800a6d9 	.word	0x0800a6d9
 800a644:	0800a6b9 	.word	0x0800a6b9
 800a648:	0800a6d9 	.word	0x0800a6d9
 800a64c:	0800a6d9 	.word	0x0800a6d9
 800a650:	0800a6d9 	.word	0x0800a6d9
 800a654:	0800a6d9 	.word	0x0800a6d9
 800a658:	0800a6d9 	.word	0x0800a6d9
 800a65c:	0800a6d9 	.word	0x0800a6d9
 800a660:	0800a6d9 	.word	0x0800a6d9
 800a664:	0800a6c1 	.word	0x0800a6c1
 800a668:	0800a6d9 	.word	0x0800a6d9
 800a66c:	0800a6d9 	.word	0x0800a6d9
 800a670:	0800a6d9 	.word	0x0800a6d9
 800a674:	0800a6d9 	.word	0x0800a6d9
 800a678:	0800a6d9 	.word	0x0800a6d9
 800a67c:	0800a6d9 	.word	0x0800a6d9
 800a680:	0800a6d9 	.word	0x0800a6d9
 800a684:	0800a6c9 	.word	0x0800a6c9
 800a688:	0800a6d9 	.word	0x0800a6d9
 800a68c:	0800a6d9 	.word	0x0800a6d9
 800a690:	0800a6d9 	.word	0x0800a6d9
 800a694:	0800a6d9 	.word	0x0800a6d9
 800a698:	0800a6d9 	.word	0x0800a6d9
 800a69c:	0800a6d9 	.word	0x0800a6d9
 800a6a0:	0800a6d9 	.word	0x0800a6d9
 800a6a4:	0800a6d1 	.word	0x0800a6d1
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ae:	e0d6      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a6b0:	2304      	movs	r3, #4
 800a6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b6:	e0d2      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a6b8:	2308      	movs	r3, #8
 800a6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6be:	e0ce      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a6c0:	2310      	movs	r3, #16
 800a6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6c6:	e0ca      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a6c8:	2320      	movs	r3, #32
 800a6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ce:	e0c6      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a6d0:	2340      	movs	r3, #64	@ 0x40
 800a6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6d6:	e0c2      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a6d8:	2380      	movs	r3, #128	@ 0x80
 800a6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6de:	e0be      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a6e0:	40011400 	.word	0x40011400
 800a6e4:	58024400 	.word	0x58024400
 800a6e8:	40007800 	.word	0x40007800
 800a6ec:	40007c00 	.word	0x40007c00
 800a6f0:	40011800 	.word	0x40011800
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4aad      	ldr	r2, [pc, #692]	@ (800a9b0 <UART_SetConfig+0x900>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d176      	bne.n	800a7ec <UART_SetConfig+0x73c>
 800a6fe:	4bad      	ldr	r3, [pc, #692]	@ (800a9b4 <UART_SetConfig+0x904>)
 800a700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a702:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a706:	2b28      	cmp	r3, #40	@ 0x28
 800a708:	d86c      	bhi.n	800a7e4 <UART_SetConfig+0x734>
 800a70a:	a201      	add	r2, pc, #4	@ (adr r2, 800a710 <UART_SetConfig+0x660>)
 800a70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a710:	0800a7b5 	.word	0x0800a7b5
 800a714:	0800a7e5 	.word	0x0800a7e5
 800a718:	0800a7e5 	.word	0x0800a7e5
 800a71c:	0800a7e5 	.word	0x0800a7e5
 800a720:	0800a7e5 	.word	0x0800a7e5
 800a724:	0800a7e5 	.word	0x0800a7e5
 800a728:	0800a7e5 	.word	0x0800a7e5
 800a72c:	0800a7e5 	.word	0x0800a7e5
 800a730:	0800a7bd 	.word	0x0800a7bd
 800a734:	0800a7e5 	.word	0x0800a7e5
 800a738:	0800a7e5 	.word	0x0800a7e5
 800a73c:	0800a7e5 	.word	0x0800a7e5
 800a740:	0800a7e5 	.word	0x0800a7e5
 800a744:	0800a7e5 	.word	0x0800a7e5
 800a748:	0800a7e5 	.word	0x0800a7e5
 800a74c:	0800a7e5 	.word	0x0800a7e5
 800a750:	0800a7c5 	.word	0x0800a7c5
 800a754:	0800a7e5 	.word	0x0800a7e5
 800a758:	0800a7e5 	.word	0x0800a7e5
 800a75c:	0800a7e5 	.word	0x0800a7e5
 800a760:	0800a7e5 	.word	0x0800a7e5
 800a764:	0800a7e5 	.word	0x0800a7e5
 800a768:	0800a7e5 	.word	0x0800a7e5
 800a76c:	0800a7e5 	.word	0x0800a7e5
 800a770:	0800a7cd 	.word	0x0800a7cd
 800a774:	0800a7e5 	.word	0x0800a7e5
 800a778:	0800a7e5 	.word	0x0800a7e5
 800a77c:	0800a7e5 	.word	0x0800a7e5
 800a780:	0800a7e5 	.word	0x0800a7e5
 800a784:	0800a7e5 	.word	0x0800a7e5
 800a788:	0800a7e5 	.word	0x0800a7e5
 800a78c:	0800a7e5 	.word	0x0800a7e5
 800a790:	0800a7d5 	.word	0x0800a7d5
 800a794:	0800a7e5 	.word	0x0800a7e5
 800a798:	0800a7e5 	.word	0x0800a7e5
 800a79c:	0800a7e5 	.word	0x0800a7e5
 800a7a0:	0800a7e5 	.word	0x0800a7e5
 800a7a4:	0800a7e5 	.word	0x0800a7e5
 800a7a8:	0800a7e5 	.word	0x0800a7e5
 800a7ac:	0800a7e5 	.word	0x0800a7e5
 800a7b0:	0800a7dd 	.word	0x0800a7dd
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ba:	e050      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a7bc:	2304      	movs	r3, #4
 800a7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7c2:	e04c      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a7c4:	2308      	movs	r3, #8
 800a7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ca:	e048      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a7cc:	2310      	movs	r3, #16
 800a7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7d2:	e044      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a7d4:	2320      	movs	r3, #32
 800a7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7da:	e040      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a7dc:	2340      	movs	r3, #64	@ 0x40
 800a7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7e2:	e03c      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a7e4:	2380      	movs	r3, #128	@ 0x80
 800a7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ea:	e038      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a71      	ldr	r2, [pc, #452]	@ (800a9b8 <UART_SetConfig+0x908>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d130      	bne.n	800a858 <UART_SetConfig+0x7a8>
 800a7f6:	4b6f      	ldr	r3, [pc, #444]	@ (800a9b4 <UART_SetConfig+0x904>)
 800a7f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7fa:	f003 0307 	and.w	r3, r3, #7
 800a7fe:	2b05      	cmp	r3, #5
 800a800:	d826      	bhi.n	800a850 <UART_SetConfig+0x7a0>
 800a802:	a201      	add	r2, pc, #4	@ (adr r2, 800a808 <UART_SetConfig+0x758>)
 800a804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a808:	0800a821 	.word	0x0800a821
 800a80c:	0800a829 	.word	0x0800a829
 800a810:	0800a831 	.word	0x0800a831
 800a814:	0800a839 	.word	0x0800a839
 800a818:	0800a841 	.word	0x0800a841
 800a81c:	0800a849 	.word	0x0800a849
 800a820:	2302      	movs	r3, #2
 800a822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a826:	e01a      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a828:	2304      	movs	r3, #4
 800a82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a82e:	e016      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a830:	2308      	movs	r3, #8
 800a832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a836:	e012      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a838:	2310      	movs	r3, #16
 800a83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83e:	e00e      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a840:	2320      	movs	r3, #32
 800a842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a846:	e00a      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a848:	2340      	movs	r3, #64	@ 0x40
 800a84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a84e:	e006      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a850:	2380      	movs	r3, #128	@ 0x80
 800a852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a856:	e002      	b.n	800a85e <UART_SetConfig+0x7ae>
 800a858:	2380      	movs	r3, #128	@ 0x80
 800a85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a55      	ldr	r2, [pc, #340]	@ (800a9b8 <UART_SetConfig+0x908>)
 800a864:	4293      	cmp	r3, r2
 800a866:	f040 80f8 	bne.w	800aa5a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a86a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a86e:	2b20      	cmp	r3, #32
 800a870:	dc46      	bgt.n	800a900 <UART_SetConfig+0x850>
 800a872:	2b02      	cmp	r3, #2
 800a874:	db75      	blt.n	800a962 <UART_SetConfig+0x8b2>
 800a876:	3b02      	subs	r3, #2
 800a878:	2b1e      	cmp	r3, #30
 800a87a:	d872      	bhi.n	800a962 <UART_SetConfig+0x8b2>
 800a87c:	a201      	add	r2, pc, #4	@ (adr r2, 800a884 <UART_SetConfig+0x7d4>)
 800a87e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a882:	bf00      	nop
 800a884:	0800a907 	.word	0x0800a907
 800a888:	0800a963 	.word	0x0800a963
 800a88c:	0800a90f 	.word	0x0800a90f
 800a890:	0800a963 	.word	0x0800a963
 800a894:	0800a963 	.word	0x0800a963
 800a898:	0800a963 	.word	0x0800a963
 800a89c:	0800a91f 	.word	0x0800a91f
 800a8a0:	0800a963 	.word	0x0800a963
 800a8a4:	0800a963 	.word	0x0800a963
 800a8a8:	0800a963 	.word	0x0800a963
 800a8ac:	0800a963 	.word	0x0800a963
 800a8b0:	0800a963 	.word	0x0800a963
 800a8b4:	0800a963 	.word	0x0800a963
 800a8b8:	0800a963 	.word	0x0800a963
 800a8bc:	0800a92f 	.word	0x0800a92f
 800a8c0:	0800a963 	.word	0x0800a963
 800a8c4:	0800a963 	.word	0x0800a963
 800a8c8:	0800a963 	.word	0x0800a963
 800a8cc:	0800a963 	.word	0x0800a963
 800a8d0:	0800a963 	.word	0x0800a963
 800a8d4:	0800a963 	.word	0x0800a963
 800a8d8:	0800a963 	.word	0x0800a963
 800a8dc:	0800a963 	.word	0x0800a963
 800a8e0:	0800a963 	.word	0x0800a963
 800a8e4:	0800a963 	.word	0x0800a963
 800a8e8:	0800a963 	.word	0x0800a963
 800a8ec:	0800a963 	.word	0x0800a963
 800a8f0:	0800a963 	.word	0x0800a963
 800a8f4:	0800a963 	.word	0x0800a963
 800a8f8:	0800a963 	.word	0x0800a963
 800a8fc:	0800a955 	.word	0x0800a955
 800a900:	2b40      	cmp	r3, #64	@ 0x40
 800a902:	d02a      	beq.n	800a95a <UART_SetConfig+0x8aa>
 800a904:	e02d      	b.n	800a962 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a906:	f7fd fe25 	bl	8008554 <HAL_RCCEx_GetD3PCLK1Freq>
 800a90a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a90c:	e02f      	b.n	800a96e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a90e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a912:	4618      	mov	r0, r3
 800a914:	f7fd fe34 	bl	8008580 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a91c:	e027      	b.n	800a96e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a91e:	f107 0318 	add.w	r3, r7, #24
 800a922:	4618      	mov	r0, r3
 800a924:	f7fd ff80 	bl	8008828 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a92c:	e01f      	b.n	800a96e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a92e:	4b21      	ldr	r3, [pc, #132]	@ (800a9b4 <UART_SetConfig+0x904>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f003 0320 	and.w	r3, r3, #32
 800a936:	2b00      	cmp	r3, #0
 800a938:	d009      	beq.n	800a94e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a93a:	4b1e      	ldr	r3, [pc, #120]	@ (800a9b4 <UART_SetConfig+0x904>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	08db      	lsrs	r3, r3, #3
 800a940:	f003 0303 	and.w	r3, r3, #3
 800a944:	4a1d      	ldr	r2, [pc, #116]	@ (800a9bc <UART_SetConfig+0x90c>)
 800a946:	fa22 f303 	lsr.w	r3, r2, r3
 800a94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a94c:	e00f      	b.n	800a96e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a94e:	4b1b      	ldr	r3, [pc, #108]	@ (800a9bc <UART_SetConfig+0x90c>)
 800a950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a952:	e00c      	b.n	800a96e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a954:	4b1a      	ldr	r3, [pc, #104]	@ (800a9c0 <UART_SetConfig+0x910>)
 800a956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a958:	e009      	b.n	800a96e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a95a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a960:	e005      	b.n	800a96e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a962:	2300      	movs	r3, #0
 800a964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a96c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a96e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a970:	2b00      	cmp	r3, #0
 800a972:	f000 81ee 	beq.w	800ad52 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a97a:	4a12      	ldr	r2, [pc, #72]	@ (800a9c4 <UART_SetConfig+0x914>)
 800a97c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a980:	461a      	mov	r2, r3
 800a982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a984:	fbb3 f3f2 	udiv	r3, r3, r2
 800a988:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	685a      	ldr	r2, [r3, #4]
 800a98e:	4613      	mov	r3, r2
 800a990:	005b      	lsls	r3, r3, #1
 800a992:	4413      	add	r3, r2
 800a994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a996:	429a      	cmp	r2, r3
 800a998:	d305      	bcc.n	800a9a6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d910      	bls.n	800a9c8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a9ac:	e1d1      	b.n	800ad52 <UART_SetConfig+0xca2>
 800a9ae:	bf00      	nop
 800a9b0:	40011c00 	.word	0x40011c00
 800a9b4:	58024400 	.word	0x58024400
 800a9b8:	58000c00 	.word	0x58000c00
 800a9bc:	03d09000 	.word	0x03d09000
 800a9c0:	003d0900 	.word	0x003d0900
 800a9c4:	0800e8d4 	.word	0x0800e8d4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	60bb      	str	r3, [r7, #8]
 800a9ce:	60fa      	str	r2, [r7, #12]
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d4:	4ac0      	ldr	r2, [pc, #768]	@ (800acd8 <UART_SetConfig+0xc28>)
 800a9d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	2200      	movs	r2, #0
 800a9de:	603b      	str	r3, [r7, #0]
 800a9e0:	607a      	str	r2, [r7, #4]
 800a9e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a9ea:	f7f5 fcd9 	bl	80003a0 <__aeabi_uldivmod>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	4610      	mov	r0, r2
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	f04f 0200 	mov.w	r2, #0
 800a9fa:	f04f 0300 	mov.w	r3, #0
 800a9fe:	020b      	lsls	r3, r1, #8
 800aa00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aa04:	0202      	lsls	r2, r0, #8
 800aa06:	6979      	ldr	r1, [r7, #20]
 800aa08:	6849      	ldr	r1, [r1, #4]
 800aa0a:	0849      	lsrs	r1, r1, #1
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	460c      	mov	r4, r1
 800aa10:	4605      	mov	r5, r0
 800aa12:	eb12 0804 	adds.w	r8, r2, r4
 800aa16:	eb43 0905 	adc.w	r9, r3, r5
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	469a      	mov	sl, r3
 800aa22:	4693      	mov	fp, r2
 800aa24:	4652      	mov	r2, sl
 800aa26:	465b      	mov	r3, fp
 800aa28:	4640      	mov	r0, r8
 800aa2a:	4649      	mov	r1, r9
 800aa2c:	f7f5 fcb8 	bl	80003a0 <__aeabi_uldivmod>
 800aa30:	4602      	mov	r2, r0
 800aa32:	460b      	mov	r3, r1
 800aa34:	4613      	mov	r3, r2
 800aa36:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa3e:	d308      	bcc.n	800aa52 <UART_SetConfig+0x9a2>
 800aa40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa46:	d204      	bcs.n	800aa52 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa4e:	60da      	str	r2, [r3, #12]
 800aa50:	e17f      	b.n	800ad52 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aa58:	e17b      	b.n	800ad52 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	69db      	ldr	r3, [r3, #28]
 800aa5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa62:	f040 80bd 	bne.w	800abe0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800aa66:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aa6a:	2b20      	cmp	r3, #32
 800aa6c:	dc48      	bgt.n	800ab00 <UART_SetConfig+0xa50>
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	db7b      	blt.n	800ab6a <UART_SetConfig+0xaba>
 800aa72:	2b20      	cmp	r3, #32
 800aa74:	d879      	bhi.n	800ab6a <UART_SetConfig+0xaba>
 800aa76:	a201      	add	r2, pc, #4	@ (adr r2, 800aa7c <UART_SetConfig+0x9cc>)
 800aa78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7c:	0800ab07 	.word	0x0800ab07
 800aa80:	0800ab0f 	.word	0x0800ab0f
 800aa84:	0800ab6b 	.word	0x0800ab6b
 800aa88:	0800ab6b 	.word	0x0800ab6b
 800aa8c:	0800ab17 	.word	0x0800ab17
 800aa90:	0800ab6b 	.word	0x0800ab6b
 800aa94:	0800ab6b 	.word	0x0800ab6b
 800aa98:	0800ab6b 	.word	0x0800ab6b
 800aa9c:	0800ab27 	.word	0x0800ab27
 800aaa0:	0800ab6b 	.word	0x0800ab6b
 800aaa4:	0800ab6b 	.word	0x0800ab6b
 800aaa8:	0800ab6b 	.word	0x0800ab6b
 800aaac:	0800ab6b 	.word	0x0800ab6b
 800aab0:	0800ab6b 	.word	0x0800ab6b
 800aab4:	0800ab6b 	.word	0x0800ab6b
 800aab8:	0800ab6b 	.word	0x0800ab6b
 800aabc:	0800ab37 	.word	0x0800ab37
 800aac0:	0800ab6b 	.word	0x0800ab6b
 800aac4:	0800ab6b 	.word	0x0800ab6b
 800aac8:	0800ab6b 	.word	0x0800ab6b
 800aacc:	0800ab6b 	.word	0x0800ab6b
 800aad0:	0800ab6b 	.word	0x0800ab6b
 800aad4:	0800ab6b 	.word	0x0800ab6b
 800aad8:	0800ab6b 	.word	0x0800ab6b
 800aadc:	0800ab6b 	.word	0x0800ab6b
 800aae0:	0800ab6b 	.word	0x0800ab6b
 800aae4:	0800ab6b 	.word	0x0800ab6b
 800aae8:	0800ab6b 	.word	0x0800ab6b
 800aaec:	0800ab6b 	.word	0x0800ab6b
 800aaf0:	0800ab6b 	.word	0x0800ab6b
 800aaf4:	0800ab6b 	.word	0x0800ab6b
 800aaf8:	0800ab6b 	.word	0x0800ab6b
 800aafc:	0800ab5d 	.word	0x0800ab5d
 800ab00:	2b40      	cmp	r3, #64	@ 0x40
 800ab02:	d02e      	beq.n	800ab62 <UART_SetConfig+0xab2>
 800ab04:	e031      	b.n	800ab6a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab06:	f7fc fb3b 	bl	8007180 <HAL_RCC_GetPCLK1Freq>
 800ab0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab0c:	e033      	b.n	800ab76 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab0e:	f7fc fb4d 	bl	80071ac <HAL_RCC_GetPCLK2Freq>
 800ab12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab14:	e02f      	b.n	800ab76 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fd fd30 	bl	8008580 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab24:	e027      	b.n	800ab76 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab26:	f107 0318 	add.w	r3, r7, #24
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fd fe7c 	bl	8008828 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab34:	e01f      	b.n	800ab76 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab36:	4b69      	ldr	r3, [pc, #420]	@ (800acdc <UART_SetConfig+0xc2c>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f003 0320 	and.w	r3, r3, #32
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d009      	beq.n	800ab56 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab42:	4b66      	ldr	r3, [pc, #408]	@ (800acdc <UART_SetConfig+0xc2c>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	08db      	lsrs	r3, r3, #3
 800ab48:	f003 0303 	and.w	r3, r3, #3
 800ab4c:	4a64      	ldr	r2, [pc, #400]	@ (800ace0 <UART_SetConfig+0xc30>)
 800ab4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab54:	e00f      	b.n	800ab76 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ab56:	4b62      	ldr	r3, [pc, #392]	@ (800ace0 <UART_SetConfig+0xc30>)
 800ab58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab5a:	e00c      	b.n	800ab76 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab5c:	4b61      	ldr	r3, [pc, #388]	@ (800ace4 <UART_SetConfig+0xc34>)
 800ab5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab60:	e009      	b.n	800ab76 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab68:	e005      	b.n	800ab76 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ab74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f000 80ea 	beq.w	800ad52 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab82:	4a55      	ldr	r2, [pc, #340]	@ (800acd8 <UART_SetConfig+0xc28>)
 800ab84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab88:	461a      	mov	r2, r3
 800ab8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab90:	005a      	lsls	r2, r3, #1
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	085b      	lsrs	r3, r3, #1
 800ab98:	441a      	add	r2, r3
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aba2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba6:	2b0f      	cmp	r3, #15
 800aba8:	d916      	bls.n	800abd8 <UART_SetConfig+0xb28>
 800abaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abb0:	d212      	bcs.n	800abd8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800abb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	f023 030f 	bic.w	r3, r3, #15
 800abba:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800abbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abbe:	085b      	lsrs	r3, r3, #1
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	f003 0307 	and.w	r3, r3, #7
 800abc6:	b29a      	uxth	r2, r3
 800abc8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800abca:	4313      	orrs	r3, r2
 800abcc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800abd4:	60da      	str	r2, [r3, #12]
 800abd6:	e0bc      	b.n	800ad52 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800abde:	e0b8      	b.n	800ad52 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800abe0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800abe4:	2b20      	cmp	r3, #32
 800abe6:	dc4b      	bgt.n	800ac80 <UART_SetConfig+0xbd0>
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f2c0 8087 	blt.w	800acfc <UART_SetConfig+0xc4c>
 800abee:	2b20      	cmp	r3, #32
 800abf0:	f200 8084 	bhi.w	800acfc <UART_SetConfig+0xc4c>
 800abf4:	a201      	add	r2, pc, #4	@ (adr r2, 800abfc <UART_SetConfig+0xb4c>)
 800abf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfa:	bf00      	nop
 800abfc:	0800ac87 	.word	0x0800ac87
 800ac00:	0800ac8f 	.word	0x0800ac8f
 800ac04:	0800acfd 	.word	0x0800acfd
 800ac08:	0800acfd 	.word	0x0800acfd
 800ac0c:	0800ac97 	.word	0x0800ac97
 800ac10:	0800acfd 	.word	0x0800acfd
 800ac14:	0800acfd 	.word	0x0800acfd
 800ac18:	0800acfd 	.word	0x0800acfd
 800ac1c:	0800aca7 	.word	0x0800aca7
 800ac20:	0800acfd 	.word	0x0800acfd
 800ac24:	0800acfd 	.word	0x0800acfd
 800ac28:	0800acfd 	.word	0x0800acfd
 800ac2c:	0800acfd 	.word	0x0800acfd
 800ac30:	0800acfd 	.word	0x0800acfd
 800ac34:	0800acfd 	.word	0x0800acfd
 800ac38:	0800acfd 	.word	0x0800acfd
 800ac3c:	0800acb7 	.word	0x0800acb7
 800ac40:	0800acfd 	.word	0x0800acfd
 800ac44:	0800acfd 	.word	0x0800acfd
 800ac48:	0800acfd 	.word	0x0800acfd
 800ac4c:	0800acfd 	.word	0x0800acfd
 800ac50:	0800acfd 	.word	0x0800acfd
 800ac54:	0800acfd 	.word	0x0800acfd
 800ac58:	0800acfd 	.word	0x0800acfd
 800ac5c:	0800acfd 	.word	0x0800acfd
 800ac60:	0800acfd 	.word	0x0800acfd
 800ac64:	0800acfd 	.word	0x0800acfd
 800ac68:	0800acfd 	.word	0x0800acfd
 800ac6c:	0800acfd 	.word	0x0800acfd
 800ac70:	0800acfd 	.word	0x0800acfd
 800ac74:	0800acfd 	.word	0x0800acfd
 800ac78:	0800acfd 	.word	0x0800acfd
 800ac7c:	0800acef 	.word	0x0800acef
 800ac80:	2b40      	cmp	r3, #64	@ 0x40
 800ac82:	d037      	beq.n	800acf4 <UART_SetConfig+0xc44>
 800ac84:	e03a      	b.n	800acfc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac86:	f7fc fa7b 	bl	8007180 <HAL_RCC_GetPCLK1Freq>
 800ac8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac8c:	e03c      	b.n	800ad08 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac8e:	f7fc fa8d 	bl	80071ac <HAL_RCC_GetPCLK2Freq>
 800ac92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac94:	e038      	b.n	800ad08 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fd fc70 	bl	8008580 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aca4:	e030      	b.n	800ad08 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aca6:	f107 0318 	add.w	r3, r7, #24
 800acaa:	4618      	mov	r0, r3
 800acac:	f7fd fdbc 	bl	8008828 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acb4:	e028      	b.n	800ad08 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acb6:	4b09      	ldr	r3, [pc, #36]	@ (800acdc <UART_SetConfig+0xc2c>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 0320 	and.w	r3, r3, #32
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d012      	beq.n	800ace8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800acc2:	4b06      	ldr	r3, [pc, #24]	@ (800acdc <UART_SetConfig+0xc2c>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	08db      	lsrs	r3, r3, #3
 800acc8:	f003 0303 	and.w	r3, r3, #3
 800accc:	4a04      	ldr	r2, [pc, #16]	@ (800ace0 <UART_SetConfig+0xc30>)
 800acce:	fa22 f303 	lsr.w	r3, r2, r3
 800acd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acd4:	e018      	b.n	800ad08 <UART_SetConfig+0xc58>
 800acd6:	bf00      	nop
 800acd8:	0800e8d4 	.word	0x0800e8d4
 800acdc:	58024400 	.word	0x58024400
 800ace0:	03d09000 	.word	0x03d09000
 800ace4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ace8:	4b24      	ldr	r3, [pc, #144]	@ (800ad7c <UART_SetConfig+0xccc>)
 800acea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acec:	e00c      	b.n	800ad08 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800acee:	4b24      	ldr	r3, [pc, #144]	@ (800ad80 <UART_SetConfig+0xcd0>)
 800acf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acf2:	e009      	b.n	800ad08 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800acf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acfa:	e005      	b.n	800ad08 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800acfc:	2300      	movs	r3, #0
 800acfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ad06:	bf00      	nop
    }

    if (pclk != 0U)
 800ad08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d021      	beq.n	800ad52 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad12:	4a1c      	ldr	r2, [pc, #112]	@ (800ad84 <UART_SetConfig+0xcd4>)
 800ad14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad1c:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	085b      	lsrs	r3, r3, #1
 800ad26:	441a      	add	r2, r3
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad30:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad34:	2b0f      	cmp	r3, #15
 800ad36:	d909      	bls.n	800ad4c <UART_SetConfig+0xc9c>
 800ad38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad3e:	d205      	bcs.n	800ad4c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad42:	b29a      	uxth	r2, r3
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	60da      	str	r2, [r3, #12]
 800ad4a:	e002      	b.n	800ad52 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	2201      	movs	r2, #1
 800ad56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	2200      	movs	r2, #0
 800ad66:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ad6e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3748      	adds	r7, #72	@ 0x48
 800ad76:	46bd      	mov	sp, r7
 800ad78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad7c:	03d09000 	.word	0x03d09000
 800ad80:	003d0900 	.word	0x003d0900
 800ad84:	0800e8d4 	.word	0x0800e8d4

0800ad88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad94:	f003 0308 	and.w	r3, r3, #8
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00a      	beq.n	800adb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	430a      	orrs	r2, r1
 800adb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adb6:	f003 0301 	and.w	r3, r3, #1
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00a      	beq.n	800add4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	430a      	orrs	r2, r1
 800add2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800add8:	f003 0302 	and.w	r3, r3, #2
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00a      	beq.n	800adf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	430a      	orrs	r2, r1
 800adf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adfa:	f003 0304 	and.w	r3, r3, #4
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00a      	beq.n	800ae18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	430a      	orrs	r2, r1
 800ae16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae1c:	f003 0310 	and.w	r3, r3, #16
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00a      	beq.n	800ae3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	430a      	orrs	r2, r1
 800ae38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae3e:	f003 0320 	and.w	r3, r3, #32
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00a      	beq.n	800ae5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	430a      	orrs	r2, r1
 800ae5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d01a      	beq.n	800ae9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	430a      	orrs	r2, r1
 800ae7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae86:	d10a      	bne.n	800ae9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00a      	beq.n	800aec0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	430a      	orrs	r2, r1
 800aebe:	605a      	str	r2, [r3, #4]
  }
}
 800aec0:	bf00      	nop
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b098      	sub	sp, #96	@ 0x60
 800aed0:	af02      	add	r7, sp, #8
 800aed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aedc:	f7f6 ffe4 	bl	8001ea8 <HAL_GetTick>
 800aee0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f003 0308 	and.w	r3, r3, #8
 800aeec:	2b08      	cmp	r3, #8
 800aeee:	d12f      	bne.n	800af50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aef0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aef8:	2200      	movs	r2, #0
 800aefa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f88e 	bl	800b020 <UART_WaitOnFlagUntilTimeout>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d022      	beq.n	800af50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af12:	e853 3f00 	ldrex	r3, [r3]
 800af16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af1e:	653b      	str	r3, [r7, #80]	@ 0x50
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	461a      	mov	r2, r3
 800af26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af28:	647b      	str	r3, [r7, #68]	@ 0x44
 800af2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af30:	e841 2300 	strex	r3, r2, [r1]
 800af34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1e6      	bne.n	800af0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2220      	movs	r2, #32
 800af40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af4c:	2303      	movs	r3, #3
 800af4e:	e063      	b.n	800b018 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f003 0304 	and.w	r3, r3, #4
 800af5a:	2b04      	cmp	r3, #4
 800af5c:	d149      	bne.n	800aff2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af5e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af62:	9300      	str	r3, [sp, #0]
 800af64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af66:	2200      	movs	r2, #0
 800af68:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 f857 	bl	800b020 <UART_WaitOnFlagUntilTimeout>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d03c      	beq.n	800aff2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af80:	e853 3f00 	ldrex	r3, [r3]
 800af84:	623b      	str	r3, [r7, #32]
   return(result);
 800af86:	6a3b      	ldr	r3, [r7, #32]
 800af88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	461a      	mov	r2, r3
 800af94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af96:	633b      	str	r3, [r7, #48]	@ 0x30
 800af98:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af9e:	e841 2300 	strex	r3, r2, [r1]
 800afa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800afa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d1e6      	bne.n	800af78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	3308      	adds	r3, #8
 800afb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	e853 3f00 	ldrex	r3, [r3]
 800afb8:	60fb      	str	r3, [r7, #12]
   return(result);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f023 0301 	bic.w	r3, r3, #1
 800afc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	3308      	adds	r3, #8
 800afc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800afca:	61fa      	str	r2, [r7, #28]
 800afcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afce:	69b9      	ldr	r1, [r7, #24]
 800afd0:	69fa      	ldr	r2, [r7, #28]
 800afd2:	e841 2300 	strex	r3, r2, [r1]
 800afd6:	617b      	str	r3, [r7, #20]
   return(result);
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1e5      	bne.n	800afaa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2220      	movs	r2, #32
 800afe2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afee:	2303      	movs	r3, #3
 800aff0:	e012      	b.n	800b018 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2220      	movs	r2, #32
 800aff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2220      	movs	r2, #32
 800affe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b016:	2300      	movs	r3, #0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3758      	adds	r7, #88	@ 0x58
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	603b      	str	r3, [r7, #0]
 800b02c:	4613      	mov	r3, r2
 800b02e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b030:	e04f      	b.n	800b0d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b038:	d04b      	beq.n	800b0d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b03a:	f7f6 ff35 	bl	8001ea8 <HAL_GetTick>
 800b03e:	4602      	mov	r2, r0
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	1ad3      	subs	r3, r2, r3
 800b044:	69ba      	ldr	r2, [r7, #24]
 800b046:	429a      	cmp	r2, r3
 800b048:	d302      	bcc.n	800b050 <UART_WaitOnFlagUntilTimeout+0x30>
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d101      	bne.n	800b054 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b050:	2303      	movs	r3, #3
 800b052:	e04e      	b.n	800b0f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 0304 	and.w	r3, r3, #4
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d037      	beq.n	800b0d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	2b80      	cmp	r3, #128	@ 0x80
 800b066:	d034      	beq.n	800b0d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	2b40      	cmp	r3, #64	@ 0x40
 800b06c:	d031      	beq.n	800b0d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	69db      	ldr	r3, [r3, #28]
 800b074:	f003 0308 	and.w	r3, r3, #8
 800b078:	2b08      	cmp	r3, #8
 800b07a:	d110      	bne.n	800b09e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2208      	movs	r2, #8
 800b082:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f000 f921 	bl	800b2cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2208      	movs	r2, #8
 800b08e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2200      	movs	r2, #0
 800b096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	e029      	b.n	800b0f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	69db      	ldr	r3, [r3, #28]
 800b0a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0ac:	d111      	bne.n	800b0d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b0b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f000 f907 	bl	800b2cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2220      	movs	r2, #32
 800b0c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b0ce:	2303      	movs	r3, #3
 800b0d0:	e00f      	b.n	800b0f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	69da      	ldr	r2, [r3, #28]
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	4013      	ands	r3, r2
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	bf0c      	ite	eq
 800b0e2:	2301      	moveq	r3, #1
 800b0e4:	2300      	movne	r3, #0
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	79fb      	ldrb	r3, [r7, #7]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d0a0      	beq.n	800b032 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
	...

0800b0fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b096      	sub	sp, #88	@ 0x58
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	4613      	mov	r3, r2
 800b108:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	68ba      	ldr	r2, [r7, #8]
 800b10e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	88fa      	ldrh	r2, [r7, #6]
 800b114:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2222      	movs	r2, #34	@ 0x22
 800b124:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d02d      	beq.n	800b18e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b138:	4a40      	ldr	r2, [pc, #256]	@ (800b23c <UART_Start_Receive_DMA+0x140>)
 800b13a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b142:	4a3f      	ldr	r2, [pc, #252]	@ (800b240 <UART_Start_Receive_DMA+0x144>)
 800b144:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b14c:	4a3d      	ldr	r2, [pc, #244]	@ (800b244 <UART_Start_Receive_DMA+0x148>)
 800b14e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b156:	2200      	movs	r2, #0
 800b158:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	3324      	adds	r3, #36	@ 0x24
 800b166:	4619      	mov	r1, r3
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b16c:	461a      	mov	r2, r3
 800b16e:	88fb      	ldrh	r3, [r7, #6]
 800b170:	f7f7 fbe0 	bl	8002934 <HAL_DMA_Start_IT>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d009      	beq.n	800b18e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2210      	movs	r2, #16
 800b17e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2220      	movs	r2, #32
 800b186:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b18a:	2301      	movs	r3, #1
 800b18c:	e051      	b.n	800b232 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	691b      	ldr	r3, [r3, #16]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d018      	beq.n	800b1c8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b19e:	e853 3f00 	ldrex	r3, [r3]
 800b1a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b1aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1b6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b1ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1bc:	e841 2300 	strex	r3, r2, [r1]
 800b1c0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b1c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1e6      	bne.n	800b196 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	3308      	adds	r3, #8
 800b1ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d2:	e853 3f00 	ldrex	r3, [r3]
 800b1d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1da:	f043 0301 	orr.w	r3, r3, #1
 800b1de:	653b      	str	r3, [r7, #80]	@ 0x50
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	3308      	adds	r3, #8
 800b1e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b1e8:	637a      	str	r2, [r7, #52]	@ 0x34
 800b1ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b1ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1f0:	e841 2300 	strex	r3, r2, [r1]
 800b1f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1e5      	bne.n	800b1c8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	3308      	adds	r3, #8
 800b202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	e853 3f00 	ldrex	r3, [r3]
 800b20a:	613b      	str	r3, [r7, #16]
   return(result);
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	3308      	adds	r3, #8
 800b21a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b21c:	623a      	str	r2, [r7, #32]
 800b21e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b220:	69f9      	ldr	r1, [r7, #28]
 800b222:	6a3a      	ldr	r2, [r7, #32]
 800b224:	e841 2300 	strex	r3, r2, [r1]
 800b228:	61bb      	str	r3, [r7, #24]
   return(result);
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1e5      	bne.n	800b1fc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3758      	adds	r7, #88	@ 0x58
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	0800b399 	.word	0x0800b399
 800b240:	0800b4c1 	.word	0x0800b4c1
 800b244:	0800b4ff 	.word	0x0800b4ff

0800b248 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b248:	b480      	push	{r7}
 800b24a:	b08f      	sub	sp, #60	@ 0x3c
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b256:	6a3b      	ldr	r3, [r7, #32]
 800b258:	e853 3f00 	ldrex	r3, [r3]
 800b25c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b264:	637b      	str	r3, [r7, #52]	@ 0x34
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	461a      	mov	r2, r3
 800b26c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b26e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b270:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b272:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b274:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b276:	e841 2300 	strex	r3, r2, [r1]
 800b27a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d1e6      	bne.n	800b250 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	3308      	adds	r3, #8
 800b288:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	e853 3f00 	ldrex	r3, [r3]
 800b290:	60bb      	str	r3, [r7, #8]
   return(result);
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b298:	633b      	str	r3, [r7, #48]	@ 0x30
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	3308      	adds	r3, #8
 800b2a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2a2:	61ba      	str	r2, [r7, #24]
 800b2a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a6:	6979      	ldr	r1, [r7, #20]
 800b2a8:	69ba      	ldr	r2, [r7, #24]
 800b2aa:	e841 2300 	strex	r3, r2, [r1]
 800b2ae:	613b      	str	r3, [r7, #16]
   return(result);
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1e5      	bne.n	800b282 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2220      	movs	r2, #32
 800b2ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b2be:	bf00      	nop
 800b2c0:	373c      	adds	r7, #60	@ 0x3c
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr
	...

0800b2cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b095      	sub	sp, #84	@ 0x54
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2dc:	e853 3f00 	ldrex	r3, [r3]
 800b2e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b2e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b2f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b2fa:	e841 2300 	strex	r3, r2, [r1]
 800b2fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b302:	2b00      	cmp	r3, #0
 800b304:	d1e6      	bne.n	800b2d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	3308      	adds	r3, #8
 800b30c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b30e:	6a3b      	ldr	r3, [r7, #32]
 800b310:	e853 3f00 	ldrex	r3, [r3]
 800b314:	61fb      	str	r3, [r7, #28]
   return(result);
 800b316:	69fa      	ldr	r2, [r7, #28]
 800b318:	4b1e      	ldr	r3, [pc, #120]	@ (800b394 <UART_EndRxTransfer+0xc8>)
 800b31a:	4013      	ands	r3, r2
 800b31c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	3308      	adds	r3, #8
 800b324:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b326:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b328:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b32a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b32c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b32e:	e841 2300 	strex	r3, r2, [r1]
 800b332:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1e5      	bne.n	800b306 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d118      	bne.n	800b374 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	e853 3f00 	ldrex	r3, [r3]
 800b34e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	f023 0310 	bic.w	r3, r3, #16
 800b356:	647b      	str	r3, [r7, #68]	@ 0x44
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	461a      	mov	r2, r3
 800b35e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b360:	61bb      	str	r3, [r7, #24]
 800b362:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b364:	6979      	ldr	r1, [r7, #20]
 800b366:	69ba      	ldr	r2, [r7, #24]
 800b368:	e841 2300 	strex	r3, r2, [r1]
 800b36c:	613b      	str	r3, [r7, #16]
   return(result);
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1e6      	bne.n	800b342 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2220      	movs	r2, #32
 800b378:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b388:	bf00      	nop
 800b38a:	3754      	adds	r7, #84	@ 0x54
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr
 800b394:	effffffe 	.word	0xeffffffe

0800b398 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b09c      	sub	sp, #112	@ 0x70
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3a4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	69db      	ldr	r3, [r3, #28]
 800b3aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3ae:	d071      	beq.n	800b494 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b3b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3c0:	e853 3f00 	ldrex	r3, [r3]
 800b3c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b3c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b3ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b3d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b3d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b3dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b3de:	e841 2300 	strex	r3, r2, [r1]
 800b3e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b3e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1e6      	bne.n	800b3b8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	3308      	adds	r3, #8
 800b3f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f4:	e853 3f00 	ldrex	r3, [r3]
 800b3f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b3fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3fc:	f023 0301 	bic.w	r3, r3, #1
 800b400:	667b      	str	r3, [r7, #100]	@ 0x64
 800b402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3308      	adds	r3, #8
 800b408:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b40a:	647a      	str	r2, [r7, #68]	@ 0x44
 800b40c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b40e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b410:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b412:	e841 2300 	strex	r3, r2, [r1]
 800b416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1e5      	bne.n	800b3ea <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b41e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	3308      	adds	r3, #8
 800b424:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b428:	e853 3f00 	ldrex	r3, [r3]
 800b42c:	623b      	str	r3, [r7, #32]
   return(result);
 800b42e:	6a3b      	ldr	r3, [r7, #32]
 800b430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b434:	663b      	str	r3, [r7, #96]	@ 0x60
 800b436:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	3308      	adds	r3, #8
 800b43c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b43e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b440:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b442:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b446:	e841 2300 	strex	r3, r2, [r1]
 800b44a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1e5      	bne.n	800b41e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b454:	2220      	movs	r2, #32
 800b456:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b45a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b45c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d118      	bne.n	800b494 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	e853 3f00 	ldrex	r3, [r3]
 800b46e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f023 0310 	bic.w	r3, r3, #16
 800b476:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b478:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	461a      	mov	r2, r3
 800b47e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b480:	61fb      	str	r3, [r7, #28]
 800b482:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b484:	69b9      	ldr	r1, [r7, #24]
 800b486:	69fa      	ldr	r2, [r7, #28]
 800b488:	e841 2300 	strex	r3, r2, [r1]
 800b48c:	617b      	str	r3, [r7, #20]
   return(result);
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1e6      	bne.n	800b462 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b496:	2200      	movs	r2, #0
 800b498:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b49a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b49c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d107      	bne.n	800b4b2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b4ac:	f7f5 fd4a 	bl	8000f44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b4b0:	e002      	b.n	800b4b8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b4b2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b4b4:	f7fe fdde 	bl	800a074 <HAL_UART_RxCpltCallback>
}
 800b4b8:	bf00      	nop
 800b4ba:	3770      	adds	r7, #112	@ 0x70
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4cc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d109      	bne.n	800b4f0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b4e2:	085b      	lsrs	r3, r3, #1
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f7f5 fd2b 	bl	8000f44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b4ee:	e002      	b.n	800b4f6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	f7fe fdc9 	bl	800a088 <HAL_UART_RxHalfCpltCallback>
}
 800b4f6:	bf00      	nop
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b086      	sub	sp, #24
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b50a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b512:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b51a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b526:	2b80      	cmp	r3, #128	@ 0x80
 800b528:	d109      	bne.n	800b53e <UART_DMAError+0x40>
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	2b21      	cmp	r3, #33	@ 0x21
 800b52e:	d106      	bne.n	800b53e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	2200      	movs	r2, #0
 800b534:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b538:	6978      	ldr	r0, [r7, #20]
 800b53a:	f7ff fe85 	bl	800b248 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b548:	2b40      	cmp	r3, #64	@ 0x40
 800b54a:	d109      	bne.n	800b560 <UART_DMAError+0x62>
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2b22      	cmp	r3, #34	@ 0x22
 800b550:	d106      	bne.n	800b560 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	2200      	movs	r2, #0
 800b556:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b55a:	6978      	ldr	r0, [r7, #20]
 800b55c:	f7ff feb6 	bl	800b2cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b566:	f043 0210 	orr.w	r2, r3, #16
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b570:	6978      	ldr	r0, [r7, #20]
 800b572:	f7fe fd93 	bl	800a09c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b576:	bf00      	nop
 800b578:	3718      	adds	r7, #24
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b084      	sub	sp, #16
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b58a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f7fe fd81 	bl	800a09c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b59a:	bf00      	nop
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b088      	sub	sp, #32
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	e853 3f00 	ldrex	r3, [r3]
 800b5b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5be:	61fb      	str	r3, [r7, #28]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	61bb      	str	r3, [r7, #24]
 800b5ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5cc:	6979      	ldr	r1, [r7, #20]
 800b5ce:	69ba      	ldr	r2, [r7, #24]
 800b5d0:	e841 2300 	strex	r3, r2, [r1]
 800b5d4:	613b      	str	r3, [r7, #16]
   return(result);
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1e6      	bne.n	800b5aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2220      	movs	r2, #32
 800b5e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f7fe fd38 	bl	800a060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5f0:	bf00      	nop
 800b5f2:	3720      	adds	r7, #32
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b614:	bf00      	nop
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b628:	bf00      	nop
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b634:	b480      	push	{r7}
 800b636:	b085      	sub	sp, #20
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b642:	2b01      	cmp	r3, #1
 800b644:	d101      	bne.n	800b64a <HAL_UARTEx_DisableFifoMode+0x16>
 800b646:	2302      	movs	r3, #2
 800b648:	e027      	b.n	800b69a <HAL_UARTEx_DisableFifoMode+0x66>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2201      	movs	r2, #1
 800b64e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2224      	movs	r2, #36	@ 0x24
 800b656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f022 0201 	bic.w	r2, r2, #1
 800b670:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b678:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2220      	movs	r2, #32
 800b68c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3714      	adds	r7, #20
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr

0800b6a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b084      	sub	sp, #16
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
 800b6ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d101      	bne.n	800b6be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b6ba:	2302      	movs	r3, #2
 800b6bc:	e02d      	b.n	800b71a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2224      	movs	r2, #36	@ 0x24
 800b6ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f022 0201 	bic.w	r2, r2, #1
 800b6e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	683a      	ldr	r2, [r7, #0]
 800b6f6:	430a      	orrs	r2, r1
 800b6f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f8a4 	bl	800b848 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	68fa      	ldr	r2, [r7, #12]
 800b706:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2220      	movs	r2, #32
 800b70c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b084      	sub	sp, #16
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
 800b72a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b732:	2b01      	cmp	r3, #1
 800b734:	d101      	bne.n	800b73a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b736:	2302      	movs	r3, #2
 800b738:	e02d      	b.n	800b796 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2201      	movs	r2, #1
 800b73e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2224      	movs	r2, #36	@ 0x24
 800b746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f022 0201 	bic.w	r2, r2, #1
 800b760:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	430a      	orrs	r2, r1
 800b774:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 f866 	bl	800b848 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2220      	movs	r2, #32
 800b788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b794:	2300      	movs	r3, #0
}
 800b796:	4618      	mov	r0, r3
 800b798:	3710      	adds	r7, #16
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b08c      	sub	sp, #48	@ 0x30
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	60f8      	str	r0, [r7, #12]
 800b7a6:	60b9      	str	r1, [r7, #8]
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7b2:	2b20      	cmp	r3, #32
 800b7b4:	d142      	bne.n	800b83c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d002      	beq.n	800b7c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b7bc:	88fb      	ldrh	r3, [r7, #6]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d101      	bne.n	800b7c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e03b      	b.n	800b83e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b7d2:	88fb      	ldrh	r3, [r7, #6]
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	68b9      	ldr	r1, [r7, #8]
 800b7d8:	68f8      	ldr	r0, [r7, #12]
 800b7da:	f7ff fc8f 	bl	800b0fc <UART_Start_Receive_DMA>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b7e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d124      	bne.n	800b836 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d11d      	bne.n	800b830 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2210      	movs	r2, #16
 800b7fa:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	e853 3f00 	ldrex	r3, [r3]
 800b808:	617b      	str	r3, [r7, #20]
   return(result);
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	f043 0310 	orr.w	r3, r3, #16
 800b810:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	461a      	mov	r2, r3
 800b818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b81a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b81c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81e:	6a39      	ldr	r1, [r7, #32]
 800b820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b822:	e841 2300 	strex	r3, r2, [r1]
 800b826:	61fb      	str	r3, [r7, #28]
   return(result);
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d1e6      	bne.n	800b7fc <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b82e:	e002      	b.n	800b836 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b830:	2301      	movs	r3, #1
 800b832:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b836:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b83a:	e000      	b.n	800b83e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b83c:	2302      	movs	r3, #2
  }
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3730      	adds	r7, #48	@ 0x30
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
	...

0800b848 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b854:	2b00      	cmp	r3, #0
 800b856:	d108      	bne.n	800b86a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b868:	e031      	b.n	800b8ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b86a:	2310      	movs	r3, #16
 800b86c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b86e:	2310      	movs	r3, #16
 800b870:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	0e5b      	lsrs	r3, r3, #25
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	f003 0307 	and.w	r3, r3, #7
 800b880:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	0f5b      	lsrs	r3, r3, #29
 800b88a:	b2db      	uxtb	r3, r3
 800b88c:	f003 0307 	and.w	r3, r3, #7
 800b890:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b892:	7bbb      	ldrb	r3, [r7, #14]
 800b894:	7b3a      	ldrb	r2, [r7, #12]
 800b896:	4911      	ldr	r1, [pc, #68]	@ (800b8dc <UARTEx_SetNbDataToProcess+0x94>)
 800b898:	5c8a      	ldrb	r2, [r1, r2]
 800b89a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b89e:	7b3a      	ldrb	r2, [r7, #12]
 800b8a0:	490f      	ldr	r1, [pc, #60]	@ (800b8e0 <UARTEx_SetNbDataToProcess+0x98>)
 800b8a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8b0:	7bfb      	ldrb	r3, [r7, #15]
 800b8b2:	7b7a      	ldrb	r2, [r7, #13]
 800b8b4:	4909      	ldr	r1, [pc, #36]	@ (800b8dc <UARTEx_SetNbDataToProcess+0x94>)
 800b8b6:	5c8a      	ldrb	r2, [r1, r2]
 800b8b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b8bc:	7b7a      	ldrb	r2, [r7, #13]
 800b8be:	4908      	ldr	r1, [pc, #32]	@ (800b8e0 <UARTEx_SetNbDataToProcess+0x98>)
 800b8c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8c6:	b29a      	uxth	r2, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b8ce:	bf00      	nop
 800b8d0:	3714      	adds	r7, #20
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	0800e8ec 	.word	0x0800e8ec
 800b8e0:	0800e8f4 	.word	0x0800e8f4

0800b8e4 <Sensor_max30102_Update>:

//------------------------------------------------------------------------------
// Call this from your main loop (or a scheduler) to refresh GPS data at ~1 Hz
//------------------------------------------------------------------------------
void Sensor_max30102_Update(SmartWatchData_t *sw)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
    if (max30102_has_interrupt(&sw->max30102))
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f000 f997 	bl	800bc26 <max30102_has_interrupt>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d005      	beq.n	800b90a <Sensor_max30102_Update+0x26>
    {
        max30102_interrupt_handler(&sw->max30102); // This populates sw->max30102._ir_samples etc.
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800b904:	4618      	mov	r0, r3
 800b906:	f000 f99b 	bl	800bc40 <max30102_interrupt_handler>
////
////             }
//
//        }
    }
}
 800b90a:	bf00      	nop
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
	...

0800b914 <max30102_plot>:

void max30102_plot(uint32_t ir_sample, uint32_t red_sample){
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
	 printf("ir : %d, red : %d \r\n",ir_sample,red_sample);
 800b91e:	683a      	ldr	r2, [r7, #0]
 800b920:	6879      	ldr	r1, [r7, #4]
 800b922:	4803      	ldr	r0, [pc, #12]	@ (800b930 <max30102_plot+0x1c>)
 800b924:	f001 f924 	bl	800cb70 <iprintf>
}
 800b928:	bf00      	nop
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	0800e84c 	.word	0x0800e84c

0800b934 <Sensor_MAX30102_configure_optimal_hr_spo2>:
 * If signals are too low (small AC, low DC), increase LED current.
 * If signals are saturating (DC near max), decrease LED current or increase ADC range.
 */
void Sensor_MAX30102_configure_optimal_hr_spo2(max30102_t *obj,
		I2C_HandleTypeDef *hi2c)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
//	// After reset, DIE_TEMP_CONFIG register is 0x00, so TEMP_EN is already 0.
//	max30102_set_die_temp_en(obj, 0);

	//------------------ DEBUG -----------------------
	// Initiation
	max30102_init(obj, hi2c);
 800b93e:	6839      	ldr	r1, [r7, #0]
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 f881 	bl	800ba48 <max30102_init>
	max30102_reset(obj);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f8f5 	bl	800bb36 <max30102_reset>
	max30102_clear_fifo(obj);
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 fabf 	bl	800bed0 <max30102_clear_fifo>
	max30102_set_fifo_config(obj, max30102_smp_ave_8, 1, 7);
 800b952:	2307      	movs	r3, #7
 800b954:	2201      	movs	r2, #1
 800b956:	2103      	movs	r1, #3
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 fa7d 	bl	800be58 <max30102_set_fifo_config>

	// Sensor settings
	max30102_set_led_pulse_width(obj, max30102_pw_16_bit);
 800b95e:	2101      	movs	r1, #1
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 f9e6 	bl	800bd32 <max30102_set_led_pulse_width>
	max30102_set_adc_resolution(obj, max30102_adc_2048);
 800b966:	2100      	movs	r1, #0
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 fa05 	bl	800bd78 <max30102_set_adc_resolution>
	max30102_set_sampling_rate(obj, max30102_sr_800);
 800b96e:	2104      	movs	r1, #4
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f9b9 	bl	800bce8 <max30102_set_sampling_rate>
	max30102_set_led_current_1(obj, 6.2);
 800b976:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800b9e4 <Sensor_MAX30102_configure_optimal_hr_spo2+0xb0>
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 fa24 	bl	800bdc8 <max30102_set_led_current_1>
	max30102_set_led_current_2(obj, 6.2);
 800b980:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800b9e4 <Sensor_MAX30102_configure_optimal_hr_spo2+0xb0>
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 fa43 	bl	800be10 <max30102_set_led_current_2>

	// Enter SpO2 mode
	max30102_set_mode(obj, max30102_spo2);
 800b98a:	2103      	movs	r1, #3
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 f985 	bl	800bc9c <max30102_set_mode>
	max30102_set_a_full(obj, 1);
 800b992:	2101      	movs	r1, #1
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 f8df 	bl	800bb58 <max30102_set_a_full>

	// Initiate 1 temperature measurement
	max30102_set_die_temp_en(obj, 1);
 800b99a:	2101      	movs	r1, #1
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 f91c 	bl	800bbda <max30102_set_die_temp_en>
	max30102_set_die_temp_rdy(obj, 1);
 800b9a2:	2101      	movs	r1, #1
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 f900 	bl	800bbaa <max30102_set_die_temp_rdy>

	uint8_t en_reg[2] =
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	81bb      	strh	r3, [r7, #12]
	{ 0 };
	max30102_read(obj, 0x00, en_reg, 1);
 800b9ae:	f107 020c 	add.w	r2, r7, #12
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 f898 	bl	800baec <max30102_read>

	//Enter measurement mode:
	// Enter SpO2 mode
	max30102_set_mode(obj, max30102_spo2);
 800b9bc:	2103      	movs	r1, #3
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 f96c 	bl	800bc9c <max30102_set_mode>

	//Enable the required interrupts:
	// Enable FIFO_A_FULL interrupt
	max30102_set_a_full(obj, 1);
 800b9c4:	2101      	movs	r1, #1
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 f8c6 	bl	800bb58 <max30102_set_a_full>
	// Enable die temperature measurement
	max30102_set_die_temp_en(obj, 1);
 800b9cc:	2101      	movs	r1, #1
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 f903 	bl	800bbda <max30102_set_die_temp_en>
	// Enable DIE_TEMP_RDY interrupt
	max30102_set_die_temp_rdy(obj, 1);
 800b9d4:	2101      	movs	r1, #1
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 f8e7 	bl	800bbaa <max30102_set_die_temp_rdy>
}
 800b9dc:	bf00      	nop
 800b9de:	3710      	adds	r7, #16
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	40c66666 	.word	0x40c66666

0800b9e8 <Sensor_MAX30102_init>:

    return (bpm > 30 && bpm < 240) ? bpm : 0; // Basic sanity check
}

void Sensor_MAX30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c) // Removed sampling_rate_hz parameter
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
    MAX30102_fs = MAX30102_RAW_SAMPLING_RATE / MAX30102_AVERAGING_FACTOR;
 800b9f2:	4b0f      	ldr	r3, [pc, #60]	@ (800ba30 <Sensor_MAX30102_init+0x48>)
 800b9f4:	4a0f      	ldr	r2, [pc, #60]	@ (800ba34 <Sensor_MAX30102_init+0x4c>)
 800b9f6:	601a      	str	r2, [r3, #0]
    printf("DEBUG: Effective MAX30102_fs set to: %.2f Hz\r\n", MAX30102_fs);
 800b9f8:	4b0d      	ldr	r3, [pc, #52]	@ (800ba30 <Sensor_MAX30102_init+0x48>)
 800b9fa:	edd3 7a00 	vldr	s15, [r3]
 800b9fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ba02:	ec53 2b17 	vmov	r2, r3, d7
 800ba06:	480c      	ldr	r0, [pc, #48]	@ (800ba38 <Sensor_MAX30102_init+0x50>)
 800ba08:	f001 f8b2 	bl	800cb70 <iprintf>

    last_MAX30102_hr = 0;
 800ba0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ba3c <Sensor_MAX30102_init+0x54>)
 800ba0e:	2200      	movs	r2, #0
 800ba10:	701a      	strb	r2, [r3, #0]
    last_MAX30102_spo2 = 0;
 800ba12:	4b0b      	ldr	r3, [pc, #44]	@ (800ba40 <Sensor_MAX30102_init+0x58>)
 800ba14:	2200      	movs	r2, #0
 800ba16:	701a      	strb	r2, [r3, #0]
    app_buffer_fill_count = 0;
 800ba18:	4b0a      	ldr	r3, [pc, #40]	@ (800ba44 <Sensor_MAX30102_init+0x5c>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	601a      	str	r2, [r3, #0]

    Sensor_MAX30102_configure_optimal_hr_spo2(obj, hi2c);
 800ba1e:	6839      	ldr	r1, [r7, #0]
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f7ff ff87 	bl	800b934 <Sensor_MAX30102_configure_optimal_hr_spo2>
}
 800ba26:	bf00      	nop
 800ba28:	3708      	adds	r7, #8
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	24000cb4 	.word	0x24000cb4
 800ba34:	42c80000 	.word	0x42c80000
 800ba38:	0800e88c 	.word	0x0800e88c
 800ba3c:	24000cb8 	.word	0x24000cb8
 800ba40:	24000cb9 	.word	0x24000cb9
 800ba44:	24000cbc 	.word	0x24000cbc

0800ba48 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	683a      	ldr	r2, [r7, #0]
 800ba56:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	3304      	adds	r3, #4
 800ba64:	2280      	movs	r2, #128	@ 0x80
 800ba66:	2100      	movs	r1, #0
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f001 f8d6 	bl	800cc1a <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	3384      	adds	r3, #132	@ 0x84
 800ba72:	2280      	movs	r2, #128	@ 0x80
 800ba74:	2100      	movs	r1, #0
 800ba76:	4618      	mov	r0, r3
 800ba78:	f001 f8cf 	bl	800cc1a <memset>
}
 800ba7c:	bf00      	nop
 800ba7e:	3708      	adds	r7, #8
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b088      	sub	sp, #32
 800ba88:	af02      	add	r7, sp, #8
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	607a      	str	r2, [r7, #4]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	460b      	mov	r3, r1
 800ba92:	72fb      	strb	r3, [r7, #11]
 800ba94:	4613      	mov	r3, r2
 800ba96:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 800ba98:	893b      	ldrh	r3, [r7, #8]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f000 fab1 	bl	800c004 <malloc>
 800baa2:	4603      	mov	r3, r0
 800baa4:	617b      	str	r3, [r7, #20]
    *payload = reg;
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	7afa      	ldrb	r2, [r7, #11]
 800baaa:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d009      	beq.n	800bac6 <max30102_write+0x42>
 800bab2:	893b      	ldrh	r3, [r7, #8]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d006      	beq.n	800bac6 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	3301      	adds	r3, #1
 800babc:	893a      	ldrh	r2, [r7, #8]
 800babe:	6879      	ldr	r1, [r7, #4]
 800bac0:	4618      	mov	r0, r3
 800bac2:	f001 f93a 	bl	800cd3a <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6818      	ldr	r0, [r3, #0]
 800baca:	893b      	ldrh	r3, [r7, #8]
 800bacc:	3301      	adds	r3, #1
 800bace:	b29b      	uxth	r3, r3
 800bad0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bad4:	9200      	str	r2, [sp, #0]
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	21ae      	movs	r1, #174	@ 0xae
 800bada:	f7f9 fd07 	bl	80054ec <HAL_I2C_Master_Transmit>
    free(payload);
 800bade:	6978      	ldr	r0, [r7, #20]
 800bae0:	f000 fa98 	bl	800c014 <free>
}
 800bae4:	bf00      	nop
 800bae6:	3718      	adds	r7, #24
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b088      	sub	sp, #32
 800baf0:	af02      	add	r7, sp, #8
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	607a      	str	r2, [r7, #4]
 800baf6:	461a      	mov	r2, r3
 800baf8:	460b      	mov	r3, r1
 800bafa:	72fb      	strb	r3, [r7, #11]
 800bafc:	4613      	mov	r3, r2
 800bafe:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 800bb00:	7afb      	ldrb	r3, [r7, #11]
 800bb02:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6818      	ldr	r0, [r3, #0]
 800bb08:	f107 0217 	add.w	r2, r7, #23
 800bb0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bb10:	9300      	str	r3, [sp, #0]
 800bb12:	2301      	movs	r3, #1
 800bb14:	21ae      	movs	r1, #174	@ 0xae
 800bb16:	f7f9 fce9 	bl	80054ec <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6818      	ldr	r0, [r3, #0]
 800bb1e:	893b      	ldrh	r3, [r7, #8]
 800bb20:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bb24:	9200      	str	r2, [sp, #0]
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	21ae      	movs	r1, #174	@ 0xae
 800bb2a:	f7f9 fdf7 	bl	800571c <HAL_I2C_Master_Receive>
}
 800bb2e:	bf00      	nop
 800bb30:	3718      	adds	r7, #24
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b084      	sub	sp, #16
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 800bb3e:	2340      	movs	r3, #64	@ 0x40
 800bb40:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 800bb42:	f107 020f 	add.w	r2, r7, #15
 800bb46:	2301      	movs	r3, #1
 800bb48:	2109      	movs	r1, #9
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f7ff ff9a 	bl	800ba84 <max30102_write>
}
 800bb50:	bf00      	nop
 800bb52:	3710      	adds	r7, #16
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	460b      	mov	r3, r1
 800bb62:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 800bb64:	2300      	movs	r3, #0
 800bb66:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800bb68:	f107 020f 	add.w	r2, r7, #15
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	2102      	movs	r1, #2
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f7ff ffbb 	bl	800baec <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 800bb76:	7bfb      	ldrb	r3, [r7, #15]
 800bb78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 800bb80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb84:	01db      	lsls	r3, r3, #7
 800bb86:	b25a      	sxtb	r2, r3
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
 800bb8a:	b25b      	sxtb	r3, r3
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	b25b      	sxtb	r3, r3
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800bb94:	f107 020f 	add.w	r2, r7, #15
 800bb98:	2301      	movs	r3, #1
 800bb9a:	2102      	movs	r1, #2
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f7ff ff71 	bl	800ba84 <max30102_write>
}
 800bba2:	bf00      	nop
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b084      	sub	sp, #16
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 800bbb6:	78fb      	ldrb	r3, [r7, #3]
 800bbb8:	005b      	lsls	r3, r3, #1
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	f003 0302 	and.w	r3, r3, #2
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 800bbc4:	f107 020f 	add.w	r2, r7, #15
 800bbc8:	2301      	movs	r3, #1
 800bbca:	2103      	movs	r1, #3
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f7ff ff59 	bl	800ba84 <max30102_write>
}
 800bbd2:	bf00      	nop
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b084      	sub	sp, #16
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 800bbe6:	78fb      	ldrb	r3, [r7, #3]
 800bbe8:	005b      	lsls	r3, r3, #1
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	f003 0302 	and.w	r3, r3, #2
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 800bbf4:	f107 020f 	add.w	r2, r7, #15
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	2121      	movs	r1, #33	@ 0x21
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7ff ff41 	bl	800ba84 <max30102_write>
}
 800bc02:	bf00      	nop
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 800bc0a:	b480      	push	{r7}
 800bc0c:	b083      	sub	sp, #12
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2201      	movs	r2, #1
 800bc16:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 800bc1a:	bf00      	nop
 800bc1c:	370c      	adds	r7, #12
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr

0800bc26 <max30102_has_interrupt>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30102_has_interrupt(max30102_t *obj)
{
 800bc26:	b480      	push	{r7}
 800bc28:	b083      	sub	sp, #12
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	370c      	adds	r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 800bc48:	2300      	movs	r3, #0
 800bc4a:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 800bc4c:	f107 020c 	add.w	r2, r7, #12
 800bc50:	2302      	movs	r3, #2
 800bc52:	2100      	movs	r1, #0
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f7ff ff49 	bl	800baec <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 800bc5a:	7b3b      	ldrb	r3, [r7, #12]
 800bc5c:	09db      	lsrs	r3, r3, #7
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	f003 0301 	and.w	r3, r3, #1
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d002      	beq.n	800bc6e <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 f950 	bl	800bf0e <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 800bc6e:	7b7b      	ldrb	r3, [r7, #13]
 800bc70:	085b      	lsrs	r3, r3, #1
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	f003 0301 	and.w	r3, r3, #1
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d007      	beq.n	800bc8c <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 800bc7c:	f107 020a 	add.w	r2, r7, #10
 800bc80:	f107 030b 	add.w	r3, r7, #11
 800bc84:	4619      	mov	r1, r3
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 f9a6 	bl	800bfd8 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 800bc94:	bf00      	nop
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	460b      	mov	r3, r1
 800bca6:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 800bca8:	f107 020f 	add.w	r2, r7, #15
 800bcac:	2301      	movs	r3, #1
 800bcae:	2109      	movs	r1, #9
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7ff ff1b 	bl	800baec <max30102_read>
    config = (config & 0xf8) | mode;
 800bcb6:	7bfb      	ldrb	r3, [r7, #15]
 800bcb8:	b25b      	sxtb	r3, r3
 800bcba:	f023 0307 	bic.w	r3, r3, #7
 800bcbe:	b25a      	sxtb	r2, r3
 800bcc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	b25b      	sxtb	r3, r3
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 800bccc:	f107 020f 	add.w	r2, r7, #15
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	2109      	movs	r1, #9
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f7ff fed5 	bl	800ba84 <max30102_write>
    max30102_clear_fifo(obj);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 f8f8 	bl	800bed0 <max30102_clear_fifo>
}
 800bce0:	bf00      	nop
 800bce2:	3710      	adds	r7, #16
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800bcf4:	f107 020f 	add.w	r2, r7, #15
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	210a      	movs	r1, #10
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f7ff fef5 	bl	800baec <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 800bd02:	7bfb      	ldrb	r3, [r7, #15]
 800bd04:	b25b      	sxtb	r3, r3
 800bd06:	f003 0363 	and.w	r3, r3, #99	@ 0x63
 800bd0a:	b25a      	sxtb	r2, r3
 800bd0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	b25b      	sxtb	r3, r3
 800bd14:	4313      	orrs	r3, r2
 800bd16:	b25b      	sxtb	r3, r3
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800bd1c:	f107 020f 	add.w	r2, r7, #15
 800bd20:	2301      	movs	r3, #1
 800bd22:	210a      	movs	r1, #10
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f7ff fead 	bl	800ba84 <max30102_write>
}
 800bd2a:	bf00      	nop
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b084      	sub	sp, #16
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800bd3e:	f107 020f 	add.w	r2, r7, #15
 800bd42:	2301      	movs	r3, #1
 800bd44:	210a      	movs	r1, #10
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f7ff fed0 	bl	800baec <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 800bd4c:	7bfb      	ldrb	r3, [r7, #15]
 800bd4e:	b25b      	sxtb	r3, r3
 800bd50:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800bd54:	b25a      	sxtb	r2, r3
 800bd56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	b25b      	sxtb	r3, r3
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800bd62:	f107 020f 	add.w	r2, r7, #15
 800bd66:	2301      	movs	r3, #1
 800bd68:	210a      	movs	r1, #10
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7ff fe8a 	bl	800ba84 <max30102_write>
}
 800bd70:	bf00      	nop
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	460b      	mov	r3, r1
 800bd82:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800bd84:	f107 020f 	add.w	r2, r7, #15
 800bd88:	2301      	movs	r3, #1
 800bd8a:	210a      	movs	r1, #10
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f7ff fead 	bl	800baec <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 800bd92:	7bfb      	ldrb	r3, [r7, #15]
 800bd94:	b25b      	sxtb	r3, r3
 800bd96:	f003 031f 	and.w	r3, r3, #31
 800bd9a:	b25a      	sxtb	r2, r3
 800bd9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bda0:	015b      	lsls	r3, r3, #5
 800bda2:	b25b      	sxtb	r3, r3
 800bda4:	4313      	orrs	r3, r2
 800bda6:	b25b      	sxtb	r3, r3
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800bdac:	f107 020f 	add.w	r2, r7, #15
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	210a      	movs	r1, #10
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f7ff fe65 	bl	800ba84 <max30102_write>
}
 800bdba:	bf00      	nop
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	0000      	movs	r0, r0
 800bdc4:	0000      	movs	r0, r0
	...

0800bdc8 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	ed87 0a02 	vstr	s0, [r7, #8]
    uint8_t pa = ma / 0.2;
 800bdd4:	edd7 7a02 	vldr	s15, [r7, #8]
 800bdd8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800bddc:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 800be08 <max30102_set_led_current_1+0x40>
 800bde0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bde4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800bde8:	edc7 7a01 	vstr	s15, [r7, #4]
 800bdec:	793b      	ldrb	r3, [r7, #4]
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	75fb      	strb	r3, [r7, #23]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 800bdf2:	f107 0217 	add.w	r2, r7, #23
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	210c      	movs	r1, #12
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f7ff fe42 	bl	800ba84 <max30102_write>
}
 800be00:	bf00      	nop
 800be02:	3718      	adds	r7, #24
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	9999999a 	.word	0x9999999a
 800be0c:	3fc99999 	.word	0x3fc99999

0800be10 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	ed87 0a02 	vstr	s0, [r7, #8]
    uint8_t pa = ma / 0.2;
 800be1c:	edd7 7a02 	vldr	s15, [r7, #8]
 800be20:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800be24:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 800be50 <max30102_set_led_current_2+0x40>
 800be28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800be2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800be30:	edc7 7a01 	vstr	s15, [r7, #4]
 800be34:	793b      	ldrb	r3, [r7, #4]
 800be36:	b2db      	uxtb	r3, r3
 800be38:	75fb      	strb	r3, [r7, #23]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 800be3a:	f107 0217 	add.w	r2, r7, #23
 800be3e:	2301      	movs	r3, #1
 800be40:	210d      	movs	r1, #13
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f7ff fe1e 	bl	800ba84 <max30102_write>
}
 800be48:	bf00      	nop
 800be4a:	3718      	adds	r7, #24
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	9999999a 	.word	0x9999999a
 800be54:	3fc99999 	.word	0x3fc99999

0800be58 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	4608      	mov	r0, r1
 800be62:	4611      	mov	r1, r2
 800be64:	461a      	mov	r2, r3
 800be66:	4603      	mov	r3, r0
 800be68:	70fb      	strb	r3, [r7, #3]
 800be6a:	460b      	mov	r3, r1
 800be6c:	70bb      	strb	r3, [r7, #2]
 800be6e:	4613      	mov	r3, r2
 800be70:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 800be72:	2300      	movs	r3, #0
 800be74:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 800be76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be7a:	015b      	lsls	r3, r3, #5
 800be7c:	b25a      	sxtb	r2, r3
 800be7e:	7bfb      	ldrb	r3, [r7, #15]
 800be80:	b25b      	sxtb	r3, r3
 800be82:	4313      	orrs	r3, r2
 800be84:	b25b      	sxtb	r3, r3
 800be86:	b2db      	uxtb	r3, r3
 800be88:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 800be8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800be8e:	011b      	lsls	r3, r3, #4
 800be90:	b25b      	sxtb	r3, r3
 800be92:	f003 0310 	and.w	r3, r3, #16
 800be96:	b25a      	sxtb	r2, r3
 800be98:	7bfb      	ldrb	r3, [r7, #15]
 800be9a:	b25b      	sxtb	r3, r3
 800be9c:	4313      	orrs	r3, r2
 800be9e:	b25b      	sxtb	r3, r3
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 800bea4:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800bea8:	f003 030f 	and.w	r3, r3, #15
 800beac:	b25a      	sxtb	r2, r3
 800beae:	7bfb      	ldrb	r3, [r7, #15]
 800beb0:	b25b      	sxtb	r3, r3
 800beb2:	4313      	orrs	r3, r2
 800beb4:	b25b      	sxtb	r3, r3
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 800beba:	f107 020f 	add.w	r2, r7, #15
 800bebe:	2301      	movs	r3, #1
 800bec0:	2108      	movs	r1, #8
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f7ff fdde 	bl	800ba84 <max30102_write>
}
 800bec8:	bf00      	nop
 800beca:	3710      	adds	r7, #16
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 800bed8:	2300      	movs	r3, #0
 800beda:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 800bedc:	f107 020f 	add.w	r2, r7, #15
 800bee0:	2303      	movs	r3, #3
 800bee2:	2104      	movs	r1, #4
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f7ff fdcd 	bl	800ba84 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 800beea:	f107 020f 	add.w	r2, r7, #15
 800beee:	2303      	movs	r3, #3
 800bef0:	2106      	movs	r1, #6
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f7ff fdc6 	bl	800ba84 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 800bef8:	f107 020f 	add.w	r2, r7, #15
 800befc:	2303      	movs	r3, #3
 800befe:	2105      	movs	r1, #5
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f7ff fdbf 	bl	800ba84 <max30102_write>
}
 800bf06:	bf00      	nop
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b088      	sub	sp, #32
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 800bf16:	2300      	movs	r3, #0
 800bf18:	74fb      	strb	r3, [r7, #19]
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 800bf1e:	f107 0213 	add.w	r2, r7, #19
 800bf22:	2301      	movs	r3, #1
 800bf24:	2104      	movs	r1, #4
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f7ff fde0 	bl	800baec <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 800bf2c:	f107 0212 	add.w	r2, r7, #18
 800bf30:	2301      	movs	r3, #1
 800bf32:	2106      	movs	r1, #6
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7ff fdd9 	bl	800baec <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 800bf3a:	7cfa      	ldrb	r2, [r7, #19]
 800bf3c:	7cbb      	ldrb	r3, [r7, #18]
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 800bf44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	dc03      	bgt.n	800bf54 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 800bf4c:	7ffb      	ldrb	r3, [r7, #31]
 800bf4e:	3320      	adds	r3, #32
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 800bf54:	2300      	movs	r3, #0
 800bf56:	77bb      	strb	r3, [r7, #30]
 800bf58:	e033      	b.n	800bfc2 <max30102_read_fifo+0xb4>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 800bf5a:	f107 020c 	add.w	r2, r7, #12
 800bf5e:	2306      	movs	r3, #6
 800bf60:	2107      	movs	r1, #7
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f7ff fdc2 	bl	800baec <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 800bf68:	7b3b      	ldrb	r3, [r7, #12]
 800bf6a:	041a      	lsls	r2, r3, #16
 800bf6c:	7b7b      	ldrb	r3, [r7, #13]
 800bf6e:	021b      	lsls	r3, r3, #8
 800bf70:	4313      	orrs	r3, r2
 800bf72:	7bba      	ldrb	r2, [r7, #14]
 800bf74:	4313      	orrs	r3, r2
 800bf76:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800bf7a:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 800bf7c:	7bfb      	ldrb	r3, [r7, #15]
 800bf7e:	041a      	lsls	r2, r3, #16
 800bf80:	7c3b      	ldrb	r3, [r7, #16]
 800bf82:	021b      	lsls	r3, r3, #8
 800bf84:	4313      	orrs	r3, r2
 800bf86:	7c7a      	ldrb	r2, [r7, #17]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800bf8e:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 800bf90:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	4413      	add	r3, r2
 800bf9a:	69ba      	ldr	r2, [r7, #24]
 800bf9c:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 800bf9e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	3320      	adds	r3, #32
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	4413      	add	r3, r2
 800bfaa:	697a      	ldr	r2, [r7, #20]
 800bfac:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 800bfae:	6979      	ldr	r1, [r7, #20]
 800bfb0:	69b8      	ldr	r0, [r7, #24]
 800bfb2:	f7ff fcaf 	bl	800b914 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 800bfb6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	77bb      	strb	r3, [r7, #30]
 800bfc2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800bfc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	dbc5      	blt.n	800bf5a <max30102_read_fifo+0x4c>
    }
}
 800bfce:	bf00      	nop
 800bfd0:	bf00      	nop
 800bfd2:	3720      	adds	r7, #32
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	68ba      	ldr	r2, [r7, #8]
 800bfe8:	211f      	movs	r1, #31
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f7ff fd7e 	bl	800baec <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 800bff0:	2301      	movs	r3, #1
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	2120      	movs	r1, #32
 800bff6:	68f8      	ldr	r0, [r7, #12]
 800bff8:	f7ff fd78 	bl	800baec <max30102_read>
}
 800bffc:	bf00      	nop
 800bffe:	3710      	adds	r7, #16
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <malloc>:
 800c004:	4b02      	ldr	r3, [pc, #8]	@ (800c010 <malloc+0xc>)
 800c006:	4601      	mov	r1, r0
 800c008:	6818      	ldr	r0, [r3, #0]
 800c00a:	f000 b82d 	b.w	800c068 <_malloc_r>
 800c00e:	bf00      	nop
 800c010:	2400001c 	.word	0x2400001c

0800c014 <free>:
 800c014:	4b02      	ldr	r3, [pc, #8]	@ (800c020 <free+0xc>)
 800c016:	4601      	mov	r1, r0
 800c018:	6818      	ldr	r0, [r3, #0]
 800c01a:	f001 bc83 	b.w	800d924 <_free_r>
 800c01e:	bf00      	nop
 800c020:	2400001c 	.word	0x2400001c

0800c024 <sbrk_aligned>:
 800c024:	b570      	push	{r4, r5, r6, lr}
 800c026:	4e0f      	ldr	r6, [pc, #60]	@ (800c064 <sbrk_aligned+0x40>)
 800c028:	460c      	mov	r4, r1
 800c02a:	6831      	ldr	r1, [r6, #0]
 800c02c:	4605      	mov	r5, r0
 800c02e:	b911      	cbnz	r1, 800c036 <sbrk_aligned+0x12>
 800c030:	f000 fe34 	bl	800cc9c <_sbrk_r>
 800c034:	6030      	str	r0, [r6, #0]
 800c036:	4621      	mov	r1, r4
 800c038:	4628      	mov	r0, r5
 800c03a:	f000 fe2f 	bl	800cc9c <_sbrk_r>
 800c03e:	1c43      	adds	r3, r0, #1
 800c040:	d103      	bne.n	800c04a <sbrk_aligned+0x26>
 800c042:	f04f 34ff 	mov.w	r4, #4294967295
 800c046:	4620      	mov	r0, r4
 800c048:	bd70      	pop	{r4, r5, r6, pc}
 800c04a:	1cc4      	adds	r4, r0, #3
 800c04c:	f024 0403 	bic.w	r4, r4, #3
 800c050:	42a0      	cmp	r0, r4
 800c052:	d0f8      	beq.n	800c046 <sbrk_aligned+0x22>
 800c054:	1a21      	subs	r1, r4, r0
 800c056:	4628      	mov	r0, r5
 800c058:	f000 fe20 	bl	800cc9c <_sbrk_r>
 800c05c:	3001      	adds	r0, #1
 800c05e:	d1f2      	bne.n	800c046 <sbrk_aligned+0x22>
 800c060:	e7ef      	b.n	800c042 <sbrk_aligned+0x1e>
 800c062:	bf00      	nop
 800c064:	24000cc0 	.word	0x24000cc0

0800c068 <_malloc_r>:
 800c068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c06c:	1ccd      	adds	r5, r1, #3
 800c06e:	f025 0503 	bic.w	r5, r5, #3
 800c072:	3508      	adds	r5, #8
 800c074:	2d0c      	cmp	r5, #12
 800c076:	bf38      	it	cc
 800c078:	250c      	movcc	r5, #12
 800c07a:	2d00      	cmp	r5, #0
 800c07c:	4606      	mov	r6, r0
 800c07e:	db01      	blt.n	800c084 <_malloc_r+0x1c>
 800c080:	42a9      	cmp	r1, r5
 800c082:	d904      	bls.n	800c08e <_malloc_r+0x26>
 800c084:	230c      	movs	r3, #12
 800c086:	6033      	str	r3, [r6, #0]
 800c088:	2000      	movs	r0, #0
 800c08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c08e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c164 <_malloc_r+0xfc>
 800c092:	f000 f869 	bl	800c168 <__malloc_lock>
 800c096:	f8d8 3000 	ldr.w	r3, [r8]
 800c09a:	461c      	mov	r4, r3
 800c09c:	bb44      	cbnz	r4, 800c0f0 <_malloc_r+0x88>
 800c09e:	4629      	mov	r1, r5
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f7ff ffbf 	bl	800c024 <sbrk_aligned>
 800c0a6:	1c43      	adds	r3, r0, #1
 800c0a8:	4604      	mov	r4, r0
 800c0aa:	d158      	bne.n	800c15e <_malloc_r+0xf6>
 800c0ac:	f8d8 4000 	ldr.w	r4, [r8]
 800c0b0:	4627      	mov	r7, r4
 800c0b2:	2f00      	cmp	r7, #0
 800c0b4:	d143      	bne.n	800c13e <_malloc_r+0xd6>
 800c0b6:	2c00      	cmp	r4, #0
 800c0b8:	d04b      	beq.n	800c152 <_malloc_r+0xea>
 800c0ba:	6823      	ldr	r3, [r4, #0]
 800c0bc:	4639      	mov	r1, r7
 800c0be:	4630      	mov	r0, r6
 800c0c0:	eb04 0903 	add.w	r9, r4, r3
 800c0c4:	f000 fdea 	bl	800cc9c <_sbrk_r>
 800c0c8:	4581      	cmp	r9, r0
 800c0ca:	d142      	bne.n	800c152 <_malloc_r+0xea>
 800c0cc:	6821      	ldr	r1, [r4, #0]
 800c0ce:	1a6d      	subs	r5, r5, r1
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	f7ff ffa6 	bl	800c024 <sbrk_aligned>
 800c0d8:	3001      	adds	r0, #1
 800c0da:	d03a      	beq.n	800c152 <_malloc_r+0xea>
 800c0dc:	6823      	ldr	r3, [r4, #0]
 800c0de:	442b      	add	r3, r5
 800c0e0:	6023      	str	r3, [r4, #0]
 800c0e2:	f8d8 3000 	ldr.w	r3, [r8]
 800c0e6:	685a      	ldr	r2, [r3, #4]
 800c0e8:	bb62      	cbnz	r2, 800c144 <_malloc_r+0xdc>
 800c0ea:	f8c8 7000 	str.w	r7, [r8]
 800c0ee:	e00f      	b.n	800c110 <_malloc_r+0xa8>
 800c0f0:	6822      	ldr	r2, [r4, #0]
 800c0f2:	1b52      	subs	r2, r2, r5
 800c0f4:	d420      	bmi.n	800c138 <_malloc_r+0xd0>
 800c0f6:	2a0b      	cmp	r2, #11
 800c0f8:	d917      	bls.n	800c12a <_malloc_r+0xc2>
 800c0fa:	1961      	adds	r1, r4, r5
 800c0fc:	42a3      	cmp	r3, r4
 800c0fe:	6025      	str	r5, [r4, #0]
 800c100:	bf18      	it	ne
 800c102:	6059      	strne	r1, [r3, #4]
 800c104:	6863      	ldr	r3, [r4, #4]
 800c106:	bf08      	it	eq
 800c108:	f8c8 1000 	streq.w	r1, [r8]
 800c10c:	5162      	str	r2, [r4, r5]
 800c10e:	604b      	str	r3, [r1, #4]
 800c110:	4630      	mov	r0, r6
 800c112:	f000 f82f 	bl	800c174 <__malloc_unlock>
 800c116:	f104 000b 	add.w	r0, r4, #11
 800c11a:	1d23      	adds	r3, r4, #4
 800c11c:	f020 0007 	bic.w	r0, r0, #7
 800c120:	1ac2      	subs	r2, r0, r3
 800c122:	bf1c      	itt	ne
 800c124:	1a1b      	subne	r3, r3, r0
 800c126:	50a3      	strne	r3, [r4, r2]
 800c128:	e7af      	b.n	800c08a <_malloc_r+0x22>
 800c12a:	6862      	ldr	r2, [r4, #4]
 800c12c:	42a3      	cmp	r3, r4
 800c12e:	bf0c      	ite	eq
 800c130:	f8c8 2000 	streq.w	r2, [r8]
 800c134:	605a      	strne	r2, [r3, #4]
 800c136:	e7eb      	b.n	800c110 <_malloc_r+0xa8>
 800c138:	4623      	mov	r3, r4
 800c13a:	6864      	ldr	r4, [r4, #4]
 800c13c:	e7ae      	b.n	800c09c <_malloc_r+0x34>
 800c13e:	463c      	mov	r4, r7
 800c140:	687f      	ldr	r7, [r7, #4]
 800c142:	e7b6      	b.n	800c0b2 <_malloc_r+0x4a>
 800c144:	461a      	mov	r2, r3
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	42a3      	cmp	r3, r4
 800c14a:	d1fb      	bne.n	800c144 <_malloc_r+0xdc>
 800c14c:	2300      	movs	r3, #0
 800c14e:	6053      	str	r3, [r2, #4]
 800c150:	e7de      	b.n	800c110 <_malloc_r+0xa8>
 800c152:	230c      	movs	r3, #12
 800c154:	6033      	str	r3, [r6, #0]
 800c156:	4630      	mov	r0, r6
 800c158:	f000 f80c 	bl	800c174 <__malloc_unlock>
 800c15c:	e794      	b.n	800c088 <_malloc_r+0x20>
 800c15e:	6005      	str	r5, [r0, #0]
 800c160:	e7d6      	b.n	800c110 <_malloc_r+0xa8>
 800c162:	bf00      	nop
 800c164:	24000cc4 	.word	0x24000cc4

0800c168 <__malloc_lock>:
 800c168:	4801      	ldr	r0, [pc, #4]	@ (800c170 <__malloc_lock+0x8>)
 800c16a:	f000 bde4 	b.w	800cd36 <__retarget_lock_acquire_recursive>
 800c16e:	bf00      	nop
 800c170:	24000e08 	.word	0x24000e08

0800c174 <__malloc_unlock>:
 800c174:	4801      	ldr	r0, [pc, #4]	@ (800c17c <__malloc_unlock+0x8>)
 800c176:	f000 bddf 	b.w	800cd38 <__retarget_lock_release_recursive>
 800c17a:	bf00      	nop
 800c17c:	24000e08 	.word	0x24000e08

0800c180 <__cvt>:
 800c180:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c182:	ed2d 8b02 	vpush	{d8}
 800c186:	eeb0 8b40 	vmov.f64	d8, d0
 800c18a:	b085      	sub	sp, #20
 800c18c:	4617      	mov	r7, r2
 800c18e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c190:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c192:	ee18 2a90 	vmov	r2, s17
 800c196:	f025 0520 	bic.w	r5, r5, #32
 800c19a:	2a00      	cmp	r2, #0
 800c19c:	bfb6      	itet	lt
 800c19e:	222d      	movlt	r2, #45	@ 0x2d
 800c1a0:	2200      	movge	r2, #0
 800c1a2:	eeb1 8b40 	vneglt.f64	d8, d0
 800c1a6:	2d46      	cmp	r5, #70	@ 0x46
 800c1a8:	460c      	mov	r4, r1
 800c1aa:	701a      	strb	r2, [r3, #0]
 800c1ac:	d004      	beq.n	800c1b8 <__cvt+0x38>
 800c1ae:	2d45      	cmp	r5, #69	@ 0x45
 800c1b0:	d100      	bne.n	800c1b4 <__cvt+0x34>
 800c1b2:	3401      	adds	r4, #1
 800c1b4:	2102      	movs	r1, #2
 800c1b6:	e000      	b.n	800c1ba <__cvt+0x3a>
 800c1b8:	2103      	movs	r1, #3
 800c1ba:	ab03      	add	r3, sp, #12
 800c1bc:	9301      	str	r3, [sp, #4]
 800c1be:	ab02      	add	r3, sp, #8
 800c1c0:	9300      	str	r3, [sp, #0]
 800c1c2:	4622      	mov	r2, r4
 800c1c4:	4633      	mov	r3, r6
 800c1c6:	eeb0 0b48 	vmov.f64	d0, d8
 800c1ca:	f000 fe4d 	bl	800ce68 <_dtoa_r>
 800c1ce:	2d47      	cmp	r5, #71	@ 0x47
 800c1d0:	d114      	bne.n	800c1fc <__cvt+0x7c>
 800c1d2:	07fb      	lsls	r3, r7, #31
 800c1d4:	d50a      	bpl.n	800c1ec <__cvt+0x6c>
 800c1d6:	1902      	adds	r2, r0, r4
 800c1d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e0:	bf08      	it	eq
 800c1e2:	9203      	streq	r2, [sp, #12]
 800c1e4:	2130      	movs	r1, #48	@ 0x30
 800c1e6:	9b03      	ldr	r3, [sp, #12]
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d319      	bcc.n	800c220 <__cvt+0xa0>
 800c1ec:	9b03      	ldr	r3, [sp, #12]
 800c1ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1f0:	1a1b      	subs	r3, r3, r0
 800c1f2:	6013      	str	r3, [r2, #0]
 800c1f4:	b005      	add	sp, #20
 800c1f6:	ecbd 8b02 	vpop	{d8}
 800c1fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1fc:	2d46      	cmp	r5, #70	@ 0x46
 800c1fe:	eb00 0204 	add.w	r2, r0, r4
 800c202:	d1e9      	bne.n	800c1d8 <__cvt+0x58>
 800c204:	7803      	ldrb	r3, [r0, #0]
 800c206:	2b30      	cmp	r3, #48	@ 0x30
 800c208:	d107      	bne.n	800c21a <__cvt+0x9a>
 800c20a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c212:	bf1c      	itt	ne
 800c214:	f1c4 0401 	rsbne	r4, r4, #1
 800c218:	6034      	strne	r4, [r6, #0]
 800c21a:	6833      	ldr	r3, [r6, #0]
 800c21c:	441a      	add	r2, r3
 800c21e:	e7db      	b.n	800c1d8 <__cvt+0x58>
 800c220:	1c5c      	adds	r4, r3, #1
 800c222:	9403      	str	r4, [sp, #12]
 800c224:	7019      	strb	r1, [r3, #0]
 800c226:	e7de      	b.n	800c1e6 <__cvt+0x66>

0800c228 <__exponent>:
 800c228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c22a:	2900      	cmp	r1, #0
 800c22c:	bfba      	itte	lt
 800c22e:	4249      	neglt	r1, r1
 800c230:	232d      	movlt	r3, #45	@ 0x2d
 800c232:	232b      	movge	r3, #43	@ 0x2b
 800c234:	2909      	cmp	r1, #9
 800c236:	7002      	strb	r2, [r0, #0]
 800c238:	7043      	strb	r3, [r0, #1]
 800c23a:	dd29      	ble.n	800c290 <__exponent+0x68>
 800c23c:	f10d 0307 	add.w	r3, sp, #7
 800c240:	461d      	mov	r5, r3
 800c242:	270a      	movs	r7, #10
 800c244:	461a      	mov	r2, r3
 800c246:	fbb1 f6f7 	udiv	r6, r1, r7
 800c24a:	fb07 1416 	mls	r4, r7, r6, r1
 800c24e:	3430      	adds	r4, #48	@ 0x30
 800c250:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c254:	460c      	mov	r4, r1
 800c256:	2c63      	cmp	r4, #99	@ 0x63
 800c258:	f103 33ff 	add.w	r3, r3, #4294967295
 800c25c:	4631      	mov	r1, r6
 800c25e:	dcf1      	bgt.n	800c244 <__exponent+0x1c>
 800c260:	3130      	adds	r1, #48	@ 0x30
 800c262:	1e94      	subs	r4, r2, #2
 800c264:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c268:	1c41      	adds	r1, r0, #1
 800c26a:	4623      	mov	r3, r4
 800c26c:	42ab      	cmp	r3, r5
 800c26e:	d30a      	bcc.n	800c286 <__exponent+0x5e>
 800c270:	f10d 0309 	add.w	r3, sp, #9
 800c274:	1a9b      	subs	r3, r3, r2
 800c276:	42ac      	cmp	r4, r5
 800c278:	bf88      	it	hi
 800c27a:	2300      	movhi	r3, #0
 800c27c:	3302      	adds	r3, #2
 800c27e:	4403      	add	r3, r0
 800c280:	1a18      	subs	r0, r3, r0
 800c282:	b003      	add	sp, #12
 800c284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c286:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c28a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c28e:	e7ed      	b.n	800c26c <__exponent+0x44>
 800c290:	2330      	movs	r3, #48	@ 0x30
 800c292:	3130      	adds	r1, #48	@ 0x30
 800c294:	7083      	strb	r3, [r0, #2]
 800c296:	70c1      	strb	r1, [r0, #3]
 800c298:	1d03      	adds	r3, r0, #4
 800c29a:	e7f1      	b.n	800c280 <__exponent+0x58>
 800c29c:	0000      	movs	r0, r0
	...

0800c2a0 <_printf_float>:
 800c2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a4:	b08d      	sub	sp, #52	@ 0x34
 800c2a6:	460c      	mov	r4, r1
 800c2a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c2ac:	4616      	mov	r6, r2
 800c2ae:	461f      	mov	r7, r3
 800c2b0:	4605      	mov	r5, r0
 800c2b2:	f000 fcbb 	bl	800cc2c <_localeconv_r>
 800c2b6:	f8d0 b000 	ldr.w	fp, [r0]
 800c2ba:	4658      	mov	r0, fp
 800c2bc:	f7f4 f868 	bl	8000390 <strlen>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2c4:	f8d8 3000 	ldr.w	r3, [r8]
 800c2c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c2cc:	6822      	ldr	r2, [r4, #0]
 800c2ce:	9005      	str	r0, [sp, #20]
 800c2d0:	3307      	adds	r3, #7
 800c2d2:	f023 0307 	bic.w	r3, r3, #7
 800c2d6:	f103 0108 	add.w	r1, r3, #8
 800c2da:	f8c8 1000 	str.w	r1, [r8]
 800c2de:	ed93 0b00 	vldr	d0, [r3]
 800c2e2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c540 <_printf_float+0x2a0>
 800c2e6:	eeb0 7bc0 	vabs.f64	d7, d0
 800c2ea:	eeb4 7b46 	vcmp.f64	d7, d6
 800c2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2f2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800c2f6:	dd24      	ble.n	800c342 <_printf_float+0xa2>
 800c2f8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c300:	d502      	bpl.n	800c308 <_printf_float+0x68>
 800c302:	232d      	movs	r3, #45	@ 0x2d
 800c304:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c308:	498f      	ldr	r1, [pc, #572]	@ (800c548 <_printf_float+0x2a8>)
 800c30a:	4b90      	ldr	r3, [pc, #576]	@ (800c54c <_printf_float+0x2ac>)
 800c30c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800c310:	bf8c      	ite	hi
 800c312:	4688      	movhi	r8, r1
 800c314:	4698      	movls	r8, r3
 800c316:	f022 0204 	bic.w	r2, r2, #4
 800c31a:	2303      	movs	r3, #3
 800c31c:	6123      	str	r3, [r4, #16]
 800c31e:	6022      	str	r2, [r4, #0]
 800c320:	f04f 0a00 	mov.w	sl, #0
 800c324:	9700      	str	r7, [sp, #0]
 800c326:	4633      	mov	r3, r6
 800c328:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c32a:	4621      	mov	r1, r4
 800c32c:	4628      	mov	r0, r5
 800c32e:	f000 f9d1 	bl	800c6d4 <_printf_common>
 800c332:	3001      	adds	r0, #1
 800c334:	f040 8089 	bne.w	800c44a <_printf_float+0x1aa>
 800c338:	f04f 30ff 	mov.w	r0, #4294967295
 800c33c:	b00d      	add	sp, #52	@ 0x34
 800c33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c342:	eeb4 0b40 	vcmp.f64	d0, d0
 800c346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c34a:	d709      	bvc.n	800c360 <_printf_float+0xc0>
 800c34c:	ee10 3a90 	vmov	r3, s1
 800c350:	2b00      	cmp	r3, #0
 800c352:	bfbc      	itt	lt
 800c354:	232d      	movlt	r3, #45	@ 0x2d
 800c356:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c35a:	497d      	ldr	r1, [pc, #500]	@ (800c550 <_printf_float+0x2b0>)
 800c35c:	4b7d      	ldr	r3, [pc, #500]	@ (800c554 <_printf_float+0x2b4>)
 800c35e:	e7d5      	b.n	800c30c <_printf_float+0x6c>
 800c360:	6863      	ldr	r3, [r4, #4]
 800c362:	1c59      	adds	r1, r3, #1
 800c364:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800c368:	d139      	bne.n	800c3de <_printf_float+0x13e>
 800c36a:	2306      	movs	r3, #6
 800c36c:	6063      	str	r3, [r4, #4]
 800c36e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c372:	2300      	movs	r3, #0
 800c374:	6022      	str	r2, [r4, #0]
 800c376:	9303      	str	r3, [sp, #12]
 800c378:	ab0a      	add	r3, sp, #40	@ 0x28
 800c37a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c37e:	ab09      	add	r3, sp, #36	@ 0x24
 800c380:	9300      	str	r3, [sp, #0]
 800c382:	6861      	ldr	r1, [r4, #4]
 800c384:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c388:	4628      	mov	r0, r5
 800c38a:	f7ff fef9 	bl	800c180 <__cvt>
 800c38e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c392:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c394:	4680      	mov	r8, r0
 800c396:	d129      	bne.n	800c3ec <_printf_float+0x14c>
 800c398:	1cc8      	adds	r0, r1, #3
 800c39a:	db02      	blt.n	800c3a2 <_printf_float+0x102>
 800c39c:	6863      	ldr	r3, [r4, #4]
 800c39e:	4299      	cmp	r1, r3
 800c3a0:	dd41      	ble.n	800c426 <_printf_float+0x186>
 800c3a2:	f1a9 0902 	sub.w	r9, r9, #2
 800c3a6:	fa5f f989 	uxtb.w	r9, r9
 800c3aa:	3901      	subs	r1, #1
 800c3ac:	464a      	mov	r2, r9
 800c3ae:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c3b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800c3b4:	f7ff ff38 	bl	800c228 <__exponent>
 800c3b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3ba:	1813      	adds	r3, r2, r0
 800c3bc:	2a01      	cmp	r2, #1
 800c3be:	4682      	mov	sl, r0
 800c3c0:	6123      	str	r3, [r4, #16]
 800c3c2:	dc02      	bgt.n	800c3ca <_printf_float+0x12a>
 800c3c4:	6822      	ldr	r2, [r4, #0]
 800c3c6:	07d2      	lsls	r2, r2, #31
 800c3c8:	d501      	bpl.n	800c3ce <_printf_float+0x12e>
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	6123      	str	r3, [r4, #16]
 800c3ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d0a6      	beq.n	800c324 <_printf_float+0x84>
 800c3d6:	232d      	movs	r3, #45	@ 0x2d
 800c3d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3dc:	e7a2      	b.n	800c324 <_printf_float+0x84>
 800c3de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c3e2:	d1c4      	bne.n	800c36e <_printf_float+0xce>
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1c2      	bne.n	800c36e <_printf_float+0xce>
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	e7bf      	b.n	800c36c <_printf_float+0xcc>
 800c3ec:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c3f0:	d9db      	bls.n	800c3aa <_printf_float+0x10a>
 800c3f2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800c3f6:	d118      	bne.n	800c42a <_printf_float+0x18a>
 800c3f8:	2900      	cmp	r1, #0
 800c3fa:	6863      	ldr	r3, [r4, #4]
 800c3fc:	dd0b      	ble.n	800c416 <_printf_float+0x176>
 800c3fe:	6121      	str	r1, [r4, #16]
 800c400:	b913      	cbnz	r3, 800c408 <_printf_float+0x168>
 800c402:	6822      	ldr	r2, [r4, #0]
 800c404:	07d0      	lsls	r0, r2, #31
 800c406:	d502      	bpl.n	800c40e <_printf_float+0x16e>
 800c408:	3301      	adds	r3, #1
 800c40a:	440b      	add	r3, r1
 800c40c:	6123      	str	r3, [r4, #16]
 800c40e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c410:	f04f 0a00 	mov.w	sl, #0
 800c414:	e7db      	b.n	800c3ce <_printf_float+0x12e>
 800c416:	b913      	cbnz	r3, 800c41e <_printf_float+0x17e>
 800c418:	6822      	ldr	r2, [r4, #0]
 800c41a:	07d2      	lsls	r2, r2, #31
 800c41c:	d501      	bpl.n	800c422 <_printf_float+0x182>
 800c41e:	3302      	adds	r3, #2
 800c420:	e7f4      	b.n	800c40c <_printf_float+0x16c>
 800c422:	2301      	movs	r3, #1
 800c424:	e7f2      	b.n	800c40c <_printf_float+0x16c>
 800c426:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800c42a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c42c:	4299      	cmp	r1, r3
 800c42e:	db05      	blt.n	800c43c <_printf_float+0x19c>
 800c430:	6823      	ldr	r3, [r4, #0]
 800c432:	6121      	str	r1, [r4, #16]
 800c434:	07d8      	lsls	r0, r3, #31
 800c436:	d5ea      	bpl.n	800c40e <_printf_float+0x16e>
 800c438:	1c4b      	adds	r3, r1, #1
 800c43a:	e7e7      	b.n	800c40c <_printf_float+0x16c>
 800c43c:	2900      	cmp	r1, #0
 800c43e:	bfd4      	ite	le
 800c440:	f1c1 0202 	rsble	r2, r1, #2
 800c444:	2201      	movgt	r2, #1
 800c446:	4413      	add	r3, r2
 800c448:	e7e0      	b.n	800c40c <_printf_float+0x16c>
 800c44a:	6823      	ldr	r3, [r4, #0]
 800c44c:	055a      	lsls	r2, r3, #21
 800c44e:	d407      	bmi.n	800c460 <_printf_float+0x1c0>
 800c450:	6923      	ldr	r3, [r4, #16]
 800c452:	4642      	mov	r2, r8
 800c454:	4631      	mov	r1, r6
 800c456:	4628      	mov	r0, r5
 800c458:	47b8      	blx	r7
 800c45a:	3001      	adds	r0, #1
 800c45c:	d12a      	bne.n	800c4b4 <_printf_float+0x214>
 800c45e:	e76b      	b.n	800c338 <_printf_float+0x98>
 800c460:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c464:	f240 80e0 	bls.w	800c628 <_printf_float+0x388>
 800c468:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c46c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c474:	d133      	bne.n	800c4de <_printf_float+0x23e>
 800c476:	4a38      	ldr	r2, [pc, #224]	@ (800c558 <_printf_float+0x2b8>)
 800c478:	2301      	movs	r3, #1
 800c47a:	4631      	mov	r1, r6
 800c47c:	4628      	mov	r0, r5
 800c47e:	47b8      	blx	r7
 800c480:	3001      	adds	r0, #1
 800c482:	f43f af59 	beq.w	800c338 <_printf_float+0x98>
 800c486:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c48a:	4543      	cmp	r3, r8
 800c48c:	db02      	blt.n	800c494 <_printf_float+0x1f4>
 800c48e:	6823      	ldr	r3, [r4, #0]
 800c490:	07d8      	lsls	r0, r3, #31
 800c492:	d50f      	bpl.n	800c4b4 <_printf_float+0x214>
 800c494:	9b05      	ldr	r3, [sp, #20]
 800c496:	465a      	mov	r2, fp
 800c498:	4631      	mov	r1, r6
 800c49a:	4628      	mov	r0, r5
 800c49c:	47b8      	blx	r7
 800c49e:	3001      	adds	r0, #1
 800c4a0:	f43f af4a 	beq.w	800c338 <_printf_float+0x98>
 800c4a4:	f04f 0900 	mov.w	r9, #0
 800c4a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4ac:	f104 0a1a 	add.w	sl, r4, #26
 800c4b0:	45c8      	cmp	r8, r9
 800c4b2:	dc09      	bgt.n	800c4c8 <_printf_float+0x228>
 800c4b4:	6823      	ldr	r3, [r4, #0]
 800c4b6:	079b      	lsls	r3, r3, #30
 800c4b8:	f100 8107 	bmi.w	800c6ca <_printf_float+0x42a>
 800c4bc:	68e0      	ldr	r0, [r4, #12]
 800c4be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4c0:	4298      	cmp	r0, r3
 800c4c2:	bfb8      	it	lt
 800c4c4:	4618      	movlt	r0, r3
 800c4c6:	e739      	b.n	800c33c <_printf_float+0x9c>
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	4652      	mov	r2, sl
 800c4cc:	4631      	mov	r1, r6
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	47b8      	blx	r7
 800c4d2:	3001      	adds	r0, #1
 800c4d4:	f43f af30 	beq.w	800c338 <_printf_float+0x98>
 800c4d8:	f109 0901 	add.w	r9, r9, #1
 800c4dc:	e7e8      	b.n	800c4b0 <_printf_float+0x210>
 800c4de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	dc3b      	bgt.n	800c55c <_printf_float+0x2bc>
 800c4e4:	4a1c      	ldr	r2, [pc, #112]	@ (800c558 <_printf_float+0x2b8>)
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	4631      	mov	r1, r6
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	47b8      	blx	r7
 800c4ee:	3001      	adds	r0, #1
 800c4f0:	f43f af22 	beq.w	800c338 <_printf_float+0x98>
 800c4f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c4f8:	ea59 0303 	orrs.w	r3, r9, r3
 800c4fc:	d102      	bne.n	800c504 <_printf_float+0x264>
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	07d9      	lsls	r1, r3, #31
 800c502:	d5d7      	bpl.n	800c4b4 <_printf_float+0x214>
 800c504:	9b05      	ldr	r3, [sp, #20]
 800c506:	465a      	mov	r2, fp
 800c508:	4631      	mov	r1, r6
 800c50a:	4628      	mov	r0, r5
 800c50c:	47b8      	blx	r7
 800c50e:	3001      	adds	r0, #1
 800c510:	f43f af12 	beq.w	800c338 <_printf_float+0x98>
 800c514:	f04f 0a00 	mov.w	sl, #0
 800c518:	f104 0b1a 	add.w	fp, r4, #26
 800c51c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c51e:	425b      	negs	r3, r3
 800c520:	4553      	cmp	r3, sl
 800c522:	dc01      	bgt.n	800c528 <_printf_float+0x288>
 800c524:	464b      	mov	r3, r9
 800c526:	e794      	b.n	800c452 <_printf_float+0x1b2>
 800c528:	2301      	movs	r3, #1
 800c52a:	465a      	mov	r2, fp
 800c52c:	4631      	mov	r1, r6
 800c52e:	4628      	mov	r0, r5
 800c530:	47b8      	blx	r7
 800c532:	3001      	adds	r0, #1
 800c534:	f43f af00 	beq.w	800c338 <_printf_float+0x98>
 800c538:	f10a 0a01 	add.w	sl, sl, #1
 800c53c:	e7ee      	b.n	800c51c <_printf_float+0x27c>
 800c53e:	bf00      	nop
 800c540:	ffffffff 	.word	0xffffffff
 800c544:	7fefffff 	.word	0x7fefffff
 800c548:	0800e900 	.word	0x0800e900
 800c54c:	0800e8fc 	.word	0x0800e8fc
 800c550:	0800e908 	.word	0x0800e908
 800c554:	0800e904 	.word	0x0800e904
 800c558:	0800e90c 	.word	0x0800e90c
 800c55c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c55e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c562:	4553      	cmp	r3, sl
 800c564:	bfa8      	it	ge
 800c566:	4653      	movge	r3, sl
 800c568:	2b00      	cmp	r3, #0
 800c56a:	4699      	mov	r9, r3
 800c56c:	dc37      	bgt.n	800c5de <_printf_float+0x33e>
 800c56e:	2300      	movs	r3, #0
 800c570:	9307      	str	r3, [sp, #28]
 800c572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c576:	f104 021a 	add.w	r2, r4, #26
 800c57a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c57c:	9907      	ldr	r1, [sp, #28]
 800c57e:	9306      	str	r3, [sp, #24]
 800c580:	eba3 0309 	sub.w	r3, r3, r9
 800c584:	428b      	cmp	r3, r1
 800c586:	dc31      	bgt.n	800c5ec <_printf_float+0x34c>
 800c588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c58a:	459a      	cmp	sl, r3
 800c58c:	dc3b      	bgt.n	800c606 <_printf_float+0x366>
 800c58e:	6823      	ldr	r3, [r4, #0]
 800c590:	07da      	lsls	r2, r3, #31
 800c592:	d438      	bmi.n	800c606 <_printf_float+0x366>
 800c594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c596:	ebaa 0903 	sub.w	r9, sl, r3
 800c59a:	9b06      	ldr	r3, [sp, #24]
 800c59c:	ebaa 0303 	sub.w	r3, sl, r3
 800c5a0:	4599      	cmp	r9, r3
 800c5a2:	bfa8      	it	ge
 800c5a4:	4699      	movge	r9, r3
 800c5a6:	f1b9 0f00 	cmp.w	r9, #0
 800c5aa:	dc34      	bgt.n	800c616 <_printf_float+0x376>
 800c5ac:	f04f 0800 	mov.w	r8, #0
 800c5b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5b4:	f104 0b1a 	add.w	fp, r4, #26
 800c5b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ba:	ebaa 0303 	sub.w	r3, sl, r3
 800c5be:	eba3 0309 	sub.w	r3, r3, r9
 800c5c2:	4543      	cmp	r3, r8
 800c5c4:	f77f af76 	ble.w	800c4b4 <_printf_float+0x214>
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	465a      	mov	r2, fp
 800c5cc:	4631      	mov	r1, r6
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	47b8      	blx	r7
 800c5d2:	3001      	adds	r0, #1
 800c5d4:	f43f aeb0 	beq.w	800c338 <_printf_float+0x98>
 800c5d8:	f108 0801 	add.w	r8, r8, #1
 800c5dc:	e7ec      	b.n	800c5b8 <_printf_float+0x318>
 800c5de:	4642      	mov	r2, r8
 800c5e0:	4631      	mov	r1, r6
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	47b8      	blx	r7
 800c5e6:	3001      	adds	r0, #1
 800c5e8:	d1c1      	bne.n	800c56e <_printf_float+0x2ce>
 800c5ea:	e6a5      	b.n	800c338 <_printf_float+0x98>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	4631      	mov	r1, r6
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	9206      	str	r2, [sp, #24]
 800c5f4:	47b8      	blx	r7
 800c5f6:	3001      	adds	r0, #1
 800c5f8:	f43f ae9e 	beq.w	800c338 <_printf_float+0x98>
 800c5fc:	9b07      	ldr	r3, [sp, #28]
 800c5fe:	9a06      	ldr	r2, [sp, #24]
 800c600:	3301      	adds	r3, #1
 800c602:	9307      	str	r3, [sp, #28]
 800c604:	e7b9      	b.n	800c57a <_printf_float+0x2da>
 800c606:	9b05      	ldr	r3, [sp, #20]
 800c608:	465a      	mov	r2, fp
 800c60a:	4631      	mov	r1, r6
 800c60c:	4628      	mov	r0, r5
 800c60e:	47b8      	blx	r7
 800c610:	3001      	adds	r0, #1
 800c612:	d1bf      	bne.n	800c594 <_printf_float+0x2f4>
 800c614:	e690      	b.n	800c338 <_printf_float+0x98>
 800c616:	9a06      	ldr	r2, [sp, #24]
 800c618:	464b      	mov	r3, r9
 800c61a:	4442      	add	r2, r8
 800c61c:	4631      	mov	r1, r6
 800c61e:	4628      	mov	r0, r5
 800c620:	47b8      	blx	r7
 800c622:	3001      	adds	r0, #1
 800c624:	d1c2      	bne.n	800c5ac <_printf_float+0x30c>
 800c626:	e687      	b.n	800c338 <_printf_float+0x98>
 800c628:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c62c:	f1b9 0f01 	cmp.w	r9, #1
 800c630:	dc01      	bgt.n	800c636 <_printf_float+0x396>
 800c632:	07db      	lsls	r3, r3, #31
 800c634:	d536      	bpl.n	800c6a4 <_printf_float+0x404>
 800c636:	2301      	movs	r3, #1
 800c638:	4642      	mov	r2, r8
 800c63a:	4631      	mov	r1, r6
 800c63c:	4628      	mov	r0, r5
 800c63e:	47b8      	blx	r7
 800c640:	3001      	adds	r0, #1
 800c642:	f43f ae79 	beq.w	800c338 <_printf_float+0x98>
 800c646:	9b05      	ldr	r3, [sp, #20]
 800c648:	465a      	mov	r2, fp
 800c64a:	4631      	mov	r1, r6
 800c64c:	4628      	mov	r0, r5
 800c64e:	47b8      	blx	r7
 800c650:	3001      	adds	r0, #1
 800c652:	f43f ae71 	beq.w	800c338 <_printf_float+0x98>
 800c656:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c65a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c662:	f109 39ff 	add.w	r9, r9, #4294967295
 800c666:	d018      	beq.n	800c69a <_printf_float+0x3fa>
 800c668:	464b      	mov	r3, r9
 800c66a:	f108 0201 	add.w	r2, r8, #1
 800c66e:	4631      	mov	r1, r6
 800c670:	4628      	mov	r0, r5
 800c672:	47b8      	blx	r7
 800c674:	3001      	adds	r0, #1
 800c676:	d10c      	bne.n	800c692 <_printf_float+0x3f2>
 800c678:	e65e      	b.n	800c338 <_printf_float+0x98>
 800c67a:	2301      	movs	r3, #1
 800c67c:	465a      	mov	r2, fp
 800c67e:	4631      	mov	r1, r6
 800c680:	4628      	mov	r0, r5
 800c682:	47b8      	blx	r7
 800c684:	3001      	adds	r0, #1
 800c686:	f43f ae57 	beq.w	800c338 <_printf_float+0x98>
 800c68a:	f108 0801 	add.w	r8, r8, #1
 800c68e:	45c8      	cmp	r8, r9
 800c690:	dbf3      	blt.n	800c67a <_printf_float+0x3da>
 800c692:	4653      	mov	r3, sl
 800c694:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c698:	e6dc      	b.n	800c454 <_printf_float+0x1b4>
 800c69a:	f04f 0800 	mov.w	r8, #0
 800c69e:	f104 0b1a 	add.w	fp, r4, #26
 800c6a2:	e7f4      	b.n	800c68e <_printf_float+0x3ee>
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	4642      	mov	r2, r8
 800c6a8:	e7e1      	b.n	800c66e <_printf_float+0x3ce>
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	464a      	mov	r2, r9
 800c6ae:	4631      	mov	r1, r6
 800c6b0:	4628      	mov	r0, r5
 800c6b2:	47b8      	blx	r7
 800c6b4:	3001      	adds	r0, #1
 800c6b6:	f43f ae3f 	beq.w	800c338 <_printf_float+0x98>
 800c6ba:	f108 0801 	add.w	r8, r8, #1
 800c6be:	68e3      	ldr	r3, [r4, #12]
 800c6c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c6c2:	1a5b      	subs	r3, r3, r1
 800c6c4:	4543      	cmp	r3, r8
 800c6c6:	dcf0      	bgt.n	800c6aa <_printf_float+0x40a>
 800c6c8:	e6f8      	b.n	800c4bc <_printf_float+0x21c>
 800c6ca:	f04f 0800 	mov.w	r8, #0
 800c6ce:	f104 0919 	add.w	r9, r4, #25
 800c6d2:	e7f4      	b.n	800c6be <_printf_float+0x41e>

0800c6d4 <_printf_common>:
 800c6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6d8:	4616      	mov	r6, r2
 800c6da:	4698      	mov	r8, r3
 800c6dc:	688a      	ldr	r2, [r1, #8]
 800c6de:	690b      	ldr	r3, [r1, #16]
 800c6e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	bfb8      	it	lt
 800c6e8:	4613      	movlt	r3, r2
 800c6ea:	6033      	str	r3, [r6, #0]
 800c6ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c6f0:	4607      	mov	r7, r0
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	b10a      	cbz	r2, 800c6fa <_printf_common+0x26>
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	6033      	str	r3, [r6, #0]
 800c6fa:	6823      	ldr	r3, [r4, #0]
 800c6fc:	0699      	lsls	r1, r3, #26
 800c6fe:	bf42      	ittt	mi
 800c700:	6833      	ldrmi	r3, [r6, #0]
 800c702:	3302      	addmi	r3, #2
 800c704:	6033      	strmi	r3, [r6, #0]
 800c706:	6825      	ldr	r5, [r4, #0]
 800c708:	f015 0506 	ands.w	r5, r5, #6
 800c70c:	d106      	bne.n	800c71c <_printf_common+0x48>
 800c70e:	f104 0a19 	add.w	sl, r4, #25
 800c712:	68e3      	ldr	r3, [r4, #12]
 800c714:	6832      	ldr	r2, [r6, #0]
 800c716:	1a9b      	subs	r3, r3, r2
 800c718:	42ab      	cmp	r3, r5
 800c71a:	dc26      	bgt.n	800c76a <_printf_common+0x96>
 800c71c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c720:	6822      	ldr	r2, [r4, #0]
 800c722:	3b00      	subs	r3, #0
 800c724:	bf18      	it	ne
 800c726:	2301      	movne	r3, #1
 800c728:	0692      	lsls	r2, r2, #26
 800c72a:	d42b      	bmi.n	800c784 <_printf_common+0xb0>
 800c72c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c730:	4641      	mov	r1, r8
 800c732:	4638      	mov	r0, r7
 800c734:	47c8      	blx	r9
 800c736:	3001      	adds	r0, #1
 800c738:	d01e      	beq.n	800c778 <_printf_common+0xa4>
 800c73a:	6823      	ldr	r3, [r4, #0]
 800c73c:	6922      	ldr	r2, [r4, #16]
 800c73e:	f003 0306 	and.w	r3, r3, #6
 800c742:	2b04      	cmp	r3, #4
 800c744:	bf02      	ittt	eq
 800c746:	68e5      	ldreq	r5, [r4, #12]
 800c748:	6833      	ldreq	r3, [r6, #0]
 800c74a:	1aed      	subeq	r5, r5, r3
 800c74c:	68a3      	ldr	r3, [r4, #8]
 800c74e:	bf0c      	ite	eq
 800c750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c754:	2500      	movne	r5, #0
 800c756:	4293      	cmp	r3, r2
 800c758:	bfc4      	itt	gt
 800c75a:	1a9b      	subgt	r3, r3, r2
 800c75c:	18ed      	addgt	r5, r5, r3
 800c75e:	2600      	movs	r6, #0
 800c760:	341a      	adds	r4, #26
 800c762:	42b5      	cmp	r5, r6
 800c764:	d11a      	bne.n	800c79c <_printf_common+0xc8>
 800c766:	2000      	movs	r0, #0
 800c768:	e008      	b.n	800c77c <_printf_common+0xa8>
 800c76a:	2301      	movs	r3, #1
 800c76c:	4652      	mov	r2, sl
 800c76e:	4641      	mov	r1, r8
 800c770:	4638      	mov	r0, r7
 800c772:	47c8      	blx	r9
 800c774:	3001      	adds	r0, #1
 800c776:	d103      	bne.n	800c780 <_printf_common+0xac>
 800c778:	f04f 30ff 	mov.w	r0, #4294967295
 800c77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c780:	3501      	adds	r5, #1
 800c782:	e7c6      	b.n	800c712 <_printf_common+0x3e>
 800c784:	18e1      	adds	r1, r4, r3
 800c786:	1c5a      	adds	r2, r3, #1
 800c788:	2030      	movs	r0, #48	@ 0x30
 800c78a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c78e:	4422      	add	r2, r4
 800c790:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c794:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c798:	3302      	adds	r3, #2
 800c79a:	e7c7      	b.n	800c72c <_printf_common+0x58>
 800c79c:	2301      	movs	r3, #1
 800c79e:	4622      	mov	r2, r4
 800c7a0:	4641      	mov	r1, r8
 800c7a2:	4638      	mov	r0, r7
 800c7a4:	47c8      	blx	r9
 800c7a6:	3001      	adds	r0, #1
 800c7a8:	d0e6      	beq.n	800c778 <_printf_common+0xa4>
 800c7aa:	3601      	adds	r6, #1
 800c7ac:	e7d9      	b.n	800c762 <_printf_common+0x8e>
	...

0800c7b0 <_printf_i>:
 800c7b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7b4:	7e0f      	ldrb	r7, [r1, #24]
 800c7b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c7b8:	2f78      	cmp	r7, #120	@ 0x78
 800c7ba:	4691      	mov	r9, r2
 800c7bc:	4680      	mov	r8, r0
 800c7be:	460c      	mov	r4, r1
 800c7c0:	469a      	mov	sl, r3
 800c7c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c7c6:	d807      	bhi.n	800c7d8 <_printf_i+0x28>
 800c7c8:	2f62      	cmp	r7, #98	@ 0x62
 800c7ca:	d80a      	bhi.n	800c7e2 <_printf_i+0x32>
 800c7cc:	2f00      	cmp	r7, #0
 800c7ce:	f000 80d1 	beq.w	800c974 <_printf_i+0x1c4>
 800c7d2:	2f58      	cmp	r7, #88	@ 0x58
 800c7d4:	f000 80b8 	beq.w	800c948 <_printf_i+0x198>
 800c7d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c7dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c7e0:	e03a      	b.n	800c858 <_printf_i+0xa8>
 800c7e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c7e6:	2b15      	cmp	r3, #21
 800c7e8:	d8f6      	bhi.n	800c7d8 <_printf_i+0x28>
 800c7ea:	a101      	add	r1, pc, #4	@ (adr r1, 800c7f0 <_printf_i+0x40>)
 800c7ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c7f0:	0800c849 	.word	0x0800c849
 800c7f4:	0800c85d 	.word	0x0800c85d
 800c7f8:	0800c7d9 	.word	0x0800c7d9
 800c7fc:	0800c7d9 	.word	0x0800c7d9
 800c800:	0800c7d9 	.word	0x0800c7d9
 800c804:	0800c7d9 	.word	0x0800c7d9
 800c808:	0800c85d 	.word	0x0800c85d
 800c80c:	0800c7d9 	.word	0x0800c7d9
 800c810:	0800c7d9 	.word	0x0800c7d9
 800c814:	0800c7d9 	.word	0x0800c7d9
 800c818:	0800c7d9 	.word	0x0800c7d9
 800c81c:	0800c95b 	.word	0x0800c95b
 800c820:	0800c887 	.word	0x0800c887
 800c824:	0800c915 	.word	0x0800c915
 800c828:	0800c7d9 	.word	0x0800c7d9
 800c82c:	0800c7d9 	.word	0x0800c7d9
 800c830:	0800c97d 	.word	0x0800c97d
 800c834:	0800c7d9 	.word	0x0800c7d9
 800c838:	0800c887 	.word	0x0800c887
 800c83c:	0800c7d9 	.word	0x0800c7d9
 800c840:	0800c7d9 	.word	0x0800c7d9
 800c844:	0800c91d 	.word	0x0800c91d
 800c848:	6833      	ldr	r3, [r6, #0]
 800c84a:	1d1a      	adds	r2, r3, #4
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	6032      	str	r2, [r6, #0]
 800c850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c854:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c858:	2301      	movs	r3, #1
 800c85a:	e09c      	b.n	800c996 <_printf_i+0x1e6>
 800c85c:	6833      	ldr	r3, [r6, #0]
 800c85e:	6820      	ldr	r0, [r4, #0]
 800c860:	1d19      	adds	r1, r3, #4
 800c862:	6031      	str	r1, [r6, #0]
 800c864:	0606      	lsls	r6, r0, #24
 800c866:	d501      	bpl.n	800c86c <_printf_i+0xbc>
 800c868:	681d      	ldr	r5, [r3, #0]
 800c86a:	e003      	b.n	800c874 <_printf_i+0xc4>
 800c86c:	0645      	lsls	r5, r0, #25
 800c86e:	d5fb      	bpl.n	800c868 <_printf_i+0xb8>
 800c870:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c874:	2d00      	cmp	r5, #0
 800c876:	da03      	bge.n	800c880 <_printf_i+0xd0>
 800c878:	232d      	movs	r3, #45	@ 0x2d
 800c87a:	426d      	negs	r5, r5
 800c87c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c880:	4858      	ldr	r0, [pc, #352]	@ (800c9e4 <_printf_i+0x234>)
 800c882:	230a      	movs	r3, #10
 800c884:	e011      	b.n	800c8aa <_printf_i+0xfa>
 800c886:	6821      	ldr	r1, [r4, #0]
 800c888:	6833      	ldr	r3, [r6, #0]
 800c88a:	0608      	lsls	r0, r1, #24
 800c88c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c890:	d402      	bmi.n	800c898 <_printf_i+0xe8>
 800c892:	0649      	lsls	r1, r1, #25
 800c894:	bf48      	it	mi
 800c896:	b2ad      	uxthmi	r5, r5
 800c898:	2f6f      	cmp	r7, #111	@ 0x6f
 800c89a:	4852      	ldr	r0, [pc, #328]	@ (800c9e4 <_printf_i+0x234>)
 800c89c:	6033      	str	r3, [r6, #0]
 800c89e:	bf14      	ite	ne
 800c8a0:	230a      	movne	r3, #10
 800c8a2:	2308      	moveq	r3, #8
 800c8a4:	2100      	movs	r1, #0
 800c8a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c8aa:	6866      	ldr	r6, [r4, #4]
 800c8ac:	60a6      	str	r6, [r4, #8]
 800c8ae:	2e00      	cmp	r6, #0
 800c8b0:	db05      	blt.n	800c8be <_printf_i+0x10e>
 800c8b2:	6821      	ldr	r1, [r4, #0]
 800c8b4:	432e      	orrs	r6, r5
 800c8b6:	f021 0104 	bic.w	r1, r1, #4
 800c8ba:	6021      	str	r1, [r4, #0]
 800c8bc:	d04b      	beq.n	800c956 <_printf_i+0x1a6>
 800c8be:	4616      	mov	r6, r2
 800c8c0:	fbb5 f1f3 	udiv	r1, r5, r3
 800c8c4:	fb03 5711 	mls	r7, r3, r1, r5
 800c8c8:	5dc7      	ldrb	r7, [r0, r7]
 800c8ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c8ce:	462f      	mov	r7, r5
 800c8d0:	42bb      	cmp	r3, r7
 800c8d2:	460d      	mov	r5, r1
 800c8d4:	d9f4      	bls.n	800c8c0 <_printf_i+0x110>
 800c8d6:	2b08      	cmp	r3, #8
 800c8d8:	d10b      	bne.n	800c8f2 <_printf_i+0x142>
 800c8da:	6823      	ldr	r3, [r4, #0]
 800c8dc:	07df      	lsls	r7, r3, #31
 800c8de:	d508      	bpl.n	800c8f2 <_printf_i+0x142>
 800c8e0:	6923      	ldr	r3, [r4, #16]
 800c8e2:	6861      	ldr	r1, [r4, #4]
 800c8e4:	4299      	cmp	r1, r3
 800c8e6:	bfde      	ittt	le
 800c8e8:	2330      	movle	r3, #48	@ 0x30
 800c8ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c8ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c8f2:	1b92      	subs	r2, r2, r6
 800c8f4:	6122      	str	r2, [r4, #16]
 800c8f6:	f8cd a000 	str.w	sl, [sp]
 800c8fa:	464b      	mov	r3, r9
 800c8fc:	aa03      	add	r2, sp, #12
 800c8fe:	4621      	mov	r1, r4
 800c900:	4640      	mov	r0, r8
 800c902:	f7ff fee7 	bl	800c6d4 <_printf_common>
 800c906:	3001      	adds	r0, #1
 800c908:	d14a      	bne.n	800c9a0 <_printf_i+0x1f0>
 800c90a:	f04f 30ff 	mov.w	r0, #4294967295
 800c90e:	b004      	add	sp, #16
 800c910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c914:	6823      	ldr	r3, [r4, #0]
 800c916:	f043 0320 	orr.w	r3, r3, #32
 800c91a:	6023      	str	r3, [r4, #0]
 800c91c:	4832      	ldr	r0, [pc, #200]	@ (800c9e8 <_printf_i+0x238>)
 800c91e:	2778      	movs	r7, #120	@ 0x78
 800c920:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c924:	6823      	ldr	r3, [r4, #0]
 800c926:	6831      	ldr	r1, [r6, #0]
 800c928:	061f      	lsls	r7, r3, #24
 800c92a:	f851 5b04 	ldr.w	r5, [r1], #4
 800c92e:	d402      	bmi.n	800c936 <_printf_i+0x186>
 800c930:	065f      	lsls	r7, r3, #25
 800c932:	bf48      	it	mi
 800c934:	b2ad      	uxthmi	r5, r5
 800c936:	6031      	str	r1, [r6, #0]
 800c938:	07d9      	lsls	r1, r3, #31
 800c93a:	bf44      	itt	mi
 800c93c:	f043 0320 	orrmi.w	r3, r3, #32
 800c940:	6023      	strmi	r3, [r4, #0]
 800c942:	b11d      	cbz	r5, 800c94c <_printf_i+0x19c>
 800c944:	2310      	movs	r3, #16
 800c946:	e7ad      	b.n	800c8a4 <_printf_i+0xf4>
 800c948:	4826      	ldr	r0, [pc, #152]	@ (800c9e4 <_printf_i+0x234>)
 800c94a:	e7e9      	b.n	800c920 <_printf_i+0x170>
 800c94c:	6823      	ldr	r3, [r4, #0]
 800c94e:	f023 0320 	bic.w	r3, r3, #32
 800c952:	6023      	str	r3, [r4, #0]
 800c954:	e7f6      	b.n	800c944 <_printf_i+0x194>
 800c956:	4616      	mov	r6, r2
 800c958:	e7bd      	b.n	800c8d6 <_printf_i+0x126>
 800c95a:	6833      	ldr	r3, [r6, #0]
 800c95c:	6825      	ldr	r5, [r4, #0]
 800c95e:	6961      	ldr	r1, [r4, #20]
 800c960:	1d18      	adds	r0, r3, #4
 800c962:	6030      	str	r0, [r6, #0]
 800c964:	062e      	lsls	r6, r5, #24
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	d501      	bpl.n	800c96e <_printf_i+0x1be>
 800c96a:	6019      	str	r1, [r3, #0]
 800c96c:	e002      	b.n	800c974 <_printf_i+0x1c4>
 800c96e:	0668      	lsls	r0, r5, #25
 800c970:	d5fb      	bpl.n	800c96a <_printf_i+0x1ba>
 800c972:	8019      	strh	r1, [r3, #0]
 800c974:	2300      	movs	r3, #0
 800c976:	6123      	str	r3, [r4, #16]
 800c978:	4616      	mov	r6, r2
 800c97a:	e7bc      	b.n	800c8f6 <_printf_i+0x146>
 800c97c:	6833      	ldr	r3, [r6, #0]
 800c97e:	1d1a      	adds	r2, r3, #4
 800c980:	6032      	str	r2, [r6, #0]
 800c982:	681e      	ldr	r6, [r3, #0]
 800c984:	6862      	ldr	r2, [r4, #4]
 800c986:	2100      	movs	r1, #0
 800c988:	4630      	mov	r0, r6
 800c98a:	f7f3 fcb1 	bl	80002f0 <memchr>
 800c98e:	b108      	cbz	r0, 800c994 <_printf_i+0x1e4>
 800c990:	1b80      	subs	r0, r0, r6
 800c992:	6060      	str	r0, [r4, #4]
 800c994:	6863      	ldr	r3, [r4, #4]
 800c996:	6123      	str	r3, [r4, #16]
 800c998:	2300      	movs	r3, #0
 800c99a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c99e:	e7aa      	b.n	800c8f6 <_printf_i+0x146>
 800c9a0:	6923      	ldr	r3, [r4, #16]
 800c9a2:	4632      	mov	r2, r6
 800c9a4:	4649      	mov	r1, r9
 800c9a6:	4640      	mov	r0, r8
 800c9a8:	47d0      	blx	sl
 800c9aa:	3001      	adds	r0, #1
 800c9ac:	d0ad      	beq.n	800c90a <_printf_i+0x15a>
 800c9ae:	6823      	ldr	r3, [r4, #0]
 800c9b0:	079b      	lsls	r3, r3, #30
 800c9b2:	d413      	bmi.n	800c9dc <_printf_i+0x22c>
 800c9b4:	68e0      	ldr	r0, [r4, #12]
 800c9b6:	9b03      	ldr	r3, [sp, #12]
 800c9b8:	4298      	cmp	r0, r3
 800c9ba:	bfb8      	it	lt
 800c9bc:	4618      	movlt	r0, r3
 800c9be:	e7a6      	b.n	800c90e <_printf_i+0x15e>
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	4632      	mov	r2, r6
 800c9c4:	4649      	mov	r1, r9
 800c9c6:	4640      	mov	r0, r8
 800c9c8:	47d0      	blx	sl
 800c9ca:	3001      	adds	r0, #1
 800c9cc:	d09d      	beq.n	800c90a <_printf_i+0x15a>
 800c9ce:	3501      	adds	r5, #1
 800c9d0:	68e3      	ldr	r3, [r4, #12]
 800c9d2:	9903      	ldr	r1, [sp, #12]
 800c9d4:	1a5b      	subs	r3, r3, r1
 800c9d6:	42ab      	cmp	r3, r5
 800c9d8:	dcf2      	bgt.n	800c9c0 <_printf_i+0x210>
 800c9da:	e7eb      	b.n	800c9b4 <_printf_i+0x204>
 800c9dc:	2500      	movs	r5, #0
 800c9de:	f104 0619 	add.w	r6, r4, #25
 800c9e2:	e7f5      	b.n	800c9d0 <_printf_i+0x220>
 800c9e4:	0800e90e 	.word	0x0800e90e
 800c9e8:	0800e91f 	.word	0x0800e91f

0800c9ec <std>:
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	b510      	push	{r4, lr}
 800c9f0:	4604      	mov	r4, r0
 800c9f2:	e9c0 3300 	strd	r3, r3, [r0]
 800c9f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9fa:	6083      	str	r3, [r0, #8]
 800c9fc:	8181      	strh	r1, [r0, #12]
 800c9fe:	6643      	str	r3, [r0, #100]	@ 0x64
 800ca00:	81c2      	strh	r2, [r0, #14]
 800ca02:	6183      	str	r3, [r0, #24]
 800ca04:	4619      	mov	r1, r3
 800ca06:	2208      	movs	r2, #8
 800ca08:	305c      	adds	r0, #92	@ 0x5c
 800ca0a:	f000 f906 	bl	800cc1a <memset>
 800ca0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ca44 <std+0x58>)
 800ca10:	6263      	str	r3, [r4, #36]	@ 0x24
 800ca12:	4b0d      	ldr	r3, [pc, #52]	@ (800ca48 <std+0x5c>)
 800ca14:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ca16:	4b0d      	ldr	r3, [pc, #52]	@ (800ca4c <std+0x60>)
 800ca18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ca1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ca50 <std+0x64>)
 800ca1c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ca1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ca54 <std+0x68>)
 800ca20:	6224      	str	r4, [r4, #32]
 800ca22:	429c      	cmp	r4, r3
 800ca24:	d006      	beq.n	800ca34 <std+0x48>
 800ca26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ca2a:	4294      	cmp	r4, r2
 800ca2c:	d002      	beq.n	800ca34 <std+0x48>
 800ca2e:	33d0      	adds	r3, #208	@ 0xd0
 800ca30:	429c      	cmp	r4, r3
 800ca32:	d105      	bne.n	800ca40 <std+0x54>
 800ca34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ca38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca3c:	f000 b97a 	b.w	800cd34 <__retarget_lock_init_recursive>
 800ca40:	bd10      	pop	{r4, pc}
 800ca42:	bf00      	nop
 800ca44:	0800cb95 	.word	0x0800cb95
 800ca48:	0800cbb7 	.word	0x0800cbb7
 800ca4c:	0800cbef 	.word	0x0800cbef
 800ca50:	0800cc13 	.word	0x0800cc13
 800ca54:	24000cc8 	.word	0x24000cc8

0800ca58 <stdio_exit_handler>:
 800ca58:	4a02      	ldr	r2, [pc, #8]	@ (800ca64 <stdio_exit_handler+0xc>)
 800ca5a:	4903      	ldr	r1, [pc, #12]	@ (800ca68 <stdio_exit_handler+0x10>)
 800ca5c:	4803      	ldr	r0, [pc, #12]	@ (800ca6c <stdio_exit_handler+0x14>)
 800ca5e:	f000 b869 	b.w	800cb34 <_fwalk_sglue>
 800ca62:	bf00      	nop
 800ca64:	24000010 	.word	0x24000010
 800ca68:	0800e439 	.word	0x0800e439
 800ca6c:	24000020 	.word	0x24000020

0800ca70 <cleanup_stdio>:
 800ca70:	6841      	ldr	r1, [r0, #4]
 800ca72:	4b0c      	ldr	r3, [pc, #48]	@ (800caa4 <cleanup_stdio+0x34>)
 800ca74:	4299      	cmp	r1, r3
 800ca76:	b510      	push	{r4, lr}
 800ca78:	4604      	mov	r4, r0
 800ca7a:	d001      	beq.n	800ca80 <cleanup_stdio+0x10>
 800ca7c:	f001 fcdc 	bl	800e438 <_fflush_r>
 800ca80:	68a1      	ldr	r1, [r4, #8]
 800ca82:	4b09      	ldr	r3, [pc, #36]	@ (800caa8 <cleanup_stdio+0x38>)
 800ca84:	4299      	cmp	r1, r3
 800ca86:	d002      	beq.n	800ca8e <cleanup_stdio+0x1e>
 800ca88:	4620      	mov	r0, r4
 800ca8a:	f001 fcd5 	bl	800e438 <_fflush_r>
 800ca8e:	68e1      	ldr	r1, [r4, #12]
 800ca90:	4b06      	ldr	r3, [pc, #24]	@ (800caac <cleanup_stdio+0x3c>)
 800ca92:	4299      	cmp	r1, r3
 800ca94:	d004      	beq.n	800caa0 <cleanup_stdio+0x30>
 800ca96:	4620      	mov	r0, r4
 800ca98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca9c:	f001 bccc 	b.w	800e438 <_fflush_r>
 800caa0:	bd10      	pop	{r4, pc}
 800caa2:	bf00      	nop
 800caa4:	24000cc8 	.word	0x24000cc8
 800caa8:	24000d30 	.word	0x24000d30
 800caac:	24000d98 	.word	0x24000d98

0800cab0 <global_stdio_init.part.0>:
 800cab0:	b510      	push	{r4, lr}
 800cab2:	4b0b      	ldr	r3, [pc, #44]	@ (800cae0 <global_stdio_init.part.0+0x30>)
 800cab4:	4c0b      	ldr	r4, [pc, #44]	@ (800cae4 <global_stdio_init.part.0+0x34>)
 800cab6:	4a0c      	ldr	r2, [pc, #48]	@ (800cae8 <global_stdio_init.part.0+0x38>)
 800cab8:	601a      	str	r2, [r3, #0]
 800caba:	4620      	mov	r0, r4
 800cabc:	2200      	movs	r2, #0
 800cabe:	2104      	movs	r1, #4
 800cac0:	f7ff ff94 	bl	800c9ec <std>
 800cac4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cac8:	2201      	movs	r2, #1
 800caca:	2109      	movs	r1, #9
 800cacc:	f7ff ff8e 	bl	800c9ec <std>
 800cad0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cad4:	2202      	movs	r2, #2
 800cad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cada:	2112      	movs	r1, #18
 800cadc:	f7ff bf86 	b.w	800c9ec <std>
 800cae0:	24000e00 	.word	0x24000e00
 800cae4:	24000cc8 	.word	0x24000cc8
 800cae8:	0800ca59 	.word	0x0800ca59

0800caec <__sfp_lock_acquire>:
 800caec:	4801      	ldr	r0, [pc, #4]	@ (800caf4 <__sfp_lock_acquire+0x8>)
 800caee:	f000 b922 	b.w	800cd36 <__retarget_lock_acquire_recursive>
 800caf2:	bf00      	nop
 800caf4:	24000e09 	.word	0x24000e09

0800caf8 <__sfp_lock_release>:
 800caf8:	4801      	ldr	r0, [pc, #4]	@ (800cb00 <__sfp_lock_release+0x8>)
 800cafa:	f000 b91d 	b.w	800cd38 <__retarget_lock_release_recursive>
 800cafe:	bf00      	nop
 800cb00:	24000e09 	.word	0x24000e09

0800cb04 <__sinit>:
 800cb04:	b510      	push	{r4, lr}
 800cb06:	4604      	mov	r4, r0
 800cb08:	f7ff fff0 	bl	800caec <__sfp_lock_acquire>
 800cb0c:	6a23      	ldr	r3, [r4, #32]
 800cb0e:	b11b      	cbz	r3, 800cb18 <__sinit+0x14>
 800cb10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb14:	f7ff bff0 	b.w	800caf8 <__sfp_lock_release>
 800cb18:	4b04      	ldr	r3, [pc, #16]	@ (800cb2c <__sinit+0x28>)
 800cb1a:	6223      	str	r3, [r4, #32]
 800cb1c:	4b04      	ldr	r3, [pc, #16]	@ (800cb30 <__sinit+0x2c>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1f5      	bne.n	800cb10 <__sinit+0xc>
 800cb24:	f7ff ffc4 	bl	800cab0 <global_stdio_init.part.0>
 800cb28:	e7f2      	b.n	800cb10 <__sinit+0xc>
 800cb2a:	bf00      	nop
 800cb2c:	0800ca71 	.word	0x0800ca71
 800cb30:	24000e00 	.word	0x24000e00

0800cb34 <_fwalk_sglue>:
 800cb34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb38:	4607      	mov	r7, r0
 800cb3a:	4688      	mov	r8, r1
 800cb3c:	4614      	mov	r4, r2
 800cb3e:	2600      	movs	r6, #0
 800cb40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb44:	f1b9 0901 	subs.w	r9, r9, #1
 800cb48:	d505      	bpl.n	800cb56 <_fwalk_sglue+0x22>
 800cb4a:	6824      	ldr	r4, [r4, #0]
 800cb4c:	2c00      	cmp	r4, #0
 800cb4e:	d1f7      	bne.n	800cb40 <_fwalk_sglue+0xc>
 800cb50:	4630      	mov	r0, r6
 800cb52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb56:	89ab      	ldrh	r3, [r5, #12]
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d907      	bls.n	800cb6c <_fwalk_sglue+0x38>
 800cb5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb60:	3301      	adds	r3, #1
 800cb62:	d003      	beq.n	800cb6c <_fwalk_sglue+0x38>
 800cb64:	4629      	mov	r1, r5
 800cb66:	4638      	mov	r0, r7
 800cb68:	47c0      	blx	r8
 800cb6a:	4306      	orrs	r6, r0
 800cb6c:	3568      	adds	r5, #104	@ 0x68
 800cb6e:	e7e9      	b.n	800cb44 <_fwalk_sglue+0x10>

0800cb70 <iprintf>:
 800cb70:	b40f      	push	{r0, r1, r2, r3}
 800cb72:	b507      	push	{r0, r1, r2, lr}
 800cb74:	4906      	ldr	r1, [pc, #24]	@ (800cb90 <iprintf+0x20>)
 800cb76:	ab04      	add	r3, sp, #16
 800cb78:	6808      	ldr	r0, [r1, #0]
 800cb7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb7e:	6881      	ldr	r1, [r0, #8]
 800cb80:	9301      	str	r3, [sp, #4]
 800cb82:	f001 fabd 	bl	800e100 <_vfiprintf_r>
 800cb86:	b003      	add	sp, #12
 800cb88:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb8c:	b004      	add	sp, #16
 800cb8e:	4770      	bx	lr
 800cb90:	2400001c 	.word	0x2400001c

0800cb94 <__sread>:
 800cb94:	b510      	push	{r4, lr}
 800cb96:	460c      	mov	r4, r1
 800cb98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb9c:	f000 f86c 	bl	800cc78 <_read_r>
 800cba0:	2800      	cmp	r0, #0
 800cba2:	bfab      	itete	ge
 800cba4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cba6:	89a3      	ldrhlt	r3, [r4, #12]
 800cba8:	181b      	addge	r3, r3, r0
 800cbaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cbae:	bfac      	ite	ge
 800cbb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cbb2:	81a3      	strhlt	r3, [r4, #12]
 800cbb4:	bd10      	pop	{r4, pc}

0800cbb6 <__swrite>:
 800cbb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbba:	461f      	mov	r7, r3
 800cbbc:	898b      	ldrh	r3, [r1, #12]
 800cbbe:	05db      	lsls	r3, r3, #23
 800cbc0:	4605      	mov	r5, r0
 800cbc2:	460c      	mov	r4, r1
 800cbc4:	4616      	mov	r6, r2
 800cbc6:	d505      	bpl.n	800cbd4 <__swrite+0x1e>
 800cbc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbcc:	2302      	movs	r3, #2
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f000 f840 	bl	800cc54 <_lseek_r>
 800cbd4:	89a3      	ldrh	r3, [r4, #12]
 800cbd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cbde:	81a3      	strh	r3, [r4, #12]
 800cbe0:	4632      	mov	r2, r6
 800cbe2:	463b      	mov	r3, r7
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbea:	f000 b867 	b.w	800ccbc <_write_r>

0800cbee <__sseek>:
 800cbee:	b510      	push	{r4, lr}
 800cbf0:	460c      	mov	r4, r1
 800cbf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf6:	f000 f82d 	bl	800cc54 <_lseek_r>
 800cbfa:	1c43      	adds	r3, r0, #1
 800cbfc:	89a3      	ldrh	r3, [r4, #12]
 800cbfe:	bf15      	itete	ne
 800cc00:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cc02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cc06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cc0a:	81a3      	strheq	r3, [r4, #12]
 800cc0c:	bf18      	it	ne
 800cc0e:	81a3      	strhne	r3, [r4, #12]
 800cc10:	bd10      	pop	{r4, pc}

0800cc12 <__sclose>:
 800cc12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc16:	f000 b80d 	b.w	800cc34 <_close_r>

0800cc1a <memset>:
 800cc1a:	4402      	add	r2, r0
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d100      	bne.n	800cc24 <memset+0xa>
 800cc22:	4770      	bx	lr
 800cc24:	f803 1b01 	strb.w	r1, [r3], #1
 800cc28:	e7f9      	b.n	800cc1e <memset+0x4>
	...

0800cc2c <_localeconv_r>:
 800cc2c:	4800      	ldr	r0, [pc, #0]	@ (800cc30 <_localeconv_r+0x4>)
 800cc2e:	4770      	bx	lr
 800cc30:	2400015c 	.word	0x2400015c

0800cc34 <_close_r>:
 800cc34:	b538      	push	{r3, r4, r5, lr}
 800cc36:	4d06      	ldr	r5, [pc, #24]	@ (800cc50 <_close_r+0x1c>)
 800cc38:	2300      	movs	r3, #0
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	4608      	mov	r0, r1
 800cc3e:	602b      	str	r3, [r5, #0]
 800cc40:	f7f4 fca6 	bl	8001590 <_close>
 800cc44:	1c43      	adds	r3, r0, #1
 800cc46:	d102      	bne.n	800cc4e <_close_r+0x1a>
 800cc48:	682b      	ldr	r3, [r5, #0]
 800cc4a:	b103      	cbz	r3, 800cc4e <_close_r+0x1a>
 800cc4c:	6023      	str	r3, [r4, #0]
 800cc4e:	bd38      	pop	{r3, r4, r5, pc}
 800cc50:	24000e04 	.word	0x24000e04

0800cc54 <_lseek_r>:
 800cc54:	b538      	push	{r3, r4, r5, lr}
 800cc56:	4d07      	ldr	r5, [pc, #28]	@ (800cc74 <_lseek_r+0x20>)
 800cc58:	4604      	mov	r4, r0
 800cc5a:	4608      	mov	r0, r1
 800cc5c:	4611      	mov	r1, r2
 800cc5e:	2200      	movs	r2, #0
 800cc60:	602a      	str	r2, [r5, #0]
 800cc62:	461a      	mov	r2, r3
 800cc64:	f7f4 fcbb 	bl	80015de <_lseek>
 800cc68:	1c43      	adds	r3, r0, #1
 800cc6a:	d102      	bne.n	800cc72 <_lseek_r+0x1e>
 800cc6c:	682b      	ldr	r3, [r5, #0]
 800cc6e:	b103      	cbz	r3, 800cc72 <_lseek_r+0x1e>
 800cc70:	6023      	str	r3, [r4, #0]
 800cc72:	bd38      	pop	{r3, r4, r5, pc}
 800cc74:	24000e04 	.word	0x24000e04

0800cc78 <_read_r>:
 800cc78:	b538      	push	{r3, r4, r5, lr}
 800cc7a:	4d07      	ldr	r5, [pc, #28]	@ (800cc98 <_read_r+0x20>)
 800cc7c:	4604      	mov	r4, r0
 800cc7e:	4608      	mov	r0, r1
 800cc80:	4611      	mov	r1, r2
 800cc82:	2200      	movs	r2, #0
 800cc84:	602a      	str	r2, [r5, #0]
 800cc86:	461a      	mov	r2, r3
 800cc88:	f7f4 fc49 	bl	800151e <_read>
 800cc8c:	1c43      	adds	r3, r0, #1
 800cc8e:	d102      	bne.n	800cc96 <_read_r+0x1e>
 800cc90:	682b      	ldr	r3, [r5, #0]
 800cc92:	b103      	cbz	r3, 800cc96 <_read_r+0x1e>
 800cc94:	6023      	str	r3, [r4, #0]
 800cc96:	bd38      	pop	{r3, r4, r5, pc}
 800cc98:	24000e04 	.word	0x24000e04

0800cc9c <_sbrk_r>:
 800cc9c:	b538      	push	{r3, r4, r5, lr}
 800cc9e:	4d06      	ldr	r5, [pc, #24]	@ (800ccb8 <_sbrk_r+0x1c>)
 800cca0:	2300      	movs	r3, #0
 800cca2:	4604      	mov	r4, r0
 800cca4:	4608      	mov	r0, r1
 800cca6:	602b      	str	r3, [r5, #0]
 800cca8:	f7f4 fca6 	bl	80015f8 <_sbrk>
 800ccac:	1c43      	adds	r3, r0, #1
 800ccae:	d102      	bne.n	800ccb6 <_sbrk_r+0x1a>
 800ccb0:	682b      	ldr	r3, [r5, #0]
 800ccb2:	b103      	cbz	r3, 800ccb6 <_sbrk_r+0x1a>
 800ccb4:	6023      	str	r3, [r4, #0]
 800ccb6:	bd38      	pop	{r3, r4, r5, pc}
 800ccb8:	24000e04 	.word	0x24000e04

0800ccbc <_write_r>:
 800ccbc:	b538      	push	{r3, r4, r5, lr}
 800ccbe:	4d07      	ldr	r5, [pc, #28]	@ (800ccdc <_write_r+0x20>)
 800ccc0:	4604      	mov	r4, r0
 800ccc2:	4608      	mov	r0, r1
 800ccc4:	4611      	mov	r1, r2
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	602a      	str	r2, [r5, #0]
 800ccca:	461a      	mov	r2, r3
 800cccc:	f7f4 fc44 	bl	8001558 <_write>
 800ccd0:	1c43      	adds	r3, r0, #1
 800ccd2:	d102      	bne.n	800ccda <_write_r+0x1e>
 800ccd4:	682b      	ldr	r3, [r5, #0]
 800ccd6:	b103      	cbz	r3, 800ccda <_write_r+0x1e>
 800ccd8:	6023      	str	r3, [r4, #0]
 800ccda:	bd38      	pop	{r3, r4, r5, pc}
 800ccdc:	24000e04 	.word	0x24000e04

0800cce0 <__errno>:
 800cce0:	4b01      	ldr	r3, [pc, #4]	@ (800cce8 <__errno+0x8>)
 800cce2:	6818      	ldr	r0, [r3, #0]
 800cce4:	4770      	bx	lr
 800cce6:	bf00      	nop
 800cce8:	2400001c 	.word	0x2400001c

0800ccec <__libc_init_array>:
 800ccec:	b570      	push	{r4, r5, r6, lr}
 800ccee:	4d0d      	ldr	r5, [pc, #52]	@ (800cd24 <__libc_init_array+0x38>)
 800ccf0:	4c0d      	ldr	r4, [pc, #52]	@ (800cd28 <__libc_init_array+0x3c>)
 800ccf2:	1b64      	subs	r4, r4, r5
 800ccf4:	10a4      	asrs	r4, r4, #2
 800ccf6:	2600      	movs	r6, #0
 800ccf8:	42a6      	cmp	r6, r4
 800ccfa:	d109      	bne.n	800cd10 <__libc_init_array+0x24>
 800ccfc:	4d0b      	ldr	r5, [pc, #44]	@ (800cd2c <__libc_init_array+0x40>)
 800ccfe:	4c0c      	ldr	r4, [pc, #48]	@ (800cd30 <__libc_init_array+0x44>)
 800cd00:	f001 fd8a 	bl	800e818 <_init>
 800cd04:	1b64      	subs	r4, r4, r5
 800cd06:	10a4      	asrs	r4, r4, #2
 800cd08:	2600      	movs	r6, #0
 800cd0a:	42a6      	cmp	r6, r4
 800cd0c:	d105      	bne.n	800cd1a <__libc_init_array+0x2e>
 800cd0e:	bd70      	pop	{r4, r5, r6, pc}
 800cd10:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd14:	4798      	blx	r3
 800cd16:	3601      	adds	r6, #1
 800cd18:	e7ee      	b.n	800ccf8 <__libc_init_array+0xc>
 800cd1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd1e:	4798      	blx	r3
 800cd20:	3601      	adds	r6, #1
 800cd22:	e7f2      	b.n	800cd0a <__libc_init_array+0x1e>
 800cd24:	0800ec7c 	.word	0x0800ec7c
 800cd28:	0800ec7c 	.word	0x0800ec7c
 800cd2c:	0800ec7c 	.word	0x0800ec7c
 800cd30:	0800ec80 	.word	0x0800ec80

0800cd34 <__retarget_lock_init_recursive>:
 800cd34:	4770      	bx	lr

0800cd36 <__retarget_lock_acquire_recursive>:
 800cd36:	4770      	bx	lr

0800cd38 <__retarget_lock_release_recursive>:
 800cd38:	4770      	bx	lr

0800cd3a <memcpy>:
 800cd3a:	440a      	add	r2, r1
 800cd3c:	4291      	cmp	r1, r2
 800cd3e:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd42:	d100      	bne.n	800cd46 <memcpy+0xc>
 800cd44:	4770      	bx	lr
 800cd46:	b510      	push	{r4, lr}
 800cd48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd50:	4291      	cmp	r1, r2
 800cd52:	d1f9      	bne.n	800cd48 <memcpy+0xe>
 800cd54:	bd10      	pop	{r4, pc}

0800cd56 <quorem>:
 800cd56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5a:	6903      	ldr	r3, [r0, #16]
 800cd5c:	690c      	ldr	r4, [r1, #16]
 800cd5e:	42a3      	cmp	r3, r4
 800cd60:	4607      	mov	r7, r0
 800cd62:	db7e      	blt.n	800ce62 <quorem+0x10c>
 800cd64:	3c01      	subs	r4, #1
 800cd66:	f101 0814 	add.w	r8, r1, #20
 800cd6a:	00a3      	lsls	r3, r4, #2
 800cd6c:	f100 0514 	add.w	r5, r0, #20
 800cd70:	9300      	str	r3, [sp, #0]
 800cd72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd76:	9301      	str	r3, [sp, #4]
 800cd78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cd7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd80:	3301      	adds	r3, #1
 800cd82:	429a      	cmp	r2, r3
 800cd84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cd88:	fbb2 f6f3 	udiv	r6, r2, r3
 800cd8c:	d32e      	bcc.n	800cdec <quorem+0x96>
 800cd8e:	f04f 0a00 	mov.w	sl, #0
 800cd92:	46c4      	mov	ip, r8
 800cd94:	46ae      	mov	lr, r5
 800cd96:	46d3      	mov	fp, sl
 800cd98:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cd9c:	b298      	uxth	r0, r3
 800cd9e:	fb06 a000 	mla	r0, r6, r0, sl
 800cda2:	0c02      	lsrs	r2, r0, #16
 800cda4:	0c1b      	lsrs	r3, r3, #16
 800cda6:	fb06 2303 	mla	r3, r6, r3, r2
 800cdaa:	f8de 2000 	ldr.w	r2, [lr]
 800cdae:	b280      	uxth	r0, r0
 800cdb0:	b292      	uxth	r2, r2
 800cdb2:	1a12      	subs	r2, r2, r0
 800cdb4:	445a      	add	r2, fp
 800cdb6:	f8de 0000 	ldr.w	r0, [lr]
 800cdba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cdbe:	b29b      	uxth	r3, r3
 800cdc0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cdc4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cdc8:	b292      	uxth	r2, r2
 800cdca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cdce:	45e1      	cmp	r9, ip
 800cdd0:	f84e 2b04 	str.w	r2, [lr], #4
 800cdd4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cdd8:	d2de      	bcs.n	800cd98 <quorem+0x42>
 800cdda:	9b00      	ldr	r3, [sp, #0]
 800cddc:	58eb      	ldr	r3, [r5, r3]
 800cdde:	b92b      	cbnz	r3, 800cdec <quorem+0x96>
 800cde0:	9b01      	ldr	r3, [sp, #4]
 800cde2:	3b04      	subs	r3, #4
 800cde4:	429d      	cmp	r5, r3
 800cde6:	461a      	mov	r2, r3
 800cde8:	d32f      	bcc.n	800ce4a <quorem+0xf4>
 800cdea:	613c      	str	r4, [r7, #16]
 800cdec:	4638      	mov	r0, r7
 800cdee:	f001 f855 	bl	800de9c <__mcmp>
 800cdf2:	2800      	cmp	r0, #0
 800cdf4:	db25      	blt.n	800ce42 <quorem+0xec>
 800cdf6:	4629      	mov	r1, r5
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	f858 2b04 	ldr.w	r2, [r8], #4
 800cdfe:	f8d1 c000 	ldr.w	ip, [r1]
 800ce02:	fa1f fe82 	uxth.w	lr, r2
 800ce06:	fa1f f38c 	uxth.w	r3, ip
 800ce0a:	eba3 030e 	sub.w	r3, r3, lr
 800ce0e:	4403      	add	r3, r0
 800ce10:	0c12      	lsrs	r2, r2, #16
 800ce12:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ce16:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce20:	45c1      	cmp	r9, r8
 800ce22:	f841 3b04 	str.w	r3, [r1], #4
 800ce26:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ce2a:	d2e6      	bcs.n	800cdfa <quorem+0xa4>
 800ce2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce34:	b922      	cbnz	r2, 800ce40 <quorem+0xea>
 800ce36:	3b04      	subs	r3, #4
 800ce38:	429d      	cmp	r5, r3
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	d30b      	bcc.n	800ce56 <quorem+0x100>
 800ce3e:	613c      	str	r4, [r7, #16]
 800ce40:	3601      	adds	r6, #1
 800ce42:	4630      	mov	r0, r6
 800ce44:	b003      	add	sp, #12
 800ce46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce4a:	6812      	ldr	r2, [r2, #0]
 800ce4c:	3b04      	subs	r3, #4
 800ce4e:	2a00      	cmp	r2, #0
 800ce50:	d1cb      	bne.n	800cdea <quorem+0x94>
 800ce52:	3c01      	subs	r4, #1
 800ce54:	e7c6      	b.n	800cde4 <quorem+0x8e>
 800ce56:	6812      	ldr	r2, [r2, #0]
 800ce58:	3b04      	subs	r3, #4
 800ce5a:	2a00      	cmp	r2, #0
 800ce5c:	d1ef      	bne.n	800ce3e <quorem+0xe8>
 800ce5e:	3c01      	subs	r4, #1
 800ce60:	e7ea      	b.n	800ce38 <quorem+0xe2>
 800ce62:	2000      	movs	r0, #0
 800ce64:	e7ee      	b.n	800ce44 <quorem+0xee>
	...

0800ce68 <_dtoa_r>:
 800ce68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce6c:	ed2d 8b02 	vpush	{d8}
 800ce70:	69c7      	ldr	r7, [r0, #28]
 800ce72:	b091      	sub	sp, #68	@ 0x44
 800ce74:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ce78:	ec55 4b10 	vmov	r4, r5, d0
 800ce7c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ce7e:	9107      	str	r1, [sp, #28]
 800ce80:	4681      	mov	r9, r0
 800ce82:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce84:	930d      	str	r3, [sp, #52]	@ 0x34
 800ce86:	b97f      	cbnz	r7, 800cea8 <_dtoa_r+0x40>
 800ce88:	2010      	movs	r0, #16
 800ce8a:	f7ff f8bb 	bl	800c004 <malloc>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	f8c9 001c 	str.w	r0, [r9, #28]
 800ce94:	b920      	cbnz	r0, 800cea0 <_dtoa_r+0x38>
 800ce96:	4ba0      	ldr	r3, [pc, #640]	@ (800d118 <_dtoa_r+0x2b0>)
 800ce98:	21ef      	movs	r1, #239	@ 0xef
 800ce9a:	48a0      	ldr	r0, [pc, #640]	@ (800d11c <_dtoa_r+0x2b4>)
 800ce9c:	f001 fb88 	bl	800e5b0 <__assert_func>
 800cea0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cea4:	6007      	str	r7, [r0, #0]
 800cea6:	60c7      	str	r7, [r0, #12]
 800cea8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ceac:	6819      	ldr	r1, [r3, #0]
 800ceae:	b159      	cbz	r1, 800cec8 <_dtoa_r+0x60>
 800ceb0:	685a      	ldr	r2, [r3, #4]
 800ceb2:	604a      	str	r2, [r1, #4]
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	4093      	lsls	r3, r2
 800ceb8:	608b      	str	r3, [r1, #8]
 800ceba:	4648      	mov	r0, r9
 800cebc:	f000 fdbc 	bl	800da38 <_Bfree>
 800cec0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cec4:	2200      	movs	r2, #0
 800cec6:	601a      	str	r2, [r3, #0]
 800cec8:	1e2b      	subs	r3, r5, #0
 800ceca:	bfbb      	ittet	lt
 800cecc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ced0:	9303      	strlt	r3, [sp, #12]
 800ced2:	2300      	movge	r3, #0
 800ced4:	2201      	movlt	r2, #1
 800ced6:	bfac      	ite	ge
 800ced8:	6033      	strge	r3, [r6, #0]
 800ceda:	6032      	strlt	r2, [r6, #0]
 800cedc:	4b90      	ldr	r3, [pc, #576]	@ (800d120 <_dtoa_r+0x2b8>)
 800cede:	9e03      	ldr	r6, [sp, #12]
 800cee0:	43b3      	bics	r3, r6
 800cee2:	d110      	bne.n	800cf06 <_dtoa_r+0x9e>
 800cee4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cee6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ceea:	6013      	str	r3, [r2, #0]
 800ceec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800cef0:	4323      	orrs	r3, r4
 800cef2:	f000 84e6 	beq.w	800d8c2 <_dtoa_r+0xa5a>
 800cef6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cef8:	4f8a      	ldr	r7, [pc, #552]	@ (800d124 <_dtoa_r+0x2bc>)
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	f000 84e8 	beq.w	800d8d0 <_dtoa_r+0xa68>
 800cf00:	1cfb      	adds	r3, r7, #3
 800cf02:	f000 bce3 	b.w	800d8cc <_dtoa_r+0xa64>
 800cf06:	ed9d 8b02 	vldr	d8, [sp, #8]
 800cf0a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cf0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf12:	d10a      	bne.n	800cf2a <_dtoa_r+0xc2>
 800cf14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cf16:	2301      	movs	r3, #1
 800cf18:	6013      	str	r3, [r2, #0]
 800cf1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cf1c:	b113      	cbz	r3, 800cf24 <_dtoa_r+0xbc>
 800cf1e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cf20:	4b81      	ldr	r3, [pc, #516]	@ (800d128 <_dtoa_r+0x2c0>)
 800cf22:	6013      	str	r3, [r2, #0]
 800cf24:	4f81      	ldr	r7, [pc, #516]	@ (800d12c <_dtoa_r+0x2c4>)
 800cf26:	f000 bcd3 	b.w	800d8d0 <_dtoa_r+0xa68>
 800cf2a:	aa0e      	add	r2, sp, #56	@ 0x38
 800cf2c:	a90f      	add	r1, sp, #60	@ 0x3c
 800cf2e:	4648      	mov	r0, r9
 800cf30:	eeb0 0b48 	vmov.f64	d0, d8
 800cf34:	f001 f862 	bl	800dffc <__d2b>
 800cf38:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800cf3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf3e:	9001      	str	r0, [sp, #4]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d045      	beq.n	800cfd0 <_dtoa_r+0x168>
 800cf44:	eeb0 7b48 	vmov.f64	d7, d8
 800cf48:	ee18 1a90 	vmov	r1, s17
 800cf4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cf50:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800cf54:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800cf58:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800cf5c:	2500      	movs	r5, #0
 800cf5e:	ee07 1a90 	vmov	s15, r1
 800cf62:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800cf66:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d100 <_dtoa_r+0x298>
 800cf6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cf6e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800d108 <_dtoa_r+0x2a0>
 800cf72:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cf76:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d110 <_dtoa_r+0x2a8>
 800cf7a:	ee07 3a90 	vmov	s15, r3
 800cf7e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800cf82:	eeb0 7b46 	vmov.f64	d7, d6
 800cf86:	eea4 7b05 	vfma.f64	d7, d4, d5
 800cf8a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cf8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cf92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf96:	ee16 8a90 	vmov	r8, s13
 800cf9a:	d508      	bpl.n	800cfae <_dtoa_r+0x146>
 800cf9c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cfa0:	eeb4 6b47 	vcmp.f64	d6, d7
 800cfa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa8:	bf18      	it	ne
 800cfaa:	f108 38ff 	addne.w	r8, r8, #4294967295
 800cfae:	f1b8 0f16 	cmp.w	r8, #22
 800cfb2:	d82b      	bhi.n	800d00c <_dtoa_r+0x1a4>
 800cfb4:	495e      	ldr	r1, [pc, #376]	@ (800d130 <_dtoa_r+0x2c8>)
 800cfb6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800cfba:	ed91 7b00 	vldr	d7, [r1]
 800cfbe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cfc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfc6:	d501      	bpl.n	800cfcc <_dtoa_r+0x164>
 800cfc8:	f108 38ff 	add.w	r8, r8, #4294967295
 800cfcc:	2100      	movs	r1, #0
 800cfce:	e01e      	b.n	800d00e <_dtoa_r+0x1a6>
 800cfd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfd2:	4413      	add	r3, r2
 800cfd4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800cfd8:	2920      	cmp	r1, #32
 800cfda:	bfc1      	itttt	gt
 800cfdc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800cfe0:	408e      	lslgt	r6, r1
 800cfe2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800cfe6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800cfea:	bfd6      	itet	le
 800cfec:	f1c1 0120 	rsble	r1, r1, #32
 800cff0:	4331      	orrgt	r1, r6
 800cff2:	fa04 f101 	lslle.w	r1, r4, r1
 800cff6:	ee07 1a90 	vmov	s15, r1
 800cffa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cffe:	3b01      	subs	r3, #1
 800d000:	ee17 1a90 	vmov	r1, s15
 800d004:	2501      	movs	r5, #1
 800d006:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800d00a:	e7a8      	b.n	800cf5e <_dtoa_r+0xf6>
 800d00c:	2101      	movs	r1, #1
 800d00e:	1ad2      	subs	r2, r2, r3
 800d010:	1e53      	subs	r3, r2, #1
 800d012:	9306      	str	r3, [sp, #24]
 800d014:	bf45      	ittet	mi
 800d016:	f1c2 0301 	rsbmi	r3, r2, #1
 800d01a:	9304      	strmi	r3, [sp, #16]
 800d01c:	2300      	movpl	r3, #0
 800d01e:	2300      	movmi	r3, #0
 800d020:	bf4c      	ite	mi
 800d022:	9306      	strmi	r3, [sp, #24]
 800d024:	9304      	strpl	r3, [sp, #16]
 800d026:	f1b8 0f00 	cmp.w	r8, #0
 800d02a:	910c      	str	r1, [sp, #48]	@ 0x30
 800d02c:	db18      	blt.n	800d060 <_dtoa_r+0x1f8>
 800d02e:	9b06      	ldr	r3, [sp, #24]
 800d030:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d034:	4443      	add	r3, r8
 800d036:	9306      	str	r3, [sp, #24]
 800d038:	2300      	movs	r3, #0
 800d03a:	9a07      	ldr	r2, [sp, #28]
 800d03c:	2a09      	cmp	r2, #9
 800d03e:	d845      	bhi.n	800d0cc <_dtoa_r+0x264>
 800d040:	2a05      	cmp	r2, #5
 800d042:	bfc4      	itt	gt
 800d044:	3a04      	subgt	r2, #4
 800d046:	9207      	strgt	r2, [sp, #28]
 800d048:	9a07      	ldr	r2, [sp, #28]
 800d04a:	f1a2 0202 	sub.w	r2, r2, #2
 800d04e:	bfcc      	ite	gt
 800d050:	2400      	movgt	r4, #0
 800d052:	2401      	movle	r4, #1
 800d054:	2a03      	cmp	r2, #3
 800d056:	d844      	bhi.n	800d0e2 <_dtoa_r+0x27a>
 800d058:	e8df f002 	tbb	[pc, r2]
 800d05c:	0b173634 	.word	0x0b173634
 800d060:	9b04      	ldr	r3, [sp, #16]
 800d062:	2200      	movs	r2, #0
 800d064:	eba3 0308 	sub.w	r3, r3, r8
 800d068:	9304      	str	r3, [sp, #16]
 800d06a:	920a      	str	r2, [sp, #40]	@ 0x28
 800d06c:	f1c8 0300 	rsb	r3, r8, #0
 800d070:	e7e3      	b.n	800d03a <_dtoa_r+0x1d2>
 800d072:	2201      	movs	r2, #1
 800d074:	9208      	str	r2, [sp, #32]
 800d076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d078:	eb08 0b02 	add.w	fp, r8, r2
 800d07c:	f10b 0a01 	add.w	sl, fp, #1
 800d080:	4652      	mov	r2, sl
 800d082:	2a01      	cmp	r2, #1
 800d084:	bfb8      	it	lt
 800d086:	2201      	movlt	r2, #1
 800d088:	e006      	b.n	800d098 <_dtoa_r+0x230>
 800d08a:	2201      	movs	r2, #1
 800d08c:	9208      	str	r2, [sp, #32]
 800d08e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d090:	2a00      	cmp	r2, #0
 800d092:	dd29      	ble.n	800d0e8 <_dtoa_r+0x280>
 800d094:	4693      	mov	fp, r2
 800d096:	4692      	mov	sl, r2
 800d098:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800d09c:	2100      	movs	r1, #0
 800d09e:	2004      	movs	r0, #4
 800d0a0:	f100 0614 	add.w	r6, r0, #20
 800d0a4:	4296      	cmp	r6, r2
 800d0a6:	d926      	bls.n	800d0f6 <_dtoa_r+0x28e>
 800d0a8:	6079      	str	r1, [r7, #4]
 800d0aa:	4648      	mov	r0, r9
 800d0ac:	9305      	str	r3, [sp, #20]
 800d0ae:	f000 fc83 	bl	800d9b8 <_Balloc>
 800d0b2:	9b05      	ldr	r3, [sp, #20]
 800d0b4:	4607      	mov	r7, r0
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	d13e      	bne.n	800d138 <_dtoa_r+0x2d0>
 800d0ba:	4b1e      	ldr	r3, [pc, #120]	@ (800d134 <_dtoa_r+0x2cc>)
 800d0bc:	4602      	mov	r2, r0
 800d0be:	f240 11af 	movw	r1, #431	@ 0x1af
 800d0c2:	e6ea      	b.n	800ce9a <_dtoa_r+0x32>
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	e7e1      	b.n	800d08c <_dtoa_r+0x224>
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	e7d3      	b.n	800d074 <_dtoa_r+0x20c>
 800d0cc:	2401      	movs	r4, #1
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d0d4:	f04f 3bff 	mov.w	fp, #4294967295
 800d0d8:	2100      	movs	r1, #0
 800d0da:	46da      	mov	sl, fp
 800d0dc:	2212      	movs	r2, #18
 800d0de:	9109      	str	r1, [sp, #36]	@ 0x24
 800d0e0:	e7da      	b.n	800d098 <_dtoa_r+0x230>
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	9208      	str	r2, [sp, #32]
 800d0e6:	e7f5      	b.n	800d0d4 <_dtoa_r+0x26c>
 800d0e8:	f04f 0b01 	mov.w	fp, #1
 800d0ec:	46da      	mov	sl, fp
 800d0ee:	465a      	mov	r2, fp
 800d0f0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800d0f4:	e7d0      	b.n	800d098 <_dtoa_r+0x230>
 800d0f6:	3101      	adds	r1, #1
 800d0f8:	0040      	lsls	r0, r0, #1
 800d0fa:	e7d1      	b.n	800d0a0 <_dtoa_r+0x238>
 800d0fc:	f3af 8000 	nop.w
 800d100:	636f4361 	.word	0x636f4361
 800d104:	3fd287a7 	.word	0x3fd287a7
 800d108:	8b60c8b3 	.word	0x8b60c8b3
 800d10c:	3fc68a28 	.word	0x3fc68a28
 800d110:	509f79fb 	.word	0x509f79fb
 800d114:	3fd34413 	.word	0x3fd34413
 800d118:	0800e93d 	.word	0x0800e93d
 800d11c:	0800e954 	.word	0x0800e954
 800d120:	7ff00000 	.word	0x7ff00000
 800d124:	0800e939 	.word	0x0800e939
 800d128:	0800e90d 	.word	0x0800e90d
 800d12c:	0800e90c 	.word	0x0800e90c
 800d130:	0800eaa8 	.word	0x0800eaa8
 800d134:	0800e9ac 	.word	0x0800e9ac
 800d138:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800d13c:	f1ba 0f0e 	cmp.w	sl, #14
 800d140:	6010      	str	r0, [r2, #0]
 800d142:	d86e      	bhi.n	800d222 <_dtoa_r+0x3ba>
 800d144:	2c00      	cmp	r4, #0
 800d146:	d06c      	beq.n	800d222 <_dtoa_r+0x3ba>
 800d148:	f1b8 0f00 	cmp.w	r8, #0
 800d14c:	f340 80b4 	ble.w	800d2b8 <_dtoa_r+0x450>
 800d150:	4ac8      	ldr	r2, [pc, #800]	@ (800d474 <_dtoa_r+0x60c>)
 800d152:	f008 010f 	and.w	r1, r8, #15
 800d156:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d15a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800d15e:	ed92 7b00 	vldr	d7, [r2]
 800d162:	ea4f 1128 	mov.w	r1, r8, asr #4
 800d166:	f000 809b 	beq.w	800d2a0 <_dtoa_r+0x438>
 800d16a:	4ac3      	ldr	r2, [pc, #780]	@ (800d478 <_dtoa_r+0x610>)
 800d16c:	ed92 6b08 	vldr	d6, [r2, #32]
 800d170:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d174:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d178:	f001 010f 	and.w	r1, r1, #15
 800d17c:	2203      	movs	r2, #3
 800d17e:	48be      	ldr	r0, [pc, #760]	@ (800d478 <_dtoa_r+0x610>)
 800d180:	2900      	cmp	r1, #0
 800d182:	f040 808f 	bne.w	800d2a4 <_dtoa_r+0x43c>
 800d186:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d18a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d18e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d192:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d194:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d198:	2900      	cmp	r1, #0
 800d19a:	f000 80b3 	beq.w	800d304 <_dtoa_r+0x49c>
 800d19e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d1a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1aa:	f140 80ab 	bpl.w	800d304 <_dtoa_r+0x49c>
 800d1ae:	f1ba 0f00 	cmp.w	sl, #0
 800d1b2:	f000 80a7 	beq.w	800d304 <_dtoa_r+0x49c>
 800d1b6:	f1bb 0f00 	cmp.w	fp, #0
 800d1ba:	dd30      	ble.n	800d21e <_dtoa_r+0x3b6>
 800d1bc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d1c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d1c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d1c8:	f108 31ff 	add.w	r1, r8, #4294967295
 800d1cc:	9105      	str	r1, [sp, #20]
 800d1ce:	3201      	adds	r2, #1
 800d1d0:	465c      	mov	r4, fp
 800d1d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d1d6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800d1da:	ee07 2a90 	vmov	s15, r2
 800d1de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d1e2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d1e6:	ee15 2a90 	vmov	r2, s11
 800d1ea:	ec51 0b15 	vmov	r0, r1, d5
 800d1ee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800d1f2:	2c00      	cmp	r4, #0
 800d1f4:	f040 808a 	bne.w	800d30c <_dtoa_r+0x4a4>
 800d1f8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d1fc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d200:	ec41 0b17 	vmov	d7, r0, r1
 800d204:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d20c:	f300 826a 	bgt.w	800d6e4 <_dtoa_r+0x87c>
 800d210:	eeb1 7b47 	vneg.f64	d7, d7
 800d214:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d21c:	d423      	bmi.n	800d266 <_dtoa_r+0x3fe>
 800d21e:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d222:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d224:	2a00      	cmp	r2, #0
 800d226:	f2c0 8129 	blt.w	800d47c <_dtoa_r+0x614>
 800d22a:	f1b8 0f0e 	cmp.w	r8, #14
 800d22e:	f300 8125 	bgt.w	800d47c <_dtoa_r+0x614>
 800d232:	4b90      	ldr	r3, [pc, #576]	@ (800d474 <_dtoa_r+0x60c>)
 800d234:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d238:	ed93 6b00 	vldr	d6, [r3]
 800d23c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d23e:	2b00      	cmp	r3, #0
 800d240:	f280 80c8 	bge.w	800d3d4 <_dtoa_r+0x56c>
 800d244:	f1ba 0f00 	cmp.w	sl, #0
 800d248:	f300 80c4 	bgt.w	800d3d4 <_dtoa_r+0x56c>
 800d24c:	d10b      	bne.n	800d266 <_dtoa_r+0x3fe>
 800d24e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d252:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d256:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d25a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d262:	f2c0 823c 	blt.w	800d6de <_dtoa_r+0x876>
 800d266:	2400      	movs	r4, #0
 800d268:	4625      	mov	r5, r4
 800d26a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d26c:	43db      	mvns	r3, r3
 800d26e:	9305      	str	r3, [sp, #20]
 800d270:	463e      	mov	r6, r7
 800d272:	f04f 0800 	mov.w	r8, #0
 800d276:	4621      	mov	r1, r4
 800d278:	4648      	mov	r0, r9
 800d27a:	f000 fbdd 	bl	800da38 <_Bfree>
 800d27e:	2d00      	cmp	r5, #0
 800d280:	f000 80a2 	beq.w	800d3c8 <_dtoa_r+0x560>
 800d284:	f1b8 0f00 	cmp.w	r8, #0
 800d288:	d005      	beq.n	800d296 <_dtoa_r+0x42e>
 800d28a:	45a8      	cmp	r8, r5
 800d28c:	d003      	beq.n	800d296 <_dtoa_r+0x42e>
 800d28e:	4641      	mov	r1, r8
 800d290:	4648      	mov	r0, r9
 800d292:	f000 fbd1 	bl	800da38 <_Bfree>
 800d296:	4629      	mov	r1, r5
 800d298:	4648      	mov	r0, r9
 800d29a:	f000 fbcd 	bl	800da38 <_Bfree>
 800d29e:	e093      	b.n	800d3c8 <_dtoa_r+0x560>
 800d2a0:	2202      	movs	r2, #2
 800d2a2:	e76c      	b.n	800d17e <_dtoa_r+0x316>
 800d2a4:	07cc      	lsls	r4, r1, #31
 800d2a6:	d504      	bpl.n	800d2b2 <_dtoa_r+0x44a>
 800d2a8:	ed90 6b00 	vldr	d6, [r0]
 800d2ac:	3201      	adds	r2, #1
 800d2ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d2b2:	1049      	asrs	r1, r1, #1
 800d2b4:	3008      	adds	r0, #8
 800d2b6:	e763      	b.n	800d180 <_dtoa_r+0x318>
 800d2b8:	d022      	beq.n	800d300 <_dtoa_r+0x498>
 800d2ba:	f1c8 0100 	rsb	r1, r8, #0
 800d2be:	4a6d      	ldr	r2, [pc, #436]	@ (800d474 <_dtoa_r+0x60c>)
 800d2c0:	f001 000f 	and.w	r0, r1, #15
 800d2c4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d2c8:	ed92 7b00 	vldr	d7, [r2]
 800d2cc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d2d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d2d4:	4868      	ldr	r0, [pc, #416]	@ (800d478 <_dtoa_r+0x610>)
 800d2d6:	1109      	asrs	r1, r1, #4
 800d2d8:	2400      	movs	r4, #0
 800d2da:	2202      	movs	r2, #2
 800d2dc:	b929      	cbnz	r1, 800d2ea <_dtoa_r+0x482>
 800d2de:	2c00      	cmp	r4, #0
 800d2e0:	f43f af57 	beq.w	800d192 <_dtoa_r+0x32a>
 800d2e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d2e8:	e753      	b.n	800d192 <_dtoa_r+0x32a>
 800d2ea:	07ce      	lsls	r6, r1, #31
 800d2ec:	d505      	bpl.n	800d2fa <_dtoa_r+0x492>
 800d2ee:	ed90 6b00 	vldr	d6, [r0]
 800d2f2:	3201      	adds	r2, #1
 800d2f4:	2401      	movs	r4, #1
 800d2f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d2fa:	1049      	asrs	r1, r1, #1
 800d2fc:	3008      	adds	r0, #8
 800d2fe:	e7ed      	b.n	800d2dc <_dtoa_r+0x474>
 800d300:	2202      	movs	r2, #2
 800d302:	e746      	b.n	800d192 <_dtoa_r+0x32a>
 800d304:	f8cd 8014 	str.w	r8, [sp, #20]
 800d308:	4654      	mov	r4, sl
 800d30a:	e762      	b.n	800d1d2 <_dtoa_r+0x36a>
 800d30c:	4a59      	ldr	r2, [pc, #356]	@ (800d474 <_dtoa_r+0x60c>)
 800d30e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d312:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d316:	9a08      	ldr	r2, [sp, #32]
 800d318:	ec41 0b17 	vmov	d7, r0, r1
 800d31c:	443c      	add	r4, r7
 800d31e:	b34a      	cbz	r2, 800d374 <_dtoa_r+0x50c>
 800d320:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800d324:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800d328:	463e      	mov	r6, r7
 800d32a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d32e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d332:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d336:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d33a:	ee14 2a90 	vmov	r2, s9
 800d33e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d342:	3230      	adds	r2, #48	@ 0x30
 800d344:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d348:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d350:	f806 2b01 	strb.w	r2, [r6], #1
 800d354:	d438      	bmi.n	800d3c8 <_dtoa_r+0x560>
 800d356:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d35a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d362:	d46e      	bmi.n	800d442 <_dtoa_r+0x5da>
 800d364:	42a6      	cmp	r6, r4
 800d366:	f43f af5a 	beq.w	800d21e <_dtoa_r+0x3b6>
 800d36a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d36e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d372:	e7e0      	b.n	800d336 <_dtoa_r+0x4ce>
 800d374:	4621      	mov	r1, r4
 800d376:	463e      	mov	r6, r7
 800d378:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d37c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d380:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d384:	ee14 2a90 	vmov	r2, s9
 800d388:	3230      	adds	r2, #48	@ 0x30
 800d38a:	f806 2b01 	strb.w	r2, [r6], #1
 800d38e:	42a6      	cmp	r6, r4
 800d390:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d394:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d398:	d119      	bne.n	800d3ce <_dtoa_r+0x566>
 800d39a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800d39e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d3a2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3aa:	dc4a      	bgt.n	800d442 <_dtoa_r+0x5da>
 800d3ac:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d3b0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3b8:	f57f af31 	bpl.w	800d21e <_dtoa_r+0x3b6>
 800d3bc:	460e      	mov	r6, r1
 800d3be:	3901      	subs	r1, #1
 800d3c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d3c4:	2b30      	cmp	r3, #48	@ 0x30
 800d3c6:	d0f9      	beq.n	800d3bc <_dtoa_r+0x554>
 800d3c8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d3cc:	e027      	b.n	800d41e <_dtoa_r+0x5b6>
 800d3ce:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d3d2:	e7d5      	b.n	800d380 <_dtoa_r+0x518>
 800d3d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d3d8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800d3dc:	463e      	mov	r6, r7
 800d3de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d3e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d3e6:	ee15 3a10 	vmov	r3, s10
 800d3ea:	3330      	adds	r3, #48	@ 0x30
 800d3ec:	f806 3b01 	strb.w	r3, [r6], #1
 800d3f0:	1bf3      	subs	r3, r6, r7
 800d3f2:	459a      	cmp	sl, r3
 800d3f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d3f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d3fc:	d132      	bne.n	800d464 <_dtoa_r+0x5fc>
 800d3fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d402:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d40a:	dc18      	bgt.n	800d43e <_dtoa_r+0x5d6>
 800d40c:	eeb4 7b46 	vcmp.f64	d7, d6
 800d410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d414:	d103      	bne.n	800d41e <_dtoa_r+0x5b6>
 800d416:	ee15 3a10 	vmov	r3, s10
 800d41a:	07db      	lsls	r3, r3, #31
 800d41c:	d40f      	bmi.n	800d43e <_dtoa_r+0x5d6>
 800d41e:	9901      	ldr	r1, [sp, #4]
 800d420:	4648      	mov	r0, r9
 800d422:	f000 fb09 	bl	800da38 <_Bfree>
 800d426:	2300      	movs	r3, #0
 800d428:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d42a:	7033      	strb	r3, [r6, #0]
 800d42c:	f108 0301 	add.w	r3, r8, #1
 800d430:	6013      	str	r3, [r2, #0]
 800d432:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d434:	2b00      	cmp	r3, #0
 800d436:	f000 824b 	beq.w	800d8d0 <_dtoa_r+0xa68>
 800d43a:	601e      	str	r6, [r3, #0]
 800d43c:	e248      	b.n	800d8d0 <_dtoa_r+0xa68>
 800d43e:	f8cd 8014 	str.w	r8, [sp, #20]
 800d442:	4633      	mov	r3, r6
 800d444:	461e      	mov	r6, r3
 800d446:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d44a:	2a39      	cmp	r2, #57	@ 0x39
 800d44c:	d106      	bne.n	800d45c <_dtoa_r+0x5f4>
 800d44e:	429f      	cmp	r7, r3
 800d450:	d1f8      	bne.n	800d444 <_dtoa_r+0x5dc>
 800d452:	9a05      	ldr	r2, [sp, #20]
 800d454:	3201      	adds	r2, #1
 800d456:	9205      	str	r2, [sp, #20]
 800d458:	2230      	movs	r2, #48	@ 0x30
 800d45a:	703a      	strb	r2, [r7, #0]
 800d45c:	781a      	ldrb	r2, [r3, #0]
 800d45e:	3201      	adds	r2, #1
 800d460:	701a      	strb	r2, [r3, #0]
 800d462:	e7b1      	b.n	800d3c8 <_dtoa_r+0x560>
 800d464:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d468:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d470:	d1b5      	bne.n	800d3de <_dtoa_r+0x576>
 800d472:	e7d4      	b.n	800d41e <_dtoa_r+0x5b6>
 800d474:	0800eaa8 	.word	0x0800eaa8
 800d478:	0800ea80 	.word	0x0800ea80
 800d47c:	9908      	ldr	r1, [sp, #32]
 800d47e:	2900      	cmp	r1, #0
 800d480:	f000 80e9 	beq.w	800d656 <_dtoa_r+0x7ee>
 800d484:	9907      	ldr	r1, [sp, #28]
 800d486:	2901      	cmp	r1, #1
 800d488:	f300 80cb 	bgt.w	800d622 <_dtoa_r+0x7ba>
 800d48c:	2d00      	cmp	r5, #0
 800d48e:	f000 80c4 	beq.w	800d61a <_dtoa_r+0x7b2>
 800d492:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d496:	9e04      	ldr	r6, [sp, #16]
 800d498:	461c      	mov	r4, r3
 800d49a:	9305      	str	r3, [sp, #20]
 800d49c:	9b04      	ldr	r3, [sp, #16]
 800d49e:	4413      	add	r3, r2
 800d4a0:	9304      	str	r3, [sp, #16]
 800d4a2:	9b06      	ldr	r3, [sp, #24]
 800d4a4:	2101      	movs	r1, #1
 800d4a6:	4413      	add	r3, r2
 800d4a8:	4648      	mov	r0, r9
 800d4aa:	9306      	str	r3, [sp, #24]
 800d4ac:	f000 fb78 	bl	800dba0 <__i2b>
 800d4b0:	9b05      	ldr	r3, [sp, #20]
 800d4b2:	4605      	mov	r5, r0
 800d4b4:	b166      	cbz	r6, 800d4d0 <_dtoa_r+0x668>
 800d4b6:	9a06      	ldr	r2, [sp, #24]
 800d4b8:	2a00      	cmp	r2, #0
 800d4ba:	dd09      	ble.n	800d4d0 <_dtoa_r+0x668>
 800d4bc:	42b2      	cmp	r2, r6
 800d4be:	9904      	ldr	r1, [sp, #16]
 800d4c0:	bfa8      	it	ge
 800d4c2:	4632      	movge	r2, r6
 800d4c4:	1a89      	subs	r1, r1, r2
 800d4c6:	9104      	str	r1, [sp, #16]
 800d4c8:	9906      	ldr	r1, [sp, #24]
 800d4ca:	1ab6      	subs	r6, r6, r2
 800d4cc:	1a8a      	subs	r2, r1, r2
 800d4ce:	9206      	str	r2, [sp, #24]
 800d4d0:	b30b      	cbz	r3, 800d516 <_dtoa_r+0x6ae>
 800d4d2:	9a08      	ldr	r2, [sp, #32]
 800d4d4:	2a00      	cmp	r2, #0
 800d4d6:	f000 80c5 	beq.w	800d664 <_dtoa_r+0x7fc>
 800d4da:	2c00      	cmp	r4, #0
 800d4dc:	f000 80bf 	beq.w	800d65e <_dtoa_r+0x7f6>
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	4622      	mov	r2, r4
 800d4e4:	4648      	mov	r0, r9
 800d4e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4e8:	f000 fc12 	bl	800dd10 <__pow5mult>
 800d4ec:	9a01      	ldr	r2, [sp, #4]
 800d4ee:	4601      	mov	r1, r0
 800d4f0:	4605      	mov	r5, r0
 800d4f2:	4648      	mov	r0, r9
 800d4f4:	f000 fb6a 	bl	800dbcc <__multiply>
 800d4f8:	9901      	ldr	r1, [sp, #4]
 800d4fa:	9005      	str	r0, [sp, #20]
 800d4fc:	4648      	mov	r0, r9
 800d4fe:	f000 fa9b 	bl	800da38 <_Bfree>
 800d502:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d504:	1b1b      	subs	r3, r3, r4
 800d506:	f000 80b0 	beq.w	800d66a <_dtoa_r+0x802>
 800d50a:	9905      	ldr	r1, [sp, #20]
 800d50c:	461a      	mov	r2, r3
 800d50e:	4648      	mov	r0, r9
 800d510:	f000 fbfe 	bl	800dd10 <__pow5mult>
 800d514:	9001      	str	r0, [sp, #4]
 800d516:	2101      	movs	r1, #1
 800d518:	4648      	mov	r0, r9
 800d51a:	f000 fb41 	bl	800dba0 <__i2b>
 800d51e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d520:	4604      	mov	r4, r0
 800d522:	2b00      	cmp	r3, #0
 800d524:	f000 81da 	beq.w	800d8dc <_dtoa_r+0xa74>
 800d528:	461a      	mov	r2, r3
 800d52a:	4601      	mov	r1, r0
 800d52c:	4648      	mov	r0, r9
 800d52e:	f000 fbef 	bl	800dd10 <__pow5mult>
 800d532:	9b07      	ldr	r3, [sp, #28]
 800d534:	2b01      	cmp	r3, #1
 800d536:	4604      	mov	r4, r0
 800d538:	f300 80a0 	bgt.w	800d67c <_dtoa_r+0x814>
 800d53c:	9b02      	ldr	r3, [sp, #8]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	f040 8096 	bne.w	800d670 <_dtoa_r+0x808>
 800d544:	9b03      	ldr	r3, [sp, #12]
 800d546:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d54a:	2a00      	cmp	r2, #0
 800d54c:	f040 8092 	bne.w	800d674 <_dtoa_r+0x80c>
 800d550:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d554:	0d12      	lsrs	r2, r2, #20
 800d556:	0512      	lsls	r2, r2, #20
 800d558:	2a00      	cmp	r2, #0
 800d55a:	f000 808d 	beq.w	800d678 <_dtoa_r+0x810>
 800d55e:	9b04      	ldr	r3, [sp, #16]
 800d560:	3301      	adds	r3, #1
 800d562:	9304      	str	r3, [sp, #16]
 800d564:	9b06      	ldr	r3, [sp, #24]
 800d566:	3301      	adds	r3, #1
 800d568:	9306      	str	r3, [sp, #24]
 800d56a:	2301      	movs	r3, #1
 800d56c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d56e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d570:	2b00      	cmp	r3, #0
 800d572:	f000 81b9 	beq.w	800d8e8 <_dtoa_r+0xa80>
 800d576:	6922      	ldr	r2, [r4, #16]
 800d578:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d57c:	6910      	ldr	r0, [r2, #16]
 800d57e:	f000 fac3 	bl	800db08 <__hi0bits>
 800d582:	f1c0 0020 	rsb	r0, r0, #32
 800d586:	9b06      	ldr	r3, [sp, #24]
 800d588:	4418      	add	r0, r3
 800d58a:	f010 001f 	ands.w	r0, r0, #31
 800d58e:	f000 8081 	beq.w	800d694 <_dtoa_r+0x82c>
 800d592:	f1c0 0220 	rsb	r2, r0, #32
 800d596:	2a04      	cmp	r2, #4
 800d598:	dd73      	ble.n	800d682 <_dtoa_r+0x81a>
 800d59a:	9b04      	ldr	r3, [sp, #16]
 800d59c:	f1c0 001c 	rsb	r0, r0, #28
 800d5a0:	4403      	add	r3, r0
 800d5a2:	9304      	str	r3, [sp, #16]
 800d5a4:	9b06      	ldr	r3, [sp, #24]
 800d5a6:	4406      	add	r6, r0
 800d5a8:	4403      	add	r3, r0
 800d5aa:	9306      	str	r3, [sp, #24]
 800d5ac:	9b04      	ldr	r3, [sp, #16]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	dd05      	ble.n	800d5be <_dtoa_r+0x756>
 800d5b2:	9901      	ldr	r1, [sp, #4]
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	4648      	mov	r0, r9
 800d5b8:	f000 fc04 	bl	800ddc4 <__lshift>
 800d5bc:	9001      	str	r0, [sp, #4]
 800d5be:	9b06      	ldr	r3, [sp, #24]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	dd05      	ble.n	800d5d0 <_dtoa_r+0x768>
 800d5c4:	4621      	mov	r1, r4
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	4648      	mov	r0, r9
 800d5ca:	f000 fbfb 	bl	800ddc4 <__lshift>
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d060      	beq.n	800d698 <_dtoa_r+0x830>
 800d5d6:	9801      	ldr	r0, [sp, #4]
 800d5d8:	4621      	mov	r1, r4
 800d5da:	f000 fc5f 	bl	800de9c <__mcmp>
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	da5a      	bge.n	800d698 <_dtoa_r+0x830>
 800d5e2:	f108 33ff 	add.w	r3, r8, #4294967295
 800d5e6:	9305      	str	r3, [sp, #20]
 800d5e8:	9901      	ldr	r1, [sp, #4]
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	220a      	movs	r2, #10
 800d5ee:	4648      	mov	r0, r9
 800d5f0:	f000 fa44 	bl	800da7c <__multadd>
 800d5f4:	9b08      	ldr	r3, [sp, #32]
 800d5f6:	9001      	str	r0, [sp, #4]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f000 8177 	beq.w	800d8ec <_dtoa_r+0xa84>
 800d5fe:	4629      	mov	r1, r5
 800d600:	2300      	movs	r3, #0
 800d602:	220a      	movs	r2, #10
 800d604:	4648      	mov	r0, r9
 800d606:	f000 fa39 	bl	800da7c <__multadd>
 800d60a:	f1bb 0f00 	cmp.w	fp, #0
 800d60e:	4605      	mov	r5, r0
 800d610:	dc6e      	bgt.n	800d6f0 <_dtoa_r+0x888>
 800d612:	9b07      	ldr	r3, [sp, #28]
 800d614:	2b02      	cmp	r3, #2
 800d616:	dc48      	bgt.n	800d6aa <_dtoa_r+0x842>
 800d618:	e06a      	b.n	800d6f0 <_dtoa_r+0x888>
 800d61a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d61c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d620:	e739      	b.n	800d496 <_dtoa_r+0x62e>
 800d622:	f10a 34ff 	add.w	r4, sl, #4294967295
 800d626:	42a3      	cmp	r3, r4
 800d628:	db07      	blt.n	800d63a <_dtoa_r+0x7d2>
 800d62a:	f1ba 0f00 	cmp.w	sl, #0
 800d62e:	eba3 0404 	sub.w	r4, r3, r4
 800d632:	db0b      	blt.n	800d64c <_dtoa_r+0x7e4>
 800d634:	9e04      	ldr	r6, [sp, #16]
 800d636:	4652      	mov	r2, sl
 800d638:	e72f      	b.n	800d49a <_dtoa_r+0x632>
 800d63a:	1ae2      	subs	r2, r4, r3
 800d63c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d63e:	9e04      	ldr	r6, [sp, #16]
 800d640:	4413      	add	r3, r2
 800d642:	930a      	str	r3, [sp, #40]	@ 0x28
 800d644:	4652      	mov	r2, sl
 800d646:	4623      	mov	r3, r4
 800d648:	2400      	movs	r4, #0
 800d64a:	e726      	b.n	800d49a <_dtoa_r+0x632>
 800d64c:	9a04      	ldr	r2, [sp, #16]
 800d64e:	eba2 060a 	sub.w	r6, r2, sl
 800d652:	2200      	movs	r2, #0
 800d654:	e721      	b.n	800d49a <_dtoa_r+0x632>
 800d656:	9e04      	ldr	r6, [sp, #16]
 800d658:	9d08      	ldr	r5, [sp, #32]
 800d65a:	461c      	mov	r4, r3
 800d65c:	e72a      	b.n	800d4b4 <_dtoa_r+0x64c>
 800d65e:	9a01      	ldr	r2, [sp, #4]
 800d660:	9205      	str	r2, [sp, #20]
 800d662:	e752      	b.n	800d50a <_dtoa_r+0x6a2>
 800d664:	9901      	ldr	r1, [sp, #4]
 800d666:	461a      	mov	r2, r3
 800d668:	e751      	b.n	800d50e <_dtoa_r+0x6a6>
 800d66a:	9b05      	ldr	r3, [sp, #20]
 800d66c:	9301      	str	r3, [sp, #4]
 800d66e:	e752      	b.n	800d516 <_dtoa_r+0x6ae>
 800d670:	2300      	movs	r3, #0
 800d672:	e77b      	b.n	800d56c <_dtoa_r+0x704>
 800d674:	9b02      	ldr	r3, [sp, #8]
 800d676:	e779      	b.n	800d56c <_dtoa_r+0x704>
 800d678:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d67a:	e778      	b.n	800d56e <_dtoa_r+0x706>
 800d67c:	2300      	movs	r3, #0
 800d67e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d680:	e779      	b.n	800d576 <_dtoa_r+0x70e>
 800d682:	d093      	beq.n	800d5ac <_dtoa_r+0x744>
 800d684:	9b04      	ldr	r3, [sp, #16]
 800d686:	321c      	adds	r2, #28
 800d688:	4413      	add	r3, r2
 800d68a:	9304      	str	r3, [sp, #16]
 800d68c:	9b06      	ldr	r3, [sp, #24]
 800d68e:	4416      	add	r6, r2
 800d690:	4413      	add	r3, r2
 800d692:	e78a      	b.n	800d5aa <_dtoa_r+0x742>
 800d694:	4602      	mov	r2, r0
 800d696:	e7f5      	b.n	800d684 <_dtoa_r+0x81c>
 800d698:	f1ba 0f00 	cmp.w	sl, #0
 800d69c:	f8cd 8014 	str.w	r8, [sp, #20]
 800d6a0:	46d3      	mov	fp, sl
 800d6a2:	dc21      	bgt.n	800d6e8 <_dtoa_r+0x880>
 800d6a4:	9b07      	ldr	r3, [sp, #28]
 800d6a6:	2b02      	cmp	r3, #2
 800d6a8:	dd1e      	ble.n	800d6e8 <_dtoa_r+0x880>
 800d6aa:	f1bb 0f00 	cmp.w	fp, #0
 800d6ae:	f47f addc 	bne.w	800d26a <_dtoa_r+0x402>
 800d6b2:	4621      	mov	r1, r4
 800d6b4:	465b      	mov	r3, fp
 800d6b6:	2205      	movs	r2, #5
 800d6b8:	4648      	mov	r0, r9
 800d6ba:	f000 f9df 	bl	800da7c <__multadd>
 800d6be:	4601      	mov	r1, r0
 800d6c0:	4604      	mov	r4, r0
 800d6c2:	9801      	ldr	r0, [sp, #4]
 800d6c4:	f000 fbea 	bl	800de9c <__mcmp>
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	f77f adce 	ble.w	800d26a <_dtoa_r+0x402>
 800d6ce:	463e      	mov	r6, r7
 800d6d0:	2331      	movs	r3, #49	@ 0x31
 800d6d2:	f806 3b01 	strb.w	r3, [r6], #1
 800d6d6:	9b05      	ldr	r3, [sp, #20]
 800d6d8:	3301      	adds	r3, #1
 800d6da:	9305      	str	r3, [sp, #20]
 800d6dc:	e5c9      	b.n	800d272 <_dtoa_r+0x40a>
 800d6de:	f8cd 8014 	str.w	r8, [sp, #20]
 800d6e2:	4654      	mov	r4, sl
 800d6e4:	4625      	mov	r5, r4
 800d6e6:	e7f2      	b.n	800d6ce <_dtoa_r+0x866>
 800d6e8:	9b08      	ldr	r3, [sp, #32]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	f000 8102 	beq.w	800d8f4 <_dtoa_r+0xa8c>
 800d6f0:	2e00      	cmp	r6, #0
 800d6f2:	dd05      	ble.n	800d700 <_dtoa_r+0x898>
 800d6f4:	4629      	mov	r1, r5
 800d6f6:	4632      	mov	r2, r6
 800d6f8:	4648      	mov	r0, r9
 800d6fa:	f000 fb63 	bl	800ddc4 <__lshift>
 800d6fe:	4605      	mov	r5, r0
 800d700:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d702:	2b00      	cmp	r3, #0
 800d704:	d058      	beq.n	800d7b8 <_dtoa_r+0x950>
 800d706:	6869      	ldr	r1, [r5, #4]
 800d708:	4648      	mov	r0, r9
 800d70a:	f000 f955 	bl	800d9b8 <_Balloc>
 800d70e:	4606      	mov	r6, r0
 800d710:	b928      	cbnz	r0, 800d71e <_dtoa_r+0x8b6>
 800d712:	4b82      	ldr	r3, [pc, #520]	@ (800d91c <_dtoa_r+0xab4>)
 800d714:	4602      	mov	r2, r0
 800d716:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d71a:	f7ff bbbe 	b.w	800ce9a <_dtoa_r+0x32>
 800d71e:	692a      	ldr	r2, [r5, #16]
 800d720:	3202      	adds	r2, #2
 800d722:	0092      	lsls	r2, r2, #2
 800d724:	f105 010c 	add.w	r1, r5, #12
 800d728:	300c      	adds	r0, #12
 800d72a:	f7ff fb06 	bl	800cd3a <memcpy>
 800d72e:	2201      	movs	r2, #1
 800d730:	4631      	mov	r1, r6
 800d732:	4648      	mov	r0, r9
 800d734:	f000 fb46 	bl	800ddc4 <__lshift>
 800d738:	1c7b      	adds	r3, r7, #1
 800d73a:	9304      	str	r3, [sp, #16]
 800d73c:	eb07 030b 	add.w	r3, r7, fp
 800d740:	9309      	str	r3, [sp, #36]	@ 0x24
 800d742:	9b02      	ldr	r3, [sp, #8]
 800d744:	f003 0301 	and.w	r3, r3, #1
 800d748:	46a8      	mov	r8, r5
 800d74a:	9308      	str	r3, [sp, #32]
 800d74c:	4605      	mov	r5, r0
 800d74e:	9b04      	ldr	r3, [sp, #16]
 800d750:	9801      	ldr	r0, [sp, #4]
 800d752:	4621      	mov	r1, r4
 800d754:	f103 3bff 	add.w	fp, r3, #4294967295
 800d758:	f7ff fafd 	bl	800cd56 <quorem>
 800d75c:	4641      	mov	r1, r8
 800d75e:	9002      	str	r0, [sp, #8]
 800d760:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d764:	9801      	ldr	r0, [sp, #4]
 800d766:	f000 fb99 	bl	800de9c <__mcmp>
 800d76a:	462a      	mov	r2, r5
 800d76c:	9006      	str	r0, [sp, #24]
 800d76e:	4621      	mov	r1, r4
 800d770:	4648      	mov	r0, r9
 800d772:	f000 fbaf 	bl	800ded4 <__mdiff>
 800d776:	68c2      	ldr	r2, [r0, #12]
 800d778:	4606      	mov	r6, r0
 800d77a:	b9fa      	cbnz	r2, 800d7bc <_dtoa_r+0x954>
 800d77c:	4601      	mov	r1, r0
 800d77e:	9801      	ldr	r0, [sp, #4]
 800d780:	f000 fb8c 	bl	800de9c <__mcmp>
 800d784:	4602      	mov	r2, r0
 800d786:	4631      	mov	r1, r6
 800d788:	4648      	mov	r0, r9
 800d78a:	920a      	str	r2, [sp, #40]	@ 0x28
 800d78c:	f000 f954 	bl	800da38 <_Bfree>
 800d790:	9b07      	ldr	r3, [sp, #28]
 800d792:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d794:	9e04      	ldr	r6, [sp, #16]
 800d796:	ea42 0103 	orr.w	r1, r2, r3
 800d79a:	9b08      	ldr	r3, [sp, #32]
 800d79c:	4319      	orrs	r1, r3
 800d79e:	d10f      	bne.n	800d7c0 <_dtoa_r+0x958>
 800d7a0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d7a4:	d028      	beq.n	800d7f8 <_dtoa_r+0x990>
 800d7a6:	9b06      	ldr	r3, [sp, #24]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	dd02      	ble.n	800d7b2 <_dtoa_r+0x94a>
 800d7ac:	9b02      	ldr	r3, [sp, #8]
 800d7ae:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800d7b2:	f88b a000 	strb.w	sl, [fp]
 800d7b6:	e55e      	b.n	800d276 <_dtoa_r+0x40e>
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	e7bd      	b.n	800d738 <_dtoa_r+0x8d0>
 800d7bc:	2201      	movs	r2, #1
 800d7be:	e7e2      	b.n	800d786 <_dtoa_r+0x91e>
 800d7c0:	9b06      	ldr	r3, [sp, #24]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	db04      	blt.n	800d7d0 <_dtoa_r+0x968>
 800d7c6:	9907      	ldr	r1, [sp, #28]
 800d7c8:	430b      	orrs	r3, r1
 800d7ca:	9908      	ldr	r1, [sp, #32]
 800d7cc:	430b      	orrs	r3, r1
 800d7ce:	d120      	bne.n	800d812 <_dtoa_r+0x9aa>
 800d7d0:	2a00      	cmp	r2, #0
 800d7d2:	ddee      	ble.n	800d7b2 <_dtoa_r+0x94a>
 800d7d4:	9901      	ldr	r1, [sp, #4]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	4648      	mov	r0, r9
 800d7da:	f000 faf3 	bl	800ddc4 <__lshift>
 800d7de:	4621      	mov	r1, r4
 800d7e0:	9001      	str	r0, [sp, #4]
 800d7e2:	f000 fb5b 	bl	800de9c <__mcmp>
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	dc03      	bgt.n	800d7f2 <_dtoa_r+0x98a>
 800d7ea:	d1e2      	bne.n	800d7b2 <_dtoa_r+0x94a>
 800d7ec:	f01a 0f01 	tst.w	sl, #1
 800d7f0:	d0df      	beq.n	800d7b2 <_dtoa_r+0x94a>
 800d7f2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d7f6:	d1d9      	bne.n	800d7ac <_dtoa_r+0x944>
 800d7f8:	2339      	movs	r3, #57	@ 0x39
 800d7fa:	f88b 3000 	strb.w	r3, [fp]
 800d7fe:	4633      	mov	r3, r6
 800d800:	461e      	mov	r6, r3
 800d802:	3b01      	subs	r3, #1
 800d804:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d808:	2a39      	cmp	r2, #57	@ 0x39
 800d80a:	d052      	beq.n	800d8b2 <_dtoa_r+0xa4a>
 800d80c:	3201      	adds	r2, #1
 800d80e:	701a      	strb	r2, [r3, #0]
 800d810:	e531      	b.n	800d276 <_dtoa_r+0x40e>
 800d812:	2a00      	cmp	r2, #0
 800d814:	dd07      	ble.n	800d826 <_dtoa_r+0x9be>
 800d816:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d81a:	d0ed      	beq.n	800d7f8 <_dtoa_r+0x990>
 800d81c:	f10a 0301 	add.w	r3, sl, #1
 800d820:	f88b 3000 	strb.w	r3, [fp]
 800d824:	e527      	b.n	800d276 <_dtoa_r+0x40e>
 800d826:	9b04      	ldr	r3, [sp, #16]
 800d828:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d82a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d82e:	4293      	cmp	r3, r2
 800d830:	d029      	beq.n	800d886 <_dtoa_r+0xa1e>
 800d832:	9901      	ldr	r1, [sp, #4]
 800d834:	2300      	movs	r3, #0
 800d836:	220a      	movs	r2, #10
 800d838:	4648      	mov	r0, r9
 800d83a:	f000 f91f 	bl	800da7c <__multadd>
 800d83e:	45a8      	cmp	r8, r5
 800d840:	9001      	str	r0, [sp, #4]
 800d842:	f04f 0300 	mov.w	r3, #0
 800d846:	f04f 020a 	mov.w	r2, #10
 800d84a:	4641      	mov	r1, r8
 800d84c:	4648      	mov	r0, r9
 800d84e:	d107      	bne.n	800d860 <_dtoa_r+0x9f8>
 800d850:	f000 f914 	bl	800da7c <__multadd>
 800d854:	4680      	mov	r8, r0
 800d856:	4605      	mov	r5, r0
 800d858:	9b04      	ldr	r3, [sp, #16]
 800d85a:	3301      	adds	r3, #1
 800d85c:	9304      	str	r3, [sp, #16]
 800d85e:	e776      	b.n	800d74e <_dtoa_r+0x8e6>
 800d860:	f000 f90c 	bl	800da7c <__multadd>
 800d864:	4629      	mov	r1, r5
 800d866:	4680      	mov	r8, r0
 800d868:	2300      	movs	r3, #0
 800d86a:	220a      	movs	r2, #10
 800d86c:	4648      	mov	r0, r9
 800d86e:	f000 f905 	bl	800da7c <__multadd>
 800d872:	4605      	mov	r5, r0
 800d874:	e7f0      	b.n	800d858 <_dtoa_r+0x9f0>
 800d876:	f1bb 0f00 	cmp.w	fp, #0
 800d87a:	bfcc      	ite	gt
 800d87c:	465e      	movgt	r6, fp
 800d87e:	2601      	movle	r6, #1
 800d880:	443e      	add	r6, r7
 800d882:	f04f 0800 	mov.w	r8, #0
 800d886:	9901      	ldr	r1, [sp, #4]
 800d888:	2201      	movs	r2, #1
 800d88a:	4648      	mov	r0, r9
 800d88c:	f000 fa9a 	bl	800ddc4 <__lshift>
 800d890:	4621      	mov	r1, r4
 800d892:	9001      	str	r0, [sp, #4]
 800d894:	f000 fb02 	bl	800de9c <__mcmp>
 800d898:	2800      	cmp	r0, #0
 800d89a:	dcb0      	bgt.n	800d7fe <_dtoa_r+0x996>
 800d89c:	d102      	bne.n	800d8a4 <_dtoa_r+0xa3c>
 800d89e:	f01a 0f01 	tst.w	sl, #1
 800d8a2:	d1ac      	bne.n	800d7fe <_dtoa_r+0x996>
 800d8a4:	4633      	mov	r3, r6
 800d8a6:	461e      	mov	r6, r3
 800d8a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d8ac:	2a30      	cmp	r2, #48	@ 0x30
 800d8ae:	d0fa      	beq.n	800d8a6 <_dtoa_r+0xa3e>
 800d8b0:	e4e1      	b.n	800d276 <_dtoa_r+0x40e>
 800d8b2:	429f      	cmp	r7, r3
 800d8b4:	d1a4      	bne.n	800d800 <_dtoa_r+0x998>
 800d8b6:	9b05      	ldr	r3, [sp, #20]
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	9305      	str	r3, [sp, #20]
 800d8bc:	2331      	movs	r3, #49	@ 0x31
 800d8be:	703b      	strb	r3, [r7, #0]
 800d8c0:	e4d9      	b.n	800d276 <_dtoa_r+0x40e>
 800d8c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d8c4:	4f16      	ldr	r7, [pc, #88]	@ (800d920 <_dtoa_r+0xab8>)
 800d8c6:	b11b      	cbz	r3, 800d8d0 <_dtoa_r+0xa68>
 800d8c8:	f107 0308 	add.w	r3, r7, #8
 800d8cc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d8ce:	6013      	str	r3, [r2, #0]
 800d8d0:	4638      	mov	r0, r7
 800d8d2:	b011      	add	sp, #68	@ 0x44
 800d8d4:	ecbd 8b02 	vpop	{d8}
 800d8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8dc:	9b07      	ldr	r3, [sp, #28]
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	f77f ae2c 	ble.w	800d53c <_dtoa_r+0x6d4>
 800d8e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8e8:	2001      	movs	r0, #1
 800d8ea:	e64c      	b.n	800d586 <_dtoa_r+0x71e>
 800d8ec:	f1bb 0f00 	cmp.w	fp, #0
 800d8f0:	f77f aed8 	ble.w	800d6a4 <_dtoa_r+0x83c>
 800d8f4:	463e      	mov	r6, r7
 800d8f6:	9801      	ldr	r0, [sp, #4]
 800d8f8:	4621      	mov	r1, r4
 800d8fa:	f7ff fa2c 	bl	800cd56 <quorem>
 800d8fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d902:	f806 ab01 	strb.w	sl, [r6], #1
 800d906:	1bf2      	subs	r2, r6, r7
 800d908:	4593      	cmp	fp, r2
 800d90a:	ddb4      	ble.n	800d876 <_dtoa_r+0xa0e>
 800d90c:	9901      	ldr	r1, [sp, #4]
 800d90e:	2300      	movs	r3, #0
 800d910:	220a      	movs	r2, #10
 800d912:	4648      	mov	r0, r9
 800d914:	f000 f8b2 	bl	800da7c <__multadd>
 800d918:	9001      	str	r0, [sp, #4]
 800d91a:	e7ec      	b.n	800d8f6 <_dtoa_r+0xa8e>
 800d91c:	0800e9ac 	.word	0x0800e9ac
 800d920:	0800e930 	.word	0x0800e930

0800d924 <_free_r>:
 800d924:	b538      	push	{r3, r4, r5, lr}
 800d926:	4605      	mov	r5, r0
 800d928:	2900      	cmp	r1, #0
 800d92a:	d041      	beq.n	800d9b0 <_free_r+0x8c>
 800d92c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d930:	1f0c      	subs	r4, r1, #4
 800d932:	2b00      	cmp	r3, #0
 800d934:	bfb8      	it	lt
 800d936:	18e4      	addlt	r4, r4, r3
 800d938:	f7fe fc16 	bl	800c168 <__malloc_lock>
 800d93c:	4a1d      	ldr	r2, [pc, #116]	@ (800d9b4 <_free_r+0x90>)
 800d93e:	6813      	ldr	r3, [r2, #0]
 800d940:	b933      	cbnz	r3, 800d950 <_free_r+0x2c>
 800d942:	6063      	str	r3, [r4, #4]
 800d944:	6014      	str	r4, [r2, #0]
 800d946:	4628      	mov	r0, r5
 800d948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d94c:	f7fe bc12 	b.w	800c174 <__malloc_unlock>
 800d950:	42a3      	cmp	r3, r4
 800d952:	d908      	bls.n	800d966 <_free_r+0x42>
 800d954:	6820      	ldr	r0, [r4, #0]
 800d956:	1821      	adds	r1, r4, r0
 800d958:	428b      	cmp	r3, r1
 800d95a:	bf01      	itttt	eq
 800d95c:	6819      	ldreq	r1, [r3, #0]
 800d95e:	685b      	ldreq	r3, [r3, #4]
 800d960:	1809      	addeq	r1, r1, r0
 800d962:	6021      	streq	r1, [r4, #0]
 800d964:	e7ed      	b.n	800d942 <_free_r+0x1e>
 800d966:	461a      	mov	r2, r3
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	b10b      	cbz	r3, 800d970 <_free_r+0x4c>
 800d96c:	42a3      	cmp	r3, r4
 800d96e:	d9fa      	bls.n	800d966 <_free_r+0x42>
 800d970:	6811      	ldr	r1, [r2, #0]
 800d972:	1850      	adds	r0, r2, r1
 800d974:	42a0      	cmp	r0, r4
 800d976:	d10b      	bne.n	800d990 <_free_r+0x6c>
 800d978:	6820      	ldr	r0, [r4, #0]
 800d97a:	4401      	add	r1, r0
 800d97c:	1850      	adds	r0, r2, r1
 800d97e:	4283      	cmp	r3, r0
 800d980:	6011      	str	r1, [r2, #0]
 800d982:	d1e0      	bne.n	800d946 <_free_r+0x22>
 800d984:	6818      	ldr	r0, [r3, #0]
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	6053      	str	r3, [r2, #4]
 800d98a:	4408      	add	r0, r1
 800d98c:	6010      	str	r0, [r2, #0]
 800d98e:	e7da      	b.n	800d946 <_free_r+0x22>
 800d990:	d902      	bls.n	800d998 <_free_r+0x74>
 800d992:	230c      	movs	r3, #12
 800d994:	602b      	str	r3, [r5, #0]
 800d996:	e7d6      	b.n	800d946 <_free_r+0x22>
 800d998:	6820      	ldr	r0, [r4, #0]
 800d99a:	1821      	adds	r1, r4, r0
 800d99c:	428b      	cmp	r3, r1
 800d99e:	bf04      	itt	eq
 800d9a0:	6819      	ldreq	r1, [r3, #0]
 800d9a2:	685b      	ldreq	r3, [r3, #4]
 800d9a4:	6063      	str	r3, [r4, #4]
 800d9a6:	bf04      	itt	eq
 800d9a8:	1809      	addeq	r1, r1, r0
 800d9aa:	6021      	streq	r1, [r4, #0]
 800d9ac:	6054      	str	r4, [r2, #4]
 800d9ae:	e7ca      	b.n	800d946 <_free_r+0x22>
 800d9b0:	bd38      	pop	{r3, r4, r5, pc}
 800d9b2:	bf00      	nop
 800d9b4:	24000cc4 	.word	0x24000cc4

0800d9b8 <_Balloc>:
 800d9b8:	b570      	push	{r4, r5, r6, lr}
 800d9ba:	69c6      	ldr	r6, [r0, #28]
 800d9bc:	4604      	mov	r4, r0
 800d9be:	460d      	mov	r5, r1
 800d9c0:	b976      	cbnz	r6, 800d9e0 <_Balloc+0x28>
 800d9c2:	2010      	movs	r0, #16
 800d9c4:	f7fe fb1e 	bl	800c004 <malloc>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	61e0      	str	r0, [r4, #28]
 800d9cc:	b920      	cbnz	r0, 800d9d8 <_Balloc+0x20>
 800d9ce:	4b18      	ldr	r3, [pc, #96]	@ (800da30 <_Balloc+0x78>)
 800d9d0:	4818      	ldr	r0, [pc, #96]	@ (800da34 <_Balloc+0x7c>)
 800d9d2:	216b      	movs	r1, #107	@ 0x6b
 800d9d4:	f000 fdec 	bl	800e5b0 <__assert_func>
 800d9d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9dc:	6006      	str	r6, [r0, #0]
 800d9de:	60c6      	str	r6, [r0, #12]
 800d9e0:	69e6      	ldr	r6, [r4, #28]
 800d9e2:	68f3      	ldr	r3, [r6, #12]
 800d9e4:	b183      	cbz	r3, 800da08 <_Balloc+0x50>
 800d9e6:	69e3      	ldr	r3, [r4, #28]
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d9ee:	b9b8      	cbnz	r0, 800da20 <_Balloc+0x68>
 800d9f0:	2101      	movs	r1, #1
 800d9f2:	fa01 f605 	lsl.w	r6, r1, r5
 800d9f6:	1d72      	adds	r2, r6, #5
 800d9f8:	0092      	lsls	r2, r2, #2
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	f000 fdf6 	bl	800e5ec <_calloc_r>
 800da00:	b160      	cbz	r0, 800da1c <_Balloc+0x64>
 800da02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da06:	e00e      	b.n	800da26 <_Balloc+0x6e>
 800da08:	2221      	movs	r2, #33	@ 0x21
 800da0a:	2104      	movs	r1, #4
 800da0c:	4620      	mov	r0, r4
 800da0e:	f000 fded 	bl	800e5ec <_calloc_r>
 800da12:	69e3      	ldr	r3, [r4, #28]
 800da14:	60f0      	str	r0, [r6, #12]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d1e4      	bne.n	800d9e6 <_Balloc+0x2e>
 800da1c:	2000      	movs	r0, #0
 800da1e:	bd70      	pop	{r4, r5, r6, pc}
 800da20:	6802      	ldr	r2, [r0, #0]
 800da22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da26:	2300      	movs	r3, #0
 800da28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da2c:	e7f7      	b.n	800da1e <_Balloc+0x66>
 800da2e:	bf00      	nop
 800da30:	0800e93d 	.word	0x0800e93d
 800da34:	0800e9bd 	.word	0x0800e9bd

0800da38 <_Bfree>:
 800da38:	b570      	push	{r4, r5, r6, lr}
 800da3a:	69c6      	ldr	r6, [r0, #28]
 800da3c:	4605      	mov	r5, r0
 800da3e:	460c      	mov	r4, r1
 800da40:	b976      	cbnz	r6, 800da60 <_Bfree+0x28>
 800da42:	2010      	movs	r0, #16
 800da44:	f7fe fade 	bl	800c004 <malloc>
 800da48:	4602      	mov	r2, r0
 800da4a:	61e8      	str	r0, [r5, #28]
 800da4c:	b920      	cbnz	r0, 800da58 <_Bfree+0x20>
 800da4e:	4b09      	ldr	r3, [pc, #36]	@ (800da74 <_Bfree+0x3c>)
 800da50:	4809      	ldr	r0, [pc, #36]	@ (800da78 <_Bfree+0x40>)
 800da52:	218f      	movs	r1, #143	@ 0x8f
 800da54:	f000 fdac 	bl	800e5b0 <__assert_func>
 800da58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da5c:	6006      	str	r6, [r0, #0]
 800da5e:	60c6      	str	r6, [r0, #12]
 800da60:	b13c      	cbz	r4, 800da72 <_Bfree+0x3a>
 800da62:	69eb      	ldr	r3, [r5, #28]
 800da64:	6862      	ldr	r2, [r4, #4]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da6c:	6021      	str	r1, [r4, #0]
 800da6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da72:	bd70      	pop	{r4, r5, r6, pc}
 800da74:	0800e93d 	.word	0x0800e93d
 800da78:	0800e9bd 	.word	0x0800e9bd

0800da7c <__multadd>:
 800da7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da80:	690d      	ldr	r5, [r1, #16]
 800da82:	4607      	mov	r7, r0
 800da84:	460c      	mov	r4, r1
 800da86:	461e      	mov	r6, r3
 800da88:	f101 0c14 	add.w	ip, r1, #20
 800da8c:	2000      	movs	r0, #0
 800da8e:	f8dc 3000 	ldr.w	r3, [ip]
 800da92:	b299      	uxth	r1, r3
 800da94:	fb02 6101 	mla	r1, r2, r1, r6
 800da98:	0c1e      	lsrs	r6, r3, #16
 800da9a:	0c0b      	lsrs	r3, r1, #16
 800da9c:	fb02 3306 	mla	r3, r2, r6, r3
 800daa0:	b289      	uxth	r1, r1
 800daa2:	3001      	adds	r0, #1
 800daa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800daa8:	4285      	cmp	r5, r0
 800daaa:	f84c 1b04 	str.w	r1, [ip], #4
 800daae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dab2:	dcec      	bgt.n	800da8e <__multadd+0x12>
 800dab4:	b30e      	cbz	r6, 800dafa <__multadd+0x7e>
 800dab6:	68a3      	ldr	r3, [r4, #8]
 800dab8:	42ab      	cmp	r3, r5
 800daba:	dc19      	bgt.n	800daf0 <__multadd+0x74>
 800dabc:	6861      	ldr	r1, [r4, #4]
 800dabe:	4638      	mov	r0, r7
 800dac0:	3101      	adds	r1, #1
 800dac2:	f7ff ff79 	bl	800d9b8 <_Balloc>
 800dac6:	4680      	mov	r8, r0
 800dac8:	b928      	cbnz	r0, 800dad6 <__multadd+0x5a>
 800daca:	4602      	mov	r2, r0
 800dacc:	4b0c      	ldr	r3, [pc, #48]	@ (800db00 <__multadd+0x84>)
 800dace:	480d      	ldr	r0, [pc, #52]	@ (800db04 <__multadd+0x88>)
 800dad0:	21ba      	movs	r1, #186	@ 0xba
 800dad2:	f000 fd6d 	bl	800e5b0 <__assert_func>
 800dad6:	6922      	ldr	r2, [r4, #16]
 800dad8:	3202      	adds	r2, #2
 800dada:	f104 010c 	add.w	r1, r4, #12
 800dade:	0092      	lsls	r2, r2, #2
 800dae0:	300c      	adds	r0, #12
 800dae2:	f7ff f92a 	bl	800cd3a <memcpy>
 800dae6:	4621      	mov	r1, r4
 800dae8:	4638      	mov	r0, r7
 800daea:	f7ff ffa5 	bl	800da38 <_Bfree>
 800daee:	4644      	mov	r4, r8
 800daf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800daf4:	3501      	adds	r5, #1
 800daf6:	615e      	str	r6, [r3, #20]
 800daf8:	6125      	str	r5, [r4, #16]
 800dafa:	4620      	mov	r0, r4
 800dafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db00:	0800e9ac 	.word	0x0800e9ac
 800db04:	0800e9bd 	.word	0x0800e9bd

0800db08 <__hi0bits>:
 800db08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800db0c:	4603      	mov	r3, r0
 800db0e:	bf36      	itet	cc
 800db10:	0403      	lslcc	r3, r0, #16
 800db12:	2000      	movcs	r0, #0
 800db14:	2010      	movcc	r0, #16
 800db16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db1a:	bf3c      	itt	cc
 800db1c:	021b      	lslcc	r3, r3, #8
 800db1e:	3008      	addcc	r0, #8
 800db20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db24:	bf3c      	itt	cc
 800db26:	011b      	lslcc	r3, r3, #4
 800db28:	3004      	addcc	r0, #4
 800db2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db2e:	bf3c      	itt	cc
 800db30:	009b      	lslcc	r3, r3, #2
 800db32:	3002      	addcc	r0, #2
 800db34:	2b00      	cmp	r3, #0
 800db36:	db05      	blt.n	800db44 <__hi0bits+0x3c>
 800db38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800db3c:	f100 0001 	add.w	r0, r0, #1
 800db40:	bf08      	it	eq
 800db42:	2020      	moveq	r0, #32
 800db44:	4770      	bx	lr

0800db46 <__lo0bits>:
 800db46:	6803      	ldr	r3, [r0, #0]
 800db48:	4602      	mov	r2, r0
 800db4a:	f013 0007 	ands.w	r0, r3, #7
 800db4e:	d00b      	beq.n	800db68 <__lo0bits+0x22>
 800db50:	07d9      	lsls	r1, r3, #31
 800db52:	d421      	bmi.n	800db98 <__lo0bits+0x52>
 800db54:	0798      	lsls	r0, r3, #30
 800db56:	bf49      	itett	mi
 800db58:	085b      	lsrmi	r3, r3, #1
 800db5a:	089b      	lsrpl	r3, r3, #2
 800db5c:	2001      	movmi	r0, #1
 800db5e:	6013      	strmi	r3, [r2, #0]
 800db60:	bf5c      	itt	pl
 800db62:	6013      	strpl	r3, [r2, #0]
 800db64:	2002      	movpl	r0, #2
 800db66:	4770      	bx	lr
 800db68:	b299      	uxth	r1, r3
 800db6a:	b909      	cbnz	r1, 800db70 <__lo0bits+0x2a>
 800db6c:	0c1b      	lsrs	r3, r3, #16
 800db6e:	2010      	movs	r0, #16
 800db70:	b2d9      	uxtb	r1, r3
 800db72:	b909      	cbnz	r1, 800db78 <__lo0bits+0x32>
 800db74:	3008      	adds	r0, #8
 800db76:	0a1b      	lsrs	r3, r3, #8
 800db78:	0719      	lsls	r1, r3, #28
 800db7a:	bf04      	itt	eq
 800db7c:	091b      	lsreq	r3, r3, #4
 800db7e:	3004      	addeq	r0, #4
 800db80:	0799      	lsls	r1, r3, #30
 800db82:	bf04      	itt	eq
 800db84:	089b      	lsreq	r3, r3, #2
 800db86:	3002      	addeq	r0, #2
 800db88:	07d9      	lsls	r1, r3, #31
 800db8a:	d403      	bmi.n	800db94 <__lo0bits+0x4e>
 800db8c:	085b      	lsrs	r3, r3, #1
 800db8e:	f100 0001 	add.w	r0, r0, #1
 800db92:	d003      	beq.n	800db9c <__lo0bits+0x56>
 800db94:	6013      	str	r3, [r2, #0]
 800db96:	4770      	bx	lr
 800db98:	2000      	movs	r0, #0
 800db9a:	4770      	bx	lr
 800db9c:	2020      	movs	r0, #32
 800db9e:	4770      	bx	lr

0800dba0 <__i2b>:
 800dba0:	b510      	push	{r4, lr}
 800dba2:	460c      	mov	r4, r1
 800dba4:	2101      	movs	r1, #1
 800dba6:	f7ff ff07 	bl	800d9b8 <_Balloc>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	b928      	cbnz	r0, 800dbba <__i2b+0x1a>
 800dbae:	4b05      	ldr	r3, [pc, #20]	@ (800dbc4 <__i2b+0x24>)
 800dbb0:	4805      	ldr	r0, [pc, #20]	@ (800dbc8 <__i2b+0x28>)
 800dbb2:	f240 1145 	movw	r1, #325	@ 0x145
 800dbb6:	f000 fcfb 	bl	800e5b0 <__assert_func>
 800dbba:	2301      	movs	r3, #1
 800dbbc:	6144      	str	r4, [r0, #20]
 800dbbe:	6103      	str	r3, [r0, #16]
 800dbc0:	bd10      	pop	{r4, pc}
 800dbc2:	bf00      	nop
 800dbc4:	0800e9ac 	.word	0x0800e9ac
 800dbc8:	0800e9bd 	.word	0x0800e9bd

0800dbcc <__multiply>:
 800dbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd0:	4617      	mov	r7, r2
 800dbd2:	690a      	ldr	r2, [r1, #16]
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	bfa8      	it	ge
 800dbda:	463b      	movge	r3, r7
 800dbdc:	4689      	mov	r9, r1
 800dbde:	bfa4      	itt	ge
 800dbe0:	460f      	movge	r7, r1
 800dbe2:	4699      	movge	r9, r3
 800dbe4:	693d      	ldr	r5, [r7, #16]
 800dbe6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	6879      	ldr	r1, [r7, #4]
 800dbee:	eb05 060a 	add.w	r6, r5, sl
 800dbf2:	42b3      	cmp	r3, r6
 800dbf4:	b085      	sub	sp, #20
 800dbf6:	bfb8      	it	lt
 800dbf8:	3101      	addlt	r1, #1
 800dbfa:	f7ff fedd 	bl	800d9b8 <_Balloc>
 800dbfe:	b930      	cbnz	r0, 800dc0e <__multiply+0x42>
 800dc00:	4602      	mov	r2, r0
 800dc02:	4b41      	ldr	r3, [pc, #260]	@ (800dd08 <__multiply+0x13c>)
 800dc04:	4841      	ldr	r0, [pc, #260]	@ (800dd0c <__multiply+0x140>)
 800dc06:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dc0a:	f000 fcd1 	bl	800e5b0 <__assert_func>
 800dc0e:	f100 0414 	add.w	r4, r0, #20
 800dc12:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800dc16:	4623      	mov	r3, r4
 800dc18:	2200      	movs	r2, #0
 800dc1a:	4573      	cmp	r3, lr
 800dc1c:	d320      	bcc.n	800dc60 <__multiply+0x94>
 800dc1e:	f107 0814 	add.w	r8, r7, #20
 800dc22:	f109 0114 	add.w	r1, r9, #20
 800dc26:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800dc2a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800dc2e:	9302      	str	r3, [sp, #8]
 800dc30:	1beb      	subs	r3, r5, r7
 800dc32:	3b15      	subs	r3, #21
 800dc34:	f023 0303 	bic.w	r3, r3, #3
 800dc38:	3304      	adds	r3, #4
 800dc3a:	3715      	adds	r7, #21
 800dc3c:	42bd      	cmp	r5, r7
 800dc3e:	bf38      	it	cc
 800dc40:	2304      	movcc	r3, #4
 800dc42:	9301      	str	r3, [sp, #4]
 800dc44:	9b02      	ldr	r3, [sp, #8]
 800dc46:	9103      	str	r1, [sp, #12]
 800dc48:	428b      	cmp	r3, r1
 800dc4a:	d80c      	bhi.n	800dc66 <__multiply+0x9a>
 800dc4c:	2e00      	cmp	r6, #0
 800dc4e:	dd03      	ble.n	800dc58 <__multiply+0x8c>
 800dc50:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d055      	beq.n	800dd04 <__multiply+0x138>
 800dc58:	6106      	str	r6, [r0, #16]
 800dc5a:	b005      	add	sp, #20
 800dc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc60:	f843 2b04 	str.w	r2, [r3], #4
 800dc64:	e7d9      	b.n	800dc1a <__multiply+0x4e>
 800dc66:	f8b1 a000 	ldrh.w	sl, [r1]
 800dc6a:	f1ba 0f00 	cmp.w	sl, #0
 800dc6e:	d01f      	beq.n	800dcb0 <__multiply+0xe4>
 800dc70:	46c4      	mov	ip, r8
 800dc72:	46a1      	mov	r9, r4
 800dc74:	2700      	movs	r7, #0
 800dc76:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dc7a:	f8d9 3000 	ldr.w	r3, [r9]
 800dc7e:	fa1f fb82 	uxth.w	fp, r2
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	fb0a 330b 	mla	r3, sl, fp, r3
 800dc88:	443b      	add	r3, r7
 800dc8a:	f8d9 7000 	ldr.w	r7, [r9]
 800dc8e:	0c12      	lsrs	r2, r2, #16
 800dc90:	0c3f      	lsrs	r7, r7, #16
 800dc92:	fb0a 7202 	mla	r2, sl, r2, r7
 800dc96:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dca0:	4565      	cmp	r5, ip
 800dca2:	f849 3b04 	str.w	r3, [r9], #4
 800dca6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800dcaa:	d8e4      	bhi.n	800dc76 <__multiply+0xaa>
 800dcac:	9b01      	ldr	r3, [sp, #4]
 800dcae:	50e7      	str	r7, [r4, r3]
 800dcb0:	9b03      	ldr	r3, [sp, #12]
 800dcb2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dcb6:	3104      	adds	r1, #4
 800dcb8:	f1b9 0f00 	cmp.w	r9, #0
 800dcbc:	d020      	beq.n	800dd00 <__multiply+0x134>
 800dcbe:	6823      	ldr	r3, [r4, #0]
 800dcc0:	4647      	mov	r7, r8
 800dcc2:	46a4      	mov	ip, r4
 800dcc4:	f04f 0a00 	mov.w	sl, #0
 800dcc8:	f8b7 b000 	ldrh.w	fp, [r7]
 800dccc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800dcd0:	fb09 220b 	mla	r2, r9, fp, r2
 800dcd4:	4452      	add	r2, sl
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcdc:	f84c 3b04 	str.w	r3, [ip], #4
 800dce0:	f857 3b04 	ldr.w	r3, [r7], #4
 800dce4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dce8:	f8bc 3000 	ldrh.w	r3, [ip]
 800dcec:	fb09 330a 	mla	r3, r9, sl, r3
 800dcf0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800dcf4:	42bd      	cmp	r5, r7
 800dcf6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dcfa:	d8e5      	bhi.n	800dcc8 <__multiply+0xfc>
 800dcfc:	9a01      	ldr	r2, [sp, #4]
 800dcfe:	50a3      	str	r3, [r4, r2]
 800dd00:	3404      	adds	r4, #4
 800dd02:	e79f      	b.n	800dc44 <__multiply+0x78>
 800dd04:	3e01      	subs	r6, #1
 800dd06:	e7a1      	b.n	800dc4c <__multiply+0x80>
 800dd08:	0800e9ac 	.word	0x0800e9ac
 800dd0c:	0800e9bd 	.word	0x0800e9bd

0800dd10 <__pow5mult>:
 800dd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd14:	4615      	mov	r5, r2
 800dd16:	f012 0203 	ands.w	r2, r2, #3
 800dd1a:	4607      	mov	r7, r0
 800dd1c:	460e      	mov	r6, r1
 800dd1e:	d007      	beq.n	800dd30 <__pow5mult+0x20>
 800dd20:	4c25      	ldr	r4, [pc, #148]	@ (800ddb8 <__pow5mult+0xa8>)
 800dd22:	3a01      	subs	r2, #1
 800dd24:	2300      	movs	r3, #0
 800dd26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd2a:	f7ff fea7 	bl	800da7c <__multadd>
 800dd2e:	4606      	mov	r6, r0
 800dd30:	10ad      	asrs	r5, r5, #2
 800dd32:	d03d      	beq.n	800ddb0 <__pow5mult+0xa0>
 800dd34:	69fc      	ldr	r4, [r7, #28]
 800dd36:	b97c      	cbnz	r4, 800dd58 <__pow5mult+0x48>
 800dd38:	2010      	movs	r0, #16
 800dd3a:	f7fe f963 	bl	800c004 <malloc>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	61f8      	str	r0, [r7, #28]
 800dd42:	b928      	cbnz	r0, 800dd50 <__pow5mult+0x40>
 800dd44:	4b1d      	ldr	r3, [pc, #116]	@ (800ddbc <__pow5mult+0xac>)
 800dd46:	481e      	ldr	r0, [pc, #120]	@ (800ddc0 <__pow5mult+0xb0>)
 800dd48:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dd4c:	f000 fc30 	bl	800e5b0 <__assert_func>
 800dd50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd54:	6004      	str	r4, [r0, #0]
 800dd56:	60c4      	str	r4, [r0, #12]
 800dd58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dd5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd60:	b94c      	cbnz	r4, 800dd76 <__pow5mult+0x66>
 800dd62:	f240 2171 	movw	r1, #625	@ 0x271
 800dd66:	4638      	mov	r0, r7
 800dd68:	f7ff ff1a 	bl	800dba0 <__i2b>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd72:	4604      	mov	r4, r0
 800dd74:	6003      	str	r3, [r0, #0]
 800dd76:	f04f 0900 	mov.w	r9, #0
 800dd7a:	07eb      	lsls	r3, r5, #31
 800dd7c:	d50a      	bpl.n	800dd94 <__pow5mult+0x84>
 800dd7e:	4631      	mov	r1, r6
 800dd80:	4622      	mov	r2, r4
 800dd82:	4638      	mov	r0, r7
 800dd84:	f7ff ff22 	bl	800dbcc <__multiply>
 800dd88:	4631      	mov	r1, r6
 800dd8a:	4680      	mov	r8, r0
 800dd8c:	4638      	mov	r0, r7
 800dd8e:	f7ff fe53 	bl	800da38 <_Bfree>
 800dd92:	4646      	mov	r6, r8
 800dd94:	106d      	asrs	r5, r5, #1
 800dd96:	d00b      	beq.n	800ddb0 <__pow5mult+0xa0>
 800dd98:	6820      	ldr	r0, [r4, #0]
 800dd9a:	b938      	cbnz	r0, 800ddac <__pow5mult+0x9c>
 800dd9c:	4622      	mov	r2, r4
 800dd9e:	4621      	mov	r1, r4
 800dda0:	4638      	mov	r0, r7
 800dda2:	f7ff ff13 	bl	800dbcc <__multiply>
 800dda6:	6020      	str	r0, [r4, #0]
 800dda8:	f8c0 9000 	str.w	r9, [r0]
 800ddac:	4604      	mov	r4, r0
 800ddae:	e7e4      	b.n	800dd7a <__pow5mult+0x6a>
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddb6:	bf00      	nop
 800ddb8:	0800ea70 	.word	0x0800ea70
 800ddbc:	0800e93d 	.word	0x0800e93d
 800ddc0:	0800e9bd 	.word	0x0800e9bd

0800ddc4 <__lshift>:
 800ddc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddc8:	460c      	mov	r4, r1
 800ddca:	6849      	ldr	r1, [r1, #4]
 800ddcc:	6923      	ldr	r3, [r4, #16]
 800ddce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ddd2:	68a3      	ldr	r3, [r4, #8]
 800ddd4:	4607      	mov	r7, r0
 800ddd6:	4691      	mov	r9, r2
 800ddd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dddc:	f108 0601 	add.w	r6, r8, #1
 800dde0:	42b3      	cmp	r3, r6
 800dde2:	db0b      	blt.n	800ddfc <__lshift+0x38>
 800dde4:	4638      	mov	r0, r7
 800dde6:	f7ff fde7 	bl	800d9b8 <_Balloc>
 800ddea:	4605      	mov	r5, r0
 800ddec:	b948      	cbnz	r0, 800de02 <__lshift+0x3e>
 800ddee:	4602      	mov	r2, r0
 800ddf0:	4b28      	ldr	r3, [pc, #160]	@ (800de94 <__lshift+0xd0>)
 800ddf2:	4829      	ldr	r0, [pc, #164]	@ (800de98 <__lshift+0xd4>)
 800ddf4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ddf8:	f000 fbda 	bl	800e5b0 <__assert_func>
 800ddfc:	3101      	adds	r1, #1
 800ddfe:	005b      	lsls	r3, r3, #1
 800de00:	e7ee      	b.n	800dde0 <__lshift+0x1c>
 800de02:	2300      	movs	r3, #0
 800de04:	f100 0114 	add.w	r1, r0, #20
 800de08:	f100 0210 	add.w	r2, r0, #16
 800de0c:	4618      	mov	r0, r3
 800de0e:	4553      	cmp	r3, sl
 800de10:	db33      	blt.n	800de7a <__lshift+0xb6>
 800de12:	6920      	ldr	r0, [r4, #16]
 800de14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de18:	f104 0314 	add.w	r3, r4, #20
 800de1c:	f019 091f 	ands.w	r9, r9, #31
 800de20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de28:	d02b      	beq.n	800de82 <__lshift+0xbe>
 800de2a:	f1c9 0e20 	rsb	lr, r9, #32
 800de2e:	468a      	mov	sl, r1
 800de30:	2200      	movs	r2, #0
 800de32:	6818      	ldr	r0, [r3, #0]
 800de34:	fa00 f009 	lsl.w	r0, r0, r9
 800de38:	4310      	orrs	r0, r2
 800de3a:	f84a 0b04 	str.w	r0, [sl], #4
 800de3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800de42:	459c      	cmp	ip, r3
 800de44:	fa22 f20e 	lsr.w	r2, r2, lr
 800de48:	d8f3      	bhi.n	800de32 <__lshift+0x6e>
 800de4a:	ebac 0304 	sub.w	r3, ip, r4
 800de4e:	3b15      	subs	r3, #21
 800de50:	f023 0303 	bic.w	r3, r3, #3
 800de54:	3304      	adds	r3, #4
 800de56:	f104 0015 	add.w	r0, r4, #21
 800de5a:	4560      	cmp	r0, ip
 800de5c:	bf88      	it	hi
 800de5e:	2304      	movhi	r3, #4
 800de60:	50ca      	str	r2, [r1, r3]
 800de62:	b10a      	cbz	r2, 800de68 <__lshift+0xa4>
 800de64:	f108 0602 	add.w	r6, r8, #2
 800de68:	3e01      	subs	r6, #1
 800de6a:	4638      	mov	r0, r7
 800de6c:	612e      	str	r6, [r5, #16]
 800de6e:	4621      	mov	r1, r4
 800de70:	f7ff fde2 	bl	800da38 <_Bfree>
 800de74:	4628      	mov	r0, r5
 800de76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de7a:	f842 0f04 	str.w	r0, [r2, #4]!
 800de7e:	3301      	adds	r3, #1
 800de80:	e7c5      	b.n	800de0e <__lshift+0x4a>
 800de82:	3904      	subs	r1, #4
 800de84:	f853 2b04 	ldr.w	r2, [r3], #4
 800de88:	f841 2f04 	str.w	r2, [r1, #4]!
 800de8c:	459c      	cmp	ip, r3
 800de8e:	d8f9      	bhi.n	800de84 <__lshift+0xc0>
 800de90:	e7ea      	b.n	800de68 <__lshift+0xa4>
 800de92:	bf00      	nop
 800de94:	0800e9ac 	.word	0x0800e9ac
 800de98:	0800e9bd 	.word	0x0800e9bd

0800de9c <__mcmp>:
 800de9c:	690a      	ldr	r2, [r1, #16]
 800de9e:	4603      	mov	r3, r0
 800dea0:	6900      	ldr	r0, [r0, #16]
 800dea2:	1a80      	subs	r0, r0, r2
 800dea4:	b530      	push	{r4, r5, lr}
 800dea6:	d10e      	bne.n	800dec6 <__mcmp+0x2a>
 800dea8:	3314      	adds	r3, #20
 800deaa:	3114      	adds	r1, #20
 800deac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800deb0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800deb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800deb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800debc:	4295      	cmp	r5, r2
 800debe:	d003      	beq.n	800dec8 <__mcmp+0x2c>
 800dec0:	d205      	bcs.n	800dece <__mcmp+0x32>
 800dec2:	f04f 30ff 	mov.w	r0, #4294967295
 800dec6:	bd30      	pop	{r4, r5, pc}
 800dec8:	42a3      	cmp	r3, r4
 800deca:	d3f3      	bcc.n	800deb4 <__mcmp+0x18>
 800decc:	e7fb      	b.n	800dec6 <__mcmp+0x2a>
 800dece:	2001      	movs	r0, #1
 800ded0:	e7f9      	b.n	800dec6 <__mcmp+0x2a>
	...

0800ded4 <__mdiff>:
 800ded4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded8:	4689      	mov	r9, r1
 800deda:	4606      	mov	r6, r0
 800dedc:	4611      	mov	r1, r2
 800dede:	4648      	mov	r0, r9
 800dee0:	4614      	mov	r4, r2
 800dee2:	f7ff ffdb 	bl	800de9c <__mcmp>
 800dee6:	1e05      	subs	r5, r0, #0
 800dee8:	d112      	bne.n	800df10 <__mdiff+0x3c>
 800deea:	4629      	mov	r1, r5
 800deec:	4630      	mov	r0, r6
 800deee:	f7ff fd63 	bl	800d9b8 <_Balloc>
 800def2:	4602      	mov	r2, r0
 800def4:	b928      	cbnz	r0, 800df02 <__mdiff+0x2e>
 800def6:	4b3f      	ldr	r3, [pc, #252]	@ (800dff4 <__mdiff+0x120>)
 800def8:	f240 2137 	movw	r1, #567	@ 0x237
 800defc:	483e      	ldr	r0, [pc, #248]	@ (800dff8 <__mdiff+0x124>)
 800defe:	f000 fb57 	bl	800e5b0 <__assert_func>
 800df02:	2301      	movs	r3, #1
 800df04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df08:	4610      	mov	r0, r2
 800df0a:	b003      	add	sp, #12
 800df0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df10:	bfbc      	itt	lt
 800df12:	464b      	movlt	r3, r9
 800df14:	46a1      	movlt	r9, r4
 800df16:	4630      	mov	r0, r6
 800df18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800df1c:	bfba      	itte	lt
 800df1e:	461c      	movlt	r4, r3
 800df20:	2501      	movlt	r5, #1
 800df22:	2500      	movge	r5, #0
 800df24:	f7ff fd48 	bl	800d9b8 <_Balloc>
 800df28:	4602      	mov	r2, r0
 800df2a:	b918      	cbnz	r0, 800df34 <__mdiff+0x60>
 800df2c:	4b31      	ldr	r3, [pc, #196]	@ (800dff4 <__mdiff+0x120>)
 800df2e:	f240 2145 	movw	r1, #581	@ 0x245
 800df32:	e7e3      	b.n	800defc <__mdiff+0x28>
 800df34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800df38:	6926      	ldr	r6, [r4, #16]
 800df3a:	60c5      	str	r5, [r0, #12]
 800df3c:	f109 0310 	add.w	r3, r9, #16
 800df40:	f109 0514 	add.w	r5, r9, #20
 800df44:	f104 0e14 	add.w	lr, r4, #20
 800df48:	f100 0b14 	add.w	fp, r0, #20
 800df4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800df50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800df54:	9301      	str	r3, [sp, #4]
 800df56:	46d9      	mov	r9, fp
 800df58:	f04f 0c00 	mov.w	ip, #0
 800df5c:	9b01      	ldr	r3, [sp, #4]
 800df5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800df62:	f853 af04 	ldr.w	sl, [r3, #4]!
 800df66:	9301      	str	r3, [sp, #4]
 800df68:	fa1f f38a 	uxth.w	r3, sl
 800df6c:	4619      	mov	r1, r3
 800df6e:	b283      	uxth	r3, r0
 800df70:	1acb      	subs	r3, r1, r3
 800df72:	0c00      	lsrs	r0, r0, #16
 800df74:	4463      	add	r3, ip
 800df76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800df7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800df7e:	b29b      	uxth	r3, r3
 800df80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800df84:	4576      	cmp	r6, lr
 800df86:	f849 3b04 	str.w	r3, [r9], #4
 800df8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800df8e:	d8e5      	bhi.n	800df5c <__mdiff+0x88>
 800df90:	1b33      	subs	r3, r6, r4
 800df92:	3b15      	subs	r3, #21
 800df94:	f023 0303 	bic.w	r3, r3, #3
 800df98:	3415      	adds	r4, #21
 800df9a:	3304      	adds	r3, #4
 800df9c:	42a6      	cmp	r6, r4
 800df9e:	bf38      	it	cc
 800dfa0:	2304      	movcc	r3, #4
 800dfa2:	441d      	add	r5, r3
 800dfa4:	445b      	add	r3, fp
 800dfa6:	461e      	mov	r6, r3
 800dfa8:	462c      	mov	r4, r5
 800dfaa:	4544      	cmp	r4, r8
 800dfac:	d30e      	bcc.n	800dfcc <__mdiff+0xf8>
 800dfae:	f108 0103 	add.w	r1, r8, #3
 800dfb2:	1b49      	subs	r1, r1, r5
 800dfb4:	f021 0103 	bic.w	r1, r1, #3
 800dfb8:	3d03      	subs	r5, #3
 800dfba:	45a8      	cmp	r8, r5
 800dfbc:	bf38      	it	cc
 800dfbe:	2100      	movcc	r1, #0
 800dfc0:	440b      	add	r3, r1
 800dfc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dfc6:	b191      	cbz	r1, 800dfee <__mdiff+0x11a>
 800dfc8:	6117      	str	r7, [r2, #16]
 800dfca:	e79d      	b.n	800df08 <__mdiff+0x34>
 800dfcc:	f854 1b04 	ldr.w	r1, [r4], #4
 800dfd0:	46e6      	mov	lr, ip
 800dfd2:	0c08      	lsrs	r0, r1, #16
 800dfd4:	fa1c fc81 	uxtah	ip, ip, r1
 800dfd8:	4471      	add	r1, lr
 800dfda:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dfde:	b289      	uxth	r1, r1
 800dfe0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dfe4:	f846 1b04 	str.w	r1, [r6], #4
 800dfe8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dfec:	e7dd      	b.n	800dfaa <__mdiff+0xd6>
 800dfee:	3f01      	subs	r7, #1
 800dff0:	e7e7      	b.n	800dfc2 <__mdiff+0xee>
 800dff2:	bf00      	nop
 800dff4:	0800e9ac 	.word	0x0800e9ac
 800dff8:	0800e9bd 	.word	0x0800e9bd

0800dffc <__d2b>:
 800dffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e000:	460f      	mov	r7, r1
 800e002:	2101      	movs	r1, #1
 800e004:	ec59 8b10 	vmov	r8, r9, d0
 800e008:	4616      	mov	r6, r2
 800e00a:	f7ff fcd5 	bl	800d9b8 <_Balloc>
 800e00e:	4604      	mov	r4, r0
 800e010:	b930      	cbnz	r0, 800e020 <__d2b+0x24>
 800e012:	4602      	mov	r2, r0
 800e014:	4b23      	ldr	r3, [pc, #140]	@ (800e0a4 <__d2b+0xa8>)
 800e016:	4824      	ldr	r0, [pc, #144]	@ (800e0a8 <__d2b+0xac>)
 800e018:	f240 310f 	movw	r1, #783	@ 0x30f
 800e01c:	f000 fac8 	bl	800e5b0 <__assert_func>
 800e020:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e024:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e028:	b10d      	cbz	r5, 800e02e <__d2b+0x32>
 800e02a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e02e:	9301      	str	r3, [sp, #4]
 800e030:	f1b8 0300 	subs.w	r3, r8, #0
 800e034:	d023      	beq.n	800e07e <__d2b+0x82>
 800e036:	4668      	mov	r0, sp
 800e038:	9300      	str	r3, [sp, #0]
 800e03a:	f7ff fd84 	bl	800db46 <__lo0bits>
 800e03e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e042:	b1d0      	cbz	r0, 800e07a <__d2b+0x7e>
 800e044:	f1c0 0320 	rsb	r3, r0, #32
 800e048:	fa02 f303 	lsl.w	r3, r2, r3
 800e04c:	430b      	orrs	r3, r1
 800e04e:	40c2      	lsrs	r2, r0
 800e050:	6163      	str	r3, [r4, #20]
 800e052:	9201      	str	r2, [sp, #4]
 800e054:	9b01      	ldr	r3, [sp, #4]
 800e056:	61a3      	str	r3, [r4, #24]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	bf0c      	ite	eq
 800e05c:	2201      	moveq	r2, #1
 800e05e:	2202      	movne	r2, #2
 800e060:	6122      	str	r2, [r4, #16]
 800e062:	b1a5      	cbz	r5, 800e08e <__d2b+0x92>
 800e064:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e068:	4405      	add	r5, r0
 800e06a:	603d      	str	r5, [r7, #0]
 800e06c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e070:	6030      	str	r0, [r6, #0]
 800e072:	4620      	mov	r0, r4
 800e074:	b003      	add	sp, #12
 800e076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e07a:	6161      	str	r1, [r4, #20]
 800e07c:	e7ea      	b.n	800e054 <__d2b+0x58>
 800e07e:	a801      	add	r0, sp, #4
 800e080:	f7ff fd61 	bl	800db46 <__lo0bits>
 800e084:	9b01      	ldr	r3, [sp, #4]
 800e086:	6163      	str	r3, [r4, #20]
 800e088:	3020      	adds	r0, #32
 800e08a:	2201      	movs	r2, #1
 800e08c:	e7e8      	b.n	800e060 <__d2b+0x64>
 800e08e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e092:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e096:	6038      	str	r0, [r7, #0]
 800e098:	6918      	ldr	r0, [r3, #16]
 800e09a:	f7ff fd35 	bl	800db08 <__hi0bits>
 800e09e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e0a2:	e7e5      	b.n	800e070 <__d2b+0x74>
 800e0a4:	0800e9ac 	.word	0x0800e9ac
 800e0a8:	0800e9bd 	.word	0x0800e9bd

0800e0ac <__sfputc_r>:
 800e0ac:	6893      	ldr	r3, [r2, #8]
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	b410      	push	{r4}
 800e0b4:	6093      	str	r3, [r2, #8]
 800e0b6:	da08      	bge.n	800e0ca <__sfputc_r+0x1e>
 800e0b8:	6994      	ldr	r4, [r2, #24]
 800e0ba:	42a3      	cmp	r3, r4
 800e0bc:	db01      	blt.n	800e0c2 <__sfputc_r+0x16>
 800e0be:	290a      	cmp	r1, #10
 800e0c0:	d103      	bne.n	800e0ca <__sfputc_r+0x1e>
 800e0c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0c6:	f000 b9df 	b.w	800e488 <__swbuf_r>
 800e0ca:	6813      	ldr	r3, [r2, #0]
 800e0cc:	1c58      	adds	r0, r3, #1
 800e0ce:	6010      	str	r0, [r2, #0]
 800e0d0:	7019      	strb	r1, [r3, #0]
 800e0d2:	4608      	mov	r0, r1
 800e0d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0d8:	4770      	bx	lr

0800e0da <__sfputs_r>:
 800e0da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0dc:	4606      	mov	r6, r0
 800e0de:	460f      	mov	r7, r1
 800e0e0:	4614      	mov	r4, r2
 800e0e2:	18d5      	adds	r5, r2, r3
 800e0e4:	42ac      	cmp	r4, r5
 800e0e6:	d101      	bne.n	800e0ec <__sfputs_r+0x12>
 800e0e8:	2000      	movs	r0, #0
 800e0ea:	e007      	b.n	800e0fc <__sfputs_r+0x22>
 800e0ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0f0:	463a      	mov	r2, r7
 800e0f2:	4630      	mov	r0, r6
 800e0f4:	f7ff ffda 	bl	800e0ac <__sfputc_r>
 800e0f8:	1c43      	adds	r3, r0, #1
 800e0fa:	d1f3      	bne.n	800e0e4 <__sfputs_r+0xa>
 800e0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e100 <_vfiprintf_r>:
 800e100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e104:	460d      	mov	r5, r1
 800e106:	b09d      	sub	sp, #116	@ 0x74
 800e108:	4614      	mov	r4, r2
 800e10a:	4698      	mov	r8, r3
 800e10c:	4606      	mov	r6, r0
 800e10e:	b118      	cbz	r0, 800e118 <_vfiprintf_r+0x18>
 800e110:	6a03      	ldr	r3, [r0, #32]
 800e112:	b90b      	cbnz	r3, 800e118 <_vfiprintf_r+0x18>
 800e114:	f7fe fcf6 	bl	800cb04 <__sinit>
 800e118:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e11a:	07d9      	lsls	r1, r3, #31
 800e11c:	d405      	bmi.n	800e12a <_vfiprintf_r+0x2a>
 800e11e:	89ab      	ldrh	r3, [r5, #12]
 800e120:	059a      	lsls	r2, r3, #22
 800e122:	d402      	bmi.n	800e12a <_vfiprintf_r+0x2a>
 800e124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e126:	f7fe fe06 	bl	800cd36 <__retarget_lock_acquire_recursive>
 800e12a:	89ab      	ldrh	r3, [r5, #12]
 800e12c:	071b      	lsls	r3, r3, #28
 800e12e:	d501      	bpl.n	800e134 <_vfiprintf_r+0x34>
 800e130:	692b      	ldr	r3, [r5, #16]
 800e132:	b99b      	cbnz	r3, 800e15c <_vfiprintf_r+0x5c>
 800e134:	4629      	mov	r1, r5
 800e136:	4630      	mov	r0, r6
 800e138:	f000 f9e4 	bl	800e504 <__swsetup_r>
 800e13c:	b170      	cbz	r0, 800e15c <_vfiprintf_r+0x5c>
 800e13e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e140:	07dc      	lsls	r4, r3, #31
 800e142:	d504      	bpl.n	800e14e <_vfiprintf_r+0x4e>
 800e144:	f04f 30ff 	mov.w	r0, #4294967295
 800e148:	b01d      	add	sp, #116	@ 0x74
 800e14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e14e:	89ab      	ldrh	r3, [r5, #12]
 800e150:	0598      	lsls	r0, r3, #22
 800e152:	d4f7      	bmi.n	800e144 <_vfiprintf_r+0x44>
 800e154:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e156:	f7fe fdef 	bl	800cd38 <__retarget_lock_release_recursive>
 800e15a:	e7f3      	b.n	800e144 <_vfiprintf_r+0x44>
 800e15c:	2300      	movs	r3, #0
 800e15e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e160:	2320      	movs	r3, #32
 800e162:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e166:	f8cd 800c 	str.w	r8, [sp, #12]
 800e16a:	2330      	movs	r3, #48	@ 0x30
 800e16c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e31c <_vfiprintf_r+0x21c>
 800e170:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e174:	f04f 0901 	mov.w	r9, #1
 800e178:	4623      	mov	r3, r4
 800e17a:	469a      	mov	sl, r3
 800e17c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e180:	b10a      	cbz	r2, 800e186 <_vfiprintf_r+0x86>
 800e182:	2a25      	cmp	r2, #37	@ 0x25
 800e184:	d1f9      	bne.n	800e17a <_vfiprintf_r+0x7a>
 800e186:	ebba 0b04 	subs.w	fp, sl, r4
 800e18a:	d00b      	beq.n	800e1a4 <_vfiprintf_r+0xa4>
 800e18c:	465b      	mov	r3, fp
 800e18e:	4622      	mov	r2, r4
 800e190:	4629      	mov	r1, r5
 800e192:	4630      	mov	r0, r6
 800e194:	f7ff ffa1 	bl	800e0da <__sfputs_r>
 800e198:	3001      	adds	r0, #1
 800e19a:	f000 80a7 	beq.w	800e2ec <_vfiprintf_r+0x1ec>
 800e19e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1a0:	445a      	add	r2, fp
 800e1a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	f000 809f 	beq.w	800e2ec <_vfiprintf_r+0x1ec>
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e1b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1b8:	f10a 0a01 	add.w	sl, sl, #1
 800e1bc:	9304      	str	r3, [sp, #16]
 800e1be:	9307      	str	r3, [sp, #28]
 800e1c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e1c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1c6:	4654      	mov	r4, sl
 800e1c8:	2205      	movs	r2, #5
 800e1ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1ce:	4853      	ldr	r0, [pc, #332]	@ (800e31c <_vfiprintf_r+0x21c>)
 800e1d0:	f7f2 f88e 	bl	80002f0 <memchr>
 800e1d4:	9a04      	ldr	r2, [sp, #16]
 800e1d6:	b9d8      	cbnz	r0, 800e210 <_vfiprintf_r+0x110>
 800e1d8:	06d1      	lsls	r1, r2, #27
 800e1da:	bf44      	itt	mi
 800e1dc:	2320      	movmi	r3, #32
 800e1de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1e2:	0713      	lsls	r3, r2, #28
 800e1e4:	bf44      	itt	mi
 800e1e6:	232b      	movmi	r3, #43	@ 0x2b
 800e1e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e1f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1f2:	d015      	beq.n	800e220 <_vfiprintf_r+0x120>
 800e1f4:	9a07      	ldr	r2, [sp, #28]
 800e1f6:	4654      	mov	r4, sl
 800e1f8:	2000      	movs	r0, #0
 800e1fa:	f04f 0c0a 	mov.w	ip, #10
 800e1fe:	4621      	mov	r1, r4
 800e200:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e204:	3b30      	subs	r3, #48	@ 0x30
 800e206:	2b09      	cmp	r3, #9
 800e208:	d94b      	bls.n	800e2a2 <_vfiprintf_r+0x1a2>
 800e20a:	b1b0      	cbz	r0, 800e23a <_vfiprintf_r+0x13a>
 800e20c:	9207      	str	r2, [sp, #28]
 800e20e:	e014      	b.n	800e23a <_vfiprintf_r+0x13a>
 800e210:	eba0 0308 	sub.w	r3, r0, r8
 800e214:	fa09 f303 	lsl.w	r3, r9, r3
 800e218:	4313      	orrs	r3, r2
 800e21a:	9304      	str	r3, [sp, #16]
 800e21c:	46a2      	mov	sl, r4
 800e21e:	e7d2      	b.n	800e1c6 <_vfiprintf_r+0xc6>
 800e220:	9b03      	ldr	r3, [sp, #12]
 800e222:	1d19      	adds	r1, r3, #4
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	9103      	str	r1, [sp, #12]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	bfbb      	ittet	lt
 800e22c:	425b      	neglt	r3, r3
 800e22e:	f042 0202 	orrlt.w	r2, r2, #2
 800e232:	9307      	strge	r3, [sp, #28]
 800e234:	9307      	strlt	r3, [sp, #28]
 800e236:	bfb8      	it	lt
 800e238:	9204      	strlt	r2, [sp, #16]
 800e23a:	7823      	ldrb	r3, [r4, #0]
 800e23c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e23e:	d10a      	bne.n	800e256 <_vfiprintf_r+0x156>
 800e240:	7863      	ldrb	r3, [r4, #1]
 800e242:	2b2a      	cmp	r3, #42	@ 0x2a
 800e244:	d132      	bne.n	800e2ac <_vfiprintf_r+0x1ac>
 800e246:	9b03      	ldr	r3, [sp, #12]
 800e248:	1d1a      	adds	r2, r3, #4
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	9203      	str	r2, [sp, #12]
 800e24e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e252:	3402      	adds	r4, #2
 800e254:	9305      	str	r3, [sp, #20]
 800e256:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e32c <_vfiprintf_r+0x22c>
 800e25a:	7821      	ldrb	r1, [r4, #0]
 800e25c:	2203      	movs	r2, #3
 800e25e:	4650      	mov	r0, sl
 800e260:	f7f2 f846 	bl	80002f0 <memchr>
 800e264:	b138      	cbz	r0, 800e276 <_vfiprintf_r+0x176>
 800e266:	9b04      	ldr	r3, [sp, #16]
 800e268:	eba0 000a 	sub.w	r0, r0, sl
 800e26c:	2240      	movs	r2, #64	@ 0x40
 800e26e:	4082      	lsls	r2, r0
 800e270:	4313      	orrs	r3, r2
 800e272:	3401      	adds	r4, #1
 800e274:	9304      	str	r3, [sp, #16]
 800e276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e27a:	4829      	ldr	r0, [pc, #164]	@ (800e320 <_vfiprintf_r+0x220>)
 800e27c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e280:	2206      	movs	r2, #6
 800e282:	f7f2 f835 	bl	80002f0 <memchr>
 800e286:	2800      	cmp	r0, #0
 800e288:	d03f      	beq.n	800e30a <_vfiprintf_r+0x20a>
 800e28a:	4b26      	ldr	r3, [pc, #152]	@ (800e324 <_vfiprintf_r+0x224>)
 800e28c:	bb1b      	cbnz	r3, 800e2d6 <_vfiprintf_r+0x1d6>
 800e28e:	9b03      	ldr	r3, [sp, #12]
 800e290:	3307      	adds	r3, #7
 800e292:	f023 0307 	bic.w	r3, r3, #7
 800e296:	3308      	adds	r3, #8
 800e298:	9303      	str	r3, [sp, #12]
 800e29a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e29c:	443b      	add	r3, r7
 800e29e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2a0:	e76a      	b.n	800e178 <_vfiprintf_r+0x78>
 800e2a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2a6:	460c      	mov	r4, r1
 800e2a8:	2001      	movs	r0, #1
 800e2aa:	e7a8      	b.n	800e1fe <_vfiprintf_r+0xfe>
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	3401      	adds	r4, #1
 800e2b0:	9305      	str	r3, [sp, #20]
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	f04f 0c0a 	mov.w	ip, #10
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2be:	3a30      	subs	r2, #48	@ 0x30
 800e2c0:	2a09      	cmp	r2, #9
 800e2c2:	d903      	bls.n	800e2cc <_vfiprintf_r+0x1cc>
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d0c6      	beq.n	800e256 <_vfiprintf_r+0x156>
 800e2c8:	9105      	str	r1, [sp, #20]
 800e2ca:	e7c4      	b.n	800e256 <_vfiprintf_r+0x156>
 800e2cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	e7f0      	b.n	800e2b8 <_vfiprintf_r+0x1b8>
 800e2d6:	ab03      	add	r3, sp, #12
 800e2d8:	9300      	str	r3, [sp, #0]
 800e2da:	462a      	mov	r2, r5
 800e2dc:	4b12      	ldr	r3, [pc, #72]	@ (800e328 <_vfiprintf_r+0x228>)
 800e2de:	a904      	add	r1, sp, #16
 800e2e0:	4630      	mov	r0, r6
 800e2e2:	f7fd ffdd 	bl	800c2a0 <_printf_float>
 800e2e6:	4607      	mov	r7, r0
 800e2e8:	1c78      	adds	r0, r7, #1
 800e2ea:	d1d6      	bne.n	800e29a <_vfiprintf_r+0x19a>
 800e2ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2ee:	07d9      	lsls	r1, r3, #31
 800e2f0:	d405      	bmi.n	800e2fe <_vfiprintf_r+0x1fe>
 800e2f2:	89ab      	ldrh	r3, [r5, #12]
 800e2f4:	059a      	lsls	r2, r3, #22
 800e2f6:	d402      	bmi.n	800e2fe <_vfiprintf_r+0x1fe>
 800e2f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2fa:	f7fe fd1d 	bl	800cd38 <__retarget_lock_release_recursive>
 800e2fe:	89ab      	ldrh	r3, [r5, #12]
 800e300:	065b      	lsls	r3, r3, #25
 800e302:	f53f af1f 	bmi.w	800e144 <_vfiprintf_r+0x44>
 800e306:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e308:	e71e      	b.n	800e148 <_vfiprintf_r+0x48>
 800e30a:	ab03      	add	r3, sp, #12
 800e30c:	9300      	str	r3, [sp, #0]
 800e30e:	462a      	mov	r2, r5
 800e310:	4b05      	ldr	r3, [pc, #20]	@ (800e328 <_vfiprintf_r+0x228>)
 800e312:	a904      	add	r1, sp, #16
 800e314:	4630      	mov	r0, r6
 800e316:	f7fe fa4b 	bl	800c7b0 <_printf_i>
 800e31a:	e7e4      	b.n	800e2e6 <_vfiprintf_r+0x1e6>
 800e31c:	0800ea16 	.word	0x0800ea16
 800e320:	0800ea20 	.word	0x0800ea20
 800e324:	0800c2a1 	.word	0x0800c2a1
 800e328:	0800e0db 	.word	0x0800e0db
 800e32c:	0800ea1c 	.word	0x0800ea1c

0800e330 <__sflush_r>:
 800e330:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e338:	0716      	lsls	r6, r2, #28
 800e33a:	4605      	mov	r5, r0
 800e33c:	460c      	mov	r4, r1
 800e33e:	d454      	bmi.n	800e3ea <__sflush_r+0xba>
 800e340:	684b      	ldr	r3, [r1, #4]
 800e342:	2b00      	cmp	r3, #0
 800e344:	dc02      	bgt.n	800e34c <__sflush_r+0x1c>
 800e346:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e348:	2b00      	cmp	r3, #0
 800e34a:	dd48      	ble.n	800e3de <__sflush_r+0xae>
 800e34c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e34e:	2e00      	cmp	r6, #0
 800e350:	d045      	beq.n	800e3de <__sflush_r+0xae>
 800e352:	2300      	movs	r3, #0
 800e354:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e358:	682f      	ldr	r7, [r5, #0]
 800e35a:	6a21      	ldr	r1, [r4, #32]
 800e35c:	602b      	str	r3, [r5, #0]
 800e35e:	d030      	beq.n	800e3c2 <__sflush_r+0x92>
 800e360:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e362:	89a3      	ldrh	r3, [r4, #12]
 800e364:	0759      	lsls	r1, r3, #29
 800e366:	d505      	bpl.n	800e374 <__sflush_r+0x44>
 800e368:	6863      	ldr	r3, [r4, #4]
 800e36a:	1ad2      	subs	r2, r2, r3
 800e36c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e36e:	b10b      	cbz	r3, 800e374 <__sflush_r+0x44>
 800e370:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e372:	1ad2      	subs	r2, r2, r3
 800e374:	2300      	movs	r3, #0
 800e376:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e378:	6a21      	ldr	r1, [r4, #32]
 800e37a:	4628      	mov	r0, r5
 800e37c:	47b0      	blx	r6
 800e37e:	1c43      	adds	r3, r0, #1
 800e380:	89a3      	ldrh	r3, [r4, #12]
 800e382:	d106      	bne.n	800e392 <__sflush_r+0x62>
 800e384:	6829      	ldr	r1, [r5, #0]
 800e386:	291d      	cmp	r1, #29
 800e388:	d82b      	bhi.n	800e3e2 <__sflush_r+0xb2>
 800e38a:	4a2a      	ldr	r2, [pc, #168]	@ (800e434 <__sflush_r+0x104>)
 800e38c:	40ca      	lsrs	r2, r1
 800e38e:	07d6      	lsls	r6, r2, #31
 800e390:	d527      	bpl.n	800e3e2 <__sflush_r+0xb2>
 800e392:	2200      	movs	r2, #0
 800e394:	6062      	str	r2, [r4, #4]
 800e396:	04d9      	lsls	r1, r3, #19
 800e398:	6922      	ldr	r2, [r4, #16]
 800e39a:	6022      	str	r2, [r4, #0]
 800e39c:	d504      	bpl.n	800e3a8 <__sflush_r+0x78>
 800e39e:	1c42      	adds	r2, r0, #1
 800e3a0:	d101      	bne.n	800e3a6 <__sflush_r+0x76>
 800e3a2:	682b      	ldr	r3, [r5, #0]
 800e3a4:	b903      	cbnz	r3, 800e3a8 <__sflush_r+0x78>
 800e3a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e3a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3aa:	602f      	str	r7, [r5, #0]
 800e3ac:	b1b9      	cbz	r1, 800e3de <__sflush_r+0xae>
 800e3ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3b2:	4299      	cmp	r1, r3
 800e3b4:	d002      	beq.n	800e3bc <__sflush_r+0x8c>
 800e3b6:	4628      	mov	r0, r5
 800e3b8:	f7ff fab4 	bl	800d924 <_free_r>
 800e3bc:	2300      	movs	r3, #0
 800e3be:	6363      	str	r3, [r4, #52]	@ 0x34
 800e3c0:	e00d      	b.n	800e3de <__sflush_r+0xae>
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	47b0      	blx	r6
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	1c50      	adds	r0, r2, #1
 800e3cc:	d1c9      	bne.n	800e362 <__sflush_r+0x32>
 800e3ce:	682b      	ldr	r3, [r5, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d0c6      	beq.n	800e362 <__sflush_r+0x32>
 800e3d4:	2b1d      	cmp	r3, #29
 800e3d6:	d001      	beq.n	800e3dc <__sflush_r+0xac>
 800e3d8:	2b16      	cmp	r3, #22
 800e3da:	d11e      	bne.n	800e41a <__sflush_r+0xea>
 800e3dc:	602f      	str	r7, [r5, #0]
 800e3de:	2000      	movs	r0, #0
 800e3e0:	e022      	b.n	800e428 <__sflush_r+0xf8>
 800e3e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3e6:	b21b      	sxth	r3, r3
 800e3e8:	e01b      	b.n	800e422 <__sflush_r+0xf2>
 800e3ea:	690f      	ldr	r7, [r1, #16]
 800e3ec:	2f00      	cmp	r7, #0
 800e3ee:	d0f6      	beq.n	800e3de <__sflush_r+0xae>
 800e3f0:	0793      	lsls	r3, r2, #30
 800e3f2:	680e      	ldr	r6, [r1, #0]
 800e3f4:	bf08      	it	eq
 800e3f6:	694b      	ldreq	r3, [r1, #20]
 800e3f8:	600f      	str	r7, [r1, #0]
 800e3fa:	bf18      	it	ne
 800e3fc:	2300      	movne	r3, #0
 800e3fe:	eba6 0807 	sub.w	r8, r6, r7
 800e402:	608b      	str	r3, [r1, #8]
 800e404:	f1b8 0f00 	cmp.w	r8, #0
 800e408:	dde9      	ble.n	800e3de <__sflush_r+0xae>
 800e40a:	6a21      	ldr	r1, [r4, #32]
 800e40c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e40e:	4643      	mov	r3, r8
 800e410:	463a      	mov	r2, r7
 800e412:	4628      	mov	r0, r5
 800e414:	47b0      	blx	r6
 800e416:	2800      	cmp	r0, #0
 800e418:	dc08      	bgt.n	800e42c <__sflush_r+0xfc>
 800e41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e41e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e422:	81a3      	strh	r3, [r4, #12]
 800e424:	f04f 30ff 	mov.w	r0, #4294967295
 800e428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e42c:	4407      	add	r7, r0
 800e42e:	eba8 0800 	sub.w	r8, r8, r0
 800e432:	e7e7      	b.n	800e404 <__sflush_r+0xd4>
 800e434:	20400001 	.word	0x20400001

0800e438 <_fflush_r>:
 800e438:	b538      	push	{r3, r4, r5, lr}
 800e43a:	690b      	ldr	r3, [r1, #16]
 800e43c:	4605      	mov	r5, r0
 800e43e:	460c      	mov	r4, r1
 800e440:	b913      	cbnz	r3, 800e448 <_fflush_r+0x10>
 800e442:	2500      	movs	r5, #0
 800e444:	4628      	mov	r0, r5
 800e446:	bd38      	pop	{r3, r4, r5, pc}
 800e448:	b118      	cbz	r0, 800e452 <_fflush_r+0x1a>
 800e44a:	6a03      	ldr	r3, [r0, #32]
 800e44c:	b90b      	cbnz	r3, 800e452 <_fflush_r+0x1a>
 800e44e:	f7fe fb59 	bl	800cb04 <__sinit>
 800e452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d0f3      	beq.n	800e442 <_fflush_r+0xa>
 800e45a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e45c:	07d0      	lsls	r0, r2, #31
 800e45e:	d404      	bmi.n	800e46a <_fflush_r+0x32>
 800e460:	0599      	lsls	r1, r3, #22
 800e462:	d402      	bmi.n	800e46a <_fflush_r+0x32>
 800e464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e466:	f7fe fc66 	bl	800cd36 <__retarget_lock_acquire_recursive>
 800e46a:	4628      	mov	r0, r5
 800e46c:	4621      	mov	r1, r4
 800e46e:	f7ff ff5f 	bl	800e330 <__sflush_r>
 800e472:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e474:	07da      	lsls	r2, r3, #31
 800e476:	4605      	mov	r5, r0
 800e478:	d4e4      	bmi.n	800e444 <_fflush_r+0xc>
 800e47a:	89a3      	ldrh	r3, [r4, #12]
 800e47c:	059b      	lsls	r3, r3, #22
 800e47e:	d4e1      	bmi.n	800e444 <_fflush_r+0xc>
 800e480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e482:	f7fe fc59 	bl	800cd38 <__retarget_lock_release_recursive>
 800e486:	e7dd      	b.n	800e444 <_fflush_r+0xc>

0800e488 <__swbuf_r>:
 800e488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e48a:	460e      	mov	r6, r1
 800e48c:	4614      	mov	r4, r2
 800e48e:	4605      	mov	r5, r0
 800e490:	b118      	cbz	r0, 800e49a <__swbuf_r+0x12>
 800e492:	6a03      	ldr	r3, [r0, #32]
 800e494:	b90b      	cbnz	r3, 800e49a <__swbuf_r+0x12>
 800e496:	f7fe fb35 	bl	800cb04 <__sinit>
 800e49a:	69a3      	ldr	r3, [r4, #24]
 800e49c:	60a3      	str	r3, [r4, #8]
 800e49e:	89a3      	ldrh	r3, [r4, #12]
 800e4a0:	071a      	lsls	r2, r3, #28
 800e4a2:	d501      	bpl.n	800e4a8 <__swbuf_r+0x20>
 800e4a4:	6923      	ldr	r3, [r4, #16]
 800e4a6:	b943      	cbnz	r3, 800e4ba <__swbuf_r+0x32>
 800e4a8:	4621      	mov	r1, r4
 800e4aa:	4628      	mov	r0, r5
 800e4ac:	f000 f82a 	bl	800e504 <__swsetup_r>
 800e4b0:	b118      	cbz	r0, 800e4ba <__swbuf_r+0x32>
 800e4b2:	f04f 37ff 	mov.w	r7, #4294967295
 800e4b6:	4638      	mov	r0, r7
 800e4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4ba:	6823      	ldr	r3, [r4, #0]
 800e4bc:	6922      	ldr	r2, [r4, #16]
 800e4be:	1a98      	subs	r0, r3, r2
 800e4c0:	6963      	ldr	r3, [r4, #20]
 800e4c2:	b2f6      	uxtb	r6, r6
 800e4c4:	4283      	cmp	r3, r0
 800e4c6:	4637      	mov	r7, r6
 800e4c8:	dc05      	bgt.n	800e4d6 <__swbuf_r+0x4e>
 800e4ca:	4621      	mov	r1, r4
 800e4cc:	4628      	mov	r0, r5
 800e4ce:	f7ff ffb3 	bl	800e438 <_fflush_r>
 800e4d2:	2800      	cmp	r0, #0
 800e4d4:	d1ed      	bne.n	800e4b2 <__swbuf_r+0x2a>
 800e4d6:	68a3      	ldr	r3, [r4, #8]
 800e4d8:	3b01      	subs	r3, #1
 800e4da:	60a3      	str	r3, [r4, #8]
 800e4dc:	6823      	ldr	r3, [r4, #0]
 800e4de:	1c5a      	adds	r2, r3, #1
 800e4e0:	6022      	str	r2, [r4, #0]
 800e4e2:	701e      	strb	r6, [r3, #0]
 800e4e4:	6962      	ldr	r2, [r4, #20]
 800e4e6:	1c43      	adds	r3, r0, #1
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d004      	beq.n	800e4f6 <__swbuf_r+0x6e>
 800e4ec:	89a3      	ldrh	r3, [r4, #12]
 800e4ee:	07db      	lsls	r3, r3, #31
 800e4f0:	d5e1      	bpl.n	800e4b6 <__swbuf_r+0x2e>
 800e4f2:	2e0a      	cmp	r6, #10
 800e4f4:	d1df      	bne.n	800e4b6 <__swbuf_r+0x2e>
 800e4f6:	4621      	mov	r1, r4
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	f7ff ff9d 	bl	800e438 <_fflush_r>
 800e4fe:	2800      	cmp	r0, #0
 800e500:	d0d9      	beq.n	800e4b6 <__swbuf_r+0x2e>
 800e502:	e7d6      	b.n	800e4b2 <__swbuf_r+0x2a>

0800e504 <__swsetup_r>:
 800e504:	b538      	push	{r3, r4, r5, lr}
 800e506:	4b29      	ldr	r3, [pc, #164]	@ (800e5ac <__swsetup_r+0xa8>)
 800e508:	4605      	mov	r5, r0
 800e50a:	6818      	ldr	r0, [r3, #0]
 800e50c:	460c      	mov	r4, r1
 800e50e:	b118      	cbz	r0, 800e518 <__swsetup_r+0x14>
 800e510:	6a03      	ldr	r3, [r0, #32]
 800e512:	b90b      	cbnz	r3, 800e518 <__swsetup_r+0x14>
 800e514:	f7fe faf6 	bl	800cb04 <__sinit>
 800e518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e51c:	0719      	lsls	r1, r3, #28
 800e51e:	d422      	bmi.n	800e566 <__swsetup_r+0x62>
 800e520:	06da      	lsls	r2, r3, #27
 800e522:	d407      	bmi.n	800e534 <__swsetup_r+0x30>
 800e524:	2209      	movs	r2, #9
 800e526:	602a      	str	r2, [r5, #0]
 800e528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e52c:	81a3      	strh	r3, [r4, #12]
 800e52e:	f04f 30ff 	mov.w	r0, #4294967295
 800e532:	e033      	b.n	800e59c <__swsetup_r+0x98>
 800e534:	0758      	lsls	r0, r3, #29
 800e536:	d512      	bpl.n	800e55e <__swsetup_r+0x5a>
 800e538:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e53a:	b141      	cbz	r1, 800e54e <__swsetup_r+0x4a>
 800e53c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e540:	4299      	cmp	r1, r3
 800e542:	d002      	beq.n	800e54a <__swsetup_r+0x46>
 800e544:	4628      	mov	r0, r5
 800e546:	f7ff f9ed 	bl	800d924 <_free_r>
 800e54a:	2300      	movs	r3, #0
 800e54c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e54e:	89a3      	ldrh	r3, [r4, #12]
 800e550:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e554:	81a3      	strh	r3, [r4, #12]
 800e556:	2300      	movs	r3, #0
 800e558:	6063      	str	r3, [r4, #4]
 800e55a:	6923      	ldr	r3, [r4, #16]
 800e55c:	6023      	str	r3, [r4, #0]
 800e55e:	89a3      	ldrh	r3, [r4, #12]
 800e560:	f043 0308 	orr.w	r3, r3, #8
 800e564:	81a3      	strh	r3, [r4, #12]
 800e566:	6923      	ldr	r3, [r4, #16]
 800e568:	b94b      	cbnz	r3, 800e57e <__swsetup_r+0x7a>
 800e56a:	89a3      	ldrh	r3, [r4, #12]
 800e56c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e574:	d003      	beq.n	800e57e <__swsetup_r+0x7a>
 800e576:	4621      	mov	r1, r4
 800e578:	4628      	mov	r0, r5
 800e57a:	f000 f8a3 	bl	800e6c4 <__smakebuf_r>
 800e57e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e582:	f013 0201 	ands.w	r2, r3, #1
 800e586:	d00a      	beq.n	800e59e <__swsetup_r+0x9a>
 800e588:	2200      	movs	r2, #0
 800e58a:	60a2      	str	r2, [r4, #8]
 800e58c:	6962      	ldr	r2, [r4, #20]
 800e58e:	4252      	negs	r2, r2
 800e590:	61a2      	str	r2, [r4, #24]
 800e592:	6922      	ldr	r2, [r4, #16]
 800e594:	b942      	cbnz	r2, 800e5a8 <__swsetup_r+0xa4>
 800e596:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e59a:	d1c5      	bne.n	800e528 <__swsetup_r+0x24>
 800e59c:	bd38      	pop	{r3, r4, r5, pc}
 800e59e:	0799      	lsls	r1, r3, #30
 800e5a0:	bf58      	it	pl
 800e5a2:	6962      	ldrpl	r2, [r4, #20]
 800e5a4:	60a2      	str	r2, [r4, #8]
 800e5a6:	e7f4      	b.n	800e592 <__swsetup_r+0x8e>
 800e5a8:	2000      	movs	r0, #0
 800e5aa:	e7f7      	b.n	800e59c <__swsetup_r+0x98>
 800e5ac:	2400001c 	.word	0x2400001c

0800e5b0 <__assert_func>:
 800e5b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5b2:	4614      	mov	r4, r2
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	4b09      	ldr	r3, [pc, #36]	@ (800e5dc <__assert_func+0x2c>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4605      	mov	r5, r0
 800e5bc:	68d8      	ldr	r0, [r3, #12]
 800e5be:	b14c      	cbz	r4, 800e5d4 <__assert_func+0x24>
 800e5c0:	4b07      	ldr	r3, [pc, #28]	@ (800e5e0 <__assert_func+0x30>)
 800e5c2:	9100      	str	r1, [sp, #0]
 800e5c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e5c8:	4906      	ldr	r1, [pc, #24]	@ (800e5e4 <__assert_func+0x34>)
 800e5ca:	462b      	mov	r3, r5
 800e5cc:	f000 f842 	bl	800e654 <fiprintf>
 800e5d0:	f000 f8d6 	bl	800e780 <abort>
 800e5d4:	4b04      	ldr	r3, [pc, #16]	@ (800e5e8 <__assert_func+0x38>)
 800e5d6:	461c      	mov	r4, r3
 800e5d8:	e7f3      	b.n	800e5c2 <__assert_func+0x12>
 800e5da:	bf00      	nop
 800e5dc:	2400001c 	.word	0x2400001c
 800e5e0:	0800ea31 	.word	0x0800ea31
 800e5e4:	0800ea3e 	.word	0x0800ea3e
 800e5e8:	0800ea6c 	.word	0x0800ea6c

0800e5ec <_calloc_r>:
 800e5ec:	b570      	push	{r4, r5, r6, lr}
 800e5ee:	fba1 5402 	umull	r5, r4, r1, r2
 800e5f2:	b934      	cbnz	r4, 800e602 <_calloc_r+0x16>
 800e5f4:	4629      	mov	r1, r5
 800e5f6:	f7fd fd37 	bl	800c068 <_malloc_r>
 800e5fa:	4606      	mov	r6, r0
 800e5fc:	b928      	cbnz	r0, 800e60a <_calloc_r+0x1e>
 800e5fe:	4630      	mov	r0, r6
 800e600:	bd70      	pop	{r4, r5, r6, pc}
 800e602:	220c      	movs	r2, #12
 800e604:	6002      	str	r2, [r0, #0]
 800e606:	2600      	movs	r6, #0
 800e608:	e7f9      	b.n	800e5fe <_calloc_r+0x12>
 800e60a:	462a      	mov	r2, r5
 800e60c:	4621      	mov	r1, r4
 800e60e:	f7fe fb04 	bl	800cc1a <memset>
 800e612:	e7f4      	b.n	800e5fe <_calloc_r+0x12>

0800e614 <__ascii_mbtowc>:
 800e614:	b082      	sub	sp, #8
 800e616:	b901      	cbnz	r1, 800e61a <__ascii_mbtowc+0x6>
 800e618:	a901      	add	r1, sp, #4
 800e61a:	b142      	cbz	r2, 800e62e <__ascii_mbtowc+0x1a>
 800e61c:	b14b      	cbz	r3, 800e632 <__ascii_mbtowc+0x1e>
 800e61e:	7813      	ldrb	r3, [r2, #0]
 800e620:	600b      	str	r3, [r1, #0]
 800e622:	7812      	ldrb	r2, [r2, #0]
 800e624:	1e10      	subs	r0, r2, #0
 800e626:	bf18      	it	ne
 800e628:	2001      	movne	r0, #1
 800e62a:	b002      	add	sp, #8
 800e62c:	4770      	bx	lr
 800e62e:	4610      	mov	r0, r2
 800e630:	e7fb      	b.n	800e62a <__ascii_mbtowc+0x16>
 800e632:	f06f 0001 	mvn.w	r0, #1
 800e636:	e7f8      	b.n	800e62a <__ascii_mbtowc+0x16>

0800e638 <__ascii_wctomb>:
 800e638:	4603      	mov	r3, r0
 800e63a:	4608      	mov	r0, r1
 800e63c:	b141      	cbz	r1, 800e650 <__ascii_wctomb+0x18>
 800e63e:	2aff      	cmp	r2, #255	@ 0xff
 800e640:	d904      	bls.n	800e64c <__ascii_wctomb+0x14>
 800e642:	228a      	movs	r2, #138	@ 0x8a
 800e644:	601a      	str	r2, [r3, #0]
 800e646:	f04f 30ff 	mov.w	r0, #4294967295
 800e64a:	4770      	bx	lr
 800e64c:	700a      	strb	r2, [r1, #0]
 800e64e:	2001      	movs	r0, #1
 800e650:	4770      	bx	lr
	...

0800e654 <fiprintf>:
 800e654:	b40e      	push	{r1, r2, r3}
 800e656:	b503      	push	{r0, r1, lr}
 800e658:	4601      	mov	r1, r0
 800e65a:	ab03      	add	r3, sp, #12
 800e65c:	4805      	ldr	r0, [pc, #20]	@ (800e674 <fiprintf+0x20>)
 800e65e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e662:	6800      	ldr	r0, [r0, #0]
 800e664:	9301      	str	r3, [sp, #4]
 800e666:	f7ff fd4b 	bl	800e100 <_vfiprintf_r>
 800e66a:	b002      	add	sp, #8
 800e66c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e670:	b003      	add	sp, #12
 800e672:	4770      	bx	lr
 800e674:	2400001c 	.word	0x2400001c

0800e678 <__swhatbuf_r>:
 800e678:	b570      	push	{r4, r5, r6, lr}
 800e67a:	460c      	mov	r4, r1
 800e67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e680:	2900      	cmp	r1, #0
 800e682:	b096      	sub	sp, #88	@ 0x58
 800e684:	4615      	mov	r5, r2
 800e686:	461e      	mov	r6, r3
 800e688:	da0d      	bge.n	800e6a6 <__swhatbuf_r+0x2e>
 800e68a:	89a3      	ldrh	r3, [r4, #12]
 800e68c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e690:	f04f 0100 	mov.w	r1, #0
 800e694:	bf14      	ite	ne
 800e696:	2340      	movne	r3, #64	@ 0x40
 800e698:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e69c:	2000      	movs	r0, #0
 800e69e:	6031      	str	r1, [r6, #0]
 800e6a0:	602b      	str	r3, [r5, #0]
 800e6a2:	b016      	add	sp, #88	@ 0x58
 800e6a4:	bd70      	pop	{r4, r5, r6, pc}
 800e6a6:	466a      	mov	r2, sp
 800e6a8:	f000 f848 	bl	800e73c <_fstat_r>
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	dbec      	blt.n	800e68a <__swhatbuf_r+0x12>
 800e6b0:	9901      	ldr	r1, [sp, #4]
 800e6b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e6b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e6ba:	4259      	negs	r1, r3
 800e6bc:	4159      	adcs	r1, r3
 800e6be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e6c2:	e7eb      	b.n	800e69c <__swhatbuf_r+0x24>

0800e6c4 <__smakebuf_r>:
 800e6c4:	898b      	ldrh	r3, [r1, #12]
 800e6c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e6c8:	079d      	lsls	r5, r3, #30
 800e6ca:	4606      	mov	r6, r0
 800e6cc:	460c      	mov	r4, r1
 800e6ce:	d507      	bpl.n	800e6e0 <__smakebuf_r+0x1c>
 800e6d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e6d4:	6023      	str	r3, [r4, #0]
 800e6d6:	6123      	str	r3, [r4, #16]
 800e6d8:	2301      	movs	r3, #1
 800e6da:	6163      	str	r3, [r4, #20]
 800e6dc:	b003      	add	sp, #12
 800e6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6e0:	ab01      	add	r3, sp, #4
 800e6e2:	466a      	mov	r2, sp
 800e6e4:	f7ff ffc8 	bl	800e678 <__swhatbuf_r>
 800e6e8:	9f00      	ldr	r7, [sp, #0]
 800e6ea:	4605      	mov	r5, r0
 800e6ec:	4639      	mov	r1, r7
 800e6ee:	4630      	mov	r0, r6
 800e6f0:	f7fd fcba 	bl	800c068 <_malloc_r>
 800e6f4:	b948      	cbnz	r0, 800e70a <__smakebuf_r+0x46>
 800e6f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6fa:	059a      	lsls	r2, r3, #22
 800e6fc:	d4ee      	bmi.n	800e6dc <__smakebuf_r+0x18>
 800e6fe:	f023 0303 	bic.w	r3, r3, #3
 800e702:	f043 0302 	orr.w	r3, r3, #2
 800e706:	81a3      	strh	r3, [r4, #12]
 800e708:	e7e2      	b.n	800e6d0 <__smakebuf_r+0xc>
 800e70a:	89a3      	ldrh	r3, [r4, #12]
 800e70c:	6020      	str	r0, [r4, #0]
 800e70e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e712:	81a3      	strh	r3, [r4, #12]
 800e714:	9b01      	ldr	r3, [sp, #4]
 800e716:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e71a:	b15b      	cbz	r3, 800e734 <__smakebuf_r+0x70>
 800e71c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e720:	4630      	mov	r0, r6
 800e722:	f000 f81d 	bl	800e760 <_isatty_r>
 800e726:	b128      	cbz	r0, 800e734 <__smakebuf_r+0x70>
 800e728:	89a3      	ldrh	r3, [r4, #12]
 800e72a:	f023 0303 	bic.w	r3, r3, #3
 800e72e:	f043 0301 	orr.w	r3, r3, #1
 800e732:	81a3      	strh	r3, [r4, #12]
 800e734:	89a3      	ldrh	r3, [r4, #12]
 800e736:	431d      	orrs	r5, r3
 800e738:	81a5      	strh	r5, [r4, #12]
 800e73a:	e7cf      	b.n	800e6dc <__smakebuf_r+0x18>

0800e73c <_fstat_r>:
 800e73c:	b538      	push	{r3, r4, r5, lr}
 800e73e:	4d07      	ldr	r5, [pc, #28]	@ (800e75c <_fstat_r+0x20>)
 800e740:	2300      	movs	r3, #0
 800e742:	4604      	mov	r4, r0
 800e744:	4608      	mov	r0, r1
 800e746:	4611      	mov	r1, r2
 800e748:	602b      	str	r3, [r5, #0]
 800e74a:	f7f2 ff2d 	bl	80015a8 <_fstat>
 800e74e:	1c43      	adds	r3, r0, #1
 800e750:	d102      	bne.n	800e758 <_fstat_r+0x1c>
 800e752:	682b      	ldr	r3, [r5, #0]
 800e754:	b103      	cbz	r3, 800e758 <_fstat_r+0x1c>
 800e756:	6023      	str	r3, [r4, #0]
 800e758:	bd38      	pop	{r3, r4, r5, pc}
 800e75a:	bf00      	nop
 800e75c:	24000e04 	.word	0x24000e04

0800e760 <_isatty_r>:
 800e760:	b538      	push	{r3, r4, r5, lr}
 800e762:	4d06      	ldr	r5, [pc, #24]	@ (800e77c <_isatty_r+0x1c>)
 800e764:	2300      	movs	r3, #0
 800e766:	4604      	mov	r4, r0
 800e768:	4608      	mov	r0, r1
 800e76a:	602b      	str	r3, [r5, #0]
 800e76c:	f7f2 ff2c 	bl	80015c8 <_isatty>
 800e770:	1c43      	adds	r3, r0, #1
 800e772:	d102      	bne.n	800e77a <_isatty_r+0x1a>
 800e774:	682b      	ldr	r3, [r5, #0]
 800e776:	b103      	cbz	r3, 800e77a <_isatty_r+0x1a>
 800e778:	6023      	str	r3, [r4, #0]
 800e77a:	bd38      	pop	{r3, r4, r5, pc}
 800e77c:	24000e04 	.word	0x24000e04

0800e780 <abort>:
 800e780:	b508      	push	{r3, lr}
 800e782:	2006      	movs	r0, #6
 800e784:	f000 f82c 	bl	800e7e0 <raise>
 800e788:	2001      	movs	r0, #1
 800e78a:	f7f2 febd 	bl	8001508 <_exit>

0800e78e <_raise_r>:
 800e78e:	291f      	cmp	r1, #31
 800e790:	b538      	push	{r3, r4, r5, lr}
 800e792:	4605      	mov	r5, r0
 800e794:	460c      	mov	r4, r1
 800e796:	d904      	bls.n	800e7a2 <_raise_r+0x14>
 800e798:	2316      	movs	r3, #22
 800e79a:	6003      	str	r3, [r0, #0]
 800e79c:	f04f 30ff 	mov.w	r0, #4294967295
 800e7a0:	bd38      	pop	{r3, r4, r5, pc}
 800e7a2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e7a4:	b112      	cbz	r2, 800e7ac <_raise_r+0x1e>
 800e7a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e7aa:	b94b      	cbnz	r3, 800e7c0 <_raise_r+0x32>
 800e7ac:	4628      	mov	r0, r5
 800e7ae:	f000 f831 	bl	800e814 <_getpid_r>
 800e7b2:	4622      	mov	r2, r4
 800e7b4:	4601      	mov	r1, r0
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7bc:	f000 b818 	b.w	800e7f0 <_kill_r>
 800e7c0:	2b01      	cmp	r3, #1
 800e7c2:	d00a      	beq.n	800e7da <_raise_r+0x4c>
 800e7c4:	1c59      	adds	r1, r3, #1
 800e7c6:	d103      	bne.n	800e7d0 <_raise_r+0x42>
 800e7c8:	2316      	movs	r3, #22
 800e7ca:	6003      	str	r3, [r0, #0]
 800e7cc:	2001      	movs	r0, #1
 800e7ce:	e7e7      	b.n	800e7a0 <_raise_r+0x12>
 800e7d0:	2100      	movs	r1, #0
 800e7d2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	4798      	blx	r3
 800e7da:	2000      	movs	r0, #0
 800e7dc:	e7e0      	b.n	800e7a0 <_raise_r+0x12>
	...

0800e7e0 <raise>:
 800e7e0:	4b02      	ldr	r3, [pc, #8]	@ (800e7ec <raise+0xc>)
 800e7e2:	4601      	mov	r1, r0
 800e7e4:	6818      	ldr	r0, [r3, #0]
 800e7e6:	f7ff bfd2 	b.w	800e78e <_raise_r>
 800e7ea:	bf00      	nop
 800e7ec:	2400001c 	.word	0x2400001c

0800e7f0 <_kill_r>:
 800e7f0:	b538      	push	{r3, r4, r5, lr}
 800e7f2:	4d07      	ldr	r5, [pc, #28]	@ (800e810 <_kill_r+0x20>)
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	4608      	mov	r0, r1
 800e7fa:	4611      	mov	r1, r2
 800e7fc:	602b      	str	r3, [r5, #0]
 800e7fe:	f7f2 fe73 	bl	80014e8 <_kill>
 800e802:	1c43      	adds	r3, r0, #1
 800e804:	d102      	bne.n	800e80c <_kill_r+0x1c>
 800e806:	682b      	ldr	r3, [r5, #0]
 800e808:	b103      	cbz	r3, 800e80c <_kill_r+0x1c>
 800e80a:	6023      	str	r3, [r4, #0]
 800e80c:	bd38      	pop	{r3, r4, r5, pc}
 800e80e:	bf00      	nop
 800e810:	24000e04 	.word	0x24000e04

0800e814 <_getpid_r>:
 800e814:	f7f2 be60 	b.w	80014d8 <_getpid>

0800e818 <_init>:
 800e818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e81a:	bf00      	nop
 800e81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e81e:	bc08      	pop	{r3}
 800e820:	469e      	mov	lr, r3
 800e822:	4770      	bx	lr

0800e824 <_fini>:
 800e824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e826:	bf00      	nop
 800e828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e82a:	bc08      	pop	{r3}
 800e82c:	469e      	mov	lr, r3
 800e82e:	4770      	bx	lr
