
SmartWatchTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063e8  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006698  08006698  00007698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800672c  0800672c  0000772c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006734  08006734  00007734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006738  08006738  00007738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800673c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000298  2400006c  080067a8  0000806c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000304  080067a8  00008304  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fddc  00000000  00000000  0000809a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000021b7  00000000  00000000  00017e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b50  00000000  00000000  0001a030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000089c  00000000  00000000  0001ab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000305a8  00000000  00000000  0001b41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000fc1e  00000000  00000000  0004b9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00135c94  00000000  00000000  0005b5e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00191276  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000034e0  00000000  00000000  001912bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000087  00000000  00000000  0019479c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400006c 	.word	0x2400006c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08006680 	.word	0x08006680

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000070 	.word	0x24000070
 80002ec:	08006680 	.word	0x08006680

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08c      	sub	sp, #48	@ 0x30
 80006c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b49      	ldr	r3, [pc, #292]	@ (80007f8 <MX_GPIO_Init+0x13c>)
 80006d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006d8:	4a47      	ldr	r2, [pc, #284]	@ (80007f8 <MX_GPIO_Init+0x13c>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006e2:	4b45      	ldr	r3, [pc, #276]	@ (80007f8 <MX_GPIO_Init+0x13c>)
 80006e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006e8:	f003 0304 	and.w	r3, r3, #4
 80006ec:	61bb      	str	r3, [r7, #24]
 80006ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f0:	4b41      	ldr	r3, [pc, #260]	@ (80007f8 <MX_GPIO_Init+0x13c>)
 80006f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006f6:	4a40      	ldr	r2, [pc, #256]	@ (80007f8 <MX_GPIO_Init+0x13c>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006fc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000700:	4b3d      	ldr	r3, [pc, #244]	@ (80007f8 <MX_GPIO_Init+0x13c>)
 8000702:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	4b3a      	ldr	r3, [pc, #232]	@ (80007f8 <MX_GPIO_Init+0x13c>)
 8000710:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000714:	4a38      	ldr	r2, [pc, #224]	@ (80007f8 <MX_GPIO_Init+0x13c>)
 8000716:	f043 0302 	orr.w	r3, r3, #2
 800071a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800071e:	4b36      	ldr	r3, [pc, #216]	@ (80007f8 <MX_GPIO_Init+0x13c>)
 8000720:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000724:	f003 0302 	and.w	r3, r3, #2
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072c:	4b32      	ldr	r3, [pc, #200]	@ (80007f8 <MX_GPIO_Init+0x13c>)
 800072e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000732:	4a31      	ldr	r2, [pc, #196]	@ (80007f8 <MX_GPIO_Init+0x13c>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800073c:	4b2e      	ldr	r3, [pc, #184]	@ (80007f8 <MX_GPIO_Init+0x13c>)
 800073e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <MX_GPIO_Init+0x13c>)
 800074c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000750:	4a29      	ldr	r2, [pc, #164]	@ (80007f8 <MX_GPIO_Init+0x13c>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800075a:	4b27      	ldr	r3, [pc, #156]	@ (80007f8 <MX_GPIO_Init+0x13c>)
 800075c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000768:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <MX_GPIO_Init+0x13c>)
 800076a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800076e:	4a22      	ldr	r2, [pc, #136]	@ (80007f8 <MX_GPIO_Init+0x13c>)
 8000770:	f043 0310 	orr.w	r3, r3, #16
 8000774:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000778:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <MX_GPIO_Init+0x13c>)
 800077a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800077e:	f003 0310 	and.w	r3, r3, #16
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f244 0101 	movw	r1, #16385	@ 0x4001
 800078c:	481b      	ldr	r0, [pc, #108]	@ (80007fc <MX_GPIO_Init+0x140>)
 800078e:	f000 ffc9 	bl	8001724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2102      	movs	r1, #2
 8000796:	481a      	ldr	r0, [pc, #104]	@ (8000800 <MX_GPIO_Init+0x144>)
 8000798:	f000 ffc4 	bl	8001724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	4814      	ldr	r0, [pc, #80]	@ (8000804 <MX_GPIO_Init+0x148>)
 80007b2:	f000 fe07 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80007b6:	f244 0301 	movw	r3, #16385	@ 0x4001
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	480b      	ldr	r0, [pc, #44]	@ (80007fc <MX_GPIO_Init+0x140>)
 80007d0:	f000 fdf8 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007d4:	2302      	movs	r3, #2
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_GPIO_Init+0x144>)
 80007ec:	f000 fdea 	bl	80013c4 <HAL_GPIO_Init>

}
 80007f0:	bf00      	nop
 80007f2:	3730      	adds	r7, #48	@ 0x30
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	58024400 	.word	0x58024400
 80007fc:	58020400 	.word	0x58020400
 8000800:	58021000 	.word	0x58021000
 8000804:	58020800 	.word	0x58020800

08000808 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000810:	1d39      	adds	r1, r7, #4
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
 8000816:	2201      	movs	r2, #1
 8000818:	4803      	ldr	r0, [pc, #12]	@ (8000828 <__io_putchar+0x20>)
 800081a:	f003 fde5 	bl	80043e8 <HAL_UART_Transmit>
	return chr;
 800081e:	687b      	ldr	r3, [r7, #4]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	24000120 	.word	0x24000120

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b5b0      	push	{r4, r5, r7, lr}
 800082e:	b08a      	sub	sp, #40	@ 0x28
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000832:	f000 f895 	bl	8000960 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000836:	f000 fbd7 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083a:	f000 f81d 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083e:	f7ff ff3d 	bl	80006bc <MX_GPIO_Init>
  MX_UART4_Init();
 8000842:	f000 fa53 	bl	8000cec <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000846:	f000 fa9d 	bl	8000d84 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t txData[] = "AT+NAMESmartProject\r\n";  // Command to send
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <main+0x44>)
 800084c:	f107 0410 	add.w	r4, r7, #16
 8000850:	461d      	mov	r5, r3
 8000852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000854:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000856:	e895 0003 	ldmia.w	r5, {r0, r1}
 800085a:	6020      	str	r0, [r4, #0]
 800085c:	3404      	adds	r4, #4
 800085e:	8021      	strh	r1, [r4, #0]
  uint8_t rxData[10];           // Buffer to store response
  //HAL_UART_Transmit(&huart4, txData, sizeof(txData) - 1, 100);  // Send "AT"
  //HAL_UART_Receive(&huart4, rxData, sizeof(rxData), 100);       // Read response

  printf("Received: %s\r\n", rxData);  // Print response
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4619      	mov	r1, r3
 8000864:	4803      	ldr	r0, [pc, #12]	@ (8000874 <main+0x48>)
 8000866:	f005 f89f 	bl	80059a8 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800086a:	bf00      	nop
 800086c:	e7fd      	b.n	800086a <main+0x3e>
 800086e:	bf00      	nop
 8000870:	080066a8 	.word	0x080066a8
 8000874:	08006698 	.word	0x08006698

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b09c      	sub	sp, #112	@ 0x70
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000882:	224c      	movs	r2, #76	@ 0x4c
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f005 f8e3 	bl	8005a52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2220      	movs	r2, #32
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f005 f8dd 	bl	8005a52 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000898:	4b2f      	ldr	r3, [pc, #188]	@ (8000958 <SystemClock_Config+0xe0>)
 800089a:	f04f 32ff 	mov.w	r2, #4294967295
 800089e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008a2:	2004      	movs	r0, #4
 80008a4:	f000 ff58 	bl	8001758 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008a8:	2300      	movs	r3, #0
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	4b2b      	ldr	r3, [pc, #172]	@ (800095c <SystemClock_Config+0xe4>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a2a      	ldr	r2, [pc, #168]	@ (800095c <SystemClock_Config+0xe4>)
 80008b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b28      	ldr	r3, [pc, #160]	@ (800095c <SystemClock_Config+0xe4>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c4:	bf00      	nop
 80008c6:	4b25      	ldr	r3, [pc, #148]	@ (800095c <SystemClock_Config+0xe4>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008d2:	d1f8      	bne.n	80008c6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d4:	2301      	movs	r3, #1
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	2302      	movs	r3, #2
 80008e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e2:	2302      	movs	r3, #2
 80008e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 80008ea:	2346      	movs	r3, #70	@ 0x46
 80008ec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008f2:	2304      	movs	r3, #4
 80008f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f6:	2302      	movs	r3, #2
 80008f8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008fa:	230c      	movs	r3, #12
 80008fc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008fe:	2300      	movs	r3, #0
 8000900:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090a:	4618      	mov	r0, r3
 800090c:	f000 ff7e 	bl	800180c <HAL_RCC_OscConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000916:	f000 f84f 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091a:	233f      	movs	r3, #63	@ 0x3f
 800091c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2303      	movs	r3, #3
 8000920:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800092a:	2340      	movs	r3, #64	@ 0x40
 800092c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800092e:	2340      	movs	r3, #64	@ 0x40
 8000930:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000936:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000938:	2340      	movs	r3, #64	@ 0x40
 800093a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2106      	movs	r1, #6
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fb95 	bl	8002070 <HAL_RCC_ClockConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800094c:	f000 f834 	bl	80009b8 <Error_Handler>
  }
}
 8000950:	bf00      	nop
 8000952:	3770      	adds	r7, #112	@ 0x70
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	58024400 	.word	0x58024400
 800095c:	58024800 	.word	0x58024800

08000960 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000966:	463b      	mov	r3, r7
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000972:	f000 fcaf 	bl	80012d4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000976:	2301      	movs	r3, #1
 8000978:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800097a:	2300      	movs	r3, #0
 800097c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000982:	231f      	movs	r3, #31
 8000984:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000986:	2387      	movs	r3, #135	@ 0x87
 8000988:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800098a:	2300      	movs	r3, #0
 800098c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800098e:	2300      	movs	r3, #0
 8000990:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000992:	2301      	movs	r3, #1
 8000994:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000996:	2301      	movs	r3, #1
 8000998:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009a2:	463b      	mov	r3, r7
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fccd 	bl	8001344 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009aa:	2004      	movs	r0, #4
 80009ac:	f000 fcaa 	bl	8001304 <HAL_MPU_Enable>

}
 80009b0:	bf00      	nop
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <Error_Handler+0x8>

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <HAL_MspInit+0x30>)
 80009cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80009d0:	4a08      	ldr	r2, [pc, #32]	@ (80009f4 <HAL_MspInit+0x30>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_MspInit+0x30>)
 80009dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	58024400 	.word	0x58024400

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <NMI_Handler+0x4>

08000a00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <MemManage_Handler+0x4>

08000a10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4e:	f000 fb3d 	bl	80010cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b086      	sub	sp, #24
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	60f8      	str	r0, [r7, #12]
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	e00a      	b.n	8000a7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a68:	f3af 8000 	nop.w
 8000a6c:	4601      	mov	r1, r0
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1c5a      	adds	r2, r3, #1
 8000a72:	60ba      	str	r2, [r7, #8]
 8000a74:	b2ca      	uxtb	r2, r1
 8000a76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	dbf0      	blt.n	8000a68 <_read+0x12>
  }

  return len;
 8000a86:	687b      	ldr	r3, [r7, #4]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	e009      	b.n	8000ab6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	60ba      	str	r2, [r7, #8]
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff feac 	bl	8000808 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	697a      	ldr	r2, [r7, #20]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	dbf1      	blt.n	8000aa2 <_write+0x12>
  }
  return len;
 8000abe:	687b      	ldr	r3, [r7, #4]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <_close>:

int _close(int file)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af0:	605a      	str	r2, [r3, #4]
  return 0;
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <_isatty>:

int _isatty(int file)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b08:	2301      	movs	r3, #1
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b38:	4a14      	ldr	r2, [pc, #80]	@ (8000b8c <_sbrk+0x5c>)
 8000b3a:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <_sbrk+0x60>)
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b44:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <_sbrk+0x64>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	@ (8000b98 <_sbrk+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b52:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d207      	bcs.n	8000b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b60:	f004 ffc6 	bl	8005af0 <__errno>
 8000b64:	4603      	mov	r3, r0
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	e009      	b.n	8000b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b70:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b76:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a05      	ldr	r2, [pc, #20]	@ (8000b94 <_sbrk+0x64>)
 8000b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	24100000 	.word	0x24100000
 8000b90:	00000400 	.word	0x00000400
 8000b94:	24000088 	.word	0x24000088
 8000b98:	24000308 	.word	0x24000308

08000b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b3e      	ldr	r3, [pc, #248]	@ (8000c9c <SystemInit+0x100>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba6:	4a3d      	ldr	r2, [pc, #244]	@ (8000c9c <SystemInit+0x100>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca0 <SystemInit+0x104>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f003 030f 	and.w	r3, r3, #15
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d807      	bhi.n	8000bcc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bbc:	4b38      	ldr	r3, [pc, #224]	@ (8000ca0 <SystemInit+0x104>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f023 030f 	bic.w	r3, r3, #15
 8000bc4:	4a36      	ldr	r2, [pc, #216]	@ (8000ca0 <SystemInit+0x104>)
 8000bc6:	f043 0303 	orr.w	r3, r3, #3
 8000bca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bcc:	4b35      	ldr	r3, [pc, #212]	@ (8000ca4 <SystemInit+0x108>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a34      	ldr	r2, [pc, #208]	@ (8000ca4 <SystemInit+0x108>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bd8:	4b32      	ldr	r3, [pc, #200]	@ (8000ca4 <SystemInit+0x108>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bde:	4b31      	ldr	r3, [pc, #196]	@ (8000ca4 <SystemInit+0x108>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	4930      	ldr	r1, [pc, #192]	@ (8000ca4 <SystemInit+0x108>)
 8000be4:	4b30      	ldr	r3, [pc, #192]	@ (8000ca8 <SystemInit+0x10c>)
 8000be6:	4013      	ands	r3, r2
 8000be8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bea:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca0 <SystemInit+0x104>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 030c 	and.w	r3, r3, #12
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d007      	beq.n	8000c06 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca0 <SystemInit+0x104>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f023 030f 	bic.w	r3, r3, #15
 8000bfe:	4a28      	ldr	r2, [pc, #160]	@ (8000ca0 <SystemInit+0x104>)
 8000c00:	f043 0303 	orr.w	r3, r3, #3
 8000c04:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000c06:	4b27      	ldr	r3, [pc, #156]	@ (8000ca4 <SystemInit+0x108>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000c0c:	4b25      	ldr	r3, [pc, #148]	@ (8000ca4 <SystemInit+0x108>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000c12:	4b24      	ldr	r3, [pc, #144]	@ (8000ca4 <SystemInit+0x108>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c18:	4b22      	ldr	r3, [pc, #136]	@ (8000ca4 <SystemInit+0x108>)
 8000c1a:	4a24      	ldr	r2, [pc, #144]	@ (8000cac <SystemInit+0x110>)
 8000c1c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <SystemInit+0x108>)
 8000c20:	4a23      	ldr	r2, [pc, #140]	@ (8000cb0 <SystemInit+0x114>)
 8000c22:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <SystemInit+0x108>)
 8000c26:	4a23      	ldr	r2, [pc, #140]	@ (8000cb4 <SystemInit+0x118>)
 8000c28:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca4 <SystemInit+0x108>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <SystemInit+0x108>)
 8000c32:	4a20      	ldr	r2, [pc, #128]	@ (8000cb4 <SystemInit+0x118>)
 8000c34:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca4 <SystemInit+0x108>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <SystemInit+0x108>)
 8000c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000cb4 <SystemInit+0x118>)
 8000c40:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c42:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <SystemInit+0x108>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c48:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <SystemInit+0x108>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a15      	ldr	r2, [pc, #84]	@ (8000ca4 <SystemInit+0x108>)
 8000c4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c54:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <SystemInit+0x108>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <SystemInit+0x108>)
 8000c5c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000c60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d113      	bne.n	8000c90 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <SystemInit+0x108>)
 8000c6a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000c6e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca4 <SystemInit+0x108>)
 8000c70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c74:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <SystemInit+0x11c>)
 8000c7a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c7e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c80:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <SystemInit+0x108>)
 8000c82:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000c86:	4a07      	ldr	r2, [pc, #28]	@ (8000ca4 <SystemInit+0x108>)
 8000c88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c8c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00
 8000ca0:	52002000 	.word	0x52002000
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cac:	02020200 	.word	0x02020200
 8000cb0:	01ff0000 	.word	0x01ff0000
 8000cb4:	01010280 	.word	0x01010280
 8000cb8:	52004000 	.word	0x52004000

08000cbc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <ExitRun0Mode+0x2c>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	4a08      	ldr	r2, [pc, #32]	@ (8000ce8 <ExitRun0Mode+0x2c>)
 8000cc6:	f023 0302 	bic.w	r3, r3, #2
 8000cca:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000ccc:	bf00      	nop
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <ExitRun0Mode+0x2c>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f9      	beq.n	8000cce <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	58024800 	.word	0x58024800

08000cec <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000cf0:	4b22      	ldr	r3, [pc, #136]	@ (8000d7c <MX_UART4_Init+0x90>)
 8000cf2:	4a23      	ldr	r2, [pc, #140]	@ (8000d80 <MX_UART4_Init+0x94>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <MX_UART4_Init+0x90>)
 8000cf8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000cfc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <MX_UART4_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <MX_UART4_Init+0x90>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <MX_UART4_Init+0x90>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <MX_UART4_Init+0x90>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <MX_UART4_Init+0x90>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <MX_UART4_Init+0x90>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d22:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <MX_UART4_Init+0x90>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d28:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <MX_UART4_Init+0x90>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <MX_UART4_Init+0x90>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d34:	4811      	ldr	r0, [pc, #68]	@ (8000d7c <MX_UART4_Init+0x90>)
 8000d36:	f003 fb07 	bl	8004348 <HAL_UART_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000d40:	f7ff fe3a 	bl	80009b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d44:	2100      	movs	r1, #0
 8000d46:	480d      	ldr	r0, [pc, #52]	@ (8000d7c <MX_UART4_Init+0x90>)
 8000d48:	f004 fca1 	bl	800568e <HAL_UARTEx_SetTxFifoThreshold>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000d52:	f7ff fe31 	bl	80009b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d56:	2100      	movs	r1, #0
 8000d58:	4808      	ldr	r0, [pc, #32]	@ (8000d7c <MX_UART4_Init+0x90>)
 8000d5a:	f004 fcd6 	bl	800570a <HAL_UARTEx_SetRxFifoThreshold>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000d64:	f7ff fe28 	bl	80009b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000d68:	4804      	ldr	r0, [pc, #16]	@ (8000d7c <MX_UART4_Init+0x90>)
 8000d6a:	f004 fc57 	bl	800561c <HAL_UARTEx_DisableFifoMode>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000d74:	f7ff fe20 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	2400008c 	.word	0x2400008c
 8000d80:	40004c00 	.word	0x40004c00

08000d84 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d88:	4b22      	ldr	r3, [pc, #136]	@ (8000e14 <MX_USART3_UART_Init+0x90>)
 8000d8a:	4a23      	ldr	r2, [pc, #140]	@ (8000e18 <MX_USART3_UART_Init+0x94>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <MX_USART3_UART_Init+0x90>)
 8000d90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_USART3_UART_Init+0x90>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <MX_USART3_UART_Init+0x90>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <MX_USART3_UART_Init+0x90>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_USART3_UART_Init+0x90>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <MX_USART3_UART_Init+0x90>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db4:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <MX_USART3_UART_Init+0x90>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dba:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <MX_USART3_UART_Init+0x90>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_USART3_UART_Init+0x90>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <MX_USART3_UART_Init+0x90>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dcc:	4811      	ldr	r0, [pc, #68]	@ (8000e14 <MX_USART3_UART_Init+0x90>)
 8000dce:	f003 fabb 	bl	8004348 <HAL_UART_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000dd8:	f7ff fdee 	bl	80009b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	480d      	ldr	r0, [pc, #52]	@ (8000e14 <MX_USART3_UART_Init+0x90>)
 8000de0:	f004 fc55 	bl	800568e <HAL_UARTEx_SetTxFifoThreshold>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dea:	f7ff fde5 	bl	80009b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dee:	2100      	movs	r1, #0
 8000df0:	4808      	ldr	r0, [pc, #32]	@ (8000e14 <MX_USART3_UART_Init+0x90>)
 8000df2:	f004 fc8a 	bl	800570a <HAL_UARTEx_SetRxFifoThreshold>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dfc:	f7ff fddc 	bl	80009b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e00:	4804      	ldr	r0, [pc, #16]	@ (8000e14 <MX_USART3_UART_Init+0x90>)
 8000e02:	f004 fc0b 	bl	800561c <HAL_UARTEx_DisableFifoMode>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e0c:	f7ff fdd4 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	24000120 	.word	0x24000120
 8000e18:	40004800 	.word	0x40004800

08000e1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0bc      	sub	sp, #240	@ 0xf0
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e34:	f107 0318 	add.w	r3, r7, #24
 8000e38:	22c0      	movs	r2, #192	@ 0xc0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 fe08 	bl	8005a52 <memset>
  if(uartHandle->Instance==UART4)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a4d      	ldr	r2, [pc, #308]	@ (8000f7c <HAL_UART_MspInit+0x160>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d147      	bne.n	8000edc <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e4c:	f04f 0202 	mov.w	r2, #2
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5e:	f107 0318 	add.w	r3, r7, #24
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fc90 	bl	8002788 <HAL_RCCEx_PeriphCLKConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e6e:	f7ff fda3 	bl	80009b8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e72:	4b43      	ldr	r3, [pc, #268]	@ (8000f80 <HAL_UART_MspInit+0x164>)
 8000e74:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e78:	4a41      	ldr	r2, [pc, #260]	@ (8000f80 <HAL_UART_MspInit+0x164>)
 8000e7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e7e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000e82:	4b3f      	ldr	r3, [pc, #252]	@ (8000f80 <HAL_UART_MspInit+0x164>)
 8000e84:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	4b3b      	ldr	r3, [pc, #236]	@ (8000f80 <HAL_UART_MspInit+0x164>)
 8000e92:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e96:	4a3a      	ldr	r2, [pc, #232]	@ (8000f80 <HAL_UART_MspInit+0x164>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ea0:	4b37      	ldr	r3, [pc, #220]	@ (8000f80 <HAL_UART_MspInit+0x164>)
 8000ea2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	482b      	ldr	r0, [pc, #172]	@ (8000f84 <HAL_UART_MspInit+0x168>)
 8000ed6:	f000 fa75 	bl	80013c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000eda:	e04b      	b.n	8000f74 <HAL_UART_MspInit+0x158>
  else if(uartHandle->Instance==USART3)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a29      	ldr	r2, [pc, #164]	@ (8000f88 <HAL_UART_MspInit+0x16c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d146      	bne.n	8000f74 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ee6:	f04f 0202 	mov.w	r2, #2
 8000eea:	f04f 0300 	mov.w	r3, #0
 8000eee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef8:	f107 0318 	add.w	r3, r7, #24
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 fc43 	bl	8002788 <HAL_RCCEx_PeriphCLKConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8000f08:	f7ff fd56 	bl	80009b8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <HAL_UART_MspInit+0x164>)
 8000f0e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000f12:	4a1b      	ldr	r2, [pc, #108]	@ (8000f80 <HAL_UART_MspInit+0x164>)
 8000f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f18:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000f1c:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <HAL_UART_MspInit+0x164>)
 8000f1e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000f22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <HAL_UART_MspInit+0x164>)
 8000f2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f30:	4a13      	ldr	r2, [pc, #76]	@ (8000f80 <HAL_UART_MspInit+0x164>)
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <HAL_UART_MspInit+0x164>)
 8000f3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f40:	f003 0308 	and.w	r3, r3, #8
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f48:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f62:	2307      	movs	r3, #7
 8000f64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f68:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4807      	ldr	r0, [pc, #28]	@ (8000f8c <HAL_UART_MspInit+0x170>)
 8000f70:	f000 fa28 	bl	80013c4 <HAL_GPIO_Init>
}
 8000f74:	bf00      	nop
 8000f76:	37f0      	adds	r7, #240	@ 0xf0
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40004c00 	.word	0x40004c00
 8000f80:	58024400 	.word	0x58024400
 8000f84:	58020400 	.word	0x58020400
 8000f88:	40004800 	.word	0x40004800
 8000f8c:	58020c00 	.word	0x58020c00

08000f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f90:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000fcc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000f94:	f7ff fe92 	bl	8000cbc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f98:	f7ff fe00 	bl	8000b9c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f9c:	480c      	ldr	r0, [pc, #48]	@ (8000fd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f9e:	490d      	ldr	r1, [pc, #52]	@ (8000fd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000fe0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f004 fd9b 	bl	8005afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc6:	f7ff fc31 	bl	800082c <main>
  bx  lr
 8000fca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fcc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000fd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fd4:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000fd8:	0800673c 	.word	0x0800673c
  ldr r2, =_sbss
 8000fdc:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000fe0:	24000304 	.word	0x24000304

08000fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fee:	2003      	movs	r0, #3
 8000ff0:	f000 f93e 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000ff4:	f001 f9f2 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <HAL_Init+0x68>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	0a1b      	lsrs	r3, r3, #8
 8001000:	f003 030f 	and.w	r3, r3, #15
 8001004:	4913      	ldr	r1, [pc, #76]	@ (8001054 <HAL_Init+0x6c>)
 8001006:	5ccb      	ldrb	r3, [r1, r3]
 8001008:	f003 031f 	and.w	r3, r3, #31
 800100c:	fa22 f303 	lsr.w	r3, r2, r3
 8001010:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001012:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <HAL_Init+0x68>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	4a0e      	ldr	r2, [pc, #56]	@ (8001054 <HAL_Init+0x6c>)
 800101c:	5cd3      	ldrb	r3, [r2, r3]
 800101e:	f003 031f 	and.w	r3, r3, #31
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	fa22 f303 	lsr.w	r3, r2, r3
 8001028:	4a0b      	ldr	r2, [pc, #44]	@ (8001058 <HAL_Init+0x70>)
 800102a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800102c:	4a0b      	ldr	r2, [pc, #44]	@ (800105c <HAL_Init+0x74>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001032:	2000      	movs	r0, #0
 8001034:	f000 f814 	bl	8001060 <HAL_InitTick>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e002      	b.n	8001048 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001042:	f7ff fcbf 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	58024400 	.word	0x58024400
 8001054:	080066c0 	.word	0x080066c0
 8001058:	24000004 	.word	0x24000004
 800105c:	24000000 	.word	0x24000000

08001060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001068:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <HAL_InitTick+0x60>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e021      	b.n	80010b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <HAL_InitTick+0x64>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <HAL_InitTick+0x60>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001082:	fbb3 f3f1 	udiv	r3, r3, r1
 8001086:	fbb2 f3f3 	udiv	r3, r2, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f915 	bl	80012ba <HAL_SYSTICK_Config>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e00e      	b.n	80010b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d80a      	bhi.n	80010b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f000 f8ed 	bl	8001286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ac:	4a06      	ldr	r2, [pc, #24]	@ (80010c8 <HAL_InitTick+0x68>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e000      	b.n	80010b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2400000c 	.word	0x2400000c
 80010c4:	24000000 	.word	0x24000000
 80010c8:	24000008 	.word	0x24000008

080010cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_IncTick+0x20>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_IncTick+0x24>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	4a04      	ldr	r2, [pc, #16]	@ (80010f0 <HAL_IncTick+0x24>)
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	2400000c 	.word	0x2400000c
 80010f0:	240001b4 	.word	0x240001b4

080010f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <HAL_GetTick+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	240001b4 	.word	0x240001b4

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <__NVIC_SetPriorityGrouping+0x40>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	4313      	orrs	r3, r2
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	@ (800114c <__NVIC_SetPriorityGrouping+0x40>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00
 8001150:	05fa0000 	.word	0x05fa0000

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	@ (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	@ (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	@ (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	@ 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	@ 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	@ (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f7ff ff8e 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	@ (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff47 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff5e 	bl	8001154 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff90 	bl	80011c4 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5f 	bl	8001170 <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffb2 	bl	800122c <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012d8:	f3bf 8f5f 	dmb	sy
}
 80012dc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012de:	4b07      	ldr	r3, [pc, #28]	@ (80012fc <HAL_MPU_Disable+0x28>)
 80012e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e2:	4a06      	ldr	r2, [pc, #24]	@ (80012fc <HAL_MPU_Disable+0x28>)
 80012e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012e8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012ea:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <HAL_MPU_Disable+0x2c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00
 8001300:	e000ed90 	.word	0xe000ed90

08001304 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800130c:	4a0b      	ldr	r2, [pc, #44]	@ (800133c <HAL_MPU_Enable+0x38>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001316:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <HAL_MPU_Enable+0x3c>)
 8001318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131a:	4a09      	ldr	r2, [pc, #36]	@ (8001340 <HAL_MPU_Enable+0x3c>)
 800131c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001320:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001322:	f3bf 8f4f 	dsb	sy
}
 8001326:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001328:	f3bf 8f6f 	isb	sy
}
 800132c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed90 	.word	0xe000ed90
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	785a      	ldrb	r2, [r3, #1]
 8001350:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <HAL_MPU_ConfigRegion+0x7c>)
 8001352:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001354:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <HAL_MPU_ConfigRegion+0x7c>)
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	4a19      	ldr	r2, [pc, #100]	@ (80013c0 <HAL_MPU_ConfigRegion+0x7c>)
 800135a:	f023 0301 	bic.w	r3, r3, #1
 800135e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001360:	4a17      	ldr	r2, [pc, #92]	@ (80013c0 <HAL_MPU_ConfigRegion+0x7c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7b1b      	ldrb	r3, [r3, #12]
 800136c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7adb      	ldrb	r3, [r3, #11]
 8001372:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001374:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	7a9b      	ldrb	r3, [r3, #10]
 800137a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800137c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7b5b      	ldrb	r3, [r3, #13]
 8001382:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001384:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7b9b      	ldrb	r3, [r3, #14]
 800138a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800138c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7bdb      	ldrb	r3, [r3, #15]
 8001392:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001394:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7a5b      	ldrb	r3, [r3, #9]
 800139a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800139c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7a1b      	ldrb	r3, [r3, #8]
 80013a2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013a4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	7812      	ldrb	r2, [r2, #0]
 80013aa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013ac:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013ae:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013b0:	6113      	str	r3, [r2, #16]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed90 	.word	0xe000ed90

080013c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	@ 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013d2:	4b89      	ldr	r3, [pc, #548]	@ (80015f8 <HAL_GPIO_Init+0x234>)
 80013d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013d6:	e194      	b.n	8001702 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2101      	movs	r1, #1
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 8186 	beq.w	80016fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d005      	beq.n	8001408 <HAL_GPIO_Init+0x44>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d130      	bne.n	800146a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800143e:	2201      	movs	r2, #1
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	f003 0201 	and.w	r2, r3, #1
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b03      	cmp	r3, #3
 8001474:	d017      	beq.n	80014a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	2203      	movs	r2, #3
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d123      	bne.n	80014fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	08da      	lsrs	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3208      	adds	r2, #8
 80014ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	220f      	movs	r2, #15
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	08da      	lsrs	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	69b9      	ldr	r1, [r7, #24]
 80014f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0203 	and.w	r2, r3, #3
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 80e0 	beq.w	80016fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153c:	4b2f      	ldr	r3, [pc, #188]	@ (80015fc <HAL_GPIO_Init+0x238>)
 800153e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001542:	4a2e      	ldr	r2, [pc, #184]	@ (80015fc <HAL_GPIO_Init+0x238>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800154c:	4b2b      	ldr	r3, [pc, #172]	@ (80015fc <HAL_GPIO_Init+0x238>)
 800154e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800155a:	4a29      	ldr	r2, [pc, #164]	@ (8001600 <HAL_GPIO_Init+0x23c>)
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a20      	ldr	r2, [pc, #128]	@ (8001604 <HAL_GPIO_Init+0x240>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d052      	beq.n	800162c <HAL_GPIO_Init+0x268>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a1f      	ldr	r2, [pc, #124]	@ (8001608 <HAL_GPIO_Init+0x244>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d031      	beq.n	80015f2 <HAL_GPIO_Init+0x22e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a1e      	ldr	r2, [pc, #120]	@ (800160c <HAL_GPIO_Init+0x248>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d02b      	beq.n	80015ee <HAL_GPIO_Init+0x22a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a1d      	ldr	r2, [pc, #116]	@ (8001610 <HAL_GPIO_Init+0x24c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d025      	beq.n	80015ea <HAL_GPIO_Init+0x226>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001614 <HAL_GPIO_Init+0x250>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d01f      	beq.n	80015e6 <HAL_GPIO_Init+0x222>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001618 <HAL_GPIO_Init+0x254>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d019      	beq.n	80015e2 <HAL_GPIO_Init+0x21e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a1a      	ldr	r2, [pc, #104]	@ (800161c <HAL_GPIO_Init+0x258>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d013      	beq.n	80015de <HAL_GPIO_Init+0x21a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a19      	ldr	r2, [pc, #100]	@ (8001620 <HAL_GPIO_Init+0x25c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d00d      	beq.n	80015da <HAL_GPIO_Init+0x216>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a18      	ldr	r2, [pc, #96]	@ (8001624 <HAL_GPIO_Init+0x260>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d007      	beq.n	80015d6 <HAL_GPIO_Init+0x212>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a17      	ldr	r2, [pc, #92]	@ (8001628 <HAL_GPIO_Init+0x264>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d101      	bne.n	80015d2 <HAL_GPIO_Init+0x20e>
 80015ce:	2309      	movs	r3, #9
 80015d0:	e02d      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015d2:	230a      	movs	r3, #10
 80015d4:	e02b      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015d6:	2308      	movs	r3, #8
 80015d8:	e029      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015da:	2307      	movs	r3, #7
 80015dc:	e027      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015de:	2306      	movs	r3, #6
 80015e0:	e025      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015e2:	2305      	movs	r3, #5
 80015e4:	e023      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015e6:	2304      	movs	r3, #4
 80015e8:	e021      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015ea:	2303      	movs	r3, #3
 80015ec:	e01f      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e01d      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e01b      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015f6:	bf00      	nop
 80015f8:	58000080 	.word	0x58000080
 80015fc:	58024400 	.word	0x58024400
 8001600:	58000400 	.word	0x58000400
 8001604:	58020000 	.word	0x58020000
 8001608:	58020400 	.word	0x58020400
 800160c:	58020800 	.word	0x58020800
 8001610:	58020c00 	.word	0x58020c00
 8001614:	58021000 	.word	0x58021000
 8001618:	58021400 	.word	0x58021400
 800161c:	58021800 	.word	0x58021800
 8001620:	58021c00 	.word	0x58021c00
 8001624:	58022000 	.word	0x58022000
 8001628:	58022400 	.word	0x58022400
 800162c:	2300      	movs	r3, #0
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4938      	ldr	r1, [pc, #224]	@ (8001720 <HAL_GPIO_Init+0x35c>)
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800164c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001672:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800167a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	3301      	adds	r3, #1
 8001700:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa22 f303 	lsr.w	r3, r2, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	f47f ae63 	bne.w	80013d8 <HAL_GPIO_Init+0x14>
  }
}
 8001712:	bf00      	nop
 8001714:	bf00      	nop
 8001716:	3724      	adds	r7, #36	@ 0x24
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	58000400 	.word	0x58000400

08001724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
 8001730:	4613      	mov	r3, r2
 8001732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001734:	787b      	ldrb	r3, [r7, #1]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800173a:	887a      	ldrh	r2, [r7, #2]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001740:	e003      	b.n	800174a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001742:	887b      	ldrh	r3, [r7, #2]
 8001744:	041a      	lsls	r2, r3, #16
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	619a      	str	r2, [r3, #24]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001760:	4b29      	ldr	r3, [pc, #164]	@ (8001808 <HAL_PWREx_ConfigSupply+0xb0>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	2b06      	cmp	r3, #6
 800176a:	d00a      	beq.n	8001782 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800176c:	4b26      	ldr	r3, [pc, #152]	@ (8001808 <HAL_PWREx_ConfigSupply+0xb0>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	429a      	cmp	r2, r3
 8001778:	d001      	beq.n	800177e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e040      	b.n	8001800 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	e03e      	b.n	8001800 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001782:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <HAL_PWREx_ConfigSupply+0xb0>)
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800178a:	491f      	ldr	r1, [pc, #124]	@ (8001808 <HAL_PWREx_ConfigSupply+0xb0>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4313      	orrs	r3, r2
 8001790:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001792:	f7ff fcaf 	bl	80010f4 <HAL_GetTick>
 8001796:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001798:	e009      	b.n	80017ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800179a:	f7ff fcab 	bl	80010f4 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017a8:	d901      	bls.n	80017ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e028      	b.n	8001800 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017ae:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <HAL_PWREx_ConfigSupply+0xb0>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017ba:	d1ee      	bne.n	800179a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b1e      	cmp	r3, #30
 80017c0:	d008      	beq.n	80017d4 <HAL_PWREx_ConfigSupply+0x7c>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80017c6:	d005      	beq.n	80017d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b1d      	cmp	r3, #29
 80017cc:	d002      	beq.n	80017d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b2d      	cmp	r3, #45	@ 0x2d
 80017d2:	d114      	bne.n	80017fe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80017d4:	f7ff fc8e 	bl	80010f4 <HAL_GetTick>
 80017d8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017da:	e009      	b.n	80017f0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017dc:	f7ff fc8a 	bl	80010f4 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017ea:	d901      	bls.n	80017f0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e007      	b.n	8001800 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017f0:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <HAL_PWREx_ConfigSupply+0xb0>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017fc:	d1ee      	bne.n	80017dc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	58024800 	.word	0x58024800

0800180c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	@ 0x30
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	f000 bc1f 	b.w	800205e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 80b3 	beq.w	8001994 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182e:	4b95      	ldr	r3, [pc, #596]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001836:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001838:	4b92      	ldr	r3, [pc, #584]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 800183a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800183e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001840:	2b10      	cmp	r3, #16
 8001842:	d007      	beq.n	8001854 <HAL_RCC_OscConfig+0x48>
 8001844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001846:	2b18      	cmp	r3, #24
 8001848:	d112      	bne.n	8001870 <HAL_RCC_OscConfig+0x64>
 800184a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d10d      	bne.n	8001870 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	4b8b      	ldr	r3, [pc, #556]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 8098 	beq.w	8001992 <HAL_RCC_OscConfig+0x186>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f040 8093 	bne.w	8001992 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e3f6      	b.n	800205e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001878:	d106      	bne.n	8001888 <HAL_RCC_OscConfig+0x7c>
 800187a:	4b82      	ldr	r3, [pc, #520]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a81      	ldr	r2, [pc, #516]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e058      	b.n	800193a <HAL_RCC_OscConfig+0x12e>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d112      	bne.n	80018b6 <HAL_RCC_OscConfig+0xaa>
 8001890:	4b7c      	ldr	r3, [pc, #496]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a7b      	ldr	r2, [pc, #492]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b79      	ldr	r3, [pc, #484]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a78      	ldr	r2, [pc, #480]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80018a2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	4b76      	ldr	r3, [pc, #472]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a75      	ldr	r2, [pc, #468]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80018ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	e041      	b.n	800193a <HAL_RCC_OscConfig+0x12e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018be:	d112      	bne.n	80018e6 <HAL_RCC_OscConfig+0xda>
 80018c0:	4b70      	ldr	r3, [pc, #448]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6f      	ldr	r2, [pc, #444]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80018c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b6d      	ldr	r3, [pc, #436]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a6c      	ldr	r2, [pc, #432]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80018d2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a69      	ldr	r2, [pc, #420]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80018de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	e029      	b.n	800193a <HAL_RCC_OscConfig+0x12e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80018ee:	d112      	bne.n	8001916 <HAL_RCC_OscConfig+0x10a>
 80018f0:	4b64      	ldr	r3, [pc, #400]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a63      	ldr	r2, [pc, #396]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80018f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	4b61      	ldr	r3, [pc, #388]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a60      	ldr	r2, [pc, #384]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b5e      	ldr	r3, [pc, #376]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a5d      	ldr	r2, [pc, #372]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 800190e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	e011      	b.n	800193a <HAL_RCC_OscConfig+0x12e>
 8001916:	4b5b      	ldr	r3, [pc, #364]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a5a      	ldr	r2, [pc, #360]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 800191c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b58      	ldr	r3, [pc, #352]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a57      	ldr	r2, [pc, #348]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001928:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4b55      	ldr	r3, [pc, #340]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a54      	ldr	r2, [pc, #336]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001934:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001938:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d013      	beq.n	800196a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff fbd7 	bl	80010f4 <HAL_GetTick>
 8001946:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194a:	f7ff fbd3 	bl	80010f4 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b64      	cmp	r3, #100	@ 0x64
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e380      	b.n	800205e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800195c:	4b49      	ldr	r3, [pc, #292]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x13e>
 8001968:	e014      	b.n	8001994 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196a:	f7ff fbc3 	bl	80010f4 <HAL_GetTick>
 800196e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001972:	f7ff fbbf 	bl	80010f4 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b64      	cmp	r3, #100	@ 0x64
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e36c      	b.n	800205e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001984:	4b3f      	ldr	r3, [pc, #252]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0x166>
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001992:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 808c 	beq.w	8001aba <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019a2:	4b38      	ldr	r3, [pc, #224]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019aa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019ac:	4b35      	ldr	r3, [pc, #212]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80019ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d007      	beq.n	80019c8 <HAL_RCC_OscConfig+0x1bc>
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	2b18      	cmp	r3, #24
 80019bc:	d137      	bne.n	8001a2e <HAL_RCC_OscConfig+0x222>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d132      	bne.n	8001a2e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_OscConfig+0x1d4>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e33e      	b.n	800205e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019e0:	4b28      	ldr	r3, [pc, #160]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f023 0219 	bic.w	r2, r3, #25
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4925      	ldr	r1, [pc, #148]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7ff fb7f 	bl	80010f4 <HAL_GetTick>
 80019f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff fb7b 	bl	80010f4 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e328      	b.n	800205e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	061b      	lsls	r3, r3, #24
 8001a26:	4917      	ldr	r1, [pc, #92]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a2c:	e045      	b.n	8001aba <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d028      	beq.n	8001a88 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a36:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 0219 	bic.w	r2, r3, #25
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	4910      	ldr	r1, [pc, #64]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff fb54 	bl	80010f4 <HAL_GetTick>
 8001a4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a50:	f7ff fb50 	bl	80010f4 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e2fd      	b.n	800205e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a62:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6e:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	061b      	lsls	r3, r3, #24
 8001a7c:	4901      	ldr	r1, [pc, #4]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]
 8001a82:	e01a      	b.n	8001aba <HAL_RCC_OscConfig+0x2ae>
 8001a84:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a88:	4b97      	ldr	r3, [pc, #604]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a96      	ldr	r2, [pc, #600]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff fb2e 	bl	80010f4 <HAL_GetTick>
 8001a98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fb2a 	bl	80010f4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e2d7      	b.n	800205e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001aae:	4b8e      	ldr	r3, [pc, #568]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d06a      	beq.n	8001b9c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac6:	4b88      	ldr	r3, [pc, #544]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ace:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ad0:	4b85      	ldr	r3, [pc, #532]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d007      	beq.n	8001aec <HAL_RCC_OscConfig+0x2e0>
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	2b18      	cmp	r3, #24
 8001ae0:	d11b      	bne.n	8001b1a <HAL_RCC_OscConfig+0x30e>
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d116      	bne.n	8001b1a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aec:	4b7e      	ldr	r3, [pc, #504]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_OscConfig+0x2f8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	2b80      	cmp	r3, #128	@ 0x80
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e2ac      	b.n	800205e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b04:	4b78      	ldr	r3, [pc, #480]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	061b      	lsls	r3, r3, #24
 8001b12:	4975      	ldr	r1, [pc, #468]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b18:	e040      	b.n	8001b9c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d023      	beq.n	8001b6a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b22:	4b71      	ldr	r3, [pc, #452]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a70      	ldr	r2, [pc, #448]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2e:	f7ff fae1 	bl	80010f4 <HAL_GetTick>
 8001b32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b36:	f7ff fadd 	bl	80010f4 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e28a      	b.n	800205e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b48:	4b67      	ldr	r3, [pc, #412]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b54:	4b64      	ldr	r3, [pc, #400]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	061b      	lsls	r3, r3, #24
 8001b62:	4961      	ldr	r1, [pc, #388]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	60cb      	str	r3, [r1, #12]
 8001b68:	e018      	b.n	8001b9c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b6a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001b70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b76:	f7ff fabd 	bl	80010f4 <HAL_GetTick>
 8001b7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b7e:	f7ff fab9 	bl	80010f4 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e266      	b.n	800205e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b90:	4b55      	ldr	r3, [pc, #340]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d036      	beq.n	8001c16 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d019      	beq.n	8001be4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bb4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7ff fa9a 	bl	80010f4 <HAL_GetTick>
 8001bc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc4:	f7ff fa96 	bl	80010f4 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e243      	b.n	800205e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bd6:	4b44      	ldr	r3, [pc, #272]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x3b8>
 8001be2:	e018      	b.n	8001c16 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be4:	4b40      	ldr	r3, [pc, #256]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001be8:	4a3f      	ldr	r2, [pc, #252]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001bea:	f023 0301 	bic.w	r3, r3, #1
 8001bee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf0:	f7ff fa80 	bl	80010f4 <HAL_GetTick>
 8001bf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fa7c 	bl	80010f4 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e229      	b.n	800205e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c0a:	4b37      	ldr	r3, [pc, #220]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d036      	beq.n	8001c90 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d019      	beq.n	8001c5e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a2e      	ldr	r2, [pc, #184]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001c30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c36:	f7ff fa5d 	bl	80010f4 <HAL_GetTick>
 8001c3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c3e:	f7ff fa59 	bl	80010f4 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e206      	b.n	800205e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c50:	4b25      	ldr	r3, [pc, #148]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x432>
 8001c5c:	e018      	b.n	8001c90 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a21      	ldr	r2, [pc, #132]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001c64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c6a:	f7ff fa43 	bl	80010f4 <HAL_GetTick>
 8001c6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c72:	f7ff fa3f 	bl	80010f4 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e1ec      	b.n	800205e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c84:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f0      	bne.n	8001c72 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80af 	beq.w	8001dfc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c9e:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <HAL_RCC_OscConfig+0x4e0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a12      	ldr	r2, [pc, #72]	@ (8001cec <HAL_RCC_OscConfig+0x4e0>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001caa:	f7ff fa23 	bl	80010f4 <HAL_GetTick>
 8001cae:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb2:	f7ff fa1f 	bl	80010f4 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b64      	cmp	r3, #100	@ 0x64
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e1cc      	b.n	800205e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cc4:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <HAL_RCC_OscConfig+0x4e0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10b      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x4e4>
 8001cd8:	4b03      	ldr	r3, [pc, #12]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cdc:	4a02      	ldr	r2, [pc, #8]	@ (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ce4:	e05b      	b.n	8001d9e <HAL_RCC_OscConfig+0x592>
 8001ce6:	bf00      	nop
 8001ce8:	58024400 	.word	0x58024400
 8001cec:	58024800 	.word	0x58024800
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d112      	bne.n	8001d1e <HAL_RCC_OscConfig+0x512>
 8001cf8:	4b9d      	ldr	r3, [pc, #628]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cfc:	4a9c      	ldr	r2, [pc, #624]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001cfe:	f023 0301 	bic.w	r3, r3, #1
 8001d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d04:	4b9a      	ldr	r3, [pc, #616]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d08:	4a99      	ldr	r2, [pc, #612]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d10:	4b97      	ldr	r3, [pc, #604]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d14:	4a96      	ldr	r2, [pc, #600]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d16:	f023 0304 	bic.w	r3, r3, #4
 8001d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d1c:	e03f      	b.n	8001d9e <HAL_RCC_OscConfig+0x592>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b05      	cmp	r3, #5
 8001d24:	d112      	bne.n	8001d4c <HAL_RCC_OscConfig+0x540>
 8001d26:	4b92      	ldr	r3, [pc, #584]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d2a:	4a91      	ldr	r2, [pc, #580]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d32:	4b8f      	ldr	r3, [pc, #572]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d36:	4a8e      	ldr	r2, [pc, #568]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d3e:	4b8c      	ldr	r3, [pc, #560]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d42:	4a8b      	ldr	r2, [pc, #556]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d4a:	e028      	b.n	8001d9e <HAL_RCC_OscConfig+0x592>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b85      	cmp	r3, #133	@ 0x85
 8001d52:	d112      	bne.n	8001d7a <HAL_RCC_OscConfig+0x56e>
 8001d54:	4b86      	ldr	r3, [pc, #536]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d58:	4a85      	ldr	r2, [pc, #532]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d60:	4b83      	ldr	r3, [pc, #524]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d64:	4a82      	ldr	r2, [pc, #520]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d6c:	4b80      	ldr	r3, [pc, #512]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d70:	4a7f      	ldr	r2, [pc, #508]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d78:	e011      	b.n	8001d9e <HAL_RCC_OscConfig+0x592>
 8001d7a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7e:	4a7c      	ldr	r2, [pc, #496]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d86:	4b7a      	ldr	r3, [pc, #488]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8a:	4a79      	ldr	r2, [pc, #484]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d8c:	f023 0304 	bic.w	r3, r3, #4
 8001d90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d92:	4b77      	ldr	r3, [pc, #476]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d96:	4a76      	ldr	r2, [pc, #472]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001d98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d9c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d015      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da6:	f7ff f9a5 	bl	80010f4 <HAL_GetTick>
 8001daa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dac:	e00a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f7ff f9a1 	bl	80010f4 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e14c      	b.n	800205e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dc4:	4b6a      	ldr	r3, [pc, #424]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0ee      	beq.n	8001dae <HAL_RCC_OscConfig+0x5a2>
 8001dd0:	e014      	b.n	8001dfc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd2:	f7ff f98f 	bl	80010f4 <HAL_GetTick>
 8001dd6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f7ff f98b 	bl	80010f4 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e136      	b.n	800205e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001df0:	4b5f      	ldr	r3, [pc, #380]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1ee      	bne.n	8001dda <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 812b 	beq.w	800205c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e06:	4b5a      	ldr	r3, [pc, #360]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e0e:	2b18      	cmp	r3, #24
 8001e10:	f000 80bb 	beq.w	8001f8a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	f040 8095 	bne.w	8001f48 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1e:	4b54      	ldr	r3, [pc, #336]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a53      	ldr	r2, [pc, #332]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001e24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7ff f963 	bl	80010f4 <HAL_GetTick>
 8001e2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e32:	f7ff f95f 	bl	80010f4 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e10c      	b.n	800205e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e44:	4b4a      	ldr	r3, [pc, #296]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f0      	bne.n	8001e32 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e50:	4b47      	ldr	r3, [pc, #284]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001e52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e54:	4b47      	ldr	r3, [pc, #284]	@ (8001f74 <HAL_RCC_OscConfig+0x768>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e60:	0112      	lsls	r2, r2, #4
 8001e62:	430a      	orrs	r2, r1
 8001e64:	4942      	ldr	r1, [pc, #264]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	628b      	str	r3, [r1, #40]	@ 0x28
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	025b      	lsls	r3, r3, #9
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e84:	3b01      	subs	r3, #1
 8001e86:	041b      	lsls	r3, r3, #16
 8001e88:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e92:	3b01      	subs	r3, #1
 8001e94:	061b      	lsls	r3, r3, #24
 8001e96:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001e9a:	4935      	ldr	r1, [pc, #212]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001ea0:	4b33      	ldr	r3, [pc, #204]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea4:	4a32      	ldr	r2, [pc, #200]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001ea6:	f023 0301 	bic.w	r3, r3, #1
 8001eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001eac:	4b30      	ldr	r3, [pc, #192]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001eae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eb0:	4b31      	ldr	r3, [pc, #196]	@ (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001eb8:	00d2      	lsls	r2, r2, #3
 8001eba:	492d      	ldr	r1, [pc, #180]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec4:	f023 020c 	bic.w	r2, r3, #12
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	4928      	ldr	r1, [pc, #160]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ed2:	4b27      	ldr	r3, [pc, #156]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed6:	f023 0202 	bic.w	r2, r3, #2
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	4924      	ldr	r1, [pc, #144]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ee4:	4b22      	ldr	r3, [pc, #136]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee8:	4a21      	ldr	r2, [pc, #132]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001efa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001efc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f00:	4a1b      	ldr	r2, [pc, #108]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001f02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001f08:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0c:	4a18      	ldr	r2, [pc, #96]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f14:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a15      	ldr	r2, [pc, #84]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001f1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7ff f8e8 	bl	80010f4 <HAL_GetTick>
 8001f24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f28:	f7ff f8e4 	bl	80010f4 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e091      	b.n	800205e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x71c>
 8001f46:	e089      	b.n	800205c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f48:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a08      	ldr	r2, [pc, #32]	@ (8001f70 <HAL_RCC_OscConfig+0x764>)
 8001f4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff f8ce 	bl	80010f4 <HAL_GetTick>
 8001f58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f5a:	e00f      	b.n	8001f7c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7ff f8ca 	bl	80010f4 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d908      	bls.n	8001f7c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e077      	b.n	800205e <HAL_RCC_OscConfig+0x852>
 8001f6e:	bf00      	nop
 8001f70:	58024400 	.word	0x58024400
 8001f74:	fffffc0c 	.word	0xfffffc0c
 8001f78:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f7c:	4b3a      	ldr	r3, [pc, #232]	@ (8002068 <HAL_RCC_OscConfig+0x85c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1e9      	bne.n	8001f5c <HAL_RCC_OscConfig+0x750>
 8001f88:	e068      	b.n	800205c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f8a:	4b37      	ldr	r3, [pc, #220]	@ (8002068 <HAL_RCC_OscConfig+0x85c>)
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f90:	4b35      	ldr	r3, [pc, #212]	@ (8002068 <HAL_RCC_OscConfig+0x85c>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f94:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d031      	beq.n	8002002 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	f003 0203 	and.w	r2, r3, #3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d12a      	bne.n	8002002 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d122      	bne.n	8002002 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d11a      	bne.n	8002002 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	0a5b      	lsrs	r3, r3, #9
 8001fd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d111      	bne.n	8002002 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	0c1b      	lsrs	r3, r3, #16
 8001fe2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d108      	bne.n	8002002 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	0e1b      	lsrs	r3, r3, #24
 8001ff4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ffc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d001      	beq.n	8002006 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e02b      	b.n	800205e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002006:	4b18      	ldr	r3, [pc, #96]	@ (8002068 <HAL_RCC_OscConfig+0x85c>)
 8002008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800200a:	08db      	lsrs	r3, r3, #3
 800200c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002010:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	429a      	cmp	r2, r3
 800201a:	d01f      	beq.n	800205c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800201c:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <HAL_RCC_OscConfig+0x85c>)
 800201e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002020:	4a11      	ldr	r2, [pc, #68]	@ (8002068 <HAL_RCC_OscConfig+0x85c>)
 8002022:	f023 0301 	bic.w	r3, r3, #1
 8002026:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002028:	f7ff f864 	bl	80010f4 <HAL_GetTick>
 800202c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800202e:	bf00      	nop
 8002030:	f7ff f860 	bl	80010f4 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	4293      	cmp	r3, r2
 800203a:	d0f9      	beq.n	8002030 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800203c:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <HAL_RCC_OscConfig+0x85c>)
 800203e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002040:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <HAL_RCC_OscConfig+0x860>)
 8002042:	4013      	ands	r3, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002048:	00d2      	lsls	r2, r2, #3
 800204a:	4907      	ldr	r1, [pc, #28]	@ (8002068 <HAL_RCC_OscConfig+0x85c>)
 800204c:	4313      	orrs	r3, r2
 800204e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002050:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <HAL_RCC_OscConfig+0x85c>)
 8002052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002054:	4a04      	ldr	r2, [pc, #16]	@ (8002068 <HAL_RCC_OscConfig+0x85c>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3730      	adds	r7, #48	@ 0x30
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	58024400 	.word	0x58024400
 800206c:	ffff0007 	.word	0xffff0007

08002070 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e19c      	b.n	80023be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002084:	4b8a      	ldr	r3, [pc, #552]	@ (80022b0 <HAL_RCC_ClockConfig+0x240>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d910      	bls.n	80020b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b87      	ldr	r3, [pc, #540]	@ (80022b0 <HAL_RCC_ClockConfig+0x240>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 020f 	bic.w	r2, r3, #15
 800209a:	4985      	ldr	r1, [pc, #532]	@ (80022b0 <HAL_RCC_ClockConfig+0x240>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b83      	ldr	r3, [pc, #524]	@ (80022b0 <HAL_RCC_ClockConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e184      	b.n	80023be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d010      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	4b7b      	ldr	r3, [pc, #492]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d908      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020d0:	4b78      	ldr	r3, [pc, #480]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	4975      	ldr	r1, [pc, #468]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d010      	beq.n	8002110 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	4b70      	ldr	r3, [pc, #448]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d908      	bls.n	8002110 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020fe:	4b6d      	ldr	r3, [pc, #436]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	496a      	ldr	r1, [pc, #424]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 800210c:	4313      	orrs	r3, r2
 800210e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b00      	cmp	r3, #0
 800211a:	d010      	beq.n	800213e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699a      	ldr	r2, [r3, #24]
 8002120:	4b64      	ldr	r3, [pc, #400]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002128:	429a      	cmp	r2, r3
 800212a:	d908      	bls.n	800213e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800212c:	4b61      	ldr	r3, [pc, #388]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	495e      	ldr	r1, [pc, #376]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 800213a:	4313      	orrs	r3, r2
 800213c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b00      	cmp	r3, #0
 8002148:	d010      	beq.n	800216c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69da      	ldr	r2, [r3, #28]
 800214e:	4b59      	ldr	r3, [pc, #356]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002156:	429a      	cmp	r2, r3
 8002158:	d908      	bls.n	800216c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800215a:	4b56      	ldr	r3, [pc, #344]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	4953      	ldr	r1, [pc, #332]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002168:	4313      	orrs	r3, r2
 800216a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d010      	beq.n	800219a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	4b4d      	ldr	r3, [pc, #308]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 030f 	and.w	r3, r3, #15
 8002184:	429a      	cmp	r2, r3
 8002186:	d908      	bls.n	800219a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	4b4a      	ldr	r3, [pc, #296]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f023 020f 	bic.w	r2, r3, #15
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4947      	ldr	r1, [pc, #284]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002196:	4313      	orrs	r3, r2
 8002198:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d055      	beq.n	8002252 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80021a6:	4b43      	ldr	r3, [pc, #268]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	4940      	ldr	r1, [pc, #256]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d107      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021c0:	4b3c      	ldr	r3, [pc, #240]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d121      	bne.n	8002210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0f6      	b.n	80023be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021d8:	4b36      	ldr	r3, [pc, #216]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d115      	bne.n	8002210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0ea      	b.n	80023be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d107      	bne.n	8002200 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021f0:	4b30      	ldr	r3, [pc, #192]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d109      	bne.n	8002210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0de      	b.n	80023be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002200:	4b2c      	ldr	r3, [pc, #176]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0d6      	b.n	80023be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002210:	4b28      	ldr	r3, [pc, #160]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f023 0207 	bic.w	r2, r3, #7
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4925      	ldr	r1, [pc, #148]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 800221e:	4313      	orrs	r3, r2
 8002220:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002222:	f7fe ff67 	bl	80010f4 <HAL_GetTick>
 8002226:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002228:	e00a      	b.n	8002240 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222a:	f7fe ff63 	bl	80010f4 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002238:	4293      	cmp	r3, r2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e0be      	b.n	80023be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002240:	4b1c      	ldr	r3, [pc, #112]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	429a      	cmp	r2, r3
 8002250:	d1eb      	bne.n	800222a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d010      	beq.n	8002280 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	4b14      	ldr	r3, [pc, #80]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	429a      	cmp	r2, r3
 800226c:	d208      	bcs.n	8002280 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226e:	4b11      	ldr	r3, [pc, #68]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	f023 020f 	bic.w	r2, r3, #15
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	490e      	ldr	r1, [pc, #56]	@ (80022b4 <HAL_RCC_ClockConfig+0x244>)
 800227c:	4313      	orrs	r3, r2
 800227e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002280:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <HAL_RCC_ClockConfig+0x240>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 030f 	and.w	r3, r3, #15
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d214      	bcs.n	80022b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <HAL_RCC_ClockConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 020f 	bic.w	r2, r3, #15
 8002296:	4906      	ldr	r1, [pc, #24]	@ (80022b0 <HAL_RCC_ClockConfig+0x240>)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b04      	ldr	r3, [pc, #16]	@ (80022b0 <HAL_RCC_ClockConfig+0x240>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e086      	b.n	80023be <HAL_RCC_ClockConfig+0x34e>
 80022b0:	52002000 	.word	0x52002000
 80022b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d010      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	4b3f      	ldr	r3, [pc, #252]	@ (80023c8 <HAL_RCC_ClockConfig+0x358>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d208      	bcs.n	80022e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022d4:	4b3c      	ldr	r3, [pc, #240]	@ (80023c8 <HAL_RCC_ClockConfig+0x358>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	4939      	ldr	r1, [pc, #228]	@ (80023c8 <HAL_RCC_ClockConfig+0x358>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d010      	beq.n	8002314 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	4b34      	ldr	r3, [pc, #208]	@ (80023c8 <HAL_RCC_ClockConfig+0x358>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022fe:	429a      	cmp	r2, r3
 8002300:	d208      	bcs.n	8002314 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002302:	4b31      	ldr	r3, [pc, #196]	@ (80023c8 <HAL_RCC_ClockConfig+0x358>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	492e      	ldr	r1, [pc, #184]	@ (80023c8 <HAL_RCC_ClockConfig+0x358>)
 8002310:	4313      	orrs	r3, r2
 8002312:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b00      	cmp	r3, #0
 800231e:	d010      	beq.n	8002342 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	4b28      	ldr	r3, [pc, #160]	@ (80023c8 <HAL_RCC_ClockConfig+0x358>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800232c:	429a      	cmp	r2, r3
 800232e:	d208      	bcs.n	8002342 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002330:	4b25      	ldr	r3, [pc, #148]	@ (80023c8 <HAL_RCC_ClockConfig+0x358>)
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	4922      	ldr	r1, [pc, #136]	@ (80023c8 <HAL_RCC_ClockConfig+0x358>)
 800233e:	4313      	orrs	r3, r2
 8002340:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0320 	and.w	r3, r3, #32
 800234a:	2b00      	cmp	r3, #0
 800234c:	d010      	beq.n	8002370 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <HAL_RCC_ClockConfig+0x358>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800235a:	429a      	cmp	r2, r3
 800235c:	d208      	bcs.n	8002370 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800235e:	4b1a      	ldr	r3, [pc, #104]	@ (80023c8 <HAL_RCC_ClockConfig+0x358>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	4917      	ldr	r1, [pc, #92]	@ (80023c8 <HAL_RCC_ClockConfig+0x358>)
 800236c:	4313      	orrs	r3, r2
 800236e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002370:	f000 f834 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8002374:	4602      	mov	r2, r0
 8002376:	4b14      	ldr	r3, [pc, #80]	@ (80023c8 <HAL_RCC_ClockConfig+0x358>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	4912      	ldr	r1, [pc, #72]	@ (80023cc <HAL_RCC_ClockConfig+0x35c>)
 8002382:	5ccb      	ldrb	r3, [r1, r3]
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800238e:	4b0e      	ldr	r3, [pc, #56]	@ (80023c8 <HAL_RCC_ClockConfig+0x358>)
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	4a0d      	ldr	r2, [pc, #52]	@ (80023cc <HAL_RCC_ClockConfig+0x35c>)
 8002398:	5cd3      	ldrb	r3, [r2, r3]
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
 80023a4:	4a0a      	ldr	r2, [pc, #40]	@ (80023d0 <HAL_RCC_ClockConfig+0x360>)
 80023a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023a8:	4a0a      	ldr	r2, [pc, #40]	@ (80023d4 <HAL_RCC_ClockConfig+0x364>)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80023ae:	4b0a      	ldr	r3, [pc, #40]	@ (80023d8 <HAL_RCC_ClockConfig+0x368>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fe54 	bl	8001060 <HAL_InitTick>
 80023b8:	4603      	mov	r3, r0
 80023ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	58024400 	.word	0x58024400
 80023cc:	080066c0 	.word	0x080066c0
 80023d0:	24000004 	.word	0x24000004
 80023d4:	24000000 	.word	0x24000000
 80023d8:	24000008 	.word	0x24000008

080023dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	@ 0x24
 80023e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023e2:	4bb3      	ldr	r3, [pc, #716]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023ea:	2b18      	cmp	r3, #24
 80023ec:	f200 8155 	bhi.w	800269a <HAL_RCC_GetSysClockFreq+0x2be>
 80023f0:	a201      	add	r2, pc, #4	@ (adr r2, 80023f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80023f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f6:	bf00      	nop
 80023f8:	0800245d 	.word	0x0800245d
 80023fc:	0800269b 	.word	0x0800269b
 8002400:	0800269b 	.word	0x0800269b
 8002404:	0800269b 	.word	0x0800269b
 8002408:	0800269b 	.word	0x0800269b
 800240c:	0800269b 	.word	0x0800269b
 8002410:	0800269b 	.word	0x0800269b
 8002414:	0800269b 	.word	0x0800269b
 8002418:	08002483 	.word	0x08002483
 800241c:	0800269b 	.word	0x0800269b
 8002420:	0800269b 	.word	0x0800269b
 8002424:	0800269b 	.word	0x0800269b
 8002428:	0800269b 	.word	0x0800269b
 800242c:	0800269b 	.word	0x0800269b
 8002430:	0800269b 	.word	0x0800269b
 8002434:	0800269b 	.word	0x0800269b
 8002438:	08002489 	.word	0x08002489
 800243c:	0800269b 	.word	0x0800269b
 8002440:	0800269b 	.word	0x0800269b
 8002444:	0800269b 	.word	0x0800269b
 8002448:	0800269b 	.word	0x0800269b
 800244c:	0800269b 	.word	0x0800269b
 8002450:	0800269b 	.word	0x0800269b
 8002454:	0800269b 	.word	0x0800269b
 8002458:	0800248f 	.word	0x0800248f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800245c:	4b94      	ldr	r3, [pc, #592]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d009      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002468:	4b91      	ldr	r3, [pc, #580]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	08db      	lsrs	r3, r3, #3
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	4a90      	ldr	r2, [pc, #576]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
 8002478:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800247a:	e111      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800247c:	4b8d      	ldr	r3, [pc, #564]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800247e:	61bb      	str	r3, [r7, #24]
      break;
 8002480:	e10e      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002482:	4b8d      	ldr	r3, [pc, #564]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002484:	61bb      	str	r3, [r7, #24]
      break;
 8002486:	e10b      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002488:	4b8c      	ldr	r3, [pc, #560]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800248a:	61bb      	str	r3, [r7, #24]
      break;
 800248c:	e108      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800248e:	4b88      	ldr	r3, [pc, #544]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002498:	4b85      	ldr	r3, [pc, #532]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800249a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80024a4:	4b82      	ldr	r3, [pc, #520]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80024ae:	4b80      	ldr	r3, [pc, #512]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b2:	08db      	lsrs	r3, r3, #3
 80024b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 80e1 	beq.w	8002694 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	f000 8083 	beq.w	80025e0 <HAL_RCC_GetSysClockFreq+0x204>
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	f200 80a1 	bhi.w	8002624 <HAL_RCC_GetSysClockFreq+0x248>
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x114>
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d056      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x1c0>
 80024ee:	e099      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024f0:	4b6f      	ldr	r3, [pc, #444]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d02d      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024fc:	4b6c      	ldr	r3, [pc, #432]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	08db      	lsrs	r3, r3, #3
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	4a6b      	ldr	r2, [pc, #428]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
 800250c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	ee07 3a90 	vmov	s15, r3
 8002514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002526:	4b62      	ldr	r3, [pc, #392]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252e:	ee07 3a90 	vmov	s15, r3
 8002532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002536:	ed97 6a02 	vldr	s12, [r7, #8]
 800253a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80026c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800253e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800254a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800254e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002552:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002556:	e087      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002562:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80026c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800256a:	4b51      	ldr	r3, [pc, #324]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800257a:	ed97 6a02 	vldr	s12, [r7, #8]
 800257e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80026c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800258a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800258e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002596:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800259a:	e065      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	ee07 3a90 	vmov	s15, r3
 80025a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80026c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ae:	4b40      	ldr	r3, [pc, #256]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b6:	ee07 3a90 	vmov	s15, r3
 80025ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025be:	ed97 6a02 	vldr	s12, [r7, #8]
 80025c2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80026c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025de:	e043      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	ee07 3a90 	vmov	s15, r3
 80025e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80026cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80025ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025f2:	4b2f      	ldr	r3, [pc, #188]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025fa:	ee07 3a90 	vmov	s15, r3
 80025fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002602:	ed97 6a02 	vldr	s12, [r7, #8]
 8002606:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80026c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800260a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800260e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800261a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002622:	e021      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800262e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80026c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002636:	4b1e      	ldr	r3, [pc, #120]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002646:	ed97 6a02 	vldr	s12, [r7, #8]
 800264a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80026c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800264e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800265a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800265e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002662:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002666:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002668:	4b11      	ldr	r3, [pc, #68]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266c:	0a5b      	lsrs	r3, r3, #9
 800266e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002672:	3301      	adds	r3, #1
 8002674:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	ee07 3a90 	vmov	s15, r3
 800267c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002680:	edd7 6a07 	vldr	s13, [r7, #28]
 8002684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800268c:	ee17 3a90 	vmov	r3, s15
 8002690:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002692:	e005      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	61bb      	str	r3, [r7, #24]
      break;
 8002698:	e002      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800269a:	4b07      	ldr	r3, [pc, #28]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800269c:	61bb      	str	r3, [r7, #24]
      break;
 800269e:	bf00      	nop
  }

  return sysclockfreq;
 80026a0:	69bb      	ldr	r3, [r7, #24]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	@ 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	58024400 	.word	0x58024400
 80026b4:	03d09000 	.word	0x03d09000
 80026b8:	003d0900 	.word	0x003d0900
 80026bc:	007a1200 	.word	0x007a1200
 80026c0:	46000000 	.word	0x46000000
 80026c4:	4c742400 	.word	0x4c742400
 80026c8:	4a742400 	.word	0x4a742400
 80026cc:	4af42400 	.word	0x4af42400

080026d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80026d6:	f7ff fe81 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 80026da:	4602      	mov	r2, r0
 80026dc:	4b10      	ldr	r3, [pc, #64]	@ (8002720 <HAL_RCC_GetHCLKFreq+0x50>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	490f      	ldr	r1, [pc, #60]	@ (8002724 <HAL_RCC_GetHCLKFreq+0x54>)
 80026e8:	5ccb      	ldrb	r3, [r1, r3]
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	fa22 f303 	lsr.w	r3, r2, r3
 80026f2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80026f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002720 <HAL_RCC_GetHCLKFreq+0x50>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	4a09      	ldr	r2, [pc, #36]	@ (8002724 <HAL_RCC_GetHCLKFreq+0x54>)
 80026fe:	5cd3      	ldrb	r3, [r2, r3]
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	fa22 f303 	lsr.w	r3, r2, r3
 800270a:	4a07      	ldr	r2, [pc, #28]	@ (8002728 <HAL_RCC_GetHCLKFreq+0x58>)
 800270c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800270e:	4a07      	ldr	r2, [pc, #28]	@ (800272c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002714:	4b04      	ldr	r3, [pc, #16]	@ (8002728 <HAL_RCC_GetHCLKFreq+0x58>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	58024400 	.word	0x58024400
 8002724:	080066c0 	.word	0x080066c0
 8002728:	24000004 	.word	0x24000004
 800272c:	24000000 	.word	0x24000000

08002730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002734:	f7ff ffcc 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <HAL_RCC_GetPCLK1Freq+0x24>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4904      	ldr	r1, [pc, #16]	@ (8002758 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002750:	4618      	mov	r0, r3
 8002752:	bd80      	pop	{r7, pc}
 8002754:	58024400 	.word	0x58024400
 8002758:	080066c0 	.word	0x080066c0

0800275c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002760:	f7ff ffb6 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 8002764:	4602      	mov	r2, r0
 8002766:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	4904      	ldr	r1, [pc, #16]	@ (8002784 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002772:	5ccb      	ldrb	r3, [r1, r3]
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	58024400 	.word	0x58024400
 8002784:	080066c0 	.word	0x080066c0

08002788 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800278c:	b0c8      	sub	sp, #288	@ 0x120
 800278e:	af00      	add	r7, sp, #0
 8002790:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002794:	2300      	movs	r3, #0
 8002796:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800279a:	2300      	movs	r3, #0
 800279c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80027ac:	2500      	movs	r5, #0
 80027ae:	ea54 0305 	orrs.w	r3, r4, r5
 80027b2:	d049      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80027b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80027be:	d02f      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80027c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80027c4:	d828      	bhi.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80027c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027ca:	d01a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80027cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027d0:	d822      	bhi.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80027d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027da:	d007      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027dc:	e01c      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027de:	4ba7      	ldr	r3, [pc, #668]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e2:	4aa6      	ldr	r2, [pc, #664]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027ea:	e01a      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027f0:	3308      	adds	r3, #8
 80027f2:	2102      	movs	r1, #2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 fc43 	bl	8004080 <RCCEx_PLL2_Config>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002800:	e00f      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002802:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002806:	3328      	adds	r3, #40	@ 0x28
 8002808:	2102      	movs	r1, #2
 800280a:	4618      	mov	r0, r3
 800280c:	f001 fcea 	bl	80041e4 <RCCEx_PLL3_Config>
 8002810:	4603      	mov	r3, r0
 8002812:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002816:	e004      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800281e:	e000      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002822:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10a      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800282a:	4b94      	ldr	r3, [pc, #592]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800282c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800282e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002832:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002838:	4a90      	ldr	r2, [pc, #576]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800283a:	430b      	orrs	r3, r1
 800283c:	6513      	str	r3, [r2, #80]	@ 0x50
 800283e:	e003      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002840:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002844:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002850:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002854:	f04f 0900 	mov.w	r9, #0
 8002858:	ea58 0309 	orrs.w	r3, r8, r9
 800285c:	d047      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800285e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002864:	2b04      	cmp	r3, #4
 8002866:	d82a      	bhi.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002868:	a201      	add	r2, pc, #4	@ (adr r2, 8002870 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800286a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286e:	bf00      	nop
 8002870:	08002885 	.word	0x08002885
 8002874:	08002893 	.word	0x08002893
 8002878:	080028a9 	.word	0x080028a9
 800287c:	080028c7 	.word	0x080028c7
 8002880:	080028c7 	.word	0x080028c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002884:	4b7d      	ldr	r3, [pc, #500]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002888:	4a7c      	ldr	r2, [pc, #496]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800288a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800288e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002890:	e01a      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002892:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002896:	3308      	adds	r3, #8
 8002898:	2100      	movs	r1, #0
 800289a:	4618      	mov	r0, r3
 800289c:	f001 fbf0 	bl	8004080 <RCCEx_PLL2_Config>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028a6:	e00f      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80028ac:	3328      	adds	r3, #40	@ 0x28
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f001 fc97 	bl	80041e4 <RCCEx_PLL3_Config>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028bc:	e004      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80028c4:	e000      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80028c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10a      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028d0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028d4:	f023 0107 	bic.w	r1, r3, #7
 80028d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80028dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028de:	4a67      	ldr	r2, [pc, #412]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028e0:	430b      	orrs	r3, r1
 80028e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80028e4:	e003      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80028ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80028ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80028f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80028fa:	f04f 0b00 	mov.w	fp, #0
 80028fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8002902:	d054      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800290e:	d036      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002910:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002914:	d82f      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800291a:	d032      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800291c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002920:	d829      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002922:	2bc0      	cmp	r3, #192	@ 0xc0
 8002924:	d02f      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002926:	2bc0      	cmp	r3, #192	@ 0xc0
 8002928:	d825      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800292a:	2b80      	cmp	r3, #128	@ 0x80
 800292c:	d018      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800292e:	2b80      	cmp	r3, #128	@ 0x80
 8002930:	d821      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002936:	2b40      	cmp	r3, #64	@ 0x40
 8002938:	d007      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800293a:	e01c      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800293c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800293e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002940:	4a4e      	ldr	r2, [pc, #312]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002948:	e01e      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800294a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800294e:	3308      	adds	r3, #8
 8002950:	2100      	movs	r1, #0
 8002952:	4618      	mov	r0, r3
 8002954:	f001 fb94 	bl	8004080 <RCCEx_PLL2_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800295e:	e013      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002964:	3328      	adds	r3, #40	@ 0x28
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f001 fc3b 	bl	80041e4 <RCCEx_PLL3_Config>
 800296e:	4603      	mov	r3, r0
 8002970:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002974:	e008      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800297c:	e004      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800297e:	bf00      	nop
 8002980:	e002      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002982:	bf00      	nop
 8002984:	e000      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002988:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002990:	4b3a      	ldr	r3, [pc, #232]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002994:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002998:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800299c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299e:	4a37      	ldr	r2, [pc, #220]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029a0:	430b      	orrs	r3, r1
 80029a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80029a4:	e003      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80029aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80029ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80029ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80029be:	2300      	movs	r3, #0
 80029c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80029c4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80029c8:	460b      	mov	r3, r1
 80029ca:	4313      	orrs	r3, r2
 80029cc:	d05c      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80029ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80029d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80029d8:	d03b      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80029da:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80029de:	d834      	bhi.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80029e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029e4:	d037      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80029e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029ea:	d82e      	bhi.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80029ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80029f0:	d033      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80029f2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80029f6:	d828      	bhi.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80029f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029fc:	d01a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80029fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a02:	d822      	bhi.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a0c:	d007      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002a0e:	e01c      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a10:	4b1a      	ldr	r3, [pc, #104]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a14:	4a19      	ldr	r2, [pc, #100]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002a1c:	e01e      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a22:	3308      	adds	r3, #8
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f001 fb2a 	bl	8004080 <RCCEx_PLL2_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002a32:	e013      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a38:	3328      	adds	r3, #40	@ 0x28
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f001 fbd1 	bl	80041e4 <RCCEx_PLL3_Config>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002a48:	e008      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002a50:	e004      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002a52:	bf00      	nop
 8002a54:	e002      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002a56:	bf00      	nop
 8002a58:	e000      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10d      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002a64:	4b05      	ldr	r3, [pc, #20]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a68:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8002a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a72:	4a02      	ldr	r2, [pc, #8]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a74:	430b      	orrs	r3, r1
 8002a76:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a78:	e006      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002a7a:	bf00      	nop
 8002a7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002a84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002a94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002a9e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	d03a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aae:	2b30      	cmp	r3, #48	@ 0x30
 8002ab0:	d01f      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002ab2:	2b30      	cmp	r3, #48	@ 0x30
 8002ab4:	d819      	bhi.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	d00c      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	d815      	bhi.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d019      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d111      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ac6:	4bae      	ldr	r3, [pc, #696]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aca:	4aad      	ldr	r2, [pc, #692]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002ad2:	e011      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ad8:	3308      	adds	r3, #8
 8002ada:	2102      	movs	r1, #2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f001 facf 	bl	8004080 <RCCEx_PLL2_Config>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002ae8:	e006      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002af0:	e002      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002af2:	bf00      	nop
 8002af4:	e000      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002af8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10a      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002b00:	4b9f      	ldr	r3, [pc, #636]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b04:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0e:	4a9c      	ldr	r2, [pc, #624]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b10:	430b      	orrs	r3, r1
 8002b12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b14:	e003      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002b1a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002b2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002b34:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	d051      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b48:	d035      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b4e:	d82e      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002b50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b54:	d031      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002b56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b5a:	d828      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002b5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b60:	d01a      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b66:	d822      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b70:	d007      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002b72:	e01c      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b74:	4b82      	ldr	r3, [pc, #520]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b78:	4a81      	ldr	r2, [pc, #516]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b80:	e01c      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b86:	3308      	adds	r3, #8
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 fa78 	bl	8004080 <RCCEx_PLL2_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b96:	e011      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b9c:	3328      	adds	r3, #40	@ 0x28
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f001 fb1f 	bl	80041e4 <RCCEx_PLL3_Config>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002bac:	e006      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002bb4:	e002      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002bb6:	bf00      	nop
 8002bb8:	e000      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10a      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002bc4:	4b6e      	ldr	r3, [pc, #440]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bc8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bd2:	4a6b      	ldr	r2, [pc, #428]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bd8:	e003      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002bde:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002bee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002bf8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	d053      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c0c:	d033      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002c0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c12:	d82c      	bhi.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002c14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c18:	d02f      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002c1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c1e:	d826      	bhi.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002c20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c24:	d02b      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002c26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c2a:	d820      	bhi.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002c2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c30:	d012      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002c32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c36:	d81a      	bhi.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d022      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c40:	d115      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c46:	3308      	adds	r3, #8
 8002c48:	2101      	movs	r1, #1
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f001 fa18 	bl	8004080 <RCCEx_PLL2_Config>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c56:	e015      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c5c:	3328      	adds	r3, #40	@ 0x28
 8002c5e:	2101      	movs	r1, #1
 8002c60:	4618      	mov	r0, r3
 8002c62:	f001 fabf 	bl	80041e4 <RCCEx_PLL3_Config>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002c74:	e006      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002c76:	bf00      	nop
 8002c78:	e004      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002c7a:	bf00      	nop
 8002c7c:	e002      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002c7e:	bf00      	nop
 8002c80:	e000      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c90:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c9a:	4a39      	ldr	r2, [pc, #228]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ca0:	e003      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002ca6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002cb6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002cc0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	d060      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002cd2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8002cd6:	d039      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002cd8:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8002cdc:	d832      	bhi.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ce2:	d035      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ce8:	d82c      	bhi.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cee:	d031      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf4:	d826      	bhi.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002cf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002cfa:	d02d      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002cfc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d00:	d820      	bhi.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002d02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d06:	d012      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002d08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d0c:	d81a      	bhi.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d024      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002d12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d16:	d115      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d1c:	3308      	adds	r3, #8
 8002d1e:	2101      	movs	r1, #1
 8002d20:	4618      	mov	r0, r3
 8002d22:	f001 f9ad 	bl	8004080 <RCCEx_PLL2_Config>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d2c:	e017      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d32:	3328      	adds	r3, #40	@ 0x28
 8002d34:	2101      	movs	r1, #1
 8002d36:	4618      	mov	r0, r3
 8002d38:	f001 fa54 	bl	80041e4 <RCCEx_PLL3_Config>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d42:	e00c      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002d4a:	e008      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d4c:	bf00      	nop
 8002d4e:	e006      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d50:	bf00      	nop
 8002d52:	e004      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d54:	bf00      	nop
 8002d56:	e002      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d58:	bf00      	nop
 8002d5a:	e000      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10e      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d66:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d76:	4a02      	ldr	r2, [pc, #8]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d7c:	e006      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002d7e:	bf00      	nop
 8002d80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002d88:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002d98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002da2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002da6:	460b      	mov	r3, r1
 8002da8:	4313      	orrs	r3, r2
 8002daa:	d037      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002db0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002db2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002db6:	d00e      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002db8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dbc:	d816      	bhi.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d018      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002dc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dc6:	d111      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc8:	4bc4      	ldr	r3, [pc, #784]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dcc:	4ac3      	ldr	r2, [pc, #780]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002dd4:	e00f      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002dda:	3308      	adds	r3, #8
 8002ddc:	2101      	movs	r1, #1
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 f94e 	bl	8004080 <RCCEx_PLL2_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002dea:	e004      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002df2:	e000      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002df6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10a      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002dfe:	4bb7      	ldr	r3, [pc, #732]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e02:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e0c:	4ab3      	ldr	r2, [pc, #716]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e12:	e003      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002e18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e24:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002e28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002e32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	d039      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d81c      	bhi.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002e46:	a201      	add	r2, pc, #4	@ (adr r2, 8002e4c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4c:	08002e89 	.word	0x08002e89
 8002e50:	08002e5d 	.word	0x08002e5d
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	08002e89 	.word	0x08002e89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e5c:	4b9f      	ldr	r3, [pc, #636]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e60:	4a9e      	ldr	r2, [pc, #632]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e68:	e00f      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e6e:	3308      	adds	r3, #8
 8002e70:	2102      	movs	r1, #2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 f904 	bl	8004080 <RCCEx_PLL2_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e7e:	e004      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002e86:	e000      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10a      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e92:	4b92      	ldr	r3, [pc, #584]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e96:	f023 0103 	bic.w	r1, r3, #3
 8002e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea0:	4a8e      	ldr	r2, [pc, #568]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ea2:	430b      	orrs	r3, r1
 8002ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ea6:	e003      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002eac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ec6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f000 8099 	beq.w	8003004 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ed2:	4b83      	ldr	r3, [pc, #524]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a82      	ldr	r2, [pc, #520]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002edc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ede:	f7fe f909 	bl	80010f4 <HAL_GetTick>
 8002ee2:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee8:	f7fe f904 	bl	80010f4 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b64      	cmp	r3, #100	@ 0x64
 8002ef6:	d903      	bls.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002efe:	e005      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f00:	4b77      	ldr	r3, [pc, #476]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0ed      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002f0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d173      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f14:	4b71      	ldr	r3, [pc, #452]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f20:	4053      	eors	r3, r2
 8002f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d015      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f2a:	4b6c      	ldr	r3, [pc, #432]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f32:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f36:	4b69      	ldr	r3, [pc, #420]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3a:	4a68      	ldr	r2, [pc, #416]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f40:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f42:	4b66      	ldr	r3, [pc, #408]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f46:	4a65      	ldr	r2, [pc, #404]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f4c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f4e:	4a63      	ldr	r2, [pc, #396]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f54:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f62:	d118      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fe f8c6 	bl	80010f4 <HAL_GetTick>
 8002f68:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f6c:	e00d      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6e:	f7fe f8c1 	bl	80010f4 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002f78:	1ad2      	subs	r2, r2, r3
 8002f7a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d903      	bls.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8002f88:	e005      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f8a:	4b54      	ldr	r3, [pc, #336]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0eb      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002f96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d129      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002faa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fae:	d10e      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002fb0:	4b4a      	ldr	r3, [pc, #296]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002fc0:	091a      	lsrs	r2, r3, #4
 8002fc2:	4b48      	ldr	r3, [pc, #288]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	4a45      	ldr	r2, [pc, #276]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	6113      	str	r3, [r2, #16]
 8002fcc:	e005      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002fce:	4b43      	ldr	r3, [pc, #268]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	4a42      	ldr	r2, [pc, #264]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fd4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002fd8:	6113      	str	r3, [r2, #16]
 8002fda:	4b40      	ldr	r3, [pc, #256]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fdc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fea:	4a3c      	ldr	r2, [pc, #240]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fec:	430b      	orrs	r3, r1
 8002fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ff0:	e008      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ff2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002ff6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8002ffa:	e003      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ffc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003000:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003004:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	f002 0301 	and.w	r3, r2, #1
 8003010:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003014:	2300      	movs	r3, #0
 8003016:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800301a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800301e:	460b      	mov	r3, r1
 8003020:	4313      	orrs	r3, r2
 8003022:	f000 8090 	beq.w	8003146 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003026:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800302a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800302e:	2b28      	cmp	r3, #40	@ 0x28
 8003030:	d870      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003032:	a201      	add	r2, pc, #4	@ (adr r2, 8003038 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003038:	0800311d 	.word	0x0800311d
 800303c:	08003115 	.word	0x08003115
 8003040:	08003115 	.word	0x08003115
 8003044:	08003115 	.word	0x08003115
 8003048:	08003115 	.word	0x08003115
 800304c:	08003115 	.word	0x08003115
 8003050:	08003115 	.word	0x08003115
 8003054:	08003115 	.word	0x08003115
 8003058:	080030e9 	.word	0x080030e9
 800305c:	08003115 	.word	0x08003115
 8003060:	08003115 	.word	0x08003115
 8003064:	08003115 	.word	0x08003115
 8003068:	08003115 	.word	0x08003115
 800306c:	08003115 	.word	0x08003115
 8003070:	08003115 	.word	0x08003115
 8003074:	08003115 	.word	0x08003115
 8003078:	080030ff 	.word	0x080030ff
 800307c:	08003115 	.word	0x08003115
 8003080:	08003115 	.word	0x08003115
 8003084:	08003115 	.word	0x08003115
 8003088:	08003115 	.word	0x08003115
 800308c:	08003115 	.word	0x08003115
 8003090:	08003115 	.word	0x08003115
 8003094:	08003115 	.word	0x08003115
 8003098:	0800311d 	.word	0x0800311d
 800309c:	08003115 	.word	0x08003115
 80030a0:	08003115 	.word	0x08003115
 80030a4:	08003115 	.word	0x08003115
 80030a8:	08003115 	.word	0x08003115
 80030ac:	08003115 	.word	0x08003115
 80030b0:	08003115 	.word	0x08003115
 80030b4:	08003115 	.word	0x08003115
 80030b8:	0800311d 	.word	0x0800311d
 80030bc:	08003115 	.word	0x08003115
 80030c0:	08003115 	.word	0x08003115
 80030c4:	08003115 	.word	0x08003115
 80030c8:	08003115 	.word	0x08003115
 80030cc:	08003115 	.word	0x08003115
 80030d0:	08003115 	.word	0x08003115
 80030d4:	08003115 	.word	0x08003115
 80030d8:	0800311d 	.word	0x0800311d
 80030dc:	58024400 	.word	0x58024400
 80030e0:	58024800 	.word	0x58024800
 80030e4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030ec:	3308      	adds	r3, #8
 80030ee:	2101      	movs	r1, #1
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 ffc5 	bl	8004080 <RCCEx_PLL2_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030fc:	e00f      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003102:	3328      	adds	r3, #40	@ 0x28
 8003104:	2101      	movs	r1, #1
 8003106:	4618      	mov	r0, r3
 8003108:	f001 f86c 	bl	80041e4 <RCCEx_PLL3_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003112:	e004      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800311a:	e000      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800311c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800311e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10b      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003126:	4bc0      	ldr	r3, [pc, #768]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800312e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003136:	4abc      	ldr	r2, [pc, #752]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003138:	430b      	orrs	r3, r1
 800313a:	6553      	str	r3, [r2, #84]	@ 0x54
 800313c:	e003      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003142:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314e:	f002 0302 	and.w	r3, r2, #2
 8003152:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003156:	2300      	movs	r3, #0
 8003158:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800315c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003160:	460b      	mov	r3, r1
 8003162:	4313      	orrs	r3, r2
 8003164:	d043      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800316a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800316e:	2b05      	cmp	r3, #5
 8003170:	d824      	bhi.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003172:	a201      	add	r2, pc, #4	@ (adr r2, 8003178 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003178:	080031c5 	.word	0x080031c5
 800317c:	08003191 	.word	0x08003191
 8003180:	080031a7 	.word	0x080031a7
 8003184:	080031c5 	.word	0x080031c5
 8003188:	080031c5 	.word	0x080031c5
 800318c:	080031c5 	.word	0x080031c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003194:	3308      	adds	r3, #8
 8003196:	2101      	movs	r1, #1
 8003198:	4618      	mov	r0, r3
 800319a:	f000 ff71 	bl	8004080 <RCCEx_PLL2_Config>
 800319e:	4603      	mov	r3, r0
 80031a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80031a4:	e00f      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031aa:	3328      	adds	r3, #40	@ 0x28
 80031ac:	2101      	movs	r1, #1
 80031ae:	4618      	mov	r0, r3
 80031b0:	f001 f818 	bl	80041e4 <RCCEx_PLL3_Config>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80031ba:	e004      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80031c2:	e000      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80031c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10b      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80031ce:	4b96      	ldr	r3, [pc, #600]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80031d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d2:	f023 0107 	bic.w	r1, r3, #7
 80031d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031de:	4a92      	ldr	r2, [pc, #584]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6553      	str	r3, [r2, #84]	@ 0x54
 80031e4:	e003      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80031ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	f002 0304 	and.w	r3, r2, #4
 80031fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031fe:	2300      	movs	r3, #0
 8003200:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003204:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003208:	460b      	mov	r3, r1
 800320a:	4313      	orrs	r3, r2
 800320c:	d043      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800320e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003212:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003216:	2b05      	cmp	r3, #5
 8003218:	d824      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800321a:	a201      	add	r2, pc, #4	@ (adr r2, 8003220 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003220:	0800326d 	.word	0x0800326d
 8003224:	08003239 	.word	0x08003239
 8003228:	0800324f 	.word	0x0800324f
 800322c:	0800326d 	.word	0x0800326d
 8003230:	0800326d 	.word	0x0800326d
 8003234:	0800326d 	.word	0x0800326d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003238:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800323c:	3308      	adds	r3, #8
 800323e:	2101      	movs	r1, #1
 8003240:	4618      	mov	r0, r3
 8003242:	f000 ff1d 	bl	8004080 <RCCEx_PLL2_Config>
 8003246:	4603      	mov	r3, r0
 8003248:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800324c:	e00f      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800324e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003252:	3328      	adds	r3, #40	@ 0x28
 8003254:	2101      	movs	r1, #1
 8003256:	4618      	mov	r0, r3
 8003258:	f000 ffc4 	bl	80041e4 <RCCEx_PLL3_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003262:	e004      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800326a:	e000      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800326c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800326e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10b      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003276:	4b6c      	ldr	r3, [pc, #432]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327a:	f023 0107 	bic.w	r1, r3, #7
 800327e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003282:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003286:	4a68      	ldr	r2, [pc, #416]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003288:	430b      	orrs	r3, r1
 800328a:	6593      	str	r3, [r2, #88]	@ 0x58
 800328c:	e003      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003292:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003296:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329e:	f002 0320 	and.w	r3, r2, #32
 80032a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032a6:	2300      	movs	r3, #0
 80032a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80032ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80032b0:	460b      	mov	r3, r1
 80032b2:	4313      	orrs	r3, r2
 80032b4:	d055      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80032b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032c2:	d033      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80032c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032c8:	d82c      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80032ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ce:	d02f      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d4:	d826      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80032d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80032da:	d02b      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80032dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80032e0:	d820      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80032e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032e6:	d012      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80032e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032ec:	d81a      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d022      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80032f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032f6:	d115      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032fc:	3308      	adds	r3, #8
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f000 febd 	bl	8004080 <RCCEx_PLL2_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800330c:	e015      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800330e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003312:	3328      	adds	r3, #40	@ 0x28
 8003314:	2102      	movs	r1, #2
 8003316:	4618      	mov	r0, r3
 8003318:	f000 ff64 	bl	80041e4 <RCCEx_PLL3_Config>
 800331c:	4603      	mov	r3, r0
 800331e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003322:	e00a      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800332a:	e006      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800332c:	bf00      	nop
 800332e:	e004      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003330:	bf00      	nop
 8003332:	e002      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003334:	bf00      	nop
 8003336:	e000      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800333a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10b      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003342:	4b39      	ldr	r3, [pc, #228]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003346:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800334a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800334e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003352:	4a35      	ldr	r2, [pc, #212]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003354:	430b      	orrs	r3, r1
 8003356:	6553      	str	r3, [r2, #84]	@ 0x54
 8003358:	e003      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800335e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003362:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800336e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003372:	2300      	movs	r3, #0
 8003374:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003378:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800337c:	460b      	mov	r3, r1
 800337e:	4313      	orrs	r3, r2
 8003380:	d058      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003386:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800338a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800338e:	d033      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003390:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003394:	d82c      	bhi.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800339a:	d02f      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800339c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a0:	d826      	bhi.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80033a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033a6:	d02b      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80033a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033ac:	d820      	bhi.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80033ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033b2:	d012      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80033b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033b8:	d81a      	bhi.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d022      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80033be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c2:	d115      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033c8:	3308      	adds	r3, #8
 80033ca:	2100      	movs	r1, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fe57 	bl	8004080 <RCCEx_PLL2_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80033d8:	e015      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033de:	3328      	adds	r3, #40	@ 0x28
 80033e0:	2102      	movs	r1, #2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fefe 	bl	80041e4 <RCCEx_PLL3_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80033ee:	e00a      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80033f6:	e006      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80033f8:	bf00      	nop
 80033fa:	e004      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80033fc:	bf00      	nop
 80033fe:	e002      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003400:	bf00      	nop
 8003402:	e000      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003406:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10e      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800340e:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003412:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003416:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800341a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800341e:	4a02      	ldr	r2, [pc, #8]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003420:	430b      	orrs	r3, r1
 8003422:	6593      	str	r3, [r2, #88]	@ 0x58
 8003424:	e006      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003426:	bf00      	nop
 8003428:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003430:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003444:	2300      	movs	r3, #0
 8003446:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800344a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800344e:	460b      	mov	r3, r1
 8003450:	4313      	orrs	r3, r2
 8003452:	d055      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003458:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800345c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003460:	d033      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003462:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003466:	d82c      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003468:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800346c:	d02f      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800346e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003472:	d826      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003474:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003478:	d02b      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800347a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800347e:	d820      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003480:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003484:	d012      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003486:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800348a:	d81a      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800348c:	2b00      	cmp	r3, #0
 800348e:	d022      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003490:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003494:	d115      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003496:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800349a:	3308      	adds	r3, #8
 800349c:	2100      	movs	r1, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fdee 	bl	8004080 <RCCEx_PLL2_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80034aa:	e015      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034b0:	3328      	adds	r3, #40	@ 0x28
 80034b2:	2102      	movs	r1, #2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fe95 	bl	80041e4 <RCCEx_PLL3_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80034c0:	e00a      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80034c8:	e006      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80034ca:	bf00      	nop
 80034cc:	e004      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80034ce:	bf00      	nop
 80034d0:	e002      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80034d2:	bf00      	nop
 80034d4:	e000      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80034d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10b      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80034e0:	4ba1      	ldr	r3, [pc, #644]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80034e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034f0:	4a9d      	ldr	r2, [pc, #628]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034f2:	430b      	orrs	r3, r1
 80034f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80034f6:	e003      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003508:	f002 0308 	and.w	r3, r2, #8
 800350c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003510:	2300      	movs	r3, #0
 8003512:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003516:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800351a:	460b      	mov	r3, r1
 800351c:	4313      	orrs	r3, r2
 800351e:	d01e      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003520:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800352c:	d10c      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800352e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003532:	3328      	adds	r3, #40	@ 0x28
 8003534:	2102      	movs	r1, #2
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fe54 	bl	80041e4 <RCCEx_PLL3_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003548:	4b87      	ldr	r3, [pc, #540]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800354a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800354c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003558:	4a83      	ldr	r2, [pc, #524]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800355a:	430b      	orrs	r3, r1
 800355c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800355e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003566:	f002 0310 	and.w	r3, r2, #16
 800356a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800356e:	2300      	movs	r3, #0
 8003570:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003574:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003578:	460b      	mov	r3, r1
 800357a:	4313      	orrs	r3, r2
 800357c:	d01e      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800357e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003582:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800358a:	d10c      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800358c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003590:	3328      	adds	r3, #40	@ 0x28
 8003592:	2102      	movs	r1, #2
 8003594:	4618      	mov	r0, r3
 8003596:	f000 fe25 	bl	80041e4 <RCCEx_PLL3_Config>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035a6:	4b70      	ldr	r3, [pc, #448]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80035ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80035b6:	4a6c      	ldr	r2, [pc, #432]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035b8:	430b      	orrs	r3, r1
 80035ba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80035c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035cc:	2300      	movs	r3, #0
 80035ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035d2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80035d6:	460b      	mov	r3, r1
 80035d8:	4313      	orrs	r3, r2
 80035da:	d03e      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80035dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035e8:	d022      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80035ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035ee:	d81b      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80035f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035f8:	d00b      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80035fa:	e015      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003600:	3308      	adds	r3, #8
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fd3b 	bl	8004080 <RCCEx_PLL2_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003610:	e00f      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003612:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003616:	3328      	adds	r3, #40	@ 0x28
 8003618:	2102      	movs	r1, #2
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fde2 	bl	80041e4 <RCCEx_PLL3_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003626:	e004      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800362e:	e000      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003632:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10b      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800363a:	4b4b      	ldr	r3, [pc, #300]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003642:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003646:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800364a:	4a47      	ldr	r2, [pc, #284]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800364c:	430b      	orrs	r3, r1
 800364e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003650:	e003      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003652:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003656:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800365a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003666:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003668:	2300      	movs	r3, #0
 800366a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800366c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003670:	460b      	mov	r3, r1
 8003672:	4313      	orrs	r3, r2
 8003674:	d03b      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003682:	d01f      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003684:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003688:	d818      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800368a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800368e:	d003      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003690:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003694:	d007      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003696:	e011      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003698:	4b33      	ldr	r3, [pc, #204]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800369a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369c:	4a32      	ldr	r2, [pc, #200]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800369e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80036a4:	e00f      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036aa:	3328      	adds	r3, #40	@ 0x28
 80036ac:	2101      	movs	r1, #1
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fd98 	bl	80041e4 <RCCEx_PLL3_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80036ba:	e004      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80036c2:	e000      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80036c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10b      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036ce:	4b26      	ldr	r3, [pc, #152]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80036d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036de:	4a22      	ldr	r2, [pc, #136]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036e0:	430b      	orrs	r3, r1
 80036e2:	6553      	str	r3, [r2, #84]	@ 0x54
 80036e4:	e003      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80036ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80036fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80036fc:	2300      	movs	r3, #0
 80036fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8003700:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003704:	460b      	mov	r3, r1
 8003706:	4313      	orrs	r3, r2
 8003708:	d034      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800370a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800370e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003718:	d007      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800371a:	e011      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800371c:	4b12      	ldr	r3, [pc, #72]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003720:	4a11      	ldr	r2, [pc, #68]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003728:	e00e      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800372a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800372e:	3308      	adds	r3, #8
 8003730:	2102      	movs	r1, #2
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fca4 	bl	8004080 <RCCEx_PLL2_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800373e:	e003      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003748:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10d      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003750:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003754:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003758:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800375c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800375e:	4a02      	ldr	r2, [pc, #8]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003760:	430b      	orrs	r3, r1
 8003762:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003764:	e006      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003766:	bf00      	nop
 8003768:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003770:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003780:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003782:	2300      	movs	r3, #0
 8003784:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003786:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800378a:	460b      	mov	r3, r1
 800378c:	4313      	orrs	r3, r2
 800378e:	d00c      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003790:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003794:	3328      	adds	r3, #40	@ 0x28
 8003796:	2102      	movs	r1, #2
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fd23 	bl	80041e4 <RCCEx_PLL3_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80037aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80037b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80037b8:	2300      	movs	r3, #0
 80037ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80037bc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80037c0:	460b      	mov	r3, r1
 80037c2:	4313      	orrs	r3, r2
 80037c4:	d038      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80037c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037d2:	d018      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80037d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037d8:	d811      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80037da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037de:	d014      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80037e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037e4:	d80b      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d011      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80037ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ee:	d106      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f0:	4bc3      	ldr	r3, [pc, #780]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	4ac2      	ldr	r2, [pc, #776]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80037fc:	e008      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003804:	e004      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003806:	bf00      	nop
 8003808:	e002      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800380a:	bf00      	nop
 800380c:	e000      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800380e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003810:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10b      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003818:	4bb9      	ldr	r3, [pc, #740]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800381a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003820:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003828:	4ab5      	ldr	r2, [pc, #724]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800382a:	430b      	orrs	r3, r1
 800382c:	6553      	str	r3, [r2, #84]	@ 0x54
 800382e:	e003      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003834:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003838:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003844:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003846:	2300      	movs	r3, #0
 8003848:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800384a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800384e:	460b      	mov	r3, r1
 8003850:	4313      	orrs	r3, r2
 8003852:	d009      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003854:	4baa      	ldr	r3, [pc, #680]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003858:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800385c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003860:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003862:	4aa7      	ldr	r2, [pc, #668]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003864:	430b      	orrs	r3, r1
 8003866:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800386c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003870:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003874:	653b      	str	r3, [r7, #80]	@ 0x50
 8003876:	2300      	movs	r3, #0
 8003878:	657b      	str	r3, [r7, #84]	@ 0x54
 800387a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800387e:	460b      	mov	r3, r1
 8003880:	4313      	orrs	r3, r2
 8003882:	d009      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003884:	4b9e      	ldr	r3, [pc, #632]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003888:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800388c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003892:	4a9b      	ldr	r2, [pc, #620]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003894:	430b      	orrs	r3, r1
 8003896:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80038a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038a6:	2300      	movs	r3, #0
 80038a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038aa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80038ae:	460b      	mov	r3, r1
 80038b0:	4313      	orrs	r3, r2
 80038b2:	d009      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80038b4:	4b92      	ldr	r3, [pc, #584]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b8:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80038bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c2:	4a8f      	ldr	r2, [pc, #572]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038c4:	430b      	orrs	r3, r1
 80038c6:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80038c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80038d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80038d6:	2300      	movs	r3, #0
 80038d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038da:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80038de:	460b      	mov	r3, r1
 80038e0:	4313      	orrs	r3, r2
 80038e2:	d00e      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038e4:	4b86      	ldr	r3, [pc, #536]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	4a85      	ldr	r2, [pc, #532]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80038ee:	6113      	str	r3, [r2, #16]
 80038f0:	4b83      	ldr	r3, [pc, #524]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038f2:	6919      	ldr	r1, [r3, #16]
 80038f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80038fc:	4a80      	ldr	r2, [pc, #512]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038fe:	430b      	orrs	r3, r1
 8003900:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003902:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800390e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003910:	2300      	movs	r3, #0
 8003912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003914:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003918:	460b      	mov	r3, r1
 800391a:	4313      	orrs	r3, r2
 800391c:	d009      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800391e:	4b78      	ldr	r3, [pc, #480]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003922:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003926:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800392a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392c:	4a74      	ldr	r2, [pc, #464]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800392e:	430b      	orrs	r3, r1
 8003930:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003932:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800393e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003940:	2300      	movs	r3, #0
 8003942:	637b      	str	r3, [r7, #52]	@ 0x34
 8003944:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003948:	460b      	mov	r3, r1
 800394a:	4313      	orrs	r3, r2
 800394c:	d00a      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800394e:	4b6c      	ldr	r3, [pc, #432]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003952:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800395a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800395e:	4a68      	ldr	r2, [pc, #416]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003960:	430b      	orrs	r3, r1
 8003962:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003964:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	2100      	movs	r1, #0
 800396e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003976:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800397a:	460b      	mov	r3, r1
 800397c:	4313      	orrs	r3, r2
 800397e:	d011      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003980:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003984:	3308      	adds	r3, #8
 8003986:	2100      	movs	r1, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f000 fb79 	bl	8004080 <RCCEx_PLL2_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003994:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80039a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	2100      	movs	r1, #0
 80039ae:	6239      	str	r1, [r7, #32]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039b6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80039ba:	460b      	mov	r3, r1
 80039bc:	4313      	orrs	r3, r2
 80039be:	d011      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039c4:	3308      	adds	r3, #8
 80039c6:	2101      	movs	r1, #1
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fb59 	bl	8004080 <RCCEx_PLL2_Config>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80039d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80039e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ec:	2100      	movs	r1, #0
 80039ee:	61b9      	str	r1, [r7, #24]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80039fa:	460b      	mov	r3, r1
 80039fc:	4313      	orrs	r3, r2
 80039fe:	d011      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a04:	3308      	adds	r3, #8
 8003a06:	2102      	movs	r1, #2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fb39 	bl	8004080 <RCCEx_PLL2_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003a14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a20:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	6139      	str	r1, [r7, #16]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	d011      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a44:	3328      	adds	r3, #40	@ 0x28
 8003a46:	2100      	movs	r1, #0
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fbcb 	bl	80041e4 <RCCEx_PLL3_Config>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8003a54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a60:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	d011      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a84:	3328      	adds	r3, #40	@ 0x28
 8003a86:	2101      	movs	r1, #1
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fbab 	bl	80041e4 <RCCEx_PLL3_Config>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003a94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003aa0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aac:	2100      	movs	r1, #0
 8003aae:	6039      	str	r1, [r7, #0]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	607b      	str	r3, [r7, #4]
 8003ab6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003aba:	460b      	mov	r3, r1
 8003abc:	4313      	orrs	r3, r2
 8003abe:	d011      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ac4:	3328      	adds	r3, #40	@ 0x28
 8003ac6:	2102      	movs	r1, #2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fb8b 	bl	80041e4 <RCCEx_PLL3_Config>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003ad4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003adc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ae0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8003ae4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e000      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8003af8:	46bd      	mov	sp, r7
 8003afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003afe:	bf00      	nop
 8003b00:	58024400 	.word	0x58024400

08003b04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003b08:	f7fe fde2 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	4b06      	ldr	r3, [pc, #24]	@ (8003b28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	091b      	lsrs	r3, r3, #4
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	4904      	ldr	r1, [pc, #16]	@ (8003b2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003b1a:	5ccb      	ldrb	r3, [r1, r3]
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	58024400 	.word	0x58024400
 8003b2c:	080066c0 	.word	0x080066c0

08003b30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b089      	sub	sp, #36	@ 0x24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b38:	4ba1      	ldr	r3, [pc, #644]	@ (8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003b42:	4b9f      	ldr	r3, [pc, #636]	@ (8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b46:	0b1b      	lsrs	r3, r3, #12
 8003b48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003b4e:	4b9c      	ldr	r3, [pc, #624]	@ (8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b52:	091b      	lsrs	r3, r3, #4
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003b5a:	4b99      	ldr	r3, [pc, #612]	@ (8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5e:	08db      	lsrs	r3, r3, #3
 8003b60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8111 	beq.w	8003da0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	f000 8083 	beq.w	8003c8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	f200 80a1 	bhi.w	8003cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d056      	beq.n	8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003b9a:	e099      	b.n	8003cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b9c:	4b88      	ldr	r3, [pc, #544]	@ (8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d02d      	beq.n	8003c04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ba8:	4b85      	ldr	r3, [pc, #532]	@ (8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	08db      	lsrs	r3, r3, #3
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	4a84      	ldr	r2, [pc, #528]	@ (8003dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	ee07 3a90 	vmov	s15, r3
 8003bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd2:	4b7b      	ldr	r3, [pc, #492]	@ (8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003be6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c02:	e087      	b.n	8003d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003dcc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c16:	4b6a      	ldr	r3, [pc, #424]	@ (8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c46:	e065      	b.n	8003d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	ee07 3a90 	vmov	s15, r3
 8003c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c5a:	4b59      	ldr	r3, [pc, #356]	@ (8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c8a:	e043      	b.n	8003d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c9e:	4b48      	ldr	r3, [pc, #288]	@ (8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cce:	e021      	b.n	8003d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce2:	4b37      	ldr	r3, [pc, #220]	@ (8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cea:	ee07 3a90 	vmov	s15, r3
 8003cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cf6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003d14:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d18:	0a5b      	lsrs	r3, r3, #9
 8003d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d3a:	ee17 2a90 	vmov	r2, s15
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003d42:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d46:	0c1b      	lsrs	r3, r3, #16
 8003d48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d4c:	ee07 3a90 	vmov	s15, r3
 8003d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d68:	ee17 2a90 	vmov	r2, s15
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003d70:	4b13      	ldr	r3, [pc, #76]	@ (8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d74:	0e1b      	lsrs	r3, r3, #24
 8003d76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d96:	ee17 2a90 	vmov	r2, s15
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003d9e:	e008      	b.n	8003db2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	609a      	str	r2, [r3, #8]
}
 8003db2:	bf00      	nop
 8003db4:	3724      	adds	r7, #36	@ 0x24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	58024400 	.word	0x58024400
 8003dc4:	03d09000 	.word	0x03d09000
 8003dc8:	46000000 	.word	0x46000000
 8003dcc:	4c742400 	.word	0x4c742400
 8003dd0:	4a742400 	.word	0x4a742400
 8003dd4:	4af42400 	.word	0x4af42400

08003dd8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b089      	sub	sp, #36	@ 0x24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003de0:	4ba1      	ldr	r3, [pc, #644]	@ (8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003dea:	4b9f      	ldr	r3, [pc, #636]	@ (8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dee:	0d1b      	lsrs	r3, r3, #20
 8003df0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003df4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003df6:	4b9c      	ldr	r3, [pc, #624]	@ (8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003e02:	4b99      	ldr	r3, [pc, #612]	@ (8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e06:	08db      	lsrs	r3, r3, #3
 8003e08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	fb02 f303 	mul.w	r3, r2, r3
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8111 	beq.w	8004048 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	f000 8083 	beq.w	8003f34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	f200 80a1 	bhi.w	8003f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d056      	beq.n	8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003e42:	e099      	b.n	8003f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e44:	4b88      	ldr	r3, [pc, #544]	@ (8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d02d      	beq.n	8003eac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e50:	4b85      	ldr	r3, [pc, #532]	@ (8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	08db      	lsrs	r3, r3, #3
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	4a84      	ldr	r2, [pc, #528]	@ (800406c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e60:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	ee07 3a90 	vmov	s15, r3
 8003e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e7a:	4b7b      	ldr	r3, [pc, #492]	@ (8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003eaa:	e087      	b.n	8003fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004074 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ebe:	4b6a      	ldr	r3, [pc, #424]	@ (8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ed2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eee:	e065      	b.n	8003fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	ee07 3a90 	vmov	s15, r3
 8003ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003efa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f02:	4b59      	ldr	r3, [pc, #356]	@ (8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f32:	e043      	b.n	8003fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800407c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f46:	4b48      	ldr	r3, [pc, #288]	@ (8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f76:	e021      	b.n	8003fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f8a:	4b37      	ldr	r3, [pc, #220]	@ (8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003faa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc0:	0a5b      	lsrs	r3, r3, #9
 8003fc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fe2:	ee17 2a90 	vmov	r2, s15
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003fea:	4b1f      	ldr	r3, [pc, #124]	@ (8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fee:	0c1b      	lsrs	r3, r3, #16
 8003ff0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ff4:	ee07 3a90 	vmov	s15, r3
 8003ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ffc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004000:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004004:	edd7 6a07 	vldr	s13, [r7, #28]
 8004008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800400c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004010:	ee17 2a90 	vmov	r2, s15
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004018:	4b13      	ldr	r3, [pc, #76]	@ (8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800401a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401c:	0e1b      	lsrs	r3, r3, #24
 800401e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800402e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004032:	edd7 6a07 	vldr	s13, [r7, #28]
 8004036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800403a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800403e:	ee17 2a90 	vmov	r2, s15
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004046:	e008      	b.n	800405a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	609a      	str	r2, [r3, #8]
}
 800405a:	bf00      	nop
 800405c:	3724      	adds	r7, #36	@ 0x24
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	58024400 	.word	0x58024400
 800406c:	03d09000 	.word	0x03d09000
 8004070:	46000000 	.word	0x46000000
 8004074:	4c742400 	.word	0x4c742400
 8004078:	4a742400 	.word	0x4a742400
 800407c:	4af42400 	.word	0x4af42400

08004080 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800408e:	4b53      	ldr	r3, [pc, #332]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 8004090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	2b03      	cmp	r3, #3
 8004098:	d101      	bne.n	800409e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e099      	b.n	80041d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800409e:	4b4f      	ldr	r3, [pc, #316]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a4e      	ldr	r2, [pc, #312]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 80040a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80040a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040aa:	f7fd f823 	bl	80010f4 <HAL_GetTick>
 80040ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80040b0:	e008      	b.n	80040c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80040b2:	f7fd f81f 	bl	80010f4 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e086      	b.n	80041d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80040c4:	4b45      	ldr	r3, [pc, #276]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1f0      	bne.n	80040b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80040d0:	4b42      	ldr	r3, [pc, #264]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 80040d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	031b      	lsls	r3, r3, #12
 80040de:	493f      	ldr	r1, [pc, #252]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	025b      	lsls	r3, r3, #9
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	3b01      	subs	r3, #1
 8004100:	041b      	lsls	r3, r3, #16
 8004102:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	3b01      	subs	r3, #1
 800410e:	061b      	lsls	r3, r3, #24
 8004110:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004114:	4931      	ldr	r1, [pc, #196]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 8004116:	4313      	orrs	r3, r2
 8004118:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800411a:	4b30      	ldr	r3, [pc, #192]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 800411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	492d      	ldr	r1, [pc, #180]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 8004128:	4313      	orrs	r3, r2
 800412a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800412c:	4b2b      	ldr	r3, [pc, #172]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 800412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004130:	f023 0220 	bic.w	r2, r3, #32
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	4928      	ldr	r1, [pc, #160]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 800413a:	4313      	orrs	r3, r2
 800413c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800413e:	4b27      	ldr	r3, [pc, #156]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 8004140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004142:	4a26      	ldr	r2, [pc, #152]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 8004144:	f023 0310 	bic.w	r3, r3, #16
 8004148:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800414a:	4b24      	ldr	r3, [pc, #144]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 800414c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800414e:	4b24      	ldr	r3, [pc, #144]	@ (80041e0 <RCCEx_PLL2_Config+0x160>)
 8004150:	4013      	ands	r3, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	69d2      	ldr	r2, [r2, #28]
 8004156:	00d2      	lsls	r2, r2, #3
 8004158:	4920      	ldr	r1, [pc, #128]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 800415a:	4313      	orrs	r3, r2
 800415c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800415e:	4b1f      	ldr	r3, [pc, #124]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 8004160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004162:	4a1e      	ldr	r2, [pc, #120]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 8004164:	f043 0310 	orr.w	r3, r3, #16
 8004168:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d106      	bne.n	800417e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004170:	4b1a      	ldr	r3, [pc, #104]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 8004172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004174:	4a19      	ldr	r2, [pc, #100]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 8004176:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800417a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800417c:	e00f      	b.n	800419e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d106      	bne.n	8004192 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004184:	4b15      	ldr	r3, [pc, #84]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 8004186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004188:	4a14      	ldr	r2, [pc, #80]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 800418a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800418e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004190:	e005      	b.n	800419e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004192:	4b12      	ldr	r3, [pc, #72]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 8004194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004196:	4a11      	ldr	r2, [pc, #68]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 8004198:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800419c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800419e:	4b0f      	ldr	r3, [pc, #60]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a0e      	ldr	r2, [pc, #56]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 80041a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041aa:	f7fc ffa3 	bl	80010f4 <HAL_GetTick>
 80041ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80041b0:	e008      	b.n	80041c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80041b2:	f7fc ff9f 	bl	80010f4 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e006      	b.n	80041d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80041c4:	4b05      	ldr	r3, [pc, #20]	@ (80041dc <RCCEx_PLL2_Config+0x15c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	58024400 	.word	0x58024400
 80041e0:	ffff0007 	.word	0xffff0007

080041e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041f2:	4b53      	ldr	r3, [pc, #332]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 80041f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d101      	bne.n	8004202 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e099      	b.n	8004336 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004202:	4b4f      	ldr	r3, [pc, #316]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a4e      	ldr	r2, [pc, #312]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 8004208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800420c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420e:	f7fc ff71 	bl	80010f4 <HAL_GetTick>
 8004212:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004214:	e008      	b.n	8004228 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004216:	f7fc ff6d 	bl	80010f4 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e086      	b.n	8004336 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004228:	4b45      	ldr	r3, [pc, #276]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1f0      	bne.n	8004216 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004234:	4b42      	ldr	r3, [pc, #264]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 8004236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004238:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	051b      	lsls	r3, r3, #20
 8004242:	493f      	ldr	r1, [pc, #252]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 8004244:	4313      	orrs	r3, r2
 8004246:	628b      	str	r3, [r1, #40]	@ 0x28
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	3b01      	subs	r3, #1
 800424e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	3b01      	subs	r3, #1
 8004258:	025b      	lsls	r3, r3, #9
 800425a:	b29b      	uxth	r3, r3
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	3b01      	subs	r3, #1
 8004264:	041b      	lsls	r3, r3, #16
 8004266:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	3b01      	subs	r3, #1
 8004272:	061b      	lsls	r3, r3, #24
 8004274:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004278:	4931      	ldr	r1, [pc, #196]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 800427a:	4313      	orrs	r3, r2
 800427c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800427e:	4b30      	ldr	r3, [pc, #192]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 8004280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004282:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	492d      	ldr	r1, [pc, #180]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 800428c:	4313      	orrs	r3, r2
 800428e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004290:	4b2b      	ldr	r3, [pc, #172]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 8004292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004294:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	4928      	ldr	r1, [pc, #160]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80042a2:	4b27      	ldr	r3, [pc, #156]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 80042a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a6:	4a26      	ldr	r2, [pc, #152]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 80042a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80042ae:	4b24      	ldr	r3, [pc, #144]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 80042b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042b2:	4b24      	ldr	r3, [pc, #144]	@ (8004344 <RCCEx_PLL3_Config+0x160>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	69d2      	ldr	r2, [r2, #28]
 80042ba:	00d2      	lsls	r2, r2, #3
 80042bc:	4920      	ldr	r1, [pc, #128]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80042c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 80042c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 80042c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d106      	bne.n	80042e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80042d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	4a19      	ldr	r2, [pc, #100]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 80042da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042e0:	e00f      	b.n	8004302 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d106      	bne.n	80042f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80042e8:	4b15      	ldr	r3, [pc, #84]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 80042ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ec:	4a14      	ldr	r2, [pc, #80]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 80042ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042f4:	e005      	b.n	8004302 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80042f6:	4b12      	ldr	r3, [pc, #72]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 80042f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fa:	4a11      	ldr	r2, [pc, #68]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 80042fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004300:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004302:	4b0f      	ldr	r3, [pc, #60]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a0e      	ldr	r2, [pc, #56]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 8004308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800430c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430e:	f7fc fef1 	bl	80010f4 <HAL_GetTick>
 8004312:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004314:	e008      	b.n	8004328 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004316:	f7fc feed 	bl	80010f4 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e006      	b.n	8004336 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004328:	4b05      	ldr	r3, [pc, #20]	@ (8004340 <RCCEx_PLL3_Config+0x15c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f0      	beq.n	8004316 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	58024400 	.word	0x58024400
 8004344:	ffff0007 	.word	0xffff0007

08004348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e042      	b.n	80043e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7fc fd55 	bl	8000e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2224      	movs	r2, #36	@ 0x24
 8004376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0201 	bic.w	r2, r2, #1
 8004388:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 ff22 	bl	80051dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f8b3 	bl	8004504 <UART_SetConfig>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e01b      	b.n	80043e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 ffa1 	bl	8005320 <UART_CheckIdleState>
 80043de:	4603      	mov	r3, r0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08a      	sub	sp, #40	@ 0x28
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	4613      	mov	r3, r2
 80043f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d17b      	bne.n	80044fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <HAL_UART_Transmit+0x26>
 8004408:	88fb      	ldrh	r3, [r7, #6]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e074      	b.n	80044fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2221      	movs	r2, #33	@ 0x21
 800441e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004422:	f7fc fe67 	bl	80010f4 <HAL_GetTick>
 8004426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	88fa      	ldrh	r2, [r7, #6]
 800442c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	88fa      	ldrh	r2, [r7, #6]
 8004434:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004440:	d108      	bne.n	8004454 <HAL_UART_Transmit+0x6c>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d104      	bne.n	8004454 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	e003      	b.n	800445c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004458:	2300      	movs	r3, #0
 800445a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800445c:	e030      	b.n	80044c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2200      	movs	r2, #0
 8004466:	2180      	movs	r1, #128	@ 0x80
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f001 f803 	bl	8005474 <UART_WaitOnFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e03d      	b.n	80044fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10b      	bne.n	800449e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004494:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	3302      	adds	r3, #2
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	e007      	b.n	80044ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	3301      	adds	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1c8      	bne.n	800445e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2200      	movs	r2, #0
 80044d4:	2140      	movs	r1, #64	@ 0x40
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 ffcc 	bl	8005474 <UART_WaitOnFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e006      	b.n	80044fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	e000      	b.n	80044fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80044fa:	2302      	movs	r3, #2
  }
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3720      	adds	r7, #32
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004508:	b092      	sub	sp, #72	@ 0x48
 800450a:	af00      	add	r7, sp, #0
 800450c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	431a      	orrs	r2, r3
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	431a      	orrs	r2, r3
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	4313      	orrs	r3, r2
 800452a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4bbe      	ldr	r3, [pc, #760]	@ (800482c <UART_SetConfig+0x328>)
 8004534:	4013      	ands	r3, r2
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800453c:	430b      	orrs	r3, r1
 800453e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4ab3      	ldr	r2, [pc, #716]	@ (8004830 <UART_SetConfig+0x32c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800456c:	4313      	orrs	r3, r2
 800456e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	4baf      	ldr	r3, [pc, #700]	@ (8004834 <UART_SetConfig+0x330>)
 8004578:	4013      	ands	r3, r2
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004580:	430b      	orrs	r3, r1
 8004582:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458a:	f023 010f 	bic.w	r1, r3, #15
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4aa6      	ldr	r2, [pc, #664]	@ (8004838 <UART_SetConfig+0x334>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d177      	bne.n	8004694 <UART_SetConfig+0x190>
 80045a4:	4ba5      	ldr	r3, [pc, #660]	@ (800483c <UART_SetConfig+0x338>)
 80045a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045ac:	2b28      	cmp	r3, #40	@ 0x28
 80045ae:	d86d      	bhi.n	800468c <UART_SetConfig+0x188>
 80045b0:	a201      	add	r2, pc, #4	@ (adr r2, 80045b8 <UART_SetConfig+0xb4>)
 80045b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b6:	bf00      	nop
 80045b8:	0800465d 	.word	0x0800465d
 80045bc:	0800468d 	.word	0x0800468d
 80045c0:	0800468d 	.word	0x0800468d
 80045c4:	0800468d 	.word	0x0800468d
 80045c8:	0800468d 	.word	0x0800468d
 80045cc:	0800468d 	.word	0x0800468d
 80045d0:	0800468d 	.word	0x0800468d
 80045d4:	0800468d 	.word	0x0800468d
 80045d8:	08004665 	.word	0x08004665
 80045dc:	0800468d 	.word	0x0800468d
 80045e0:	0800468d 	.word	0x0800468d
 80045e4:	0800468d 	.word	0x0800468d
 80045e8:	0800468d 	.word	0x0800468d
 80045ec:	0800468d 	.word	0x0800468d
 80045f0:	0800468d 	.word	0x0800468d
 80045f4:	0800468d 	.word	0x0800468d
 80045f8:	0800466d 	.word	0x0800466d
 80045fc:	0800468d 	.word	0x0800468d
 8004600:	0800468d 	.word	0x0800468d
 8004604:	0800468d 	.word	0x0800468d
 8004608:	0800468d 	.word	0x0800468d
 800460c:	0800468d 	.word	0x0800468d
 8004610:	0800468d 	.word	0x0800468d
 8004614:	0800468d 	.word	0x0800468d
 8004618:	08004675 	.word	0x08004675
 800461c:	0800468d 	.word	0x0800468d
 8004620:	0800468d 	.word	0x0800468d
 8004624:	0800468d 	.word	0x0800468d
 8004628:	0800468d 	.word	0x0800468d
 800462c:	0800468d 	.word	0x0800468d
 8004630:	0800468d 	.word	0x0800468d
 8004634:	0800468d 	.word	0x0800468d
 8004638:	0800467d 	.word	0x0800467d
 800463c:	0800468d 	.word	0x0800468d
 8004640:	0800468d 	.word	0x0800468d
 8004644:	0800468d 	.word	0x0800468d
 8004648:	0800468d 	.word	0x0800468d
 800464c:	0800468d 	.word	0x0800468d
 8004650:	0800468d 	.word	0x0800468d
 8004654:	0800468d 	.word	0x0800468d
 8004658:	08004685 	.word	0x08004685
 800465c:	2301      	movs	r3, #1
 800465e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004662:	e326      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004664:	2304      	movs	r3, #4
 8004666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800466a:	e322      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 800466c:	2308      	movs	r3, #8
 800466e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004672:	e31e      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004674:	2310      	movs	r3, #16
 8004676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800467a:	e31a      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 800467c:	2320      	movs	r3, #32
 800467e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004682:	e316      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004684:	2340      	movs	r3, #64	@ 0x40
 8004686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800468a:	e312      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 800468c:	2380      	movs	r3, #128	@ 0x80
 800468e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004692:	e30e      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a69      	ldr	r2, [pc, #420]	@ (8004840 <UART_SetConfig+0x33c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d130      	bne.n	8004700 <UART_SetConfig+0x1fc>
 800469e:	4b67      	ldr	r3, [pc, #412]	@ (800483c <UART_SetConfig+0x338>)
 80046a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	2b05      	cmp	r3, #5
 80046a8:	d826      	bhi.n	80046f8 <UART_SetConfig+0x1f4>
 80046aa:	a201      	add	r2, pc, #4	@ (adr r2, 80046b0 <UART_SetConfig+0x1ac>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	080046c9 	.word	0x080046c9
 80046b4:	080046d1 	.word	0x080046d1
 80046b8:	080046d9 	.word	0x080046d9
 80046bc:	080046e1 	.word	0x080046e1
 80046c0:	080046e9 	.word	0x080046e9
 80046c4:	080046f1 	.word	0x080046f1
 80046c8:	2300      	movs	r3, #0
 80046ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ce:	e2f0      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80046d0:	2304      	movs	r3, #4
 80046d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046d6:	e2ec      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80046d8:	2308      	movs	r3, #8
 80046da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046de:	e2e8      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80046e0:	2310      	movs	r3, #16
 80046e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046e6:	e2e4      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80046e8:	2320      	movs	r3, #32
 80046ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ee:	e2e0      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80046f0:	2340      	movs	r3, #64	@ 0x40
 80046f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046f6:	e2dc      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80046f8:	2380      	movs	r3, #128	@ 0x80
 80046fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046fe:	e2d8      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a4f      	ldr	r2, [pc, #316]	@ (8004844 <UART_SetConfig+0x340>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d130      	bne.n	800476c <UART_SetConfig+0x268>
 800470a:	4b4c      	ldr	r3, [pc, #304]	@ (800483c <UART_SetConfig+0x338>)
 800470c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	2b05      	cmp	r3, #5
 8004714:	d826      	bhi.n	8004764 <UART_SetConfig+0x260>
 8004716:	a201      	add	r2, pc, #4	@ (adr r2, 800471c <UART_SetConfig+0x218>)
 8004718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471c:	08004735 	.word	0x08004735
 8004720:	0800473d 	.word	0x0800473d
 8004724:	08004745 	.word	0x08004745
 8004728:	0800474d 	.word	0x0800474d
 800472c:	08004755 	.word	0x08004755
 8004730:	0800475d 	.word	0x0800475d
 8004734:	2300      	movs	r3, #0
 8004736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800473a:	e2ba      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 800473c:	2304      	movs	r3, #4
 800473e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004742:	e2b6      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004744:	2308      	movs	r3, #8
 8004746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800474a:	e2b2      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 800474c:	2310      	movs	r3, #16
 800474e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004752:	e2ae      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004754:	2320      	movs	r3, #32
 8004756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800475a:	e2aa      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 800475c:	2340      	movs	r3, #64	@ 0x40
 800475e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004762:	e2a6      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004764:	2380      	movs	r3, #128	@ 0x80
 8004766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800476a:	e2a2      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a35      	ldr	r2, [pc, #212]	@ (8004848 <UART_SetConfig+0x344>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d130      	bne.n	80047d8 <UART_SetConfig+0x2d4>
 8004776:	4b31      	ldr	r3, [pc, #196]	@ (800483c <UART_SetConfig+0x338>)
 8004778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	2b05      	cmp	r3, #5
 8004780:	d826      	bhi.n	80047d0 <UART_SetConfig+0x2cc>
 8004782:	a201      	add	r2, pc, #4	@ (adr r2, 8004788 <UART_SetConfig+0x284>)
 8004784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004788:	080047a1 	.word	0x080047a1
 800478c:	080047a9 	.word	0x080047a9
 8004790:	080047b1 	.word	0x080047b1
 8004794:	080047b9 	.word	0x080047b9
 8004798:	080047c1 	.word	0x080047c1
 800479c:	080047c9 	.word	0x080047c9
 80047a0:	2300      	movs	r3, #0
 80047a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047a6:	e284      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80047a8:	2304      	movs	r3, #4
 80047aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ae:	e280      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80047b0:	2308      	movs	r3, #8
 80047b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047b6:	e27c      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80047b8:	2310      	movs	r3, #16
 80047ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047be:	e278      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80047c0:	2320      	movs	r3, #32
 80047c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047c6:	e274      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80047c8:	2340      	movs	r3, #64	@ 0x40
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ce:	e270      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80047d0:	2380      	movs	r3, #128	@ 0x80
 80047d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047d6:	e26c      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1b      	ldr	r2, [pc, #108]	@ (800484c <UART_SetConfig+0x348>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d142      	bne.n	8004868 <UART_SetConfig+0x364>
 80047e2:	4b16      	ldr	r3, [pc, #88]	@ (800483c <UART_SetConfig+0x338>)
 80047e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	2b05      	cmp	r3, #5
 80047ec:	d838      	bhi.n	8004860 <UART_SetConfig+0x35c>
 80047ee:	a201      	add	r2, pc, #4	@ (adr r2, 80047f4 <UART_SetConfig+0x2f0>)
 80047f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f4:	0800480d 	.word	0x0800480d
 80047f8:	08004815 	.word	0x08004815
 80047fc:	0800481d 	.word	0x0800481d
 8004800:	08004825 	.word	0x08004825
 8004804:	08004851 	.word	0x08004851
 8004808:	08004859 	.word	0x08004859
 800480c:	2300      	movs	r3, #0
 800480e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004812:	e24e      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004814:	2304      	movs	r3, #4
 8004816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800481a:	e24a      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 800481c:	2308      	movs	r3, #8
 800481e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004822:	e246      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004824:	2310      	movs	r3, #16
 8004826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800482a:	e242      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 800482c:	cfff69f3 	.word	0xcfff69f3
 8004830:	58000c00 	.word	0x58000c00
 8004834:	11fff4ff 	.word	0x11fff4ff
 8004838:	40011000 	.word	0x40011000
 800483c:	58024400 	.word	0x58024400
 8004840:	40004400 	.word	0x40004400
 8004844:	40004800 	.word	0x40004800
 8004848:	40004c00 	.word	0x40004c00
 800484c:	40005000 	.word	0x40005000
 8004850:	2320      	movs	r3, #32
 8004852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004856:	e22c      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004858:	2340      	movs	r3, #64	@ 0x40
 800485a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800485e:	e228      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004860:	2380      	movs	r3, #128	@ 0x80
 8004862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004866:	e224      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4ab1      	ldr	r2, [pc, #708]	@ (8004b34 <UART_SetConfig+0x630>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d176      	bne.n	8004960 <UART_SetConfig+0x45c>
 8004872:	4bb1      	ldr	r3, [pc, #708]	@ (8004b38 <UART_SetConfig+0x634>)
 8004874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004876:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800487a:	2b28      	cmp	r3, #40	@ 0x28
 800487c:	d86c      	bhi.n	8004958 <UART_SetConfig+0x454>
 800487e:	a201      	add	r2, pc, #4	@ (adr r2, 8004884 <UART_SetConfig+0x380>)
 8004880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004884:	08004929 	.word	0x08004929
 8004888:	08004959 	.word	0x08004959
 800488c:	08004959 	.word	0x08004959
 8004890:	08004959 	.word	0x08004959
 8004894:	08004959 	.word	0x08004959
 8004898:	08004959 	.word	0x08004959
 800489c:	08004959 	.word	0x08004959
 80048a0:	08004959 	.word	0x08004959
 80048a4:	08004931 	.word	0x08004931
 80048a8:	08004959 	.word	0x08004959
 80048ac:	08004959 	.word	0x08004959
 80048b0:	08004959 	.word	0x08004959
 80048b4:	08004959 	.word	0x08004959
 80048b8:	08004959 	.word	0x08004959
 80048bc:	08004959 	.word	0x08004959
 80048c0:	08004959 	.word	0x08004959
 80048c4:	08004939 	.word	0x08004939
 80048c8:	08004959 	.word	0x08004959
 80048cc:	08004959 	.word	0x08004959
 80048d0:	08004959 	.word	0x08004959
 80048d4:	08004959 	.word	0x08004959
 80048d8:	08004959 	.word	0x08004959
 80048dc:	08004959 	.word	0x08004959
 80048e0:	08004959 	.word	0x08004959
 80048e4:	08004941 	.word	0x08004941
 80048e8:	08004959 	.word	0x08004959
 80048ec:	08004959 	.word	0x08004959
 80048f0:	08004959 	.word	0x08004959
 80048f4:	08004959 	.word	0x08004959
 80048f8:	08004959 	.word	0x08004959
 80048fc:	08004959 	.word	0x08004959
 8004900:	08004959 	.word	0x08004959
 8004904:	08004949 	.word	0x08004949
 8004908:	08004959 	.word	0x08004959
 800490c:	08004959 	.word	0x08004959
 8004910:	08004959 	.word	0x08004959
 8004914:	08004959 	.word	0x08004959
 8004918:	08004959 	.word	0x08004959
 800491c:	08004959 	.word	0x08004959
 8004920:	08004959 	.word	0x08004959
 8004924:	08004951 	.word	0x08004951
 8004928:	2301      	movs	r3, #1
 800492a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800492e:	e1c0      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004930:	2304      	movs	r3, #4
 8004932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004936:	e1bc      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004938:	2308      	movs	r3, #8
 800493a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800493e:	e1b8      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004940:	2310      	movs	r3, #16
 8004942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004946:	e1b4      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004948:	2320      	movs	r3, #32
 800494a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800494e:	e1b0      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004950:	2340      	movs	r3, #64	@ 0x40
 8004952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004956:	e1ac      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004958:	2380      	movs	r3, #128	@ 0x80
 800495a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800495e:	e1a8      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a75      	ldr	r2, [pc, #468]	@ (8004b3c <UART_SetConfig+0x638>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d130      	bne.n	80049cc <UART_SetConfig+0x4c8>
 800496a:	4b73      	ldr	r3, [pc, #460]	@ (8004b38 <UART_SetConfig+0x634>)
 800496c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	2b05      	cmp	r3, #5
 8004974:	d826      	bhi.n	80049c4 <UART_SetConfig+0x4c0>
 8004976:	a201      	add	r2, pc, #4	@ (adr r2, 800497c <UART_SetConfig+0x478>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	08004995 	.word	0x08004995
 8004980:	0800499d 	.word	0x0800499d
 8004984:	080049a5 	.word	0x080049a5
 8004988:	080049ad 	.word	0x080049ad
 800498c:	080049b5 	.word	0x080049b5
 8004990:	080049bd 	.word	0x080049bd
 8004994:	2300      	movs	r3, #0
 8004996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800499a:	e18a      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 800499c:	2304      	movs	r3, #4
 800499e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049a2:	e186      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80049a4:	2308      	movs	r3, #8
 80049a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049aa:	e182      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80049ac:	2310      	movs	r3, #16
 80049ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049b2:	e17e      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80049b4:	2320      	movs	r3, #32
 80049b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ba:	e17a      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80049bc:	2340      	movs	r3, #64	@ 0x40
 80049be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049c2:	e176      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80049c4:	2380      	movs	r3, #128	@ 0x80
 80049c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ca:	e172      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a5b      	ldr	r2, [pc, #364]	@ (8004b40 <UART_SetConfig+0x63c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d130      	bne.n	8004a38 <UART_SetConfig+0x534>
 80049d6:	4b58      	ldr	r3, [pc, #352]	@ (8004b38 <UART_SetConfig+0x634>)
 80049d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	2b05      	cmp	r3, #5
 80049e0:	d826      	bhi.n	8004a30 <UART_SetConfig+0x52c>
 80049e2:	a201      	add	r2, pc, #4	@ (adr r2, 80049e8 <UART_SetConfig+0x4e4>)
 80049e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e8:	08004a01 	.word	0x08004a01
 80049ec:	08004a09 	.word	0x08004a09
 80049f0:	08004a11 	.word	0x08004a11
 80049f4:	08004a19 	.word	0x08004a19
 80049f8:	08004a21 	.word	0x08004a21
 80049fc:	08004a29 	.word	0x08004a29
 8004a00:	2300      	movs	r3, #0
 8004a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a06:	e154      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a0e:	e150      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004a10:	2308      	movs	r3, #8
 8004a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a16:	e14c      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004a18:	2310      	movs	r3, #16
 8004a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a1e:	e148      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004a20:	2320      	movs	r3, #32
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a26:	e144      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004a28:	2340      	movs	r3, #64	@ 0x40
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a2e:	e140      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004a30:	2380      	movs	r3, #128	@ 0x80
 8004a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a36:	e13c      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a41      	ldr	r2, [pc, #260]	@ (8004b44 <UART_SetConfig+0x640>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	f040 8082 	bne.w	8004b48 <UART_SetConfig+0x644>
 8004a44:	4b3c      	ldr	r3, [pc, #240]	@ (8004b38 <UART_SetConfig+0x634>)
 8004a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a4c:	2b28      	cmp	r3, #40	@ 0x28
 8004a4e:	d86d      	bhi.n	8004b2c <UART_SetConfig+0x628>
 8004a50:	a201      	add	r2, pc, #4	@ (adr r2, 8004a58 <UART_SetConfig+0x554>)
 8004a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a56:	bf00      	nop
 8004a58:	08004afd 	.word	0x08004afd
 8004a5c:	08004b2d 	.word	0x08004b2d
 8004a60:	08004b2d 	.word	0x08004b2d
 8004a64:	08004b2d 	.word	0x08004b2d
 8004a68:	08004b2d 	.word	0x08004b2d
 8004a6c:	08004b2d 	.word	0x08004b2d
 8004a70:	08004b2d 	.word	0x08004b2d
 8004a74:	08004b2d 	.word	0x08004b2d
 8004a78:	08004b05 	.word	0x08004b05
 8004a7c:	08004b2d 	.word	0x08004b2d
 8004a80:	08004b2d 	.word	0x08004b2d
 8004a84:	08004b2d 	.word	0x08004b2d
 8004a88:	08004b2d 	.word	0x08004b2d
 8004a8c:	08004b2d 	.word	0x08004b2d
 8004a90:	08004b2d 	.word	0x08004b2d
 8004a94:	08004b2d 	.word	0x08004b2d
 8004a98:	08004b0d 	.word	0x08004b0d
 8004a9c:	08004b2d 	.word	0x08004b2d
 8004aa0:	08004b2d 	.word	0x08004b2d
 8004aa4:	08004b2d 	.word	0x08004b2d
 8004aa8:	08004b2d 	.word	0x08004b2d
 8004aac:	08004b2d 	.word	0x08004b2d
 8004ab0:	08004b2d 	.word	0x08004b2d
 8004ab4:	08004b2d 	.word	0x08004b2d
 8004ab8:	08004b15 	.word	0x08004b15
 8004abc:	08004b2d 	.word	0x08004b2d
 8004ac0:	08004b2d 	.word	0x08004b2d
 8004ac4:	08004b2d 	.word	0x08004b2d
 8004ac8:	08004b2d 	.word	0x08004b2d
 8004acc:	08004b2d 	.word	0x08004b2d
 8004ad0:	08004b2d 	.word	0x08004b2d
 8004ad4:	08004b2d 	.word	0x08004b2d
 8004ad8:	08004b1d 	.word	0x08004b1d
 8004adc:	08004b2d 	.word	0x08004b2d
 8004ae0:	08004b2d 	.word	0x08004b2d
 8004ae4:	08004b2d 	.word	0x08004b2d
 8004ae8:	08004b2d 	.word	0x08004b2d
 8004aec:	08004b2d 	.word	0x08004b2d
 8004af0:	08004b2d 	.word	0x08004b2d
 8004af4:	08004b2d 	.word	0x08004b2d
 8004af8:	08004b25 	.word	0x08004b25
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b02:	e0d6      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004b04:	2304      	movs	r3, #4
 8004b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b0a:	e0d2      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004b0c:	2308      	movs	r3, #8
 8004b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b12:	e0ce      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004b14:	2310      	movs	r3, #16
 8004b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b1a:	e0ca      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b22:	e0c6      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004b24:	2340      	movs	r3, #64	@ 0x40
 8004b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b2a:	e0c2      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004b2c:	2380      	movs	r3, #128	@ 0x80
 8004b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b32:	e0be      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004b34:	40011400 	.word	0x40011400
 8004b38:	58024400 	.word	0x58024400
 8004b3c:	40007800 	.word	0x40007800
 8004b40:	40007c00 	.word	0x40007c00
 8004b44:	40011800 	.word	0x40011800
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4aad      	ldr	r2, [pc, #692]	@ (8004e04 <UART_SetConfig+0x900>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d176      	bne.n	8004c40 <UART_SetConfig+0x73c>
 8004b52:	4bad      	ldr	r3, [pc, #692]	@ (8004e08 <UART_SetConfig+0x904>)
 8004b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b5a:	2b28      	cmp	r3, #40	@ 0x28
 8004b5c:	d86c      	bhi.n	8004c38 <UART_SetConfig+0x734>
 8004b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b64 <UART_SetConfig+0x660>)
 8004b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b64:	08004c09 	.word	0x08004c09
 8004b68:	08004c39 	.word	0x08004c39
 8004b6c:	08004c39 	.word	0x08004c39
 8004b70:	08004c39 	.word	0x08004c39
 8004b74:	08004c39 	.word	0x08004c39
 8004b78:	08004c39 	.word	0x08004c39
 8004b7c:	08004c39 	.word	0x08004c39
 8004b80:	08004c39 	.word	0x08004c39
 8004b84:	08004c11 	.word	0x08004c11
 8004b88:	08004c39 	.word	0x08004c39
 8004b8c:	08004c39 	.word	0x08004c39
 8004b90:	08004c39 	.word	0x08004c39
 8004b94:	08004c39 	.word	0x08004c39
 8004b98:	08004c39 	.word	0x08004c39
 8004b9c:	08004c39 	.word	0x08004c39
 8004ba0:	08004c39 	.word	0x08004c39
 8004ba4:	08004c19 	.word	0x08004c19
 8004ba8:	08004c39 	.word	0x08004c39
 8004bac:	08004c39 	.word	0x08004c39
 8004bb0:	08004c39 	.word	0x08004c39
 8004bb4:	08004c39 	.word	0x08004c39
 8004bb8:	08004c39 	.word	0x08004c39
 8004bbc:	08004c39 	.word	0x08004c39
 8004bc0:	08004c39 	.word	0x08004c39
 8004bc4:	08004c21 	.word	0x08004c21
 8004bc8:	08004c39 	.word	0x08004c39
 8004bcc:	08004c39 	.word	0x08004c39
 8004bd0:	08004c39 	.word	0x08004c39
 8004bd4:	08004c39 	.word	0x08004c39
 8004bd8:	08004c39 	.word	0x08004c39
 8004bdc:	08004c39 	.word	0x08004c39
 8004be0:	08004c39 	.word	0x08004c39
 8004be4:	08004c29 	.word	0x08004c29
 8004be8:	08004c39 	.word	0x08004c39
 8004bec:	08004c39 	.word	0x08004c39
 8004bf0:	08004c39 	.word	0x08004c39
 8004bf4:	08004c39 	.word	0x08004c39
 8004bf8:	08004c39 	.word	0x08004c39
 8004bfc:	08004c39 	.word	0x08004c39
 8004c00:	08004c39 	.word	0x08004c39
 8004c04:	08004c31 	.word	0x08004c31
 8004c08:	2301      	movs	r3, #1
 8004c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c0e:	e050      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004c10:	2304      	movs	r3, #4
 8004c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c16:	e04c      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004c18:	2308      	movs	r3, #8
 8004c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c1e:	e048      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004c20:	2310      	movs	r3, #16
 8004c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c26:	e044      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004c28:	2320      	movs	r3, #32
 8004c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c2e:	e040      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004c30:	2340      	movs	r3, #64	@ 0x40
 8004c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c36:	e03c      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004c38:	2380      	movs	r3, #128	@ 0x80
 8004c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c3e:	e038      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a71      	ldr	r2, [pc, #452]	@ (8004e0c <UART_SetConfig+0x908>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d130      	bne.n	8004cac <UART_SetConfig+0x7a8>
 8004c4a:	4b6f      	ldr	r3, [pc, #444]	@ (8004e08 <UART_SetConfig+0x904>)
 8004c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	2b05      	cmp	r3, #5
 8004c54:	d826      	bhi.n	8004ca4 <UART_SetConfig+0x7a0>
 8004c56:	a201      	add	r2, pc, #4	@ (adr r2, 8004c5c <UART_SetConfig+0x758>)
 8004c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5c:	08004c75 	.word	0x08004c75
 8004c60:	08004c7d 	.word	0x08004c7d
 8004c64:	08004c85 	.word	0x08004c85
 8004c68:	08004c8d 	.word	0x08004c8d
 8004c6c:	08004c95 	.word	0x08004c95
 8004c70:	08004c9d 	.word	0x08004c9d
 8004c74:	2302      	movs	r3, #2
 8004c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c7a:	e01a      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004c7c:	2304      	movs	r3, #4
 8004c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c82:	e016      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004c84:	2308      	movs	r3, #8
 8004c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c8a:	e012      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c92:	e00e      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004c94:	2320      	movs	r3, #32
 8004c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c9a:	e00a      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004c9c:	2340      	movs	r3, #64	@ 0x40
 8004c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ca2:	e006      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004ca4:	2380      	movs	r3, #128	@ 0x80
 8004ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004caa:	e002      	b.n	8004cb2 <UART_SetConfig+0x7ae>
 8004cac:	2380      	movs	r3, #128	@ 0x80
 8004cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a55      	ldr	r2, [pc, #340]	@ (8004e0c <UART_SetConfig+0x908>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	f040 80f8 	bne.w	8004eae <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cbe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	dc46      	bgt.n	8004d54 <UART_SetConfig+0x850>
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	db75      	blt.n	8004db6 <UART_SetConfig+0x8b2>
 8004cca:	3b02      	subs	r3, #2
 8004ccc:	2b1e      	cmp	r3, #30
 8004cce:	d872      	bhi.n	8004db6 <UART_SetConfig+0x8b2>
 8004cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8004cd8 <UART_SetConfig+0x7d4>)
 8004cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd6:	bf00      	nop
 8004cd8:	08004d5b 	.word	0x08004d5b
 8004cdc:	08004db7 	.word	0x08004db7
 8004ce0:	08004d63 	.word	0x08004d63
 8004ce4:	08004db7 	.word	0x08004db7
 8004ce8:	08004db7 	.word	0x08004db7
 8004cec:	08004db7 	.word	0x08004db7
 8004cf0:	08004d73 	.word	0x08004d73
 8004cf4:	08004db7 	.word	0x08004db7
 8004cf8:	08004db7 	.word	0x08004db7
 8004cfc:	08004db7 	.word	0x08004db7
 8004d00:	08004db7 	.word	0x08004db7
 8004d04:	08004db7 	.word	0x08004db7
 8004d08:	08004db7 	.word	0x08004db7
 8004d0c:	08004db7 	.word	0x08004db7
 8004d10:	08004d83 	.word	0x08004d83
 8004d14:	08004db7 	.word	0x08004db7
 8004d18:	08004db7 	.word	0x08004db7
 8004d1c:	08004db7 	.word	0x08004db7
 8004d20:	08004db7 	.word	0x08004db7
 8004d24:	08004db7 	.word	0x08004db7
 8004d28:	08004db7 	.word	0x08004db7
 8004d2c:	08004db7 	.word	0x08004db7
 8004d30:	08004db7 	.word	0x08004db7
 8004d34:	08004db7 	.word	0x08004db7
 8004d38:	08004db7 	.word	0x08004db7
 8004d3c:	08004db7 	.word	0x08004db7
 8004d40:	08004db7 	.word	0x08004db7
 8004d44:	08004db7 	.word	0x08004db7
 8004d48:	08004db7 	.word	0x08004db7
 8004d4c:	08004db7 	.word	0x08004db7
 8004d50:	08004da9 	.word	0x08004da9
 8004d54:	2b40      	cmp	r3, #64	@ 0x40
 8004d56:	d02a      	beq.n	8004dae <UART_SetConfig+0x8aa>
 8004d58:	e02d      	b.n	8004db6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004d5a:	f7fe fed3 	bl	8003b04 <HAL_RCCEx_GetD3PCLK1Freq>
 8004d5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004d60:	e02f      	b.n	8004dc2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fe fee2 	bl	8003b30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d70:	e027      	b.n	8004dc2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d72:	f107 0318 	add.w	r3, r7, #24
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff f82e 	bl	8003dd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d80:	e01f      	b.n	8004dc2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d82:	4b21      	ldr	r3, [pc, #132]	@ (8004e08 <UART_SetConfig+0x904>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004e08 <UART_SetConfig+0x904>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	08db      	lsrs	r3, r3, #3
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	4a1d      	ldr	r2, [pc, #116]	@ (8004e10 <UART_SetConfig+0x90c>)
 8004d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004da0:	e00f      	b.n	8004dc2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004da2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e10 <UART_SetConfig+0x90c>)
 8004da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004da6:	e00c      	b.n	8004dc2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004da8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e14 <UART_SetConfig+0x910>)
 8004daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dac:	e009      	b.n	8004dc2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004db4:	e005      	b.n	8004dc2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004dc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 81ee 	beq.w	80051a6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dce:	4a12      	ldr	r2, [pc, #72]	@ (8004e18 <UART_SetConfig+0x914>)
 8004dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ddc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	4413      	add	r3, r2
 8004de8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d305      	bcc.n	8004dfa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004df4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d910      	bls.n	8004e1c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004e00:	e1d1      	b.n	80051a6 <UART_SetConfig+0xca2>
 8004e02:	bf00      	nop
 8004e04:	40011c00 	.word	0x40011c00
 8004e08:	58024400 	.word	0x58024400
 8004e0c:	58000c00 	.word	0x58000c00
 8004e10:	03d09000 	.word	0x03d09000
 8004e14:	003d0900 	.word	0x003d0900
 8004e18:	080066d0 	.word	0x080066d0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e1e:	2200      	movs	r2, #0
 8004e20:	60bb      	str	r3, [r7, #8]
 8004e22:	60fa      	str	r2, [r7, #12]
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e28:	4ac0      	ldr	r2, [pc, #768]	@ (800512c <UART_SetConfig+0xc28>)
 8004e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2200      	movs	r2, #0
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	607a      	str	r2, [r7, #4]
 8004e36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e3e:	f7fb faa7 	bl	8000390 <__aeabi_uldivmod>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4610      	mov	r0, r2
 8004e48:	4619      	mov	r1, r3
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	020b      	lsls	r3, r1, #8
 8004e54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e58:	0202      	lsls	r2, r0, #8
 8004e5a:	6979      	ldr	r1, [r7, #20]
 8004e5c:	6849      	ldr	r1, [r1, #4]
 8004e5e:	0849      	lsrs	r1, r1, #1
 8004e60:	2000      	movs	r0, #0
 8004e62:	460c      	mov	r4, r1
 8004e64:	4605      	mov	r5, r0
 8004e66:	eb12 0804 	adds.w	r8, r2, r4
 8004e6a:	eb43 0905 	adc.w	r9, r3, r5
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	469a      	mov	sl, r3
 8004e76:	4693      	mov	fp, r2
 8004e78:	4652      	mov	r2, sl
 8004e7a:	465b      	mov	r3, fp
 8004e7c:	4640      	mov	r0, r8
 8004e7e:	4649      	mov	r1, r9
 8004e80:	f7fb fa86 	bl	8000390 <__aeabi_uldivmod>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4613      	mov	r3, r2
 8004e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e92:	d308      	bcc.n	8004ea6 <UART_SetConfig+0x9a2>
 8004e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e9a:	d204      	bcs.n	8004ea6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ea2:	60da      	str	r2, [r3, #12]
 8004ea4:	e17f      	b.n	80051a6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004eac:	e17b      	b.n	80051a6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eb6:	f040 80bd 	bne.w	8005034 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004eba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	dc48      	bgt.n	8004f54 <UART_SetConfig+0xa50>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	db7b      	blt.n	8004fbe <UART_SetConfig+0xaba>
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d879      	bhi.n	8004fbe <UART_SetConfig+0xaba>
 8004eca:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed0 <UART_SetConfig+0x9cc>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004f5b 	.word	0x08004f5b
 8004ed4:	08004f63 	.word	0x08004f63
 8004ed8:	08004fbf 	.word	0x08004fbf
 8004edc:	08004fbf 	.word	0x08004fbf
 8004ee0:	08004f6b 	.word	0x08004f6b
 8004ee4:	08004fbf 	.word	0x08004fbf
 8004ee8:	08004fbf 	.word	0x08004fbf
 8004eec:	08004fbf 	.word	0x08004fbf
 8004ef0:	08004f7b 	.word	0x08004f7b
 8004ef4:	08004fbf 	.word	0x08004fbf
 8004ef8:	08004fbf 	.word	0x08004fbf
 8004efc:	08004fbf 	.word	0x08004fbf
 8004f00:	08004fbf 	.word	0x08004fbf
 8004f04:	08004fbf 	.word	0x08004fbf
 8004f08:	08004fbf 	.word	0x08004fbf
 8004f0c:	08004fbf 	.word	0x08004fbf
 8004f10:	08004f8b 	.word	0x08004f8b
 8004f14:	08004fbf 	.word	0x08004fbf
 8004f18:	08004fbf 	.word	0x08004fbf
 8004f1c:	08004fbf 	.word	0x08004fbf
 8004f20:	08004fbf 	.word	0x08004fbf
 8004f24:	08004fbf 	.word	0x08004fbf
 8004f28:	08004fbf 	.word	0x08004fbf
 8004f2c:	08004fbf 	.word	0x08004fbf
 8004f30:	08004fbf 	.word	0x08004fbf
 8004f34:	08004fbf 	.word	0x08004fbf
 8004f38:	08004fbf 	.word	0x08004fbf
 8004f3c:	08004fbf 	.word	0x08004fbf
 8004f40:	08004fbf 	.word	0x08004fbf
 8004f44:	08004fbf 	.word	0x08004fbf
 8004f48:	08004fbf 	.word	0x08004fbf
 8004f4c:	08004fbf 	.word	0x08004fbf
 8004f50:	08004fb1 	.word	0x08004fb1
 8004f54:	2b40      	cmp	r3, #64	@ 0x40
 8004f56:	d02e      	beq.n	8004fb6 <UART_SetConfig+0xab2>
 8004f58:	e031      	b.n	8004fbe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f5a:	f7fd fbe9 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8004f5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f60:	e033      	b.n	8004fca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f62:	f7fd fbfb 	bl	800275c <HAL_RCC_GetPCLK2Freq>
 8004f66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f68:	e02f      	b.n	8004fca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe fdde 	bl	8003b30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f78:	e027      	b.n	8004fca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f7a:	f107 0318 	add.w	r3, r7, #24
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fe ff2a 	bl	8003dd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f88:	e01f      	b.n	8004fca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f8a:	4b69      	ldr	r3, [pc, #420]	@ (8005130 <UART_SetConfig+0xc2c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f96:	4b66      	ldr	r3, [pc, #408]	@ (8005130 <UART_SetConfig+0xc2c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	08db      	lsrs	r3, r3, #3
 8004f9c:	f003 0303 	and.w	r3, r3, #3
 8004fa0:	4a64      	ldr	r2, [pc, #400]	@ (8005134 <UART_SetConfig+0xc30>)
 8004fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004fa8:	e00f      	b.n	8004fca <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004faa:	4b62      	ldr	r3, [pc, #392]	@ (8005134 <UART_SetConfig+0xc30>)
 8004fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fae:	e00c      	b.n	8004fca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004fb0:	4b61      	ldr	r3, [pc, #388]	@ (8005138 <UART_SetConfig+0xc34>)
 8004fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fb4:	e009      	b.n	8004fca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fbc:	e005      	b.n	8004fca <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004fc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 80ea 	beq.w	80051a6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd6:	4a55      	ldr	r2, [pc, #340]	@ (800512c <UART_SetConfig+0xc28>)
 8004fd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fe0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fe4:	005a      	lsls	r2, r3, #1
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	085b      	lsrs	r3, r3, #1
 8004fec:	441a      	add	r2, r3
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ffa:	2b0f      	cmp	r3, #15
 8004ffc:	d916      	bls.n	800502c <UART_SetConfig+0xb28>
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005004:	d212      	bcs.n	800502c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005008:	b29b      	uxth	r3, r3
 800500a:	f023 030f 	bic.w	r3, r3, #15
 800500e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005012:	085b      	lsrs	r3, r3, #1
 8005014:	b29b      	uxth	r3, r3
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	b29a      	uxth	r2, r3
 800501c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800501e:	4313      	orrs	r3, r2
 8005020:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005028:	60da      	str	r2, [r3, #12]
 800502a:	e0bc      	b.n	80051a6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005032:	e0b8      	b.n	80051a6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005034:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005038:	2b20      	cmp	r3, #32
 800503a:	dc4b      	bgt.n	80050d4 <UART_SetConfig+0xbd0>
 800503c:	2b00      	cmp	r3, #0
 800503e:	f2c0 8087 	blt.w	8005150 <UART_SetConfig+0xc4c>
 8005042:	2b20      	cmp	r3, #32
 8005044:	f200 8084 	bhi.w	8005150 <UART_SetConfig+0xc4c>
 8005048:	a201      	add	r2, pc, #4	@ (adr r2, 8005050 <UART_SetConfig+0xb4c>)
 800504a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504e:	bf00      	nop
 8005050:	080050db 	.word	0x080050db
 8005054:	080050e3 	.word	0x080050e3
 8005058:	08005151 	.word	0x08005151
 800505c:	08005151 	.word	0x08005151
 8005060:	080050eb 	.word	0x080050eb
 8005064:	08005151 	.word	0x08005151
 8005068:	08005151 	.word	0x08005151
 800506c:	08005151 	.word	0x08005151
 8005070:	080050fb 	.word	0x080050fb
 8005074:	08005151 	.word	0x08005151
 8005078:	08005151 	.word	0x08005151
 800507c:	08005151 	.word	0x08005151
 8005080:	08005151 	.word	0x08005151
 8005084:	08005151 	.word	0x08005151
 8005088:	08005151 	.word	0x08005151
 800508c:	08005151 	.word	0x08005151
 8005090:	0800510b 	.word	0x0800510b
 8005094:	08005151 	.word	0x08005151
 8005098:	08005151 	.word	0x08005151
 800509c:	08005151 	.word	0x08005151
 80050a0:	08005151 	.word	0x08005151
 80050a4:	08005151 	.word	0x08005151
 80050a8:	08005151 	.word	0x08005151
 80050ac:	08005151 	.word	0x08005151
 80050b0:	08005151 	.word	0x08005151
 80050b4:	08005151 	.word	0x08005151
 80050b8:	08005151 	.word	0x08005151
 80050bc:	08005151 	.word	0x08005151
 80050c0:	08005151 	.word	0x08005151
 80050c4:	08005151 	.word	0x08005151
 80050c8:	08005151 	.word	0x08005151
 80050cc:	08005151 	.word	0x08005151
 80050d0:	08005143 	.word	0x08005143
 80050d4:	2b40      	cmp	r3, #64	@ 0x40
 80050d6:	d037      	beq.n	8005148 <UART_SetConfig+0xc44>
 80050d8:	e03a      	b.n	8005150 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050da:	f7fd fb29 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 80050de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050e0:	e03c      	b.n	800515c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050e2:	f7fd fb3b 	bl	800275c <HAL_RCC_GetPCLK2Freq>
 80050e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050e8:	e038      	b.n	800515c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fe fd1e 	bl	8003b30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050f8:	e030      	b.n	800515c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050fa:	f107 0318 	add.w	r3, r7, #24
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe fe6a 	bl	8003dd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005108:	e028      	b.n	800515c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800510a:	4b09      	ldr	r3, [pc, #36]	@ (8005130 <UART_SetConfig+0xc2c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b00      	cmp	r3, #0
 8005114:	d012      	beq.n	800513c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005116:	4b06      	ldr	r3, [pc, #24]	@ (8005130 <UART_SetConfig+0xc2c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	08db      	lsrs	r3, r3, #3
 800511c:	f003 0303 	and.w	r3, r3, #3
 8005120:	4a04      	ldr	r2, [pc, #16]	@ (8005134 <UART_SetConfig+0xc30>)
 8005122:	fa22 f303 	lsr.w	r3, r2, r3
 8005126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005128:	e018      	b.n	800515c <UART_SetConfig+0xc58>
 800512a:	bf00      	nop
 800512c:	080066d0 	.word	0x080066d0
 8005130:	58024400 	.word	0x58024400
 8005134:	03d09000 	.word	0x03d09000
 8005138:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800513c:	4b24      	ldr	r3, [pc, #144]	@ (80051d0 <UART_SetConfig+0xccc>)
 800513e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005140:	e00c      	b.n	800515c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005142:	4b24      	ldr	r3, [pc, #144]	@ (80051d4 <UART_SetConfig+0xcd0>)
 8005144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005146:	e009      	b.n	800515c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005148:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800514c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800514e:	e005      	b.n	800515c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800515a:	bf00      	nop
    }

    if (pclk != 0U)
 800515c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d021      	beq.n	80051a6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005166:	4a1c      	ldr	r2, [pc, #112]	@ (80051d8 <UART_SetConfig+0xcd4>)
 8005168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800516c:	461a      	mov	r2, r3
 800516e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005170:	fbb3 f2f2 	udiv	r2, r3, r2
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	085b      	lsrs	r3, r3, #1
 800517a:	441a      	add	r2, r3
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005188:	2b0f      	cmp	r3, #15
 800518a:	d909      	bls.n	80051a0 <UART_SetConfig+0xc9c>
 800518c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005192:	d205      	bcs.n	80051a0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005196:	b29a      	uxth	r2, r3
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60da      	str	r2, [r3, #12]
 800519e:	e002      	b.n	80051a6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2200      	movs	r2, #0
 80051ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2200      	movs	r2, #0
 80051c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80051c2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3748      	adds	r7, #72	@ 0x48
 80051ca:	46bd      	mov	sp, r7
 80051cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051d0:	03d09000 	.word	0x03d09000
 80051d4:	003d0900 	.word	0x003d0900
 80051d8:	080066d0 	.word	0x080066d0

080051dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00a      	beq.n	8005206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005270:	f003 0310 	and.w	r3, r3, #16
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00a      	beq.n	800528e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01a      	beq.n	80052f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052da:	d10a      	bne.n	80052f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	605a      	str	r2, [r3, #4]
  }
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b098      	sub	sp, #96	@ 0x60
 8005324:	af02      	add	r7, sp, #8
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005330:	f7fb fee0 	bl	80010f4 <HAL_GetTick>
 8005334:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0308 	and.w	r3, r3, #8
 8005340:	2b08      	cmp	r3, #8
 8005342:	d12f      	bne.n	80053a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005344:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800534c:	2200      	movs	r2, #0
 800534e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f88e 	bl	8005474 <UART_WaitOnFlagUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d022      	beq.n	80053a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800536c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800536e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005372:	653b      	str	r3, [r7, #80]	@ 0x50
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800537c:	647b      	str	r3, [r7, #68]	@ 0x44
 800537e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005382:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800538a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e6      	bne.n	800535e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e063      	b.n	800546c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d149      	bne.n	8005446 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ba:	2200      	movs	r2, #0
 80053bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f857 	bl	8005474 <UART_WaitOnFlagUntilTimeout>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d03c      	beq.n	8005446 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	623b      	str	r3, [r7, #32]
   return(result);
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e6      	bne.n	80053cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3308      	adds	r3, #8
 8005404:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	60fb      	str	r3, [r7, #12]
   return(result);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3308      	adds	r3, #8
 800541c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800541e:	61fa      	str	r2, [r7, #28]
 8005420:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	69b9      	ldr	r1, [r7, #24]
 8005424:	69fa      	ldr	r2, [r7, #28]
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	617b      	str	r3, [r7, #20]
   return(result);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1e5      	bne.n	80053fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e012      	b.n	800546c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2220      	movs	r2, #32
 8005452:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3758      	adds	r7, #88	@ 0x58
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	4613      	mov	r3, r2
 8005482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005484:	e04f      	b.n	8005526 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548c:	d04b      	beq.n	8005526 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800548e:	f7fb fe31 	bl	80010f4 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	429a      	cmp	r2, r3
 800549c:	d302      	bcc.n	80054a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e04e      	b.n	8005546 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d037      	beq.n	8005526 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b80      	cmp	r3, #128	@ 0x80
 80054ba:	d034      	beq.n	8005526 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b40      	cmp	r3, #64	@ 0x40
 80054c0:	d031      	beq.n	8005526 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d110      	bne.n	80054f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2208      	movs	r2, #8
 80054d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 f839 	bl	8005550 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2208      	movs	r2, #8
 80054e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e029      	b.n	8005546 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005500:	d111      	bne.n	8005526 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800550a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f81f 	bl	8005550 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e00f      	b.n	8005546 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4013      	ands	r3, r2
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	429a      	cmp	r2, r3
 8005534:	bf0c      	ite	eq
 8005536:	2301      	moveq	r3, #1
 8005538:	2300      	movne	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	461a      	mov	r2, r3
 800553e:	79fb      	ldrb	r3, [r7, #7]
 8005540:	429a      	cmp	r2, r3
 8005542:	d0a0      	beq.n	8005486 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005550:	b480      	push	{r7}
 8005552:	b095      	sub	sp, #84	@ 0x54
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005560:	e853 3f00 	ldrex	r3, [r3]
 8005564:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005568:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800556c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005576:	643b      	str	r3, [r7, #64]	@ 0x40
 8005578:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800557c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1e6      	bne.n	8005558 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3308      	adds	r3, #8
 8005590:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	61fb      	str	r3, [r7, #28]
   return(result);
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	4b1e      	ldr	r3, [pc, #120]	@ (8005618 <UART_EndRxTransfer+0xc8>)
 800559e:	4013      	ands	r3, r2
 80055a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3308      	adds	r3, #8
 80055a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e5      	bne.n	800558a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d118      	bne.n	80055f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f023 0310 	bic.w	r3, r3, #16
 80055da:	647b      	str	r3, [r7, #68]	@ 0x44
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	461a      	mov	r2, r3
 80055e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	6979      	ldr	r1, [r7, #20]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	613b      	str	r3, [r7, #16]
   return(result);
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e6      	bne.n	80055c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800560c:	bf00      	nop
 800560e:	3754      	adds	r7, #84	@ 0x54
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	effffffe 	.word	0xeffffffe

0800561c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <HAL_UARTEx_DisableFifoMode+0x16>
 800562e:	2302      	movs	r3, #2
 8005630:	e027      	b.n	8005682 <HAL_UARTEx_DisableFifoMode+0x66>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2224      	movs	r2, #36	@ 0x24
 800563e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0201 	bic.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005660:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e02d      	b.n	8005702 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2224      	movs	r2, #36	@ 0x24
 80056b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0201 	bic.w	r2, r2, #1
 80056cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f850 	bl	8005788 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800571e:	2302      	movs	r3, #2
 8005720:	e02d      	b.n	800577e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2224      	movs	r2, #36	@ 0x24
 800572e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0201 	bic.w	r2, r2, #1
 8005748:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f812 	bl	8005788 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
	...

08005788 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005794:	2b00      	cmp	r3, #0
 8005796:	d108      	bne.n	80057aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057a8:	e031      	b.n	800580e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057aa:	2310      	movs	r3, #16
 80057ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057ae:	2310      	movs	r3, #16
 80057b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	0e5b      	lsrs	r3, r3, #25
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	0f5b      	lsrs	r3, r3, #29
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057d2:	7bbb      	ldrb	r3, [r7, #14]
 80057d4:	7b3a      	ldrb	r2, [r7, #12]
 80057d6:	4911      	ldr	r1, [pc, #68]	@ (800581c <UARTEx_SetNbDataToProcess+0x94>)
 80057d8:	5c8a      	ldrb	r2, [r1, r2]
 80057da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057de:	7b3a      	ldrb	r2, [r7, #12]
 80057e0:	490f      	ldr	r1, [pc, #60]	@ (8005820 <UARTEx_SetNbDataToProcess+0x98>)
 80057e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	7b7a      	ldrb	r2, [r7, #13]
 80057f4:	4909      	ldr	r1, [pc, #36]	@ (800581c <UARTEx_SetNbDataToProcess+0x94>)
 80057f6:	5c8a      	ldrb	r2, [r1, r2]
 80057f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057fc:	7b7a      	ldrb	r2, [r7, #13]
 80057fe:	4908      	ldr	r1, [pc, #32]	@ (8005820 <UARTEx_SetNbDataToProcess+0x98>)
 8005800:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005802:	fb93 f3f2 	sdiv	r3, r3, r2
 8005806:	b29a      	uxth	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800580e:	bf00      	nop
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	080066e8 	.word	0x080066e8
 8005820:	080066f0 	.word	0x080066f0

08005824 <std>:
 8005824:	2300      	movs	r3, #0
 8005826:	b510      	push	{r4, lr}
 8005828:	4604      	mov	r4, r0
 800582a:	e9c0 3300 	strd	r3, r3, [r0]
 800582e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005832:	6083      	str	r3, [r0, #8]
 8005834:	8181      	strh	r1, [r0, #12]
 8005836:	6643      	str	r3, [r0, #100]	@ 0x64
 8005838:	81c2      	strh	r2, [r0, #14]
 800583a:	6183      	str	r3, [r0, #24]
 800583c:	4619      	mov	r1, r3
 800583e:	2208      	movs	r2, #8
 8005840:	305c      	adds	r0, #92	@ 0x5c
 8005842:	f000 f906 	bl	8005a52 <memset>
 8005846:	4b0d      	ldr	r3, [pc, #52]	@ (800587c <std+0x58>)
 8005848:	6263      	str	r3, [r4, #36]	@ 0x24
 800584a:	4b0d      	ldr	r3, [pc, #52]	@ (8005880 <std+0x5c>)
 800584c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800584e:	4b0d      	ldr	r3, [pc, #52]	@ (8005884 <std+0x60>)
 8005850:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005852:	4b0d      	ldr	r3, [pc, #52]	@ (8005888 <std+0x64>)
 8005854:	6323      	str	r3, [r4, #48]	@ 0x30
 8005856:	4b0d      	ldr	r3, [pc, #52]	@ (800588c <std+0x68>)
 8005858:	6224      	str	r4, [r4, #32]
 800585a:	429c      	cmp	r4, r3
 800585c:	d006      	beq.n	800586c <std+0x48>
 800585e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005862:	4294      	cmp	r4, r2
 8005864:	d002      	beq.n	800586c <std+0x48>
 8005866:	33d0      	adds	r3, #208	@ 0xd0
 8005868:	429c      	cmp	r4, r3
 800586a:	d105      	bne.n	8005878 <std+0x54>
 800586c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005874:	f000 b966 	b.w	8005b44 <__retarget_lock_init_recursive>
 8005878:	bd10      	pop	{r4, pc}
 800587a:	bf00      	nop
 800587c:	080059cd 	.word	0x080059cd
 8005880:	080059ef 	.word	0x080059ef
 8005884:	08005a27 	.word	0x08005a27
 8005888:	08005a4b 	.word	0x08005a4b
 800588c:	240001b8 	.word	0x240001b8

08005890 <stdio_exit_handler>:
 8005890:	4a02      	ldr	r2, [pc, #8]	@ (800589c <stdio_exit_handler+0xc>)
 8005892:	4903      	ldr	r1, [pc, #12]	@ (80058a0 <stdio_exit_handler+0x10>)
 8005894:	4803      	ldr	r0, [pc, #12]	@ (80058a4 <stdio_exit_handler+0x14>)
 8005896:	f000 b869 	b.w	800596c <_fwalk_sglue>
 800589a:	bf00      	nop
 800589c:	24000010 	.word	0x24000010
 80058a0:	080063e1 	.word	0x080063e1
 80058a4:	24000020 	.word	0x24000020

080058a8 <cleanup_stdio>:
 80058a8:	6841      	ldr	r1, [r0, #4]
 80058aa:	4b0c      	ldr	r3, [pc, #48]	@ (80058dc <cleanup_stdio+0x34>)
 80058ac:	4299      	cmp	r1, r3
 80058ae:	b510      	push	{r4, lr}
 80058b0:	4604      	mov	r4, r0
 80058b2:	d001      	beq.n	80058b8 <cleanup_stdio+0x10>
 80058b4:	f000 fd94 	bl	80063e0 <_fflush_r>
 80058b8:	68a1      	ldr	r1, [r4, #8]
 80058ba:	4b09      	ldr	r3, [pc, #36]	@ (80058e0 <cleanup_stdio+0x38>)
 80058bc:	4299      	cmp	r1, r3
 80058be:	d002      	beq.n	80058c6 <cleanup_stdio+0x1e>
 80058c0:	4620      	mov	r0, r4
 80058c2:	f000 fd8d 	bl	80063e0 <_fflush_r>
 80058c6:	68e1      	ldr	r1, [r4, #12]
 80058c8:	4b06      	ldr	r3, [pc, #24]	@ (80058e4 <cleanup_stdio+0x3c>)
 80058ca:	4299      	cmp	r1, r3
 80058cc:	d004      	beq.n	80058d8 <cleanup_stdio+0x30>
 80058ce:	4620      	mov	r0, r4
 80058d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d4:	f000 bd84 	b.w	80063e0 <_fflush_r>
 80058d8:	bd10      	pop	{r4, pc}
 80058da:	bf00      	nop
 80058dc:	240001b8 	.word	0x240001b8
 80058e0:	24000220 	.word	0x24000220
 80058e4:	24000288 	.word	0x24000288

080058e8 <global_stdio_init.part.0>:
 80058e8:	b510      	push	{r4, lr}
 80058ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005918 <global_stdio_init.part.0+0x30>)
 80058ec:	4c0b      	ldr	r4, [pc, #44]	@ (800591c <global_stdio_init.part.0+0x34>)
 80058ee:	4a0c      	ldr	r2, [pc, #48]	@ (8005920 <global_stdio_init.part.0+0x38>)
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	4620      	mov	r0, r4
 80058f4:	2200      	movs	r2, #0
 80058f6:	2104      	movs	r1, #4
 80058f8:	f7ff ff94 	bl	8005824 <std>
 80058fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005900:	2201      	movs	r2, #1
 8005902:	2109      	movs	r1, #9
 8005904:	f7ff ff8e 	bl	8005824 <std>
 8005908:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800590c:	2202      	movs	r2, #2
 800590e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005912:	2112      	movs	r1, #18
 8005914:	f7ff bf86 	b.w	8005824 <std>
 8005918:	240002f0 	.word	0x240002f0
 800591c:	240001b8 	.word	0x240001b8
 8005920:	08005891 	.word	0x08005891

08005924 <__sfp_lock_acquire>:
 8005924:	4801      	ldr	r0, [pc, #4]	@ (800592c <__sfp_lock_acquire+0x8>)
 8005926:	f000 b90e 	b.w	8005b46 <__retarget_lock_acquire_recursive>
 800592a:	bf00      	nop
 800592c:	240002f9 	.word	0x240002f9

08005930 <__sfp_lock_release>:
 8005930:	4801      	ldr	r0, [pc, #4]	@ (8005938 <__sfp_lock_release+0x8>)
 8005932:	f000 b909 	b.w	8005b48 <__retarget_lock_release_recursive>
 8005936:	bf00      	nop
 8005938:	240002f9 	.word	0x240002f9

0800593c <__sinit>:
 800593c:	b510      	push	{r4, lr}
 800593e:	4604      	mov	r4, r0
 8005940:	f7ff fff0 	bl	8005924 <__sfp_lock_acquire>
 8005944:	6a23      	ldr	r3, [r4, #32]
 8005946:	b11b      	cbz	r3, 8005950 <__sinit+0x14>
 8005948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800594c:	f7ff bff0 	b.w	8005930 <__sfp_lock_release>
 8005950:	4b04      	ldr	r3, [pc, #16]	@ (8005964 <__sinit+0x28>)
 8005952:	6223      	str	r3, [r4, #32]
 8005954:	4b04      	ldr	r3, [pc, #16]	@ (8005968 <__sinit+0x2c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1f5      	bne.n	8005948 <__sinit+0xc>
 800595c:	f7ff ffc4 	bl	80058e8 <global_stdio_init.part.0>
 8005960:	e7f2      	b.n	8005948 <__sinit+0xc>
 8005962:	bf00      	nop
 8005964:	080058a9 	.word	0x080058a9
 8005968:	240002f0 	.word	0x240002f0

0800596c <_fwalk_sglue>:
 800596c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005970:	4607      	mov	r7, r0
 8005972:	4688      	mov	r8, r1
 8005974:	4614      	mov	r4, r2
 8005976:	2600      	movs	r6, #0
 8005978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800597c:	f1b9 0901 	subs.w	r9, r9, #1
 8005980:	d505      	bpl.n	800598e <_fwalk_sglue+0x22>
 8005982:	6824      	ldr	r4, [r4, #0]
 8005984:	2c00      	cmp	r4, #0
 8005986:	d1f7      	bne.n	8005978 <_fwalk_sglue+0xc>
 8005988:	4630      	mov	r0, r6
 800598a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800598e:	89ab      	ldrh	r3, [r5, #12]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d907      	bls.n	80059a4 <_fwalk_sglue+0x38>
 8005994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005998:	3301      	adds	r3, #1
 800599a:	d003      	beq.n	80059a4 <_fwalk_sglue+0x38>
 800599c:	4629      	mov	r1, r5
 800599e:	4638      	mov	r0, r7
 80059a0:	47c0      	blx	r8
 80059a2:	4306      	orrs	r6, r0
 80059a4:	3568      	adds	r5, #104	@ 0x68
 80059a6:	e7e9      	b.n	800597c <_fwalk_sglue+0x10>

080059a8 <iprintf>:
 80059a8:	b40f      	push	{r0, r1, r2, r3}
 80059aa:	b507      	push	{r0, r1, r2, lr}
 80059ac:	4906      	ldr	r1, [pc, #24]	@ (80059c8 <iprintf+0x20>)
 80059ae:	ab04      	add	r3, sp, #16
 80059b0:	6808      	ldr	r0, [r1, #0]
 80059b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80059b6:	6881      	ldr	r1, [r0, #8]
 80059b8:	9301      	str	r3, [sp, #4]
 80059ba:	f000 f9e9 	bl	8005d90 <_vfiprintf_r>
 80059be:	b003      	add	sp, #12
 80059c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80059c4:	b004      	add	sp, #16
 80059c6:	4770      	bx	lr
 80059c8:	2400001c 	.word	0x2400001c

080059cc <__sread>:
 80059cc:	b510      	push	{r4, lr}
 80059ce:	460c      	mov	r4, r1
 80059d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d4:	f000 f868 	bl	8005aa8 <_read_r>
 80059d8:	2800      	cmp	r0, #0
 80059da:	bfab      	itete	ge
 80059dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059de:	89a3      	ldrhlt	r3, [r4, #12]
 80059e0:	181b      	addge	r3, r3, r0
 80059e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059e6:	bfac      	ite	ge
 80059e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059ea:	81a3      	strhlt	r3, [r4, #12]
 80059ec:	bd10      	pop	{r4, pc}

080059ee <__swrite>:
 80059ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f2:	461f      	mov	r7, r3
 80059f4:	898b      	ldrh	r3, [r1, #12]
 80059f6:	05db      	lsls	r3, r3, #23
 80059f8:	4605      	mov	r5, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	4616      	mov	r6, r2
 80059fe:	d505      	bpl.n	8005a0c <__swrite+0x1e>
 8005a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a04:	2302      	movs	r3, #2
 8005a06:	2200      	movs	r2, #0
 8005a08:	f000 f83c 	bl	8005a84 <_lseek_r>
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a16:	81a3      	strh	r3, [r4, #12]
 8005a18:	4632      	mov	r2, r6
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a22:	f000 b853 	b.w	8005acc <_write_r>

08005a26 <__sseek>:
 8005a26:	b510      	push	{r4, lr}
 8005a28:	460c      	mov	r4, r1
 8005a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a2e:	f000 f829 	bl	8005a84 <_lseek_r>
 8005a32:	1c43      	adds	r3, r0, #1
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	bf15      	itete	ne
 8005a38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a42:	81a3      	strheq	r3, [r4, #12]
 8005a44:	bf18      	it	ne
 8005a46:	81a3      	strhne	r3, [r4, #12]
 8005a48:	bd10      	pop	{r4, pc}

08005a4a <__sclose>:
 8005a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a4e:	f000 b809 	b.w	8005a64 <_close_r>

08005a52 <memset>:
 8005a52:	4402      	add	r2, r0
 8005a54:	4603      	mov	r3, r0
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d100      	bne.n	8005a5c <memset+0xa>
 8005a5a:	4770      	bx	lr
 8005a5c:	f803 1b01 	strb.w	r1, [r3], #1
 8005a60:	e7f9      	b.n	8005a56 <memset+0x4>
	...

08005a64 <_close_r>:
 8005a64:	b538      	push	{r3, r4, r5, lr}
 8005a66:	4d06      	ldr	r5, [pc, #24]	@ (8005a80 <_close_r+0x1c>)
 8005a68:	2300      	movs	r3, #0
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	602b      	str	r3, [r5, #0]
 8005a70:	f7fb f82a 	bl	8000ac8 <_close>
 8005a74:	1c43      	adds	r3, r0, #1
 8005a76:	d102      	bne.n	8005a7e <_close_r+0x1a>
 8005a78:	682b      	ldr	r3, [r5, #0]
 8005a7a:	b103      	cbz	r3, 8005a7e <_close_r+0x1a>
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	bd38      	pop	{r3, r4, r5, pc}
 8005a80:	240002f4 	.word	0x240002f4

08005a84 <_lseek_r>:
 8005a84:	b538      	push	{r3, r4, r5, lr}
 8005a86:	4d07      	ldr	r5, [pc, #28]	@ (8005aa4 <_lseek_r+0x20>)
 8005a88:	4604      	mov	r4, r0
 8005a8a:	4608      	mov	r0, r1
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	2200      	movs	r2, #0
 8005a90:	602a      	str	r2, [r5, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	f7fb f83f 	bl	8000b16 <_lseek>
 8005a98:	1c43      	adds	r3, r0, #1
 8005a9a:	d102      	bne.n	8005aa2 <_lseek_r+0x1e>
 8005a9c:	682b      	ldr	r3, [r5, #0]
 8005a9e:	b103      	cbz	r3, 8005aa2 <_lseek_r+0x1e>
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	bd38      	pop	{r3, r4, r5, pc}
 8005aa4:	240002f4 	.word	0x240002f4

08005aa8 <_read_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4d07      	ldr	r5, [pc, #28]	@ (8005ac8 <_read_r+0x20>)
 8005aac:	4604      	mov	r4, r0
 8005aae:	4608      	mov	r0, r1
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	602a      	str	r2, [r5, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f7fa ffcd 	bl	8000a56 <_read>
 8005abc:	1c43      	adds	r3, r0, #1
 8005abe:	d102      	bne.n	8005ac6 <_read_r+0x1e>
 8005ac0:	682b      	ldr	r3, [r5, #0]
 8005ac2:	b103      	cbz	r3, 8005ac6 <_read_r+0x1e>
 8005ac4:	6023      	str	r3, [r4, #0]
 8005ac6:	bd38      	pop	{r3, r4, r5, pc}
 8005ac8:	240002f4 	.word	0x240002f4

08005acc <_write_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	4d07      	ldr	r5, [pc, #28]	@ (8005aec <_write_r+0x20>)
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	4608      	mov	r0, r1
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	602a      	str	r2, [r5, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	f7fa ffd8 	bl	8000a90 <_write>
 8005ae0:	1c43      	adds	r3, r0, #1
 8005ae2:	d102      	bne.n	8005aea <_write_r+0x1e>
 8005ae4:	682b      	ldr	r3, [r5, #0]
 8005ae6:	b103      	cbz	r3, 8005aea <_write_r+0x1e>
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	bd38      	pop	{r3, r4, r5, pc}
 8005aec:	240002f4 	.word	0x240002f4

08005af0 <__errno>:
 8005af0:	4b01      	ldr	r3, [pc, #4]	@ (8005af8 <__errno+0x8>)
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	2400001c 	.word	0x2400001c

08005afc <__libc_init_array>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	4d0d      	ldr	r5, [pc, #52]	@ (8005b34 <__libc_init_array+0x38>)
 8005b00:	4c0d      	ldr	r4, [pc, #52]	@ (8005b38 <__libc_init_array+0x3c>)
 8005b02:	1b64      	subs	r4, r4, r5
 8005b04:	10a4      	asrs	r4, r4, #2
 8005b06:	2600      	movs	r6, #0
 8005b08:	42a6      	cmp	r6, r4
 8005b0a:	d109      	bne.n	8005b20 <__libc_init_array+0x24>
 8005b0c:	4d0b      	ldr	r5, [pc, #44]	@ (8005b3c <__libc_init_array+0x40>)
 8005b0e:	4c0c      	ldr	r4, [pc, #48]	@ (8005b40 <__libc_init_array+0x44>)
 8005b10:	f000 fdb6 	bl	8006680 <_init>
 8005b14:	1b64      	subs	r4, r4, r5
 8005b16:	10a4      	asrs	r4, r4, #2
 8005b18:	2600      	movs	r6, #0
 8005b1a:	42a6      	cmp	r6, r4
 8005b1c:	d105      	bne.n	8005b2a <__libc_init_array+0x2e>
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b24:	4798      	blx	r3
 8005b26:	3601      	adds	r6, #1
 8005b28:	e7ee      	b.n	8005b08 <__libc_init_array+0xc>
 8005b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b2e:	4798      	blx	r3
 8005b30:	3601      	adds	r6, #1
 8005b32:	e7f2      	b.n	8005b1a <__libc_init_array+0x1e>
 8005b34:	08006734 	.word	0x08006734
 8005b38:	08006734 	.word	0x08006734
 8005b3c:	08006734 	.word	0x08006734
 8005b40:	08006738 	.word	0x08006738

08005b44 <__retarget_lock_init_recursive>:
 8005b44:	4770      	bx	lr

08005b46 <__retarget_lock_acquire_recursive>:
 8005b46:	4770      	bx	lr

08005b48 <__retarget_lock_release_recursive>:
 8005b48:	4770      	bx	lr
	...

08005b4c <_free_r>:
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	4605      	mov	r5, r0
 8005b50:	2900      	cmp	r1, #0
 8005b52:	d041      	beq.n	8005bd8 <_free_r+0x8c>
 8005b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b58:	1f0c      	subs	r4, r1, #4
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	bfb8      	it	lt
 8005b5e:	18e4      	addlt	r4, r4, r3
 8005b60:	f000 f8e0 	bl	8005d24 <__malloc_lock>
 8005b64:	4a1d      	ldr	r2, [pc, #116]	@ (8005bdc <_free_r+0x90>)
 8005b66:	6813      	ldr	r3, [r2, #0]
 8005b68:	b933      	cbnz	r3, 8005b78 <_free_r+0x2c>
 8005b6a:	6063      	str	r3, [r4, #4]
 8005b6c:	6014      	str	r4, [r2, #0]
 8005b6e:	4628      	mov	r0, r5
 8005b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b74:	f000 b8dc 	b.w	8005d30 <__malloc_unlock>
 8005b78:	42a3      	cmp	r3, r4
 8005b7a:	d908      	bls.n	8005b8e <_free_r+0x42>
 8005b7c:	6820      	ldr	r0, [r4, #0]
 8005b7e:	1821      	adds	r1, r4, r0
 8005b80:	428b      	cmp	r3, r1
 8005b82:	bf01      	itttt	eq
 8005b84:	6819      	ldreq	r1, [r3, #0]
 8005b86:	685b      	ldreq	r3, [r3, #4]
 8005b88:	1809      	addeq	r1, r1, r0
 8005b8a:	6021      	streq	r1, [r4, #0]
 8005b8c:	e7ed      	b.n	8005b6a <_free_r+0x1e>
 8005b8e:	461a      	mov	r2, r3
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	b10b      	cbz	r3, 8005b98 <_free_r+0x4c>
 8005b94:	42a3      	cmp	r3, r4
 8005b96:	d9fa      	bls.n	8005b8e <_free_r+0x42>
 8005b98:	6811      	ldr	r1, [r2, #0]
 8005b9a:	1850      	adds	r0, r2, r1
 8005b9c:	42a0      	cmp	r0, r4
 8005b9e:	d10b      	bne.n	8005bb8 <_free_r+0x6c>
 8005ba0:	6820      	ldr	r0, [r4, #0]
 8005ba2:	4401      	add	r1, r0
 8005ba4:	1850      	adds	r0, r2, r1
 8005ba6:	4283      	cmp	r3, r0
 8005ba8:	6011      	str	r1, [r2, #0]
 8005baa:	d1e0      	bne.n	8005b6e <_free_r+0x22>
 8005bac:	6818      	ldr	r0, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	6053      	str	r3, [r2, #4]
 8005bb2:	4408      	add	r0, r1
 8005bb4:	6010      	str	r0, [r2, #0]
 8005bb6:	e7da      	b.n	8005b6e <_free_r+0x22>
 8005bb8:	d902      	bls.n	8005bc0 <_free_r+0x74>
 8005bba:	230c      	movs	r3, #12
 8005bbc:	602b      	str	r3, [r5, #0]
 8005bbe:	e7d6      	b.n	8005b6e <_free_r+0x22>
 8005bc0:	6820      	ldr	r0, [r4, #0]
 8005bc2:	1821      	adds	r1, r4, r0
 8005bc4:	428b      	cmp	r3, r1
 8005bc6:	bf04      	itt	eq
 8005bc8:	6819      	ldreq	r1, [r3, #0]
 8005bca:	685b      	ldreq	r3, [r3, #4]
 8005bcc:	6063      	str	r3, [r4, #4]
 8005bce:	bf04      	itt	eq
 8005bd0:	1809      	addeq	r1, r1, r0
 8005bd2:	6021      	streq	r1, [r4, #0]
 8005bd4:	6054      	str	r4, [r2, #4]
 8005bd6:	e7ca      	b.n	8005b6e <_free_r+0x22>
 8005bd8:	bd38      	pop	{r3, r4, r5, pc}
 8005bda:	bf00      	nop
 8005bdc:	24000300 	.word	0x24000300

08005be0 <sbrk_aligned>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	4e0f      	ldr	r6, [pc, #60]	@ (8005c20 <sbrk_aligned+0x40>)
 8005be4:	460c      	mov	r4, r1
 8005be6:	6831      	ldr	r1, [r6, #0]
 8005be8:	4605      	mov	r5, r0
 8005bea:	b911      	cbnz	r1, 8005bf2 <sbrk_aligned+0x12>
 8005bec:	f000 fcb4 	bl	8006558 <_sbrk_r>
 8005bf0:	6030      	str	r0, [r6, #0]
 8005bf2:	4621      	mov	r1, r4
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	f000 fcaf 	bl	8006558 <_sbrk_r>
 8005bfa:	1c43      	adds	r3, r0, #1
 8005bfc:	d103      	bne.n	8005c06 <sbrk_aligned+0x26>
 8005bfe:	f04f 34ff 	mov.w	r4, #4294967295
 8005c02:	4620      	mov	r0, r4
 8005c04:	bd70      	pop	{r4, r5, r6, pc}
 8005c06:	1cc4      	adds	r4, r0, #3
 8005c08:	f024 0403 	bic.w	r4, r4, #3
 8005c0c:	42a0      	cmp	r0, r4
 8005c0e:	d0f8      	beq.n	8005c02 <sbrk_aligned+0x22>
 8005c10:	1a21      	subs	r1, r4, r0
 8005c12:	4628      	mov	r0, r5
 8005c14:	f000 fca0 	bl	8006558 <_sbrk_r>
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d1f2      	bne.n	8005c02 <sbrk_aligned+0x22>
 8005c1c:	e7ef      	b.n	8005bfe <sbrk_aligned+0x1e>
 8005c1e:	bf00      	nop
 8005c20:	240002fc 	.word	0x240002fc

08005c24 <_malloc_r>:
 8005c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c28:	1ccd      	adds	r5, r1, #3
 8005c2a:	f025 0503 	bic.w	r5, r5, #3
 8005c2e:	3508      	adds	r5, #8
 8005c30:	2d0c      	cmp	r5, #12
 8005c32:	bf38      	it	cc
 8005c34:	250c      	movcc	r5, #12
 8005c36:	2d00      	cmp	r5, #0
 8005c38:	4606      	mov	r6, r0
 8005c3a:	db01      	blt.n	8005c40 <_malloc_r+0x1c>
 8005c3c:	42a9      	cmp	r1, r5
 8005c3e:	d904      	bls.n	8005c4a <_malloc_r+0x26>
 8005c40:	230c      	movs	r3, #12
 8005c42:	6033      	str	r3, [r6, #0]
 8005c44:	2000      	movs	r0, #0
 8005c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d20 <_malloc_r+0xfc>
 8005c4e:	f000 f869 	bl	8005d24 <__malloc_lock>
 8005c52:	f8d8 3000 	ldr.w	r3, [r8]
 8005c56:	461c      	mov	r4, r3
 8005c58:	bb44      	cbnz	r4, 8005cac <_malloc_r+0x88>
 8005c5a:	4629      	mov	r1, r5
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f7ff ffbf 	bl	8005be0 <sbrk_aligned>
 8005c62:	1c43      	adds	r3, r0, #1
 8005c64:	4604      	mov	r4, r0
 8005c66:	d158      	bne.n	8005d1a <_malloc_r+0xf6>
 8005c68:	f8d8 4000 	ldr.w	r4, [r8]
 8005c6c:	4627      	mov	r7, r4
 8005c6e:	2f00      	cmp	r7, #0
 8005c70:	d143      	bne.n	8005cfa <_malloc_r+0xd6>
 8005c72:	2c00      	cmp	r4, #0
 8005c74:	d04b      	beq.n	8005d0e <_malloc_r+0xea>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	4639      	mov	r1, r7
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	eb04 0903 	add.w	r9, r4, r3
 8005c80:	f000 fc6a 	bl	8006558 <_sbrk_r>
 8005c84:	4581      	cmp	r9, r0
 8005c86:	d142      	bne.n	8005d0e <_malloc_r+0xea>
 8005c88:	6821      	ldr	r1, [r4, #0]
 8005c8a:	1a6d      	subs	r5, r5, r1
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f7ff ffa6 	bl	8005be0 <sbrk_aligned>
 8005c94:	3001      	adds	r0, #1
 8005c96:	d03a      	beq.n	8005d0e <_malloc_r+0xea>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	442b      	add	r3, r5
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	bb62      	cbnz	r2, 8005d00 <_malloc_r+0xdc>
 8005ca6:	f8c8 7000 	str.w	r7, [r8]
 8005caa:	e00f      	b.n	8005ccc <_malloc_r+0xa8>
 8005cac:	6822      	ldr	r2, [r4, #0]
 8005cae:	1b52      	subs	r2, r2, r5
 8005cb0:	d420      	bmi.n	8005cf4 <_malloc_r+0xd0>
 8005cb2:	2a0b      	cmp	r2, #11
 8005cb4:	d917      	bls.n	8005ce6 <_malloc_r+0xc2>
 8005cb6:	1961      	adds	r1, r4, r5
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	6025      	str	r5, [r4, #0]
 8005cbc:	bf18      	it	ne
 8005cbe:	6059      	strne	r1, [r3, #4]
 8005cc0:	6863      	ldr	r3, [r4, #4]
 8005cc2:	bf08      	it	eq
 8005cc4:	f8c8 1000 	streq.w	r1, [r8]
 8005cc8:	5162      	str	r2, [r4, r5]
 8005cca:	604b      	str	r3, [r1, #4]
 8005ccc:	4630      	mov	r0, r6
 8005cce:	f000 f82f 	bl	8005d30 <__malloc_unlock>
 8005cd2:	f104 000b 	add.w	r0, r4, #11
 8005cd6:	1d23      	adds	r3, r4, #4
 8005cd8:	f020 0007 	bic.w	r0, r0, #7
 8005cdc:	1ac2      	subs	r2, r0, r3
 8005cde:	bf1c      	itt	ne
 8005ce0:	1a1b      	subne	r3, r3, r0
 8005ce2:	50a3      	strne	r3, [r4, r2]
 8005ce4:	e7af      	b.n	8005c46 <_malloc_r+0x22>
 8005ce6:	6862      	ldr	r2, [r4, #4]
 8005ce8:	42a3      	cmp	r3, r4
 8005cea:	bf0c      	ite	eq
 8005cec:	f8c8 2000 	streq.w	r2, [r8]
 8005cf0:	605a      	strne	r2, [r3, #4]
 8005cf2:	e7eb      	b.n	8005ccc <_malloc_r+0xa8>
 8005cf4:	4623      	mov	r3, r4
 8005cf6:	6864      	ldr	r4, [r4, #4]
 8005cf8:	e7ae      	b.n	8005c58 <_malloc_r+0x34>
 8005cfa:	463c      	mov	r4, r7
 8005cfc:	687f      	ldr	r7, [r7, #4]
 8005cfe:	e7b6      	b.n	8005c6e <_malloc_r+0x4a>
 8005d00:	461a      	mov	r2, r3
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	42a3      	cmp	r3, r4
 8005d06:	d1fb      	bne.n	8005d00 <_malloc_r+0xdc>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	6053      	str	r3, [r2, #4]
 8005d0c:	e7de      	b.n	8005ccc <_malloc_r+0xa8>
 8005d0e:	230c      	movs	r3, #12
 8005d10:	6033      	str	r3, [r6, #0]
 8005d12:	4630      	mov	r0, r6
 8005d14:	f000 f80c 	bl	8005d30 <__malloc_unlock>
 8005d18:	e794      	b.n	8005c44 <_malloc_r+0x20>
 8005d1a:	6005      	str	r5, [r0, #0]
 8005d1c:	e7d6      	b.n	8005ccc <_malloc_r+0xa8>
 8005d1e:	bf00      	nop
 8005d20:	24000300 	.word	0x24000300

08005d24 <__malloc_lock>:
 8005d24:	4801      	ldr	r0, [pc, #4]	@ (8005d2c <__malloc_lock+0x8>)
 8005d26:	f7ff bf0e 	b.w	8005b46 <__retarget_lock_acquire_recursive>
 8005d2a:	bf00      	nop
 8005d2c:	240002f8 	.word	0x240002f8

08005d30 <__malloc_unlock>:
 8005d30:	4801      	ldr	r0, [pc, #4]	@ (8005d38 <__malloc_unlock+0x8>)
 8005d32:	f7ff bf09 	b.w	8005b48 <__retarget_lock_release_recursive>
 8005d36:	bf00      	nop
 8005d38:	240002f8 	.word	0x240002f8

08005d3c <__sfputc_r>:
 8005d3c:	6893      	ldr	r3, [r2, #8]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	b410      	push	{r4}
 8005d44:	6093      	str	r3, [r2, #8]
 8005d46:	da08      	bge.n	8005d5a <__sfputc_r+0x1e>
 8005d48:	6994      	ldr	r4, [r2, #24]
 8005d4a:	42a3      	cmp	r3, r4
 8005d4c:	db01      	blt.n	8005d52 <__sfputc_r+0x16>
 8005d4e:	290a      	cmp	r1, #10
 8005d50:	d103      	bne.n	8005d5a <__sfputc_r+0x1e>
 8005d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d56:	f000 bb6b 	b.w	8006430 <__swbuf_r>
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	1c58      	adds	r0, r3, #1
 8005d5e:	6010      	str	r0, [r2, #0]
 8005d60:	7019      	strb	r1, [r3, #0]
 8005d62:	4608      	mov	r0, r1
 8005d64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <__sfputs_r>:
 8005d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6c:	4606      	mov	r6, r0
 8005d6e:	460f      	mov	r7, r1
 8005d70:	4614      	mov	r4, r2
 8005d72:	18d5      	adds	r5, r2, r3
 8005d74:	42ac      	cmp	r4, r5
 8005d76:	d101      	bne.n	8005d7c <__sfputs_r+0x12>
 8005d78:	2000      	movs	r0, #0
 8005d7a:	e007      	b.n	8005d8c <__sfputs_r+0x22>
 8005d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d80:	463a      	mov	r2, r7
 8005d82:	4630      	mov	r0, r6
 8005d84:	f7ff ffda 	bl	8005d3c <__sfputc_r>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d1f3      	bne.n	8005d74 <__sfputs_r+0xa>
 8005d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d90 <_vfiprintf_r>:
 8005d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d94:	460d      	mov	r5, r1
 8005d96:	b09d      	sub	sp, #116	@ 0x74
 8005d98:	4614      	mov	r4, r2
 8005d9a:	4698      	mov	r8, r3
 8005d9c:	4606      	mov	r6, r0
 8005d9e:	b118      	cbz	r0, 8005da8 <_vfiprintf_r+0x18>
 8005da0:	6a03      	ldr	r3, [r0, #32]
 8005da2:	b90b      	cbnz	r3, 8005da8 <_vfiprintf_r+0x18>
 8005da4:	f7ff fdca 	bl	800593c <__sinit>
 8005da8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005daa:	07d9      	lsls	r1, r3, #31
 8005dac:	d405      	bmi.n	8005dba <_vfiprintf_r+0x2a>
 8005dae:	89ab      	ldrh	r3, [r5, #12]
 8005db0:	059a      	lsls	r2, r3, #22
 8005db2:	d402      	bmi.n	8005dba <_vfiprintf_r+0x2a>
 8005db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005db6:	f7ff fec6 	bl	8005b46 <__retarget_lock_acquire_recursive>
 8005dba:	89ab      	ldrh	r3, [r5, #12]
 8005dbc:	071b      	lsls	r3, r3, #28
 8005dbe:	d501      	bpl.n	8005dc4 <_vfiprintf_r+0x34>
 8005dc0:	692b      	ldr	r3, [r5, #16]
 8005dc2:	b99b      	cbnz	r3, 8005dec <_vfiprintf_r+0x5c>
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	f000 fb70 	bl	80064ac <__swsetup_r>
 8005dcc:	b170      	cbz	r0, 8005dec <_vfiprintf_r+0x5c>
 8005dce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dd0:	07dc      	lsls	r4, r3, #31
 8005dd2:	d504      	bpl.n	8005dde <_vfiprintf_r+0x4e>
 8005dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd8:	b01d      	add	sp, #116	@ 0x74
 8005dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dde:	89ab      	ldrh	r3, [r5, #12]
 8005de0:	0598      	lsls	r0, r3, #22
 8005de2:	d4f7      	bmi.n	8005dd4 <_vfiprintf_r+0x44>
 8005de4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005de6:	f7ff feaf 	bl	8005b48 <__retarget_lock_release_recursive>
 8005dea:	e7f3      	b.n	8005dd4 <_vfiprintf_r+0x44>
 8005dec:	2300      	movs	r3, #0
 8005dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8005df0:	2320      	movs	r3, #32
 8005df2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dfa:	2330      	movs	r3, #48	@ 0x30
 8005dfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005fac <_vfiprintf_r+0x21c>
 8005e00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e04:	f04f 0901 	mov.w	r9, #1
 8005e08:	4623      	mov	r3, r4
 8005e0a:	469a      	mov	sl, r3
 8005e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e10:	b10a      	cbz	r2, 8005e16 <_vfiprintf_r+0x86>
 8005e12:	2a25      	cmp	r2, #37	@ 0x25
 8005e14:	d1f9      	bne.n	8005e0a <_vfiprintf_r+0x7a>
 8005e16:	ebba 0b04 	subs.w	fp, sl, r4
 8005e1a:	d00b      	beq.n	8005e34 <_vfiprintf_r+0xa4>
 8005e1c:	465b      	mov	r3, fp
 8005e1e:	4622      	mov	r2, r4
 8005e20:	4629      	mov	r1, r5
 8005e22:	4630      	mov	r0, r6
 8005e24:	f7ff ffa1 	bl	8005d6a <__sfputs_r>
 8005e28:	3001      	adds	r0, #1
 8005e2a:	f000 80a7 	beq.w	8005f7c <_vfiprintf_r+0x1ec>
 8005e2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e30:	445a      	add	r2, fp
 8005e32:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e34:	f89a 3000 	ldrb.w	r3, [sl]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 809f 	beq.w	8005f7c <_vfiprintf_r+0x1ec>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f04f 32ff 	mov.w	r2, #4294967295
 8005e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e48:	f10a 0a01 	add.w	sl, sl, #1
 8005e4c:	9304      	str	r3, [sp, #16]
 8005e4e:	9307      	str	r3, [sp, #28]
 8005e50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e54:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e56:	4654      	mov	r4, sl
 8005e58:	2205      	movs	r2, #5
 8005e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e5e:	4853      	ldr	r0, [pc, #332]	@ (8005fac <_vfiprintf_r+0x21c>)
 8005e60:	f7fa fa46 	bl	80002f0 <memchr>
 8005e64:	9a04      	ldr	r2, [sp, #16]
 8005e66:	b9d8      	cbnz	r0, 8005ea0 <_vfiprintf_r+0x110>
 8005e68:	06d1      	lsls	r1, r2, #27
 8005e6a:	bf44      	itt	mi
 8005e6c:	2320      	movmi	r3, #32
 8005e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e72:	0713      	lsls	r3, r2, #28
 8005e74:	bf44      	itt	mi
 8005e76:	232b      	movmi	r3, #43	@ 0x2b
 8005e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e80:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e82:	d015      	beq.n	8005eb0 <_vfiprintf_r+0x120>
 8005e84:	9a07      	ldr	r2, [sp, #28]
 8005e86:	4654      	mov	r4, sl
 8005e88:	2000      	movs	r0, #0
 8005e8a:	f04f 0c0a 	mov.w	ip, #10
 8005e8e:	4621      	mov	r1, r4
 8005e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e94:	3b30      	subs	r3, #48	@ 0x30
 8005e96:	2b09      	cmp	r3, #9
 8005e98:	d94b      	bls.n	8005f32 <_vfiprintf_r+0x1a2>
 8005e9a:	b1b0      	cbz	r0, 8005eca <_vfiprintf_r+0x13a>
 8005e9c:	9207      	str	r2, [sp, #28]
 8005e9e:	e014      	b.n	8005eca <_vfiprintf_r+0x13a>
 8005ea0:	eba0 0308 	sub.w	r3, r0, r8
 8005ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	9304      	str	r3, [sp, #16]
 8005eac:	46a2      	mov	sl, r4
 8005eae:	e7d2      	b.n	8005e56 <_vfiprintf_r+0xc6>
 8005eb0:	9b03      	ldr	r3, [sp, #12]
 8005eb2:	1d19      	adds	r1, r3, #4
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	9103      	str	r1, [sp, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	bfbb      	ittet	lt
 8005ebc:	425b      	neglt	r3, r3
 8005ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8005ec2:	9307      	strge	r3, [sp, #28]
 8005ec4:	9307      	strlt	r3, [sp, #28]
 8005ec6:	bfb8      	it	lt
 8005ec8:	9204      	strlt	r2, [sp, #16]
 8005eca:	7823      	ldrb	r3, [r4, #0]
 8005ecc:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ece:	d10a      	bne.n	8005ee6 <_vfiprintf_r+0x156>
 8005ed0:	7863      	ldrb	r3, [r4, #1]
 8005ed2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ed4:	d132      	bne.n	8005f3c <_vfiprintf_r+0x1ac>
 8005ed6:	9b03      	ldr	r3, [sp, #12]
 8005ed8:	1d1a      	adds	r2, r3, #4
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	9203      	str	r2, [sp, #12]
 8005ede:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ee2:	3402      	adds	r4, #2
 8005ee4:	9305      	str	r3, [sp, #20]
 8005ee6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005fbc <_vfiprintf_r+0x22c>
 8005eea:	7821      	ldrb	r1, [r4, #0]
 8005eec:	2203      	movs	r2, #3
 8005eee:	4650      	mov	r0, sl
 8005ef0:	f7fa f9fe 	bl	80002f0 <memchr>
 8005ef4:	b138      	cbz	r0, 8005f06 <_vfiprintf_r+0x176>
 8005ef6:	9b04      	ldr	r3, [sp, #16]
 8005ef8:	eba0 000a 	sub.w	r0, r0, sl
 8005efc:	2240      	movs	r2, #64	@ 0x40
 8005efe:	4082      	lsls	r2, r0
 8005f00:	4313      	orrs	r3, r2
 8005f02:	3401      	adds	r4, #1
 8005f04:	9304      	str	r3, [sp, #16]
 8005f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f0a:	4829      	ldr	r0, [pc, #164]	@ (8005fb0 <_vfiprintf_r+0x220>)
 8005f0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f10:	2206      	movs	r2, #6
 8005f12:	f7fa f9ed 	bl	80002f0 <memchr>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	d03f      	beq.n	8005f9a <_vfiprintf_r+0x20a>
 8005f1a:	4b26      	ldr	r3, [pc, #152]	@ (8005fb4 <_vfiprintf_r+0x224>)
 8005f1c:	bb1b      	cbnz	r3, 8005f66 <_vfiprintf_r+0x1d6>
 8005f1e:	9b03      	ldr	r3, [sp, #12]
 8005f20:	3307      	adds	r3, #7
 8005f22:	f023 0307 	bic.w	r3, r3, #7
 8005f26:	3308      	adds	r3, #8
 8005f28:	9303      	str	r3, [sp, #12]
 8005f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f2c:	443b      	add	r3, r7
 8005f2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f30:	e76a      	b.n	8005e08 <_vfiprintf_r+0x78>
 8005f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f36:	460c      	mov	r4, r1
 8005f38:	2001      	movs	r0, #1
 8005f3a:	e7a8      	b.n	8005e8e <_vfiprintf_r+0xfe>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	3401      	adds	r4, #1
 8005f40:	9305      	str	r3, [sp, #20]
 8005f42:	4619      	mov	r1, r3
 8005f44:	f04f 0c0a 	mov.w	ip, #10
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f4e:	3a30      	subs	r2, #48	@ 0x30
 8005f50:	2a09      	cmp	r2, #9
 8005f52:	d903      	bls.n	8005f5c <_vfiprintf_r+0x1cc>
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0c6      	beq.n	8005ee6 <_vfiprintf_r+0x156>
 8005f58:	9105      	str	r1, [sp, #20]
 8005f5a:	e7c4      	b.n	8005ee6 <_vfiprintf_r+0x156>
 8005f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f60:	4604      	mov	r4, r0
 8005f62:	2301      	movs	r3, #1
 8005f64:	e7f0      	b.n	8005f48 <_vfiprintf_r+0x1b8>
 8005f66:	ab03      	add	r3, sp, #12
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	462a      	mov	r2, r5
 8005f6c:	4b12      	ldr	r3, [pc, #72]	@ (8005fb8 <_vfiprintf_r+0x228>)
 8005f6e:	a904      	add	r1, sp, #16
 8005f70:	4630      	mov	r0, r6
 8005f72:	f3af 8000 	nop.w
 8005f76:	4607      	mov	r7, r0
 8005f78:	1c78      	adds	r0, r7, #1
 8005f7a:	d1d6      	bne.n	8005f2a <_vfiprintf_r+0x19a>
 8005f7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f7e:	07d9      	lsls	r1, r3, #31
 8005f80:	d405      	bmi.n	8005f8e <_vfiprintf_r+0x1fe>
 8005f82:	89ab      	ldrh	r3, [r5, #12]
 8005f84:	059a      	lsls	r2, r3, #22
 8005f86:	d402      	bmi.n	8005f8e <_vfiprintf_r+0x1fe>
 8005f88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f8a:	f7ff fddd 	bl	8005b48 <__retarget_lock_release_recursive>
 8005f8e:	89ab      	ldrh	r3, [r5, #12]
 8005f90:	065b      	lsls	r3, r3, #25
 8005f92:	f53f af1f 	bmi.w	8005dd4 <_vfiprintf_r+0x44>
 8005f96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f98:	e71e      	b.n	8005dd8 <_vfiprintf_r+0x48>
 8005f9a:	ab03      	add	r3, sp, #12
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	462a      	mov	r2, r5
 8005fa0:	4b05      	ldr	r3, [pc, #20]	@ (8005fb8 <_vfiprintf_r+0x228>)
 8005fa2:	a904      	add	r1, sp, #16
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	f000 f879 	bl	800609c <_printf_i>
 8005faa:	e7e4      	b.n	8005f76 <_vfiprintf_r+0x1e6>
 8005fac:	080066f8 	.word	0x080066f8
 8005fb0:	08006702 	.word	0x08006702
 8005fb4:	00000000 	.word	0x00000000
 8005fb8:	08005d6b 	.word	0x08005d6b
 8005fbc:	080066fe 	.word	0x080066fe

08005fc0 <_printf_common>:
 8005fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc4:	4616      	mov	r6, r2
 8005fc6:	4698      	mov	r8, r3
 8005fc8:	688a      	ldr	r2, [r1, #8]
 8005fca:	690b      	ldr	r3, [r1, #16]
 8005fcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	bfb8      	it	lt
 8005fd4:	4613      	movlt	r3, r2
 8005fd6:	6033      	str	r3, [r6, #0]
 8005fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fdc:	4607      	mov	r7, r0
 8005fde:	460c      	mov	r4, r1
 8005fe0:	b10a      	cbz	r2, 8005fe6 <_printf_common+0x26>
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	6033      	str	r3, [r6, #0]
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	0699      	lsls	r1, r3, #26
 8005fea:	bf42      	ittt	mi
 8005fec:	6833      	ldrmi	r3, [r6, #0]
 8005fee:	3302      	addmi	r3, #2
 8005ff0:	6033      	strmi	r3, [r6, #0]
 8005ff2:	6825      	ldr	r5, [r4, #0]
 8005ff4:	f015 0506 	ands.w	r5, r5, #6
 8005ff8:	d106      	bne.n	8006008 <_printf_common+0x48>
 8005ffa:	f104 0a19 	add.w	sl, r4, #25
 8005ffe:	68e3      	ldr	r3, [r4, #12]
 8006000:	6832      	ldr	r2, [r6, #0]
 8006002:	1a9b      	subs	r3, r3, r2
 8006004:	42ab      	cmp	r3, r5
 8006006:	dc26      	bgt.n	8006056 <_printf_common+0x96>
 8006008:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800600c:	6822      	ldr	r2, [r4, #0]
 800600e:	3b00      	subs	r3, #0
 8006010:	bf18      	it	ne
 8006012:	2301      	movne	r3, #1
 8006014:	0692      	lsls	r2, r2, #26
 8006016:	d42b      	bmi.n	8006070 <_printf_common+0xb0>
 8006018:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800601c:	4641      	mov	r1, r8
 800601e:	4638      	mov	r0, r7
 8006020:	47c8      	blx	r9
 8006022:	3001      	adds	r0, #1
 8006024:	d01e      	beq.n	8006064 <_printf_common+0xa4>
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	6922      	ldr	r2, [r4, #16]
 800602a:	f003 0306 	and.w	r3, r3, #6
 800602e:	2b04      	cmp	r3, #4
 8006030:	bf02      	ittt	eq
 8006032:	68e5      	ldreq	r5, [r4, #12]
 8006034:	6833      	ldreq	r3, [r6, #0]
 8006036:	1aed      	subeq	r5, r5, r3
 8006038:	68a3      	ldr	r3, [r4, #8]
 800603a:	bf0c      	ite	eq
 800603c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006040:	2500      	movne	r5, #0
 8006042:	4293      	cmp	r3, r2
 8006044:	bfc4      	itt	gt
 8006046:	1a9b      	subgt	r3, r3, r2
 8006048:	18ed      	addgt	r5, r5, r3
 800604a:	2600      	movs	r6, #0
 800604c:	341a      	adds	r4, #26
 800604e:	42b5      	cmp	r5, r6
 8006050:	d11a      	bne.n	8006088 <_printf_common+0xc8>
 8006052:	2000      	movs	r0, #0
 8006054:	e008      	b.n	8006068 <_printf_common+0xa8>
 8006056:	2301      	movs	r3, #1
 8006058:	4652      	mov	r2, sl
 800605a:	4641      	mov	r1, r8
 800605c:	4638      	mov	r0, r7
 800605e:	47c8      	blx	r9
 8006060:	3001      	adds	r0, #1
 8006062:	d103      	bne.n	800606c <_printf_common+0xac>
 8006064:	f04f 30ff 	mov.w	r0, #4294967295
 8006068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800606c:	3501      	adds	r5, #1
 800606e:	e7c6      	b.n	8005ffe <_printf_common+0x3e>
 8006070:	18e1      	adds	r1, r4, r3
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	2030      	movs	r0, #48	@ 0x30
 8006076:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800607a:	4422      	add	r2, r4
 800607c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006080:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006084:	3302      	adds	r3, #2
 8006086:	e7c7      	b.n	8006018 <_printf_common+0x58>
 8006088:	2301      	movs	r3, #1
 800608a:	4622      	mov	r2, r4
 800608c:	4641      	mov	r1, r8
 800608e:	4638      	mov	r0, r7
 8006090:	47c8      	blx	r9
 8006092:	3001      	adds	r0, #1
 8006094:	d0e6      	beq.n	8006064 <_printf_common+0xa4>
 8006096:	3601      	adds	r6, #1
 8006098:	e7d9      	b.n	800604e <_printf_common+0x8e>
	...

0800609c <_printf_i>:
 800609c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060a0:	7e0f      	ldrb	r7, [r1, #24]
 80060a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060a4:	2f78      	cmp	r7, #120	@ 0x78
 80060a6:	4691      	mov	r9, r2
 80060a8:	4680      	mov	r8, r0
 80060aa:	460c      	mov	r4, r1
 80060ac:	469a      	mov	sl, r3
 80060ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060b2:	d807      	bhi.n	80060c4 <_printf_i+0x28>
 80060b4:	2f62      	cmp	r7, #98	@ 0x62
 80060b6:	d80a      	bhi.n	80060ce <_printf_i+0x32>
 80060b8:	2f00      	cmp	r7, #0
 80060ba:	f000 80d1 	beq.w	8006260 <_printf_i+0x1c4>
 80060be:	2f58      	cmp	r7, #88	@ 0x58
 80060c0:	f000 80b8 	beq.w	8006234 <_printf_i+0x198>
 80060c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060cc:	e03a      	b.n	8006144 <_printf_i+0xa8>
 80060ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060d2:	2b15      	cmp	r3, #21
 80060d4:	d8f6      	bhi.n	80060c4 <_printf_i+0x28>
 80060d6:	a101      	add	r1, pc, #4	@ (adr r1, 80060dc <_printf_i+0x40>)
 80060d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060dc:	08006135 	.word	0x08006135
 80060e0:	08006149 	.word	0x08006149
 80060e4:	080060c5 	.word	0x080060c5
 80060e8:	080060c5 	.word	0x080060c5
 80060ec:	080060c5 	.word	0x080060c5
 80060f0:	080060c5 	.word	0x080060c5
 80060f4:	08006149 	.word	0x08006149
 80060f8:	080060c5 	.word	0x080060c5
 80060fc:	080060c5 	.word	0x080060c5
 8006100:	080060c5 	.word	0x080060c5
 8006104:	080060c5 	.word	0x080060c5
 8006108:	08006247 	.word	0x08006247
 800610c:	08006173 	.word	0x08006173
 8006110:	08006201 	.word	0x08006201
 8006114:	080060c5 	.word	0x080060c5
 8006118:	080060c5 	.word	0x080060c5
 800611c:	08006269 	.word	0x08006269
 8006120:	080060c5 	.word	0x080060c5
 8006124:	08006173 	.word	0x08006173
 8006128:	080060c5 	.word	0x080060c5
 800612c:	080060c5 	.word	0x080060c5
 8006130:	08006209 	.word	0x08006209
 8006134:	6833      	ldr	r3, [r6, #0]
 8006136:	1d1a      	adds	r2, r3, #4
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6032      	str	r2, [r6, #0]
 800613c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006140:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006144:	2301      	movs	r3, #1
 8006146:	e09c      	b.n	8006282 <_printf_i+0x1e6>
 8006148:	6833      	ldr	r3, [r6, #0]
 800614a:	6820      	ldr	r0, [r4, #0]
 800614c:	1d19      	adds	r1, r3, #4
 800614e:	6031      	str	r1, [r6, #0]
 8006150:	0606      	lsls	r6, r0, #24
 8006152:	d501      	bpl.n	8006158 <_printf_i+0xbc>
 8006154:	681d      	ldr	r5, [r3, #0]
 8006156:	e003      	b.n	8006160 <_printf_i+0xc4>
 8006158:	0645      	lsls	r5, r0, #25
 800615a:	d5fb      	bpl.n	8006154 <_printf_i+0xb8>
 800615c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006160:	2d00      	cmp	r5, #0
 8006162:	da03      	bge.n	800616c <_printf_i+0xd0>
 8006164:	232d      	movs	r3, #45	@ 0x2d
 8006166:	426d      	negs	r5, r5
 8006168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800616c:	4858      	ldr	r0, [pc, #352]	@ (80062d0 <_printf_i+0x234>)
 800616e:	230a      	movs	r3, #10
 8006170:	e011      	b.n	8006196 <_printf_i+0xfa>
 8006172:	6821      	ldr	r1, [r4, #0]
 8006174:	6833      	ldr	r3, [r6, #0]
 8006176:	0608      	lsls	r0, r1, #24
 8006178:	f853 5b04 	ldr.w	r5, [r3], #4
 800617c:	d402      	bmi.n	8006184 <_printf_i+0xe8>
 800617e:	0649      	lsls	r1, r1, #25
 8006180:	bf48      	it	mi
 8006182:	b2ad      	uxthmi	r5, r5
 8006184:	2f6f      	cmp	r7, #111	@ 0x6f
 8006186:	4852      	ldr	r0, [pc, #328]	@ (80062d0 <_printf_i+0x234>)
 8006188:	6033      	str	r3, [r6, #0]
 800618a:	bf14      	ite	ne
 800618c:	230a      	movne	r3, #10
 800618e:	2308      	moveq	r3, #8
 8006190:	2100      	movs	r1, #0
 8006192:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006196:	6866      	ldr	r6, [r4, #4]
 8006198:	60a6      	str	r6, [r4, #8]
 800619a:	2e00      	cmp	r6, #0
 800619c:	db05      	blt.n	80061aa <_printf_i+0x10e>
 800619e:	6821      	ldr	r1, [r4, #0]
 80061a0:	432e      	orrs	r6, r5
 80061a2:	f021 0104 	bic.w	r1, r1, #4
 80061a6:	6021      	str	r1, [r4, #0]
 80061a8:	d04b      	beq.n	8006242 <_printf_i+0x1a6>
 80061aa:	4616      	mov	r6, r2
 80061ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80061b0:	fb03 5711 	mls	r7, r3, r1, r5
 80061b4:	5dc7      	ldrb	r7, [r0, r7]
 80061b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061ba:	462f      	mov	r7, r5
 80061bc:	42bb      	cmp	r3, r7
 80061be:	460d      	mov	r5, r1
 80061c0:	d9f4      	bls.n	80061ac <_printf_i+0x110>
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d10b      	bne.n	80061de <_printf_i+0x142>
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	07df      	lsls	r7, r3, #31
 80061ca:	d508      	bpl.n	80061de <_printf_i+0x142>
 80061cc:	6923      	ldr	r3, [r4, #16]
 80061ce:	6861      	ldr	r1, [r4, #4]
 80061d0:	4299      	cmp	r1, r3
 80061d2:	bfde      	ittt	le
 80061d4:	2330      	movle	r3, #48	@ 0x30
 80061d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061de:	1b92      	subs	r2, r2, r6
 80061e0:	6122      	str	r2, [r4, #16]
 80061e2:	f8cd a000 	str.w	sl, [sp]
 80061e6:	464b      	mov	r3, r9
 80061e8:	aa03      	add	r2, sp, #12
 80061ea:	4621      	mov	r1, r4
 80061ec:	4640      	mov	r0, r8
 80061ee:	f7ff fee7 	bl	8005fc0 <_printf_common>
 80061f2:	3001      	adds	r0, #1
 80061f4:	d14a      	bne.n	800628c <_printf_i+0x1f0>
 80061f6:	f04f 30ff 	mov.w	r0, #4294967295
 80061fa:	b004      	add	sp, #16
 80061fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	f043 0320 	orr.w	r3, r3, #32
 8006206:	6023      	str	r3, [r4, #0]
 8006208:	4832      	ldr	r0, [pc, #200]	@ (80062d4 <_printf_i+0x238>)
 800620a:	2778      	movs	r7, #120	@ 0x78
 800620c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	6831      	ldr	r1, [r6, #0]
 8006214:	061f      	lsls	r7, r3, #24
 8006216:	f851 5b04 	ldr.w	r5, [r1], #4
 800621a:	d402      	bmi.n	8006222 <_printf_i+0x186>
 800621c:	065f      	lsls	r7, r3, #25
 800621e:	bf48      	it	mi
 8006220:	b2ad      	uxthmi	r5, r5
 8006222:	6031      	str	r1, [r6, #0]
 8006224:	07d9      	lsls	r1, r3, #31
 8006226:	bf44      	itt	mi
 8006228:	f043 0320 	orrmi.w	r3, r3, #32
 800622c:	6023      	strmi	r3, [r4, #0]
 800622e:	b11d      	cbz	r5, 8006238 <_printf_i+0x19c>
 8006230:	2310      	movs	r3, #16
 8006232:	e7ad      	b.n	8006190 <_printf_i+0xf4>
 8006234:	4826      	ldr	r0, [pc, #152]	@ (80062d0 <_printf_i+0x234>)
 8006236:	e7e9      	b.n	800620c <_printf_i+0x170>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	f023 0320 	bic.w	r3, r3, #32
 800623e:	6023      	str	r3, [r4, #0]
 8006240:	e7f6      	b.n	8006230 <_printf_i+0x194>
 8006242:	4616      	mov	r6, r2
 8006244:	e7bd      	b.n	80061c2 <_printf_i+0x126>
 8006246:	6833      	ldr	r3, [r6, #0]
 8006248:	6825      	ldr	r5, [r4, #0]
 800624a:	6961      	ldr	r1, [r4, #20]
 800624c:	1d18      	adds	r0, r3, #4
 800624e:	6030      	str	r0, [r6, #0]
 8006250:	062e      	lsls	r6, r5, #24
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	d501      	bpl.n	800625a <_printf_i+0x1be>
 8006256:	6019      	str	r1, [r3, #0]
 8006258:	e002      	b.n	8006260 <_printf_i+0x1c4>
 800625a:	0668      	lsls	r0, r5, #25
 800625c:	d5fb      	bpl.n	8006256 <_printf_i+0x1ba>
 800625e:	8019      	strh	r1, [r3, #0]
 8006260:	2300      	movs	r3, #0
 8006262:	6123      	str	r3, [r4, #16]
 8006264:	4616      	mov	r6, r2
 8006266:	e7bc      	b.n	80061e2 <_printf_i+0x146>
 8006268:	6833      	ldr	r3, [r6, #0]
 800626a:	1d1a      	adds	r2, r3, #4
 800626c:	6032      	str	r2, [r6, #0]
 800626e:	681e      	ldr	r6, [r3, #0]
 8006270:	6862      	ldr	r2, [r4, #4]
 8006272:	2100      	movs	r1, #0
 8006274:	4630      	mov	r0, r6
 8006276:	f7fa f83b 	bl	80002f0 <memchr>
 800627a:	b108      	cbz	r0, 8006280 <_printf_i+0x1e4>
 800627c:	1b80      	subs	r0, r0, r6
 800627e:	6060      	str	r0, [r4, #4]
 8006280:	6863      	ldr	r3, [r4, #4]
 8006282:	6123      	str	r3, [r4, #16]
 8006284:	2300      	movs	r3, #0
 8006286:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800628a:	e7aa      	b.n	80061e2 <_printf_i+0x146>
 800628c:	6923      	ldr	r3, [r4, #16]
 800628e:	4632      	mov	r2, r6
 8006290:	4649      	mov	r1, r9
 8006292:	4640      	mov	r0, r8
 8006294:	47d0      	blx	sl
 8006296:	3001      	adds	r0, #1
 8006298:	d0ad      	beq.n	80061f6 <_printf_i+0x15a>
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	079b      	lsls	r3, r3, #30
 800629e:	d413      	bmi.n	80062c8 <_printf_i+0x22c>
 80062a0:	68e0      	ldr	r0, [r4, #12]
 80062a2:	9b03      	ldr	r3, [sp, #12]
 80062a4:	4298      	cmp	r0, r3
 80062a6:	bfb8      	it	lt
 80062a8:	4618      	movlt	r0, r3
 80062aa:	e7a6      	b.n	80061fa <_printf_i+0x15e>
 80062ac:	2301      	movs	r3, #1
 80062ae:	4632      	mov	r2, r6
 80062b0:	4649      	mov	r1, r9
 80062b2:	4640      	mov	r0, r8
 80062b4:	47d0      	blx	sl
 80062b6:	3001      	adds	r0, #1
 80062b8:	d09d      	beq.n	80061f6 <_printf_i+0x15a>
 80062ba:	3501      	adds	r5, #1
 80062bc:	68e3      	ldr	r3, [r4, #12]
 80062be:	9903      	ldr	r1, [sp, #12]
 80062c0:	1a5b      	subs	r3, r3, r1
 80062c2:	42ab      	cmp	r3, r5
 80062c4:	dcf2      	bgt.n	80062ac <_printf_i+0x210>
 80062c6:	e7eb      	b.n	80062a0 <_printf_i+0x204>
 80062c8:	2500      	movs	r5, #0
 80062ca:	f104 0619 	add.w	r6, r4, #25
 80062ce:	e7f5      	b.n	80062bc <_printf_i+0x220>
 80062d0:	08006709 	.word	0x08006709
 80062d4:	0800671a 	.word	0x0800671a

080062d8 <__sflush_r>:
 80062d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e0:	0716      	lsls	r6, r2, #28
 80062e2:	4605      	mov	r5, r0
 80062e4:	460c      	mov	r4, r1
 80062e6:	d454      	bmi.n	8006392 <__sflush_r+0xba>
 80062e8:	684b      	ldr	r3, [r1, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	dc02      	bgt.n	80062f4 <__sflush_r+0x1c>
 80062ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	dd48      	ble.n	8006386 <__sflush_r+0xae>
 80062f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062f6:	2e00      	cmp	r6, #0
 80062f8:	d045      	beq.n	8006386 <__sflush_r+0xae>
 80062fa:	2300      	movs	r3, #0
 80062fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006300:	682f      	ldr	r7, [r5, #0]
 8006302:	6a21      	ldr	r1, [r4, #32]
 8006304:	602b      	str	r3, [r5, #0]
 8006306:	d030      	beq.n	800636a <__sflush_r+0x92>
 8006308:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	0759      	lsls	r1, r3, #29
 800630e:	d505      	bpl.n	800631c <__sflush_r+0x44>
 8006310:	6863      	ldr	r3, [r4, #4]
 8006312:	1ad2      	subs	r2, r2, r3
 8006314:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006316:	b10b      	cbz	r3, 800631c <__sflush_r+0x44>
 8006318:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800631a:	1ad2      	subs	r2, r2, r3
 800631c:	2300      	movs	r3, #0
 800631e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006320:	6a21      	ldr	r1, [r4, #32]
 8006322:	4628      	mov	r0, r5
 8006324:	47b0      	blx	r6
 8006326:	1c43      	adds	r3, r0, #1
 8006328:	89a3      	ldrh	r3, [r4, #12]
 800632a:	d106      	bne.n	800633a <__sflush_r+0x62>
 800632c:	6829      	ldr	r1, [r5, #0]
 800632e:	291d      	cmp	r1, #29
 8006330:	d82b      	bhi.n	800638a <__sflush_r+0xb2>
 8006332:	4a2a      	ldr	r2, [pc, #168]	@ (80063dc <__sflush_r+0x104>)
 8006334:	40ca      	lsrs	r2, r1
 8006336:	07d6      	lsls	r6, r2, #31
 8006338:	d527      	bpl.n	800638a <__sflush_r+0xb2>
 800633a:	2200      	movs	r2, #0
 800633c:	6062      	str	r2, [r4, #4]
 800633e:	04d9      	lsls	r1, r3, #19
 8006340:	6922      	ldr	r2, [r4, #16]
 8006342:	6022      	str	r2, [r4, #0]
 8006344:	d504      	bpl.n	8006350 <__sflush_r+0x78>
 8006346:	1c42      	adds	r2, r0, #1
 8006348:	d101      	bne.n	800634e <__sflush_r+0x76>
 800634a:	682b      	ldr	r3, [r5, #0]
 800634c:	b903      	cbnz	r3, 8006350 <__sflush_r+0x78>
 800634e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006350:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006352:	602f      	str	r7, [r5, #0]
 8006354:	b1b9      	cbz	r1, 8006386 <__sflush_r+0xae>
 8006356:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800635a:	4299      	cmp	r1, r3
 800635c:	d002      	beq.n	8006364 <__sflush_r+0x8c>
 800635e:	4628      	mov	r0, r5
 8006360:	f7ff fbf4 	bl	8005b4c <_free_r>
 8006364:	2300      	movs	r3, #0
 8006366:	6363      	str	r3, [r4, #52]	@ 0x34
 8006368:	e00d      	b.n	8006386 <__sflush_r+0xae>
 800636a:	2301      	movs	r3, #1
 800636c:	4628      	mov	r0, r5
 800636e:	47b0      	blx	r6
 8006370:	4602      	mov	r2, r0
 8006372:	1c50      	adds	r0, r2, #1
 8006374:	d1c9      	bne.n	800630a <__sflush_r+0x32>
 8006376:	682b      	ldr	r3, [r5, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d0c6      	beq.n	800630a <__sflush_r+0x32>
 800637c:	2b1d      	cmp	r3, #29
 800637e:	d001      	beq.n	8006384 <__sflush_r+0xac>
 8006380:	2b16      	cmp	r3, #22
 8006382:	d11e      	bne.n	80063c2 <__sflush_r+0xea>
 8006384:	602f      	str	r7, [r5, #0]
 8006386:	2000      	movs	r0, #0
 8006388:	e022      	b.n	80063d0 <__sflush_r+0xf8>
 800638a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800638e:	b21b      	sxth	r3, r3
 8006390:	e01b      	b.n	80063ca <__sflush_r+0xf2>
 8006392:	690f      	ldr	r7, [r1, #16]
 8006394:	2f00      	cmp	r7, #0
 8006396:	d0f6      	beq.n	8006386 <__sflush_r+0xae>
 8006398:	0793      	lsls	r3, r2, #30
 800639a:	680e      	ldr	r6, [r1, #0]
 800639c:	bf08      	it	eq
 800639e:	694b      	ldreq	r3, [r1, #20]
 80063a0:	600f      	str	r7, [r1, #0]
 80063a2:	bf18      	it	ne
 80063a4:	2300      	movne	r3, #0
 80063a6:	eba6 0807 	sub.w	r8, r6, r7
 80063aa:	608b      	str	r3, [r1, #8]
 80063ac:	f1b8 0f00 	cmp.w	r8, #0
 80063b0:	dde9      	ble.n	8006386 <__sflush_r+0xae>
 80063b2:	6a21      	ldr	r1, [r4, #32]
 80063b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063b6:	4643      	mov	r3, r8
 80063b8:	463a      	mov	r2, r7
 80063ba:	4628      	mov	r0, r5
 80063bc:	47b0      	blx	r6
 80063be:	2800      	cmp	r0, #0
 80063c0:	dc08      	bgt.n	80063d4 <__sflush_r+0xfc>
 80063c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063ca:	81a3      	strh	r3, [r4, #12]
 80063cc:	f04f 30ff 	mov.w	r0, #4294967295
 80063d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063d4:	4407      	add	r7, r0
 80063d6:	eba8 0800 	sub.w	r8, r8, r0
 80063da:	e7e7      	b.n	80063ac <__sflush_r+0xd4>
 80063dc:	20400001 	.word	0x20400001

080063e0 <_fflush_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	690b      	ldr	r3, [r1, #16]
 80063e4:	4605      	mov	r5, r0
 80063e6:	460c      	mov	r4, r1
 80063e8:	b913      	cbnz	r3, 80063f0 <_fflush_r+0x10>
 80063ea:	2500      	movs	r5, #0
 80063ec:	4628      	mov	r0, r5
 80063ee:	bd38      	pop	{r3, r4, r5, pc}
 80063f0:	b118      	cbz	r0, 80063fa <_fflush_r+0x1a>
 80063f2:	6a03      	ldr	r3, [r0, #32]
 80063f4:	b90b      	cbnz	r3, 80063fa <_fflush_r+0x1a>
 80063f6:	f7ff faa1 	bl	800593c <__sinit>
 80063fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0f3      	beq.n	80063ea <_fflush_r+0xa>
 8006402:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006404:	07d0      	lsls	r0, r2, #31
 8006406:	d404      	bmi.n	8006412 <_fflush_r+0x32>
 8006408:	0599      	lsls	r1, r3, #22
 800640a:	d402      	bmi.n	8006412 <_fflush_r+0x32>
 800640c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800640e:	f7ff fb9a 	bl	8005b46 <__retarget_lock_acquire_recursive>
 8006412:	4628      	mov	r0, r5
 8006414:	4621      	mov	r1, r4
 8006416:	f7ff ff5f 	bl	80062d8 <__sflush_r>
 800641a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800641c:	07da      	lsls	r2, r3, #31
 800641e:	4605      	mov	r5, r0
 8006420:	d4e4      	bmi.n	80063ec <_fflush_r+0xc>
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	059b      	lsls	r3, r3, #22
 8006426:	d4e1      	bmi.n	80063ec <_fflush_r+0xc>
 8006428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800642a:	f7ff fb8d 	bl	8005b48 <__retarget_lock_release_recursive>
 800642e:	e7dd      	b.n	80063ec <_fflush_r+0xc>

08006430 <__swbuf_r>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	460e      	mov	r6, r1
 8006434:	4614      	mov	r4, r2
 8006436:	4605      	mov	r5, r0
 8006438:	b118      	cbz	r0, 8006442 <__swbuf_r+0x12>
 800643a:	6a03      	ldr	r3, [r0, #32]
 800643c:	b90b      	cbnz	r3, 8006442 <__swbuf_r+0x12>
 800643e:	f7ff fa7d 	bl	800593c <__sinit>
 8006442:	69a3      	ldr	r3, [r4, #24]
 8006444:	60a3      	str	r3, [r4, #8]
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	071a      	lsls	r2, r3, #28
 800644a:	d501      	bpl.n	8006450 <__swbuf_r+0x20>
 800644c:	6923      	ldr	r3, [r4, #16]
 800644e:	b943      	cbnz	r3, 8006462 <__swbuf_r+0x32>
 8006450:	4621      	mov	r1, r4
 8006452:	4628      	mov	r0, r5
 8006454:	f000 f82a 	bl	80064ac <__swsetup_r>
 8006458:	b118      	cbz	r0, 8006462 <__swbuf_r+0x32>
 800645a:	f04f 37ff 	mov.w	r7, #4294967295
 800645e:	4638      	mov	r0, r7
 8006460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	6922      	ldr	r2, [r4, #16]
 8006466:	1a98      	subs	r0, r3, r2
 8006468:	6963      	ldr	r3, [r4, #20]
 800646a:	b2f6      	uxtb	r6, r6
 800646c:	4283      	cmp	r3, r0
 800646e:	4637      	mov	r7, r6
 8006470:	dc05      	bgt.n	800647e <__swbuf_r+0x4e>
 8006472:	4621      	mov	r1, r4
 8006474:	4628      	mov	r0, r5
 8006476:	f7ff ffb3 	bl	80063e0 <_fflush_r>
 800647a:	2800      	cmp	r0, #0
 800647c:	d1ed      	bne.n	800645a <__swbuf_r+0x2a>
 800647e:	68a3      	ldr	r3, [r4, #8]
 8006480:	3b01      	subs	r3, #1
 8006482:	60a3      	str	r3, [r4, #8]
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	6022      	str	r2, [r4, #0]
 800648a:	701e      	strb	r6, [r3, #0]
 800648c:	6962      	ldr	r2, [r4, #20]
 800648e:	1c43      	adds	r3, r0, #1
 8006490:	429a      	cmp	r2, r3
 8006492:	d004      	beq.n	800649e <__swbuf_r+0x6e>
 8006494:	89a3      	ldrh	r3, [r4, #12]
 8006496:	07db      	lsls	r3, r3, #31
 8006498:	d5e1      	bpl.n	800645e <__swbuf_r+0x2e>
 800649a:	2e0a      	cmp	r6, #10
 800649c:	d1df      	bne.n	800645e <__swbuf_r+0x2e>
 800649e:	4621      	mov	r1, r4
 80064a0:	4628      	mov	r0, r5
 80064a2:	f7ff ff9d 	bl	80063e0 <_fflush_r>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d0d9      	beq.n	800645e <__swbuf_r+0x2e>
 80064aa:	e7d6      	b.n	800645a <__swbuf_r+0x2a>

080064ac <__swsetup_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	4b29      	ldr	r3, [pc, #164]	@ (8006554 <__swsetup_r+0xa8>)
 80064b0:	4605      	mov	r5, r0
 80064b2:	6818      	ldr	r0, [r3, #0]
 80064b4:	460c      	mov	r4, r1
 80064b6:	b118      	cbz	r0, 80064c0 <__swsetup_r+0x14>
 80064b8:	6a03      	ldr	r3, [r0, #32]
 80064ba:	b90b      	cbnz	r3, 80064c0 <__swsetup_r+0x14>
 80064bc:	f7ff fa3e 	bl	800593c <__sinit>
 80064c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064c4:	0719      	lsls	r1, r3, #28
 80064c6:	d422      	bmi.n	800650e <__swsetup_r+0x62>
 80064c8:	06da      	lsls	r2, r3, #27
 80064ca:	d407      	bmi.n	80064dc <__swsetup_r+0x30>
 80064cc:	2209      	movs	r2, #9
 80064ce:	602a      	str	r2, [r5, #0]
 80064d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064d4:	81a3      	strh	r3, [r4, #12]
 80064d6:	f04f 30ff 	mov.w	r0, #4294967295
 80064da:	e033      	b.n	8006544 <__swsetup_r+0x98>
 80064dc:	0758      	lsls	r0, r3, #29
 80064de:	d512      	bpl.n	8006506 <__swsetup_r+0x5a>
 80064e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064e2:	b141      	cbz	r1, 80064f6 <__swsetup_r+0x4a>
 80064e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064e8:	4299      	cmp	r1, r3
 80064ea:	d002      	beq.n	80064f2 <__swsetup_r+0x46>
 80064ec:	4628      	mov	r0, r5
 80064ee:	f7ff fb2d 	bl	8005b4c <_free_r>
 80064f2:	2300      	movs	r3, #0
 80064f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80064f6:	89a3      	ldrh	r3, [r4, #12]
 80064f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064fc:	81a3      	strh	r3, [r4, #12]
 80064fe:	2300      	movs	r3, #0
 8006500:	6063      	str	r3, [r4, #4]
 8006502:	6923      	ldr	r3, [r4, #16]
 8006504:	6023      	str	r3, [r4, #0]
 8006506:	89a3      	ldrh	r3, [r4, #12]
 8006508:	f043 0308 	orr.w	r3, r3, #8
 800650c:	81a3      	strh	r3, [r4, #12]
 800650e:	6923      	ldr	r3, [r4, #16]
 8006510:	b94b      	cbnz	r3, 8006526 <__swsetup_r+0x7a>
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800651c:	d003      	beq.n	8006526 <__swsetup_r+0x7a>
 800651e:	4621      	mov	r1, r4
 8006520:	4628      	mov	r0, r5
 8006522:	f000 f84f 	bl	80065c4 <__smakebuf_r>
 8006526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800652a:	f013 0201 	ands.w	r2, r3, #1
 800652e:	d00a      	beq.n	8006546 <__swsetup_r+0x9a>
 8006530:	2200      	movs	r2, #0
 8006532:	60a2      	str	r2, [r4, #8]
 8006534:	6962      	ldr	r2, [r4, #20]
 8006536:	4252      	negs	r2, r2
 8006538:	61a2      	str	r2, [r4, #24]
 800653a:	6922      	ldr	r2, [r4, #16]
 800653c:	b942      	cbnz	r2, 8006550 <__swsetup_r+0xa4>
 800653e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006542:	d1c5      	bne.n	80064d0 <__swsetup_r+0x24>
 8006544:	bd38      	pop	{r3, r4, r5, pc}
 8006546:	0799      	lsls	r1, r3, #30
 8006548:	bf58      	it	pl
 800654a:	6962      	ldrpl	r2, [r4, #20]
 800654c:	60a2      	str	r2, [r4, #8]
 800654e:	e7f4      	b.n	800653a <__swsetup_r+0x8e>
 8006550:	2000      	movs	r0, #0
 8006552:	e7f7      	b.n	8006544 <__swsetup_r+0x98>
 8006554:	2400001c 	.word	0x2400001c

08006558 <_sbrk_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4d06      	ldr	r5, [pc, #24]	@ (8006574 <_sbrk_r+0x1c>)
 800655c:	2300      	movs	r3, #0
 800655e:	4604      	mov	r4, r0
 8006560:	4608      	mov	r0, r1
 8006562:	602b      	str	r3, [r5, #0]
 8006564:	f7fa fae4 	bl	8000b30 <_sbrk>
 8006568:	1c43      	adds	r3, r0, #1
 800656a:	d102      	bne.n	8006572 <_sbrk_r+0x1a>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	b103      	cbz	r3, 8006572 <_sbrk_r+0x1a>
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	240002f4 	.word	0x240002f4

08006578 <__swhatbuf_r>:
 8006578:	b570      	push	{r4, r5, r6, lr}
 800657a:	460c      	mov	r4, r1
 800657c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006580:	2900      	cmp	r1, #0
 8006582:	b096      	sub	sp, #88	@ 0x58
 8006584:	4615      	mov	r5, r2
 8006586:	461e      	mov	r6, r3
 8006588:	da0d      	bge.n	80065a6 <__swhatbuf_r+0x2e>
 800658a:	89a3      	ldrh	r3, [r4, #12]
 800658c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006590:	f04f 0100 	mov.w	r1, #0
 8006594:	bf14      	ite	ne
 8006596:	2340      	movne	r3, #64	@ 0x40
 8006598:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800659c:	2000      	movs	r0, #0
 800659e:	6031      	str	r1, [r6, #0]
 80065a0:	602b      	str	r3, [r5, #0]
 80065a2:	b016      	add	sp, #88	@ 0x58
 80065a4:	bd70      	pop	{r4, r5, r6, pc}
 80065a6:	466a      	mov	r2, sp
 80065a8:	f000 f848 	bl	800663c <_fstat_r>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	dbec      	blt.n	800658a <__swhatbuf_r+0x12>
 80065b0:	9901      	ldr	r1, [sp, #4]
 80065b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065ba:	4259      	negs	r1, r3
 80065bc:	4159      	adcs	r1, r3
 80065be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065c2:	e7eb      	b.n	800659c <__swhatbuf_r+0x24>

080065c4 <__smakebuf_r>:
 80065c4:	898b      	ldrh	r3, [r1, #12]
 80065c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065c8:	079d      	lsls	r5, r3, #30
 80065ca:	4606      	mov	r6, r0
 80065cc:	460c      	mov	r4, r1
 80065ce:	d507      	bpl.n	80065e0 <__smakebuf_r+0x1c>
 80065d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	6123      	str	r3, [r4, #16]
 80065d8:	2301      	movs	r3, #1
 80065da:	6163      	str	r3, [r4, #20]
 80065dc:	b003      	add	sp, #12
 80065de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065e0:	ab01      	add	r3, sp, #4
 80065e2:	466a      	mov	r2, sp
 80065e4:	f7ff ffc8 	bl	8006578 <__swhatbuf_r>
 80065e8:	9f00      	ldr	r7, [sp, #0]
 80065ea:	4605      	mov	r5, r0
 80065ec:	4639      	mov	r1, r7
 80065ee:	4630      	mov	r0, r6
 80065f0:	f7ff fb18 	bl	8005c24 <_malloc_r>
 80065f4:	b948      	cbnz	r0, 800660a <__smakebuf_r+0x46>
 80065f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065fa:	059a      	lsls	r2, r3, #22
 80065fc:	d4ee      	bmi.n	80065dc <__smakebuf_r+0x18>
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	f043 0302 	orr.w	r3, r3, #2
 8006606:	81a3      	strh	r3, [r4, #12]
 8006608:	e7e2      	b.n	80065d0 <__smakebuf_r+0xc>
 800660a:	89a3      	ldrh	r3, [r4, #12]
 800660c:	6020      	str	r0, [r4, #0]
 800660e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006612:	81a3      	strh	r3, [r4, #12]
 8006614:	9b01      	ldr	r3, [sp, #4]
 8006616:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800661a:	b15b      	cbz	r3, 8006634 <__smakebuf_r+0x70>
 800661c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006620:	4630      	mov	r0, r6
 8006622:	f000 f81d 	bl	8006660 <_isatty_r>
 8006626:	b128      	cbz	r0, 8006634 <__smakebuf_r+0x70>
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	f023 0303 	bic.w	r3, r3, #3
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	81a3      	strh	r3, [r4, #12]
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	431d      	orrs	r5, r3
 8006638:	81a5      	strh	r5, [r4, #12]
 800663a:	e7cf      	b.n	80065dc <__smakebuf_r+0x18>

0800663c <_fstat_r>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	4d07      	ldr	r5, [pc, #28]	@ (800665c <_fstat_r+0x20>)
 8006640:	2300      	movs	r3, #0
 8006642:	4604      	mov	r4, r0
 8006644:	4608      	mov	r0, r1
 8006646:	4611      	mov	r1, r2
 8006648:	602b      	str	r3, [r5, #0]
 800664a:	f7fa fa49 	bl	8000ae0 <_fstat>
 800664e:	1c43      	adds	r3, r0, #1
 8006650:	d102      	bne.n	8006658 <_fstat_r+0x1c>
 8006652:	682b      	ldr	r3, [r5, #0]
 8006654:	b103      	cbz	r3, 8006658 <_fstat_r+0x1c>
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	bd38      	pop	{r3, r4, r5, pc}
 800665a:	bf00      	nop
 800665c:	240002f4 	.word	0x240002f4

08006660 <_isatty_r>:
 8006660:	b538      	push	{r3, r4, r5, lr}
 8006662:	4d06      	ldr	r5, [pc, #24]	@ (800667c <_isatty_r+0x1c>)
 8006664:	2300      	movs	r3, #0
 8006666:	4604      	mov	r4, r0
 8006668:	4608      	mov	r0, r1
 800666a:	602b      	str	r3, [r5, #0]
 800666c:	f7fa fa48 	bl	8000b00 <_isatty>
 8006670:	1c43      	adds	r3, r0, #1
 8006672:	d102      	bne.n	800667a <_isatty_r+0x1a>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	b103      	cbz	r3, 800667a <_isatty_r+0x1a>
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	bd38      	pop	{r3, r4, r5, pc}
 800667c:	240002f4 	.word	0x240002f4

08006680 <_init>:
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	bf00      	nop
 8006684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006686:	bc08      	pop	{r3}
 8006688:	469e      	mov	lr, r3
 800668a:	4770      	bx	lr

0800668c <_fini>:
 800668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668e:	bf00      	nop
 8006690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006692:	bc08      	pop	{r3}
 8006694:	469e      	mov	lr, r3
 8006696:	4770      	bx	lr
