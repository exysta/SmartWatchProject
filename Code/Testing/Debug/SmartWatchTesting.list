
SmartWatchTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e580  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  0800e830  0800e830  0000f830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ec2c  0800ec2c  0000fc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ec34  0800ec34  0000fc34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ec38  0800ec38  0000fc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800ec3c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a14  240001d8  0800ee14  000101d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000bec  0800ee14  00010bec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b7fa  00000000  00000000  00010206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003857  00000000  00000000  0002ba00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001298  00000000  00000000  0002f258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e4c  00000000  00000000  000304f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032ee1  00000000  00000000  0003133c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cceb  00000000  00000000  0006421d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013d4d6  00000000  00000000  00080f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001be3de  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ab8  00000000  00000000  001be424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000087  00000000  00000000  001c3edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001d8 	.word	0x240001d8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800e818 	.word	0x0800e818

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	0800e818 	.word	0x0800e818

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b988 	b.w	80006c8 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	468e      	mov	lr, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	4688      	mov	r8, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4617      	mov	r7, r2
 80003e4:	d962      	bls.n	80004ac <__udivmoddi4+0xdc>
 80003e6:	fab2 f682 	clz	r6, r2
 80003ea:	b14e      	cbz	r6, 8000400 <__udivmoddi4+0x30>
 80003ec:	f1c6 0320 	rsb	r3, r6, #32
 80003f0:	fa01 f806 	lsl.w	r8, r1, r6
 80003f4:	fa20 f303 	lsr.w	r3, r0, r3
 80003f8:	40b7      	lsls	r7, r6
 80003fa:	ea43 0808 	orr.w	r8, r3, r8
 80003fe:	40b4      	lsls	r4, r6
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	fbb8 f1fe 	udiv	r1, r8, lr
 800040c:	0c23      	lsrs	r3, r4, #16
 800040e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fb01 f20c 	mul.w	r2, r1, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0x62>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f101 30ff 	add.w	r0, r1, #4294967295
 8000424:	f080 80ea 	bcs.w	80005fc <__udivmoddi4+0x22c>
 8000428:	429a      	cmp	r2, r3
 800042a:	f240 80e7 	bls.w	80005fc <__udivmoddi4+0x22c>
 800042e:	3902      	subs	r1, #2
 8000430:	443b      	add	r3, r7
 8000432:	1a9a      	subs	r2, r3, r2
 8000434:	b2a3      	uxth	r3, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000442:	fb00 fc0c 	mul.w	ip, r0, ip
 8000446:	459c      	cmp	ip, r3
 8000448:	d909      	bls.n	800045e <__udivmoddi4+0x8e>
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000450:	f080 80d6 	bcs.w	8000600 <__udivmoddi4+0x230>
 8000454:	459c      	cmp	ip, r3
 8000456:	f240 80d3 	bls.w	8000600 <__udivmoddi4+0x230>
 800045a:	443b      	add	r3, r7
 800045c:	3802      	subs	r0, #2
 800045e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000462:	eba3 030c 	sub.w	r3, r3, ip
 8000466:	2100      	movs	r1, #0
 8000468:	b11d      	cbz	r5, 8000472 <__udivmoddi4+0xa2>
 800046a:	40f3      	lsrs	r3, r6
 800046c:	2200      	movs	r2, #0
 800046e:	e9c5 3200 	strd	r3, r2, [r5]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d905      	bls.n	8000486 <__udivmoddi4+0xb6>
 800047a:	b10d      	cbz	r5, 8000480 <__udivmoddi4+0xb0>
 800047c:	e9c5 0100 	strd	r0, r1, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	4608      	mov	r0, r1
 8000484:	e7f5      	b.n	8000472 <__udivmoddi4+0xa2>
 8000486:	fab3 f183 	clz	r1, r3
 800048a:	2900      	cmp	r1, #0
 800048c:	d146      	bne.n	800051c <__udivmoddi4+0x14c>
 800048e:	4573      	cmp	r3, lr
 8000490:	d302      	bcc.n	8000498 <__udivmoddi4+0xc8>
 8000492:	4282      	cmp	r2, r0
 8000494:	f200 8105 	bhi.w	80006a2 <__udivmoddi4+0x2d2>
 8000498:	1a84      	subs	r4, r0, r2
 800049a:	eb6e 0203 	sbc.w	r2, lr, r3
 800049e:	2001      	movs	r0, #1
 80004a0:	4690      	mov	r8, r2
 80004a2:	2d00      	cmp	r5, #0
 80004a4:	d0e5      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004a6:	e9c5 4800 	strd	r4, r8, [r5]
 80004aa:	e7e2      	b.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f000 8090 	beq.w	80005d2 <__udivmoddi4+0x202>
 80004b2:	fab2 f682 	clz	r6, r2
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	f040 80a4 	bne.w	8000604 <__udivmoddi4+0x234>
 80004bc:	1a8a      	subs	r2, r1, r2
 80004be:	0c03      	lsrs	r3, r0, #16
 80004c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c4:	b280      	uxth	r0, r0
 80004c6:	b2bc      	uxth	r4, r7
 80004c8:	2101      	movs	r1, #1
 80004ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80004d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004d6:	fb04 f20c 	mul.w	r2, r4, ip
 80004da:	429a      	cmp	r2, r3
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x11e>
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004e4:	d202      	bcs.n	80004ec <__udivmoddi4+0x11c>
 80004e6:	429a      	cmp	r2, r3
 80004e8:	f200 80e0 	bhi.w	80006ac <__udivmoddi4+0x2dc>
 80004ec:	46c4      	mov	ip, r8
 80004ee:	1a9b      	subs	r3, r3, r2
 80004f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004fc:	fb02 f404 	mul.w	r4, r2, r4
 8000500:	429c      	cmp	r4, r3
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x144>
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	f102 30ff 	add.w	r0, r2, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x142>
 800050c:	429c      	cmp	r4, r3
 800050e:	f200 80ca 	bhi.w	80006a6 <__udivmoddi4+0x2d6>
 8000512:	4602      	mov	r2, r0
 8000514:	1b1b      	subs	r3, r3, r4
 8000516:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800051a:	e7a5      	b.n	8000468 <__udivmoddi4+0x98>
 800051c:	f1c1 0620 	rsb	r6, r1, #32
 8000520:	408b      	lsls	r3, r1
 8000522:	fa22 f706 	lsr.w	r7, r2, r6
 8000526:	431f      	orrs	r7, r3
 8000528:	fa0e f401 	lsl.w	r4, lr, r1
 800052c:	fa20 f306 	lsr.w	r3, r0, r6
 8000530:	fa2e fe06 	lsr.w	lr, lr, r6
 8000534:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000538:	4323      	orrs	r3, r4
 800053a:	fa00 f801 	lsl.w	r8, r0, r1
 800053e:	fa1f fc87 	uxth.w	ip, r7
 8000542:	fbbe f0f9 	udiv	r0, lr, r9
 8000546:	0c1c      	lsrs	r4, r3, #16
 8000548:	fb09 ee10 	mls	lr, r9, r0, lr
 800054c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000550:	fb00 fe0c 	mul.w	lr, r0, ip
 8000554:	45a6      	cmp	lr, r4
 8000556:	fa02 f201 	lsl.w	r2, r2, r1
 800055a:	d909      	bls.n	8000570 <__udivmoddi4+0x1a0>
 800055c:	193c      	adds	r4, r7, r4
 800055e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000562:	f080 809c 	bcs.w	800069e <__udivmoddi4+0x2ce>
 8000566:	45a6      	cmp	lr, r4
 8000568:	f240 8099 	bls.w	800069e <__udivmoddi4+0x2ce>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	eba4 040e 	sub.w	r4, r4, lr
 8000574:	fa1f fe83 	uxth.w	lr, r3
 8000578:	fbb4 f3f9 	udiv	r3, r4, r9
 800057c:	fb09 4413 	mls	r4, r9, r3, r4
 8000580:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000584:	fb03 fc0c 	mul.w	ip, r3, ip
 8000588:	45a4      	cmp	ip, r4
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x1ce>
 800058c:	193c      	adds	r4, r7, r4
 800058e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000592:	f080 8082 	bcs.w	800069a <__udivmoddi4+0x2ca>
 8000596:	45a4      	cmp	ip, r4
 8000598:	d97f      	bls.n	800069a <__udivmoddi4+0x2ca>
 800059a:	3b02      	subs	r3, #2
 800059c:	443c      	add	r4, r7
 800059e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005a2:	eba4 040c 	sub.w	r4, r4, ip
 80005a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005aa:	4564      	cmp	r4, ip
 80005ac:	4673      	mov	r3, lr
 80005ae:	46e1      	mov	r9, ip
 80005b0:	d362      	bcc.n	8000678 <__udivmoddi4+0x2a8>
 80005b2:	d05f      	beq.n	8000674 <__udivmoddi4+0x2a4>
 80005b4:	b15d      	cbz	r5, 80005ce <__udivmoddi4+0x1fe>
 80005b6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ba:	eb64 0409 	sbc.w	r4, r4, r9
 80005be:	fa04 f606 	lsl.w	r6, r4, r6
 80005c2:	fa22 f301 	lsr.w	r3, r2, r1
 80005c6:	431e      	orrs	r6, r3
 80005c8:	40cc      	lsrs	r4, r1
 80005ca:	e9c5 6400 	strd	r6, r4, [r5]
 80005ce:	2100      	movs	r1, #0
 80005d0:	e74f      	b.n	8000472 <__udivmoddi4+0xa2>
 80005d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005d6:	0c01      	lsrs	r1, r0, #16
 80005d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005dc:	b280      	uxth	r0, r0
 80005de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005e2:	463b      	mov	r3, r7
 80005e4:	4638      	mov	r0, r7
 80005e6:	463c      	mov	r4, r7
 80005e8:	46b8      	mov	r8, r7
 80005ea:	46be      	mov	lr, r7
 80005ec:	2620      	movs	r6, #32
 80005ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80005f2:	eba2 0208 	sub.w	r2, r2, r8
 80005f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005fa:	e766      	b.n	80004ca <__udivmoddi4+0xfa>
 80005fc:	4601      	mov	r1, r0
 80005fe:	e718      	b.n	8000432 <__udivmoddi4+0x62>
 8000600:	4610      	mov	r0, r2
 8000602:	e72c      	b.n	800045e <__udivmoddi4+0x8e>
 8000604:	f1c6 0220 	rsb	r2, r6, #32
 8000608:	fa2e f302 	lsr.w	r3, lr, r2
 800060c:	40b7      	lsls	r7, r6
 800060e:	40b1      	lsls	r1, r6
 8000610:	fa20 f202 	lsr.w	r2, r0, r2
 8000614:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000618:	430a      	orrs	r2, r1
 800061a:	fbb3 f8fe 	udiv	r8, r3, lr
 800061e:	b2bc      	uxth	r4, r7
 8000620:	fb0e 3318 	mls	r3, lr, r8, r3
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800062a:	fb08 f904 	mul.w	r9, r8, r4
 800062e:	40b0      	lsls	r0, r6
 8000630:	4589      	cmp	r9, r1
 8000632:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000636:	b280      	uxth	r0, r0
 8000638:	d93e      	bls.n	80006b8 <__udivmoddi4+0x2e8>
 800063a:	1879      	adds	r1, r7, r1
 800063c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000640:	d201      	bcs.n	8000646 <__udivmoddi4+0x276>
 8000642:	4589      	cmp	r9, r1
 8000644:	d81f      	bhi.n	8000686 <__udivmoddi4+0x2b6>
 8000646:	eba1 0109 	sub.w	r1, r1, r9
 800064a:	fbb1 f9fe 	udiv	r9, r1, lr
 800064e:	fb09 f804 	mul.w	r8, r9, r4
 8000652:	fb0e 1119 	mls	r1, lr, r9, r1
 8000656:	b292      	uxth	r2, r2
 8000658:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800065c:	4542      	cmp	r2, r8
 800065e:	d229      	bcs.n	80006b4 <__udivmoddi4+0x2e4>
 8000660:	18ba      	adds	r2, r7, r2
 8000662:	f109 31ff 	add.w	r1, r9, #4294967295
 8000666:	d2c4      	bcs.n	80005f2 <__udivmoddi4+0x222>
 8000668:	4542      	cmp	r2, r8
 800066a:	d2c2      	bcs.n	80005f2 <__udivmoddi4+0x222>
 800066c:	f1a9 0102 	sub.w	r1, r9, #2
 8000670:	443a      	add	r2, r7
 8000672:	e7be      	b.n	80005f2 <__udivmoddi4+0x222>
 8000674:	45f0      	cmp	r8, lr
 8000676:	d29d      	bcs.n	80005b4 <__udivmoddi4+0x1e4>
 8000678:	ebbe 0302 	subs.w	r3, lr, r2
 800067c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000680:	3801      	subs	r0, #1
 8000682:	46e1      	mov	r9, ip
 8000684:	e796      	b.n	80005b4 <__udivmoddi4+0x1e4>
 8000686:	eba7 0909 	sub.w	r9, r7, r9
 800068a:	4449      	add	r1, r9
 800068c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000690:	fbb1 f9fe 	udiv	r9, r1, lr
 8000694:	fb09 f804 	mul.w	r8, r9, r4
 8000698:	e7db      	b.n	8000652 <__udivmoddi4+0x282>
 800069a:	4673      	mov	r3, lr
 800069c:	e77f      	b.n	800059e <__udivmoddi4+0x1ce>
 800069e:	4650      	mov	r0, sl
 80006a0:	e766      	b.n	8000570 <__udivmoddi4+0x1a0>
 80006a2:	4608      	mov	r0, r1
 80006a4:	e6fd      	b.n	80004a2 <__udivmoddi4+0xd2>
 80006a6:	443b      	add	r3, r7
 80006a8:	3a02      	subs	r2, #2
 80006aa:	e733      	b.n	8000514 <__udivmoddi4+0x144>
 80006ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80006b0:	443b      	add	r3, r7
 80006b2:	e71c      	b.n	80004ee <__udivmoddi4+0x11e>
 80006b4:	4649      	mov	r1, r9
 80006b6:	e79c      	b.n	80005f2 <__udivmoddi4+0x222>
 80006b8:	eba1 0109 	sub.w	r1, r1, r9
 80006bc:	46c4      	mov	ip, r8
 80006be:	fbb1 f9fe 	udiv	r9, r1, lr
 80006c2:	fb09 f804 	mul.w	r8, r9, r4
 80006c6:	e7c4      	b.n	8000652 <__udivmoddi4+0x282>

080006c8 <__aeabi_idiv0>:
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop

080006cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006d4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80006d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	200b      	movs	r0, #11
 80006f6:	f001 fd2c 	bl	8002152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006fa:	200b      	movs	r0, #11
 80006fc:	f001 fd43 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	200c      	movs	r0, #12
 8000706:	f001 fd24 	bl	8002152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800070a:	200c      	movs	r0, #12
 800070c:	f001 fd3b 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	200d      	movs	r0, #13
 8000716:	f001 fd1c 	bl	8002152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800071a:	200d      	movs	r0, #13
 800071c:	f001 fd33 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	200e      	movs	r0, #14
 8000726:	f001 fd14 	bl	8002152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800072a:	200e      	movs	r0, #14
 800072c:	f001 fd2b 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2010      	movs	r0, #16
 8000736:	f001 fd0c 	bl	8002152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800073a:	2010      	movs	r0, #16
 800073c:	f001 fd23 	bl	8002186 <HAL_NVIC_EnableIRQ>

}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58024400 	.word	0x58024400

0800074c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	@ 0x30
 8000750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b8f      	ldr	r3, [pc, #572]	@ (80009a0 <MX_GPIO_Init+0x254>)
 8000764:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000768:	4a8d      	ldr	r2, [pc, #564]	@ (80009a0 <MX_GPIO_Init+0x254>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000772:	4b8b      	ldr	r3, [pc, #556]	@ (80009a0 <MX_GPIO_Init+0x254>)
 8000774:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000780:	4b87      	ldr	r3, [pc, #540]	@ (80009a0 <MX_GPIO_Init+0x254>)
 8000782:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000786:	4a86      	ldr	r2, [pc, #536]	@ (80009a0 <MX_GPIO_Init+0x254>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000790:	4b83      	ldr	r3, [pc, #524]	@ (80009a0 <MX_GPIO_Init+0x254>)
 8000792:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b80      	ldr	r3, [pc, #512]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a4:	4a7e      	ldr	r2, [pc, #504]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ae:	4b7c      	ldr	r3, [pc, #496]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007bc:	4b78      	ldr	r3, [pc, #480]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007c2:	4a77      	ldr	r2, [pc, #476]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007cc:	4b74      	ldr	r3, [pc, #464]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	4b71      	ldr	r3, [pc, #452]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007e0:	4a6f      	ldr	r2, [pc, #444]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ea:	4b6d      	ldr	r3, [pc, #436]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007f0:	f003 0310 	and.w	r3, r3, #16
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f8:	4b69      	ldr	r3, [pc, #420]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007fe:	4a68      	ldr	r2, [pc, #416]	@ (80009a0 <MX_GPIO_Init+0x254>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000808:	4b65      	ldr	r3, [pc, #404]	@ (80009a0 <MX_GPIO_Init+0x254>)
 800080a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000816:	4b62      	ldr	r3, [pc, #392]	@ (80009a0 <MX_GPIO_Init+0x254>)
 8000818:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800081c:	4a60      	ldr	r2, [pc, #384]	@ (80009a0 <MX_GPIO_Init+0x254>)
 800081e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000822:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000826:	4b5e      	ldr	r3, [pc, #376]	@ (80009a0 <MX_GPIO_Init+0x254>)
 8000828:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800082c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU6500_AD0_GPIO_Port, MPU6500_AD0_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2108      	movs	r1, #8
 8000838:	485a      	ldr	r0, [pc, #360]	@ (80009a4 <MX_GPIO_Init+0x258>)
 800083a:	f004 fdd1 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000844:	4858      	ldr	r0, [pc, #352]	@ (80009a8 <MX_GPIO_Init+0x25c>)
 8000846:	f004 fdcb 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000850:	4856      	ldr	r0, [pc, #344]	@ (80009ac <MX_GPIO_Init+0x260>)
 8000852:	f004 fdc5 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800085c:	4854      	ldr	r0, [pc, #336]	@ (80009b0 <MX_GPIO_Init+0x264>)
 800085e:	f004 fdbf 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000868:	4851      	ldr	r0, [pc, #324]	@ (80009b0 <MX_GPIO_Init+0x264>)
 800086a:	f004 fdb9 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000874:	484f      	ldr	r0, [pc, #316]	@ (80009b4 <MX_GPIO_Init+0x268>)
 8000876:	f004 fdb3 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	2110      	movs	r1, #16
 800087e:	484a      	ldr	r0, [pc, #296]	@ (80009a8 <MX_GPIO_Init+0x25c>)
 8000880:	f004 fdae 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2102      	movs	r1, #2
 8000888:	4848      	ldr	r0, [pc, #288]	@ (80009ac <MX_GPIO_Init+0x260>)
 800088a:	f004 fda9 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : InputButton_Pin */
  GPIO_InitStruct.Pin = InputButton_Pin;
 800088e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000894:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(InputButton_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4844      	ldr	r0, [pc, #272]	@ (80009b8 <MX_GPIO_Init+0x26c>)
 80008a6:	f004 fbeb 	bl	8005080 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6500_AD0_Pin */
  GPIO_InitStruct.Pin = MPU6500_AD0_Pin;
 80008aa:	2308      	movs	r3, #8
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MPU6500_AD0_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4838      	ldr	r0, [pc, #224]	@ (80009a4 <MX_GPIO_Init+0x258>)
 80008c2:	f004 fbdd 	bl	8005080 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB4 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_4;
 80008c6:	f244 0311 	movw	r3, #16401	@ 0x4011
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4832      	ldr	r0, [pc, #200]	@ (80009a8 <MX_GPIO_Init+0x25c>)
 80008e0:	f004 fbce 	bl	8005080 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX30102_INT_Pin */
  GPIO_InitStruct.Pin = MAX30102_INT_Pin;
 80008e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MAX30102_INT_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	482c      	ldr	r0, [pc, #176]	@ (80009ac <MX_GPIO_Init+0x260>)
 80008fc:	f004 fbc0 	bl	8005080 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE15 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|LD2_Pin;
 8000900:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4824      	ldr	r0, [pc, #144]	@ (80009ac <MX_GPIO_Init+0x260>)
 800091a:	f004 fbb1 	bl	8005080 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin;
 800091e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800092c:	2302      	movs	r3, #2
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_DC_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	481e      	ldr	r0, [pc, #120]	@ (80009b0 <MX_GPIO_Init+0x264>)
 8000938:	f004 fba2 	bl	8005080 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin;
 800093c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_RST_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4816      	ldr	r0, [pc, #88]	@ (80009b0 <MX_GPIO_Init+0x264>)
 8000956:	f004 fb93 	bl	8005080 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 800095a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4810      	ldr	r0, [pc, #64]	@ (80009b4 <MX_GPIO_Init+0x268>)
 8000974:	f004 fb84 	bl	8005080 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2017      	movs	r0, #23
 800097e:	f001 fbe8 	bl	8002152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000982:	2017      	movs	r0, #23
 8000984:	f001 fbff 	bl	8002186 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2028      	movs	r0, #40	@ 0x28
 800098e:	f001 fbe0 	bl	8002152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000992:	2028      	movs	r0, #40	@ 0x28
 8000994:	f001 fbf7 	bl	8002186 <HAL_NVIC_EnableIRQ>

}
 8000998:	bf00      	nop
 800099a:	3730      	adds	r7, #48	@ 0x30
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	58024400 	.word	0x58024400
 80009a4:	58020000 	.word	0x58020000
 80009a8:	58020400 	.word	0x58020400
 80009ac:	58021000 	.word	0x58021000
 80009b0:	58020c00 	.word	0x58020c00
 80009b4:	58021800 	.word	0x58021800
 80009b8:	58020800 	.word	0x58020800

080009bc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a34 <MX_I2C1_Init+0x78>)
 80009c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a38 <MX_I2C1_Init+0x7c>)
 80009ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009cc:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d2:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d8:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009de:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009f6:	480e      	ldr	r0, [pc, #56]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009f8:	f004 fd26 	bl	8005448 <HAL_I2C_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a02:	f000 fc09 	bl	8001218 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a06:	2100      	movs	r1, #0
 8000a08:	4809      	ldr	r0, [pc, #36]	@ (8000a30 <MX_I2C1_Init+0x74>)
 8000a0a:	f005 fb7f 	bl	800610c <HAL_I2CEx_ConfigAnalogFilter>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a14:	f000 fc00 	bl	8001218 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <MX_I2C1_Init+0x74>)
 8000a1c:	f005 fbc1 	bl	80061a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a26:	f000 fbf7 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	240001f4 	.word	0x240001f4
 8000a34:	40005400 	.word	0x40005400
 8000a38:	20b0ccff 	.word	0x20b0ccff

08000a3c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab4 <MX_I2C2_Init+0x78>)
 8000a44:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a48:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab8 <MX_I2C2_Init+0x7c>)
 8000a4a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a52:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a76:	480e      	ldr	r0, [pc, #56]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a78:	f004 fce6 	bl	8005448 <HAL_I2C_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a82:	f000 fbc9 	bl	8001218 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a86:	2100      	movs	r1, #0
 8000a88:	4809      	ldr	r0, [pc, #36]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a8a:	f005 fb3f 	bl	800610c <HAL_I2CEx_ConfigAnalogFilter>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a94:	f000 fbc0 	bl	8001218 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a9c:	f005 fb81 	bl	80061a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000aa6:	f000 fbb7 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	24000248 	.word	0x24000248
 8000ab4:	40005800 	.word	0x40005800
 8000ab8:	20b0ccff 	.word	0x20b0ccff

08000abc <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b34 <MX_I2C4_Init+0x78>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0CCFF;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b38 <MX_I2C4_Init+0x7c>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000acc:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000ade:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000af6:	480e      	ldr	r0, [pc, #56]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000af8:	f004 fca6 	bl	8005448 <HAL_I2C_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b02:	f000 fb89 	bl	8001218 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b06:	2100      	movs	r1, #0
 8000b08:	4809      	ldr	r0, [pc, #36]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000b0a:	f005 faff 	bl	800610c <HAL_I2CEx_ConfigAnalogFilter>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b14:	f000 fb80 	bl	8001218 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000b1c:	f005 fb41 	bl	80061a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b26:	f000 fb77 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2400029c 	.word	0x2400029c
 8000b34:	58001c00 	.word	0x58001c00
 8000b38:	20b0ccff 	.word	0x20b0ccff

08000b3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b0be      	sub	sp, #248	@ 0xf8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b54:	f107 0320 	add.w	r3, r7, #32
 8000b58:	22c0      	movs	r2, #192	@ 0xc0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f00c f8ef 	bl	800cd40 <memset>
  if(i2cHandle->Instance==I2C1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a73      	ldr	r2, [pc, #460]	@ (8000d34 <HAL_I2C_MspInit+0x1f8>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d146      	bne.n	8000bfa <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b6c:	f04f 0208 	mov.w	r2, #8
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7e:	f107 0320 	add.w	r3, r7, #32
 8000b82:	4618      	mov	r0, r3
 8000b84:	f006 fb72 	bl	800726c <HAL_RCCEx_PeriphCLKConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000b8e:	f000 fb43 	bl	8001218 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b69      	ldr	r3, [pc, #420]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000b94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b98:	4a67      	ldr	r2, [pc, #412]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ba2:	4b65      	ldr	r3, [pc, #404]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000ba4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	61fb      	str	r3, [r7, #28]
 8000bae:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAX30102_SCL_Pin|MAX30102_SDA_Pin;
 8000bb0:	23c0      	movs	r3, #192	@ 0xc0
 8000bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb6:	2312      	movs	r3, #18
 8000bb8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4859      	ldr	r0, [pc, #356]	@ (8000d3c <HAL_I2C_MspInit+0x200>)
 8000bd6:	f004 fa53 	bl	8005080 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bda:	4b57      	ldr	r3, [pc, #348]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000bdc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000be0:	4a55      	ldr	r2, [pc, #340]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000be2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000be6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000bea:	4b53      	ldr	r3, [pc, #332]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000bec:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000bf8:	e098      	b.n	8000d2c <HAL_I2C_MspInit+0x1f0>
  else if(i2cHandle->Instance==I2C2)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a50      	ldr	r2, [pc, #320]	@ (8000d40 <HAL_I2C_MspInit+0x204>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d147      	bne.n	8000c94 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c04:	f04f 0208 	mov.w	r2, #8
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c16:	f107 0320 	add.w	r3, r7, #32
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f006 fb26 	bl	800726c <HAL_RCCEx_PeriphCLKConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000c26:	f000 faf7 	bl	8001218 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	4b43      	ldr	r3, [pc, #268]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000c2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c30:	4a41      	ldr	r2, [pc, #260]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000c3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c48:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c50:	2312      	movs	r3, #18
 8000c52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c62:	2304      	movs	r3, #4
 8000c64:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4833      	ldr	r0, [pc, #204]	@ (8000d3c <HAL_I2C_MspInit+0x200>)
 8000c70:	f004 fa06 	bl	8005080 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c74:	4b30      	ldr	r3, [pc, #192]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000c76:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000c7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c80:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000c84:	4b2c      	ldr	r3, [pc, #176]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000c86:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
}
 8000c92:	e04b      	b.n	8000d2c <HAL_I2C_MspInit+0x1f0>
  else if(i2cHandle->Instance==I2C4)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a2a      	ldr	r2, [pc, #168]	@ (8000d44 <HAL_I2C_MspInit+0x208>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d146      	bne.n	8000d2c <HAL_I2C_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000c9e:	f04f 0210 	mov.w	r2, #16
 8000ca2:	f04f 0300 	mov.w	r3, #0
 8000ca6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb0:	f107 0320 	add.w	r3, r7, #32
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f006 fad9 	bl	800726c <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8000cc0:	f000 faaa 	bl	8001218 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000cc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cca:	4a1b      	ldr	r2, [pc, #108]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000cd4:	4b18      	ldr	r3, [pc, #96]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000cd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPU6500_SCL_Pin|MPU6500_SDA_Pin;
 8000ce2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cea:	2312      	movs	r3, #18
 8000cec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d02:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d06:	4619      	mov	r1, r3
 8000d08:	480f      	ldr	r0, [pc, #60]	@ (8000d48 <HAL_I2C_MspInit+0x20c>)
 8000d0a:	f004 f9b9 	bl	8005080 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000d10:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000d14:	4a08      	ldr	r2, [pc, #32]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d1a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000d20:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
}
 8000d2c:	bf00      	nop
 8000d2e:	37f8      	adds	r7, #248	@ 0xf8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40005400 	.word	0x40005400
 8000d38:	58024400 	.word	0x58024400
 8000d3c:	58020400 	.word	0x58020400
 8000d40:	40005800 	.word	0x40005800
 8000d44:	58001c00 	.word	0x58001c00
 8000d48:	58020c00 	.word	0x58020c00

08000d4c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&STLINK_UART, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000d54:	1d39      	adds	r1, r7, #4
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4803      	ldr	r0, [pc, #12]	@ (8000d6c <__io_putchar+0x20>)
 8000d5e:	f008 fcae 	bl	80096be <HAL_UART_Transmit>
	return chr;
 8000d62:	687b      	ldr	r3, [r7, #4]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	24000728 	.word	0x24000728

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
int main(void)
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000d7c:	f000 fa20 	bl	80011c0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d80:	f001 f856 	bl	8001e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d84:	f000 f8b4 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d88:	f7ff fce0 	bl	800074c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d8c:	f7ff fc9e 	bl	80006cc <MX_DMA_Init>
  MX_UART4_Init();
 8000d90:	f000 fd5a 	bl	8001848 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000d94:	f000 fdf0 	bl	8001978 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000d98:	f7ff fe50 	bl	8000a3c <MX_I2C2_Init>
  MX_UART5_Init();
 8000d9c:	f000 fda0 	bl	80018e0 <MX_UART5_Init>
  MX_SPI1_Init();
 8000da0:	f000 fa40 	bl	8001224 <MX_SPI1_Init>
  MX_I2C4_Init();
 8000da4:	f7ff fe8a 	bl	8000abc <MX_I2C4_Init>
  MX_I2C1_Init();
 8000da8:	f7ff fe08 	bl	80009bc <MX_I2C1_Init>
	        HAL_Delay(5);  // give time for UART to flush
	    }
	    return HAL_OK;
	}
//	HAL_StatusTypeDef test = MAX30102_TestConnection();
	Scan_I2C_Bus();
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	469c      	mov	ip, r3
 8000db0:	f000 f864 	bl	8000e7c <Scan_I2C_Bus.0>
	  // Initiation
	  max30102_init(&max30102, &MAX30102_I2C);
 8000db4:	492d      	ldr	r1, [pc, #180]	@ (8000e6c <main+0xfc>)
 8000db6:	482e      	ldr	r0, [pc, #184]	@ (8000e70 <main+0x100>)
 8000db8:	f00a fde9 	bl	800b98e <max30102_init>
	  max30102_reset(&max30102);
 8000dbc:	482c      	ldr	r0, [pc, #176]	@ (8000e70 <main+0x100>)
 8000dbe:	f00a fe5d 	bl	800ba7c <max30102_reset>
	  max30102_clear_fifo(&max30102);
 8000dc2:	482b      	ldr	r0, [pc, #172]	@ (8000e70 <main+0x100>)
 8000dc4:	f00b f824 	bl	800be10 <max30102_clear_fifo>
	  max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 8000dc8:	2307      	movs	r3, #7
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2103      	movs	r1, #3
 8000dce:	4828      	ldr	r0, [pc, #160]	@ (8000e70 <main+0x100>)
 8000dd0:	f00a ffe2 	bl	800bd98 <max30102_set_fifo_config>

	  // Sensor settings
	  max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	4826      	ldr	r0, [pc, #152]	@ (8000e70 <main+0x100>)
 8000dd8:	f00a ff4e 	bl	800bc78 <max30102_set_led_pulse_width>
	  max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4824      	ldr	r0, [pc, #144]	@ (8000e70 <main+0x100>)
 8000de0:	f00a ff6d 	bl	800bcbe <max30102_set_adc_resolution>
	  max30102_set_sampling_rate(&max30102, max30102_sr_800);
 8000de4:	2104      	movs	r1, #4
 8000de6:	4822      	ldr	r0, [pc, #136]	@ (8000e70 <main+0x100>)
 8000de8:	f00a ff21 	bl	800bc2e <max30102_set_sampling_rate>
	  max30102_set_led_current_1(&max30102, 6.2);
 8000dec:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8000e74 <main+0x104>
 8000df0:	481f      	ldr	r0, [pc, #124]	@ (8000e70 <main+0x100>)
 8000df2:	f00a ff89 	bl	800bd08 <max30102_set_led_current_1>
	  max30102_set_led_current_2(&max30102, 6.2);
 8000df6:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8000e74 <main+0x104>
 8000dfa:	481d      	ldr	r0, [pc, #116]	@ (8000e70 <main+0x100>)
 8000dfc:	f00a ffa8 	bl	800bd50 <max30102_set_led_current_2>

	  // Enter SpO2 mode
	  max30102_set_mode(&max30102, max30102_spo2);
 8000e00:	2103      	movs	r1, #3
 8000e02:	481b      	ldr	r0, [pc, #108]	@ (8000e70 <main+0x100>)
 8000e04:	f00a feed 	bl	800bbe2 <max30102_set_mode>
	  max30102_set_a_full(&max30102, 1);
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4819      	ldr	r0, [pc, #100]	@ (8000e70 <main+0x100>)
 8000e0c:	f00a fe47 	bl	800ba9e <max30102_set_a_full>

	  // Initiate 1 temperature measurement
	  max30102_set_die_temp_en(&max30102, 1);
 8000e10:	2101      	movs	r1, #1
 8000e12:	4817      	ldr	r0, [pc, #92]	@ (8000e70 <main+0x100>)
 8000e14:	f00a fe84 	bl	800bb20 <max30102_set_die_temp_en>
	  max30102_set_die_temp_rdy(&max30102, 1);
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4815      	ldr	r0, [pc, #84]	@ (8000e70 <main+0x100>)
 8000e1c:	f00a fe68 	bl	800baf0 <max30102_set_die_temp_rdy>

	  uint8_t en_reg[2] = {0};
 8000e20:	2300      	movs	r3, #0
 8000e22:	803b      	strh	r3, [r7, #0]
	  max30102_read(&max30102, 0x00, en_reg, 1);
 8000e24:	463a      	mov	r2, r7
 8000e26:	2301      	movs	r3, #1
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4811      	ldr	r0, [pc, #68]	@ (8000e70 <main+0x100>)
 8000e2c:	f00a fe01 	bl	800ba32 <max30102_read>

	//Enter measurement mode:
	// Enter SpO2 mode
	max30102_set_mode(&max30102, max30102_spo2);
 8000e30:	2103      	movs	r1, #3
 8000e32:	480f      	ldr	r0, [pc, #60]	@ (8000e70 <main+0x100>)
 8000e34:	f00a fed5 	bl	800bbe2 <max30102_set_mode>

	//Enable the required interrupts:
	// Enable FIFO_A_FULL interrupt
	max30102_set_a_full(&max30102, 1);
 8000e38:	2101      	movs	r1, #1
 8000e3a:	480d      	ldr	r0, [pc, #52]	@ (8000e70 <main+0x100>)
 8000e3c:	f00a fe2f 	bl	800ba9e <max30102_set_a_full>
	// Enable die temperature measurement
	max30102_set_die_temp_en(&max30102, 1);
 8000e40:	2101      	movs	r1, #1
 8000e42:	480b      	ldr	r0, [pc, #44]	@ (8000e70 <main+0x100>)
 8000e44:	f00a fe6c 	bl	800bb20 <max30102_set_die_temp_en>
	// Enable DIE_TEMP_RDY interrupt
	max30102_set_die_temp_rdy(&max30102, 1);
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4809      	ldr	r0, [pc, #36]	@ (8000e70 <main+0x100>)
 8000e4c:	f00a fe50 	bl	800baf0 <max30102_set_die_temp_rdy>
	printf("test\r\n");
 8000e50:	4809      	ldr	r0, [pc, #36]	@ (8000e78 <main+0x108>)
 8000e52:	f00b fe95 	bl	800cb80 <puts>
		//Display_EnvironnementData(30,70,&SmartWatchData_handle);
#endif

#ifdef MAX30102_I2C
	    // If interrupt flag is active
	    if (max30102_has_interrupt(&max30102))
 8000e56:	4806      	ldr	r0, [pc, #24]	@ (8000e70 <main+0x100>)
 8000e58:	f00a fe88 	bl	800bb6c <max30102_has_interrupt>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0f9      	beq.n	8000e56 <main+0xe6>
	      // Run interrupt handler to read FIFO
	      max30102_interrupt_handler(&max30102);
 8000e62:	4803      	ldr	r0, [pc, #12]	@ (8000e70 <main+0x100>)
 8000e64:	f00a fe8f 	bl	800bb86 <max30102_interrupt_handler>
	    if (max30102_has_interrupt(&max30102))
 8000e68:	e7f5      	b.n	8000e56 <main+0xe6>
 8000e6a:	bf00      	nop
 8000e6c:	240001f4 	.word	0x240001f4
 8000e70:	240003f4 	.word	0x240003f4
 8000e74:	40c66666 	.word	0x40c66666
 8000e78:	0800e830 	.word	0x0800e830

08000e7c <Scan_I2C_Bus.0>:
	{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	f8c7 c004 	str.w	ip, [r7, #4]
	    for (uint16_t addr = 1; addr < 128; addr++)
 8000e86:	2301      	movs	r3, #1
 8000e88:	81fb      	strh	r3, [r7, #14]
 8000e8a:	e022      	b.n	8000ed2 <Scan_I2C_Bus.0+0x56>
	        status = HAL_I2C_IsDeviceReady(&MAX30102_I2C,
 8000e8c:	89fb      	ldrh	r3, [r7, #14]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	b299      	uxth	r1, r3
 8000e92:	2364      	movs	r3, #100	@ 0x64
 8000e94:	2203      	movs	r2, #3
 8000e96:	4813      	ldr	r0, [pc, #76]	@ (8000ee4 <Scan_I2C_Bus.0+0x68>)
 8000e98:	f004 fd80 	bl	800599c <HAL_I2C_IsDeviceReady>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	737b      	strb	r3, [r7, #13]
	        if (status == HAL_OK)
 8000ea0:	7b7b      	ldrb	r3, [r7, #13]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d105      	bne.n	8000eb2 <Scan_I2C_Bus.0+0x36>
	            printf("I2C: device ACK at 0x%02X\r\n", addr);
 8000ea6:	89fb      	ldrh	r3, [r7, #14]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480f      	ldr	r0, [pc, #60]	@ (8000ee8 <Scan_I2C_Bus.0+0x6c>)
 8000eac:	f00b fe00 	bl	800cab0 <iprintf>
 8000eb0:	e009      	b.n	8000ec6 <Scan_I2C_Bus.0+0x4a>
	            err = HAL_I2C_GetError(&MAX30102_I2C);
 8000eb2:	480c      	ldr	r0, [pc, #48]	@ (8000ee4 <Scan_I2C_Bus.0+0x68>)
 8000eb4:	f004 fe78 	bl	8005ba8 <HAL_I2C_GetError>
 8000eb8:	60b8      	str	r0, [r7, #8]
	            printf("I2C: 0x%02X no ACK (err=0x%lX)\r\n", addr, err);
 8000eba:	89fb      	ldrh	r3, [r7, #14]
 8000ebc:	68ba      	ldr	r2, [r7, #8]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480a      	ldr	r0, [pc, #40]	@ (8000eec <Scan_I2C_Bus.0+0x70>)
 8000ec2:	f00b fdf5 	bl	800cab0 <iprintf>
	        HAL_Delay(5);  // give time for UART to flush
 8000ec6:	2005      	movs	r0, #5
 8000ec8:	f001 f844 	bl	8001f54 <HAL_Delay>
	    for (uint16_t addr = 1; addr < 128; addr++)
 8000ecc:	89fb      	ldrh	r3, [r7, #14]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	81fb      	strh	r3, [r7, #14]
 8000ed2:	89fb      	ldrh	r3, [r7, #14]
 8000ed4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ed6:	d9d9      	bls.n	8000e8c <Scan_I2C_Bus.0+0x10>
	    return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
	}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	240001f4 	.word	0x240001f4
 8000ee8:	0800e838 	.word	0x0800e838
 8000eec:	0800e854 	.word	0x0800e854

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09c      	sub	sp, #112	@ 0x70
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efa:	224c      	movs	r2, #76	@ 0x4c
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00b ff1e 	bl	800cd40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2220      	movs	r2, #32
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f00b ff18 	bl	800cd40 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000f10:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd0 <SystemClock_Config+0xe0>)
 8000f12:	f04f 32ff 	mov.w	r2, #4294967295
 8000f16:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f1a:	2004      	movs	r0, #4
 8000f1c:	f005 f98e 	bl	800623c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f20:	2300      	movs	r3, #0
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd4 <SystemClock_Config+0xe4>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd4 <SystemClock_Config+0xe4>)
 8000f2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b28      	ldr	r3, [pc, #160]	@ (8000fd4 <SystemClock_Config+0xe4>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f3c:	bf00      	nop
 8000f3e:	4b25      	ldr	r3, [pc, #148]	@ (8000fd4 <SystemClock_Config+0xe4>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f4a:	d1f8      	bne.n	8000f3e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f56:	2302      	movs	r3, #2
 8000f58:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000f62:	2346      	movs	r3, #70	@ 0x46
 8000f64:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f66:	2302      	movs	r3, #2
 8000f68:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f72:	230c      	movs	r3, #12
 8000f74:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f82:	4618      	mov	r0, r3
 8000f84:	f005 f9b4 	bl	80062f0 <HAL_RCC_OscConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000f8e:	f000 f943 	bl	8001218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f92:	233f      	movs	r3, #63	@ 0x3f
 8000f94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f96:	2303      	movs	r3, #3
 8000f98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fa2:	2340      	movs	r3, #64	@ 0x40
 8000fa4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fa6:	2340      	movs	r3, #64	@ 0x40
 8000fa8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000faa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fb0:	2340      	movs	r3, #64	@ 0x40
 8000fb2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2106      	movs	r1, #6
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f005 fdcb 	bl	8006b54 <HAL_RCC_ClockConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000fc4:	f000 f928 	bl	8001218 <Error_Handler>
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3770      	adds	r7, #112	@ 0x70
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	58024400 	.word	0x58024400
 8000fd4:	58024800 	.word	0x58024800

08000fd8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
// This callback is called when idle line is detected or buffer is full
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == UART4)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a56      	ldr	r2, [pc, #344]	@ (8001144 <HAL_UARTEx_RxEventCallback+0x16c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	f040 80a5 	bne.w	800113a <HAL_UARTEx_RxEventCallback+0x162>
    {
        // Copy the data from DMA buffer to message buffer
        memcpy(messageBuffer, rxBuffer, Size);
 8000ff0:	887b      	ldrh	r3, [r7, #2]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4954      	ldr	r1, [pc, #336]	@ (8001148 <HAL_UARTEx_RxEventCallback+0x170>)
 8000ff6:	4855      	ldr	r0, [pc, #340]	@ (800114c <HAL_UARTEx_RxEventCallback+0x174>)
 8000ff8:	f00b ff31 	bl	800ce5e <memcpy>

        // Null-terminate the string
        messageBuffer[Size] = '\0';
 8000ffc:	887b      	ldrh	r3, [r7, #2]
 8000ffe:	4a53      	ldr	r2, [pc, #332]	@ (800114c <HAL_UARTEx_RxEventCallback+0x174>)
 8001000:	2100      	movs	r1, #0
 8001002:	54d1      	strb	r1, [r2, r3]

        // Set flag for main loop
        messageReady = 1;
 8001004:	4b52      	ldr	r3, [pc, #328]	@ (8001150 <HAL_UARTEx_RxEventCallback+0x178>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]

        HAL_UART_AbortReceive(huart);  // Stop DMA
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f008 fbe6 	bl	80097dc <HAL_UART_AbortReceive>
        memset(rxBuffer, 0, sizeof(rxBuffer));  // Reset buffer
 8001010:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001014:	2100      	movs	r1, #0
 8001016:	484c      	ldr	r0, [pc, #304]	@ (8001148 <HAL_UARTEx_RxEventCallback+0x170>)
 8001018:	f00b fe92 	bl	800cd40 <memset>

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 800101c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001020:	4949      	ldr	r1, [pc, #292]	@ (8001148 <HAL_UARTEx_RxEventCallback+0x170>)
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f00a fc05 	bl	800b832 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a48      	ldr	r2, [pc, #288]	@ (8001154 <HAL_UARTEx_RxEventCallback+0x17c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d068      	beq.n	8001108 <HAL_UARTEx_RxEventCallback+0x130>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a46      	ldr	r2, [pc, #280]	@ (8001158 <HAL_UARTEx_RxEventCallback+0x180>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d061      	beq.n	8001108 <HAL_UARTEx_RxEventCallback+0x130>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a43      	ldr	r2, [pc, #268]	@ (800115c <HAL_UARTEx_RxEventCallback+0x184>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d05a      	beq.n	8001108 <HAL_UARTEx_RxEventCallback+0x130>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a41      	ldr	r2, [pc, #260]	@ (8001160 <HAL_UARTEx_RxEventCallback+0x188>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d053      	beq.n	8001108 <HAL_UARTEx_RxEventCallback+0x130>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a3e      	ldr	r2, [pc, #248]	@ (8001164 <HAL_UARTEx_RxEventCallback+0x18c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d04c      	beq.n	8001108 <HAL_UARTEx_RxEventCallback+0x130>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a3c      	ldr	r2, [pc, #240]	@ (8001168 <HAL_UARTEx_RxEventCallback+0x190>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d045      	beq.n	8001108 <HAL_UARTEx_RxEventCallback+0x130>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a39      	ldr	r2, [pc, #228]	@ (800116c <HAL_UARTEx_RxEventCallback+0x194>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d03e      	beq.n	8001108 <HAL_UARTEx_RxEventCallback+0x130>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a37      	ldr	r2, [pc, #220]	@ (8001170 <HAL_UARTEx_RxEventCallback+0x198>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d037      	beq.n	8001108 <HAL_UARTEx_RxEventCallback+0x130>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a34      	ldr	r2, [pc, #208]	@ (8001174 <HAL_UARTEx_RxEventCallback+0x19c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d030      	beq.n	8001108 <HAL_UARTEx_RxEventCallback+0x130>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a32      	ldr	r2, [pc, #200]	@ (8001178 <HAL_UARTEx_RxEventCallback+0x1a0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d029      	beq.n	8001108 <HAL_UARTEx_RxEventCallback+0x130>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a2f      	ldr	r2, [pc, #188]	@ (800117c <HAL_UARTEx_RxEventCallback+0x1a4>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d022      	beq.n	8001108 <HAL_UARTEx_RxEventCallback+0x130>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001180 <HAL_UARTEx_RxEventCallback+0x1a8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d01b      	beq.n	8001108 <HAL_UARTEx_RxEventCallback+0x130>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001184 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d014      	beq.n	8001108 <HAL_UARTEx_RxEventCallback+0x130>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a28      	ldr	r2, [pc, #160]	@ (8001188 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d00d      	beq.n	8001108 <HAL_UARTEx_RxEventCallback+0x130>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a25      	ldr	r2, [pc, #148]	@ (800118c <HAL_UARTEx_RxEventCallback+0x1b4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d006      	beq.n	8001108 <HAL_UARTEx_RxEventCallback+0x130>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a23      	ldr	r2, [pc, #140]	@ (8001190 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d10c      	bne.n	8001122 <HAL_UARTEx_RxEventCallback+0x14a>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0208 	bic.w	r2, r2, #8
 800111e:	601a      	str	r2, [r3, #0]
    }
}
 8001120:	e00b      	b.n	800113a <HAL_UARTEx_RxEventCallback+0x162>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0204 	bic.w	r2, r2, #4
 8001138:	601a      	str	r2, [r3, #0]
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40004c00 	.word	0x40004c00
 8001148:	240009a0 	.word	0x240009a0
 800114c:	240002f0 	.word	0x240002f0
 8001150:	240003f0 	.word	0x240003f0
 8001154:	40020010 	.word	0x40020010
 8001158:	40020028 	.word	0x40020028
 800115c:	40020040 	.word	0x40020040
 8001160:	40020058 	.word	0x40020058
 8001164:	40020070 	.word	0x40020070
 8001168:	40020088 	.word	0x40020088
 800116c:	400200a0 	.word	0x400200a0
 8001170:	400200b8 	.word	0x400200b8
 8001174:	40020410 	.word	0x40020410
 8001178:	40020428 	.word	0x40020428
 800117c:	40020440 	.word	0x40020440
 8001180:	40020458 	.word	0x40020458
 8001184:	40020470 	.word	0x40020470
 8001188:	40020488 	.word	0x40020488
 800118c:	400204a0 	.word	0x400204a0
 8001190:	400204b8 	.word	0x400204b8

08001194 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == InputButton_Pin)
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011a4:	d006      	beq.n	80011b4 <HAL_GPIO_EXTI_Callback+0x20>
    {

    }
    else if (GPIO_Pin == MAX30102_INT_Pin)
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011ac:	d102      	bne.n	80011b4 <HAL_GPIO_EXTI_Callback+0x20>
    {
    	max30102_on_interrupt(&max30102);
 80011ae:	4803      	ldr	r0, [pc, #12]	@ (80011bc <HAL_GPIO_EXTI_Callback+0x28>)
 80011b0:	f00a fcce 	bl	800bb50 <max30102_on_interrupt>
    }
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	240003f4 	.word	0x240003f4

080011c0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80011c6:	463b      	mov	r3, r7
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80011d2:	f000 fff3 	bl	80021bc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80011d6:	2301      	movs	r3, #1
 80011d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80011da:	2300      	movs	r3, #0
 80011dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80011e2:	231f      	movs	r3, #31
 80011e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80011e6:	2387      	movs	r3, #135	@ 0x87
 80011e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80011ee:	2300      	movs	r3, #0
 80011f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80011f2:	2301      	movs	r3, #1
 80011f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80011f6:	2301      	movs	r3, #1
 80011f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001202:	463b      	mov	r3, r7
 8001204:	4618      	mov	r0, r3
 8001206:	f001 f811 	bl	800222c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800120a:	2004      	movs	r0, #4
 800120c:	f000 ffee 	bl	80021ec <HAL_MPU_Enable>

}
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121c:	b672      	cpsid	i
}
 800121e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <Error_Handler+0x8>

08001224 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001228:	4b29      	ldr	r3, [pc, #164]	@ (80012d0 <MX_SPI1_Init+0xac>)
 800122a:	4a2a      	ldr	r2, [pc, #168]	@ (80012d4 <MX_SPI1_Init+0xb0>)
 800122c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800122e:	4b28      	ldr	r3, [pc, #160]	@ (80012d0 <MX_SPI1_Init+0xac>)
 8001230:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001234:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001236:	4b26      	ldr	r3, [pc, #152]	@ (80012d0 <MX_SPI1_Init+0xac>)
 8001238:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800123c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800123e:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <MX_SPI1_Init+0xac>)
 8001240:	2207      	movs	r2, #7
 8001242:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001244:	4b22      	ldr	r3, [pc, #136]	@ (80012d0 <MX_SPI1_Init+0xac>)
 8001246:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800124a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800124c:	4b20      	ldr	r3, [pc, #128]	@ (80012d0 <MX_SPI1_Init+0xac>)
 800124e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001252:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001254:	4b1e      	ldr	r3, [pc, #120]	@ (80012d0 <MX_SPI1_Init+0xac>)
 8001256:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800125a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800125c:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <MX_SPI1_Init+0xac>)
 800125e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001262:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001264:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_SPI1_Init+0xac>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800126a:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <MX_SPI1_Init+0xac>)
 800126c:	2200      	movs	r2, #0
 800126e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001270:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <MX_SPI1_Init+0xac>)
 8001272:	2200      	movs	r2, #0
 8001274:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001276:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <MX_SPI1_Init+0xac>)
 8001278:	2200      	movs	r2, #0
 800127a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800127c:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <MX_SPI1_Init+0xac>)
 800127e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001282:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001284:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <MX_SPI1_Init+0xac>)
 8001286:	2200      	movs	r2, #0
 8001288:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800128a:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <MX_SPI1_Init+0xac>)
 800128c:	2200      	movs	r2, #0
 800128e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001290:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <MX_SPI1_Init+0xac>)
 8001292:	2200      	movs	r2, #0
 8001294:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <MX_SPI1_Init+0xac>)
 8001298:	2200      	movs	r2, #0
 800129a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <MX_SPI1_Init+0xac>)
 800129e:	2200      	movs	r2, #0
 80012a0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <MX_SPI1_Init+0xac>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012a8:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MX_SPI1_Init+0xac>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <MX_SPI1_Init+0xac>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <MX_SPI1_Init+0xac>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_SPI1_Init+0xac>)
 80012bc:	f007 fdb6 	bl	8008e2c <HAL_SPI_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 80012c6:	f7ff ffa7 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	240004fc 	.word	0x240004fc
 80012d4:	40013000 	.word	0x40013000

080012d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b0ba      	sub	sp, #232	@ 0xe8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	22c0      	movs	r2, #192	@ 0xc0
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f00b fd21 	bl	800cd40 <memset>
  if(spiHandle->Instance==SPI1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a40      	ldr	r2, [pc, #256]	@ (8001404 <HAL_SPI_MspInit+0x12c>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d179      	bne.n	80013fc <HAL_SPI_MspInit+0x124>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001308:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800130c:	f04f 0300 	mov.w	r3, #0
 8001310:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001314:	2300      	movs	r3, #0
 8001316:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4618      	mov	r0, r3
 800131e:	f005 ffa5 	bl	800726c <HAL_RCCEx_PeriphCLKConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001328:	f7ff ff76 	bl	8001218 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800132c:	4b36      	ldr	r3, [pc, #216]	@ (8001408 <HAL_SPI_MspInit+0x130>)
 800132e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001332:	4a35      	ldr	r2, [pc, #212]	@ (8001408 <HAL_SPI_MspInit+0x130>)
 8001334:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001338:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800133c:	4b32      	ldr	r3, [pc, #200]	@ (8001408 <HAL_SPI_MspInit+0x130>)
 800133e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001342:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4b2f      	ldr	r3, [pc, #188]	@ (8001408 <HAL_SPI_MspInit+0x130>)
 800134c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001350:	4a2d      	ldr	r2, [pc, #180]	@ (8001408 <HAL_SPI_MspInit+0x130>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800135a:	4b2b      	ldr	r3, [pc, #172]	@ (8001408 <HAL_SPI_MspInit+0x130>)
 800135c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001368:	23a0      	movs	r3, #160	@ 0xa0
 800136a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001380:	2305      	movs	r3, #5
 8001382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800138a:	4619      	mov	r1, r3
 800138c:	481f      	ldr	r0, [pc, #124]	@ (800140c <HAL_SPI_MspInit+0x134>)
 800138e:	f003 fe77 	bl	8005080 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8001392:	4b1f      	ldr	r3, [pc, #124]	@ (8001410 <HAL_SPI_MspInit+0x138>)
 8001394:	4a1f      	ldr	r2, [pc, #124]	@ (8001414 <HAL_SPI_MspInit+0x13c>)
 8001396:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001398:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <HAL_SPI_MspInit+0x138>)
 800139a:	2226      	movs	r2, #38	@ 0x26
 800139c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800139e:	4b1c      	ldr	r3, [pc, #112]	@ (8001410 <HAL_SPI_MspInit+0x138>)
 80013a0:	2240      	movs	r2, #64	@ 0x40
 80013a2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <HAL_SPI_MspInit+0x138>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013aa:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <HAL_SPI_MspInit+0x138>)
 80013ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b2:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <HAL_SPI_MspInit+0x138>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013b8:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <HAL_SPI_MspInit+0x138>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013be:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <HAL_SPI_MspInit+0x138>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013c4:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <HAL_SPI_MspInit+0x138>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ca:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <HAL_SPI_MspInit+0x138>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013d0:	480f      	ldr	r0, [pc, #60]	@ (8001410 <HAL_SPI_MspInit+0x138>)
 80013d2:	f000 ff6b 	bl	80022ac <HAL_DMA_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 80013dc:	f7ff ff1c 	bl	8001218 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001410 <HAL_SPI_MspInit+0x138>)
 80013e4:	679a      	str	r2, [r3, #120]	@ 0x78
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <HAL_SPI_MspInit+0x138>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	2023      	movs	r0, #35	@ 0x23
 80013f2:	f000 feae 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80013f6:	2023      	movs	r0, #35	@ 0x23
 80013f8:	f000 fec5 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013fc:	bf00      	nop
 80013fe:	37e8      	adds	r7, #232	@ 0xe8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40013000 	.word	0x40013000
 8001408:	58024400 	.word	0x58024400
 800140c:	58020000 	.word	0x58020000
 8001410:	24000584 	.word	0x24000584
 8001414:	40020088 	.word	0x40020088

08001418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <HAL_MspInit+0x30>)
 8001420:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001424:	4a08      	ldr	r2, [pc, #32]	@ (8001448 <HAL_MspInit+0x30>)
 8001426:	f043 0302 	orr.w	r3, r3, #2
 800142a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_MspInit+0x30>)
 8001430:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	58024400 	.word	0x58024400

0800144c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <NMI_Handler+0x4>

08001454 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <MemManage_Handler+0x4>

08001464 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <BusFault_Handler+0x4>

0800146c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <UsageFault_Handler+0x4>

08001474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a2:	f000 fd37 	bl	8001f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80014b0:	4802      	ldr	r0, [pc, #8]	@ (80014bc <DMA1_Stream0_IRQHandler+0x10>)
 80014b2:	f002 fa57 	bl	8003964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	240008ac 	.word	0x240008ac

080014c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80014c4:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <DMA1_Stream1_IRQHandler+0x10>)
 80014c6:	f002 fa4d 	bl	8003964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	24000924 	.word	0x24000924

080014d4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80014d8:	4802      	ldr	r0, [pc, #8]	@ (80014e4 <DMA1_Stream2_IRQHandler+0x10>)
 80014da:	f002 fa43 	bl	8003964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	240007bc 	.word	0x240007bc

080014e8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80014ec:	4802      	ldr	r0, [pc, #8]	@ (80014f8 <DMA1_Stream3_IRQHandler+0x10>)
 80014ee:	f002 fa39 	bl	8003964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	24000834 	.word	0x24000834

080014fc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001500:	4802      	ldr	r0, [pc, #8]	@ (800150c <DMA1_Stream5_IRQHandler+0x10>)
 8001502:	f002 fa2f 	bl	8003964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	24000584 	.word	0x24000584

08001510 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAX30102_INT_Pin);
 8001514:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001518:	f003 ff7b 	bl	8005412 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001524:	4802      	ldr	r0, [pc, #8]	@ (8001530 <SPI1_IRQHandler+0x10>)
 8001526:	f007 fda5 	bl	8009074 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	240004fc 	.word	0x240004fc

08001534 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(InputButton_Pin);
 8001538:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800153c:	f003 ff69 	bl	8005412 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <UART4_IRQHandler+0x10>)
 800154a:	f008 f9fd 	bl	8009948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	24000600 	.word	0x24000600

08001558 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800155c:	4802      	ldr	r0, [pc, #8]	@ (8001568 <UART5_IRQHandler+0x10>)
 800155e:	f008 f9f3 	bl	8009948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	24000694 	.word	0x24000694

0800156c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return 1;
 8001570:	2301      	movs	r3, #1
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <_kill>:

int _kill(int pid, int sig)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001586:	f00b fc3d 	bl	800ce04 <__errno>
 800158a:	4603      	mov	r3, r0
 800158c:	2216      	movs	r2, #22
 800158e:	601a      	str	r2, [r3, #0]
  return -1;
 8001590:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_exit>:

void _exit (int status)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ffe7 	bl	800157c <_kill>
  while (1) {}    /* Make sure we hang here */
 80015ae:	bf00      	nop
 80015b0:	e7fd      	b.n	80015ae <_exit+0x12>

080015b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	e00a      	b.n	80015da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015c4:	f3af 8000 	nop.w
 80015c8:	4601      	mov	r1, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	60ba      	str	r2, [r7, #8]
 80015d0:	b2ca      	uxtb	r2, r1
 80015d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3301      	adds	r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	429a      	cmp	r2, r3
 80015e0:	dbf0      	blt.n	80015c4 <_read+0x12>
  }

  return len;
 80015e2:	687b      	ldr	r3, [r7, #4]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	e009      	b.n	8001612 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	60ba      	str	r2, [r7, #8]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fba0 	bl	8000d4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3301      	adds	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	429a      	cmp	r2, r3
 8001618:	dbf1      	blt.n	80015fe <_write+0x12>
  }
  return len;
 800161a:	687b      	ldr	r3, [r7, #4]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <_close>:

int _close(int file)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800164c:	605a      	str	r2, [r3, #4]
  return 0;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <_isatty>:

int _isatty(int file)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001664:	2301      	movs	r3, #1
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001672:	b480      	push	{r7}
 8001674:	b085      	sub	sp, #20
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001694:	4a14      	ldr	r2, [pc, #80]	@ (80016e8 <_sbrk+0x5c>)
 8001696:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <_sbrk+0x60>)
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a0:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a8:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <_sbrk+0x64>)
 80016aa:	4a12      	ldr	r2, [pc, #72]	@ (80016f4 <_sbrk+0x68>)
 80016ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ae:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d207      	bcs.n	80016cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016bc:	f00b fba2 	bl	800ce04 <__errno>
 80016c0:	4603      	mov	r3, r0
 80016c2:	220c      	movs	r2, #12
 80016c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	e009      	b.n	80016e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016cc:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016d2:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <_sbrk+0x64>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	4a05      	ldr	r2, [pc, #20]	@ (80016f0 <_sbrk+0x64>)
 80016dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016de:	68fb      	ldr	r3, [r7, #12]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	24100000 	.word	0x24100000
 80016ec:	00000400 	.word	0x00000400
 80016f0:	240005fc 	.word	0x240005fc
 80016f4:	24000bf0 	.word	0x24000bf0

080016f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016fc:	4b3e      	ldr	r3, [pc, #248]	@ (80017f8 <SystemInit+0x100>)
 80016fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001702:	4a3d      	ldr	r2, [pc, #244]	@ (80017f8 <SystemInit+0x100>)
 8001704:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001708:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800170c:	4b3b      	ldr	r3, [pc, #236]	@ (80017fc <SystemInit+0x104>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	2b02      	cmp	r3, #2
 8001716:	d807      	bhi.n	8001728 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001718:	4b38      	ldr	r3, [pc, #224]	@ (80017fc <SystemInit+0x104>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 030f 	bic.w	r3, r3, #15
 8001720:	4a36      	ldr	r2, [pc, #216]	@ (80017fc <SystemInit+0x104>)
 8001722:	f043 0303 	orr.w	r3, r3, #3
 8001726:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001728:	4b35      	ldr	r3, [pc, #212]	@ (8001800 <SystemInit+0x108>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a34      	ldr	r2, [pc, #208]	@ (8001800 <SystemInit+0x108>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001734:	4b32      	ldr	r3, [pc, #200]	@ (8001800 <SystemInit+0x108>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800173a:	4b31      	ldr	r3, [pc, #196]	@ (8001800 <SystemInit+0x108>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4930      	ldr	r1, [pc, #192]	@ (8001800 <SystemInit+0x108>)
 8001740:	4b30      	ldr	r3, [pc, #192]	@ (8001804 <SystemInit+0x10c>)
 8001742:	4013      	ands	r3, r2
 8001744:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001746:	4b2d      	ldr	r3, [pc, #180]	@ (80017fc <SystemInit+0x104>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b00      	cmp	r3, #0
 8001750:	d007      	beq.n	8001762 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001752:	4b2a      	ldr	r3, [pc, #168]	@ (80017fc <SystemInit+0x104>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 030f 	bic.w	r3, r3, #15
 800175a:	4a28      	ldr	r2, [pc, #160]	@ (80017fc <SystemInit+0x104>)
 800175c:	f043 0303 	orr.w	r3, r3, #3
 8001760:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001762:	4b27      	ldr	r3, [pc, #156]	@ (8001800 <SystemInit+0x108>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001768:	4b25      	ldr	r3, [pc, #148]	@ (8001800 <SystemInit+0x108>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800176e:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <SystemInit+0x108>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001774:	4b22      	ldr	r3, [pc, #136]	@ (8001800 <SystemInit+0x108>)
 8001776:	4a24      	ldr	r2, [pc, #144]	@ (8001808 <SystemInit+0x110>)
 8001778:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800177a:	4b21      	ldr	r3, [pc, #132]	@ (8001800 <SystemInit+0x108>)
 800177c:	4a23      	ldr	r2, [pc, #140]	@ (800180c <SystemInit+0x114>)
 800177e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001780:	4b1f      	ldr	r3, [pc, #124]	@ (8001800 <SystemInit+0x108>)
 8001782:	4a23      	ldr	r2, [pc, #140]	@ (8001810 <SystemInit+0x118>)
 8001784:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001786:	4b1e      	ldr	r3, [pc, #120]	@ (8001800 <SystemInit+0x108>)
 8001788:	2200      	movs	r2, #0
 800178a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800178c:	4b1c      	ldr	r3, [pc, #112]	@ (8001800 <SystemInit+0x108>)
 800178e:	4a20      	ldr	r2, [pc, #128]	@ (8001810 <SystemInit+0x118>)
 8001790:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001792:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <SystemInit+0x108>)
 8001794:	2200      	movs	r2, #0
 8001796:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001798:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <SystemInit+0x108>)
 800179a:	4a1d      	ldr	r2, [pc, #116]	@ (8001810 <SystemInit+0x118>)
 800179c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800179e:	4b18      	ldr	r3, [pc, #96]	@ (8001800 <SystemInit+0x108>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017a4:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <SystemInit+0x108>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a15      	ldr	r2, [pc, #84]	@ (8001800 <SystemInit+0x108>)
 80017aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017b0:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <SystemInit+0x108>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80017b6:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <SystemInit+0x108>)
 80017b8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80017bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d113      	bne.n	80017ec <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80017c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <SystemInit+0x108>)
 80017c6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80017ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001800 <SystemInit+0x108>)
 80017cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017d0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <SystemInit+0x11c>)
 80017d6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80017da:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80017dc:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <SystemInit+0x108>)
 80017de:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80017e2:	4a07      	ldr	r2, [pc, #28]	@ (8001800 <SystemInit+0x108>)
 80017e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017e8:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00
 80017fc:	52002000 	.word	0x52002000
 8001800:	58024400 	.word	0x58024400
 8001804:	eaf6ed7f 	.word	0xeaf6ed7f
 8001808:	02020200 	.word	0x02020200
 800180c:	01ff0000 	.word	0x01ff0000
 8001810:	01010280 	.word	0x01010280
 8001814:	52004000 	.word	0x52004000

08001818 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800181c:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <ExitRun0Mode+0x2c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4a08      	ldr	r2, [pc, #32]	@ (8001844 <ExitRun0Mode+0x2c>)
 8001822:	f023 0302 	bic.w	r3, r3, #2
 8001826:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001828:	bf00      	nop
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <ExitRun0Mode+0x2c>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f9      	beq.n	800182a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001836:	bf00      	nop
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	58024800 	.word	0x58024800

08001848 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800184c:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <MX_UART4_Init+0x90>)
 800184e:	4a23      	ldr	r2, [pc, #140]	@ (80018dc <MX_UART4_Init+0x94>)
 8001850:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001852:	4b21      	ldr	r3, [pc, #132]	@ (80018d8 <MX_UART4_Init+0x90>)
 8001854:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001858:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800185a:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <MX_UART4_Init+0x90>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001860:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <MX_UART4_Init+0x90>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001866:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <MX_UART4_Init+0x90>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800186c:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <MX_UART4_Init+0x90>)
 800186e:	220c      	movs	r2, #12
 8001870:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001872:	4b19      	ldr	r3, [pc, #100]	@ (80018d8 <MX_UART4_Init+0x90>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001878:	4b17      	ldr	r3, [pc, #92]	@ (80018d8 <MX_UART4_Init+0x90>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800187e:	4b16      	ldr	r3, [pc, #88]	@ (80018d8 <MX_UART4_Init+0x90>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001884:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <MX_UART4_Init+0x90>)
 8001886:	2200      	movs	r2, #0
 8001888:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800188a:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <MX_UART4_Init+0x90>)
 800188c:	2200      	movs	r2, #0
 800188e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001890:	4811      	ldr	r0, [pc, #68]	@ (80018d8 <MX_UART4_Init+0x90>)
 8001892:	f007 fec4 	bl	800961e <HAL_UART_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800189c:	f7ff fcbc 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a0:	2100      	movs	r1, #0
 80018a2:	480d      	ldr	r0, [pc, #52]	@ (80018d8 <MX_UART4_Init+0x90>)
 80018a4:	f009 ff49 	bl	800b73a <HAL_UARTEx_SetTxFifoThreshold>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80018ae:	f7ff fcb3 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018b2:	2100      	movs	r1, #0
 80018b4:	4808      	ldr	r0, [pc, #32]	@ (80018d8 <MX_UART4_Init+0x90>)
 80018b6:	f009 ff7e 	bl	800b7b6 <HAL_UARTEx_SetRxFifoThreshold>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80018c0:	f7ff fcaa 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80018c4:	4804      	ldr	r0, [pc, #16]	@ (80018d8 <MX_UART4_Init+0x90>)
 80018c6:	f009 feff 	bl	800b6c8 <HAL_UARTEx_DisableFifoMode>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80018d0:	f7ff fca2 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	24000600 	.word	0x24000600
 80018dc:	40004c00 	.word	0x40004c00

080018e0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80018e4:	4b22      	ldr	r3, [pc, #136]	@ (8001970 <MX_UART5_Init+0x90>)
 80018e6:	4a23      	ldr	r2, [pc, #140]	@ (8001974 <MX_UART5_Init+0x94>)
 80018e8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80018ea:	4b21      	ldr	r3, [pc, #132]	@ (8001970 <MX_UART5_Init+0x90>)
 80018ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018f0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80018f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <MX_UART5_Init+0x90>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001970 <MX_UART5_Init+0x90>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80018fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001970 <MX_UART5_Init+0x90>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001904:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <MX_UART5_Init+0x90>)
 8001906:	220c      	movs	r2, #12
 8001908:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190a:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <MX_UART5_Init+0x90>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001910:	4b17      	ldr	r3, [pc, #92]	@ (8001970 <MX_UART5_Init+0x90>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001916:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <MX_UART5_Init+0x90>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800191c:	4b14      	ldr	r3, [pc, #80]	@ (8001970 <MX_UART5_Init+0x90>)
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001922:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <MX_UART5_Init+0x90>)
 8001924:	2200      	movs	r2, #0
 8001926:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001928:	4811      	ldr	r0, [pc, #68]	@ (8001970 <MX_UART5_Init+0x90>)
 800192a:	f007 fe78 	bl	800961e <HAL_UART_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001934:	f7ff fc70 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001938:	2100      	movs	r1, #0
 800193a:	480d      	ldr	r0, [pc, #52]	@ (8001970 <MX_UART5_Init+0x90>)
 800193c:	f009 fefd 	bl	800b73a <HAL_UARTEx_SetTxFifoThreshold>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001946:	f7ff fc67 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800194a:	2100      	movs	r1, #0
 800194c:	4808      	ldr	r0, [pc, #32]	@ (8001970 <MX_UART5_Init+0x90>)
 800194e:	f009 ff32 	bl	800b7b6 <HAL_UARTEx_SetRxFifoThreshold>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001958:	f7ff fc5e 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800195c:	4804      	ldr	r0, [pc, #16]	@ (8001970 <MX_UART5_Init+0x90>)
 800195e:	f009 feb3 	bl	800b6c8 <HAL_UARTEx_DisableFifoMode>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001968:	f7ff fc56 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	24000694 	.word	0x24000694
 8001974:	40005000 	.word	0x40005000

08001978 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800197c:	4b22      	ldr	r3, [pc, #136]	@ (8001a08 <MX_USART3_UART_Init+0x90>)
 800197e:	4a23      	ldr	r2, [pc, #140]	@ (8001a0c <MX_USART3_UART_Init+0x94>)
 8001980:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001982:	4b21      	ldr	r3, [pc, #132]	@ (8001a08 <MX_USART3_UART_Init+0x90>)
 8001984:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001988:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800198a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a08 <MX_USART3_UART_Init+0x90>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001990:	4b1d      	ldr	r3, [pc, #116]	@ (8001a08 <MX_USART3_UART_Init+0x90>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001996:	4b1c      	ldr	r3, [pc, #112]	@ (8001a08 <MX_USART3_UART_Init+0x90>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800199c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <MX_USART3_UART_Init+0x90>)
 800199e:	220c      	movs	r2, #12
 80019a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a2:	4b19      	ldr	r3, [pc, #100]	@ (8001a08 <MX_USART3_UART_Init+0x90>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a8:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <MX_USART3_UART_Init+0x90>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ae:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <MX_USART3_UART_Init+0x90>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019b4:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <MX_USART3_UART_Init+0x90>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ba:	4b13      	ldr	r3, [pc, #76]	@ (8001a08 <MX_USART3_UART_Init+0x90>)
 80019bc:	2200      	movs	r2, #0
 80019be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019c0:	4811      	ldr	r0, [pc, #68]	@ (8001a08 <MX_USART3_UART_Init+0x90>)
 80019c2:	f007 fe2c 	bl	800961e <HAL_UART_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80019cc:	f7ff fc24 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d0:	2100      	movs	r1, #0
 80019d2:	480d      	ldr	r0, [pc, #52]	@ (8001a08 <MX_USART3_UART_Init+0x90>)
 80019d4:	f009 feb1 	bl	800b73a <HAL_UARTEx_SetTxFifoThreshold>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80019de:	f7ff fc1b 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e2:	2100      	movs	r1, #0
 80019e4:	4808      	ldr	r0, [pc, #32]	@ (8001a08 <MX_USART3_UART_Init+0x90>)
 80019e6:	f009 fee6 	bl	800b7b6 <HAL_UARTEx_SetRxFifoThreshold>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019f0:	f7ff fc12 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019f4:	4804      	ldr	r0, [pc, #16]	@ (8001a08 <MX_USART3_UART_Init+0x90>)
 80019f6:	f009 fe67 	bl	800b6c8 <HAL_UARTEx_DisableFifoMode>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a00:	f7ff fc0a 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	24000728 	.word	0x24000728
 8001a0c:	40004800 	.word	0x40004800

08001a10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b0be      	sub	sp, #248	@ 0xf8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a28:	f107 0320 	add.w	r3, r7, #32
 8001a2c:	22c0      	movs	r2, #192	@ 0xc0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f00b f985 	bl	800cd40 <memset>
  if(uartHandle->Instance==UART4)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4ab0      	ldr	r2, [pc, #704]	@ (8001cfc <HAL_UART_MspInit+0x2ec>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	f040 80ac 	bne.w	8001b9a <HAL_UART_MspInit+0x18a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a42:	f04f 0202 	mov.w	r2, #2
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a54:	f107 0320 	add.w	r3, r7, #32
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f005 fc07 	bl	800726c <HAL_RCCEx_PeriphCLKConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001a64:	f7ff fbd8 	bl	8001218 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a68:	4ba5      	ldr	r3, [pc, #660]	@ (8001d00 <HAL_UART_MspInit+0x2f0>)
 8001a6a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a6e:	4aa4      	ldr	r2, [pc, #656]	@ (8001d00 <HAL_UART_MspInit+0x2f0>)
 8001a70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a74:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001a78:	4ba1      	ldr	r3, [pc, #644]	@ (8001d00 <HAL_UART_MspInit+0x2f0>)
 8001a7a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	4b9e      	ldr	r3, [pc, #632]	@ (8001d00 <HAL_UART_MspInit+0x2f0>)
 8001a88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a8c:	4a9c      	ldr	r2, [pc, #624]	@ (8001d00 <HAL_UART_MspInit+0x2f0>)
 8001a8e:	f043 0302 	orr.w	r3, r3, #2
 8001a92:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001a96:	4b9a      	ldr	r3, [pc, #616]	@ (8001d00 <HAL_UART_MspInit+0x2f0>)
 8001a98:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aa4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001aa8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001abe:	2308      	movs	r3, #8
 8001ac0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	488e      	ldr	r0, [pc, #568]	@ (8001d04 <HAL_UART_MspInit+0x2f4>)
 8001acc:	f003 fad8 	bl	8005080 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001ad0:	4b8d      	ldr	r3, [pc, #564]	@ (8001d08 <HAL_UART_MspInit+0x2f8>)
 8001ad2:	4a8e      	ldr	r2, [pc, #568]	@ (8001d0c <HAL_UART_MspInit+0x2fc>)
 8001ad4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001ad6:	4b8c      	ldr	r3, [pc, #560]	@ (8001d08 <HAL_UART_MspInit+0x2f8>)
 8001ad8:	223f      	movs	r2, #63	@ 0x3f
 8001ada:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001adc:	4b8a      	ldr	r3, [pc, #552]	@ (8001d08 <HAL_UART_MspInit+0x2f8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae2:	4b89      	ldr	r3, [pc, #548]	@ (8001d08 <HAL_UART_MspInit+0x2f8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae8:	4b87      	ldr	r3, [pc, #540]	@ (8001d08 <HAL_UART_MspInit+0x2f8>)
 8001aea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aee:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001af0:	4b85      	ldr	r3, [pc, #532]	@ (8001d08 <HAL_UART_MspInit+0x2f8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af6:	4b84      	ldr	r3, [pc, #528]	@ (8001d08 <HAL_UART_MspInit+0x2f8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001afc:	4b82      	ldr	r3, [pc, #520]	@ (8001d08 <HAL_UART_MspInit+0x2f8>)
 8001afe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b02:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b04:	4b80      	ldr	r3, [pc, #512]	@ (8001d08 <HAL_UART_MspInit+0x2f8>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d08 <HAL_UART_MspInit+0x2f8>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001b10:	487d      	ldr	r0, [pc, #500]	@ (8001d08 <HAL_UART_MspInit+0x2f8>)
 8001b12:	f000 fbcb 	bl	80022ac <HAL_DMA_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001b1c:	f7ff fb7c 	bl	8001218 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a79      	ldr	r2, [pc, #484]	@ (8001d08 <HAL_UART_MspInit+0x2f8>)
 8001b24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001b28:	4a77      	ldr	r2, [pc, #476]	@ (8001d08 <HAL_UART_MspInit+0x2f8>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream3;
 8001b2e:	4b78      	ldr	r3, [pc, #480]	@ (8001d10 <HAL_UART_MspInit+0x300>)
 8001b30:	4a78      	ldr	r2, [pc, #480]	@ (8001d14 <HAL_UART_MspInit+0x304>)
 8001b32:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001b34:	4b76      	ldr	r3, [pc, #472]	@ (8001d10 <HAL_UART_MspInit+0x300>)
 8001b36:	2240      	movs	r2, #64	@ 0x40
 8001b38:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b3a:	4b75      	ldr	r3, [pc, #468]	@ (8001d10 <HAL_UART_MspInit+0x300>)
 8001b3c:	2240      	movs	r2, #64	@ 0x40
 8001b3e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b40:	4b73      	ldr	r3, [pc, #460]	@ (8001d10 <HAL_UART_MspInit+0x300>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b46:	4b72      	ldr	r3, [pc, #456]	@ (8001d10 <HAL_UART_MspInit+0x300>)
 8001b48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b4c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b4e:	4b70      	ldr	r3, [pc, #448]	@ (8001d10 <HAL_UART_MspInit+0x300>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b54:	4b6e      	ldr	r3, [pc, #440]	@ (8001d10 <HAL_UART_MspInit+0x300>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001b5a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d10 <HAL_UART_MspInit+0x300>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b60:	4b6b      	ldr	r3, [pc, #428]	@ (8001d10 <HAL_UART_MspInit+0x300>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b66:	4b6a      	ldr	r3, [pc, #424]	@ (8001d10 <HAL_UART_MspInit+0x300>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001b6c:	4868      	ldr	r0, [pc, #416]	@ (8001d10 <HAL_UART_MspInit+0x300>)
 8001b6e:	f000 fb9d 	bl	80022ac <HAL_DMA_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 8001b78:	f7ff fb4e 	bl	8001218 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a64      	ldr	r2, [pc, #400]	@ (8001d10 <HAL_UART_MspInit+0x300>)
 8001b80:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001b82:	4a63      	ldr	r2, [pc, #396]	@ (8001d10 <HAL_UART_MspInit+0x300>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2034      	movs	r0, #52	@ 0x34
 8001b8e:	f000 fae0 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001b92:	2034      	movs	r0, #52	@ 0x34
 8001b94:	f000 faf7 	bl	8002186 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b98:	e114      	b.n	8001dc4 <HAL_UART_MspInit+0x3b4>
  else if(uartHandle->Instance==UART5)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a5e      	ldr	r2, [pc, #376]	@ (8001d18 <HAL_UART_MspInit+0x308>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	f040 80c3 	bne.w	8001d2c <HAL_UART_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001ba6:	f04f 0202 	mov.w	r2, #2
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb8:	f107 0320 	add.w	r3, r7, #32
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f005 fb55 	bl	800726c <HAL_RCCEx_PeriphCLKConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8001bc8:	f7ff fb26 	bl	8001218 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001bcc:	4b4c      	ldr	r3, [pc, #304]	@ (8001d00 <HAL_UART_MspInit+0x2f0>)
 8001bce:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001bd2:	4a4b      	ldr	r2, [pc, #300]	@ (8001d00 <HAL_UART_MspInit+0x2f0>)
 8001bd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bd8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001bdc:	4b48      	ldr	r3, [pc, #288]	@ (8001d00 <HAL_UART_MspInit+0x2f0>)
 8001bde:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001be2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	4b45      	ldr	r3, [pc, #276]	@ (8001d00 <HAL_UART_MspInit+0x2f0>)
 8001bec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bf0:	4a43      	ldr	r2, [pc, #268]	@ (8001d00 <HAL_UART_MspInit+0x2f0>)
 8001bf2:	f043 0302 	orr.w	r3, r3, #2
 8001bf6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001bfa:	4b41      	ldr	r3, [pc, #260]	@ (8001d00 <HAL_UART_MspInit+0x2f0>)
 8001bfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c08:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001c0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001c22:	230e      	movs	r3, #14
 8001c24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c28:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4835      	ldr	r0, [pc, #212]	@ (8001d04 <HAL_UART_MspInit+0x2f4>)
 8001c30:	f003 fa26 	bl	8005080 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001c34:	4b39      	ldr	r3, [pc, #228]	@ (8001d1c <HAL_UART_MspInit+0x30c>)
 8001c36:	4a3a      	ldr	r2, [pc, #232]	@ (8001d20 <HAL_UART_MspInit+0x310>)
 8001c38:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8001c3a:	4b38      	ldr	r3, [pc, #224]	@ (8001d1c <HAL_UART_MspInit+0x30c>)
 8001c3c:	2241      	movs	r2, #65	@ 0x41
 8001c3e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c40:	4b36      	ldr	r3, [pc, #216]	@ (8001d1c <HAL_UART_MspInit+0x30c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c46:	4b35      	ldr	r3, [pc, #212]	@ (8001d1c <HAL_UART_MspInit+0x30c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c4c:	4b33      	ldr	r3, [pc, #204]	@ (8001d1c <HAL_UART_MspInit+0x30c>)
 8001c4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c52:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c54:	4b31      	ldr	r3, [pc, #196]	@ (8001d1c <HAL_UART_MspInit+0x30c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c5a:	4b30      	ldr	r3, [pc, #192]	@ (8001d1c <HAL_UART_MspInit+0x30c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001c60:	4b2e      	ldr	r3, [pc, #184]	@ (8001d1c <HAL_UART_MspInit+0x30c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c66:	4b2d      	ldr	r3, [pc, #180]	@ (8001d1c <HAL_UART_MspInit+0x30c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d1c <HAL_UART_MspInit+0x30c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001c72:	482a      	ldr	r0, [pc, #168]	@ (8001d1c <HAL_UART_MspInit+0x30c>)
 8001c74:	f000 fb1a 	bl	80022ac <HAL_DMA_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_UART_MspInit+0x272>
      Error_Handler();
 8001c7e:	f7ff facb 	bl	8001218 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a25      	ldr	r2, [pc, #148]	@ (8001d1c <HAL_UART_MspInit+0x30c>)
 8001c86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001c8a:	4a24      	ldr	r2, [pc, #144]	@ (8001d1c <HAL_UART_MspInit+0x30c>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream1;
 8001c90:	4b24      	ldr	r3, [pc, #144]	@ (8001d24 <HAL_UART_MspInit+0x314>)
 8001c92:	4a25      	ldr	r2, [pc, #148]	@ (8001d28 <HAL_UART_MspInit+0x318>)
 8001c94:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8001c96:	4b23      	ldr	r3, [pc, #140]	@ (8001d24 <HAL_UART_MspInit+0x314>)
 8001c98:	2242      	movs	r2, #66	@ 0x42
 8001c9a:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c9c:	4b21      	ldr	r3, [pc, #132]	@ (8001d24 <HAL_UART_MspInit+0x314>)
 8001c9e:	2240      	movs	r2, #64	@ 0x40
 8001ca0:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca2:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <HAL_UART_MspInit+0x314>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d24 <HAL_UART_MspInit+0x314>)
 8001caa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cae:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d24 <HAL_UART_MspInit+0x314>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <HAL_UART_MspInit+0x314>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001cbc:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <HAL_UART_MspInit+0x314>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cc2:	4b18      	ldr	r3, [pc, #96]	@ (8001d24 <HAL_UART_MspInit+0x314>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cc8:	4b16      	ldr	r3, [pc, #88]	@ (8001d24 <HAL_UART_MspInit+0x314>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001cce:	4815      	ldr	r0, [pc, #84]	@ (8001d24 <HAL_UART_MspInit+0x314>)
 8001cd0:	f000 faec 	bl	80022ac <HAL_DMA_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 8001cda:	f7ff fa9d 	bl	8001218 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a10      	ldr	r2, [pc, #64]	@ (8001d24 <HAL_UART_MspInit+0x314>)
 8001ce2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001ce4:	4a0f      	ldr	r2, [pc, #60]	@ (8001d24 <HAL_UART_MspInit+0x314>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	2035      	movs	r0, #53	@ 0x35
 8001cf0:	f000 fa2f 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001cf4:	2035      	movs	r0, #53	@ 0x35
 8001cf6:	f000 fa46 	bl	8002186 <HAL_NVIC_EnableIRQ>
}
 8001cfa:	e063      	b.n	8001dc4 <HAL_UART_MspInit+0x3b4>
 8001cfc:	40004c00 	.word	0x40004c00
 8001d00:	58024400 	.word	0x58024400
 8001d04:	58020400 	.word	0x58020400
 8001d08:	240007bc 	.word	0x240007bc
 8001d0c:	40020040 	.word	0x40020040
 8001d10:	24000834 	.word	0x24000834
 8001d14:	40020058 	.word	0x40020058
 8001d18:	40005000 	.word	0x40005000
 8001d1c:	240008ac 	.word	0x240008ac
 8001d20:	40020010 	.word	0x40020010
 8001d24:	24000924 	.word	0x24000924
 8001d28:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART3)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a26      	ldr	r2, [pc, #152]	@ (8001dcc <HAL_UART_MspInit+0x3bc>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d146      	bne.n	8001dc4 <HAL_UART_MspInit+0x3b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d36:	f04f 0202 	mov.w	r2, #2
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d48:	f107 0320 	add.w	r3, r7, #32
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f005 fa8d 	bl	800726c <HAL_RCCEx_PeriphCLKConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_UART_MspInit+0x34c>
      Error_Handler();
 8001d58:	f7ff fa5e 	bl	8001218 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd0 <HAL_UART_MspInit+0x3c0>)
 8001d5e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001d62:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd0 <HAL_UART_MspInit+0x3c0>)
 8001d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d68:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001d6c:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <HAL_UART_MspInit+0x3c0>)
 8001d6e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001d72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <HAL_UART_MspInit+0x3c0>)
 8001d7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d80:	4a13      	ldr	r2, [pc, #76]	@ (8001dd0 <HAL_UART_MspInit+0x3c0>)
 8001d82:	f043 0308 	orr.w	r3, r3, #8
 8001d86:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001d8a:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <HAL_UART_MspInit+0x3c0>)
 8001d8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d98:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001db2:	2307      	movs	r3, #7
 8001db4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <HAL_UART_MspInit+0x3c4>)
 8001dc0:	f003 f95e 	bl	8005080 <HAL_GPIO_Init>
}
 8001dc4:	bf00      	nop
 8001dc6:	37f8      	adds	r7, #248	@ 0xf8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40004800 	.word	0x40004800
 8001dd0:	58024400 	.word	0x58024400
 8001dd4:	58020c00 	.word	0x58020c00

08001dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dd8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001e14 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001ddc:	f7ff fd1c 	bl	8001818 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001de0:	f7ff fc8a 	bl	80016f8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001de6:	490d      	ldr	r1, [pc, #52]	@ (8001e1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001de8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dec:	e002      	b.n	8001df4 <LoopCopyDataInit>

08001dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df2:	3304      	adds	r3, #4

08001df4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df8:	d3f9      	bcc.n	8001dee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dfc:	4c0a      	ldr	r4, [pc, #40]	@ (8001e28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e00:	e001      	b.n	8001e06 <LoopFillZerobss>

08001e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e04:	3204      	adds	r2, #4

08001e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e08:	d3fb      	bcc.n	8001e02 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e0a:	f00b f801 	bl	800ce10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e0e:	f7fe ffaf 	bl	8000d70 <main>
  bx  lr
 8001e12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e14:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001e18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e1c:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001e20:	0800ec3c 	.word	0x0800ec3c
  ldr r2, =_sbss
 8001e24:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001e28:	24000bec 	.word	0x24000bec

08001e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e2c:	e7fe      	b.n	8001e2c <ADC_IRQHandler>
	...

08001e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e36:	2003      	movs	r0, #3
 8001e38:	f000 f980 	bl	800213c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001e3c:	f005 f840 	bl	8006ec0 <HAL_RCC_GetSysClockFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <HAL_Init+0x68>)
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	4913      	ldr	r1, [pc, #76]	@ (8001e9c <HAL_Init+0x6c>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
 8001e58:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e98 <HAL_Init+0x68>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	4a0e      	ldr	r2, [pc, #56]	@ (8001e9c <HAL_Init+0x6c>)
 8001e64:	5cd3      	ldrb	r3, [r2, r3]
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e70:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea0 <HAL_Init+0x70>)
 8001e72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e74:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea4 <HAL_Init+0x74>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f000 f814 	bl	8001ea8 <HAL_InitTick>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e002      	b.n	8001e90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e8a:	f7ff fac5 	bl	8001418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	58024400 	.word	0x58024400
 8001e9c:	0800e878 	.word	0x0800e878
 8001ea0:	24000004 	.word	0x24000004
 8001ea4:	24000000 	.word	0x24000000

08001ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001eb0:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <HAL_InitTick+0x60>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e021      	b.n	8001f00 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ebc:	4b13      	ldr	r3, [pc, #76]	@ (8001f0c <HAL_InitTick+0x64>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <HAL_InitTick+0x60>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f965 	bl	80021a2 <HAL_SYSTICK_Config>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00e      	b.n	8001f00 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0f      	cmp	r3, #15
 8001ee6:	d80a      	bhi.n	8001efe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f000 f92f 	bl	8002152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef4:	4a06      	ldr	r2, [pc, #24]	@ (8001f10 <HAL_InitTick+0x68>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	2400000c 	.word	0x2400000c
 8001f0c:	24000000 	.word	0x24000000
 8001f10:	24000008 	.word	0x24000008

08001f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f18:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <HAL_IncTick+0x20>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <HAL_IncTick+0x24>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	@ (8001f38 <HAL_IncTick+0x24>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	2400000c 	.word	0x2400000c
 8001f38:	2400099c 	.word	0x2400099c

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b03      	ldr	r3, [pc, #12]	@ (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	2400099c 	.word	0x2400099c

08001f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff ffee 	bl	8001f3c <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d005      	beq.n	8001f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <HAL_Delay+0x44>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7a:	bf00      	nop
 8001f7c:	f7ff ffde 	bl	8001f3c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d8f7      	bhi.n	8001f7c <HAL_Delay+0x28>
  {
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2400000c 	.word	0x2400000c

08001f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <__NVIC_SetPriorityGrouping+0x40>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	@ (8001fdc <__NVIC_SetPriorityGrouping+0x40>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00
 8001fe0:	05fa0000 	.word	0x05fa0000

08001fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800200a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db0b      	blt.n	800202a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4907      	ldr	r1, [pc, #28]	@ (8002038 <__NVIC_EnableIRQ+0x38>)
 800201a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2001      	movs	r0, #1
 8002022:	fa00 f202 	lsl.w	r2, r0, r2
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002048:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db0a      	blt.n	8002066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	490c      	ldr	r1, [pc, #48]	@ (8002088 <__NVIC_SetPriority+0x4c>)
 8002056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	440b      	add	r3, r1
 8002060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002064:	e00a      	b.n	800207c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4908      	ldr	r1, [pc, #32]	@ (800208c <__NVIC_SetPriority+0x50>)
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	3b04      	subs	r3, #4
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	440b      	add	r3, r1
 800207a:	761a      	strb	r2, [r3, #24]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	@ 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f1c3 0307 	rsb	r3, r3, #7
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf28      	it	cs
 80020ae:	2304      	movcs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d902      	bls.n	80020c0 <NVIC_EncodePriority+0x30>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3b03      	subs	r3, #3
 80020be:	e000      	b.n	80020c2 <NVIC_EncodePriority+0x32>
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	4313      	orrs	r3, r2
         );
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	@ 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002108:	d301      	bcc.n	800210e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210a:	2301      	movs	r3, #1
 800210c:	e00f      	b.n	800212e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <SysTick_Config+0x40>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002116:	210f      	movs	r1, #15
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f7ff ff8e 	bl	800203c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002120:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <SysTick_Config+0x40>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002126:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <SysTick_Config+0x40>)
 8002128:	2207      	movs	r2, #7
 800212a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	e000e010 	.word	0xe000e010

0800213c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff29 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002160:	f7ff ff40 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 8002164:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f7ff ff90 	bl	8002090 <NVIC_EncodePriority>
 8002170:	4602      	mov	r2, r0
 8002172:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff5f 	bl	800203c <__NVIC_SetPriority>
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002190:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff33 	bl	8002000 <__NVIC_EnableIRQ>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffa4 	bl	80020f8 <SysTick_Config>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80021c0:	f3bf 8f5f 	dmb	sy
}
 80021c4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80021c6:	4b07      	ldr	r3, [pc, #28]	@ (80021e4 <HAL_MPU_Disable+0x28>)
 80021c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ca:	4a06      	ldr	r2, [pc, #24]	@ (80021e4 <HAL_MPU_Disable+0x28>)
 80021cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021d0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80021d2:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <HAL_MPU_Disable+0x2c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	605a      	str	r2, [r3, #4]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000ed00 	.word	0xe000ed00
 80021e8:	e000ed90 	.word	0xe000ed90

080021ec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80021f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002224 <HAL_MPU_Enable+0x38>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_MPU_Enable+0x3c>)
 8002200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002202:	4a09      	ldr	r2, [pc, #36]	@ (8002228 <HAL_MPU_Enable+0x3c>)
 8002204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002208:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800220a:	f3bf 8f4f 	dsb	sy
}
 800220e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002210:	f3bf 8f6f 	isb	sy
}
 8002214:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000ed90 	.word	0xe000ed90
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	785a      	ldrb	r2, [r3, #1]
 8002238:	4b1b      	ldr	r3, [pc, #108]	@ (80022a8 <HAL_MPU_ConfigRegion+0x7c>)
 800223a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800223c:	4b1a      	ldr	r3, [pc, #104]	@ (80022a8 <HAL_MPU_ConfigRegion+0x7c>)
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	4a19      	ldr	r2, [pc, #100]	@ (80022a8 <HAL_MPU_ConfigRegion+0x7c>)
 8002242:	f023 0301 	bic.w	r3, r3, #1
 8002246:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002248:	4a17      	ldr	r2, [pc, #92]	@ (80022a8 <HAL_MPU_ConfigRegion+0x7c>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7b1b      	ldrb	r3, [r3, #12]
 8002254:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7adb      	ldrb	r3, [r3, #11]
 800225a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800225c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	7a9b      	ldrb	r3, [r3, #10]
 8002262:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002264:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	7b5b      	ldrb	r3, [r3, #13]
 800226a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800226c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7b9b      	ldrb	r3, [r3, #14]
 8002272:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002274:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7bdb      	ldrb	r3, [r3, #15]
 800227a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800227c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	7a5b      	ldrb	r3, [r3, #9]
 8002282:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002284:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	7a1b      	ldrb	r3, [r3, #8]
 800228a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800228c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	7812      	ldrb	r2, [r2, #0]
 8002292:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002294:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002296:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002298:	6113      	str	r3, [r2, #16]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000ed90 	.word	0xe000ed90

080022ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7ff fe42 	bl	8001f3c <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e37d      	b.n	80029c0 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a66      	ldr	r2, [pc, #408]	@ (8002464 <HAL_DMA_Init+0x1b8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d04a      	beq.n	8002364 <HAL_DMA_Init+0xb8>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a65      	ldr	r2, [pc, #404]	@ (8002468 <HAL_DMA_Init+0x1bc>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d045      	beq.n	8002364 <HAL_DMA_Init+0xb8>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a63      	ldr	r2, [pc, #396]	@ (800246c <HAL_DMA_Init+0x1c0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d040      	beq.n	8002364 <HAL_DMA_Init+0xb8>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a62      	ldr	r2, [pc, #392]	@ (8002470 <HAL_DMA_Init+0x1c4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d03b      	beq.n	8002364 <HAL_DMA_Init+0xb8>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a60      	ldr	r2, [pc, #384]	@ (8002474 <HAL_DMA_Init+0x1c8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d036      	beq.n	8002364 <HAL_DMA_Init+0xb8>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a5f      	ldr	r2, [pc, #380]	@ (8002478 <HAL_DMA_Init+0x1cc>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d031      	beq.n	8002364 <HAL_DMA_Init+0xb8>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a5d      	ldr	r2, [pc, #372]	@ (800247c <HAL_DMA_Init+0x1d0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d02c      	beq.n	8002364 <HAL_DMA_Init+0xb8>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a5c      	ldr	r2, [pc, #368]	@ (8002480 <HAL_DMA_Init+0x1d4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d027      	beq.n	8002364 <HAL_DMA_Init+0xb8>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a5a      	ldr	r2, [pc, #360]	@ (8002484 <HAL_DMA_Init+0x1d8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d022      	beq.n	8002364 <HAL_DMA_Init+0xb8>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a59      	ldr	r2, [pc, #356]	@ (8002488 <HAL_DMA_Init+0x1dc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d01d      	beq.n	8002364 <HAL_DMA_Init+0xb8>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a57      	ldr	r2, [pc, #348]	@ (800248c <HAL_DMA_Init+0x1e0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d018      	beq.n	8002364 <HAL_DMA_Init+0xb8>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a56      	ldr	r2, [pc, #344]	@ (8002490 <HAL_DMA_Init+0x1e4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d013      	beq.n	8002364 <HAL_DMA_Init+0xb8>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a54      	ldr	r2, [pc, #336]	@ (8002494 <HAL_DMA_Init+0x1e8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00e      	beq.n	8002364 <HAL_DMA_Init+0xb8>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a53      	ldr	r2, [pc, #332]	@ (8002498 <HAL_DMA_Init+0x1ec>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d009      	beq.n	8002364 <HAL_DMA_Init+0xb8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a51      	ldr	r2, [pc, #324]	@ (800249c <HAL_DMA_Init+0x1f0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d004      	beq.n	8002364 <HAL_DMA_Init+0xb8>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a50      	ldr	r2, [pc, #320]	@ (80024a0 <HAL_DMA_Init+0x1f4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d101      	bne.n	8002368 <HAL_DMA_Init+0xbc>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <HAL_DMA_Init+0xbe>
 8002368:	2300      	movs	r3, #0
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 813c 	beq.w	80025e8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a37      	ldr	r2, [pc, #220]	@ (8002464 <HAL_DMA_Init+0x1b8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d04a      	beq.n	8002420 <HAL_DMA_Init+0x174>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a36      	ldr	r2, [pc, #216]	@ (8002468 <HAL_DMA_Init+0x1bc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d045      	beq.n	8002420 <HAL_DMA_Init+0x174>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a34      	ldr	r2, [pc, #208]	@ (800246c <HAL_DMA_Init+0x1c0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d040      	beq.n	8002420 <HAL_DMA_Init+0x174>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a33      	ldr	r2, [pc, #204]	@ (8002470 <HAL_DMA_Init+0x1c4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d03b      	beq.n	8002420 <HAL_DMA_Init+0x174>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a31      	ldr	r2, [pc, #196]	@ (8002474 <HAL_DMA_Init+0x1c8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d036      	beq.n	8002420 <HAL_DMA_Init+0x174>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a30      	ldr	r2, [pc, #192]	@ (8002478 <HAL_DMA_Init+0x1cc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d031      	beq.n	8002420 <HAL_DMA_Init+0x174>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a2e      	ldr	r2, [pc, #184]	@ (800247c <HAL_DMA_Init+0x1d0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d02c      	beq.n	8002420 <HAL_DMA_Init+0x174>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002480 <HAL_DMA_Init+0x1d4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d027      	beq.n	8002420 <HAL_DMA_Init+0x174>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002484 <HAL_DMA_Init+0x1d8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d022      	beq.n	8002420 <HAL_DMA_Init+0x174>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a2a      	ldr	r2, [pc, #168]	@ (8002488 <HAL_DMA_Init+0x1dc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d01d      	beq.n	8002420 <HAL_DMA_Init+0x174>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a28      	ldr	r2, [pc, #160]	@ (800248c <HAL_DMA_Init+0x1e0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d018      	beq.n	8002420 <HAL_DMA_Init+0x174>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a27      	ldr	r2, [pc, #156]	@ (8002490 <HAL_DMA_Init+0x1e4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d013      	beq.n	8002420 <HAL_DMA_Init+0x174>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a25      	ldr	r2, [pc, #148]	@ (8002494 <HAL_DMA_Init+0x1e8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00e      	beq.n	8002420 <HAL_DMA_Init+0x174>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a24      	ldr	r2, [pc, #144]	@ (8002498 <HAL_DMA_Init+0x1ec>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d009      	beq.n	8002420 <HAL_DMA_Init+0x174>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a22      	ldr	r2, [pc, #136]	@ (800249c <HAL_DMA_Init+0x1f0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d004      	beq.n	8002420 <HAL_DMA_Init+0x174>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a21      	ldr	r2, [pc, #132]	@ (80024a0 <HAL_DMA_Init+0x1f4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d108      	bne.n	8002432 <HAL_DMA_Init+0x186>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0201 	bic.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	e007      	b.n	8002442 <HAL_DMA_Init+0x196>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002442:	e02f      	b.n	80024a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002444:	f7ff fd7a 	bl	8001f3c <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b05      	cmp	r3, #5
 8002450:	d928      	bls.n	80024a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2220      	movs	r2, #32
 8002456:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2203      	movs	r2, #3
 800245c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e2ad      	b.n	80029c0 <HAL_DMA_Init+0x714>
 8002464:	40020010 	.word	0x40020010
 8002468:	40020028 	.word	0x40020028
 800246c:	40020040 	.word	0x40020040
 8002470:	40020058 	.word	0x40020058
 8002474:	40020070 	.word	0x40020070
 8002478:	40020088 	.word	0x40020088
 800247c:	400200a0 	.word	0x400200a0
 8002480:	400200b8 	.word	0x400200b8
 8002484:	40020410 	.word	0x40020410
 8002488:	40020428 	.word	0x40020428
 800248c:	40020440 	.word	0x40020440
 8002490:	40020458 	.word	0x40020458
 8002494:	40020470 	.word	0x40020470
 8002498:	40020488 	.word	0x40020488
 800249c:	400204a0 	.word	0x400204a0
 80024a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1c8      	bne.n	8002444 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4b73      	ldr	r3, [pc, #460]	@ (800268c <HAL_DMA_Init+0x3e0>)
 80024be:	4013      	ands	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80024ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d107      	bne.n	8002508 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002500:	4313      	orrs	r3, r2
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b28      	cmp	r3, #40	@ 0x28
 800250e:	d903      	bls.n	8002518 <HAL_DMA_Init+0x26c>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b2e      	cmp	r3, #46	@ 0x2e
 8002516:	d91f      	bls.n	8002558 <HAL_DMA_Init+0x2ac>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b3e      	cmp	r3, #62	@ 0x3e
 800251e:	d903      	bls.n	8002528 <HAL_DMA_Init+0x27c>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b42      	cmp	r3, #66	@ 0x42
 8002526:	d917      	bls.n	8002558 <HAL_DMA_Init+0x2ac>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b46      	cmp	r3, #70	@ 0x46
 800252e:	d903      	bls.n	8002538 <HAL_DMA_Init+0x28c>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b48      	cmp	r3, #72	@ 0x48
 8002536:	d90f      	bls.n	8002558 <HAL_DMA_Init+0x2ac>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b4e      	cmp	r3, #78	@ 0x4e
 800253e:	d903      	bls.n	8002548 <HAL_DMA_Init+0x29c>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b52      	cmp	r3, #82	@ 0x52
 8002546:	d907      	bls.n	8002558 <HAL_DMA_Init+0x2ac>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b73      	cmp	r3, #115	@ 0x73
 800254e:	d905      	bls.n	800255c <HAL_DMA_Init+0x2b0>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b77      	cmp	r3, #119	@ 0x77
 8002556:	d801      	bhi.n	800255c <HAL_DMA_Init+0x2b0>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <HAL_DMA_Init+0x2b2>
 800255c:	2300      	movs	r3, #0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002568:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f023 0307 	bic.w	r3, r3, #7
 8002580:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	2b04      	cmp	r3, #4
 8002592:	d117      	bne.n	80025c4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00e      	beq.n	80025c4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f002 fbe0 	bl	8004d6c <DMA_CheckFifoParam>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d008      	beq.n	80025c4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2240      	movs	r2, #64	@ 0x40
 80025b6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e1fd      	b.n	80029c0 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f002 fb1b 	bl	8004c08 <DMA_CalcBaseAndBitshift>
 80025d2:	4603      	mov	r3, r0
 80025d4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	223f      	movs	r2, #63	@ 0x3f
 80025e0:	409a      	lsls	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	e0fd      	b.n	80027e4 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a28      	ldr	r2, [pc, #160]	@ (8002690 <HAL_DMA_Init+0x3e4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d04a      	beq.n	8002688 <HAL_DMA_Init+0x3dc>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a27      	ldr	r2, [pc, #156]	@ (8002694 <HAL_DMA_Init+0x3e8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d045      	beq.n	8002688 <HAL_DMA_Init+0x3dc>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a25      	ldr	r2, [pc, #148]	@ (8002698 <HAL_DMA_Init+0x3ec>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d040      	beq.n	8002688 <HAL_DMA_Init+0x3dc>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a24      	ldr	r2, [pc, #144]	@ (800269c <HAL_DMA_Init+0x3f0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d03b      	beq.n	8002688 <HAL_DMA_Init+0x3dc>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a22      	ldr	r2, [pc, #136]	@ (80026a0 <HAL_DMA_Init+0x3f4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d036      	beq.n	8002688 <HAL_DMA_Init+0x3dc>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a21      	ldr	r2, [pc, #132]	@ (80026a4 <HAL_DMA_Init+0x3f8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d031      	beq.n	8002688 <HAL_DMA_Init+0x3dc>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1f      	ldr	r2, [pc, #124]	@ (80026a8 <HAL_DMA_Init+0x3fc>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d02c      	beq.n	8002688 <HAL_DMA_Init+0x3dc>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1e      	ldr	r2, [pc, #120]	@ (80026ac <HAL_DMA_Init+0x400>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d027      	beq.n	8002688 <HAL_DMA_Init+0x3dc>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a1c      	ldr	r2, [pc, #112]	@ (80026b0 <HAL_DMA_Init+0x404>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d022      	beq.n	8002688 <HAL_DMA_Init+0x3dc>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a1b      	ldr	r2, [pc, #108]	@ (80026b4 <HAL_DMA_Init+0x408>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d01d      	beq.n	8002688 <HAL_DMA_Init+0x3dc>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a19      	ldr	r2, [pc, #100]	@ (80026b8 <HAL_DMA_Init+0x40c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d018      	beq.n	8002688 <HAL_DMA_Init+0x3dc>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a18      	ldr	r2, [pc, #96]	@ (80026bc <HAL_DMA_Init+0x410>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d013      	beq.n	8002688 <HAL_DMA_Init+0x3dc>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a16      	ldr	r2, [pc, #88]	@ (80026c0 <HAL_DMA_Init+0x414>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00e      	beq.n	8002688 <HAL_DMA_Init+0x3dc>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a15      	ldr	r2, [pc, #84]	@ (80026c4 <HAL_DMA_Init+0x418>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d009      	beq.n	8002688 <HAL_DMA_Init+0x3dc>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a13      	ldr	r2, [pc, #76]	@ (80026c8 <HAL_DMA_Init+0x41c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d004      	beq.n	8002688 <HAL_DMA_Init+0x3dc>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a12      	ldr	r2, [pc, #72]	@ (80026cc <HAL_DMA_Init+0x420>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d123      	bne.n	80026d0 <HAL_DMA_Init+0x424>
 8002688:	2301      	movs	r3, #1
 800268a:	e022      	b.n	80026d2 <HAL_DMA_Init+0x426>
 800268c:	fe10803f 	.word	0xfe10803f
 8002690:	48022c08 	.word	0x48022c08
 8002694:	48022c1c 	.word	0x48022c1c
 8002698:	48022c30 	.word	0x48022c30
 800269c:	48022c44 	.word	0x48022c44
 80026a0:	48022c58 	.word	0x48022c58
 80026a4:	48022c6c 	.word	0x48022c6c
 80026a8:	48022c80 	.word	0x48022c80
 80026ac:	48022c94 	.word	0x48022c94
 80026b0:	58025408 	.word	0x58025408
 80026b4:	5802541c 	.word	0x5802541c
 80026b8:	58025430 	.word	0x58025430
 80026bc:	58025444 	.word	0x58025444
 80026c0:	58025458 	.word	0x58025458
 80026c4:	5802546c 	.word	0x5802546c
 80026c8:	58025480 	.word	0x58025480
 80026cc:	58025494 	.word	0x58025494
 80026d0:	2300      	movs	r3, #0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d07d      	beq.n	80027d2 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a7f      	ldr	r2, [pc, #508]	@ (80028d8 <HAL_DMA_Init+0x62c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d021      	beq.n	8002724 <HAL_DMA_Init+0x478>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a7d      	ldr	r2, [pc, #500]	@ (80028dc <HAL_DMA_Init+0x630>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01c      	beq.n	8002724 <HAL_DMA_Init+0x478>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a7c      	ldr	r2, [pc, #496]	@ (80028e0 <HAL_DMA_Init+0x634>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d017      	beq.n	8002724 <HAL_DMA_Init+0x478>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a7a      	ldr	r2, [pc, #488]	@ (80028e4 <HAL_DMA_Init+0x638>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d012      	beq.n	8002724 <HAL_DMA_Init+0x478>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a79      	ldr	r2, [pc, #484]	@ (80028e8 <HAL_DMA_Init+0x63c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d00d      	beq.n	8002724 <HAL_DMA_Init+0x478>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a77      	ldr	r2, [pc, #476]	@ (80028ec <HAL_DMA_Init+0x640>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d008      	beq.n	8002724 <HAL_DMA_Init+0x478>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a76      	ldr	r2, [pc, #472]	@ (80028f0 <HAL_DMA_Init+0x644>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d003      	beq.n	8002724 <HAL_DMA_Init+0x478>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a74      	ldr	r2, [pc, #464]	@ (80028f4 <HAL_DMA_Init+0x648>)
 8002722:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4b6e      	ldr	r3, [pc, #440]	@ (80028f8 <HAL_DMA_Init+0x64c>)
 8002740:	4013      	ands	r3, r2
 8002742:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b40      	cmp	r3, #64	@ 0x40
 800274a:	d008      	beq.n	800275e <HAL_DMA_Init+0x4b2>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b80      	cmp	r3, #128	@ 0x80
 8002752:	d102      	bne.n	800275a <HAL_DMA_Init+0x4ae>
 8002754:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002758:	e002      	b.n	8002760 <HAL_DMA_Init+0x4b4>
 800275a:	2300      	movs	r3, #0
 800275c:	e000      	b.n	8002760 <HAL_DMA_Init+0x4b4>
 800275e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	68d2      	ldr	r2, [r2, #12]
 8002764:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002766:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800276e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002776:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800277e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002786:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800278e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	4b55      	ldr	r3, [pc, #340]	@ (80028fc <HAL_DMA_Init+0x650>)
 80027a6:	4413      	add	r3, r2
 80027a8:	4a55      	ldr	r2, [pc, #340]	@ (8002900 <HAL_DMA_Init+0x654>)
 80027aa:	fba2 2303 	umull	r2, r3, r2, r3
 80027ae:	091b      	lsrs	r3, r3, #4
 80027b0:	009a      	lsls	r2, r3, #2
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f002 fa26 	bl	8004c08 <DMA_CalcBaseAndBitshift>
 80027bc:	4603      	mov	r3, r0
 80027be:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2201      	movs	r2, #1
 80027ca:	409a      	lsls	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	e008      	b.n	80027e4 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2240      	movs	r2, #64	@ 0x40
 80027d6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2203      	movs	r2, #3
 80027dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0ed      	b.n	80029c0 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a46      	ldr	r2, [pc, #280]	@ (8002904 <HAL_DMA_Init+0x658>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d072      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a45      	ldr	r2, [pc, #276]	@ (8002908 <HAL_DMA_Init+0x65c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d06d      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a43      	ldr	r2, [pc, #268]	@ (800290c <HAL_DMA_Init+0x660>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d068      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a42      	ldr	r2, [pc, #264]	@ (8002910 <HAL_DMA_Init+0x664>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d063      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a40      	ldr	r2, [pc, #256]	@ (8002914 <HAL_DMA_Init+0x668>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d05e      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a3f      	ldr	r2, [pc, #252]	@ (8002918 <HAL_DMA_Init+0x66c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d059      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a3d      	ldr	r2, [pc, #244]	@ (800291c <HAL_DMA_Init+0x670>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d054      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a3c      	ldr	r2, [pc, #240]	@ (8002920 <HAL_DMA_Init+0x674>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d04f      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a3a      	ldr	r2, [pc, #232]	@ (8002924 <HAL_DMA_Init+0x678>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d04a      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a39      	ldr	r2, [pc, #228]	@ (8002928 <HAL_DMA_Init+0x67c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d045      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a37      	ldr	r2, [pc, #220]	@ (800292c <HAL_DMA_Init+0x680>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d040      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a36      	ldr	r2, [pc, #216]	@ (8002930 <HAL_DMA_Init+0x684>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d03b      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a34      	ldr	r2, [pc, #208]	@ (8002934 <HAL_DMA_Init+0x688>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d036      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a33      	ldr	r2, [pc, #204]	@ (8002938 <HAL_DMA_Init+0x68c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d031      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a31      	ldr	r2, [pc, #196]	@ (800293c <HAL_DMA_Init+0x690>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d02c      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a30      	ldr	r2, [pc, #192]	@ (8002940 <HAL_DMA_Init+0x694>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d027      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a13      	ldr	r2, [pc, #76]	@ (80028d8 <HAL_DMA_Init+0x62c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d022      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a12      	ldr	r2, [pc, #72]	@ (80028dc <HAL_DMA_Init+0x630>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d01d      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a10      	ldr	r2, [pc, #64]	@ (80028e0 <HAL_DMA_Init+0x634>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d018      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a0f      	ldr	r2, [pc, #60]	@ (80028e4 <HAL_DMA_Init+0x638>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d013      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0d      	ldr	r2, [pc, #52]	@ (80028e8 <HAL_DMA_Init+0x63c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00e      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a0c      	ldr	r2, [pc, #48]	@ (80028ec <HAL_DMA_Init+0x640>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d009      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0a      	ldr	r2, [pc, #40]	@ (80028f0 <HAL_DMA_Init+0x644>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d004      	beq.n	80028d4 <HAL_DMA_Init+0x628>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a09      	ldr	r2, [pc, #36]	@ (80028f4 <HAL_DMA_Init+0x648>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d137      	bne.n	8002944 <HAL_DMA_Init+0x698>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e036      	b.n	8002946 <HAL_DMA_Init+0x69a>
 80028d8:	58025408 	.word	0x58025408
 80028dc:	5802541c 	.word	0x5802541c
 80028e0:	58025430 	.word	0x58025430
 80028e4:	58025444 	.word	0x58025444
 80028e8:	58025458 	.word	0x58025458
 80028ec:	5802546c 	.word	0x5802546c
 80028f0:	58025480 	.word	0x58025480
 80028f4:	58025494 	.word	0x58025494
 80028f8:	fffe000f 	.word	0xfffe000f
 80028fc:	a7fdabf8 	.word	0xa7fdabf8
 8002900:	cccccccd 	.word	0xcccccccd
 8002904:	40020010 	.word	0x40020010
 8002908:	40020028 	.word	0x40020028
 800290c:	40020040 	.word	0x40020040
 8002910:	40020058 	.word	0x40020058
 8002914:	40020070 	.word	0x40020070
 8002918:	40020088 	.word	0x40020088
 800291c:	400200a0 	.word	0x400200a0
 8002920:	400200b8 	.word	0x400200b8
 8002924:	40020410 	.word	0x40020410
 8002928:	40020428 	.word	0x40020428
 800292c:	40020440 	.word	0x40020440
 8002930:	40020458 	.word	0x40020458
 8002934:	40020470 	.word	0x40020470
 8002938:	40020488 	.word	0x40020488
 800293c:	400204a0 	.word	0x400204a0
 8002940:	400204b8 	.word	0x400204b8
 8002944:	2300      	movs	r3, #0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d032      	beq.n	80029b0 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f002 fa8a 	bl	8004e64 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b80      	cmp	r3, #128	@ 0x80
 8002956:	d102      	bne.n	800295e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002972:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d010      	beq.n	800299e <HAL_DMA_Init+0x6f2>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b08      	cmp	r3, #8
 8002982:	d80c      	bhi.n	800299e <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f002 fb07 	bl	8004f98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	e008      	b.n	80029b0 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e226      	b.n	8002e32 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_DMA_Start_IT+0x2a>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e21f      	b.n	8002e32 <HAL_DMA_Start_IT+0x46a>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	f040 820a 	bne.w	8002e1c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a68      	ldr	r2, [pc, #416]	@ (8002bbc <HAL_DMA_Start_IT+0x1f4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d04a      	beq.n	8002ab6 <HAL_DMA_Start_IT+0xee>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a66      	ldr	r2, [pc, #408]	@ (8002bc0 <HAL_DMA_Start_IT+0x1f8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d045      	beq.n	8002ab6 <HAL_DMA_Start_IT+0xee>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a65      	ldr	r2, [pc, #404]	@ (8002bc4 <HAL_DMA_Start_IT+0x1fc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d040      	beq.n	8002ab6 <HAL_DMA_Start_IT+0xee>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a63      	ldr	r2, [pc, #396]	@ (8002bc8 <HAL_DMA_Start_IT+0x200>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d03b      	beq.n	8002ab6 <HAL_DMA_Start_IT+0xee>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a62      	ldr	r2, [pc, #392]	@ (8002bcc <HAL_DMA_Start_IT+0x204>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d036      	beq.n	8002ab6 <HAL_DMA_Start_IT+0xee>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a60      	ldr	r2, [pc, #384]	@ (8002bd0 <HAL_DMA_Start_IT+0x208>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d031      	beq.n	8002ab6 <HAL_DMA_Start_IT+0xee>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a5f      	ldr	r2, [pc, #380]	@ (8002bd4 <HAL_DMA_Start_IT+0x20c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d02c      	beq.n	8002ab6 <HAL_DMA_Start_IT+0xee>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a5d      	ldr	r2, [pc, #372]	@ (8002bd8 <HAL_DMA_Start_IT+0x210>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d027      	beq.n	8002ab6 <HAL_DMA_Start_IT+0xee>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a5c      	ldr	r2, [pc, #368]	@ (8002bdc <HAL_DMA_Start_IT+0x214>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d022      	beq.n	8002ab6 <HAL_DMA_Start_IT+0xee>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a5a      	ldr	r2, [pc, #360]	@ (8002be0 <HAL_DMA_Start_IT+0x218>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d01d      	beq.n	8002ab6 <HAL_DMA_Start_IT+0xee>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a59      	ldr	r2, [pc, #356]	@ (8002be4 <HAL_DMA_Start_IT+0x21c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d018      	beq.n	8002ab6 <HAL_DMA_Start_IT+0xee>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a57      	ldr	r2, [pc, #348]	@ (8002be8 <HAL_DMA_Start_IT+0x220>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d013      	beq.n	8002ab6 <HAL_DMA_Start_IT+0xee>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a56      	ldr	r2, [pc, #344]	@ (8002bec <HAL_DMA_Start_IT+0x224>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00e      	beq.n	8002ab6 <HAL_DMA_Start_IT+0xee>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a54      	ldr	r2, [pc, #336]	@ (8002bf0 <HAL_DMA_Start_IT+0x228>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d009      	beq.n	8002ab6 <HAL_DMA_Start_IT+0xee>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a53      	ldr	r2, [pc, #332]	@ (8002bf4 <HAL_DMA_Start_IT+0x22c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d004      	beq.n	8002ab6 <HAL_DMA_Start_IT+0xee>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a51      	ldr	r2, [pc, #324]	@ (8002bf8 <HAL_DMA_Start_IT+0x230>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d108      	bne.n	8002ac8 <HAL_DMA_Start_IT+0x100>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0201 	bic.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	e007      	b.n	8002ad8 <HAL_DMA_Start_IT+0x110>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0201 	bic.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f001 feae 	bl	8004840 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a34      	ldr	r2, [pc, #208]	@ (8002bbc <HAL_DMA_Start_IT+0x1f4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d04a      	beq.n	8002b84 <HAL_DMA_Start_IT+0x1bc>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a33      	ldr	r2, [pc, #204]	@ (8002bc0 <HAL_DMA_Start_IT+0x1f8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d045      	beq.n	8002b84 <HAL_DMA_Start_IT+0x1bc>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a31      	ldr	r2, [pc, #196]	@ (8002bc4 <HAL_DMA_Start_IT+0x1fc>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d040      	beq.n	8002b84 <HAL_DMA_Start_IT+0x1bc>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a30      	ldr	r2, [pc, #192]	@ (8002bc8 <HAL_DMA_Start_IT+0x200>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d03b      	beq.n	8002b84 <HAL_DMA_Start_IT+0x1bc>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a2e      	ldr	r2, [pc, #184]	@ (8002bcc <HAL_DMA_Start_IT+0x204>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d036      	beq.n	8002b84 <HAL_DMA_Start_IT+0x1bc>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2d      	ldr	r2, [pc, #180]	@ (8002bd0 <HAL_DMA_Start_IT+0x208>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d031      	beq.n	8002b84 <HAL_DMA_Start_IT+0x1bc>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a2b      	ldr	r2, [pc, #172]	@ (8002bd4 <HAL_DMA_Start_IT+0x20c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d02c      	beq.n	8002b84 <HAL_DMA_Start_IT+0x1bc>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8002bd8 <HAL_DMA_Start_IT+0x210>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d027      	beq.n	8002b84 <HAL_DMA_Start_IT+0x1bc>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a28      	ldr	r2, [pc, #160]	@ (8002bdc <HAL_DMA_Start_IT+0x214>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d022      	beq.n	8002b84 <HAL_DMA_Start_IT+0x1bc>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a27      	ldr	r2, [pc, #156]	@ (8002be0 <HAL_DMA_Start_IT+0x218>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d01d      	beq.n	8002b84 <HAL_DMA_Start_IT+0x1bc>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a25      	ldr	r2, [pc, #148]	@ (8002be4 <HAL_DMA_Start_IT+0x21c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d018      	beq.n	8002b84 <HAL_DMA_Start_IT+0x1bc>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a24      	ldr	r2, [pc, #144]	@ (8002be8 <HAL_DMA_Start_IT+0x220>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d013      	beq.n	8002b84 <HAL_DMA_Start_IT+0x1bc>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a22      	ldr	r2, [pc, #136]	@ (8002bec <HAL_DMA_Start_IT+0x224>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00e      	beq.n	8002b84 <HAL_DMA_Start_IT+0x1bc>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a21      	ldr	r2, [pc, #132]	@ (8002bf0 <HAL_DMA_Start_IT+0x228>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d009      	beq.n	8002b84 <HAL_DMA_Start_IT+0x1bc>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf4 <HAL_DMA_Start_IT+0x22c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d004      	beq.n	8002b84 <HAL_DMA_Start_IT+0x1bc>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf8 <HAL_DMA_Start_IT+0x230>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d101      	bne.n	8002b88 <HAL_DMA_Start_IT+0x1c0>
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <HAL_DMA_Start_IT+0x1c2>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d036      	beq.n	8002bfc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f023 021e 	bic.w	r2, r3, #30
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0216 	orr.w	r2, r2, #22
 8002ba0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d03e      	beq.n	8002c28 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0208 	orr.w	r2, r2, #8
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	e035      	b.n	8002c28 <HAL_DMA_Start_IT+0x260>
 8002bbc:	40020010 	.word	0x40020010
 8002bc0:	40020028 	.word	0x40020028
 8002bc4:	40020040 	.word	0x40020040
 8002bc8:	40020058 	.word	0x40020058
 8002bcc:	40020070 	.word	0x40020070
 8002bd0:	40020088 	.word	0x40020088
 8002bd4:	400200a0 	.word	0x400200a0
 8002bd8:	400200b8 	.word	0x400200b8
 8002bdc:	40020410 	.word	0x40020410
 8002be0:	40020428 	.word	0x40020428
 8002be4:	40020440 	.word	0x40020440
 8002be8:	40020458 	.word	0x40020458
 8002bec:	40020470 	.word	0x40020470
 8002bf0:	40020488 	.word	0x40020488
 8002bf4:	400204a0 	.word	0x400204a0
 8002bf8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 020e 	bic.w	r2, r3, #14
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 020a 	orr.w	r2, r2, #10
 8002c0e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0204 	orr.w	r2, r2, #4
 8002c26:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a83      	ldr	r2, [pc, #524]	@ (8002e3c <HAL_DMA_Start_IT+0x474>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d072      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a82      	ldr	r2, [pc, #520]	@ (8002e40 <HAL_DMA_Start_IT+0x478>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d06d      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a80      	ldr	r2, [pc, #512]	@ (8002e44 <HAL_DMA_Start_IT+0x47c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d068      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a7f      	ldr	r2, [pc, #508]	@ (8002e48 <HAL_DMA_Start_IT+0x480>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d063      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a7d      	ldr	r2, [pc, #500]	@ (8002e4c <HAL_DMA_Start_IT+0x484>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d05e      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a7c      	ldr	r2, [pc, #496]	@ (8002e50 <HAL_DMA_Start_IT+0x488>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d059      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a7a      	ldr	r2, [pc, #488]	@ (8002e54 <HAL_DMA_Start_IT+0x48c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d054      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a79      	ldr	r2, [pc, #484]	@ (8002e58 <HAL_DMA_Start_IT+0x490>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d04f      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a77      	ldr	r2, [pc, #476]	@ (8002e5c <HAL_DMA_Start_IT+0x494>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d04a      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a76      	ldr	r2, [pc, #472]	@ (8002e60 <HAL_DMA_Start_IT+0x498>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d045      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a74      	ldr	r2, [pc, #464]	@ (8002e64 <HAL_DMA_Start_IT+0x49c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d040      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a73      	ldr	r2, [pc, #460]	@ (8002e68 <HAL_DMA_Start_IT+0x4a0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d03b      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a71      	ldr	r2, [pc, #452]	@ (8002e6c <HAL_DMA_Start_IT+0x4a4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d036      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a70      	ldr	r2, [pc, #448]	@ (8002e70 <HAL_DMA_Start_IT+0x4a8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d031      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a6e      	ldr	r2, [pc, #440]	@ (8002e74 <HAL_DMA_Start_IT+0x4ac>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d02c      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a6d      	ldr	r2, [pc, #436]	@ (8002e78 <HAL_DMA_Start_IT+0x4b0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d027      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a6b      	ldr	r2, [pc, #428]	@ (8002e7c <HAL_DMA_Start_IT+0x4b4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d022      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a6a      	ldr	r2, [pc, #424]	@ (8002e80 <HAL_DMA_Start_IT+0x4b8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d01d      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a68      	ldr	r2, [pc, #416]	@ (8002e84 <HAL_DMA_Start_IT+0x4bc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d018      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a67      	ldr	r2, [pc, #412]	@ (8002e88 <HAL_DMA_Start_IT+0x4c0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d013      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a65      	ldr	r2, [pc, #404]	@ (8002e8c <HAL_DMA_Start_IT+0x4c4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00e      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a64      	ldr	r2, [pc, #400]	@ (8002e90 <HAL_DMA_Start_IT+0x4c8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d009      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a62      	ldr	r2, [pc, #392]	@ (8002e94 <HAL_DMA_Start_IT+0x4cc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d004      	beq.n	8002d18 <HAL_DMA_Start_IT+0x350>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a61      	ldr	r2, [pc, #388]	@ (8002e98 <HAL_DMA_Start_IT+0x4d0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d101      	bne.n	8002d1c <HAL_DMA_Start_IT+0x354>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_DMA_Start_IT+0x356>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01a      	beq.n	8002d58 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d007      	beq.n	8002d40 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d3e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d007      	beq.n	8002d58 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d56:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a37      	ldr	r2, [pc, #220]	@ (8002e3c <HAL_DMA_Start_IT+0x474>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d04a      	beq.n	8002df8 <HAL_DMA_Start_IT+0x430>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a36      	ldr	r2, [pc, #216]	@ (8002e40 <HAL_DMA_Start_IT+0x478>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d045      	beq.n	8002df8 <HAL_DMA_Start_IT+0x430>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a34      	ldr	r2, [pc, #208]	@ (8002e44 <HAL_DMA_Start_IT+0x47c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d040      	beq.n	8002df8 <HAL_DMA_Start_IT+0x430>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a33      	ldr	r2, [pc, #204]	@ (8002e48 <HAL_DMA_Start_IT+0x480>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d03b      	beq.n	8002df8 <HAL_DMA_Start_IT+0x430>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a31      	ldr	r2, [pc, #196]	@ (8002e4c <HAL_DMA_Start_IT+0x484>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d036      	beq.n	8002df8 <HAL_DMA_Start_IT+0x430>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a30      	ldr	r2, [pc, #192]	@ (8002e50 <HAL_DMA_Start_IT+0x488>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d031      	beq.n	8002df8 <HAL_DMA_Start_IT+0x430>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a2e      	ldr	r2, [pc, #184]	@ (8002e54 <HAL_DMA_Start_IT+0x48c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d02c      	beq.n	8002df8 <HAL_DMA_Start_IT+0x430>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a2d      	ldr	r2, [pc, #180]	@ (8002e58 <HAL_DMA_Start_IT+0x490>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d027      	beq.n	8002df8 <HAL_DMA_Start_IT+0x430>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a2b      	ldr	r2, [pc, #172]	@ (8002e5c <HAL_DMA_Start_IT+0x494>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d022      	beq.n	8002df8 <HAL_DMA_Start_IT+0x430>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a2a      	ldr	r2, [pc, #168]	@ (8002e60 <HAL_DMA_Start_IT+0x498>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d01d      	beq.n	8002df8 <HAL_DMA_Start_IT+0x430>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a28      	ldr	r2, [pc, #160]	@ (8002e64 <HAL_DMA_Start_IT+0x49c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d018      	beq.n	8002df8 <HAL_DMA_Start_IT+0x430>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a27      	ldr	r2, [pc, #156]	@ (8002e68 <HAL_DMA_Start_IT+0x4a0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d013      	beq.n	8002df8 <HAL_DMA_Start_IT+0x430>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a25      	ldr	r2, [pc, #148]	@ (8002e6c <HAL_DMA_Start_IT+0x4a4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00e      	beq.n	8002df8 <HAL_DMA_Start_IT+0x430>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a24      	ldr	r2, [pc, #144]	@ (8002e70 <HAL_DMA_Start_IT+0x4a8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d009      	beq.n	8002df8 <HAL_DMA_Start_IT+0x430>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a22      	ldr	r2, [pc, #136]	@ (8002e74 <HAL_DMA_Start_IT+0x4ac>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d004      	beq.n	8002df8 <HAL_DMA_Start_IT+0x430>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a21      	ldr	r2, [pc, #132]	@ (8002e78 <HAL_DMA_Start_IT+0x4b0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d108      	bne.n	8002e0a <HAL_DMA_Start_IT+0x442>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	e012      	b.n	8002e30 <HAL_DMA_Start_IT+0x468>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0201 	orr.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e009      	b.n	8002e30 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e22:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40020010 	.word	0x40020010
 8002e40:	40020028 	.word	0x40020028
 8002e44:	40020040 	.word	0x40020040
 8002e48:	40020058 	.word	0x40020058
 8002e4c:	40020070 	.word	0x40020070
 8002e50:	40020088 	.word	0x40020088
 8002e54:	400200a0 	.word	0x400200a0
 8002e58:	400200b8 	.word	0x400200b8
 8002e5c:	40020410 	.word	0x40020410
 8002e60:	40020428 	.word	0x40020428
 8002e64:	40020440 	.word	0x40020440
 8002e68:	40020458 	.word	0x40020458
 8002e6c:	40020470 	.word	0x40020470
 8002e70:	40020488 	.word	0x40020488
 8002e74:	400204a0 	.word	0x400204a0
 8002e78:	400204b8 	.word	0x400204b8
 8002e7c:	58025408 	.word	0x58025408
 8002e80:	5802541c 	.word	0x5802541c
 8002e84:	58025430 	.word	0x58025430
 8002e88:	58025444 	.word	0x58025444
 8002e8c:	58025458 	.word	0x58025458
 8002e90:	5802546c 	.word	0x5802546c
 8002e94:	58025480 	.word	0x58025480
 8002e98:	58025494 	.word	0x58025494

08002e9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002ea4:	f7ff f84a 	bl	8001f3c <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e2dc      	b.n	800346e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d008      	beq.n	8002ed2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2280      	movs	r2, #128	@ 0x80
 8002ec4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e2cd      	b.n	800346e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a76      	ldr	r2, [pc, #472]	@ (80030b0 <HAL_DMA_Abort+0x214>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d04a      	beq.n	8002f72 <HAL_DMA_Abort+0xd6>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a74      	ldr	r2, [pc, #464]	@ (80030b4 <HAL_DMA_Abort+0x218>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d045      	beq.n	8002f72 <HAL_DMA_Abort+0xd6>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a73      	ldr	r2, [pc, #460]	@ (80030b8 <HAL_DMA_Abort+0x21c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d040      	beq.n	8002f72 <HAL_DMA_Abort+0xd6>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a71      	ldr	r2, [pc, #452]	@ (80030bc <HAL_DMA_Abort+0x220>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d03b      	beq.n	8002f72 <HAL_DMA_Abort+0xd6>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a70      	ldr	r2, [pc, #448]	@ (80030c0 <HAL_DMA_Abort+0x224>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d036      	beq.n	8002f72 <HAL_DMA_Abort+0xd6>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a6e      	ldr	r2, [pc, #440]	@ (80030c4 <HAL_DMA_Abort+0x228>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d031      	beq.n	8002f72 <HAL_DMA_Abort+0xd6>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6d      	ldr	r2, [pc, #436]	@ (80030c8 <HAL_DMA_Abort+0x22c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d02c      	beq.n	8002f72 <HAL_DMA_Abort+0xd6>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a6b      	ldr	r2, [pc, #428]	@ (80030cc <HAL_DMA_Abort+0x230>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d027      	beq.n	8002f72 <HAL_DMA_Abort+0xd6>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a6a      	ldr	r2, [pc, #424]	@ (80030d0 <HAL_DMA_Abort+0x234>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d022      	beq.n	8002f72 <HAL_DMA_Abort+0xd6>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a68      	ldr	r2, [pc, #416]	@ (80030d4 <HAL_DMA_Abort+0x238>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01d      	beq.n	8002f72 <HAL_DMA_Abort+0xd6>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a67      	ldr	r2, [pc, #412]	@ (80030d8 <HAL_DMA_Abort+0x23c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d018      	beq.n	8002f72 <HAL_DMA_Abort+0xd6>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a65      	ldr	r2, [pc, #404]	@ (80030dc <HAL_DMA_Abort+0x240>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <HAL_DMA_Abort+0xd6>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a64      	ldr	r2, [pc, #400]	@ (80030e0 <HAL_DMA_Abort+0x244>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00e      	beq.n	8002f72 <HAL_DMA_Abort+0xd6>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a62      	ldr	r2, [pc, #392]	@ (80030e4 <HAL_DMA_Abort+0x248>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d009      	beq.n	8002f72 <HAL_DMA_Abort+0xd6>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a61      	ldr	r2, [pc, #388]	@ (80030e8 <HAL_DMA_Abort+0x24c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d004      	beq.n	8002f72 <HAL_DMA_Abort+0xd6>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a5f      	ldr	r2, [pc, #380]	@ (80030ec <HAL_DMA_Abort+0x250>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <HAL_DMA_Abort+0xda>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <HAL_DMA_Abort+0xdc>
 8002f76:	2300      	movs	r3, #0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d013      	beq.n	8002fa4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 021e 	bic.w	r2, r2, #30
 8002f8a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f9a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	e00a      	b.n	8002fba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 020e 	bic.w	r2, r2, #14
 8002fb2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a3c      	ldr	r2, [pc, #240]	@ (80030b0 <HAL_DMA_Abort+0x214>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d072      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a3a      	ldr	r2, [pc, #232]	@ (80030b4 <HAL_DMA_Abort+0x218>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d06d      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a39      	ldr	r2, [pc, #228]	@ (80030b8 <HAL_DMA_Abort+0x21c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d068      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a37      	ldr	r2, [pc, #220]	@ (80030bc <HAL_DMA_Abort+0x220>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d063      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a36      	ldr	r2, [pc, #216]	@ (80030c0 <HAL_DMA_Abort+0x224>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d05e      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a34      	ldr	r2, [pc, #208]	@ (80030c4 <HAL_DMA_Abort+0x228>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d059      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a33      	ldr	r2, [pc, #204]	@ (80030c8 <HAL_DMA_Abort+0x22c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d054      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a31      	ldr	r2, [pc, #196]	@ (80030cc <HAL_DMA_Abort+0x230>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d04f      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a30      	ldr	r2, [pc, #192]	@ (80030d0 <HAL_DMA_Abort+0x234>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d04a      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a2e      	ldr	r2, [pc, #184]	@ (80030d4 <HAL_DMA_Abort+0x238>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d045      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a2d      	ldr	r2, [pc, #180]	@ (80030d8 <HAL_DMA_Abort+0x23c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d040      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a2b      	ldr	r2, [pc, #172]	@ (80030dc <HAL_DMA_Abort+0x240>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d03b      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a2a      	ldr	r2, [pc, #168]	@ (80030e0 <HAL_DMA_Abort+0x244>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d036      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a28      	ldr	r2, [pc, #160]	@ (80030e4 <HAL_DMA_Abort+0x248>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d031      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a27      	ldr	r2, [pc, #156]	@ (80030e8 <HAL_DMA_Abort+0x24c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d02c      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a25      	ldr	r2, [pc, #148]	@ (80030ec <HAL_DMA_Abort+0x250>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d027      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a24      	ldr	r2, [pc, #144]	@ (80030f0 <HAL_DMA_Abort+0x254>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d022      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a22      	ldr	r2, [pc, #136]	@ (80030f4 <HAL_DMA_Abort+0x258>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d01d      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a21      	ldr	r2, [pc, #132]	@ (80030f8 <HAL_DMA_Abort+0x25c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d018      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1f      	ldr	r2, [pc, #124]	@ (80030fc <HAL_DMA_Abort+0x260>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1e      	ldr	r2, [pc, #120]	@ (8003100 <HAL_DMA_Abort+0x264>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00e      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a1c      	ldr	r2, [pc, #112]	@ (8003104 <HAL_DMA_Abort+0x268>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d009      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a1b      	ldr	r2, [pc, #108]	@ (8003108 <HAL_DMA_Abort+0x26c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d004      	beq.n	80030aa <HAL_DMA_Abort+0x20e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a19      	ldr	r2, [pc, #100]	@ (800310c <HAL_DMA_Abort+0x270>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d132      	bne.n	8003110 <HAL_DMA_Abort+0x274>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e031      	b.n	8003112 <HAL_DMA_Abort+0x276>
 80030ae:	bf00      	nop
 80030b0:	40020010 	.word	0x40020010
 80030b4:	40020028 	.word	0x40020028
 80030b8:	40020040 	.word	0x40020040
 80030bc:	40020058 	.word	0x40020058
 80030c0:	40020070 	.word	0x40020070
 80030c4:	40020088 	.word	0x40020088
 80030c8:	400200a0 	.word	0x400200a0
 80030cc:	400200b8 	.word	0x400200b8
 80030d0:	40020410 	.word	0x40020410
 80030d4:	40020428 	.word	0x40020428
 80030d8:	40020440 	.word	0x40020440
 80030dc:	40020458 	.word	0x40020458
 80030e0:	40020470 	.word	0x40020470
 80030e4:	40020488 	.word	0x40020488
 80030e8:	400204a0 	.word	0x400204a0
 80030ec:	400204b8 	.word	0x400204b8
 80030f0:	58025408 	.word	0x58025408
 80030f4:	5802541c 	.word	0x5802541c
 80030f8:	58025430 	.word	0x58025430
 80030fc:	58025444 	.word	0x58025444
 8003100:	58025458 	.word	0x58025458
 8003104:	5802546c 	.word	0x5802546c
 8003108:	58025480 	.word	0x58025480
 800310c:	58025494 	.word	0x58025494
 8003110:	2300      	movs	r3, #0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003120:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003124:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6d      	ldr	r2, [pc, #436]	@ (80032e0 <HAL_DMA_Abort+0x444>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d04a      	beq.n	80031c6 <HAL_DMA_Abort+0x32a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a6b      	ldr	r2, [pc, #428]	@ (80032e4 <HAL_DMA_Abort+0x448>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d045      	beq.n	80031c6 <HAL_DMA_Abort+0x32a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a6a      	ldr	r2, [pc, #424]	@ (80032e8 <HAL_DMA_Abort+0x44c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d040      	beq.n	80031c6 <HAL_DMA_Abort+0x32a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a68      	ldr	r2, [pc, #416]	@ (80032ec <HAL_DMA_Abort+0x450>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d03b      	beq.n	80031c6 <HAL_DMA_Abort+0x32a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a67      	ldr	r2, [pc, #412]	@ (80032f0 <HAL_DMA_Abort+0x454>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d036      	beq.n	80031c6 <HAL_DMA_Abort+0x32a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a65      	ldr	r2, [pc, #404]	@ (80032f4 <HAL_DMA_Abort+0x458>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d031      	beq.n	80031c6 <HAL_DMA_Abort+0x32a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a64      	ldr	r2, [pc, #400]	@ (80032f8 <HAL_DMA_Abort+0x45c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d02c      	beq.n	80031c6 <HAL_DMA_Abort+0x32a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a62      	ldr	r2, [pc, #392]	@ (80032fc <HAL_DMA_Abort+0x460>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d027      	beq.n	80031c6 <HAL_DMA_Abort+0x32a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a61      	ldr	r2, [pc, #388]	@ (8003300 <HAL_DMA_Abort+0x464>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d022      	beq.n	80031c6 <HAL_DMA_Abort+0x32a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a5f      	ldr	r2, [pc, #380]	@ (8003304 <HAL_DMA_Abort+0x468>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d01d      	beq.n	80031c6 <HAL_DMA_Abort+0x32a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a5e      	ldr	r2, [pc, #376]	@ (8003308 <HAL_DMA_Abort+0x46c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d018      	beq.n	80031c6 <HAL_DMA_Abort+0x32a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a5c      	ldr	r2, [pc, #368]	@ (800330c <HAL_DMA_Abort+0x470>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <HAL_DMA_Abort+0x32a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003310 <HAL_DMA_Abort+0x474>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00e      	beq.n	80031c6 <HAL_DMA_Abort+0x32a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a59      	ldr	r2, [pc, #356]	@ (8003314 <HAL_DMA_Abort+0x478>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d009      	beq.n	80031c6 <HAL_DMA_Abort+0x32a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a58      	ldr	r2, [pc, #352]	@ (8003318 <HAL_DMA_Abort+0x47c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d004      	beq.n	80031c6 <HAL_DMA_Abort+0x32a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a56      	ldr	r2, [pc, #344]	@ (800331c <HAL_DMA_Abort+0x480>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d108      	bne.n	80031d8 <HAL_DMA_Abort+0x33c>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	e007      	b.n	80031e8 <HAL_DMA_Abort+0x34c>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0201 	bic.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031e8:	e013      	b.n	8003212 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ea:	f7fe fea7 	bl	8001f3c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b05      	cmp	r3, #5
 80031f6:	d90c      	bls.n	8003212 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2203      	movs	r2, #3
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e12d      	b.n	800346e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1e5      	bne.n	80031ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2f      	ldr	r2, [pc, #188]	@ (80032e0 <HAL_DMA_Abort+0x444>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d04a      	beq.n	80032be <HAL_DMA_Abort+0x422>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a2d      	ldr	r2, [pc, #180]	@ (80032e4 <HAL_DMA_Abort+0x448>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d045      	beq.n	80032be <HAL_DMA_Abort+0x422>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a2c      	ldr	r2, [pc, #176]	@ (80032e8 <HAL_DMA_Abort+0x44c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d040      	beq.n	80032be <HAL_DMA_Abort+0x422>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a2a      	ldr	r2, [pc, #168]	@ (80032ec <HAL_DMA_Abort+0x450>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d03b      	beq.n	80032be <HAL_DMA_Abort+0x422>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a29      	ldr	r2, [pc, #164]	@ (80032f0 <HAL_DMA_Abort+0x454>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d036      	beq.n	80032be <HAL_DMA_Abort+0x422>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a27      	ldr	r2, [pc, #156]	@ (80032f4 <HAL_DMA_Abort+0x458>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d031      	beq.n	80032be <HAL_DMA_Abort+0x422>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a26      	ldr	r2, [pc, #152]	@ (80032f8 <HAL_DMA_Abort+0x45c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d02c      	beq.n	80032be <HAL_DMA_Abort+0x422>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a24      	ldr	r2, [pc, #144]	@ (80032fc <HAL_DMA_Abort+0x460>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d027      	beq.n	80032be <HAL_DMA_Abort+0x422>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a23      	ldr	r2, [pc, #140]	@ (8003300 <HAL_DMA_Abort+0x464>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d022      	beq.n	80032be <HAL_DMA_Abort+0x422>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a21      	ldr	r2, [pc, #132]	@ (8003304 <HAL_DMA_Abort+0x468>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01d      	beq.n	80032be <HAL_DMA_Abort+0x422>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a20      	ldr	r2, [pc, #128]	@ (8003308 <HAL_DMA_Abort+0x46c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d018      	beq.n	80032be <HAL_DMA_Abort+0x422>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1e      	ldr	r2, [pc, #120]	@ (800330c <HAL_DMA_Abort+0x470>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d013      	beq.n	80032be <HAL_DMA_Abort+0x422>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1d      	ldr	r2, [pc, #116]	@ (8003310 <HAL_DMA_Abort+0x474>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d00e      	beq.n	80032be <HAL_DMA_Abort+0x422>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003314 <HAL_DMA_Abort+0x478>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d009      	beq.n	80032be <HAL_DMA_Abort+0x422>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003318 <HAL_DMA_Abort+0x47c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d004      	beq.n	80032be <HAL_DMA_Abort+0x422>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a18      	ldr	r2, [pc, #96]	@ (800331c <HAL_DMA_Abort+0x480>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d101      	bne.n	80032c2 <HAL_DMA_Abort+0x426>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <HAL_DMA_Abort+0x428>
 80032c2:	2300      	movs	r3, #0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d02b      	beq.n	8003320 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	223f      	movs	r2, #63	@ 0x3f
 80032d8:	409a      	lsls	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	e02a      	b.n	8003336 <HAL_DMA_Abort+0x49a>
 80032e0:	40020010 	.word	0x40020010
 80032e4:	40020028 	.word	0x40020028
 80032e8:	40020040 	.word	0x40020040
 80032ec:	40020058 	.word	0x40020058
 80032f0:	40020070 	.word	0x40020070
 80032f4:	40020088 	.word	0x40020088
 80032f8:	400200a0 	.word	0x400200a0
 80032fc:	400200b8 	.word	0x400200b8
 8003300:	40020410 	.word	0x40020410
 8003304:	40020428 	.word	0x40020428
 8003308:	40020440 	.word	0x40020440
 800330c:	40020458 	.word	0x40020458
 8003310:	40020470 	.word	0x40020470
 8003314:	40020488 	.word	0x40020488
 8003318:	400204a0 	.word	0x400204a0
 800331c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003324:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	2201      	movs	r2, #1
 8003330:	409a      	lsls	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a4f      	ldr	r2, [pc, #316]	@ (8003478 <HAL_DMA_Abort+0x5dc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d072      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a4d      	ldr	r2, [pc, #308]	@ (800347c <HAL_DMA_Abort+0x5e0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d06d      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a4c      	ldr	r2, [pc, #304]	@ (8003480 <HAL_DMA_Abort+0x5e4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d068      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a4a      	ldr	r2, [pc, #296]	@ (8003484 <HAL_DMA_Abort+0x5e8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d063      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a49      	ldr	r2, [pc, #292]	@ (8003488 <HAL_DMA_Abort+0x5ec>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d05e      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a47      	ldr	r2, [pc, #284]	@ (800348c <HAL_DMA_Abort+0x5f0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d059      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a46      	ldr	r2, [pc, #280]	@ (8003490 <HAL_DMA_Abort+0x5f4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d054      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a44      	ldr	r2, [pc, #272]	@ (8003494 <HAL_DMA_Abort+0x5f8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d04f      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a43      	ldr	r2, [pc, #268]	@ (8003498 <HAL_DMA_Abort+0x5fc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d04a      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a41      	ldr	r2, [pc, #260]	@ (800349c <HAL_DMA_Abort+0x600>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d045      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a40      	ldr	r2, [pc, #256]	@ (80034a0 <HAL_DMA_Abort+0x604>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d040      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a3e      	ldr	r2, [pc, #248]	@ (80034a4 <HAL_DMA_Abort+0x608>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d03b      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a3d      	ldr	r2, [pc, #244]	@ (80034a8 <HAL_DMA_Abort+0x60c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d036      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a3b      	ldr	r2, [pc, #236]	@ (80034ac <HAL_DMA_Abort+0x610>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d031      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a3a      	ldr	r2, [pc, #232]	@ (80034b0 <HAL_DMA_Abort+0x614>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d02c      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a38      	ldr	r2, [pc, #224]	@ (80034b4 <HAL_DMA_Abort+0x618>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d027      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a37      	ldr	r2, [pc, #220]	@ (80034b8 <HAL_DMA_Abort+0x61c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d022      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a35      	ldr	r2, [pc, #212]	@ (80034bc <HAL_DMA_Abort+0x620>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d01d      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a34      	ldr	r2, [pc, #208]	@ (80034c0 <HAL_DMA_Abort+0x624>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d018      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a32      	ldr	r2, [pc, #200]	@ (80034c4 <HAL_DMA_Abort+0x628>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a31      	ldr	r2, [pc, #196]	@ (80034c8 <HAL_DMA_Abort+0x62c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d00e      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2f      	ldr	r2, [pc, #188]	@ (80034cc <HAL_DMA_Abort+0x630>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d009      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a2e      	ldr	r2, [pc, #184]	@ (80034d0 <HAL_DMA_Abort+0x634>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d004      	beq.n	8003426 <HAL_DMA_Abort+0x58a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a2c      	ldr	r2, [pc, #176]	@ (80034d4 <HAL_DMA_Abort+0x638>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d101      	bne.n	800342a <HAL_DMA_Abort+0x58e>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <HAL_DMA_Abort+0x590>
 800342a:	2300      	movs	r3, #0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d015      	beq.n	800345c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003438:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00c      	beq.n	800345c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800344c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003450:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800345a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40020010 	.word	0x40020010
 800347c:	40020028 	.word	0x40020028
 8003480:	40020040 	.word	0x40020040
 8003484:	40020058 	.word	0x40020058
 8003488:	40020070 	.word	0x40020070
 800348c:	40020088 	.word	0x40020088
 8003490:	400200a0 	.word	0x400200a0
 8003494:	400200b8 	.word	0x400200b8
 8003498:	40020410 	.word	0x40020410
 800349c:	40020428 	.word	0x40020428
 80034a0:	40020440 	.word	0x40020440
 80034a4:	40020458 	.word	0x40020458
 80034a8:	40020470 	.word	0x40020470
 80034ac:	40020488 	.word	0x40020488
 80034b0:	400204a0 	.word	0x400204a0
 80034b4:	400204b8 	.word	0x400204b8
 80034b8:	58025408 	.word	0x58025408
 80034bc:	5802541c 	.word	0x5802541c
 80034c0:	58025430 	.word	0x58025430
 80034c4:	58025444 	.word	0x58025444
 80034c8:	58025458 	.word	0x58025458
 80034cc:	5802546c 	.word	0x5802546c
 80034d0:	58025480 	.word	0x58025480
 80034d4:	58025494 	.word	0x58025494

080034d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e237      	b.n	800395a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d004      	beq.n	8003500 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2280      	movs	r2, #128	@ 0x80
 80034fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e22c      	b.n	800395a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a5c      	ldr	r2, [pc, #368]	@ (8003678 <HAL_DMA_Abort_IT+0x1a0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d04a      	beq.n	80035a0 <HAL_DMA_Abort_IT+0xc8>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a5b      	ldr	r2, [pc, #364]	@ (800367c <HAL_DMA_Abort_IT+0x1a4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d045      	beq.n	80035a0 <HAL_DMA_Abort_IT+0xc8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a59      	ldr	r2, [pc, #356]	@ (8003680 <HAL_DMA_Abort_IT+0x1a8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d040      	beq.n	80035a0 <HAL_DMA_Abort_IT+0xc8>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a58      	ldr	r2, [pc, #352]	@ (8003684 <HAL_DMA_Abort_IT+0x1ac>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d03b      	beq.n	80035a0 <HAL_DMA_Abort_IT+0xc8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a56      	ldr	r2, [pc, #344]	@ (8003688 <HAL_DMA_Abort_IT+0x1b0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d036      	beq.n	80035a0 <HAL_DMA_Abort_IT+0xc8>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a55      	ldr	r2, [pc, #340]	@ (800368c <HAL_DMA_Abort_IT+0x1b4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d031      	beq.n	80035a0 <HAL_DMA_Abort_IT+0xc8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a53      	ldr	r2, [pc, #332]	@ (8003690 <HAL_DMA_Abort_IT+0x1b8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d02c      	beq.n	80035a0 <HAL_DMA_Abort_IT+0xc8>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a52      	ldr	r2, [pc, #328]	@ (8003694 <HAL_DMA_Abort_IT+0x1bc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d027      	beq.n	80035a0 <HAL_DMA_Abort_IT+0xc8>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a50      	ldr	r2, [pc, #320]	@ (8003698 <HAL_DMA_Abort_IT+0x1c0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d022      	beq.n	80035a0 <HAL_DMA_Abort_IT+0xc8>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a4f      	ldr	r2, [pc, #316]	@ (800369c <HAL_DMA_Abort_IT+0x1c4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d01d      	beq.n	80035a0 <HAL_DMA_Abort_IT+0xc8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a4d      	ldr	r2, [pc, #308]	@ (80036a0 <HAL_DMA_Abort_IT+0x1c8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d018      	beq.n	80035a0 <HAL_DMA_Abort_IT+0xc8>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a4c      	ldr	r2, [pc, #304]	@ (80036a4 <HAL_DMA_Abort_IT+0x1cc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d013      	beq.n	80035a0 <HAL_DMA_Abort_IT+0xc8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a4a      	ldr	r2, [pc, #296]	@ (80036a8 <HAL_DMA_Abort_IT+0x1d0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00e      	beq.n	80035a0 <HAL_DMA_Abort_IT+0xc8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a49      	ldr	r2, [pc, #292]	@ (80036ac <HAL_DMA_Abort_IT+0x1d4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d009      	beq.n	80035a0 <HAL_DMA_Abort_IT+0xc8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a47      	ldr	r2, [pc, #284]	@ (80036b0 <HAL_DMA_Abort_IT+0x1d8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d004      	beq.n	80035a0 <HAL_DMA_Abort_IT+0xc8>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a46      	ldr	r2, [pc, #280]	@ (80036b4 <HAL_DMA_Abort_IT+0x1dc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d101      	bne.n	80035a4 <HAL_DMA_Abort_IT+0xcc>
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <HAL_DMA_Abort_IT+0xce>
 80035a4:	2300      	movs	r3, #0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8086 	beq.w	80036b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2204      	movs	r2, #4
 80035b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a2f      	ldr	r2, [pc, #188]	@ (8003678 <HAL_DMA_Abort_IT+0x1a0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d04a      	beq.n	8003654 <HAL_DMA_Abort_IT+0x17c>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a2e      	ldr	r2, [pc, #184]	@ (800367c <HAL_DMA_Abort_IT+0x1a4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d045      	beq.n	8003654 <HAL_DMA_Abort_IT+0x17c>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003680 <HAL_DMA_Abort_IT+0x1a8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d040      	beq.n	8003654 <HAL_DMA_Abort_IT+0x17c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003684 <HAL_DMA_Abort_IT+0x1ac>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d03b      	beq.n	8003654 <HAL_DMA_Abort_IT+0x17c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a29      	ldr	r2, [pc, #164]	@ (8003688 <HAL_DMA_Abort_IT+0x1b0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d036      	beq.n	8003654 <HAL_DMA_Abort_IT+0x17c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a28      	ldr	r2, [pc, #160]	@ (800368c <HAL_DMA_Abort_IT+0x1b4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d031      	beq.n	8003654 <HAL_DMA_Abort_IT+0x17c>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a26      	ldr	r2, [pc, #152]	@ (8003690 <HAL_DMA_Abort_IT+0x1b8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d02c      	beq.n	8003654 <HAL_DMA_Abort_IT+0x17c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a25      	ldr	r2, [pc, #148]	@ (8003694 <HAL_DMA_Abort_IT+0x1bc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d027      	beq.n	8003654 <HAL_DMA_Abort_IT+0x17c>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a23      	ldr	r2, [pc, #140]	@ (8003698 <HAL_DMA_Abort_IT+0x1c0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d022      	beq.n	8003654 <HAL_DMA_Abort_IT+0x17c>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a22      	ldr	r2, [pc, #136]	@ (800369c <HAL_DMA_Abort_IT+0x1c4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d01d      	beq.n	8003654 <HAL_DMA_Abort_IT+0x17c>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a20      	ldr	r2, [pc, #128]	@ (80036a0 <HAL_DMA_Abort_IT+0x1c8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d018      	beq.n	8003654 <HAL_DMA_Abort_IT+0x17c>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1f      	ldr	r2, [pc, #124]	@ (80036a4 <HAL_DMA_Abort_IT+0x1cc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d013      	beq.n	8003654 <HAL_DMA_Abort_IT+0x17c>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1d      	ldr	r2, [pc, #116]	@ (80036a8 <HAL_DMA_Abort_IT+0x1d0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00e      	beq.n	8003654 <HAL_DMA_Abort_IT+0x17c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1c      	ldr	r2, [pc, #112]	@ (80036ac <HAL_DMA_Abort_IT+0x1d4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d009      	beq.n	8003654 <HAL_DMA_Abort_IT+0x17c>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1a      	ldr	r2, [pc, #104]	@ (80036b0 <HAL_DMA_Abort_IT+0x1d8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d004      	beq.n	8003654 <HAL_DMA_Abort_IT+0x17c>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a19      	ldr	r2, [pc, #100]	@ (80036b4 <HAL_DMA_Abort_IT+0x1dc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d108      	bne.n	8003666 <HAL_DMA_Abort_IT+0x18e>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	e178      	b.n	8003958 <HAL_DMA_Abort_IT+0x480>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0201 	bic.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	e16f      	b.n	8003958 <HAL_DMA_Abort_IT+0x480>
 8003678:	40020010 	.word	0x40020010
 800367c:	40020028 	.word	0x40020028
 8003680:	40020040 	.word	0x40020040
 8003684:	40020058 	.word	0x40020058
 8003688:	40020070 	.word	0x40020070
 800368c:	40020088 	.word	0x40020088
 8003690:	400200a0 	.word	0x400200a0
 8003694:	400200b8 	.word	0x400200b8
 8003698:	40020410 	.word	0x40020410
 800369c:	40020428 	.word	0x40020428
 80036a0:	40020440 	.word	0x40020440
 80036a4:	40020458 	.word	0x40020458
 80036a8:	40020470 	.word	0x40020470
 80036ac:	40020488 	.word	0x40020488
 80036b0:	400204a0 	.word	0x400204a0
 80036b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 020e 	bic.w	r2, r2, #14
 80036c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a6c      	ldr	r2, [pc, #432]	@ (8003880 <HAL_DMA_Abort_IT+0x3a8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d04a      	beq.n	8003768 <HAL_DMA_Abort_IT+0x290>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a6b      	ldr	r2, [pc, #428]	@ (8003884 <HAL_DMA_Abort_IT+0x3ac>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d045      	beq.n	8003768 <HAL_DMA_Abort_IT+0x290>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a69      	ldr	r2, [pc, #420]	@ (8003888 <HAL_DMA_Abort_IT+0x3b0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d040      	beq.n	8003768 <HAL_DMA_Abort_IT+0x290>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a68      	ldr	r2, [pc, #416]	@ (800388c <HAL_DMA_Abort_IT+0x3b4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d03b      	beq.n	8003768 <HAL_DMA_Abort_IT+0x290>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a66      	ldr	r2, [pc, #408]	@ (8003890 <HAL_DMA_Abort_IT+0x3b8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d036      	beq.n	8003768 <HAL_DMA_Abort_IT+0x290>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a65      	ldr	r2, [pc, #404]	@ (8003894 <HAL_DMA_Abort_IT+0x3bc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d031      	beq.n	8003768 <HAL_DMA_Abort_IT+0x290>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a63      	ldr	r2, [pc, #396]	@ (8003898 <HAL_DMA_Abort_IT+0x3c0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d02c      	beq.n	8003768 <HAL_DMA_Abort_IT+0x290>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a62      	ldr	r2, [pc, #392]	@ (800389c <HAL_DMA_Abort_IT+0x3c4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d027      	beq.n	8003768 <HAL_DMA_Abort_IT+0x290>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a60      	ldr	r2, [pc, #384]	@ (80038a0 <HAL_DMA_Abort_IT+0x3c8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d022      	beq.n	8003768 <HAL_DMA_Abort_IT+0x290>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a5f      	ldr	r2, [pc, #380]	@ (80038a4 <HAL_DMA_Abort_IT+0x3cc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d01d      	beq.n	8003768 <HAL_DMA_Abort_IT+0x290>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a5d      	ldr	r2, [pc, #372]	@ (80038a8 <HAL_DMA_Abort_IT+0x3d0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d018      	beq.n	8003768 <HAL_DMA_Abort_IT+0x290>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a5c      	ldr	r2, [pc, #368]	@ (80038ac <HAL_DMA_Abort_IT+0x3d4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d013      	beq.n	8003768 <HAL_DMA_Abort_IT+0x290>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a5a      	ldr	r2, [pc, #360]	@ (80038b0 <HAL_DMA_Abort_IT+0x3d8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00e      	beq.n	8003768 <HAL_DMA_Abort_IT+0x290>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a59      	ldr	r2, [pc, #356]	@ (80038b4 <HAL_DMA_Abort_IT+0x3dc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d009      	beq.n	8003768 <HAL_DMA_Abort_IT+0x290>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a57      	ldr	r2, [pc, #348]	@ (80038b8 <HAL_DMA_Abort_IT+0x3e0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d004      	beq.n	8003768 <HAL_DMA_Abort_IT+0x290>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a56      	ldr	r2, [pc, #344]	@ (80038bc <HAL_DMA_Abort_IT+0x3e4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d108      	bne.n	800377a <HAL_DMA_Abort_IT+0x2a2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e007      	b.n	800378a <HAL_DMA_Abort_IT+0x2b2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a3c      	ldr	r2, [pc, #240]	@ (8003880 <HAL_DMA_Abort_IT+0x3a8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d072      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a3a      	ldr	r2, [pc, #232]	@ (8003884 <HAL_DMA_Abort_IT+0x3ac>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d06d      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a39      	ldr	r2, [pc, #228]	@ (8003888 <HAL_DMA_Abort_IT+0x3b0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d068      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a37      	ldr	r2, [pc, #220]	@ (800388c <HAL_DMA_Abort_IT+0x3b4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d063      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a36      	ldr	r2, [pc, #216]	@ (8003890 <HAL_DMA_Abort_IT+0x3b8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d05e      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a34      	ldr	r2, [pc, #208]	@ (8003894 <HAL_DMA_Abort_IT+0x3bc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d059      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a33      	ldr	r2, [pc, #204]	@ (8003898 <HAL_DMA_Abort_IT+0x3c0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d054      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a31      	ldr	r2, [pc, #196]	@ (800389c <HAL_DMA_Abort_IT+0x3c4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d04f      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a30      	ldr	r2, [pc, #192]	@ (80038a0 <HAL_DMA_Abort_IT+0x3c8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d04a      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a2e      	ldr	r2, [pc, #184]	@ (80038a4 <HAL_DMA_Abort_IT+0x3cc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d045      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a2d      	ldr	r2, [pc, #180]	@ (80038a8 <HAL_DMA_Abort_IT+0x3d0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d040      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a2b      	ldr	r2, [pc, #172]	@ (80038ac <HAL_DMA_Abort_IT+0x3d4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d03b      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a2a      	ldr	r2, [pc, #168]	@ (80038b0 <HAL_DMA_Abort_IT+0x3d8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d036      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a28      	ldr	r2, [pc, #160]	@ (80038b4 <HAL_DMA_Abort_IT+0x3dc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d031      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a27      	ldr	r2, [pc, #156]	@ (80038b8 <HAL_DMA_Abort_IT+0x3e0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d02c      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a25      	ldr	r2, [pc, #148]	@ (80038bc <HAL_DMA_Abort_IT+0x3e4>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d027      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a24      	ldr	r2, [pc, #144]	@ (80038c0 <HAL_DMA_Abort_IT+0x3e8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d022      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a22      	ldr	r2, [pc, #136]	@ (80038c4 <HAL_DMA_Abort_IT+0x3ec>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d01d      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a21      	ldr	r2, [pc, #132]	@ (80038c8 <HAL_DMA_Abort_IT+0x3f0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d018      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1f      	ldr	r2, [pc, #124]	@ (80038cc <HAL_DMA_Abort_IT+0x3f4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d013      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1e      	ldr	r2, [pc, #120]	@ (80038d0 <HAL_DMA_Abort_IT+0x3f8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00e      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1c      	ldr	r2, [pc, #112]	@ (80038d4 <HAL_DMA_Abort_IT+0x3fc>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d009      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1b      	ldr	r2, [pc, #108]	@ (80038d8 <HAL_DMA_Abort_IT+0x400>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d004      	beq.n	800387a <HAL_DMA_Abort_IT+0x3a2>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a19      	ldr	r2, [pc, #100]	@ (80038dc <HAL_DMA_Abort_IT+0x404>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d132      	bne.n	80038e0 <HAL_DMA_Abort_IT+0x408>
 800387a:	2301      	movs	r3, #1
 800387c:	e031      	b.n	80038e2 <HAL_DMA_Abort_IT+0x40a>
 800387e:	bf00      	nop
 8003880:	40020010 	.word	0x40020010
 8003884:	40020028 	.word	0x40020028
 8003888:	40020040 	.word	0x40020040
 800388c:	40020058 	.word	0x40020058
 8003890:	40020070 	.word	0x40020070
 8003894:	40020088 	.word	0x40020088
 8003898:	400200a0 	.word	0x400200a0
 800389c:	400200b8 	.word	0x400200b8
 80038a0:	40020410 	.word	0x40020410
 80038a4:	40020428 	.word	0x40020428
 80038a8:	40020440 	.word	0x40020440
 80038ac:	40020458 	.word	0x40020458
 80038b0:	40020470 	.word	0x40020470
 80038b4:	40020488 	.word	0x40020488
 80038b8:	400204a0 	.word	0x400204a0
 80038bc:	400204b8 	.word	0x400204b8
 80038c0:	58025408 	.word	0x58025408
 80038c4:	5802541c 	.word	0x5802541c
 80038c8:	58025430 	.word	0x58025430
 80038cc:	58025444 	.word	0x58025444
 80038d0:	58025458 	.word	0x58025458
 80038d4:	5802546c 	.word	0x5802546c
 80038d8:	58025480 	.word	0x58025480
 80038dc:	58025494 	.word	0x58025494
 80038e0:	2300      	movs	r3, #0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d028      	beq.n	8003938 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	2201      	movs	r2, #1
 8003906:	409a      	lsls	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003914:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00c      	beq.n	8003938 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003928:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800392c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003936:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop

08003964 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	@ 0x28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003970:	4b67      	ldr	r3, [pc, #412]	@ (8003b10 <HAL_DMA_IRQHandler+0x1ac>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a67      	ldr	r2, [pc, #412]	@ (8003b14 <HAL_DMA_IRQHandler+0x1b0>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	0a9b      	lsrs	r3, r3, #10
 800397c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003982:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003988:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a5f      	ldr	r2, [pc, #380]	@ (8003b18 <HAL_DMA_IRQHandler+0x1b4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d04a      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a5d      	ldr	r2, [pc, #372]	@ (8003b1c <HAL_DMA_IRQHandler+0x1b8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d045      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a5c      	ldr	r2, [pc, #368]	@ (8003b20 <HAL_DMA_IRQHandler+0x1bc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d040      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a5a      	ldr	r2, [pc, #360]	@ (8003b24 <HAL_DMA_IRQHandler+0x1c0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d03b      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a59      	ldr	r2, [pc, #356]	@ (8003b28 <HAL_DMA_IRQHandler+0x1c4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d036      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a57      	ldr	r2, [pc, #348]	@ (8003b2c <HAL_DMA_IRQHandler+0x1c8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d031      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a56      	ldr	r2, [pc, #344]	@ (8003b30 <HAL_DMA_IRQHandler+0x1cc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d02c      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a54      	ldr	r2, [pc, #336]	@ (8003b34 <HAL_DMA_IRQHandler+0x1d0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d027      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a53      	ldr	r2, [pc, #332]	@ (8003b38 <HAL_DMA_IRQHandler+0x1d4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d022      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a51      	ldr	r2, [pc, #324]	@ (8003b3c <HAL_DMA_IRQHandler+0x1d8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d01d      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a50      	ldr	r2, [pc, #320]	@ (8003b40 <HAL_DMA_IRQHandler+0x1dc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d018      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a4e      	ldr	r2, [pc, #312]	@ (8003b44 <HAL_DMA_IRQHandler+0x1e0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d013      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a4d      	ldr	r2, [pc, #308]	@ (8003b48 <HAL_DMA_IRQHandler+0x1e4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00e      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a4b      	ldr	r2, [pc, #300]	@ (8003b4c <HAL_DMA_IRQHandler+0x1e8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d009      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a4a      	ldr	r2, [pc, #296]	@ (8003b50 <HAL_DMA_IRQHandler+0x1ec>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d004      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a48      	ldr	r2, [pc, #288]	@ (8003b54 <HAL_DMA_IRQHandler+0x1f0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d101      	bne.n	8003a3a <HAL_DMA_IRQHandler+0xd6>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <HAL_DMA_IRQHandler+0xd8>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 842b 	beq.w	8004298 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	2208      	movs	r2, #8
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 80a2 	beq.w	8003b9c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a2e      	ldr	r2, [pc, #184]	@ (8003b18 <HAL_DMA_IRQHandler+0x1b4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d04a      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a2d      	ldr	r2, [pc, #180]	@ (8003b1c <HAL_DMA_IRQHandler+0x1b8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d045      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a2b      	ldr	r2, [pc, #172]	@ (8003b20 <HAL_DMA_IRQHandler+0x1bc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d040      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003b24 <HAL_DMA_IRQHandler+0x1c0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d03b      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a28      	ldr	r2, [pc, #160]	@ (8003b28 <HAL_DMA_IRQHandler+0x1c4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d036      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a27      	ldr	r2, [pc, #156]	@ (8003b2c <HAL_DMA_IRQHandler+0x1c8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d031      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a25      	ldr	r2, [pc, #148]	@ (8003b30 <HAL_DMA_IRQHandler+0x1cc>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d02c      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a24      	ldr	r2, [pc, #144]	@ (8003b34 <HAL_DMA_IRQHandler+0x1d0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d027      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a22      	ldr	r2, [pc, #136]	@ (8003b38 <HAL_DMA_IRQHandler+0x1d4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d022      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a21      	ldr	r2, [pc, #132]	@ (8003b3c <HAL_DMA_IRQHandler+0x1d8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d01d      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8003b40 <HAL_DMA_IRQHandler+0x1dc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d018      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1e      	ldr	r2, [pc, #120]	@ (8003b44 <HAL_DMA_IRQHandler+0x1e0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d013      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b48 <HAL_DMA_IRQHandler+0x1e4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00e      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1b      	ldr	r2, [pc, #108]	@ (8003b4c <HAL_DMA_IRQHandler+0x1e8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d009      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a19      	ldr	r2, [pc, #100]	@ (8003b50 <HAL_DMA_IRQHandler+0x1ec>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a18      	ldr	r2, [pc, #96]	@ (8003b54 <HAL_DMA_IRQHandler+0x1f0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d12f      	bne.n	8003b58 <HAL_DMA_IRQHandler+0x1f4>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	bf14      	ite	ne
 8003b06:	2301      	movne	r3, #1
 8003b08:	2300      	moveq	r3, #0
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	e02e      	b.n	8003b6c <HAL_DMA_IRQHandler+0x208>
 8003b0e:	bf00      	nop
 8003b10:	24000000 	.word	0x24000000
 8003b14:	1b4e81b5 	.word	0x1b4e81b5
 8003b18:	40020010 	.word	0x40020010
 8003b1c:	40020028 	.word	0x40020028
 8003b20:	40020040 	.word	0x40020040
 8003b24:	40020058 	.word	0x40020058
 8003b28:	40020070 	.word	0x40020070
 8003b2c:	40020088 	.word	0x40020088
 8003b30:	400200a0 	.word	0x400200a0
 8003b34:	400200b8 	.word	0x400200b8
 8003b38:	40020410 	.word	0x40020410
 8003b3c:	40020428 	.word	0x40020428
 8003b40:	40020440 	.word	0x40020440
 8003b44:	40020458 	.word	0x40020458
 8003b48:	40020470 	.word	0x40020470
 8003b4c:	40020488 	.word	0x40020488
 8003b50:	400204a0 	.word	0x400204a0
 8003b54:	400204b8 	.word	0x400204b8
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	bf14      	ite	ne
 8003b66:	2301      	movne	r3, #1
 8003b68:	2300      	moveq	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0204 	bic.w	r2, r2, #4
 8003b7e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	2208      	movs	r2, #8
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b94:	f043 0201 	orr.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d06e      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a69      	ldr	r2, [pc, #420]	@ (8003d5c <HAL_DMA_IRQHandler+0x3f8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d04a      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a67      	ldr	r2, [pc, #412]	@ (8003d60 <HAL_DMA_IRQHandler+0x3fc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d045      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a66      	ldr	r2, [pc, #408]	@ (8003d64 <HAL_DMA_IRQHandler+0x400>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d040      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a64      	ldr	r2, [pc, #400]	@ (8003d68 <HAL_DMA_IRQHandler+0x404>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d03b      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a63      	ldr	r2, [pc, #396]	@ (8003d6c <HAL_DMA_IRQHandler+0x408>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d036      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a61      	ldr	r2, [pc, #388]	@ (8003d70 <HAL_DMA_IRQHandler+0x40c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d031      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a60      	ldr	r2, [pc, #384]	@ (8003d74 <HAL_DMA_IRQHandler+0x410>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d02c      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a5e      	ldr	r2, [pc, #376]	@ (8003d78 <HAL_DMA_IRQHandler+0x414>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d027      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a5d      	ldr	r2, [pc, #372]	@ (8003d7c <HAL_DMA_IRQHandler+0x418>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d022      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a5b      	ldr	r2, [pc, #364]	@ (8003d80 <HAL_DMA_IRQHandler+0x41c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01d      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a5a      	ldr	r2, [pc, #360]	@ (8003d84 <HAL_DMA_IRQHandler+0x420>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d018      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a58      	ldr	r2, [pc, #352]	@ (8003d88 <HAL_DMA_IRQHandler+0x424>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a57      	ldr	r2, [pc, #348]	@ (8003d8c <HAL_DMA_IRQHandler+0x428>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00e      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a55      	ldr	r2, [pc, #340]	@ (8003d90 <HAL_DMA_IRQHandler+0x42c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d009      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a54      	ldr	r2, [pc, #336]	@ (8003d94 <HAL_DMA_IRQHandler+0x430>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d004      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a52      	ldr	r2, [pc, #328]	@ (8003d98 <HAL_DMA_IRQHandler+0x434>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d10a      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x304>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bf14      	ite	ne
 8003c60:	2301      	movne	r3, #1
 8003c62:	2300      	moveq	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	e003      	b.n	8003c70 <HAL_DMA_IRQHandler+0x30c>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00d      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c88:	f043 0202 	orr.w	r2, r3, #2
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	2204      	movs	r2, #4
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 808f 	beq.w	8003dc4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2c      	ldr	r2, [pc, #176]	@ (8003d5c <HAL_DMA_IRQHandler+0x3f8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d04a      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a2a      	ldr	r2, [pc, #168]	@ (8003d60 <HAL_DMA_IRQHandler+0x3fc>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d045      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a29      	ldr	r2, [pc, #164]	@ (8003d64 <HAL_DMA_IRQHandler+0x400>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d040      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a27      	ldr	r2, [pc, #156]	@ (8003d68 <HAL_DMA_IRQHandler+0x404>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d03b      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a26      	ldr	r2, [pc, #152]	@ (8003d6c <HAL_DMA_IRQHandler+0x408>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d036      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a24      	ldr	r2, [pc, #144]	@ (8003d70 <HAL_DMA_IRQHandler+0x40c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d031      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a23      	ldr	r2, [pc, #140]	@ (8003d74 <HAL_DMA_IRQHandler+0x410>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d02c      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a21      	ldr	r2, [pc, #132]	@ (8003d78 <HAL_DMA_IRQHandler+0x414>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d027      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a20      	ldr	r2, [pc, #128]	@ (8003d7c <HAL_DMA_IRQHandler+0x418>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d022      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a1e      	ldr	r2, [pc, #120]	@ (8003d80 <HAL_DMA_IRQHandler+0x41c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d01d      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003d84 <HAL_DMA_IRQHandler+0x420>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d018      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1b      	ldr	r2, [pc, #108]	@ (8003d88 <HAL_DMA_IRQHandler+0x424>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1a      	ldr	r2, [pc, #104]	@ (8003d8c <HAL_DMA_IRQHandler+0x428>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00e      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a18      	ldr	r2, [pc, #96]	@ (8003d90 <HAL_DMA_IRQHandler+0x42c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d009      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a17      	ldr	r2, [pc, #92]	@ (8003d94 <HAL_DMA_IRQHandler+0x430>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d004      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a15      	ldr	r2, [pc, #84]	@ (8003d98 <HAL_DMA_IRQHandler+0x434>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d12a      	bne.n	8003d9c <HAL_DMA_IRQHandler+0x438>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf14      	ite	ne
 8003d54:	2301      	movne	r3, #1
 8003d56:	2300      	moveq	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	e023      	b.n	8003da4 <HAL_DMA_IRQHandler+0x440>
 8003d5c:	40020010 	.word	0x40020010
 8003d60:	40020028 	.word	0x40020028
 8003d64:	40020040 	.word	0x40020040
 8003d68:	40020058 	.word	0x40020058
 8003d6c:	40020070 	.word	0x40020070
 8003d70:	40020088 	.word	0x40020088
 8003d74:	400200a0 	.word	0x400200a0
 8003d78:	400200b8 	.word	0x400200b8
 8003d7c:	40020410 	.word	0x40020410
 8003d80:	40020428 	.word	0x40020428
 8003d84:	40020440 	.word	0x40020440
 8003d88:	40020458 	.word	0x40020458
 8003d8c:	40020470 	.word	0x40020470
 8003d90:	40020488 	.word	0x40020488
 8003d94:	400204a0 	.word	0x400204a0
 8003d98:	400204b8 	.word	0x400204b8
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2300      	movs	r3, #0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00d      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	2204      	movs	r2, #4
 8003db2:	409a      	lsls	r2, r3
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dbc:	f043 0204 	orr.w	r2, r3, #4
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2210      	movs	r2, #16
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80a6 	beq.w	8003f26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a85      	ldr	r2, [pc, #532]	@ (8003ff4 <HAL_DMA_IRQHandler+0x690>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d04a      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a83      	ldr	r2, [pc, #524]	@ (8003ff8 <HAL_DMA_IRQHandler+0x694>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d045      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a82      	ldr	r2, [pc, #520]	@ (8003ffc <HAL_DMA_IRQHandler+0x698>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d040      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a80      	ldr	r2, [pc, #512]	@ (8004000 <HAL_DMA_IRQHandler+0x69c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d03b      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a7f      	ldr	r2, [pc, #508]	@ (8004004 <HAL_DMA_IRQHandler+0x6a0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d036      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a7d      	ldr	r2, [pc, #500]	@ (8004008 <HAL_DMA_IRQHandler+0x6a4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d031      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a7c      	ldr	r2, [pc, #496]	@ (800400c <HAL_DMA_IRQHandler+0x6a8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d02c      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a7a      	ldr	r2, [pc, #488]	@ (8004010 <HAL_DMA_IRQHandler+0x6ac>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d027      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a79      	ldr	r2, [pc, #484]	@ (8004014 <HAL_DMA_IRQHandler+0x6b0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d022      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a77      	ldr	r2, [pc, #476]	@ (8004018 <HAL_DMA_IRQHandler+0x6b4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d01d      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a76      	ldr	r2, [pc, #472]	@ (800401c <HAL_DMA_IRQHandler+0x6b8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d018      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a74      	ldr	r2, [pc, #464]	@ (8004020 <HAL_DMA_IRQHandler+0x6bc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a73      	ldr	r2, [pc, #460]	@ (8004024 <HAL_DMA_IRQHandler+0x6c0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00e      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a71      	ldr	r2, [pc, #452]	@ (8004028 <HAL_DMA_IRQHandler+0x6c4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d009      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a70      	ldr	r2, [pc, #448]	@ (800402c <HAL_DMA_IRQHandler+0x6c8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a6e      	ldr	r2, [pc, #440]	@ (8004030 <HAL_DMA_IRQHandler+0x6cc>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d10a      	bne.n	8003e90 <HAL_DMA_IRQHandler+0x52c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	bf14      	ite	ne
 8003e88:	2301      	movne	r3, #1
 8003e8a:	2300      	moveq	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	e009      	b.n	8003ea4 <HAL_DMA_IRQHandler+0x540>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	bf14      	ite	ne
 8003e9e:	2301      	movne	r3, #1
 8003ea0:	2300      	moveq	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d03e      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eac:	f003 031f 	and.w	r3, r3, #31
 8003eb0:	2210      	movs	r2, #16
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d018      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d108      	bne.n	8003ee6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d024      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4798      	blx	r3
 8003ee4:	e01f      	b.n	8003f26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d01b      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	4798      	blx	r3
 8003ef6:	e016      	b.n	8003f26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d107      	bne.n	8003f16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0208 	bic.w	r2, r2, #8
 8003f14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	2220      	movs	r2, #32
 8003f30:	409a      	lsls	r2, r3
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 8110 	beq.w	800415c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a2c      	ldr	r2, [pc, #176]	@ (8003ff4 <HAL_DMA_IRQHandler+0x690>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d04a      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ff8 <HAL_DMA_IRQHandler+0x694>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d045      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a29      	ldr	r2, [pc, #164]	@ (8003ffc <HAL_DMA_IRQHandler+0x698>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d040      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a28      	ldr	r2, [pc, #160]	@ (8004000 <HAL_DMA_IRQHandler+0x69c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d03b      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a26      	ldr	r2, [pc, #152]	@ (8004004 <HAL_DMA_IRQHandler+0x6a0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d036      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a25      	ldr	r2, [pc, #148]	@ (8004008 <HAL_DMA_IRQHandler+0x6a4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d031      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a23      	ldr	r2, [pc, #140]	@ (800400c <HAL_DMA_IRQHandler+0x6a8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d02c      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a22      	ldr	r2, [pc, #136]	@ (8004010 <HAL_DMA_IRQHandler+0x6ac>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d027      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a20      	ldr	r2, [pc, #128]	@ (8004014 <HAL_DMA_IRQHandler+0x6b0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d022      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004018 <HAL_DMA_IRQHandler+0x6b4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d01d      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800401c <HAL_DMA_IRQHandler+0x6b8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d018      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1c      	ldr	r2, [pc, #112]	@ (8004020 <HAL_DMA_IRQHandler+0x6bc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d013      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8004024 <HAL_DMA_IRQHandler+0x6c0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00e      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a19      	ldr	r2, [pc, #100]	@ (8004028 <HAL_DMA_IRQHandler+0x6c4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d009      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a17      	ldr	r2, [pc, #92]	@ (800402c <HAL_DMA_IRQHandler+0x6c8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a16      	ldr	r2, [pc, #88]	@ (8004030 <HAL_DMA_IRQHandler+0x6cc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d12b      	bne.n	8004034 <HAL_DMA_IRQHandler+0x6d0>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	bf14      	ite	ne
 8003fea:	2301      	movne	r3, #1
 8003fec:	2300      	moveq	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	e02a      	b.n	8004048 <HAL_DMA_IRQHandler+0x6e4>
 8003ff2:	bf00      	nop
 8003ff4:	40020010 	.word	0x40020010
 8003ff8:	40020028 	.word	0x40020028
 8003ffc:	40020040 	.word	0x40020040
 8004000:	40020058 	.word	0x40020058
 8004004:	40020070 	.word	0x40020070
 8004008:	40020088 	.word	0x40020088
 800400c:	400200a0 	.word	0x400200a0
 8004010:	400200b8 	.word	0x400200b8
 8004014:	40020410 	.word	0x40020410
 8004018:	40020428 	.word	0x40020428
 800401c:	40020440 	.word	0x40020440
 8004020:	40020458 	.word	0x40020458
 8004024:	40020470 	.word	0x40020470
 8004028:	40020488 	.word	0x40020488
 800402c:	400204a0 	.word	0x400204a0
 8004030:	400204b8 	.word	0x400204b8
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf14      	ite	ne
 8004042:	2301      	movne	r3, #1
 8004044:	2300      	moveq	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8087 	beq.w	800415c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	2220      	movs	r2, #32
 8004058:	409a      	lsls	r2, r3
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b04      	cmp	r3, #4
 8004068:	d139      	bne.n	80040de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0216 	bic.w	r2, r2, #22
 8004078:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695a      	ldr	r2, [r3, #20]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004088:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d103      	bne.n	800409a <HAL_DMA_IRQHandler+0x736>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0208 	bic.w	r2, r2, #8
 80040a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	223f      	movs	r2, #63	@ 0x3f
 80040b4:	409a      	lsls	r2, r3
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8382 	beq.w	80047d8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	4798      	blx	r3
          }
          return;
 80040dc:	e37c      	b.n	80047d8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d018      	beq.n	800411e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d108      	bne.n	800410c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d02c      	beq.n	800415c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
 800410a:	e027      	b.n	800415c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004110:	2b00      	cmp	r3, #0
 8004112:	d023      	beq.n	800415c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	4798      	blx	r3
 800411c:	e01e      	b.n	800415c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10f      	bne.n	800414c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0210 	bic.w	r2, r2, #16
 800413a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 833e 	beq.w	80047e2 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 8088 	beq.w	8004284 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2204      	movs	r2, #4
 8004178:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a89      	ldr	r2, [pc, #548]	@ (80043a8 <HAL_DMA_IRQHandler+0xa44>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d04a      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a88      	ldr	r2, [pc, #544]	@ (80043ac <HAL_DMA_IRQHandler+0xa48>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d045      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a86      	ldr	r2, [pc, #536]	@ (80043b0 <HAL_DMA_IRQHandler+0xa4c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d040      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a85      	ldr	r2, [pc, #532]	@ (80043b4 <HAL_DMA_IRQHandler+0xa50>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d03b      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a83      	ldr	r2, [pc, #524]	@ (80043b8 <HAL_DMA_IRQHandler+0xa54>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d036      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a82      	ldr	r2, [pc, #520]	@ (80043bc <HAL_DMA_IRQHandler+0xa58>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d031      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a80      	ldr	r2, [pc, #512]	@ (80043c0 <HAL_DMA_IRQHandler+0xa5c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d02c      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a7f      	ldr	r2, [pc, #508]	@ (80043c4 <HAL_DMA_IRQHandler+0xa60>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d027      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a7d      	ldr	r2, [pc, #500]	@ (80043c8 <HAL_DMA_IRQHandler+0xa64>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d022      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a7c      	ldr	r2, [pc, #496]	@ (80043cc <HAL_DMA_IRQHandler+0xa68>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d01d      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a7a      	ldr	r2, [pc, #488]	@ (80043d0 <HAL_DMA_IRQHandler+0xa6c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d018      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a79      	ldr	r2, [pc, #484]	@ (80043d4 <HAL_DMA_IRQHandler+0xa70>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d013      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a77      	ldr	r2, [pc, #476]	@ (80043d8 <HAL_DMA_IRQHandler+0xa74>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00e      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a76      	ldr	r2, [pc, #472]	@ (80043dc <HAL_DMA_IRQHandler+0xa78>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d009      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a74      	ldr	r2, [pc, #464]	@ (80043e0 <HAL_DMA_IRQHandler+0xa7c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d004      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a73      	ldr	r2, [pc, #460]	@ (80043e4 <HAL_DMA_IRQHandler+0xa80>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d108      	bne.n	800422e <HAL_DMA_IRQHandler+0x8ca>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0201 	bic.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	e007      	b.n	800423e <HAL_DMA_IRQHandler+0x8da>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0201 	bic.w	r2, r2, #1
 800423c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	3301      	adds	r3, #1
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004246:	429a      	cmp	r2, r3
 8004248:	d307      	bcc.n	800425a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1f2      	bne.n	800423e <HAL_DMA_IRQHandler+0x8da>
 8004258:	e000      	b.n	800425c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800425a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d004      	beq.n	8004274 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2203      	movs	r2, #3
 800426e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004272:	e003      	b.n	800427c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 82aa 	beq.w	80047e2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	4798      	blx	r3
 8004296:	e2a4      	b.n	80047e2 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a52      	ldr	r2, [pc, #328]	@ (80043e8 <HAL_DMA_IRQHandler+0xa84>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d04a      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a51      	ldr	r2, [pc, #324]	@ (80043ec <HAL_DMA_IRQHandler+0xa88>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d045      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a4f      	ldr	r2, [pc, #316]	@ (80043f0 <HAL_DMA_IRQHandler+0xa8c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d040      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a4e      	ldr	r2, [pc, #312]	@ (80043f4 <HAL_DMA_IRQHandler+0xa90>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d03b      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a4c      	ldr	r2, [pc, #304]	@ (80043f8 <HAL_DMA_IRQHandler+0xa94>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d036      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a4b      	ldr	r2, [pc, #300]	@ (80043fc <HAL_DMA_IRQHandler+0xa98>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d031      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a49      	ldr	r2, [pc, #292]	@ (8004400 <HAL_DMA_IRQHandler+0xa9c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d02c      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a48      	ldr	r2, [pc, #288]	@ (8004404 <HAL_DMA_IRQHandler+0xaa0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d027      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a46      	ldr	r2, [pc, #280]	@ (8004408 <HAL_DMA_IRQHandler+0xaa4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d022      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a45      	ldr	r2, [pc, #276]	@ (800440c <HAL_DMA_IRQHandler+0xaa8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d01d      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a43      	ldr	r2, [pc, #268]	@ (8004410 <HAL_DMA_IRQHandler+0xaac>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d018      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a42      	ldr	r2, [pc, #264]	@ (8004414 <HAL_DMA_IRQHandler+0xab0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d013      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a40      	ldr	r2, [pc, #256]	@ (8004418 <HAL_DMA_IRQHandler+0xab4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00e      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a3f      	ldr	r2, [pc, #252]	@ (800441c <HAL_DMA_IRQHandler+0xab8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d009      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a3d      	ldr	r2, [pc, #244]	@ (8004420 <HAL_DMA_IRQHandler+0xabc>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d004      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a3c      	ldr	r2, [pc, #240]	@ (8004424 <HAL_DMA_IRQHandler+0xac0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d101      	bne.n	800433c <HAL_DMA_IRQHandler+0x9d8>
 8004338:	2301      	movs	r3, #1
 800433a:	e000      	b.n	800433e <HAL_DMA_IRQHandler+0x9da>
 800433c:	2300      	movs	r3, #0
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 824f 	beq.w	80047e2 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	2204      	movs	r2, #4
 8004356:	409a      	lsls	r2, r3
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	4013      	ands	r3, r2
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80dd 	beq.w	800451c <HAL_DMA_IRQHandler+0xbb8>
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80d7 	beq.w	800451c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	2204      	movs	r2, #4
 8004378:	409a      	lsls	r2, r3
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d059      	beq.n	800443c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d14a      	bne.n	8004428 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 8220 	beq.w	80047dc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043a4:	e21a      	b.n	80047dc <HAL_DMA_IRQHandler+0xe78>
 80043a6:	bf00      	nop
 80043a8:	40020010 	.word	0x40020010
 80043ac:	40020028 	.word	0x40020028
 80043b0:	40020040 	.word	0x40020040
 80043b4:	40020058 	.word	0x40020058
 80043b8:	40020070 	.word	0x40020070
 80043bc:	40020088 	.word	0x40020088
 80043c0:	400200a0 	.word	0x400200a0
 80043c4:	400200b8 	.word	0x400200b8
 80043c8:	40020410 	.word	0x40020410
 80043cc:	40020428 	.word	0x40020428
 80043d0:	40020440 	.word	0x40020440
 80043d4:	40020458 	.word	0x40020458
 80043d8:	40020470 	.word	0x40020470
 80043dc:	40020488 	.word	0x40020488
 80043e0:	400204a0 	.word	0x400204a0
 80043e4:	400204b8 	.word	0x400204b8
 80043e8:	48022c08 	.word	0x48022c08
 80043ec:	48022c1c 	.word	0x48022c1c
 80043f0:	48022c30 	.word	0x48022c30
 80043f4:	48022c44 	.word	0x48022c44
 80043f8:	48022c58 	.word	0x48022c58
 80043fc:	48022c6c 	.word	0x48022c6c
 8004400:	48022c80 	.word	0x48022c80
 8004404:	48022c94 	.word	0x48022c94
 8004408:	58025408 	.word	0x58025408
 800440c:	5802541c 	.word	0x5802541c
 8004410:	58025430 	.word	0x58025430
 8004414:	58025444 	.word	0x58025444
 8004418:	58025458 	.word	0x58025458
 800441c:	5802546c 	.word	0x5802546c
 8004420:	58025480 	.word	0x58025480
 8004424:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 81d5 	beq.w	80047dc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800443a:	e1cf      	b.n	80047dc <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d160      	bne.n	8004508 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a7f      	ldr	r2, [pc, #508]	@ (8004648 <HAL_DMA_IRQHandler+0xce4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d04a      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a7d      	ldr	r2, [pc, #500]	@ (800464c <HAL_DMA_IRQHandler+0xce8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d045      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a7c      	ldr	r2, [pc, #496]	@ (8004650 <HAL_DMA_IRQHandler+0xcec>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d040      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a7a      	ldr	r2, [pc, #488]	@ (8004654 <HAL_DMA_IRQHandler+0xcf0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d03b      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a79      	ldr	r2, [pc, #484]	@ (8004658 <HAL_DMA_IRQHandler+0xcf4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d036      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a77      	ldr	r2, [pc, #476]	@ (800465c <HAL_DMA_IRQHandler+0xcf8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d031      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a76      	ldr	r2, [pc, #472]	@ (8004660 <HAL_DMA_IRQHandler+0xcfc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d02c      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a74      	ldr	r2, [pc, #464]	@ (8004664 <HAL_DMA_IRQHandler+0xd00>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d027      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a73      	ldr	r2, [pc, #460]	@ (8004668 <HAL_DMA_IRQHandler+0xd04>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d022      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a71      	ldr	r2, [pc, #452]	@ (800466c <HAL_DMA_IRQHandler+0xd08>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d01d      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a70      	ldr	r2, [pc, #448]	@ (8004670 <HAL_DMA_IRQHandler+0xd0c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d018      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004674 <HAL_DMA_IRQHandler+0xd10>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d013      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a6d      	ldr	r2, [pc, #436]	@ (8004678 <HAL_DMA_IRQHandler+0xd14>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00e      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a6b      	ldr	r2, [pc, #428]	@ (800467c <HAL_DMA_IRQHandler+0xd18>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d009      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004680 <HAL_DMA_IRQHandler+0xd1c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a68      	ldr	r2, [pc, #416]	@ (8004684 <HAL_DMA_IRQHandler+0xd20>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d108      	bne.n	80044f8 <HAL_DMA_IRQHandler+0xb94>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0208 	bic.w	r2, r2, #8
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e007      	b.n	8004508 <HAL_DMA_IRQHandler+0xba4>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0204 	bic.w	r2, r2, #4
 8004506:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 8165 	beq.w	80047dc <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800451a:	e15f      	b.n	80047dc <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	2202      	movs	r2, #2
 8004526:	409a      	lsls	r2, r3
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80c5 	beq.w	80046bc <HAL_DMA_IRQHandler+0xd58>
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80bf 	beq.w	80046bc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	2202      	movs	r2, #2
 8004548:	409a      	lsls	r2, r3
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d018      	beq.n	800458a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 813a 	beq.w	80047e0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004574:	e134      	b.n	80047e0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8130 	beq.w	80047e0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004588:	e12a      	b.n	80047e0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	f040 8089 	bne.w	80046a8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a2b      	ldr	r2, [pc, #172]	@ (8004648 <HAL_DMA_IRQHandler+0xce4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d04a      	beq.n	8004636 <HAL_DMA_IRQHandler+0xcd2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a29      	ldr	r2, [pc, #164]	@ (800464c <HAL_DMA_IRQHandler+0xce8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d045      	beq.n	8004636 <HAL_DMA_IRQHandler+0xcd2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a28      	ldr	r2, [pc, #160]	@ (8004650 <HAL_DMA_IRQHandler+0xcec>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d040      	beq.n	8004636 <HAL_DMA_IRQHandler+0xcd2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a26      	ldr	r2, [pc, #152]	@ (8004654 <HAL_DMA_IRQHandler+0xcf0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d03b      	beq.n	8004636 <HAL_DMA_IRQHandler+0xcd2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a25      	ldr	r2, [pc, #148]	@ (8004658 <HAL_DMA_IRQHandler+0xcf4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d036      	beq.n	8004636 <HAL_DMA_IRQHandler+0xcd2>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a23      	ldr	r2, [pc, #140]	@ (800465c <HAL_DMA_IRQHandler+0xcf8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d031      	beq.n	8004636 <HAL_DMA_IRQHandler+0xcd2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a22      	ldr	r2, [pc, #136]	@ (8004660 <HAL_DMA_IRQHandler+0xcfc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d02c      	beq.n	8004636 <HAL_DMA_IRQHandler+0xcd2>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a20      	ldr	r2, [pc, #128]	@ (8004664 <HAL_DMA_IRQHandler+0xd00>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d027      	beq.n	8004636 <HAL_DMA_IRQHandler+0xcd2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004668 <HAL_DMA_IRQHandler+0xd04>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d022      	beq.n	8004636 <HAL_DMA_IRQHandler+0xcd2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1d      	ldr	r2, [pc, #116]	@ (800466c <HAL_DMA_IRQHandler+0xd08>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d01d      	beq.n	8004636 <HAL_DMA_IRQHandler+0xcd2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004670 <HAL_DMA_IRQHandler+0xd0c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d018      	beq.n	8004636 <HAL_DMA_IRQHandler+0xcd2>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1a      	ldr	r2, [pc, #104]	@ (8004674 <HAL_DMA_IRQHandler+0xd10>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <HAL_DMA_IRQHandler+0xcd2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a19      	ldr	r2, [pc, #100]	@ (8004678 <HAL_DMA_IRQHandler+0xd14>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00e      	beq.n	8004636 <HAL_DMA_IRQHandler+0xcd2>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a17      	ldr	r2, [pc, #92]	@ (800467c <HAL_DMA_IRQHandler+0xd18>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d009      	beq.n	8004636 <HAL_DMA_IRQHandler+0xcd2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a16      	ldr	r2, [pc, #88]	@ (8004680 <HAL_DMA_IRQHandler+0xd1c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_DMA_IRQHandler+0xcd2>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a14      	ldr	r2, [pc, #80]	@ (8004684 <HAL_DMA_IRQHandler+0xd20>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d128      	bne.n	8004688 <HAL_DMA_IRQHandler+0xd24>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0214 	bic.w	r2, r2, #20
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	e027      	b.n	8004698 <HAL_DMA_IRQHandler+0xd34>
 8004648:	40020010 	.word	0x40020010
 800464c:	40020028 	.word	0x40020028
 8004650:	40020040 	.word	0x40020040
 8004654:	40020058 	.word	0x40020058
 8004658:	40020070 	.word	0x40020070
 800465c:	40020088 	.word	0x40020088
 8004660:	400200a0 	.word	0x400200a0
 8004664:	400200b8 	.word	0x400200b8
 8004668:	40020410 	.word	0x40020410
 800466c:	40020428 	.word	0x40020428
 8004670:	40020440 	.word	0x40020440
 8004674:	40020458 	.word	0x40020458
 8004678:	40020470 	.word	0x40020470
 800467c:	40020488 	.word	0x40020488
 8004680:	400204a0 	.word	0x400204a0
 8004684:	400204b8 	.word	0x400204b8
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 020a 	bic.w	r2, r2, #10
 8004696:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8097 	beq.w	80047e0 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ba:	e091      	b.n	80047e0 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c0:	f003 031f 	and.w	r3, r3, #31
 80046c4:	2208      	movs	r2, #8
 80046c6:	409a      	lsls	r2, r3
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	4013      	ands	r3, r2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8088 	beq.w	80047e2 <HAL_DMA_IRQHandler+0xe7e>
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 8082 	beq.w	80047e2 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a41      	ldr	r2, [pc, #260]	@ (80047e8 <HAL_DMA_IRQHandler+0xe84>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d04a      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a3f      	ldr	r2, [pc, #252]	@ (80047ec <HAL_DMA_IRQHandler+0xe88>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d045      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a3e      	ldr	r2, [pc, #248]	@ (80047f0 <HAL_DMA_IRQHandler+0xe8c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d040      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a3c      	ldr	r2, [pc, #240]	@ (80047f4 <HAL_DMA_IRQHandler+0xe90>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d03b      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a3b      	ldr	r2, [pc, #236]	@ (80047f8 <HAL_DMA_IRQHandler+0xe94>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d036      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a39      	ldr	r2, [pc, #228]	@ (80047fc <HAL_DMA_IRQHandler+0xe98>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d031      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a38      	ldr	r2, [pc, #224]	@ (8004800 <HAL_DMA_IRQHandler+0xe9c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d02c      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a36      	ldr	r2, [pc, #216]	@ (8004804 <HAL_DMA_IRQHandler+0xea0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d027      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a35      	ldr	r2, [pc, #212]	@ (8004808 <HAL_DMA_IRQHandler+0xea4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d022      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a33      	ldr	r2, [pc, #204]	@ (800480c <HAL_DMA_IRQHandler+0xea8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d01d      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a32      	ldr	r2, [pc, #200]	@ (8004810 <HAL_DMA_IRQHandler+0xeac>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d018      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a30      	ldr	r2, [pc, #192]	@ (8004814 <HAL_DMA_IRQHandler+0xeb0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a2f      	ldr	r2, [pc, #188]	@ (8004818 <HAL_DMA_IRQHandler+0xeb4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00e      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a2d      	ldr	r2, [pc, #180]	@ (800481c <HAL_DMA_IRQHandler+0xeb8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d009      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a2c      	ldr	r2, [pc, #176]	@ (8004820 <HAL_DMA_IRQHandler+0xebc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d004      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a2a      	ldr	r2, [pc, #168]	@ (8004824 <HAL_DMA_IRQHandler+0xec0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d108      	bne.n	8004790 <HAL_DMA_IRQHandler+0xe2c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 021c 	bic.w	r2, r2, #28
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e007      	b.n	80047a0 <HAL_DMA_IRQHandler+0xe3c>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 020e 	bic.w	r2, r2, #14
 800479e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	2201      	movs	r2, #1
 80047aa:	409a      	lsls	r2, r3
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	4798      	blx	r3
 80047d6:	e004      	b.n	80047e2 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80047d8:	bf00      	nop
 80047da:	e002      	b.n	80047e2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047dc:	bf00      	nop
 80047de:	e000      	b.n	80047e2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047e0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80047e2:	3728      	adds	r7, #40	@ 0x28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40020010 	.word	0x40020010
 80047ec:	40020028 	.word	0x40020028
 80047f0:	40020040 	.word	0x40020040
 80047f4:	40020058 	.word	0x40020058
 80047f8:	40020070 	.word	0x40020070
 80047fc:	40020088 	.word	0x40020088
 8004800:	400200a0 	.word	0x400200a0
 8004804:	400200b8 	.word	0x400200b8
 8004808:	40020410 	.word	0x40020410
 800480c:	40020428 	.word	0x40020428
 8004810:	40020440 	.word	0x40020440
 8004814:	40020458 	.word	0x40020458
 8004818:	40020470 	.word	0x40020470
 800481c:	40020488 	.word	0x40020488
 8004820:	400204a0 	.word	0x400204a0
 8004824:	400204b8 	.word	0x400204b8

08004828 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004852:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004858:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a7f      	ldr	r2, [pc, #508]	@ (8004a5c <DMA_SetConfig+0x21c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d072      	beq.n	800494a <DMA_SetConfig+0x10a>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a7d      	ldr	r2, [pc, #500]	@ (8004a60 <DMA_SetConfig+0x220>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d06d      	beq.n	800494a <DMA_SetConfig+0x10a>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a7c      	ldr	r2, [pc, #496]	@ (8004a64 <DMA_SetConfig+0x224>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d068      	beq.n	800494a <DMA_SetConfig+0x10a>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a7a      	ldr	r2, [pc, #488]	@ (8004a68 <DMA_SetConfig+0x228>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d063      	beq.n	800494a <DMA_SetConfig+0x10a>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a79      	ldr	r2, [pc, #484]	@ (8004a6c <DMA_SetConfig+0x22c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d05e      	beq.n	800494a <DMA_SetConfig+0x10a>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a77      	ldr	r2, [pc, #476]	@ (8004a70 <DMA_SetConfig+0x230>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d059      	beq.n	800494a <DMA_SetConfig+0x10a>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a76      	ldr	r2, [pc, #472]	@ (8004a74 <DMA_SetConfig+0x234>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d054      	beq.n	800494a <DMA_SetConfig+0x10a>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a74      	ldr	r2, [pc, #464]	@ (8004a78 <DMA_SetConfig+0x238>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d04f      	beq.n	800494a <DMA_SetConfig+0x10a>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a73      	ldr	r2, [pc, #460]	@ (8004a7c <DMA_SetConfig+0x23c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d04a      	beq.n	800494a <DMA_SetConfig+0x10a>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a71      	ldr	r2, [pc, #452]	@ (8004a80 <DMA_SetConfig+0x240>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d045      	beq.n	800494a <DMA_SetConfig+0x10a>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a70      	ldr	r2, [pc, #448]	@ (8004a84 <DMA_SetConfig+0x244>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d040      	beq.n	800494a <DMA_SetConfig+0x10a>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a6e      	ldr	r2, [pc, #440]	@ (8004a88 <DMA_SetConfig+0x248>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d03b      	beq.n	800494a <DMA_SetConfig+0x10a>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a6d      	ldr	r2, [pc, #436]	@ (8004a8c <DMA_SetConfig+0x24c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d036      	beq.n	800494a <DMA_SetConfig+0x10a>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a6b      	ldr	r2, [pc, #428]	@ (8004a90 <DMA_SetConfig+0x250>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d031      	beq.n	800494a <DMA_SetConfig+0x10a>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a6a      	ldr	r2, [pc, #424]	@ (8004a94 <DMA_SetConfig+0x254>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d02c      	beq.n	800494a <DMA_SetConfig+0x10a>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a68      	ldr	r2, [pc, #416]	@ (8004a98 <DMA_SetConfig+0x258>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d027      	beq.n	800494a <DMA_SetConfig+0x10a>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a67      	ldr	r2, [pc, #412]	@ (8004a9c <DMA_SetConfig+0x25c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d022      	beq.n	800494a <DMA_SetConfig+0x10a>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a65      	ldr	r2, [pc, #404]	@ (8004aa0 <DMA_SetConfig+0x260>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01d      	beq.n	800494a <DMA_SetConfig+0x10a>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a64      	ldr	r2, [pc, #400]	@ (8004aa4 <DMA_SetConfig+0x264>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d018      	beq.n	800494a <DMA_SetConfig+0x10a>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a62      	ldr	r2, [pc, #392]	@ (8004aa8 <DMA_SetConfig+0x268>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d013      	beq.n	800494a <DMA_SetConfig+0x10a>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a61      	ldr	r2, [pc, #388]	@ (8004aac <DMA_SetConfig+0x26c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00e      	beq.n	800494a <DMA_SetConfig+0x10a>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a5f      	ldr	r2, [pc, #380]	@ (8004ab0 <DMA_SetConfig+0x270>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d009      	beq.n	800494a <DMA_SetConfig+0x10a>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a5e      	ldr	r2, [pc, #376]	@ (8004ab4 <DMA_SetConfig+0x274>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d004      	beq.n	800494a <DMA_SetConfig+0x10a>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a5c      	ldr	r2, [pc, #368]	@ (8004ab8 <DMA_SetConfig+0x278>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d101      	bne.n	800494e <DMA_SetConfig+0x10e>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <DMA_SetConfig+0x110>
 800494e:	2300      	movs	r3, #0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00d      	beq.n	8004970 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800495c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d004      	beq.n	8004970 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800496e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a39      	ldr	r2, [pc, #228]	@ (8004a5c <DMA_SetConfig+0x21c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d04a      	beq.n	8004a10 <DMA_SetConfig+0x1d0>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a38      	ldr	r2, [pc, #224]	@ (8004a60 <DMA_SetConfig+0x220>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d045      	beq.n	8004a10 <DMA_SetConfig+0x1d0>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a36      	ldr	r2, [pc, #216]	@ (8004a64 <DMA_SetConfig+0x224>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d040      	beq.n	8004a10 <DMA_SetConfig+0x1d0>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a35      	ldr	r2, [pc, #212]	@ (8004a68 <DMA_SetConfig+0x228>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d03b      	beq.n	8004a10 <DMA_SetConfig+0x1d0>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a33      	ldr	r2, [pc, #204]	@ (8004a6c <DMA_SetConfig+0x22c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d036      	beq.n	8004a10 <DMA_SetConfig+0x1d0>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a32      	ldr	r2, [pc, #200]	@ (8004a70 <DMA_SetConfig+0x230>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d031      	beq.n	8004a10 <DMA_SetConfig+0x1d0>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a30      	ldr	r2, [pc, #192]	@ (8004a74 <DMA_SetConfig+0x234>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d02c      	beq.n	8004a10 <DMA_SetConfig+0x1d0>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004a78 <DMA_SetConfig+0x238>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d027      	beq.n	8004a10 <DMA_SetConfig+0x1d0>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a2d      	ldr	r2, [pc, #180]	@ (8004a7c <DMA_SetConfig+0x23c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d022      	beq.n	8004a10 <DMA_SetConfig+0x1d0>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004a80 <DMA_SetConfig+0x240>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d01d      	beq.n	8004a10 <DMA_SetConfig+0x1d0>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a84 <DMA_SetConfig+0x244>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d018      	beq.n	8004a10 <DMA_SetConfig+0x1d0>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a29      	ldr	r2, [pc, #164]	@ (8004a88 <DMA_SetConfig+0x248>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d013      	beq.n	8004a10 <DMA_SetConfig+0x1d0>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a27      	ldr	r2, [pc, #156]	@ (8004a8c <DMA_SetConfig+0x24c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00e      	beq.n	8004a10 <DMA_SetConfig+0x1d0>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a26      	ldr	r2, [pc, #152]	@ (8004a90 <DMA_SetConfig+0x250>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d009      	beq.n	8004a10 <DMA_SetConfig+0x1d0>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a24      	ldr	r2, [pc, #144]	@ (8004a94 <DMA_SetConfig+0x254>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d004      	beq.n	8004a10 <DMA_SetConfig+0x1d0>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a23      	ldr	r2, [pc, #140]	@ (8004a98 <DMA_SetConfig+0x258>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d101      	bne.n	8004a14 <DMA_SetConfig+0x1d4>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e000      	b.n	8004a16 <DMA_SetConfig+0x1d6>
 8004a14:	2300      	movs	r3, #0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d059      	beq.n	8004ace <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1e:	f003 031f 	and.w	r3, r3, #31
 8004a22:	223f      	movs	r2, #63	@ 0x3f
 8004a24:	409a      	lsls	r2, r3
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a38:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b40      	cmp	r3, #64	@ 0x40
 8004a48:	d138      	bne.n	8004abc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a5a:	e0ae      	b.n	8004bba <DMA_SetConfig+0x37a>
 8004a5c:	40020010 	.word	0x40020010
 8004a60:	40020028 	.word	0x40020028
 8004a64:	40020040 	.word	0x40020040
 8004a68:	40020058 	.word	0x40020058
 8004a6c:	40020070 	.word	0x40020070
 8004a70:	40020088 	.word	0x40020088
 8004a74:	400200a0 	.word	0x400200a0
 8004a78:	400200b8 	.word	0x400200b8
 8004a7c:	40020410 	.word	0x40020410
 8004a80:	40020428 	.word	0x40020428
 8004a84:	40020440 	.word	0x40020440
 8004a88:	40020458 	.word	0x40020458
 8004a8c:	40020470 	.word	0x40020470
 8004a90:	40020488 	.word	0x40020488
 8004a94:	400204a0 	.word	0x400204a0
 8004a98:	400204b8 	.word	0x400204b8
 8004a9c:	58025408 	.word	0x58025408
 8004aa0:	5802541c 	.word	0x5802541c
 8004aa4:	58025430 	.word	0x58025430
 8004aa8:	58025444 	.word	0x58025444
 8004aac:	58025458 	.word	0x58025458
 8004ab0:	5802546c 	.word	0x5802546c
 8004ab4:	58025480 	.word	0x58025480
 8004ab8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	60da      	str	r2, [r3, #12]
}
 8004acc:	e075      	b.n	8004bba <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a3d      	ldr	r2, [pc, #244]	@ (8004bc8 <DMA_SetConfig+0x388>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d04a      	beq.n	8004b6e <DMA_SetConfig+0x32e>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a3b      	ldr	r2, [pc, #236]	@ (8004bcc <DMA_SetConfig+0x38c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d045      	beq.n	8004b6e <DMA_SetConfig+0x32e>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a3a      	ldr	r2, [pc, #232]	@ (8004bd0 <DMA_SetConfig+0x390>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d040      	beq.n	8004b6e <DMA_SetConfig+0x32e>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a38      	ldr	r2, [pc, #224]	@ (8004bd4 <DMA_SetConfig+0x394>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d03b      	beq.n	8004b6e <DMA_SetConfig+0x32e>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a37      	ldr	r2, [pc, #220]	@ (8004bd8 <DMA_SetConfig+0x398>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d036      	beq.n	8004b6e <DMA_SetConfig+0x32e>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a35      	ldr	r2, [pc, #212]	@ (8004bdc <DMA_SetConfig+0x39c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d031      	beq.n	8004b6e <DMA_SetConfig+0x32e>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a34      	ldr	r2, [pc, #208]	@ (8004be0 <DMA_SetConfig+0x3a0>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d02c      	beq.n	8004b6e <DMA_SetConfig+0x32e>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a32      	ldr	r2, [pc, #200]	@ (8004be4 <DMA_SetConfig+0x3a4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d027      	beq.n	8004b6e <DMA_SetConfig+0x32e>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a31      	ldr	r2, [pc, #196]	@ (8004be8 <DMA_SetConfig+0x3a8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d022      	beq.n	8004b6e <DMA_SetConfig+0x32e>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a2f      	ldr	r2, [pc, #188]	@ (8004bec <DMA_SetConfig+0x3ac>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d01d      	beq.n	8004b6e <DMA_SetConfig+0x32e>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2e      	ldr	r2, [pc, #184]	@ (8004bf0 <DMA_SetConfig+0x3b0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d018      	beq.n	8004b6e <DMA_SetConfig+0x32e>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2c      	ldr	r2, [pc, #176]	@ (8004bf4 <DMA_SetConfig+0x3b4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d013      	beq.n	8004b6e <DMA_SetConfig+0x32e>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf8 <DMA_SetConfig+0x3b8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d00e      	beq.n	8004b6e <DMA_SetConfig+0x32e>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a29      	ldr	r2, [pc, #164]	@ (8004bfc <DMA_SetConfig+0x3bc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d009      	beq.n	8004b6e <DMA_SetConfig+0x32e>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a28      	ldr	r2, [pc, #160]	@ (8004c00 <DMA_SetConfig+0x3c0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d004      	beq.n	8004b6e <DMA_SetConfig+0x32e>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a26      	ldr	r2, [pc, #152]	@ (8004c04 <DMA_SetConfig+0x3c4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d101      	bne.n	8004b72 <DMA_SetConfig+0x332>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <DMA_SetConfig+0x334>
 8004b72:	2300      	movs	r3, #0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d020      	beq.n	8004bba <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b7c:	f003 031f 	and.w	r3, r3, #31
 8004b80:	2201      	movs	r2, #1
 8004b82:	409a      	lsls	r2, r3
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b40      	cmp	r3, #64	@ 0x40
 8004b96:	d108      	bne.n	8004baa <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	60da      	str	r2, [r3, #12]
}
 8004ba8:	e007      	b.n	8004bba <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	60da      	str	r2, [r3, #12]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	48022c08 	.word	0x48022c08
 8004bcc:	48022c1c 	.word	0x48022c1c
 8004bd0:	48022c30 	.word	0x48022c30
 8004bd4:	48022c44 	.word	0x48022c44
 8004bd8:	48022c58 	.word	0x48022c58
 8004bdc:	48022c6c 	.word	0x48022c6c
 8004be0:	48022c80 	.word	0x48022c80
 8004be4:	48022c94 	.word	0x48022c94
 8004be8:	58025408 	.word	0x58025408
 8004bec:	5802541c 	.word	0x5802541c
 8004bf0:	58025430 	.word	0x58025430
 8004bf4:	58025444 	.word	0x58025444
 8004bf8:	58025458 	.word	0x58025458
 8004bfc:	5802546c 	.word	0x5802546c
 8004c00:	58025480 	.word	0x58025480
 8004c04:	58025494 	.word	0x58025494

08004c08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a42      	ldr	r2, [pc, #264]	@ (8004d20 <DMA_CalcBaseAndBitshift+0x118>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d04a      	beq.n	8004cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a41      	ldr	r2, [pc, #260]	@ (8004d24 <DMA_CalcBaseAndBitshift+0x11c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d045      	beq.n	8004cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a3f      	ldr	r2, [pc, #252]	@ (8004d28 <DMA_CalcBaseAndBitshift+0x120>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d040      	beq.n	8004cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a3e      	ldr	r2, [pc, #248]	@ (8004d2c <DMA_CalcBaseAndBitshift+0x124>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d03b      	beq.n	8004cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d30 <DMA_CalcBaseAndBitshift+0x128>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d036      	beq.n	8004cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a3b      	ldr	r2, [pc, #236]	@ (8004d34 <DMA_CalcBaseAndBitshift+0x12c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d031      	beq.n	8004cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a39      	ldr	r2, [pc, #228]	@ (8004d38 <DMA_CalcBaseAndBitshift+0x130>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d02c      	beq.n	8004cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a38      	ldr	r2, [pc, #224]	@ (8004d3c <DMA_CalcBaseAndBitshift+0x134>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d027      	beq.n	8004cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a36      	ldr	r2, [pc, #216]	@ (8004d40 <DMA_CalcBaseAndBitshift+0x138>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d022      	beq.n	8004cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a35      	ldr	r2, [pc, #212]	@ (8004d44 <DMA_CalcBaseAndBitshift+0x13c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d01d      	beq.n	8004cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a33      	ldr	r2, [pc, #204]	@ (8004d48 <DMA_CalcBaseAndBitshift+0x140>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d018      	beq.n	8004cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a32      	ldr	r2, [pc, #200]	@ (8004d4c <DMA_CalcBaseAndBitshift+0x144>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a30      	ldr	r2, [pc, #192]	@ (8004d50 <DMA_CalcBaseAndBitshift+0x148>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00e      	beq.n	8004cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a2f      	ldr	r2, [pc, #188]	@ (8004d54 <DMA_CalcBaseAndBitshift+0x14c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d009      	beq.n	8004cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8004d58 <DMA_CalcBaseAndBitshift+0x150>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a2c      	ldr	r2, [pc, #176]	@ (8004d5c <DMA_CalcBaseAndBitshift+0x154>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d101      	bne.n	8004cb4 <DMA_CalcBaseAndBitshift+0xac>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <DMA_CalcBaseAndBitshift+0xae>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d024      	beq.n	8004d04 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	3b10      	subs	r3, #16
 8004cc2:	4a27      	ldr	r2, [pc, #156]	@ (8004d60 <DMA_CalcBaseAndBitshift+0x158>)
 8004cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	4a24      	ldr	r2, [pc, #144]	@ (8004d64 <DMA_CalcBaseAndBitshift+0x15c>)
 8004cd4:	5cd3      	ldrb	r3, [r2, r3]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d908      	bls.n	8004cf4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8004d68 <DMA_CalcBaseAndBitshift+0x160>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	1d1a      	adds	r2, r3, #4
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	659a      	str	r2, [r3, #88]	@ 0x58
 8004cf2:	e00d      	b.n	8004d10 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8004d68 <DMA_CalcBaseAndBitshift+0x160>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d02:	e005      	b.n	8004d10 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	40020010 	.word	0x40020010
 8004d24:	40020028 	.word	0x40020028
 8004d28:	40020040 	.word	0x40020040
 8004d2c:	40020058 	.word	0x40020058
 8004d30:	40020070 	.word	0x40020070
 8004d34:	40020088 	.word	0x40020088
 8004d38:	400200a0 	.word	0x400200a0
 8004d3c:	400200b8 	.word	0x400200b8
 8004d40:	40020410 	.word	0x40020410
 8004d44:	40020428 	.word	0x40020428
 8004d48:	40020440 	.word	0x40020440
 8004d4c:	40020458 	.word	0x40020458
 8004d50:	40020470 	.word	0x40020470
 8004d54:	40020488 	.word	0x40020488
 8004d58:	400204a0 	.word	0x400204a0
 8004d5c:	400204b8 	.word	0x400204b8
 8004d60:	aaaaaaab 	.word	0xaaaaaaab
 8004d64:	0800e888 	.word	0x0800e888
 8004d68:	fffffc00 	.word	0xfffffc00

08004d6c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d120      	bne.n	8004dc2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d858      	bhi.n	8004e3a <DMA_CheckFifoParam+0xce>
 8004d88:	a201      	add	r2, pc, #4	@ (adr r2, 8004d90 <DMA_CheckFifoParam+0x24>)
 8004d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8e:	bf00      	nop
 8004d90:	08004da1 	.word	0x08004da1
 8004d94:	08004db3 	.word	0x08004db3
 8004d98:	08004da1 	.word	0x08004da1
 8004d9c:	08004e3b 	.word	0x08004e3b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d048      	beq.n	8004e3e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004db0:	e045      	b.n	8004e3e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004dba:	d142      	bne.n	8004e42 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dc0:	e03f      	b.n	8004e42 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dca:	d123      	bne.n	8004e14 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d838      	bhi.n	8004e46 <DMA_CheckFifoParam+0xda>
 8004dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ddc <DMA_CheckFifoParam+0x70>)
 8004dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dda:	bf00      	nop
 8004ddc:	08004ded 	.word	0x08004ded
 8004de0:	08004df3 	.word	0x08004df3
 8004de4:	08004ded 	.word	0x08004ded
 8004de8:	08004e05 	.word	0x08004e05
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
        break;
 8004df0:	e030      	b.n	8004e54 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d025      	beq.n	8004e4a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e02:	e022      	b.n	8004e4a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e0c:	d11f      	bne.n	8004e4e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e12:	e01c      	b.n	8004e4e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d902      	bls.n	8004e22 <DMA_CheckFifoParam+0xb6>
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d003      	beq.n	8004e28 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e20:	e018      	b.n	8004e54 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
        break;
 8004e26:	e015      	b.n	8004e54 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00e      	beq.n	8004e52 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	73fb      	strb	r3, [r7, #15]
    break;
 8004e38:	e00b      	b.n	8004e52 <DMA_CheckFifoParam+0xe6>
        break;
 8004e3a:	bf00      	nop
 8004e3c:	e00a      	b.n	8004e54 <DMA_CheckFifoParam+0xe8>
        break;
 8004e3e:	bf00      	nop
 8004e40:	e008      	b.n	8004e54 <DMA_CheckFifoParam+0xe8>
        break;
 8004e42:	bf00      	nop
 8004e44:	e006      	b.n	8004e54 <DMA_CheckFifoParam+0xe8>
        break;
 8004e46:	bf00      	nop
 8004e48:	e004      	b.n	8004e54 <DMA_CheckFifoParam+0xe8>
        break;
 8004e4a:	bf00      	nop
 8004e4c:	e002      	b.n	8004e54 <DMA_CheckFifoParam+0xe8>
        break;
 8004e4e:	bf00      	nop
 8004e50:	e000      	b.n	8004e54 <DMA_CheckFifoParam+0xe8>
    break;
 8004e52:	bf00      	nop
    }
  }

  return status;
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop

08004e64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a38      	ldr	r2, [pc, #224]	@ (8004f58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d022      	beq.n	8004ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a36      	ldr	r2, [pc, #216]	@ (8004f5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d01d      	beq.n	8004ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a35      	ldr	r2, [pc, #212]	@ (8004f60 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d018      	beq.n	8004ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a33      	ldr	r2, [pc, #204]	@ (8004f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d013      	beq.n	8004ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a32      	ldr	r2, [pc, #200]	@ (8004f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00e      	beq.n	8004ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a30      	ldr	r2, [pc, #192]	@ (8004f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d009      	beq.n	8004ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a2f      	ldr	r2, [pc, #188]	@ (8004f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d004      	beq.n	8004ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8004f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d101      	bne.n	8004ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01a      	beq.n	8004f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	3b08      	subs	r3, #8
 8004ed4:	4a28      	ldr	r2, [pc, #160]	@ (8004f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	091b      	lsrs	r3, r3, #4
 8004edc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4b26      	ldr	r3, [pc, #152]	@ (8004f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a24      	ldr	r2, [pc, #144]	@ (8004f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ef0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f003 031f 	and.w	r3, r3, #31
 8004ef8:	2201      	movs	r2, #1
 8004efa:	409a      	lsls	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f00:	e024      	b.n	8004f4c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	3b10      	subs	r3, #16
 8004f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4a1c      	ldr	r2, [pc, #112]	@ (8004f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d806      	bhi.n	8004f2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d902      	bls.n	8004f2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3308      	adds	r3, #8
 8004f28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4b18      	ldr	r3, [pc, #96]	@ (8004f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	461a      	mov	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a16      	ldr	r2, [pc, #88]	@ (8004f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f3c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f003 031f 	and.w	r3, r3, #31
 8004f44:	2201      	movs	r2, #1
 8004f46:	409a      	lsls	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f4c:	bf00      	nop
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	58025408 	.word	0x58025408
 8004f5c:	5802541c 	.word	0x5802541c
 8004f60:	58025430 	.word	0x58025430
 8004f64:	58025444 	.word	0x58025444
 8004f68:	58025458 	.word	0x58025458
 8004f6c:	5802546c 	.word	0x5802546c
 8004f70:	58025480 	.word	0x58025480
 8004f74:	58025494 	.word	0x58025494
 8004f78:	cccccccd 	.word	0xcccccccd
 8004f7c:	16009600 	.word	0x16009600
 8004f80:	58025880 	.word	0x58025880
 8004f84:	aaaaaaab 	.word	0xaaaaaaab
 8004f88:	400204b8 	.word	0x400204b8
 8004f8c:	4002040f 	.word	0x4002040f
 8004f90:	10008200 	.word	0x10008200
 8004f94:	40020880 	.word	0x40020880

08004f98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d04a      	beq.n	8005044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d847      	bhi.n	8005044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a25      	ldr	r2, [pc, #148]	@ (8005050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d022      	beq.n	8005004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a24      	ldr	r2, [pc, #144]	@ (8005054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d01d      	beq.n	8005004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a22      	ldr	r2, [pc, #136]	@ (8005058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d018      	beq.n	8005004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a21      	ldr	r2, [pc, #132]	@ (800505c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d013      	beq.n	8005004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00e      	beq.n	8005004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1e      	ldr	r2, [pc, #120]	@ (8005064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d009      	beq.n	8005004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8005068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d004      	beq.n	8005004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800506c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d101      	bne.n	8005008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005004:	2301      	movs	r3, #1
 8005006:	e000      	b.n	800500a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005008:	2300      	movs	r3, #0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4b17      	ldr	r3, [pc, #92]	@ (8005070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005012:	4413      	add	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	461a      	mov	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a15      	ldr	r2, [pc, #84]	@ (8005074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005020:	671a      	str	r2, [r3, #112]	@ 0x70
 8005022:	e009      	b.n	8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4b14      	ldr	r3, [pc, #80]	@ (8005078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	461a      	mov	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a11      	ldr	r2, [pc, #68]	@ (800507c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005036:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3b01      	subs	r3, #1
 800503c:	2201      	movs	r2, #1
 800503e:	409a      	lsls	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005044:	bf00      	nop
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	58025408 	.word	0x58025408
 8005054:	5802541c 	.word	0x5802541c
 8005058:	58025430 	.word	0x58025430
 800505c:	58025444 	.word	0x58025444
 8005060:	58025458 	.word	0x58025458
 8005064:	5802546c 	.word	0x5802546c
 8005068:	58025480 	.word	0x58025480
 800506c:	58025494 	.word	0x58025494
 8005070:	1600963f 	.word	0x1600963f
 8005074:	58025940 	.word	0x58025940
 8005078:	1000823f 	.word	0x1000823f
 800507c:	40020940 	.word	0x40020940

08005080 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005080:	b480      	push	{r7}
 8005082:	b089      	sub	sp, #36	@ 0x24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800508a:	2300      	movs	r3, #0
 800508c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800508e:	4b89      	ldr	r3, [pc, #548]	@ (80052b4 <HAL_GPIO_Init+0x234>)
 8005090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005092:	e194      	b.n	80053be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	2101      	movs	r1, #1
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	fa01 f303 	lsl.w	r3, r1, r3
 80050a0:	4013      	ands	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8186 	beq.w	80053b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d005      	beq.n	80050c4 <HAL_GPIO_Init+0x44>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f003 0303 	and.w	r3, r3, #3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d130      	bne.n	8005126 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	2203      	movs	r2, #3
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	43db      	mvns	r3, r3
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	4013      	ands	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050fa:	2201      	movs	r2, #1
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	43db      	mvns	r3, r3
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4013      	ands	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	091b      	lsrs	r3, r3, #4
 8005110:	f003 0201 	and.w	r2, r3, #1
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	fa02 f303 	lsl.w	r3, r2, r3
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	4313      	orrs	r3, r2
 800511e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	2b03      	cmp	r3, #3
 8005130:	d017      	beq.n	8005162 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	2203      	movs	r2, #3
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	43db      	mvns	r3, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4013      	ands	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4313      	orrs	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d123      	bne.n	80051b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	08da      	lsrs	r2, r3, #3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	3208      	adds	r2, #8
 8005176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800517a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	220f      	movs	r2, #15
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	43db      	mvns	r3, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4013      	ands	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	08da      	lsrs	r2, r3, #3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3208      	adds	r2, #8
 80051b0:	69b9      	ldr	r1, [r7, #24]
 80051b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	2203      	movs	r2, #3
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	43db      	mvns	r3, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4013      	ands	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f003 0203 	and.w	r2, r3, #3
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 80e0 	beq.w	80053b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051f8:	4b2f      	ldr	r3, [pc, #188]	@ (80052b8 <HAL_GPIO_Init+0x238>)
 80051fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80051fe:	4a2e      	ldr	r2, [pc, #184]	@ (80052b8 <HAL_GPIO_Init+0x238>)
 8005200:	f043 0302 	orr.w	r3, r3, #2
 8005204:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8005208:	4b2b      	ldr	r3, [pc, #172]	@ (80052b8 <HAL_GPIO_Init+0x238>)
 800520a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005216:	4a29      	ldr	r2, [pc, #164]	@ (80052bc <HAL_GPIO_Init+0x23c>)
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	089b      	lsrs	r3, r3, #2
 800521c:	3302      	adds	r3, #2
 800521e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	220f      	movs	r2, #15
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	43db      	mvns	r3, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4013      	ands	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a20      	ldr	r2, [pc, #128]	@ (80052c0 <HAL_GPIO_Init+0x240>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d052      	beq.n	80052e8 <HAL_GPIO_Init+0x268>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a1f      	ldr	r2, [pc, #124]	@ (80052c4 <HAL_GPIO_Init+0x244>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d031      	beq.n	80052ae <HAL_GPIO_Init+0x22e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a1e      	ldr	r2, [pc, #120]	@ (80052c8 <HAL_GPIO_Init+0x248>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d02b      	beq.n	80052aa <HAL_GPIO_Init+0x22a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a1d      	ldr	r2, [pc, #116]	@ (80052cc <HAL_GPIO_Init+0x24c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d025      	beq.n	80052a6 <HAL_GPIO_Init+0x226>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a1c      	ldr	r2, [pc, #112]	@ (80052d0 <HAL_GPIO_Init+0x250>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d01f      	beq.n	80052a2 <HAL_GPIO_Init+0x222>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a1b      	ldr	r2, [pc, #108]	@ (80052d4 <HAL_GPIO_Init+0x254>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d019      	beq.n	800529e <HAL_GPIO_Init+0x21e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a1a      	ldr	r2, [pc, #104]	@ (80052d8 <HAL_GPIO_Init+0x258>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d013      	beq.n	800529a <HAL_GPIO_Init+0x21a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a19      	ldr	r2, [pc, #100]	@ (80052dc <HAL_GPIO_Init+0x25c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00d      	beq.n	8005296 <HAL_GPIO_Init+0x216>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a18      	ldr	r2, [pc, #96]	@ (80052e0 <HAL_GPIO_Init+0x260>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d007      	beq.n	8005292 <HAL_GPIO_Init+0x212>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a17      	ldr	r2, [pc, #92]	@ (80052e4 <HAL_GPIO_Init+0x264>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d101      	bne.n	800528e <HAL_GPIO_Init+0x20e>
 800528a:	2309      	movs	r3, #9
 800528c:	e02d      	b.n	80052ea <HAL_GPIO_Init+0x26a>
 800528e:	230a      	movs	r3, #10
 8005290:	e02b      	b.n	80052ea <HAL_GPIO_Init+0x26a>
 8005292:	2308      	movs	r3, #8
 8005294:	e029      	b.n	80052ea <HAL_GPIO_Init+0x26a>
 8005296:	2307      	movs	r3, #7
 8005298:	e027      	b.n	80052ea <HAL_GPIO_Init+0x26a>
 800529a:	2306      	movs	r3, #6
 800529c:	e025      	b.n	80052ea <HAL_GPIO_Init+0x26a>
 800529e:	2305      	movs	r3, #5
 80052a0:	e023      	b.n	80052ea <HAL_GPIO_Init+0x26a>
 80052a2:	2304      	movs	r3, #4
 80052a4:	e021      	b.n	80052ea <HAL_GPIO_Init+0x26a>
 80052a6:	2303      	movs	r3, #3
 80052a8:	e01f      	b.n	80052ea <HAL_GPIO_Init+0x26a>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e01d      	b.n	80052ea <HAL_GPIO_Init+0x26a>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e01b      	b.n	80052ea <HAL_GPIO_Init+0x26a>
 80052b2:	bf00      	nop
 80052b4:	58000080 	.word	0x58000080
 80052b8:	58024400 	.word	0x58024400
 80052bc:	58000400 	.word	0x58000400
 80052c0:	58020000 	.word	0x58020000
 80052c4:	58020400 	.word	0x58020400
 80052c8:	58020800 	.word	0x58020800
 80052cc:	58020c00 	.word	0x58020c00
 80052d0:	58021000 	.word	0x58021000
 80052d4:	58021400 	.word	0x58021400
 80052d8:	58021800 	.word	0x58021800
 80052dc:	58021c00 	.word	0x58021c00
 80052e0:	58022000 	.word	0x58022000
 80052e4:	58022400 	.word	0x58022400
 80052e8:	2300      	movs	r3, #0
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	f002 0203 	and.w	r2, r2, #3
 80052f0:	0092      	lsls	r2, r2, #2
 80052f2:	4093      	lsls	r3, r2
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052fa:	4938      	ldr	r1, [pc, #224]	@ (80053dc <HAL_GPIO_Init+0x35c>)
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	089b      	lsrs	r3, r3, #2
 8005300:	3302      	adds	r3, #2
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	43db      	mvns	r3, r3
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	4013      	ands	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800532e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	43db      	mvns	r3, r3
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	4013      	ands	r3, r2
 8005346:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800535c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	43db      	mvns	r3, r3
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4013      	ands	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	43db      	mvns	r3, r3
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	4013      	ands	r3, r2
 800539c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	3301      	adds	r3, #1
 80053bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f47f ae63 	bne.w	8005094 <HAL_GPIO_Init+0x14>
  }
}
 80053ce:	bf00      	nop
 80053d0:	bf00      	nop
 80053d2:	3724      	adds	r7, #36	@ 0x24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	58000400 	.word	0x58000400

080053e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	807b      	strh	r3, [r7, #2]
 80053ec:	4613      	mov	r3, r2
 80053ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053f0:	787b      	ldrb	r3, [r7, #1]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053f6:	887a      	ldrh	r2, [r7, #2]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80053fc:	e003      	b.n	8005406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80053fe:	887b      	ldrh	r3, [r7, #2]
 8005400:	041a      	lsls	r2, r3, #16
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	619a      	str	r2, [r3, #24]
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	af00      	add	r7, sp, #0
 8005418:	4603      	mov	r3, r0
 800541a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800541c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005420:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	4013      	ands	r3, r2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800542c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	4618      	mov	r0, r3
 800543a:	f7fb feab 	bl	8001194 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e08b      	b.n	8005572 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fb fb64 	bl	8000b3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2224      	movs	r2, #36	@ 0x24
 8005478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0201 	bic.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005498:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d107      	bne.n	80054c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054be:	609a      	str	r2, [r3, #8]
 80054c0:	e006      	b.n	80054d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80054ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d108      	bne.n	80054ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054e6:	605a      	str	r2, [r3, #4]
 80054e8:	e007      	b.n	80054fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6859      	ldr	r1, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	4b1d      	ldr	r3, [pc, #116]	@ (800557c <HAL_I2C_Init+0x134>)
 8005506:	430b      	orrs	r3, r1
 8005508:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005518:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69d9      	ldr	r1, [r3, #28]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1a      	ldr	r2, [r3, #32]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	02008000 	.word	0x02008000

08005580 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af02      	add	r7, sp, #8
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	607a      	str	r2, [r7, #4]
 800558a:	461a      	mov	r2, r3
 800558c:	460b      	mov	r3, r1
 800558e:	817b      	strh	r3, [r7, #10]
 8005590:	4613      	mov	r3, r2
 8005592:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b20      	cmp	r3, #32
 800559e:	f040 80fd 	bne.w	800579c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_I2C_Master_Transmit+0x30>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e0f6      	b.n	800579e <HAL_I2C_Master_Transmit+0x21e>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055b8:	f7fc fcc0 	bl	8001f3c <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	2319      	movs	r3, #25
 80055c4:	2201      	movs	r2, #1
 80055c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 fb1c 	bl	8005c08 <I2C_WaitOnFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e0e1      	b.n	800579e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2221      	movs	r2, #33	@ 0x21
 80055de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2210      	movs	r2, #16
 80055e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	893a      	ldrh	r2, [r7, #8]
 80055fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005606:	b29b      	uxth	r3, r3
 8005608:	2bff      	cmp	r3, #255	@ 0xff
 800560a:	d906      	bls.n	800561a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	22ff      	movs	r2, #255	@ 0xff
 8005610:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005612:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	e007      	b.n	800562a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005624:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005628:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800562e:	2b00      	cmp	r3, #0
 8005630:	d024      	beq.n	800567c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005636:	781a      	ldrb	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800564c:	b29b      	uxth	r3, r3
 800564e:	3b01      	subs	r3, #1
 8005650:	b29a      	uxth	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005666:	b2db      	uxtb	r3, r3
 8005668:	3301      	adds	r3, #1
 800566a:	b2da      	uxtb	r2, r3
 800566c:	8979      	ldrh	r1, [r7, #10]
 800566e:	4b4e      	ldr	r3, [pc, #312]	@ (80057a8 <HAL_I2C_Master_Transmit+0x228>)
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 fd17 	bl	80060a8 <I2C_TransferConfig>
 800567a:	e066      	b.n	800574a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005680:	b2da      	uxtb	r2, r3
 8005682:	8979      	ldrh	r1, [r7, #10]
 8005684:	4b48      	ldr	r3, [pc, #288]	@ (80057a8 <HAL_I2C_Master_Transmit+0x228>)
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fd0c 	bl	80060a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005690:	e05b      	b.n	800574a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	6a39      	ldr	r1, [r7, #32]
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 fb0f 	bl	8005cba <I2C_WaitOnTXISFlagUntilTimeout>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e07b      	b.n	800579e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056aa:	781a      	ldrb	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d034      	beq.n	800574a <HAL_I2C_Master_Transmit+0x1ca>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d130      	bne.n	800574a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	2200      	movs	r2, #0
 80056f0:	2180      	movs	r1, #128	@ 0x80
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 fa88 	bl	8005c08 <I2C_WaitOnFlagUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e04d      	b.n	800579e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005706:	b29b      	uxth	r3, r3
 8005708:	2bff      	cmp	r3, #255	@ 0xff
 800570a:	d90e      	bls.n	800572a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	22ff      	movs	r2, #255	@ 0xff
 8005710:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005716:	b2da      	uxtb	r2, r3
 8005718:	8979      	ldrh	r1, [r7, #10]
 800571a:	2300      	movs	r3, #0
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 fcc0 	bl	80060a8 <I2C_TransferConfig>
 8005728:	e00f      	b.n	800574a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800572e:	b29a      	uxth	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005738:	b2da      	uxtb	r2, r3
 800573a:	8979      	ldrh	r1, [r7, #10]
 800573c:	2300      	movs	r3, #0
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 fcaf 	bl	80060a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d19e      	bne.n	8005692 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	6a39      	ldr	r1, [r7, #32]
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 faf5 	bl	8005d48 <I2C_WaitOnSTOPFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e01a      	b.n	800579e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2220      	movs	r2, #32
 800576e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6859      	ldr	r1, [r3, #4]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	4b0c      	ldr	r3, [pc, #48]	@ (80057ac <HAL_I2C_Master_Transmit+0x22c>)
 800577c:	400b      	ands	r3, r1
 800577e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	e000      	b.n	800579e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800579c:	2302      	movs	r3, #2
  }
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	80002000 	.word	0x80002000
 80057ac:	fe00e800 	.word	0xfe00e800

080057b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	607a      	str	r2, [r7, #4]
 80057ba:	461a      	mov	r2, r3
 80057bc:	460b      	mov	r3, r1
 80057be:	817b      	strh	r3, [r7, #10]
 80057c0:	4613      	mov	r3, r2
 80057c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b20      	cmp	r3, #32
 80057ce:	f040 80db 	bne.w	8005988 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_I2C_Master_Receive+0x30>
 80057dc:	2302      	movs	r3, #2
 80057de:	e0d4      	b.n	800598a <HAL_I2C_Master_Receive+0x1da>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057e8:	f7fc fba8 	bl	8001f3c <HAL_GetTick>
 80057ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	2319      	movs	r3, #25
 80057f4:	2201      	movs	r2, #1
 80057f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fa04 	bl	8005c08 <I2C_WaitOnFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e0bf      	b.n	800598a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2222      	movs	r2, #34	@ 0x22
 800580e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2210      	movs	r2, #16
 8005816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	893a      	ldrh	r2, [r7, #8]
 800582a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005836:	b29b      	uxth	r3, r3
 8005838:	2bff      	cmp	r3, #255	@ 0xff
 800583a:	d90e      	bls.n	800585a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	22ff      	movs	r2, #255	@ 0xff
 8005840:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005846:	b2da      	uxtb	r2, r3
 8005848:	8979      	ldrh	r1, [r7, #10]
 800584a:	4b52      	ldr	r3, [pc, #328]	@ (8005994 <HAL_I2C_Master_Receive+0x1e4>)
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 fc28 	bl	80060a8 <I2C_TransferConfig>
 8005858:	e06d      	b.n	8005936 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005868:	b2da      	uxtb	r2, r3
 800586a:	8979      	ldrh	r1, [r7, #10]
 800586c:	4b49      	ldr	r3, [pc, #292]	@ (8005994 <HAL_I2C_Master_Receive+0x1e4>)
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 fc17 	bl	80060a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800587a:	e05c      	b.n	8005936 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	6a39      	ldr	r1, [r7, #32]
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 faa5 	bl	8005dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e07c      	b.n	800598a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d034      	beq.n	8005936 <HAL_I2C_Master_Receive+0x186>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d130      	bne.n	8005936 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	2200      	movs	r2, #0
 80058dc:	2180      	movs	r1, #128	@ 0x80
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 f992 	bl	8005c08 <I2C_WaitOnFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e04d      	b.n	800598a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2bff      	cmp	r3, #255	@ 0xff
 80058f6:	d90e      	bls.n	8005916 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	22ff      	movs	r2, #255	@ 0xff
 80058fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005902:	b2da      	uxtb	r2, r3
 8005904:	8979      	ldrh	r1, [r7, #10]
 8005906:	2300      	movs	r3, #0
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 fbca 	bl	80060a8 <I2C_TransferConfig>
 8005914:	e00f      	b.n	8005936 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005924:	b2da      	uxtb	r2, r3
 8005926:	8979      	ldrh	r1, [r7, #10]
 8005928:	2300      	movs	r3, #0
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fbb9 	bl	80060a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d19d      	bne.n	800587c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	6a39      	ldr	r1, [r7, #32]
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 f9ff 	bl	8005d48 <I2C_WaitOnSTOPFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e01a      	b.n	800598a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2220      	movs	r2, #32
 800595a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6859      	ldr	r1, [r3, #4]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4b0c      	ldr	r3, [pc, #48]	@ (8005998 <HAL_I2C_Master_Receive+0x1e8>)
 8005968:	400b      	ands	r3, r1
 800596a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005984:	2300      	movs	r3, #0
 8005986:	e000      	b.n	800598a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005988:	2302      	movs	r3, #2
  }
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	80002400 	.word	0x80002400
 8005998:	fe00e800 	.word	0xfe00e800

0800599c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08a      	sub	sp, #40	@ 0x28
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	607a      	str	r2, [r7, #4]
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	460b      	mov	r3, r1
 80059aa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80059ac:	2300      	movs	r3, #0
 80059ae:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b20      	cmp	r3, #32
 80059be:	f040 80e9 	bne.w	8005b94 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059d0:	d101      	bne.n	80059d6 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 80059d2:	2302      	movs	r3, #2
 80059d4:	e0df      	b.n	8005b96 <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_I2C_IsDeviceReady+0x48>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e0d8      	b.n	8005b96 <HAL_I2C_IsDeviceReady+0x1fa>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2224      	movs	r2, #36	@ 0x24
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d105      	bne.n	8005a0e <HAL_I2C_IsDeviceReady+0x72>
 8005a02:	897b      	ldrh	r3, [r7, #10]
 8005a04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a08:	4b65      	ldr	r3, [pc, #404]	@ (8005ba0 <HAL_I2C_IsDeviceReady+0x204>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	e004      	b.n	8005a18 <HAL_I2C_IsDeviceReady+0x7c>
 8005a0e:	897b      	ldrh	r3, [r7, #10]
 8005a10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a14:	4b63      	ldr	r3, [pc, #396]	@ (8005ba4 <HAL_I2C_IsDeviceReady+0x208>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005a1e:	f7fc fa8d 	bl	8001f3c <HAL_GetTick>
 8005a22:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b20      	cmp	r3, #32
 8005a30:	bf0c      	ite	eq
 8005a32:	2301      	moveq	r3, #1
 8005a34:	2300      	movne	r3, #0
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	f003 0310 	and.w	r3, r3, #16
 8005a44:	2b10      	cmp	r3, #16
 8005a46:	bf0c      	ite	eq
 8005a48:	2301      	moveq	r3, #1
 8005a4a:	2300      	movne	r3, #0
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005a50:	e034      	b.n	8005abc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a58:	d01a      	beq.n	8005a90 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a5a:	f7fc fa6f 	bl	8001f3c <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d302      	bcc.n	8005a70 <HAL_I2C_IsDeviceReady+0xd4>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10f      	bne.n	8005a90 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a7c:	f043 0220 	orr.w	r2, r3, #32
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e082      	b.n	8005b96 <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	bf0c      	ite	eq
 8005a9e:	2301      	moveq	r3, #1
 8005aa0:	2300      	movne	r3, #0
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	f003 0310 	and.w	r3, r3, #16
 8005ab0:	2b10      	cmp	r3, #16
 8005ab2:	bf0c      	ite	eq
 8005ab4:	2301      	moveq	r3, #1
 8005ab6:	2300      	movne	r3, #0
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005abc:	7fbb      	ldrb	r3, [r7, #30]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d102      	bne.n	8005ac8 <HAL_I2C_IsDeviceReady+0x12c>
 8005ac2:	7f7b      	ldrb	r3, [r7, #29]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0c4      	beq.n	8005a52 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	f003 0310 	and.w	r3, r3, #16
 8005ad2:	2b10      	cmp	r3, #16
 8005ad4:	d027      	beq.n	8005b26 <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2200      	movs	r2, #0
 8005ade:	2120      	movs	r1, #32
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 f891 	bl	8005c08 <I2C_WaitOnFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00e      	beq.n	8005b0a <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d107      	bne.n	8005b04 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2220      	movs	r2, #32
 8005afa:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	645a      	str	r2, [r3, #68]	@ 0x44
 8005b02:	e026      	b.n	8005b52 <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	77fb      	strb	r3, [r7, #31]
 8005b08:	e023      	b.n	8005b52 <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	e037      	b.n	8005b96 <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2210      	movs	r2, #16
 8005b2c:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2200      	movs	r2, #0
 8005b36:	2120      	movs	r1, #32
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f865 	bl	8005c08 <I2C_WaitOnFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	77fb      	strb	r3, [r7, #31]
 8005b48:	e003      	b.n	8005b52 <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	3301      	adds	r3, #1
 8005b56:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d904      	bls.n	8005b6a <HAL_I2C_IsDeviceReady+0x1ce>
 8005b60:	7ffb      	ldrb	r3, [r7, #31]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	f63f af43 	bhi.w	80059fa <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b80:	f043 0220 	orr.w	r2, r3, #32
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e000      	b.n	8005b96 <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8005b94:	2302      	movs	r3, #2
  }
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3720      	adds	r7, #32
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	02002000 	.word	0x02002000
 8005ba4:	02002800 	.word	0x02002800

08005ba8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d103      	bne.n	8005bde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d007      	beq.n	8005bfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0201 	orr.w	r2, r2, #1
 8005bfa:	619a      	str	r2, [r3, #24]
  }
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	4613      	mov	r3, r2
 8005c16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c18:	e03b      	b.n	8005c92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 f962 	bl	8005ee8 <I2C_IsErrorOccurred>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e041      	b.n	8005cb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c34:	d02d      	beq.n	8005c92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c36:	f7fc f981 	bl	8001f3c <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d302      	bcc.n	8005c4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d122      	bne.n	8005c92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	4013      	ands	r3, r2
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	bf0c      	ite	eq
 8005c5c:	2301      	moveq	r3, #1
 8005c5e:	2300      	movne	r3, #0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	461a      	mov	r2, r3
 8005c64:	79fb      	ldrb	r3, [r7, #7]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d113      	bne.n	8005c92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c6e:	f043 0220 	orr.w	r2, r3, #32
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e00f      	b.n	8005cb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	699a      	ldr	r2, [r3, #24]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	bf0c      	ite	eq
 8005ca2:	2301      	moveq	r3, #1
 8005ca4:	2300      	movne	r3, #0
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d0b4      	beq.n	8005c1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	60f8      	str	r0, [r7, #12]
 8005cc2:	60b9      	str	r1, [r7, #8]
 8005cc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005cc6:	e033      	b.n	8005d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	68b9      	ldr	r1, [r7, #8]
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f90b 	bl	8005ee8 <I2C_IsErrorOccurred>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e031      	b.n	8005d40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce2:	d025      	beq.n	8005d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce4:	f7fc f92a 	bl	8001f3c <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d302      	bcc.n	8005cfa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d11a      	bne.n	8005d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d013      	beq.n	8005d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0c:	f043 0220 	orr.w	r2, r3, #32
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e007      	b.n	8005d40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d1c4      	bne.n	8005cc8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d54:	e02f      	b.n	8005db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 f8c4 	bl	8005ee8 <I2C_IsErrorOccurred>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e02d      	b.n	8005dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d6a:	f7fc f8e7 	bl	8001f3c <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d302      	bcc.n	8005d80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d11a      	bne.n	8005db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	2b20      	cmp	r3, #32
 8005d8c:	d013      	beq.n	8005db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d92:	f043 0220 	orr.w	r2, r3, #32
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e007      	b.n	8005dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	d1c8      	bne.n	8005d56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005de0:	e071      	b.n	8005ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	68b9      	ldr	r1, [r7, #8]
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f87e 	bl	8005ee8 <I2C_IsErrorOccurred>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	f003 0320 	and.w	r3, r3, #32
 8005e00:	2b20      	cmp	r3, #32
 8005e02:	d13b      	bne.n	8005e7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005e04:	7dfb      	ldrb	r3, [r7, #23]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d138      	bne.n	8005e7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d105      	bne.n	8005e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005e20:	2300      	movs	r3, #0
 8005e22:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	f003 0310 	and.w	r3, r3, #16
 8005e2e:	2b10      	cmp	r3, #16
 8005e30:	d121      	bne.n	8005e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2210      	movs	r2, #16
 8005e38:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2204      	movs	r2, #4
 8005e3e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2220      	movs	r2, #32
 8005e46:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6859      	ldr	r1, [r3, #4]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	4b24      	ldr	r3, [pc, #144]	@ (8005ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005e54:	400b      	ands	r3, r1
 8005e56:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	75fb      	strb	r3, [r7, #23]
 8005e74:	e002      	b.n	8005e7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005e7c:	f7fc f85e 	bl	8001f3c <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d302      	bcc.n	8005e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d119      	bne.n	8005ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005e92:	7dfb      	ldrb	r3, [r7, #23]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d116      	bne.n	8005ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d00f      	beq.n	8005ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eaa:	f043 0220 	orr.w	r2, r3, #32
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d002      	beq.n	8005eda <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005ed4:	7dfb      	ldrb	r3, [r7, #23]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d083      	beq.n	8005de2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	fe00e800 	.word	0xfe00e800

08005ee8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08a      	sub	sp, #40	@ 0x28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	f003 0310 	and.w	r3, r3, #16
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d068      	beq.n	8005fe6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2210      	movs	r2, #16
 8005f1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f1c:	e049      	b.n	8005fb2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f24:	d045      	beq.n	8005fb2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f26:	f7fc f809 	bl	8001f3c <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d302      	bcc.n	8005f3c <I2C_IsErrorOccurred+0x54>
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d13a      	bne.n	8005fb2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f5e:	d121      	bne.n	8005fa4 <I2C_IsErrorOccurred+0xbc>
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f66:	d01d      	beq.n	8005fa4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005f68:	7cfb      	ldrb	r3, [r7, #19]
 8005f6a:	2b20      	cmp	r3, #32
 8005f6c:	d01a      	beq.n	8005fa4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f7c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005f7e:	f7fb ffdd 	bl	8001f3c <HAL_GetTick>
 8005f82:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f84:	e00e      	b.n	8005fa4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005f86:	f7fb ffd9 	bl	8001f3c <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b19      	cmp	r3, #25
 8005f92:	d907      	bls.n	8005fa4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	f043 0320 	orr.w	r3, r3, #32
 8005f9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005fa2:	e006      	b.n	8005fb2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d1e9      	bne.n	8005f86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d003      	beq.n	8005fc8 <I2C_IsErrorOccurred+0xe0>
 8005fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0aa      	beq.n	8005f1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d103      	bne.n	8005fd8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	f043 0304 	orr.w	r3, r3, #4
 8005fde:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00b      	beq.n	8006010 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	f043 0301 	orr.w	r3, r3, #1
 8005ffe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006008:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00b      	beq.n	8006032 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	f043 0308 	orr.w	r3, r3, #8
 8006020:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800602a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00b      	beq.n	8006054 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	f043 0302 	orr.w	r3, r3, #2
 8006042:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800604c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01c      	beq.n	8006096 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f7ff fdaf 	bl	8005bc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6859      	ldr	r1, [r3, #4]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	4b0d      	ldr	r3, [pc, #52]	@ (80060a4 <I2C_IsErrorOccurred+0x1bc>)
 800606e:	400b      	ands	r3, r1
 8006070:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	431a      	orrs	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2220      	movs	r2, #32
 8006082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006096:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800609a:	4618      	mov	r0, r3
 800609c:	3728      	adds	r7, #40	@ 0x28
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	fe00e800 	.word	0xfe00e800

080060a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	607b      	str	r3, [r7, #4]
 80060b2:	460b      	mov	r3, r1
 80060b4:	817b      	strh	r3, [r7, #10]
 80060b6:	4613      	mov	r3, r2
 80060b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060ba:	897b      	ldrh	r3, [r7, #10]
 80060bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060c0:	7a7b      	ldrb	r3, [r7, #9]
 80060c2:	041b      	lsls	r3, r3, #16
 80060c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060c8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060d6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	0d5b      	lsrs	r3, r3, #21
 80060e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80060e6:	4b08      	ldr	r3, [pc, #32]	@ (8006108 <I2C_TransferConfig+0x60>)
 80060e8:	430b      	orrs	r3, r1
 80060ea:	43db      	mvns	r3, r3
 80060ec:	ea02 0103 	and.w	r1, r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80060fa:	bf00      	nop
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	03ff63ff 	.word	0x03ff63ff

0800610c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b20      	cmp	r3, #32
 8006120:	d138      	bne.n	8006194 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800612c:	2302      	movs	r3, #2
 800612e:	e032      	b.n	8006196 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2224      	movs	r2, #36	@ 0x24
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0201 	bic.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800615e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6819      	ldr	r1, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0201 	orr.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006190:	2300      	movs	r3, #0
 8006192:	e000      	b.n	8006196 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006194:	2302      	movs	r3, #2
  }
}
 8006196:	4618      	mov	r0, r3
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b085      	sub	sp, #20
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b20      	cmp	r3, #32
 80061b6:	d139      	bne.n	800622c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e033      	b.n	800622e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2224      	movs	r2, #36	@ 0x24
 80061d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0201 	bic.w	r2, r2, #1
 80061e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80061f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	021b      	lsls	r3, r3, #8
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0201 	orr.w	r2, r2, #1
 8006216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	e000      	b.n	800622e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800622c:	2302      	movs	r3, #2
  }
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
	...

0800623c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006244:	4b29      	ldr	r3, [pc, #164]	@ (80062ec <HAL_PWREx_ConfigSupply+0xb0>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	2b06      	cmp	r3, #6
 800624e:	d00a      	beq.n	8006266 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006250:	4b26      	ldr	r3, [pc, #152]	@ (80062ec <HAL_PWREx_ConfigSupply+0xb0>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	429a      	cmp	r2, r3
 800625c:	d001      	beq.n	8006262 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e040      	b.n	80062e4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	e03e      	b.n	80062e4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006266:	4b21      	ldr	r3, [pc, #132]	@ (80062ec <HAL_PWREx_ConfigSupply+0xb0>)
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800626e:	491f      	ldr	r1, [pc, #124]	@ (80062ec <HAL_PWREx_ConfigSupply+0xb0>)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4313      	orrs	r3, r2
 8006274:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006276:	f7fb fe61 	bl	8001f3c <HAL_GetTick>
 800627a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800627c:	e009      	b.n	8006292 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800627e:	f7fb fe5d 	bl	8001f3c <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800628c:	d901      	bls.n	8006292 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e028      	b.n	80062e4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006292:	4b16      	ldr	r3, [pc, #88]	@ (80062ec <HAL_PWREx_ConfigSupply+0xb0>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800629a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800629e:	d1ee      	bne.n	800627e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b1e      	cmp	r3, #30
 80062a4:	d008      	beq.n	80062b8 <HAL_PWREx_ConfigSupply+0x7c>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80062aa:	d005      	beq.n	80062b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b1d      	cmp	r3, #29
 80062b0:	d002      	beq.n	80062b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b2d      	cmp	r3, #45	@ 0x2d
 80062b6:	d114      	bne.n	80062e2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80062b8:	f7fb fe40 	bl	8001f3c <HAL_GetTick>
 80062bc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80062be:	e009      	b.n	80062d4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80062c0:	f7fb fe3c 	bl	8001f3c <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062ce:	d901      	bls.n	80062d4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e007      	b.n	80062e4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80062d4:	4b05      	ldr	r3, [pc, #20]	@ (80062ec <HAL_PWREx_ConfigSupply+0xb0>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062e0:	d1ee      	bne.n	80062c0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	58024800 	.word	0x58024800

080062f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b08c      	sub	sp, #48	@ 0x30
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d102      	bne.n	8006304 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f000 bc1f 	b.w	8006b42 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 80b3 	beq.w	8006478 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006312:	4b95      	ldr	r3, [pc, #596]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800631a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800631c:	4b92      	ldr	r3, [pc, #584]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 800631e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006320:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006324:	2b10      	cmp	r3, #16
 8006326:	d007      	beq.n	8006338 <HAL_RCC_OscConfig+0x48>
 8006328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800632a:	2b18      	cmp	r3, #24
 800632c:	d112      	bne.n	8006354 <HAL_RCC_OscConfig+0x64>
 800632e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006330:	f003 0303 	and.w	r3, r3, #3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d10d      	bne.n	8006354 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006338:	4b8b      	ldr	r3, [pc, #556]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 8098 	beq.w	8006476 <HAL_RCC_OscConfig+0x186>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	f040 8093 	bne.w	8006476 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e3f6      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800635c:	d106      	bne.n	800636c <HAL_RCC_OscConfig+0x7c>
 800635e:	4b82      	ldr	r3, [pc, #520]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a81      	ldr	r2, [pc, #516]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 8006364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	e058      	b.n	800641e <HAL_RCC_OscConfig+0x12e>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d112      	bne.n	800639a <HAL_RCC_OscConfig+0xaa>
 8006374:	4b7c      	ldr	r3, [pc, #496]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a7b      	ldr	r2, [pc, #492]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 800637a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	4b79      	ldr	r3, [pc, #484]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a78      	ldr	r2, [pc, #480]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 8006386:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800638a:	6013      	str	r3, [r2, #0]
 800638c:	4b76      	ldr	r3, [pc, #472]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a75      	ldr	r2, [pc, #468]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 8006392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	e041      	b.n	800641e <HAL_RCC_OscConfig+0x12e>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063a2:	d112      	bne.n	80063ca <HAL_RCC_OscConfig+0xda>
 80063a4:	4b70      	ldr	r3, [pc, #448]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a6f      	ldr	r2, [pc, #444]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 80063aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	4b6d      	ldr	r3, [pc, #436]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a6c      	ldr	r2, [pc, #432]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 80063b6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a69      	ldr	r2, [pc, #420]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 80063c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	e029      	b.n	800641e <HAL_RCC_OscConfig+0x12e>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80063d2:	d112      	bne.n	80063fa <HAL_RCC_OscConfig+0x10a>
 80063d4:	4b64      	ldr	r3, [pc, #400]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a63      	ldr	r2, [pc, #396]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 80063da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	4b61      	ldr	r3, [pc, #388]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a60      	ldr	r2, [pc, #384]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 80063e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	4b5e      	ldr	r3, [pc, #376]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a5d      	ldr	r2, [pc, #372]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 80063f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	e011      	b.n	800641e <HAL_RCC_OscConfig+0x12e>
 80063fa:	4b5b      	ldr	r3, [pc, #364]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a5a      	ldr	r2, [pc, #360]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 8006400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	4b58      	ldr	r3, [pc, #352]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a57      	ldr	r2, [pc, #348]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 800640c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	4b55      	ldr	r3, [pc, #340]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a54      	ldr	r2, [pc, #336]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 8006418:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800641c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d013      	beq.n	800644e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006426:	f7fb fd89 	bl	8001f3c <HAL_GetTick>
 800642a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800642c:	e008      	b.n	8006440 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800642e:	f7fb fd85 	bl	8001f3c <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b64      	cmp	r3, #100	@ 0x64
 800643a:	d901      	bls.n	8006440 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e380      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006440:	4b49      	ldr	r3, [pc, #292]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d0f0      	beq.n	800642e <HAL_RCC_OscConfig+0x13e>
 800644c:	e014      	b.n	8006478 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644e:	f7fb fd75 	bl	8001f3c <HAL_GetTick>
 8006452:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006454:	e008      	b.n	8006468 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006456:	f7fb fd71 	bl	8001f3c <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b64      	cmp	r3, #100	@ 0x64
 8006462:	d901      	bls.n	8006468 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e36c      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006468:	4b3f      	ldr	r3, [pc, #252]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1f0      	bne.n	8006456 <HAL_RCC_OscConfig+0x166>
 8006474:	e000      	b.n	8006478 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006476:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 808c 	beq.w	800659e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006486:	4b38      	ldr	r3, [pc, #224]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800648e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006490:	4b35      	ldr	r3, [pc, #212]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 8006492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006494:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <HAL_RCC_OscConfig+0x1bc>
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	2b18      	cmp	r3, #24
 80064a0:	d137      	bne.n	8006512 <HAL_RCC_OscConfig+0x222>
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	f003 0303 	and.w	r3, r3, #3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d132      	bne.n	8006512 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064ac:	4b2e      	ldr	r3, [pc, #184]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <HAL_RCC_OscConfig+0x1d4>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e33e      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064c4:	4b28      	ldr	r3, [pc, #160]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f023 0219 	bic.w	r2, r3, #25
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	4925      	ldr	r1, [pc, #148]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d6:	f7fb fd31 	bl	8001f3c <HAL_GetTick>
 80064da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064dc:	e008      	b.n	80064f0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064de:	f7fb fd2d 	bl	8001f3c <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d901      	bls.n	80064f0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e328      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d0f0      	beq.n	80064de <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	061b      	lsls	r3, r3, #24
 800650a:	4917      	ldr	r1, [pc, #92]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 800650c:	4313      	orrs	r3, r2
 800650e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006510:	e045      	b.n	800659e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d028      	beq.n	800656c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800651a:	4b13      	ldr	r3, [pc, #76]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f023 0219 	bic.w	r2, r3, #25
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	4910      	ldr	r1, [pc, #64]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 8006528:	4313      	orrs	r3, r2
 800652a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652c:	f7fb fd06 	bl	8001f3c <HAL_GetTick>
 8006530:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006534:	f7fb fd02 	bl	8001f3c <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e2fd      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006546:	4b08      	ldr	r3, [pc, #32]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0f0      	beq.n	8006534 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006552:	4b05      	ldr	r3, [pc, #20]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	061b      	lsls	r3, r3, #24
 8006560:	4901      	ldr	r1, [pc, #4]	@ (8006568 <HAL_RCC_OscConfig+0x278>)
 8006562:	4313      	orrs	r3, r2
 8006564:	604b      	str	r3, [r1, #4]
 8006566:	e01a      	b.n	800659e <HAL_RCC_OscConfig+0x2ae>
 8006568:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800656c:	4b97      	ldr	r3, [pc, #604]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a96      	ldr	r2, [pc, #600]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 8006572:	f023 0301 	bic.w	r3, r3, #1
 8006576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006578:	f7fb fce0 	bl	8001f3c <HAL_GetTick>
 800657c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006580:	f7fb fcdc 	bl	8001f3c <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e2d7      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006592:	4b8e      	ldr	r3, [pc, #568]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0304 	and.w	r3, r3, #4
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1f0      	bne.n	8006580 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0310 	and.w	r3, r3, #16
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d06a      	beq.n	8006680 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065aa:	4b88      	ldr	r3, [pc, #544]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065b4:	4b85      	ldr	r3, [pc, #532]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 80065b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d007      	beq.n	80065d0 <HAL_RCC_OscConfig+0x2e0>
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	2b18      	cmp	r3, #24
 80065c4:	d11b      	bne.n	80065fe <HAL_RCC_OscConfig+0x30e>
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d116      	bne.n	80065fe <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065d0:	4b7e      	ldr	r3, [pc, #504]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d005      	beq.n	80065e8 <HAL_RCC_OscConfig+0x2f8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	2b80      	cmp	r3, #128	@ 0x80
 80065e2:	d001      	beq.n	80065e8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e2ac      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065e8:	4b78      	ldr	r3, [pc, #480]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	061b      	lsls	r3, r3, #24
 80065f6:	4975      	ldr	r1, [pc, #468]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065fc:	e040      	b.n	8006680 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d023      	beq.n	800664e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006606:	4b71      	ldr	r3, [pc, #452]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a70      	ldr	r2, [pc, #448]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 800660c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006612:	f7fb fc93 	bl	8001f3c <HAL_GetTick>
 8006616:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006618:	e008      	b.n	800662c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800661a:	f7fb fc8f 	bl	8001f3c <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	2b02      	cmp	r3, #2
 8006626:	d901      	bls.n	800662c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e28a      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800662c:	4b67      	ldr	r3, [pc, #412]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0f0      	beq.n	800661a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006638:	4b64      	ldr	r3, [pc, #400]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	061b      	lsls	r3, r3, #24
 8006646:	4961      	ldr	r1, [pc, #388]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 8006648:	4313      	orrs	r3, r2
 800664a:	60cb      	str	r3, [r1, #12]
 800664c:	e018      	b.n	8006680 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800664e:	4b5f      	ldr	r3, [pc, #380]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a5e      	ldr	r2, [pc, #376]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 8006654:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800665a:	f7fb fc6f 	bl	8001f3c <HAL_GetTick>
 800665e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006660:	e008      	b.n	8006674 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006662:	f7fb fc6b 	bl	8001f3c <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d901      	bls.n	8006674 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e266      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006674:	4b55      	ldr	r3, [pc, #340]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1f0      	bne.n	8006662 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0308 	and.w	r3, r3, #8
 8006688:	2b00      	cmp	r3, #0
 800668a:	d036      	beq.n	80066fa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d019      	beq.n	80066c8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006694:	4b4d      	ldr	r3, [pc, #308]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 8006696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006698:	4a4c      	ldr	r2, [pc, #304]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a0:	f7fb fc4c 	bl	8001f3c <HAL_GetTick>
 80066a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066a6:	e008      	b.n	80066ba <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066a8:	f7fb fc48 	bl	8001f3c <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e243      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066ba:	4b44      	ldr	r3, [pc, #272]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 80066bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d0f0      	beq.n	80066a8 <HAL_RCC_OscConfig+0x3b8>
 80066c6:	e018      	b.n	80066fa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066c8:	4b40      	ldr	r3, [pc, #256]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 80066ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066cc:	4a3f      	ldr	r2, [pc, #252]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 80066ce:	f023 0301 	bic.w	r3, r3, #1
 80066d2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d4:	f7fb fc32 	bl	8001f3c <HAL_GetTick>
 80066d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066da:	e008      	b.n	80066ee <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066dc:	f7fb fc2e 	bl	8001f3c <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e229      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066ee:	4b37      	ldr	r3, [pc, #220]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 80066f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1f0      	bne.n	80066dc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b00      	cmp	r3, #0
 8006704:	d036      	beq.n	8006774 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d019      	beq.n	8006742 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800670e:	4b2f      	ldr	r3, [pc, #188]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a2e      	ldr	r2, [pc, #184]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 8006714:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006718:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800671a:	f7fb fc0f 	bl	8001f3c <HAL_GetTick>
 800671e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006720:	e008      	b.n	8006734 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006722:	f7fb fc0b 	bl	8001f3c <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d901      	bls.n	8006734 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e206      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006734:	4b25      	ldr	r3, [pc, #148]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0f0      	beq.n	8006722 <HAL_RCC_OscConfig+0x432>
 8006740:	e018      	b.n	8006774 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006742:	4b22      	ldr	r3, [pc, #136]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a21      	ldr	r2, [pc, #132]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 8006748:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800674c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800674e:	f7fb fbf5 	bl	8001f3c <HAL_GetTick>
 8006752:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006754:	e008      	b.n	8006768 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006756:	f7fb fbf1 	bl	8001f3c <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d901      	bls.n	8006768 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e1ec      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006768:	4b18      	ldr	r3, [pc, #96]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1f0      	bne.n	8006756 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 80af 	beq.w	80068e0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006782:	4b13      	ldr	r3, [pc, #76]	@ (80067d0 <HAL_RCC_OscConfig+0x4e0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a12      	ldr	r2, [pc, #72]	@ (80067d0 <HAL_RCC_OscConfig+0x4e0>)
 8006788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800678c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800678e:	f7fb fbd5 	bl	8001f3c <HAL_GetTick>
 8006792:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006794:	e008      	b.n	80067a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006796:	f7fb fbd1 	bl	8001f3c <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b64      	cmp	r3, #100	@ 0x64
 80067a2:	d901      	bls.n	80067a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e1cc      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067a8:	4b09      	ldr	r3, [pc, #36]	@ (80067d0 <HAL_RCC_OscConfig+0x4e0>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d0f0      	beq.n	8006796 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d10b      	bne.n	80067d4 <HAL_RCC_OscConfig+0x4e4>
 80067bc:	4b03      	ldr	r3, [pc, #12]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 80067be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c0:	4a02      	ldr	r2, [pc, #8]	@ (80067cc <HAL_RCC_OscConfig+0x4dc>)
 80067c2:	f043 0301 	orr.w	r3, r3, #1
 80067c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80067c8:	e05b      	b.n	8006882 <HAL_RCC_OscConfig+0x592>
 80067ca:	bf00      	nop
 80067cc:	58024400 	.word	0x58024400
 80067d0:	58024800 	.word	0x58024800
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d112      	bne.n	8006802 <HAL_RCC_OscConfig+0x512>
 80067dc:	4b9d      	ldr	r3, [pc, #628]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80067de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e0:	4a9c      	ldr	r2, [pc, #624]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80067e2:	f023 0301 	bic.w	r3, r3, #1
 80067e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80067e8:	4b9a      	ldr	r3, [pc, #616]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80067ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ec:	4a99      	ldr	r2, [pc, #612]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80067ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80067f4:	4b97      	ldr	r3, [pc, #604]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80067f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067f8:	4a96      	ldr	r2, [pc, #600]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80067fa:	f023 0304 	bic.w	r3, r3, #4
 80067fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006800:	e03f      	b.n	8006882 <HAL_RCC_OscConfig+0x592>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	2b05      	cmp	r3, #5
 8006808:	d112      	bne.n	8006830 <HAL_RCC_OscConfig+0x540>
 800680a:	4b92      	ldr	r3, [pc, #584]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 800680c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800680e:	4a91      	ldr	r2, [pc, #580]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006810:	f043 0304 	orr.w	r3, r3, #4
 8006814:	6713      	str	r3, [r2, #112]	@ 0x70
 8006816:	4b8f      	ldr	r3, [pc, #572]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800681a:	4a8e      	ldr	r2, [pc, #568]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 800681c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006820:	6713      	str	r3, [r2, #112]	@ 0x70
 8006822:	4b8c      	ldr	r3, [pc, #560]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006826:	4a8b      	ldr	r2, [pc, #556]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006828:	f043 0301 	orr.w	r3, r3, #1
 800682c:	6713      	str	r3, [r2, #112]	@ 0x70
 800682e:	e028      	b.n	8006882 <HAL_RCC_OscConfig+0x592>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	2b85      	cmp	r3, #133	@ 0x85
 8006836:	d112      	bne.n	800685e <HAL_RCC_OscConfig+0x56e>
 8006838:	4b86      	ldr	r3, [pc, #536]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 800683a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800683c:	4a85      	ldr	r2, [pc, #532]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 800683e:	f043 0304 	orr.w	r3, r3, #4
 8006842:	6713      	str	r3, [r2, #112]	@ 0x70
 8006844:	4b83      	ldr	r3, [pc, #524]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006848:	4a82      	ldr	r2, [pc, #520]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 800684a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800684e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006850:	4b80      	ldr	r3, [pc, #512]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006854:	4a7f      	ldr	r2, [pc, #508]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006856:	f043 0301 	orr.w	r3, r3, #1
 800685a:	6713      	str	r3, [r2, #112]	@ 0x70
 800685c:	e011      	b.n	8006882 <HAL_RCC_OscConfig+0x592>
 800685e:	4b7d      	ldr	r3, [pc, #500]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006862:	4a7c      	ldr	r2, [pc, #496]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006864:	f023 0301 	bic.w	r3, r3, #1
 8006868:	6713      	str	r3, [r2, #112]	@ 0x70
 800686a:	4b7a      	ldr	r3, [pc, #488]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800686e:	4a79      	ldr	r2, [pc, #484]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006870:	f023 0304 	bic.w	r3, r3, #4
 8006874:	6713      	str	r3, [r2, #112]	@ 0x70
 8006876:	4b77      	ldr	r3, [pc, #476]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687a:	4a76      	ldr	r2, [pc, #472]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 800687c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006880:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d015      	beq.n	80068b6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688a:	f7fb fb57 	bl	8001f3c <HAL_GetTick>
 800688e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006890:	e00a      	b.n	80068a8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006892:	f7fb fb53 	bl	8001f3c <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e14c      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068a8:	4b6a      	ldr	r3, [pc, #424]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80068aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d0ee      	beq.n	8006892 <HAL_RCC_OscConfig+0x5a2>
 80068b4:	e014      	b.n	80068e0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b6:	f7fb fb41 	bl	8001f3c <HAL_GetTick>
 80068ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068bc:	e00a      	b.n	80068d4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068be:	f7fb fb3d 	bl	8001f3c <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e136      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068d4:	4b5f      	ldr	r3, [pc, #380]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80068d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1ee      	bne.n	80068be <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 812b 	beq.w	8006b40 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80068ea:	4b5a      	ldr	r3, [pc, #360]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068f2:	2b18      	cmp	r3, #24
 80068f4:	f000 80bb 	beq.w	8006a6e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	f040 8095 	bne.w	8006a2c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006902:	4b54      	ldr	r3, [pc, #336]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a53      	ldr	r2, [pc, #332]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006908:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800690c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800690e:	f7fb fb15 	bl	8001f3c <HAL_GetTick>
 8006912:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006914:	e008      	b.n	8006928 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006916:	f7fb fb11 	bl	8001f3c <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d901      	bls.n	8006928 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e10c      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006928:	4b4a      	ldr	r3, [pc, #296]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1f0      	bne.n	8006916 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006934:	4b47      	ldr	r3, [pc, #284]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006936:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006938:	4b47      	ldr	r3, [pc, #284]	@ (8006a58 <HAL_RCC_OscConfig+0x768>)
 800693a:	4013      	ands	r3, r2
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006944:	0112      	lsls	r2, r2, #4
 8006946:	430a      	orrs	r2, r1
 8006948:	4942      	ldr	r1, [pc, #264]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 800694a:	4313      	orrs	r3, r2
 800694c:	628b      	str	r3, [r1, #40]	@ 0x28
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006952:	3b01      	subs	r3, #1
 8006954:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800695c:	3b01      	subs	r3, #1
 800695e:	025b      	lsls	r3, r3, #9
 8006960:	b29b      	uxth	r3, r3
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006968:	3b01      	subs	r3, #1
 800696a:	041b      	lsls	r3, r3, #16
 800696c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006976:	3b01      	subs	r3, #1
 8006978:	061b      	lsls	r3, r3, #24
 800697a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800697e:	4935      	ldr	r1, [pc, #212]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006980:	4313      	orrs	r3, r2
 8006982:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006984:	4b33      	ldr	r3, [pc, #204]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006988:	4a32      	ldr	r2, [pc, #200]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 800698a:	f023 0301 	bic.w	r3, r3, #1
 800698e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006990:	4b30      	ldr	r3, [pc, #192]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006994:	4b31      	ldr	r3, [pc, #196]	@ (8006a5c <HAL_RCC_OscConfig+0x76c>)
 8006996:	4013      	ands	r3, r2
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800699c:	00d2      	lsls	r2, r2, #3
 800699e:	492d      	ldr	r1, [pc, #180]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80069a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80069a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a8:	f023 020c 	bic.w	r2, r3, #12
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b0:	4928      	ldr	r1, [pc, #160]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80069b6:	4b27      	ldr	r3, [pc, #156]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80069b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ba:	f023 0202 	bic.w	r2, r3, #2
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c2:	4924      	ldr	r1, [pc, #144]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069c8:	4b22      	ldr	r3, [pc, #136]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80069ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069cc:	4a21      	ldr	r2, [pc, #132]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80069ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d4:	4b1f      	ldr	r3, [pc, #124]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80069d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d8:	4a1e      	ldr	r2, [pc, #120]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80069da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80069e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80069e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80069ec:	4b19      	ldr	r3, [pc, #100]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80069ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f0:	4a18      	ldr	r2, [pc, #96]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80069f2:	f043 0301 	orr.w	r3, r3, #1
 80069f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069f8:	4b16      	ldr	r3, [pc, #88]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a15      	ldr	r2, [pc, #84]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 80069fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a04:	f7fb fa9a 	bl	8001f3c <HAL_GetTick>
 8006a08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a0c:	f7fb fa96 	bl	8001f3c <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e091      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0f0      	beq.n	8006a0c <HAL_RCC_OscConfig+0x71c>
 8006a2a:	e089      	b.n	8006b40 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a2c:	4b09      	ldr	r3, [pc, #36]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a08      	ldr	r2, [pc, #32]	@ (8006a54 <HAL_RCC_OscConfig+0x764>)
 8006a32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a38:	f7fb fa80 	bl	8001f3c <HAL_GetTick>
 8006a3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a3e:	e00f      	b.n	8006a60 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a40:	f7fb fa7c 	bl	8001f3c <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d908      	bls.n	8006a60 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e077      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
 8006a52:	bf00      	nop
 8006a54:	58024400 	.word	0x58024400
 8006a58:	fffffc0c 	.word	0xfffffc0c
 8006a5c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a60:	4b3a      	ldr	r3, [pc, #232]	@ (8006b4c <HAL_RCC_OscConfig+0x85c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e9      	bne.n	8006a40 <HAL_RCC_OscConfig+0x750>
 8006a6c:	e068      	b.n	8006b40 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006a6e:	4b37      	ldr	r3, [pc, #220]	@ (8006b4c <HAL_RCC_OscConfig+0x85c>)
 8006a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a72:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a74:	4b35      	ldr	r3, [pc, #212]	@ (8006b4c <HAL_RCC_OscConfig+0x85c>)
 8006a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a78:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d031      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f003 0203 	and.w	r2, r3, #3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d12a      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	091b      	lsrs	r3, r3, #4
 8006a94:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d122      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aaa:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d11a      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	0a5b      	lsrs	r3, r3, #9
 8006ab4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006abc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d111      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	0c1b      	lsrs	r3, r3, #16
 8006ac6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ace:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d108      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	0e1b      	lsrs	r3, r3, #24
 8006ad8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d001      	beq.n	8006aea <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e02b      	b.n	8006b42 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006aea:	4b18      	ldr	r3, [pc, #96]	@ (8006b4c <HAL_RCC_OscConfig+0x85c>)
 8006aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aee:	08db      	lsrs	r3, r3, #3
 8006af0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006af4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d01f      	beq.n	8006b40 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006b00:	4b12      	ldr	r3, [pc, #72]	@ (8006b4c <HAL_RCC_OscConfig+0x85c>)
 8006b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b04:	4a11      	ldr	r2, [pc, #68]	@ (8006b4c <HAL_RCC_OscConfig+0x85c>)
 8006b06:	f023 0301 	bic.w	r3, r3, #1
 8006b0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b0c:	f7fb fa16 	bl	8001f3c <HAL_GetTick>
 8006b10:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006b12:	bf00      	nop
 8006b14:	f7fb fa12 	bl	8001f3c <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d0f9      	beq.n	8006b14 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b20:	4b0a      	ldr	r3, [pc, #40]	@ (8006b4c <HAL_RCC_OscConfig+0x85c>)
 8006b22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b24:	4b0a      	ldr	r3, [pc, #40]	@ (8006b50 <HAL_RCC_OscConfig+0x860>)
 8006b26:	4013      	ands	r3, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006b2c:	00d2      	lsls	r2, r2, #3
 8006b2e:	4907      	ldr	r1, [pc, #28]	@ (8006b4c <HAL_RCC_OscConfig+0x85c>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006b34:	4b05      	ldr	r3, [pc, #20]	@ (8006b4c <HAL_RCC_OscConfig+0x85c>)
 8006b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b38:	4a04      	ldr	r2, [pc, #16]	@ (8006b4c <HAL_RCC_OscConfig+0x85c>)
 8006b3a:	f043 0301 	orr.w	r3, r3, #1
 8006b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3730      	adds	r7, #48	@ 0x30
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	58024400 	.word	0x58024400
 8006b50:	ffff0007 	.word	0xffff0007

08006b54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e19c      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b68:	4b8a      	ldr	r3, [pc, #552]	@ (8006d94 <HAL_RCC_ClockConfig+0x240>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 030f 	and.w	r3, r3, #15
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d910      	bls.n	8006b98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b76:	4b87      	ldr	r3, [pc, #540]	@ (8006d94 <HAL_RCC_ClockConfig+0x240>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f023 020f 	bic.w	r2, r3, #15
 8006b7e:	4985      	ldr	r1, [pc, #532]	@ (8006d94 <HAL_RCC_ClockConfig+0x240>)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b86:	4b83      	ldr	r3, [pc, #524]	@ (8006d94 <HAL_RCC_ClockConfig+0x240>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 030f 	and.w	r3, r3, #15
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d001      	beq.n	8006b98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e184      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d010      	beq.n	8006bc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691a      	ldr	r2, [r3, #16]
 8006ba8:	4b7b      	ldr	r3, [pc, #492]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d908      	bls.n	8006bc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006bb4:	4b78      	ldr	r3, [pc, #480]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	4975      	ldr	r1, [pc, #468]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0308 	and.w	r3, r3, #8
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d010      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	695a      	ldr	r2, [r3, #20]
 8006bd6:	4b70      	ldr	r3, [pc, #448]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d908      	bls.n	8006bf4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006be2:	4b6d      	ldr	r3, [pc, #436]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	496a      	ldr	r1, [pc, #424]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0310 	and.w	r3, r3, #16
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d010      	beq.n	8006c22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	699a      	ldr	r2, [r3, #24]
 8006c04:	4b64      	ldr	r3, [pc, #400]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d908      	bls.n	8006c22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c10:	4b61      	ldr	r3, [pc, #388]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	495e      	ldr	r1, [pc, #376]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d010      	beq.n	8006c50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	69da      	ldr	r2, [r3, #28]
 8006c32:	4b59      	ldr	r3, [pc, #356]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d908      	bls.n	8006c50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c3e:	4b56      	ldr	r3, [pc, #344]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	4953      	ldr	r1, [pc, #332]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0302 	and.w	r3, r3, #2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d010      	beq.n	8006c7e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	4b4d      	ldr	r3, [pc, #308]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d908      	bls.n	8006c7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c6c:	4b4a      	ldr	r3, [pc, #296]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	f023 020f 	bic.w	r2, r3, #15
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	4947      	ldr	r1, [pc, #284]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d055      	beq.n	8006d36 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c8a:	4b43      	ldr	r3, [pc, #268]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	4940      	ldr	r1, [pc, #256]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d107      	bne.n	8006cb4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ca4:	4b3c      	ldr	r3, [pc, #240]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d121      	bne.n	8006cf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e0f6      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d107      	bne.n	8006ccc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cbc:	4b36      	ldr	r3, [pc, #216]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d115      	bne.n	8006cf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e0ea      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d107      	bne.n	8006ce4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006cd4:	4b30      	ldr	r3, [pc, #192]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d109      	bne.n	8006cf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e0de      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e0d6      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006cf4:	4b28      	ldr	r3, [pc, #160]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f023 0207 	bic.w	r2, r3, #7
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	4925      	ldr	r1, [pc, #148]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d06:	f7fb f919 	bl	8001f3c <HAL_GetTick>
 8006d0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d0c:	e00a      	b.n	8006d24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d0e:	f7fb f915 	bl	8001f3c <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e0be      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d24:	4b1c      	ldr	r3, [pc, #112]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	00db      	lsls	r3, r3, #3
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d1eb      	bne.n	8006d0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d010      	beq.n	8006d64 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	4b14      	ldr	r3, [pc, #80]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d208      	bcs.n	8006d64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d52:	4b11      	ldr	r3, [pc, #68]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	f023 020f 	bic.w	r2, r3, #15
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	490e      	ldr	r1, [pc, #56]	@ (8006d98 <HAL_RCC_ClockConfig+0x244>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d64:	4b0b      	ldr	r3, [pc, #44]	@ (8006d94 <HAL_RCC_ClockConfig+0x240>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 030f 	and.w	r3, r3, #15
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d214      	bcs.n	8006d9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d72:	4b08      	ldr	r3, [pc, #32]	@ (8006d94 <HAL_RCC_ClockConfig+0x240>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f023 020f 	bic.w	r2, r3, #15
 8006d7a:	4906      	ldr	r1, [pc, #24]	@ (8006d94 <HAL_RCC_ClockConfig+0x240>)
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d82:	4b04      	ldr	r3, [pc, #16]	@ (8006d94 <HAL_RCC_ClockConfig+0x240>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 030f 	and.w	r3, r3, #15
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d005      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e086      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x34e>
 8006d94:	52002000 	.word	0x52002000
 8006d98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d010      	beq.n	8006dca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	691a      	ldr	r2, [r3, #16]
 8006dac:	4b3f      	ldr	r3, [pc, #252]	@ (8006eac <HAL_RCC_ClockConfig+0x358>)
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d208      	bcs.n	8006dca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006db8:	4b3c      	ldr	r3, [pc, #240]	@ (8006eac <HAL_RCC_ClockConfig+0x358>)
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	4939      	ldr	r1, [pc, #228]	@ (8006eac <HAL_RCC_ClockConfig+0x358>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0308 	and.w	r3, r3, #8
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d010      	beq.n	8006df8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	695a      	ldr	r2, [r3, #20]
 8006dda:	4b34      	ldr	r3, [pc, #208]	@ (8006eac <HAL_RCC_ClockConfig+0x358>)
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d208      	bcs.n	8006df8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006de6:	4b31      	ldr	r3, [pc, #196]	@ (8006eac <HAL_RCC_ClockConfig+0x358>)
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	492e      	ldr	r1, [pc, #184]	@ (8006eac <HAL_RCC_ClockConfig+0x358>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0310 	and.w	r3, r3, #16
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d010      	beq.n	8006e26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	699a      	ldr	r2, [r3, #24]
 8006e08:	4b28      	ldr	r3, [pc, #160]	@ (8006eac <HAL_RCC_ClockConfig+0x358>)
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d208      	bcs.n	8006e26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e14:	4b25      	ldr	r3, [pc, #148]	@ (8006eac <HAL_RCC_ClockConfig+0x358>)
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	4922      	ldr	r1, [pc, #136]	@ (8006eac <HAL_RCC_ClockConfig+0x358>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d010      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	69da      	ldr	r2, [r3, #28]
 8006e36:	4b1d      	ldr	r3, [pc, #116]	@ (8006eac <HAL_RCC_ClockConfig+0x358>)
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d208      	bcs.n	8006e54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006e42:	4b1a      	ldr	r3, [pc, #104]	@ (8006eac <HAL_RCC_ClockConfig+0x358>)
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	4917      	ldr	r1, [pc, #92]	@ (8006eac <HAL_RCC_ClockConfig+0x358>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006e54:	f000 f834 	bl	8006ec0 <HAL_RCC_GetSysClockFreq>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	4b14      	ldr	r3, [pc, #80]	@ (8006eac <HAL_RCC_ClockConfig+0x358>)
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	0a1b      	lsrs	r3, r3, #8
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	4912      	ldr	r1, [pc, #72]	@ (8006eb0 <HAL_RCC_ClockConfig+0x35c>)
 8006e66:	5ccb      	ldrb	r3, [r1, r3]
 8006e68:	f003 031f 	and.w	r3, r3, #31
 8006e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e70:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006e72:	4b0e      	ldr	r3, [pc, #56]	@ (8006eac <HAL_RCC_ClockConfig+0x358>)
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	f003 030f 	and.w	r3, r3, #15
 8006e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8006eb0 <HAL_RCC_ClockConfig+0x35c>)
 8006e7c:	5cd3      	ldrb	r3, [r2, r3]
 8006e7e:	f003 031f 	and.w	r3, r3, #31
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	fa22 f303 	lsr.w	r3, r2, r3
 8006e88:	4a0a      	ldr	r2, [pc, #40]	@ (8006eb4 <HAL_RCC_ClockConfig+0x360>)
 8006e8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8006eb8 <HAL_RCC_ClockConfig+0x364>)
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006e92:	4b0a      	ldr	r3, [pc, #40]	@ (8006ebc <HAL_RCC_ClockConfig+0x368>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fb f806 	bl	8001ea8 <HAL_InitTick>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	58024400 	.word	0x58024400
 8006eb0:	0800e878 	.word	0x0800e878
 8006eb4:	24000004 	.word	0x24000004
 8006eb8:	24000000 	.word	0x24000000
 8006ebc:	24000008 	.word	0x24000008

08006ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b089      	sub	sp, #36	@ 0x24
 8006ec4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ec6:	4bb3      	ldr	r3, [pc, #716]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ece:	2b18      	cmp	r3, #24
 8006ed0:	f200 8155 	bhi.w	800717e <HAL_RCC_GetSysClockFreq+0x2be>
 8006ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8006edc <HAL_RCC_GetSysClockFreq+0x1c>)
 8006ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eda:	bf00      	nop
 8006edc:	08006f41 	.word	0x08006f41
 8006ee0:	0800717f 	.word	0x0800717f
 8006ee4:	0800717f 	.word	0x0800717f
 8006ee8:	0800717f 	.word	0x0800717f
 8006eec:	0800717f 	.word	0x0800717f
 8006ef0:	0800717f 	.word	0x0800717f
 8006ef4:	0800717f 	.word	0x0800717f
 8006ef8:	0800717f 	.word	0x0800717f
 8006efc:	08006f67 	.word	0x08006f67
 8006f00:	0800717f 	.word	0x0800717f
 8006f04:	0800717f 	.word	0x0800717f
 8006f08:	0800717f 	.word	0x0800717f
 8006f0c:	0800717f 	.word	0x0800717f
 8006f10:	0800717f 	.word	0x0800717f
 8006f14:	0800717f 	.word	0x0800717f
 8006f18:	0800717f 	.word	0x0800717f
 8006f1c:	08006f6d 	.word	0x08006f6d
 8006f20:	0800717f 	.word	0x0800717f
 8006f24:	0800717f 	.word	0x0800717f
 8006f28:	0800717f 	.word	0x0800717f
 8006f2c:	0800717f 	.word	0x0800717f
 8006f30:	0800717f 	.word	0x0800717f
 8006f34:	0800717f 	.word	0x0800717f
 8006f38:	0800717f 	.word	0x0800717f
 8006f3c:	08006f73 	.word	0x08006f73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f40:	4b94      	ldr	r3, [pc, #592]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0320 	and.w	r3, r3, #32
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d009      	beq.n	8006f60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f4c:	4b91      	ldr	r3, [pc, #580]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	08db      	lsrs	r3, r3, #3
 8006f52:	f003 0303 	and.w	r3, r3, #3
 8006f56:	4a90      	ldr	r2, [pc, #576]	@ (8007198 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f58:	fa22 f303 	lsr.w	r3, r2, r3
 8006f5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006f5e:	e111      	b.n	8007184 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006f60:	4b8d      	ldr	r3, [pc, #564]	@ (8007198 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f62:	61bb      	str	r3, [r7, #24]
      break;
 8006f64:	e10e      	b.n	8007184 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006f66:	4b8d      	ldr	r3, [pc, #564]	@ (800719c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f68:	61bb      	str	r3, [r7, #24]
      break;
 8006f6a:	e10b      	b.n	8007184 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006f6c:	4b8c      	ldr	r3, [pc, #560]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006f6e:	61bb      	str	r3, [r7, #24]
      break;
 8006f70:	e108      	b.n	8007184 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f72:	4b88      	ldr	r3, [pc, #544]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006f7c:	4b85      	ldr	r3, [pc, #532]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f80:	091b      	lsrs	r3, r3, #4
 8006f82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f88:	4b82      	ldr	r3, [pc, #520]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006f92:	4b80      	ldr	r3, [pc, #512]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f96:	08db      	lsrs	r3, r3, #3
 8006f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	fb02 f303 	mul.w	r3, r2, r3
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006faa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 80e1 	beq.w	8007178 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	f000 8083 	beq.w	80070c4 <HAL_RCC_GetSysClockFreq+0x204>
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	f200 80a1 	bhi.w	8007108 <HAL_RCC_GetSysClockFreq+0x248>
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x114>
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d056      	beq.n	8007080 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006fd2:	e099      	b.n	8007108 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0320 	and.w	r3, r3, #32
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d02d      	beq.n	800703c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fe0:	4b6c      	ldr	r3, [pc, #432]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	08db      	lsrs	r3, r3, #3
 8006fe6:	f003 0303 	and.w	r3, r3, #3
 8006fea:	4a6b      	ldr	r2, [pc, #428]	@ (8007198 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fec:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	ee07 3a90 	vmov	s15, r3
 8006ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700a:	4b62      	ldr	r3, [pc, #392]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800700c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800700e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701a:	ed97 6a02 	vldr	s12, [r7, #8]
 800701e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80071a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800702e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007036:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800703a:	e087      	b.n	800714c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007046:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80071a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800704a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800704e:	4b51      	ldr	r3, [pc, #324]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800705e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007062:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80071a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800706a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800706e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800707a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800707e:	e065      	b.n	800714c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80071ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800708e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007092:	4b40      	ldr	r3, [pc, #256]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80070a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80071a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070c2:	e043      	b.n	800714c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80071b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80070d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d6:	4b2f      	ldr	r3, [pc, #188]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070de:	ee07 3a90 	vmov	s15, r3
 80070e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80070ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80071a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007102:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007106:	e021      	b.n	800714c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007112:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80071ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8007116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800711a:	4b1e      	ldr	r3, [pc, #120]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800711c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007122:	ee07 3a90 	vmov	s15, r3
 8007126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712a:	ed97 6a02 	vldr	s12, [r7, #8]
 800712e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80071a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800713a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800713e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007146:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800714a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800714c:	4b11      	ldr	r3, [pc, #68]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800714e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007150:	0a5b      	lsrs	r3, r3, #9
 8007152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007156:	3301      	adds	r3, #1
 8007158:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	ee07 3a90 	vmov	s15, r3
 8007160:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007164:	edd7 6a07 	vldr	s13, [r7, #28]
 8007168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800716c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007170:	ee17 3a90 	vmov	r3, s15
 8007174:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007176:	e005      	b.n	8007184 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	61bb      	str	r3, [r7, #24]
      break;
 800717c:	e002      	b.n	8007184 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800717e:	4b07      	ldr	r3, [pc, #28]	@ (800719c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007180:	61bb      	str	r3, [r7, #24]
      break;
 8007182:	bf00      	nop
  }

  return sysclockfreq;
 8007184:	69bb      	ldr	r3, [r7, #24]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3724      	adds	r7, #36	@ 0x24
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	58024400 	.word	0x58024400
 8007198:	03d09000 	.word	0x03d09000
 800719c:	003d0900 	.word	0x003d0900
 80071a0:	007a1200 	.word	0x007a1200
 80071a4:	46000000 	.word	0x46000000
 80071a8:	4c742400 	.word	0x4c742400
 80071ac:	4a742400 	.word	0x4a742400
 80071b0:	4af42400 	.word	0x4af42400

080071b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80071ba:	f7ff fe81 	bl	8006ec0 <HAL_RCC_GetSysClockFreq>
 80071be:	4602      	mov	r2, r0
 80071c0:	4b10      	ldr	r3, [pc, #64]	@ (8007204 <HAL_RCC_GetHCLKFreq+0x50>)
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	0a1b      	lsrs	r3, r3, #8
 80071c6:	f003 030f 	and.w	r3, r3, #15
 80071ca:	490f      	ldr	r1, [pc, #60]	@ (8007208 <HAL_RCC_GetHCLKFreq+0x54>)
 80071cc:	5ccb      	ldrb	r3, [r1, r3]
 80071ce:	f003 031f 	and.w	r3, r3, #31
 80071d2:	fa22 f303 	lsr.w	r3, r2, r3
 80071d6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80071d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007204 <HAL_RCC_GetHCLKFreq+0x50>)
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	f003 030f 	and.w	r3, r3, #15
 80071e0:	4a09      	ldr	r2, [pc, #36]	@ (8007208 <HAL_RCC_GetHCLKFreq+0x54>)
 80071e2:	5cd3      	ldrb	r3, [r2, r3]
 80071e4:	f003 031f 	and.w	r3, r3, #31
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	fa22 f303 	lsr.w	r3, r2, r3
 80071ee:	4a07      	ldr	r2, [pc, #28]	@ (800720c <HAL_RCC_GetHCLKFreq+0x58>)
 80071f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80071f2:	4a07      	ldr	r2, [pc, #28]	@ (8007210 <HAL_RCC_GetHCLKFreq+0x5c>)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80071f8:	4b04      	ldr	r3, [pc, #16]	@ (800720c <HAL_RCC_GetHCLKFreq+0x58>)
 80071fa:	681b      	ldr	r3, [r3, #0]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	58024400 	.word	0x58024400
 8007208:	0800e878 	.word	0x0800e878
 800720c:	24000004 	.word	0x24000004
 8007210:	24000000 	.word	0x24000000

08007214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007218:	f7ff ffcc 	bl	80071b4 <HAL_RCC_GetHCLKFreq>
 800721c:	4602      	mov	r2, r0
 800721e:	4b06      	ldr	r3, [pc, #24]	@ (8007238 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	091b      	lsrs	r3, r3, #4
 8007224:	f003 0307 	and.w	r3, r3, #7
 8007228:	4904      	ldr	r1, [pc, #16]	@ (800723c <HAL_RCC_GetPCLK1Freq+0x28>)
 800722a:	5ccb      	ldrb	r3, [r1, r3]
 800722c:	f003 031f 	and.w	r3, r3, #31
 8007230:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007234:	4618      	mov	r0, r3
 8007236:	bd80      	pop	{r7, pc}
 8007238:	58024400 	.word	0x58024400
 800723c:	0800e878 	.word	0x0800e878

08007240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007244:	f7ff ffb6 	bl	80071b4 <HAL_RCC_GetHCLKFreq>
 8007248:	4602      	mov	r2, r0
 800724a:	4b06      	ldr	r3, [pc, #24]	@ (8007264 <HAL_RCC_GetPCLK2Freq+0x24>)
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	0a1b      	lsrs	r3, r3, #8
 8007250:	f003 0307 	and.w	r3, r3, #7
 8007254:	4904      	ldr	r1, [pc, #16]	@ (8007268 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007256:	5ccb      	ldrb	r3, [r1, r3]
 8007258:	f003 031f 	and.w	r3, r3, #31
 800725c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007260:	4618      	mov	r0, r3
 8007262:	bd80      	pop	{r7, pc}
 8007264:	58024400 	.word	0x58024400
 8007268:	0800e878 	.word	0x0800e878

0800726c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800726c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007270:	b0c8      	sub	sp, #288	@ 0x120
 8007272:	af00      	add	r7, sp, #0
 8007274:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007278:	2300      	movs	r3, #0
 800727a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800727e:	2300      	movs	r3, #0
 8007280:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007290:	2500      	movs	r5, #0
 8007292:	ea54 0305 	orrs.w	r3, r4, r5
 8007296:	d049      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007298:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800729c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800729e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80072a2:	d02f      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80072a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80072a8:	d828      	bhi.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80072aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072ae:	d01a      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80072b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072b4:	d822      	bhi.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80072ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072be:	d007      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80072c0:	e01c      	b.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c2:	4ba7      	ldr	r3, [pc, #668]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c6:	4aa6      	ldr	r2, [pc, #664]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80072ce:	e01a      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072d4:	3308      	adds	r3, #8
 80072d6:	2102      	movs	r1, #2
 80072d8:	4618      	mov	r0, r3
 80072da:	f001 fc43 	bl	8008b64 <RCCEx_PLL2_Config>
 80072de:	4603      	mov	r3, r0
 80072e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80072e4:	e00f      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072ea:	3328      	adds	r3, #40	@ 0x28
 80072ec:	2102      	movs	r1, #2
 80072ee:	4618      	mov	r0, r3
 80072f0:	f001 fcea 	bl	8008cc8 <RCCEx_PLL3_Config>
 80072f4:	4603      	mov	r3, r0
 80072f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80072fa:	e004      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007302:	e000      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007306:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10a      	bne.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800730e:	4b94      	ldr	r3, [pc, #592]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007312:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800731a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800731c:	4a90      	ldr	r2, [pc, #576]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800731e:	430b      	orrs	r3, r1
 8007320:	6513      	str	r3, [r2, #80]	@ 0x50
 8007322:	e003      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007324:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007328:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800732c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007338:	f04f 0900 	mov.w	r9, #0
 800733c:	ea58 0309 	orrs.w	r3, r8, r9
 8007340:	d047      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007342:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007348:	2b04      	cmp	r3, #4
 800734a:	d82a      	bhi.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800734c:	a201      	add	r2, pc, #4	@ (adr r2, 8007354 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800734e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007352:	bf00      	nop
 8007354:	08007369 	.word	0x08007369
 8007358:	08007377 	.word	0x08007377
 800735c:	0800738d 	.word	0x0800738d
 8007360:	080073ab 	.word	0x080073ab
 8007364:	080073ab 	.word	0x080073ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007368:	4b7d      	ldr	r3, [pc, #500]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800736a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736c:	4a7c      	ldr	r2, [pc, #496]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800736e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007374:	e01a      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800737a:	3308      	adds	r3, #8
 800737c:	2100      	movs	r1, #0
 800737e:	4618      	mov	r0, r3
 8007380:	f001 fbf0 	bl	8008b64 <RCCEx_PLL2_Config>
 8007384:	4603      	mov	r3, r0
 8007386:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800738a:	e00f      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800738c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007390:	3328      	adds	r3, #40	@ 0x28
 8007392:	2100      	movs	r1, #0
 8007394:	4618      	mov	r0, r3
 8007396:	f001 fc97 	bl	8008cc8 <RCCEx_PLL3_Config>
 800739a:	4603      	mov	r3, r0
 800739c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073a0:	e004      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80073a8:	e000      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80073aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10a      	bne.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073b4:	4b6a      	ldr	r3, [pc, #424]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073b8:	f023 0107 	bic.w	r1, r3, #7
 80073bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c2:	4a67      	ldr	r2, [pc, #412]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073c4:	430b      	orrs	r3, r1
 80073c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80073c8:	e003      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80073d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073da:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80073de:	f04f 0b00 	mov.w	fp, #0
 80073e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80073e6:	d054      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80073e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073ee:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80073f2:	d036      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80073f4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80073f8:	d82f      	bhi.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80073fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073fe:	d032      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007404:	d829      	bhi.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007406:	2bc0      	cmp	r3, #192	@ 0xc0
 8007408:	d02f      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800740a:	2bc0      	cmp	r3, #192	@ 0xc0
 800740c:	d825      	bhi.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800740e:	2b80      	cmp	r3, #128	@ 0x80
 8007410:	d018      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007412:	2b80      	cmp	r3, #128	@ 0x80
 8007414:	d821      	bhi.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800741a:	2b40      	cmp	r3, #64	@ 0x40
 800741c:	d007      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800741e:	e01c      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007420:	4b4f      	ldr	r3, [pc, #316]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007424:	4a4e      	ldr	r2, [pc, #312]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800742a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800742c:	e01e      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800742e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007432:	3308      	adds	r3, #8
 8007434:	2100      	movs	r1, #0
 8007436:	4618      	mov	r0, r3
 8007438:	f001 fb94 	bl	8008b64 <RCCEx_PLL2_Config>
 800743c:	4603      	mov	r3, r0
 800743e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007442:	e013      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007448:	3328      	adds	r3, #40	@ 0x28
 800744a:	2100      	movs	r1, #0
 800744c:	4618      	mov	r0, r3
 800744e:	f001 fc3b 	bl	8008cc8 <RCCEx_PLL3_Config>
 8007452:	4603      	mov	r3, r0
 8007454:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007458:	e008      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007460:	e004      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007462:	bf00      	nop
 8007464:	e002      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007466:	bf00      	nop
 8007468:	e000      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800746a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800746c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10a      	bne.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007474:	4b3a      	ldr	r3, [pc, #232]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007478:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800747c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007482:	4a37      	ldr	r2, [pc, #220]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007484:	430b      	orrs	r3, r1
 8007486:	6513      	str	r3, [r2, #80]	@ 0x50
 8007488:	e003      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800748a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800748e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800749e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80074a2:	2300      	movs	r3, #0
 80074a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80074a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80074ac:	460b      	mov	r3, r1
 80074ae:	4313      	orrs	r3, r2
 80074b0:	d05c      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80074b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074b8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80074bc:	d03b      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80074be:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80074c2:	d834      	bhi.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80074c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074c8:	d037      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80074ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074ce:	d82e      	bhi.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80074d0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80074d4:	d033      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80074d6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80074da:	d828      	bhi.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80074dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074e0:	d01a      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80074e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074e6:	d822      	bhi.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80074ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074f0:	d007      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80074f2:	e01c      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f8:	4a19      	ldr	r2, [pc, #100]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007500:	e01e      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007506:	3308      	adds	r3, #8
 8007508:	2100      	movs	r1, #0
 800750a:	4618      	mov	r0, r3
 800750c:	f001 fb2a 	bl	8008b64 <RCCEx_PLL2_Config>
 8007510:	4603      	mov	r3, r0
 8007512:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007516:	e013      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800751c:	3328      	adds	r3, #40	@ 0x28
 800751e:	2100      	movs	r1, #0
 8007520:	4618      	mov	r0, r3
 8007522:	f001 fbd1 	bl	8008cc8 <RCCEx_PLL3_Config>
 8007526:	4603      	mov	r3, r0
 8007528:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800752c:	e008      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007534:	e004      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007536:	bf00      	nop
 8007538:	e002      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800753a:	bf00      	nop
 800753c:	e000      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800753e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007540:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10d      	bne.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007548:	4b05      	ldr	r3, [pc, #20]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800754a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800754c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007556:	4a02      	ldr	r2, [pc, #8]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007558:	430b      	orrs	r3, r1
 800755a:	6513      	str	r3, [r2, #80]	@ 0x50
 800755c:	e006      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800755e:	bf00      	nop
 8007560:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007564:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007568:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800756c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007578:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800757c:	2300      	movs	r3, #0
 800757e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007582:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007586:	460b      	mov	r3, r1
 8007588:	4313      	orrs	r3, r2
 800758a:	d03a      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800758c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007592:	2b30      	cmp	r3, #48	@ 0x30
 8007594:	d01f      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007596:	2b30      	cmp	r3, #48	@ 0x30
 8007598:	d819      	bhi.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x362>
 800759a:	2b20      	cmp	r3, #32
 800759c:	d00c      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800759e:	2b20      	cmp	r3, #32
 80075a0:	d815      	bhi.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x362>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d019      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80075a6:	2b10      	cmp	r3, #16
 80075a8:	d111      	bne.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075aa:	4bae      	ldr	r3, [pc, #696]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ae:	4aad      	ldr	r2, [pc, #692]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80075b6:	e011      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80075b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075bc:	3308      	adds	r3, #8
 80075be:	2102      	movs	r1, #2
 80075c0:	4618      	mov	r0, r3
 80075c2:	f001 facf 	bl	8008b64 <RCCEx_PLL2_Config>
 80075c6:	4603      	mov	r3, r0
 80075c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80075cc:	e006      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80075d4:	e002      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80075d6:	bf00      	nop
 80075d8:	e000      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80075da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10a      	bne.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80075e4:	4b9f      	ldr	r3, [pc, #636]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80075ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075f2:	4a9c      	ldr	r2, [pc, #624]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075f4:	430b      	orrs	r3, r1
 80075f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80075f8:	e003      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007602:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800760e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007612:	2300      	movs	r3, #0
 8007614:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007618:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800761c:	460b      	mov	r3, r1
 800761e:	4313      	orrs	r3, r2
 8007620:	d051      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007622:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007626:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007628:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800762c:	d035      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800762e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007632:	d82e      	bhi.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007634:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007638:	d031      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800763a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800763e:	d828      	bhi.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007640:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007644:	d01a      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800764a:	d822      	bhi.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007654:	d007      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8007656:	e01c      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007658:	4b82      	ldr	r3, [pc, #520]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800765a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765c:	4a81      	ldr	r2, [pc, #516]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800765e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007664:	e01c      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007666:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800766a:	3308      	adds	r3, #8
 800766c:	2100      	movs	r1, #0
 800766e:	4618      	mov	r0, r3
 8007670:	f001 fa78 	bl	8008b64 <RCCEx_PLL2_Config>
 8007674:	4603      	mov	r3, r0
 8007676:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800767a:	e011      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800767c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007680:	3328      	adds	r3, #40	@ 0x28
 8007682:	2100      	movs	r1, #0
 8007684:	4618      	mov	r0, r3
 8007686:	f001 fb1f 	bl	8008cc8 <RCCEx_PLL3_Config>
 800768a:	4603      	mov	r3, r0
 800768c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007690:	e006      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007698:	e002      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800769a:	bf00      	nop
 800769c:	e000      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800769e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80076a8:	4b6e      	ldr	r3, [pc, #440]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80076b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076b6:	4a6b      	ldr	r2, [pc, #428]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076b8:	430b      	orrs	r3, r1
 80076ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80076bc:	e003      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80076c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80076d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076d6:	2300      	movs	r3, #0
 80076d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80076dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80076e0:	460b      	mov	r3, r1
 80076e2:	4313      	orrs	r3, r2
 80076e4:	d053      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80076e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80076f0:	d033      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80076f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80076f6:	d82c      	bhi.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80076f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80076fc:	d02f      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80076fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007702:	d826      	bhi.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007704:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007708:	d02b      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800770a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800770e:	d820      	bhi.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007710:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007714:	d012      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007716:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800771a:	d81a      	bhi.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800771c:	2b00      	cmp	r3, #0
 800771e:	d022      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007724:	d115      	bne.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007726:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800772a:	3308      	adds	r3, #8
 800772c:	2101      	movs	r1, #1
 800772e:	4618      	mov	r0, r3
 8007730:	f001 fa18 	bl	8008b64 <RCCEx_PLL2_Config>
 8007734:	4603      	mov	r3, r0
 8007736:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800773a:	e015      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800773c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007740:	3328      	adds	r3, #40	@ 0x28
 8007742:	2101      	movs	r1, #1
 8007744:	4618      	mov	r0, r3
 8007746:	f001 fabf 	bl	8008cc8 <RCCEx_PLL3_Config>
 800774a:	4603      	mov	r3, r0
 800774c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007750:	e00a      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007758:	e006      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800775a:	bf00      	nop
 800775c:	e004      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800775e:	bf00      	nop
 8007760:	e002      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007762:	bf00      	nop
 8007764:	e000      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007768:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10a      	bne.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007770:	4b3c      	ldr	r3, [pc, #240]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007774:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800777c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800777e:	4a39      	ldr	r2, [pc, #228]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007780:	430b      	orrs	r3, r1
 8007782:	6513      	str	r3, [r2, #80]	@ 0x50
 8007784:	e003      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007786:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800778a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800778e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800779a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800779e:	2300      	movs	r3, #0
 80077a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077a4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4313      	orrs	r3, r2
 80077ac:	d060      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80077ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077b6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80077ba:	d039      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80077bc:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80077c0:	d832      	bhi.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80077c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077c6:	d035      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80077c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077cc:	d82c      	bhi.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80077ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077d2:	d031      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80077d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077d8:	d826      	bhi.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80077da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80077de:	d02d      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80077e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80077e4:	d820      	bhi.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80077e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077ea:	d012      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80077ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077f0:	d81a      	bhi.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d024      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80077f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077fa:	d115      	bne.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007800:	3308      	adds	r3, #8
 8007802:	2101      	movs	r1, #1
 8007804:	4618      	mov	r0, r3
 8007806:	f001 f9ad 	bl	8008b64 <RCCEx_PLL2_Config>
 800780a:	4603      	mov	r3, r0
 800780c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007810:	e017      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007812:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007816:	3328      	adds	r3, #40	@ 0x28
 8007818:	2101      	movs	r1, #1
 800781a:	4618      	mov	r0, r3
 800781c:	f001 fa54 	bl	8008cc8 <RCCEx_PLL3_Config>
 8007820:	4603      	mov	r3, r0
 8007822:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007826:	e00c      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800782e:	e008      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007830:	bf00      	nop
 8007832:	e006      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007834:	bf00      	nop
 8007836:	e004      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007838:	bf00      	nop
 800783a:	e002      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800783c:	bf00      	nop
 800783e:	e000      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007842:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10e      	bne.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800784a:	4b06      	ldr	r3, [pc, #24]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800784c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800784e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007852:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007856:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800785a:	4a02      	ldr	r2, [pc, #8]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800785c:	430b      	orrs	r3, r1
 800785e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007860:	e006      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007862:	bf00      	nop
 8007864:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007868:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800786c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007870:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007878:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800787c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007880:	2300      	movs	r3, #0
 8007882:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007886:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800788a:	460b      	mov	r3, r1
 800788c:	4313      	orrs	r3, r2
 800788e:	d037      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007890:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007894:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007896:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800789a:	d00e      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800789c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078a0:	d816      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d018      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80078a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078aa:	d111      	bne.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ac:	4bc4      	ldr	r3, [pc, #784]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b0:	4ac3      	ldr	r2, [pc, #780]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80078b8:	e00f      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078be:	3308      	adds	r3, #8
 80078c0:	2101      	movs	r1, #1
 80078c2:	4618      	mov	r0, r3
 80078c4:	f001 f94e 	bl	8008b64 <RCCEx_PLL2_Config>
 80078c8:	4603      	mov	r3, r0
 80078ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80078ce:	e004      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80078d6:	e000      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80078d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80078e2:	4bb7      	ldr	r3, [pc, #732]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078e6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80078ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078f0:	4ab3      	ldr	r2, [pc, #716]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078f2:	430b      	orrs	r3, r1
 80078f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80078f6:	e003      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800790c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007910:	2300      	movs	r3, #0
 8007912:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007916:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800791a:	460b      	mov	r3, r1
 800791c:	4313      	orrs	r3, r2
 800791e:	d039      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007920:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007926:	2b03      	cmp	r3, #3
 8007928:	d81c      	bhi.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800792a:	a201      	add	r2, pc, #4	@ (adr r2, 8007930 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	0800796d 	.word	0x0800796d
 8007934:	08007941 	.word	0x08007941
 8007938:	0800794f 	.word	0x0800794f
 800793c:	0800796d 	.word	0x0800796d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007940:	4b9f      	ldr	r3, [pc, #636]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007944:	4a9e      	ldr	r2, [pc, #632]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800794a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800794c:	e00f      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800794e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007952:	3308      	adds	r3, #8
 8007954:	2102      	movs	r1, #2
 8007956:	4618      	mov	r0, r3
 8007958:	f001 f904 	bl	8008b64 <RCCEx_PLL2_Config>
 800795c:	4603      	mov	r3, r0
 800795e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007962:	e004      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800796a:	e000      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800796c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800796e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10a      	bne.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007976:	4b92      	ldr	r3, [pc, #584]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800797a:	f023 0103 	bic.w	r1, r3, #3
 800797e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007984:	4a8e      	ldr	r2, [pc, #568]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007986:	430b      	orrs	r3, r1
 8007988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800798a:	e003      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007990:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007994:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80079a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079a4:	2300      	movs	r3, #0
 80079a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80079ae:	460b      	mov	r3, r1
 80079b0:	4313      	orrs	r3, r2
 80079b2:	f000 8099 	beq.w	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079b6:	4b83      	ldr	r3, [pc, #524]	@ (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a82      	ldr	r2, [pc, #520]	@ (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80079bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079c2:	f7fa fabb 	bl	8001f3c <HAL_GetTick>
 80079c6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079ca:	e00b      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079cc:	f7fa fab6 	bl	8001f3c <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	2b64      	cmp	r3, #100	@ 0x64
 80079da:	d903      	bls.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80079e2:	e005      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079e4:	4b77      	ldr	r3, [pc, #476]	@ (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d0ed      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80079f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d173      	bne.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80079f8:	4b71      	ldr	r3, [pc, #452]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80079fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a04:	4053      	eors	r3, r2
 8007a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d015      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a0e:	4b6c      	ldr	r3, [pc, #432]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a16:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a1a:	4b69      	ldr	r3, [pc, #420]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a1e:	4a68      	ldr	r2, [pc, #416]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a24:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a26:	4b66      	ldr	r3, [pc, #408]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a2a:	4a65      	ldr	r2, [pc, #404]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a30:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007a32:	4a63      	ldr	r2, [pc, #396]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a38:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a46:	d118      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a48:	f7fa fa78 	bl	8001f3c <HAL_GetTick>
 8007a4c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a50:	e00d      	b.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a52:	f7fa fa73 	bl	8001f3c <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007a5c:	1ad2      	subs	r2, r2, r3
 8007a5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d903      	bls.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8007a6c:	e005      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a6e:	4b54      	ldr	r3, [pc, #336]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a72:	f003 0302 	and.w	r3, r3, #2
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0eb      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007a7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d129      	bne.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a92:	d10e      	bne.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007a94:	4b4a      	ldr	r3, [pc, #296]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007aa0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007aa4:	091a      	lsrs	r2, r3, #4
 8007aa6:	4b48      	ldr	r3, [pc, #288]	@ (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	4a45      	ldr	r2, [pc, #276]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007aac:	430b      	orrs	r3, r1
 8007aae:	6113      	str	r3, [r2, #16]
 8007ab0:	e005      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007ab2:	4b43      	ldr	r3, [pc, #268]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	4a42      	ldr	r2, [pc, #264]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ab8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007abc:	6113      	str	r3, [r2, #16]
 8007abe:	4b40      	ldr	r3, [pc, #256]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ac0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ac6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ace:	4a3c      	ldr	r2, [pc, #240]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ad0:	430b      	orrs	r3, r1
 8007ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ad4:	e008      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ad6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ada:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007ade:	e003      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ae4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af0:	f002 0301 	and.w	r3, r2, #1
 8007af4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007af8:	2300      	movs	r3, #0
 8007afa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007afe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b02:	460b      	mov	r3, r1
 8007b04:	4313      	orrs	r3, r2
 8007b06:	f000 8090 	beq.w	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b12:	2b28      	cmp	r3, #40	@ 0x28
 8007b14:	d870      	bhi.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007b16:	a201      	add	r2, pc, #4	@ (adr r2, 8007b1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1c:	08007c01 	.word	0x08007c01
 8007b20:	08007bf9 	.word	0x08007bf9
 8007b24:	08007bf9 	.word	0x08007bf9
 8007b28:	08007bf9 	.word	0x08007bf9
 8007b2c:	08007bf9 	.word	0x08007bf9
 8007b30:	08007bf9 	.word	0x08007bf9
 8007b34:	08007bf9 	.word	0x08007bf9
 8007b38:	08007bf9 	.word	0x08007bf9
 8007b3c:	08007bcd 	.word	0x08007bcd
 8007b40:	08007bf9 	.word	0x08007bf9
 8007b44:	08007bf9 	.word	0x08007bf9
 8007b48:	08007bf9 	.word	0x08007bf9
 8007b4c:	08007bf9 	.word	0x08007bf9
 8007b50:	08007bf9 	.word	0x08007bf9
 8007b54:	08007bf9 	.word	0x08007bf9
 8007b58:	08007bf9 	.word	0x08007bf9
 8007b5c:	08007be3 	.word	0x08007be3
 8007b60:	08007bf9 	.word	0x08007bf9
 8007b64:	08007bf9 	.word	0x08007bf9
 8007b68:	08007bf9 	.word	0x08007bf9
 8007b6c:	08007bf9 	.word	0x08007bf9
 8007b70:	08007bf9 	.word	0x08007bf9
 8007b74:	08007bf9 	.word	0x08007bf9
 8007b78:	08007bf9 	.word	0x08007bf9
 8007b7c:	08007c01 	.word	0x08007c01
 8007b80:	08007bf9 	.word	0x08007bf9
 8007b84:	08007bf9 	.word	0x08007bf9
 8007b88:	08007bf9 	.word	0x08007bf9
 8007b8c:	08007bf9 	.word	0x08007bf9
 8007b90:	08007bf9 	.word	0x08007bf9
 8007b94:	08007bf9 	.word	0x08007bf9
 8007b98:	08007bf9 	.word	0x08007bf9
 8007b9c:	08007c01 	.word	0x08007c01
 8007ba0:	08007bf9 	.word	0x08007bf9
 8007ba4:	08007bf9 	.word	0x08007bf9
 8007ba8:	08007bf9 	.word	0x08007bf9
 8007bac:	08007bf9 	.word	0x08007bf9
 8007bb0:	08007bf9 	.word	0x08007bf9
 8007bb4:	08007bf9 	.word	0x08007bf9
 8007bb8:	08007bf9 	.word	0x08007bf9
 8007bbc:	08007c01 	.word	0x08007c01
 8007bc0:	58024400 	.word	0x58024400
 8007bc4:	58024800 	.word	0x58024800
 8007bc8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 ffc5 	bl	8008b64 <RCCEx_PLL2_Config>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007be0:	e00f      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007be6:	3328      	adds	r3, #40	@ 0x28
 8007be8:	2101      	movs	r1, #1
 8007bea:	4618      	mov	r0, r3
 8007bec:	f001 f86c 	bl	8008cc8 <RCCEx_PLL3_Config>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007bf6:	e004      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007bfe:	e000      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10b      	bne.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007c0a:	4bc0      	ldr	r3, [pc, #768]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c0e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c1a:	4abc      	ldr	r2, [pc, #752]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c20:	e003      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c26:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	f002 0302 	and.w	r3, r2, #2
 8007c36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007c40:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007c44:	460b      	mov	r3, r1
 8007c46:	4313      	orrs	r3, r2
 8007c48:	d043      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c52:	2b05      	cmp	r3, #5
 8007c54:	d824      	bhi.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007c56:	a201      	add	r2, pc, #4	@ (adr r2, 8007c5c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007ca9 	.word	0x08007ca9
 8007c60:	08007c75 	.word	0x08007c75
 8007c64:	08007c8b 	.word	0x08007c8b
 8007c68:	08007ca9 	.word	0x08007ca9
 8007c6c:	08007ca9 	.word	0x08007ca9
 8007c70:	08007ca9 	.word	0x08007ca9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c78:	3308      	adds	r3, #8
 8007c7a:	2101      	movs	r1, #1
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 ff71 	bl	8008b64 <RCCEx_PLL2_Config>
 8007c82:	4603      	mov	r3, r0
 8007c84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007c88:	e00f      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c8e:	3328      	adds	r3, #40	@ 0x28
 8007c90:	2101      	movs	r1, #1
 8007c92:	4618      	mov	r0, r3
 8007c94:	f001 f818 	bl	8008cc8 <RCCEx_PLL3_Config>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007c9e:	e004      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ca6:	e000      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007caa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10b      	bne.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007cb2:	4b96      	ldr	r3, [pc, #600]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb6:	f023 0107 	bic.w	r1, r3, #7
 8007cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cc2:	4a92      	ldr	r2, [pc, #584]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007cc4:	430b      	orrs	r3, r1
 8007cc6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007cc8:	e003      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	f002 0304 	and.w	r3, r2, #4
 8007cde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ce8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	d043      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cfa:	2b05      	cmp	r3, #5
 8007cfc:	d824      	bhi.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8007d04 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d04:	08007d51 	.word	0x08007d51
 8007d08:	08007d1d 	.word	0x08007d1d
 8007d0c:	08007d33 	.word	0x08007d33
 8007d10:	08007d51 	.word	0x08007d51
 8007d14:	08007d51 	.word	0x08007d51
 8007d18:	08007d51 	.word	0x08007d51
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d20:	3308      	adds	r3, #8
 8007d22:	2101      	movs	r1, #1
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 ff1d 	bl	8008b64 <RCCEx_PLL2_Config>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007d30:	e00f      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d36:	3328      	adds	r3, #40	@ 0x28
 8007d38:	2101      	movs	r1, #1
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 ffc4 	bl	8008cc8 <RCCEx_PLL3_Config>
 8007d40:	4603      	mov	r3, r0
 8007d42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007d46:	e004      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d4e:	e000      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007d50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10b      	bne.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d5a:	4b6c      	ldr	r3, [pc, #432]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d5e:	f023 0107 	bic.w	r1, r3, #7
 8007d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d6a:	4a68      	ldr	r2, [pc, #416]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007d6c:	430b      	orrs	r3, r1
 8007d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d70:	e003      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d76:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d82:	f002 0320 	and.w	r3, r2, #32
 8007d86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d94:	460b      	mov	r3, r1
 8007d96:	4313      	orrs	r3, r2
 8007d98:	d055      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007da6:	d033      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007dac:	d82c      	bhi.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007db2:	d02f      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007db8:	d826      	bhi.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007dba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007dbe:	d02b      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007dc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007dc4:	d820      	bhi.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007dc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dca:	d012      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007dcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dd0:	d81a      	bhi.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d022      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007dd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dda:	d115      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007de0:	3308      	adds	r3, #8
 8007de2:	2100      	movs	r1, #0
 8007de4:	4618      	mov	r0, r3
 8007de6:	f000 febd 	bl	8008b64 <RCCEx_PLL2_Config>
 8007dea:	4603      	mov	r3, r0
 8007dec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007df0:	e015      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007df6:	3328      	adds	r3, #40	@ 0x28
 8007df8:	2102      	movs	r1, #2
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 ff64 	bl	8008cc8 <RCCEx_PLL3_Config>
 8007e00:	4603      	mov	r3, r0
 8007e02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e06:	e00a      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e0e:	e006      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007e10:	bf00      	nop
 8007e12:	e004      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007e14:	bf00      	nop
 8007e16:	e002      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007e18:	bf00      	nop
 8007e1a:	e000      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10b      	bne.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e26:	4b39      	ldr	r3, [pc, #228]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e2a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e36:	4a35      	ldr	r2, [pc, #212]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007e38:	430b      	orrs	r3, r1
 8007e3a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e3c:	e003      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e42:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007e52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e56:	2300      	movs	r3, #0
 8007e58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e5c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007e60:	460b      	mov	r3, r1
 8007e62:	4313      	orrs	r3, r2
 8007e64:	d058      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e6e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007e72:	d033      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007e74:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007e78:	d82c      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e7e:	d02f      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007e80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e84:	d826      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007e86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e8a:	d02b      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007e8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e90:	d820      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007e92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e96:	d012      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007e98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e9c:	d81a      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d022      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ea6:	d115      	bne.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eac:	3308      	adds	r3, #8
 8007eae:	2100      	movs	r1, #0
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 fe57 	bl	8008b64 <RCCEx_PLL2_Config>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ebc:	e015      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ec2:	3328      	adds	r3, #40	@ 0x28
 8007ec4:	2102      	movs	r1, #2
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 fefe 	bl	8008cc8 <RCCEx_PLL3_Config>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ed2:	e00a      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007eda:	e006      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007edc:	bf00      	nop
 8007ede:	e004      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007ee0:	bf00      	nop
 8007ee2:	e002      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007ee4:	bf00      	nop
 8007ee6:	e000      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10e      	bne.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ef2:	4b06      	ldr	r3, [pc, #24]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ef6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007efe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007f02:	4a02      	ldr	r2, [pc, #8]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007f04:	430b      	orrs	r3, r1
 8007f06:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f08:	e006      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8007f0a:	bf00      	nop
 8007f0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f20:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007f24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f2e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007f32:	460b      	mov	r3, r1
 8007f34:	4313      	orrs	r3, r2
 8007f36:	d055      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007f40:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007f44:	d033      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007f46:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007f4a:	d82c      	bhi.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007f4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f50:	d02f      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007f52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f56:	d826      	bhi.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007f58:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007f5c:	d02b      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007f5e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007f62:	d820      	bhi.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007f64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f68:	d012      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007f6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f6e:	d81a      	bhi.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d022      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007f74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f78:	d115      	bne.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f7e:	3308      	adds	r3, #8
 8007f80:	2100      	movs	r1, #0
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 fdee 	bl	8008b64 <RCCEx_PLL2_Config>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007f8e:	e015      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f94:	3328      	adds	r3, #40	@ 0x28
 8007f96:	2102      	movs	r1, #2
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 fe95 	bl	8008cc8 <RCCEx_PLL3_Config>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007fa4:	e00a      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007fac:	e006      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007fae:	bf00      	nop
 8007fb0:	e004      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007fb2:	bf00      	nop
 8007fb4:	e002      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007fb6:	bf00      	nop
 8007fb8:	e000      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10b      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007fc4:	4ba1      	ldr	r3, [pc, #644]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fc8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007fd4:	4a9d      	ldr	r2, [pc, #628]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007fd6:	430b      	orrs	r3, r1
 8007fd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fda:	e003      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fdc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fe0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fec:	f002 0308 	and.w	r3, r2, #8
 8007ff0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ffa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007ffe:	460b      	mov	r3, r1
 8008000:	4313      	orrs	r3, r2
 8008002:	d01e      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008004:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008008:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800800c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008010:	d10c      	bne.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008012:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008016:	3328      	adds	r3, #40	@ 0x28
 8008018:	2102      	movs	r1, #2
 800801a:	4618      	mov	r0, r3
 800801c:	f000 fe54 	bl	8008cc8 <RCCEx_PLL3_Config>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d002      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800802c:	4b87      	ldr	r3, [pc, #540]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800802e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008030:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008034:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008038:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800803c:	4a83      	ldr	r2, [pc, #524]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800803e:	430b      	orrs	r3, r1
 8008040:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008042:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	f002 0310 	and.w	r3, r2, #16
 800804e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008052:	2300      	movs	r3, #0
 8008054:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008058:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800805c:	460b      	mov	r3, r1
 800805e:	4313      	orrs	r3, r2
 8008060:	d01e      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008062:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008066:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800806a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800806e:	d10c      	bne.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008070:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008074:	3328      	adds	r3, #40	@ 0x28
 8008076:	2102      	movs	r1, #2
 8008078:	4618      	mov	r0, r3
 800807a:	f000 fe25 	bl	8008cc8 <RCCEx_PLL3_Config>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800808a:	4b70      	ldr	r3, [pc, #448]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800808c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800808e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008096:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800809a:	4a6c      	ldr	r2, [pc, #432]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800809c:	430b      	orrs	r3, r1
 800809e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80080a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80080ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080b0:	2300      	movs	r3, #0
 80080b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80080ba:	460b      	mov	r3, r1
 80080bc:	4313      	orrs	r3, r2
 80080be:	d03e      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80080c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80080c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080cc:	d022      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80080ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080d2:	d81b      	bhi.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d003      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80080d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080dc:	d00b      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80080de:	e015      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080e4:	3308      	adds	r3, #8
 80080e6:	2100      	movs	r1, #0
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 fd3b 	bl	8008b64 <RCCEx_PLL2_Config>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80080f4:	e00f      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080fa:	3328      	adds	r3, #40	@ 0x28
 80080fc:	2102      	movs	r1, #2
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 fde2 	bl	8008cc8 <RCCEx_PLL3_Config>
 8008104:	4603      	mov	r3, r0
 8008106:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800810a:	e004      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008112:	e000      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008116:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10b      	bne.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800811e:	4b4b      	ldr	r3, [pc, #300]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008122:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008126:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800812a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800812e:	4a47      	ldr	r2, [pc, #284]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008130:	430b      	orrs	r3, r1
 8008132:	6593      	str	r3, [r2, #88]	@ 0x58
 8008134:	e003      	b.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008136:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800813a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800813e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008146:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800814a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800814c:	2300      	movs	r3, #0
 800814e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008150:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008154:	460b      	mov	r3, r1
 8008156:	4313      	orrs	r3, r2
 8008158:	d03b      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800815a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800815e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008162:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008166:	d01f      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008168:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800816c:	d818      	bhi.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800816e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008172:	d003      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008174:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008178:	d007      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800817a:	e011      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800817c:	4b33      	ldr	r3, [pc, #204]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800817e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008180:	4a32      	ldr	r2, [pc, #200]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008188:	e00f      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800818a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800818e:	3328      	adds	r3, #40	@ 0x28
 8008190:	2101      	movs	r1, #1
 8008192:	4618      	mov	r0, r3
 8008194:	f000 fd98 	bl	8008cc8 <RCCEx_PLL3_Config>
 8008198:	4603      	mov	r3, r0
 800819a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800819e:	e004      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80081a6:	e000      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80081a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10b      	bne.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80081b2:	4b26      	ldr	r3, [pc, #152]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80081b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80081ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081c2:	4a22      	ldr	r2, [pc, #136]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80081c4:	430b      	orrs	r3, r1
 80081c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80081c8:	e003      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80081d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081da:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80081de:	673b      	str	r3, [r7, #112]	@ 0x70
 80081e0:	2300      	movs	r3, #0
 80081e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80081e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80081e8:	460b      	mov	r3, r1
 80081ea:	4313      	orrs	r3, r2
 80081ec:	d034      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80081ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80081f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081fc:	d007      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80081fe:	e011      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008200:	4b12      	ldr	r3, [pc, #72]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008204:	4a11      	ldr	r2, [pc, #68]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800820a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800820c:	e00e      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800820e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008212:	3308      	adds	r3, #8
 8008214:	2102      	movs	r1, #2
 8008216:	4618      	mov	r0, r3
 8008218:	f000 fca4 	bl	8008b64 <RCCEx_PLL2_Config>
 800821c:	4603      	mov	r3, r0
 800821e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008222:	e003      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800822a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800822c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10d      	bne.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008234:	4b05      	ldr	r3, [pc, #20]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008238:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800823c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008242:	4a02      	ldr	r2, [pc, #8]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008244:	430b      	orrs	r3, r1
 8008246:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008248:	e006      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800824a:	bf00      	nop
 800824c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008250:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008254:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008264:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008266:	2300      	movs	r3, #0
 8008268:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800826a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800826e:	460b      	mov	r3, r1
 8008270:	4313      	orrs	r3, r2
 8008272:	d00c      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008278:	3328      	adds	r3, #40	@ 0x28
 800827a:	2102      	movs	r1, #2
 800827c:	4618      	mov	r0, r3
 800827e:	f000 fd23 	bl	8008cc8 <RCCEx_PLL3_Config>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800828e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800829a:	663b      	str	r3, [r7, #96]	@ 0x60
 800829c:	2300      	movs	r3, #0
 800829e:	667b      	str	r3, [r7, #100]	@ 0x64
 80082a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80082a4:	460b      	mov	r3, r1
 80082a6:	4313      	orrs	r3, r2
 80082a8:	d038      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80082aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082b6:	d018      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80082b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082bc:	d811      	bhi.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80082be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082c2:	d014      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80082c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082c8:	d80b      	bhi.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d011      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80082ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082d2:	d106      	bne.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082d4:	4bc3      	ldr	r3, [pc, #780]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d8:	4ac2      	ldr	r2, [pc, #776]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80082e0:	e008      	b.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80082e8:	e004      	b.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80082ea:	bf00      	nop
 80082ec:	e002      	b.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80082ee:	bf00      	nop
 80082f0:	e000      	b.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80082f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10b      	bne.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80082fc:	4bb9      	ldr	r3, [pc, #740]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008300:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008304:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800830c:	4ab5      	ldr	r2, [pc, #724]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800830e:	430b      	orrs	r3, r1
 8008310:	6553      	str	r3, [r2, #84]	@ 0x54
 8008312:	e003      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008314:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008318:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800831c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008328:	65bb      	str	r3, [r7, #88]	@ 0x58
 800832a:	2300      	movs	r3, #0
 800832c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800832e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008332:	460b      	mov	r3, r1
 8008334:	4313      	orrs	r3, r2
 8008336:	d009      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008338:	4baa      	ldr	r3, [pc, #680]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800833a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800833c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008340:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008344:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008346:	4aa7      	ldr	r2, [pc, #668]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008348:	430b      	orrs	r3, r1
 800834a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800834c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008358:	653b      	str	r3, [r7, #80]	@ 0x50
 800835a:	2300      	movs	r3, #0
 800835c:	657b      	str	r3, [r7, #84]	@ 0x54
 800835e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008362:	460b      	mov	r3, r1
 8008364:	4313      	orrs	r3, r2
 8008366:	d009      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008368:	4b9e      	ldr	r3, [pc, #632]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800836a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800836c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008370:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008376:	4a9b      	ldr	r2, [pc, #620]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008378:	430b      	orrs	r3, r1
 800837a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800837c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008384:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800838a:	2300      	movs	r3, #0
 800838c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800838e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008392:	460b      	mov	r3, r1
 8008394:	4313      	orrs	r3, r2
 8008396:	d009      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008398:	4b92      	ldr	r3, [pc, #584]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800839a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800839c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80083a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083a6:	4a8f      	ldr	r2, [pc, #572]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083a8:	430b      	orrs	r3, r1
 80083aa:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80083ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80083b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80083ba:	2300      	movs	r3, #0
 80083bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80083be:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80083c2:	460b      	mov	r3, r1
 80083c4:	4313      	orrs	r3, r2
 80083c6:	d00e      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80083c8:	4b86      	ldr	r3, [pc, #536]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	4a85      	ldr	r2, [pc, #532]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083d2:	6113      	str	r3, [r2, #16]
 80083d4:	4b83      	ldr	r3, [pc, #524]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083d6:	6919      	ldr	r1, [r3, #16]
 80083d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80083e0:	4a80      	ldr	r2, [pc, #512]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083e2:	430b      	orrs	r3, r1
 80083e4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80083e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80083f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083f4:	2300      	movs	r3, #0
 80083f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083f8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80083fc:	460b      	mov	r3, r1
 80083fe:	4313      	orrs	r3, r2
 8008400:	d009      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008402:	4b78      	ldr	r3, [pc, #480]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008406:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800840a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800840e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008410:	4a74      	ldr	r2, [pc, #464]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008412:	430b      	orrs	r3, r1
 8008414:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008416:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008422:	633b      	str	r3, [r7, #48]	@ 0x30
 8008424:	2300      	movs	r3, #0
 8008426:	637b      	str	r3, [r7, #52]	@ 0x34
 8008428:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800842c:	460b      	mov	r3, r1
 800842e:	4313      	orrs	r3, r2
 8008430:	d00a      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008432:	4b6c      	ldr	r3, [pc, #432]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008436:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800843a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800843e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008442:	4a68      	ldr	r2, [pc, #416]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008444:	430b      	orrs	r3, r1
 8008446:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008448:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008450:	2100      	movs	r1, #0
 8008452:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800845a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800845e:	460b      	mov	r3, r1
 8008460:	4313      	orrs	r3, r2
 8008462:	d011      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008464:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008468:	3308      	adds	r3, #8
 800846a:	2100      	movs	r1, #0
 800846c:	4618      	mov	r0, r3
 800846e:	f000 fb79 	bl	8008b64 <RCCEx_PLL2_Config>
 8008472:	4603      	mov	r3, r0
 8008474:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008478:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008480:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008484:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	2100      	movs	r1, #0
 8008492:	6239      	str	r1, [r7, #32]
 8008494:	f003 0302 	and.w	r3, r3, #2
 8008498:	627b      	str	r3, [r7, #36]	@ 0x24
 800849a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800849e:	460b      	mov	r3, r1
 80084a0:	4313      	orrs	r3, r2
 80084a2:	d011      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084a8:	3308      	adds	r3, #8
 80084aa:	2101      	movs	r1, #1
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 fb59 	bl	8008b64 <RCCEx_PLL2_Config>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80084b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d003      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80084c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d0:	2100      	movs	r1, #0
 80084d2:	61b9      	str	r1, [r7, #24]
 80084d4:	f003 0304 	and.w	r3, r3, #4
 80084d8:	61fb      	str	r3, [r7, #28]
 80084da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80084de:	460b      	mov	r3, r1
 80084e0:	4313      	orrs	r3, r2
 80084e2:	d011      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084e8:	3308      	adds	r3, #8
 80084ea:	2102      	movs	r1, #2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 fb39 	bl	8008b64 <RCCEx_PLL2_Config>
 80084f2:	4603      	mov	r3, r0
 80084f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80084f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d003      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008500:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008504:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008508:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800850c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008510:	2100      	movs	r1, #0
 8008512:	6139      	str	r1, [r7, #16]
 8008514:	f003 0308 	and.w	r3, r3, #8
 8008518:	617b      	str	r3, [r7, #20]
 800851a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800851e:	460b      	mov	r3, r1
 8008520:	4313      	orrs	r3, r2
 8008522:	d011      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008528:	3328      	adds	r3, #40	@ 0x28
 800852a:	2100      	movs	r1, #0
 800852c:	4618      	mov	r0, r3
 800852e:	f000 fbcb 	bl	8008cc8 <RCCEx_PLL3_Config>
 8008532:	4603      	mov	r3, r0
 8008534:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008538:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800853c:	2b00      	cmp	r3, #0
 800853e:	d003      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008540:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008544:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008550:	2100      	movs	r1, #0
 8008552:	60b9      	str	r1, [r7, #8]
 8008554:	f003 0310 	and.w	r3, r3, #16
 8008558:	60fb      	str	r3, [r7, #12]
 800855a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800855e:	460b      	mov	r3, r1
 8008560:	4313      	orrs	r3, r2
 8008562:	d011      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008568:	3328      	adds	r3, #40	@ 0x28
 800856a:	2101      	movs	r1, #1
 800856c:	4618      	mov	r0, r3
 800856e:	f000 fbab 	bl	8008cc8 <RCCEx_PLL3_Config>
 8008572:	4603      	mov	r3, r0
 8008574:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008578:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800857c:	2b00      	cmp	r3, #0
 800857e:	d003      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008580:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008584:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008588:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	2100      	movs	r1, #0
 8008592:	6039      	str	r1, [r7, #0]
 8008594:	f003 0320 	and.w	r3, r3, #32
 8008598:	607b      	str	r3, [r7, #4]
 800859a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800859e:	460b      	mov	r3, r1
 80085a0:	4313      	orrs	r3, r2
 80085a2:	d011      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085a8:	3328      	adds	r3, #40	@ 0x28
 80085aa:	2102      	movs	r1, #2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fb8b 	bl	8008cc8 <RCCEx_PLL3_Config>
 80085b2:	4603      	mov	r3, r0
 80085b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80085b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80085c8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	e000      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80085dc:	46bd      	mov	sp, r7
 80085de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085e2:	bf00      	nop
 80085e4:	58024400 	.word	0x58024400

080085e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80085ec:	f7fe fde2 	bl	80071b4 <HAL_RCC_GetHCLKFreq>
 80085f0:	4602      	mov	r2, r0
 80085f2:	4b06      	ldr	r3, [pc, #24]	@ (800860c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	091b      	lsrs	r3, r3, #4
 80085f8:	f003 0307 	and.w	r3, r3, #7
 80085fc:	4904      	ldr	r1, [pc, #16]	@ (8008610 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80085fe:	5ccb      	ldrb	r3, [r1, r3]
 8008600:	f003 031f 	and.w	r3, r3, #31
 8008604:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008608:	4618      	mov	r0, r3
 800860a:	bd80      	pop	{r7, pc}
 800860c:	58024400 	.word	0x58024400
 8008610:	0800e878 	.word	0x0800e878

08008614 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008614:	b480      	push	{r7}
 8008616:	b089      	sub	sp, #36	@ 0x24
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800861c:	4ba1      	ldr	r3, [pc, #644]	@ (80088a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800861e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008620:	f003 0303 	and.w	r3, r3, #3
 8008624:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008626:	4b9f      	ldr	r3, [pc, #636]	@ (80088a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862a:	0b1b      	lsrs	r3, r3, #12
 800862c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008630:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008632:	4b9c      	ldr	r3, [pc, #624]	@ (80088a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008636:	091b      	lsrs	r3, r3, #4
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800863e:	4b99      	ldr	r3, [pc, #612]	@ (80088a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008642:	08db      	lsrs	r3, r3, #3
 8008644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	fb02 f303 	mul.w	r3, r2, r3
 800864e:	ee07 3a90 	vmov	s15, r3
 8008652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008656:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	2b00      	cmp	r3, #0
 800865e:	f000 8111 	beq.w	8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	2b02      	cmp	r3, #2
 8008666:	f000 8083 	beq.w	8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	2b02      	cmp	r3, #2
 800866e:	f200 80a1 	bhi.w	80087b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d003      	beq.n	8008680 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d056      	beq.n	800872c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800867e:	e099      	b.n	80087b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008680:	4b88      	ldr	r3, [pc, #544]	@ (80088a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0320 	and.w	r3, r3, #32
 8008688:	2b00      	cmp	r3, #0
 800868a:	d02d      	beq.n	80086e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800868c:	4b85      	ldr	r3, [pc, #532]	@ (80088a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	08db      	lsrs	r3, r3, #3
 8008692:	f003 0303 	and.w	r3, r3, #3
 8008696:	4a84      	ldr	r2, [pc, #528]	@ (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008698:	fa22 f303 	lsr.w	r3, r2, r3
 800869c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	ee07 3a90 	vmov	s15, r3
 80086a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	ee07 3a90 	vmov	s15, r3
 80086ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b6:	4b7b      	ldr	r3, [pc, #492]	@ (80088a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80086e6:	e087      	b.n	80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	ee07 3a90 	vmov	s15, r3
 80086ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80088b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80086f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086fa:	4b6a      	ldr	r3, [pc, #424]	@ (80088a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800870a:	ed97 6a03 	vldr	s12, [r7, #12]
 800870e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800871a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800871e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800872a:	e065      	b.n	80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008736:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80088b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800873a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800873e:	4b59      	ldr	r3, [pc, #356]	@ (80088a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008752:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800875a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800875e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800876a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800876e:	e043      	b.n	80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800877e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008782:	4b48      	ldr	r3, [pc, #288]	@ (80088a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008792:	ed97 6a03 	vldr	s12, [r7, #12]
 8008796:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800879a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800879e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087b2:	e021      	b.n	80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80088b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80087c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087c6:	4b37      	ldr	r3, [pc, #220]	@ (80088a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ce:	ee07 3a90 	vmov	s15, r3
 80087d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80087f8:	4b2a      	ldr	r3, [pc, #168]	@ (80088a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087fc:	0a5b      	lsrs	r3, r3, #9
 80087fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008802:	ee07 3a90 	vmov	s15, r3
 8008806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800880a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800880e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008812:	edd7 6a07 	vldr	s13, [r7, #28]
 8008816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800881a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800881e:	ee17 2a90 	vmov	r2, s15
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008826:	4b1f      	ldr	r3, [pc, #124]	@ (80088a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800882a:	0c1b      	lsrs	r3, r3, #16
 800882c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008830:	ee07 3a90 	vmov	s15, r3
 8008834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008838:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800883c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008840:	edd7 6a07 	vldr	s13, [r7, #28]
 8008844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800884c:	ee17 2a90 	vmov	r2, s15
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008854:	4b13      	ldr	r3, [pc, #76]	@ (80088a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008858:	0e1b      	lsrs	r3, r3, #24
 800885a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008866:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800886a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800886e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800887a:	ee17 2a90 	vmov	r2, s15
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008882:	e008      	b.n	8008896 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	609a      	str	r2, [r3, #8]
}
 8008896:	bf00      	nop
 8008898:	3724      	adds	r7, #36	@ 0x24
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	58024400 	.word	0x58024400
 80088a8:	03d09000 	.word	0x03d09000
 80088ac:	46000000 	.word	0x46000000
 80088b0:	4c742400 	.word	0x4c742400
 80088b4:	4a742400 	.word	0x4a742400
 80088b8:	4af42400 	.word	0x4af42400

080088bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80088bc:	b480      	push	{r7}
 80088be:	b089      	sub	sp, #36	@ 0x24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088c4:	4ba1      	ldr	r3, [pc, #644]	@ (8008b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088c8:	f003 0303 	and.w	r3, r3, #3
 80088cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80088ce:	4b9f      	ldr	r3, [pc, #636]	@ (8008b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d2:	0d1b      	lsrs	r3, r3, #20
 80088d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80088da:	4b9c      	ldr	r3, [pc, #624]	@ (8008b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088de:	0a1b      	lsrs	r3, r3, #8
 80088e0:	f003 0301 	and.w	r3, r3, #1
 80088e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80088e6:	4b99      	ldr	r3, [pc, #612]	@ (8008b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ea:	08db      	lsrs	r3, r3, #3
 80088ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	fb02 f303 	mul.w	r3, r2, r3
 80088f6:	ee07 3a90 	vmov	s15, r3
 80088fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 8111 	beq.w	8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	2b02      	cmp	r3, #2
 800890e:	f000 8083 	beq.w	8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	2b02      	cmp	r3, #2
 8008916:	f200 80a1 	bhi.w	8008a5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d003      	beq.n	8008928 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d056      	beq.n	80089d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008926:	e099      	b.n	8008a5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008928:	4b88      	ldr	r3, [pc, #544]	@ (8008b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0320 	and.w	r3, r3, #32
 8008930:	2b00      	cmp	r3, #0
 8008932:	d02d      	beq.n	8008990 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008934:	4b85      	ldr	r3, [pc, #532]	@ (8008b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	08db      	lsrs	r3, r3, #3
 800893a:	f003 0303 	and.w	r3, r3, #3
 800893e:	4a84      	ldr	r2, [pc, #528]	@ (8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008940:	fa22 f303 	lsr.w	r3, r2, r3
 8008944:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	ee07 3a90 	vmov	s15, r3
 800894c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	ee07 3a90 	vmov	s15, r3
 8008956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800895a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800895e:	4b7b      	ldr	r3, [pc, #492]	@ (8008b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800896e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008972:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008b54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800897a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800897e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800898a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800898e:	e087      	b.n	8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	ee07 3a90 	vmov	s15, r3
 8008996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008b58 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800899e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089a2:	4b6a      	ldr	r3, [pc, #424]	@ (8008b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80089b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008b54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089d2:	e065      	b.n	8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	ee07 3a90 	vmov	s15, r3
 80089da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80089e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089e6:	4b59      	ldr	r3, [pc, #356]	@ (8008b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008b54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a16:	e043      	b.n	8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	ee07 3a90 	vmov	s15, r3
 8008a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a22:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008b60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a2a:	4b48      	ldr	r3, [pc, #288]	@ (8008b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a3e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008b54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a5a:	e021      	b.n	8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	ee07 3a90 	vmov	s15, r3
 8008a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a66:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a6e:	4b37      	ldr	r3, [pc, #220]	@ (8008b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a76:	ee07 3a90 	vmov	s15, r3
 8008a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a82:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008b54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8008b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa4:	0a5b      	lsrs	r3, r3, #9
 8008aa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ab6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008aba:	edd7 6a07 	vldr	s13, [r7, #28]
 8008abe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ac6:	ee17 2a90 	vmov	r2, s15
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008ace:	4b1f      	ldr	r3, [pc, #124]	@ (8008b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad2:	0c1b      	lsrs	r3, r3, #16
 8008ad4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ad8:	ee07 3a90 	vmov	s15, r3
 8008adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ae4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ae8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008af4:	ee17 2a90 	vmov	r2, s15
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008afc:	4b13      	ldr	r3, [pc, #76]	@ (8008b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b00:	0e1b      	lsrs	r3, r3, #24
 8008b02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b06:	ee07 3a90 	vmov	s15, r3
 8008b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b16:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b22:	ee17 2a90 	vmov	r2, s15
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b2a:	e008      	b.n	8008b3e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	609a      	str	r2, [r3, #8]
}
 8008b3e:	bf00      	nop
 8008b40:	3724      	adds	r7, #36	@ 0x24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	58024400 	.word	0x58024400
 8008b50:	03d09000 	.word	0x03d09000
 8008b54:	46000000 	.word	0x46000000
 8008b58:	4c742400 	.word	0x4c742400
 8008b5c:	4a742400 	.word	0x4a742400
 8008b60:	4af42400 	.word	0x4af42400

08008b64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b72:	4b53      	ldr	r3, [pc, #332]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b76:	f003 0303 	and.w	r3, r3, #3
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d101      	bne.n	8008b82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e099      	b.n	8008cb6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008b82:	4b4f      	ldr	r3, [pc, #316]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a4e      	ldr	r2, [pc, #312]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008b88:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b8e:	f7f9 f9d5 	bl	8001f3c <HAL_GetTick>
 8008b92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b94:	e008      	b.n	8008ba8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b96:	f7f9 f9d1 	bl	8001f3c <HAL_GetTick>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d901      	bls.n	8008ba8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e086      	b.n	8008cb6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ba8:	4b45      	ldr	r3, [pc, #276]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1f0      	bne.n	8008b96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008bb4:	4b42      	ldr	r3, [pc, #264]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	031b      	lsls	r3, r3, #12
 8008bc2:	493f      	ldr	r1, [pc, #252]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	628b      	str	r3, [r1, #40]	@ 0x28
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	025b      	lsls	r3, r3, #9
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	431a      	orrs	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	3b01      	subs	r3, #1
 8008be4:	041b      	lsls	r3, r3, #16
 8008be6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008bea:	431a      	orrs	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	061b      	lsls	r3, r3, #24
 8008bf4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008bf8:	4931      	ldr	r1, [pc, #196]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008bfe:	4b30      	ldr	r3, [pc, #192]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c02:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	492d      	ldr	r1, [pc, #180]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008c10:	4b2b      	ldr	r3, [pc, #172]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c14:	f023 0220 	bic.w	r2, r3, #32
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	4928      	ldr	r1, [pc, #160]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008c22:	4b27      	ldr	r3, [pc, #156]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c26:	4a26      	ldr	r2, [pc, #152]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008c28:	f023 0310 	bic.w	r3, r3, #16
 8008c2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c2e:	4b24      	ldr	r3, [pc, #144]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008c30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c32:	4b24      	ldr	r3, [pc, #144]	@ (8008cc4 <RCCEx_PLL2_Config+0x160>)
 8008c34:	4013      	ands	r3, r2
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	69d2      	ldr	r2, [r2, #28]
 8008c3a:	00d2      	lsls	r2, r2, #3
 8008c3c:	4920      	ldr	r1, [pc, #128]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008c42:	4b1f      	ldr	r3, [pc, #124]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c46:	4a1e      	ldr	r2, [pc, #120]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008c48:	f043 0310 	orr.w	r3, r3, #16
 8008c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d106      	bne.n	8008c62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c54:	4b1a      	ldr	r3, [pc, #104]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c58:	4a19      	ldr	r2, [pc, #100]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008c5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c60:	e00f      	b.n	8008c82 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d106      	bne.n	8008c76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008c68:	4b15      	ldr	r3, [pc, #84]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c6c:	4a14      	ldr	r2, [pc, #80]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008c6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c74:	e005      	b.n	8008c82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c76:	4b12      	ldr	r3, [pc, #72]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c7a:	4a11      	ldr	r2, [pc, #68]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008c7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008c80:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008c82:	4b0f      	ldr	r3, [pc, #60]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a0e      	ldr	r2, [pc, #56]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008c88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c8e:	f7f9 f955 	bl	8001f3c <HAL_GetTick>
 8008c92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c94:	e008      	b.n	8008ca8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c96:	f7f9 f951 	bl	8001f3c <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d901      	bls.n	8008ca8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e006      	b.n	8008cb6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ca8:	4b05      	ldr	r3, [pc, #20]	@ (8008cc0 <RCCEx_PLL2_Config+0x15c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d0f0      	beq.n	8008c96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	58024400 	.word	0x58024400
 8008cc4:	ffff0007 	.word	0xffff0007

08008cc8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cd6:	4b53      	ldr	r3, [pc, #332]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cda:	f003 0303 	and.w	r3, r3, #3
 8008cde:	2b03      	cmp	r3, #3
 8008ce0:	d101      	bne.n	8008ce6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e099      	b.n	8008e1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008ce6:	4b4f      	ldr	r3, [pc, #316]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a4e      	ldr	r2, [pc, #312]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008cec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008cf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cf2:	f7f9 f923 	bl	8001f3c <HAL_GetTick>
 8008cf6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008cf8:	e008      	b.n	8008d0c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008cfa:	f7f9 f91f 	bl	8001f3c <HAL_GetTick>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d901      	bls.n	8008d0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e086      	b.n	8008e1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d0c:	4b45      	ldr	r3, [pc, #276]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1f0      	bne.n	8008cfa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008d18:	4b42      	ldr	r3, [pc, #264]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d1c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	051b      	lsls	r3, r3, #20
 8008d26:	493f      	ldr	r1, [pc, #252]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	3b01      	subs	r3, #1
 8008d32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	025b      	lsls	r3, r3, #9
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	431a      	orrs	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	3b01      	subs	r3, #1
 8008d48:	041b      	lsls	r3, r3, #16
 8008d4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008d4e:	431a      	orrs	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	3b01      	subs	r3, #1
 8008d56:	061b      	lsls	r3, r3, #24
 8008d58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008d5c:	4931      	ldr	r1, [pc, #196]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008d62:	4b30      	ldr	r3, [pc, #192]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d66:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	492d      	ldr	r1, [pc, #180]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008d70:	4313      	orrs	r3, r2
 8008d72:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008d74:	4b2b      	ldr	r3, [pc, #172]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d78:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	4928      	ldr	r1, [pc, #160]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008d82:	4313      	orrs	r3, r2
 8008d84:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008d86:	4b27      	ldr	r3, [pc, #156]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d8a:	4a26      	ldr	r2, [pc, #152]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008d8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d92:	4b24      	ldr	r3, [pc, #144]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008d94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d96:	4b24      	ldr	r3, [pc, #144]	@ (8008e28 <RCCEx_PLL3_Config+0x160>)
 8008d98:	4013      	ands	r3, r2
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	69d2      	ldr	r2, [r2, #28]
 8008d9e:	00d2      	lsls	r2, r2, #3
 8008da0:	4920      	ldr	r1, [pc, #128]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008da2:	4313      	orrs	r3, r2
 8008da4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008da6:	4b1f      	ldr	r3, [pc, #124]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008daa:	4a1e      	ldr	r2, [pc, #120]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008db0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d106      	bne.n	8008dc6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008db8:	4b1a      	ldr	r3, [pc, #104]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dbc:	4a19      	ldr	r2, [pc, #100]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008dbe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008dc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008dc4:	e00f      	b.n	8008de6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d106      	bne.n	8008dda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008dcc:	4b15      	ldr	r3, [pc, #84]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd0:	4a14      	ldr	r2, [pc, #80]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008dd2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008dd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008dd8:	e005      	b.n	8008de6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008dda:	4b12      	ldr	r3, [pc, #72]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dde:	4a11      	ldr	r2, [pc, #68]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008de0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008de4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008de6:	4b0f      	ldr	r3, [pc, #60]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a0e      	ldr	r2, [pc, #56]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008df0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008df2:	f7f9 f8a3 	bl	8001f3c <HAL_GetTick>
 8008df6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008df8:	e008      	b.n	8008e0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008dfa:	f7f9 f89f 	bl	8001f3c <HAL_GetTick>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d901      	bls.n	8008e0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e006      	b.n	8008e1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e0c:	4b05      	ldr	r3, [pc, #20]	@ (8008e24 <RCCEx_PLL3_Config+0x15c>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0f0      	beq.n	8008dfa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	58024400 	.word	0x58024400
 8008e28:	ffff0007 	.word	0xffff0007

08008e2c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e10f      	b.n	800905e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a87      	ldr	r2, [pc, #540]	@ (8009068 <HAL_SPI_Init+0x23c>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d00f      	beq.n	8008e6e <HAL_SPI_Init+0x42>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a86      	ldr	r2, [pc, #536]	@ (800906c <HAL_SPI_Init+0x240>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d00a      	beq.n	8008e6e <HAL_SPI_Init+0x42>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a84      	ldr	r2, [pc, #528]	@ (8009070 <HAL_SPI_Init+0x244>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d005      	beq.n	8008e6e <HAL_SPI_Init+0x42>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	2b0f      	cmp	r3, #15
 8008e68:	d901      	bls.n	8008e6e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e0f7      	b.n	800905e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fbba 	bl	80095e8 <SPI_GetPacketSize>
 8008e74:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a7b      	ldr	r2, [pc, #492]	@ (8009068 <HAL_SPI_Init+0x23c>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d00c      	beq.n	8008e9a <HAL_SPI_Init+0x6e>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a79      	ldr	r2, [pc, #484]	@ (800906c <HAL_SPI_Init+0x240>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d007      	beq.n	8008e9a <HAL_SPI_Init+0x6e>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a78      	ldr	r2, [pc, #480]	@ (8009070 <HAL_SPI_Init+0x244>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d002      	beq.n	8008e9a <HAL_SPI_Init+0x6e>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2b08      	cmp	r3, #8
 8008e98:	d811      	bhi.n	8008ebe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008e9e:	4a72      	ldr	r2, [pc, #456]	@ (8009068 <HAL_SPI_Init+0x23c>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d009      	beq.n	8008eb8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a70      	ldr	r2, [pc, #448]	@ (800906c <HAL_SPI_Init+0x240>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d004      	beq.n	8008eb8 <HAL_SPI_Init+0x8c>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a6f      	ldr	r2, [pc, #444]	@ (8009070 <HAL_SPI_Init+0x244>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d104      	bne.n	8008ec2 <HAL_SPI_Init+0x96>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b10      	cmp	r3, #16
 8008ebc:	d901      	bls.n	8008ec2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e0cd      	b.n	800905e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d106      	bne.n	8008edc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7f8 f9fe 	bl	80012d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2202      	movs	r2, #2
 8008ee0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f022 0201 	bic.w	r2, r2, #1
 8008ef2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008efe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f08:	d119      	bne.n	8008f3e <HAL_SPI_Init+0x112>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f12:	d103      	bne.n	8008f1c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d008      	beq.n	8008f2e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10c      	bne.n	8008f3e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008f28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f2c:	d107      	bne.n	8008f3e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008f3c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00f      	beq.n	8008f6a <HAL_SPI_Init+0x13e>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	2b06      	cmp	r3, #6
 8008f50:	d90b      	bls.n	8008f6a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	430a      	orrs	r2, r1
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	e007      	b.n	8008f7a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008f78:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	69da      	ldr	r2, [r3, #28]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f82:	431a      	orrs	r2, r3
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	431a      	orrs	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f8c:	ea42 0103 	orr.w	r1, r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68da      	ldr	r2, [r3, #12]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	430a      	orrs	r2, r1
 8008f9a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008faa:	431a      	orrs	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	431a      	orrs	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	431a      	orrs	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
 8008fc2:	431a      	orrs	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	431a      	orrs	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	431a      	orrs	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fda:	ea42 0103 	orr.w	r1, r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d113      	bne.n	800901a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009004:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009018:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f022 0201 	bic.w	r2, r2, #1
 8009028:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00a      	beq.n	800904c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	430a      	orrs	r2, r1
 800904a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	40013000 	.word	0x40013000
 800906c:	40003800 	.word	0x40003800
 8009070:	40003c00 	.word	0x40003c00

08009074 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b08a      	sub	sp, #40	@ 0x28
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800908c:	6a3a      	ldr	r2, [r7, #32]
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	4013      	ands	r3, r2
 8009092:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800909c:	2300      	movs	r3, #0
 800909e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80090a6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	3330      	adds	r3, #48	@ 0x30
 80090ae:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d010      	beq.n	80090dc <HAL_SPI_IRQHandler+0x68>
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	f003 0308 	and.w	r3, r3, #8
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00b      	beq.n	80090dc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	699a      	ldr	r2, [r3, #24]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090d2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f9c3 	bl	8009460 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80090da:	e192      	b.n	8009402 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d113      	bne.n	800910e <HAL_SPI_IRQHandler+0x9a>
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	f003 0320 	and.w	r3, r3, #32
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10e      	bne.n	800910e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d009      	beq.n	800910e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	4798      	blx	r3
    handled = 1UL;
 800910a:	2301      	movs	r3, #1
 800910c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10f      	bne.n	8009138 <HAL_SPI_IRQHandler+0xc4>
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00a      	beq.n	8009138 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009128:	2b00      	cmp	r3, #0
 800912a:	d105      	bne.n	8009138 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	4798      	blx	r3
    handled = 1UL;
 8009134:	2301      	movs	r3, #1
 8009136:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	f003 0320 	and.w	r3, r3, #32
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10f      	bne.n	8009162 <HAL_SPI_IRQHandler+0xee>
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	f003 0302 	and.w	r3, r3, #2
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00a      	beq.n	8009162 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009152:	2b00      	cmp	r3, #0
 8009154:	d105      	bne.n	8009162 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	4798      	blx	r3
    handled = 1UL;
 800915e:	2301      	movs	r3, #1
 8009160:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009164:	2b00      	cmp	r3, #0
 8009166:	f040 8147 	bne.w	80093f8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	f003 0308 	and.w	r3, r3, #8
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 808b 	beq.w	800928c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	699a      	ldr	r2, [r3, #24]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f042 0208 	orr.w	r2, r2, #8
 8009184:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	699a      	ldr	r2, [r3, #24]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f042 0210 	orr.w	r2, r2, #16
 8009194:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	699a      	ldr	r2, [r3, #24]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091a4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	691a      	ldr	r2, [r3, #16]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f022 0208 	bic.w	r2, r2, #8
 80091b4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d13d      	bne.n	8009240 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80091c4:	e036      	b.n	8009234 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	2b0f      	cmp	r3, #15
 80091cc:	d90b      	bls.n	80091e6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091d6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80091d8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091de:	1d1a      	adds	r2, r3, #4
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	665a      	str	r2, [r3, #100]	@ 0x64
 80091e4:	e01d      	b.n	8009222 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	2b07      	cmp	r3, #7
 80091ec:	d90b      	bls.n	8009206 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	8812      	ldrh	r2, [r2, #0]
 80091f6:	b292      	uxth	r2, r2
 80091f8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091fe:	1c9a      	adds	r2, r3, #2
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	665a      	str	r2, [r3, #100]	@ 0x64
 8009204:	e00d      	b.n	8009222 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009212:	7812      	ldrb	r2, [r2, #0]
 8009214:	b2d2      	uxtb	r2, r2
 8009216:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800921c:	1c5a      	adds	r2, r3, #1
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009228:	b29b      	uxth	r3, r3
 800922a:	3b01      	subs	r3, #1
 800922c:	b29a      	uxth	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800923a:	b29b      	uxth	r3, r3
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1c2      	bne.n	80091c6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f931 	bl	80094a8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009254:	2b00      	cmp	r3, #0
 8009256:	d003      	beq.n	8009260 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f8f7 	bl	800944c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800925e:	e0d0      	b.n	8009402 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009260:	7cfb      	ldrb	r3, [r7, #19]
 8009262:	2b05      	cmp	r3, #5
 8009264:	d103      	bne.n	800926e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f8e6 	bl	8009438 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800926c:	e0c6      	b.n	80093fc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800926e:	7cfb      	ldrb	r3, [r7, #19]
 8009270:	2b04      	cmp	r3, #4
 8009272:	d103      	bne.n	800927c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 f8d5 	bl	8009424 <HAL_SPI_RxCpltCallback>
    return;
 800927a:	e0bf      	b.n	80093fc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800927c:	7cfb      	ldrb	r3, [r7, #19]
 800927e:	2b03      	cmp	r3, #3
 8009280:	f040 80bc 	bne.w	80093fc <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f8c3 	bl	8009410 <HAL_SPI_TxCpltCallback>
    return;
 800928a:	e0b7      	b.n	80093fc <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8009292:	2b00      	cmp	r3, #0
 8009294:	f000 80b5 	beq.w	8009402 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00f      	beq.n	80092c2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092a8:	f043 0204 	orr.w	r2, r3, #4
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	699a      	ldr	r2, [r3, #24]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092c0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00f      	beq.n	80092ec <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092d2:	f043 0201 	orr.w	r2, r3, #1
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	699a      	ldr	r2, [r3, #24]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092ea:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00f      	beq.n	8009316 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092fc:	f043 0208 	orr.w	r2, r3, #8
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	699a      	ldr	r2, [r3, #24]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009314:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	f003 0320 	and.w	r3, r3, #32
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00f      	beq.n	8009340 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009326:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	699a      	ldr	r2, [r3, #24]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f042 0220 	orr.w	r2, r2, #32
 800933e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009346:	2b00      	cmp	r3, #0
 8009348:	d05a      	beq.n	8009400 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f022 0201 	bic.w	r2, r2, #1
 8009358:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	6919      	ldr	r1, [r3, #16]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	4b28      	ldr	r3, [pc, #160]	@ (8009408 <HAL_SPI_IRQHandler+0x394>)
 8009366:	400b      	ands	r3, r1
 8009368:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009370:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009374:	d138      	bne.n	80093e8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	689a      	ldr	r2, [r3, #8]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009384:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800938a:	2b00      	cmp	r3, #0
 800938c:	d013      	beq.n	80093b6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009392:	4a1e      	ldr	r2, [pc, #120]	@ (800940c <HAL_SPI_IRQHandler+0x398>)
 8009394:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800939a:	4618      	mov	r0, r3
 800939c:	f7fa f89c 	bl	80034d8 <HAL_DMA_Abort_IT>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d007      	beq.n	80093b6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d020      	beq.n	8009400 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093c2:	4a12      	ldr	r2, [pc, #72]	@ (800940c <HAL_SPI_IRQHandler+0x398>)
 80093c4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fa f884 	bl	80034d8 <HAL_DMA_Abort_IT>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d014      	beq.n	8009400 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80093e6:	e00b      	b.n	8009400 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f82b 	bl	800944c <HAL_SPI_ErrorCallback>
    return;
 80093f6:	e003      	b.n	8009400 <HAL_SPI_IRQHandler+0x38c>
    return;
 80093f8:	bf00      	nop
 80093fa:	e002      	b.n	8009402 <HAL_SPI_IRQHandler+0x38e>
    return;
 80093fc:	bf00      	nop
 80093fe:	e000      	b.n	8009402 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009400:	bf00      	nop
  }
}
 8009402:	3728      	adds	r7, #40	@ 0x28
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	fffffc94 	.word	0xfffffc94
 800940c:	08009475 	.word	0x08009475

08009410 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009480:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f7ff ffd6 	bl	800944c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80094a0:	bf00      	nop
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	699a      	ldr	r2, [r3, #24]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f042 0208 	orr.w	r2, r2, #8
 80094c6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	699a      	ldr	r2, [r3, #24]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f042 0210 	orr.w	r2, r2, #16
 80094d6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f022 0201 	bic.w	r2, r2, #1
 80094e6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6919      	ldr	r1, [r3, #16]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	4b3c      	ldr	r3, [pc, #240]	@ (80095e4 <SPI_CloseTransfer+0x13c>)
 80094f4:	400b      	ands	r3, r1
 80094f6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689a      	ldr	r2, [r3, #8]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009506:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2b04      	cmp	r3, #4
 8009512:	d014      	beq.n	800953e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f003 0320 	and.w	r3, r3, #32
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00f      	beq.n	800953e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009524:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	699a      	ldr	r2, [r3, #24]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f042 0220 	orr.w	r2, r2, #32
 800953c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b03      	cmp	r3, #3
 8009548:	d014      	beq.n	8009574 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00f      	beq.n	8009574 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800955a:	f043 0204 	orr.w	r2, r3, #4
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	699a      	ldr	r2, [r3, #24]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009572:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00f      	beq.n	800959e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009584:	f043 0201 	orr.w	r2, r3, #1
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	699a      	ldr	r2, [r3, #24]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800959c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00f      	beq.n	80095c8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095ae:	f043 0208 	orr.w	r2, r3, #8
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	699a      	ldr	r2, [r3, #24]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80095c6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80095d8:	bf00      	nop
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	fffffc90 	.word	0xfffffc90

080095e8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095f4:	095b      	lsrs	r3, r3, #5
 80095f6:	3301      	adds	r3, #1
 80095f8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	3301      	adds	r3, #1
 8009600:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	3307      	adds	r3, #7
 8009606:	08db      	lsrs	r3, r3, #3
 8009608:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e042      	b.n	80096b6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7f8 f9e4 	bl	8001a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2224      	movs	r2, #36	@ 0x24
 800964c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f022 0201 	bic.w	r2, r2, #1
 800965e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009664:	2b00      	cmp	r3, #0
 8009666:	d002      	beq.n	800966e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f001 fbd7 	bl	800ae1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fd68 	bl	800a144 <UART_SetConfig>
 8009674:	4603      	mov	r3, r0
 8009676:	2b01      	cmp	r3, #1
 8009678:	d101      	bne.n	800967e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e01b      	b.n	80096b6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800968c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	689a      	ldr	r2, [r3, #8]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800969c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f042 0201 	orr.w	r2, r2, #1
 80096ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f001 fc56 	bl	800af60 <UART_CheckIdleState>
 80096b4:	4603      	mov	r3, r0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b08a      	sub	sp, #40	@ 0x28
 80096c2:	af02      	add	r7, sp, #8
 80096c4:	60f8      	str	r0, [r7, #12]
 80096c6:	60b9      	str	r1, [r7, #8]
 80096c8:	603b      	str	r3, [r7, #0]
 80096ca:	4613      	mov	r3, r2
 80096cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096d4:	2b20      	cmp	r3, #32
 80096d6:	d17b      	bne.n	80097d0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <HAL_UART_Transmit+0x26>
 80096de:	88fb      	ldrh	r3, [r7, #6]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e074      	b.n	80097d2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2221      	movs	r2, #33	@ 0x21
 80096f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096f8:	f7f8 fc20 	bl	8001f3c <HAL_GetTick>
 80096fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	88fa      	ldrh	r2, [r7, #6]
 8009702:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	88fa      	ldrh	r2, [r7, #6]
 800970a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009716:	d108      	bne.n	800972a <HAL_UART_Transmit+0x6c>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d104      	bne.n	800972a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009720:	2300      	movs	r3, #0
 8009722:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	61bb      	str	r3, [r7, #24]
 8009728:	e003      	b.n	8009732 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800972e:	2300      	movs	r3, #0
 8009730:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009732:	e030      	b.n	8009796 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	2200      	movs	r2, #0
 800973c:	2180      	movs	r1, #128	@ 0x80
 800973e:	68f8      	ldr	r0, [r7, #12]
 8009740:	f001 fcb8 	bl	800b0b4 <UART_WaitOnFlagUntilTimeout>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d005      	beq.n	8009756 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2220      	movs	r2, #32
 800974e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009752:	2303      	movs	r3, #3
 8009754:	e03d      	b.n	80097d2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10b      	bne.n	8009774 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	881b      	ldrh	r3, [r3, #0]
 8009760:	461a      	mov	r2, r3
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800976a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	3302      	adds	r3, #2
 8009770:	61bb      	str	r3, [r7, #24]
 8009772:	e007      	b.n	8009784 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	781a      	ldrb	r2, [r3, #0]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	3301      	adds	r3, #1
 8009782:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800978a:	b29b      	uxth	r3, r3
 800978c:	3b01      	subs	r3, #1
 800978e:	b29a      	uxth	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800979c:	b29b      	uxth	r3, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1c8      	bne.n	8009734 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2200      	movs	r2, #0
 80097aa:	2140      	movs	r1, #64	@ 0x40
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f001 fc81 	bl	800b0b4 <UART_WaitOnFlagUntilTimeout>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d005      	beq.n	80097c4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2220      	movs	r2, #32
 80097bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80097c0:	2303      	movs	r3, #3
 80097c2:	e006      	b.n	80097d2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2220      	movs	r2, #32
 80097c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	e000      	b.n	80097d2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80097d0:	2302      	movs	r3, #2
  }
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3720      	adds	r7, #32
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
	...

080097dc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b09a      	sub	sp, #104	@ 0x68
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097ec:	e853 3f00 	ldrex	r3, [r3]
 80097f0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80097f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009802:	657b      	str	r3, [r7, #84]	@ 0x54
 8009804:	653a      	str	r2, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009806:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009808:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800980a:	e841 2300 	strex	r3, r2, [r1]
 800980e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1e6      	bne.n	80097e4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3308      	adds	r3, #8
 800981c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009828:	4b46      	ldr	r3, [pc, #280]	@ (8009944 <HAL_UART_AbortReceive+0x168>)
 800982a:	4013      	ands	r3, r2
 800982c:	663b      	str	r3, [r7, #96]	@ 0x60
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3308      	adds	r3, #8
 8009834:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009836:	643a      	str	r2, [r7, #64]	@ 0x40
 8009838:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800983c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800983e:	e841 2300 	strex	r3, r2, [r1]
 8009842:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1e5      	bne.n	8009816 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800984e:	2b01      	cmp	r3, #1
 8009850:	d118      	bne.n	8009884 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	e853 3f00 	ldrex	r3, [r3]
 800985e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	f023 0310 	bic.w	r3, r3, #16
 8009866:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	461a      	mov	r2, r3
 800986e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009872:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009874:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009878:	e841 2300 	strex	r3, r2, [r1]
 800987c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800987e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1e6      	bne.n	8009852 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800988e:	2b40      	cmp	r3, #64	@ 0x40
 8009890:	d13b      	bne.n	800990a <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3308      	adds	r3, #8
 8009898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	e853 3f00 	ldrex	r3, [r3]
 80098a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	3308      	adds	r3, #8
 80098b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80098b2:	61ba      	str	r2, [r7, #24]
 80098b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b6:	6979      	ldr	r1, [r7, #20]
 80098b8:	69ba      	ldr	r2, [r7, #24]
 80098ba:	e841 2300 	strex	r3, r2, [r1]
 80098be:	613b      	str	r3, [r7, #16]
   return(result);
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1e5      	bne.n	8009892 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d01c      	beq.n	800990a <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098d6:	2200      	movs	r2, #0
 80098d8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7f9 fadb 	bl	8002e9c <HAL_DMA_Abort>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00e      	beq.n	800990a <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fa ff98 	bl	8004828 <HAL_DMA_GetError>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b20      	cmp	r3, #32
 80098fc:	d105      	bne.n	800990a <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2210      	movs	r2, #16
 8009902:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e017      	b.n	800993a <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	220f      	movs	r2, #15
 8009918:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	699a      	ldr	r2, [r3, #24]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f042 0208 	orr.w	r2, r2, #8
 8009928:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2220      	movs	r2, #32
 800992e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3768      	adds	r7, #104	@ 0x68
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	effffffe 	.word	0xeffffffe

08009948 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b0ba      	sub	sp, #232	@ 0xe8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800996e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009972:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009976:	4013      	ands	r3, r2
 8009978:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800997c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009980:	2b00      	cmp	r3, #0
 8009982:	d11b      	bne.n	80099bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009988:	f003 0320 	and.w	r3, r3, #32
 800998c:	2b00      	cmp	r3, #0
 800998e:	d015      	beq.n	80099bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009994:	f003 0320 	and.w	r3, r3, #32
 8009998:	2b00      	cmp	r3, #0
 800999a:	d105      	bne.n	80099a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800999c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d009      	beq.n	80099bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 8393 	beq.w	800a0d8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	4798      	blx	r3
      }
      return;
 80099ba:	e38d      	b.n	800a0d8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80099bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f000 8123 	beq.w	8009c0c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80099c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80099ca:	4b8d      	ldr	r3, [pc, #564]	@ (8009c00 <HAL_UART_IRQHandler+0x2b8>)
 80099cc:	4013      	ands	r3, r2
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d106      	bne.n	80099e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80099d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80099d6:	4b8b      	ldr	r3, [pc, #556]	@ (8009c04 <HAL_UART_IRQHandler+0x2bc>)
 80099d8:	4013      	ands	r3, r2
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f000 8116 	beq.w	8009c0c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099e4:	f003 0301 	and.w	r3, r3, #1
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d011      	beq.n	8009a10 <HAL_UART_IRQHandler+0xc8>
 80099ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00b      	beq.n	8009a10 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2201      	movs	r2, #1
 80099fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a06:	f043 0201 	orr.w	r2, r3, #1
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a14:	f003 0302 	and.w	r3, r3, #2
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d011      	beq.n	8009a40 <HAL_UART_IRQHandler+0xf8>
 8009a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00b      	beq.n	8009a40 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2202      	movs	r2, #2
 8009a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a36:	f043 0204 	orr.w	r2, r3, #4
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a44:	f003 0304 	and.w	r3, r3, #4
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d011      	beq.n	8009a70 <HAL_UART_IRQHandler+0x128>
 8009a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a50:	f003 0301 	and.w	r3, r3, #1
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00b      	beq.n	8009a70 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2204      	movs	r2, #4
 8009a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a66:	f043 0202 	orr.w	r2, r3, #2
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a74:	f003 0308 	and.w	r3, r3, #8
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d017      	beq.n	8009aac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a80:	f003 0320 	and.w	r3, r3, #32
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d105      	bne.n	8009a94 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009a88:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009a8c:	4b5c      	ldr	r3, [pc, #368]	@ (8009c00 <HAL_UART_IRQHandler+0x2b8>)
 8009a8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00b      	beq.n	8009aac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2208      	movs	r2, #8
 8009a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aa2:	f043 0208 	orr.w	r2, r3, #8
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ab0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d012      	beq.n	8009ade <HAL_UART_IRQHandler+0x196>
 8009ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009abc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00c      	beq.n	8009ade <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009acc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ad4:	f043 0220 	orr.w	r2, r3, #32
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 82f9 	beq.w	800a0dc <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009aee:	f003 0320 	and.w	r3, r3, #32
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d013      	beq.n	8009b1e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009afa:	f003 0320 	and.w	r3, r3, #32
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d105      	bne.n	8009b0e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d007      	beq.n	8009b1e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d003      	beq.n	8009b1e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b32:	2b40      	cmp	r3, #64	@ 0x40
 8009b34:	d005      	beq.n	8009b42 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009b36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009b3a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d054      	beq.n	8009bec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f001 fc0c 	bl	800b360 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b52:	2b40      	cmp	r3, #64	@ 0x40
 8009b54:	d146      	bne.n	8009be4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	3308      	adds	r3, #8
 8009b5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b64:	e853 3f00 	ldrex	r3, [r3]
 8009b68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3308      	adds	r3, #8
 8009b7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009b82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009b86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009b8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009b92:	e841 2300 	strex	r3, r2, [r1]
 8009b96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1d9      	bne.n	8009b56 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d017      	beq.n	8009bdc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bb2:	4a15      	ldr	r2, [pc, #84]	@ (8009c08 <HAL_UART_IRQHandler+0x2c0>)
 8009bb4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7f9 fc8b 	bl	80034d8 <HAL_DMA_Abort_IT>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d019      	beq.n	8009bfc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009bd6:	4610      	mov	r0, r2
 8009bd8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bda:	e00f      	b.n	8009bfc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 faa7 	bl	800a130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009be2:	e00b      	b.n	8009bfc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 faa3 	bl	800a130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bea:	e007      	b.n	8009bfc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 fa9f 	bl	800a130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009bfa:	e26f      	b.n	800a0dc <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bfc:	bf00      	nop
    return;
 8009bfe:	e26d      	b.n	800a0dc <HAL_UART_IRQHandler+0x794>
 8009c00:	10000001 	.word	0x10000001
 8009c04:	04000120 	.word	0x04000120
 8009c08:	0800b613 	.word	0x0800b613

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	f040 8203 	bne.w	800a01c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c1a:	f003 0310 	and.w	r3, r3, #16
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f000 81fc 	beq.w	800a01c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c28:	f003 0310 	and.w	r3, r3, #16
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f000 81f5 	beq.w	800a01c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2210      	movs	r2, #16
 8009c38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c44:	2b40      	cmp	r3, #64	@ 0x40
 8009c46:	f040 816d 	bne.w	8009f24 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4aa4      	ldr	r2, [pc, #656]	@ (8009ee4 <HAL_UART_IRQHandler+0x59c>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d068      	beq.n	8009d2a <HAL_UART_IRQHandler+0x3e2>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4aa1      	ldr	r2, [pc, #644]	@ (8009ee8 <HAL_UART_IRQHandler+0x5a0>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d061      	beq.n	8009d2a <HAL_UART_IRQHandler+0x3e2>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a9f      	ldr	r2, [pc, #636]	@ (8009eec <HAL_UART_IRQHandler+0x5a4>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d05a      	beq.n	8009d2a <HAL_UART_IRQHandler+0x3e2>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a9c      	ldr	r2, [pc, #624]	@ (8009ef0 <HAL_UART_IRQHandler+0x5a8>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d053      	beq.n	8009d2a <HAL_UART_IRQHandler+0x3e2>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a9a      	ldr	r2, [pc, #616]	@ (8009ef4 <HAL_UART_IRQHandler+0x5ac>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d04c      	beq.n	8009d2a <HAL_UART_IRQHandler+0x3e2>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a97      	ldr	r2, [pc, #604]	@ (8009ef8 <HAL_UART_IRQHandler+0x5b0>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d045      	beq.n	8009d2a <HAL_UART_IRQHandler+0x3e2>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a95      	ldr	r2, [pc, #596]	@ (8009efc <HAL_UART_IRQHandler+0x5b4>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d03e      	beq.n	8009d2a <HAL_UART_IRQHandler+0x3e2>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a92      	ldr	r2, [pc, #584]	@ (8009f00 <HAL_UART_IRQHandler+0x5b8>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d037      	beq.n	8009d2a <HAL_UART_IRQHandler+0x3e2>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a90      	ldr	r2, [pc, #576]	@ (8009f04 <HAL_UART_IRQHandler+0x5bc>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d030      	beq.n	8009d2a <HAL_UART_IRQHandler+0x3e2>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a8d      	ldr	r2, [pc, #564]	@ (8009f08 <HAL_UART_IRQHandler+0x5c0>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d029      	beq.n	8009d2a <HAL_UART_IRQHandler+0x3e2>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a8b      	ldr	r2, [pc, #556]	@ (8009f0c <HAL_UART_IRQHandler+0x5c4>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d022      	beq.n	8009d2a <HAL_UART_IRQHandler+0x3e2>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a88      	ldr	r2, [pc, #544]	@ (8009f10 <HAL_UART_IRQHandler+0x5c8>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d01b      	beq.n	8009d2a <HAL_UART_IRQHandler+0x3e2>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a86      	ldr	r2, [pc, #536]	@ (8009f14 <HAL_UART_IRQHandler+0x5cc>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d014      	beq.n	8009d2a <HAL_UART_IRQHandler+0x3e2>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a83      	ldr	r2, [pc, #524]	@ (8009f18 <HAL_UART_IRQHandler+0x5d0>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d00d      	beq.n	8009d2a <HAL_UART_IRQHandler+0x3e2>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a81      	ldr	r2, [pc, #516]	@ (8009f1c <HAL_UART_IRQHandler+0x5d4>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d006      	beq.n	8009d2a <HAL_UART_IRQHandler+0x3e2>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a7e      	ldr	r2, [pc, #504]	@ (8009f20 <HAL_UART_IRQHandler+0x5d8>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d106      	bne.n	8009d38 <HAL_UART_IRQHandler+0x3f0>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	e005      	b.n	8009d44 <HAL_UART_IRQHandler+0x3fc>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 80ad 	beq.w	8009eac <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	f080 80a5 	bcs.w	8009eac <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d72:	69db      	ldr	r3, [r3, #28]
 8009d74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d78:	f000 8087 	beq.w	8009e8a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d88:	e853 3f00 	ldrex	r3, [r3]
 8009d8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	461a      	mov	r2, r3
 8009da2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009da6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009daa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009db2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009db6:	e841 2300 	strex	r3, r2, [r1]
 8009dba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1da      	bne.n	8009d7c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	3308      	adds	r3, #8
 8009dcc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009dd0:	e853 3f00 	ldrex	r3, [r3]
 8009dd4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009dd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009dd8:	f023 0301 	bic.w	r3, r3, #1
 8009ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	3308      	adds	r3, #8
 8009de6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009dea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009dee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009df2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009df6:	e841 2300 	strex	r3, r2, [r1]
 8009dfa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009dfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1e1      	bne.n	8009dc6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	3308      	adds	r3, #8
 8009e08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e0c:	e853 3f00 	ldrex	r3, [r3]
 8009e10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	3308      	adds	r3, #8
 8009e22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009e26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e2e:	e841 2300 	strex	r3, r2, [r1]
 8009e32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e3      	bne.n	8009e02 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2220      	movs	r2, #32
 8009e3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e50:	e853 3f00 	ldrex	r3, [r3]
 8009e54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e58:	f023 0310 	bic.w	r3, r3, #16
 8009e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	461a      	mov	r2, r3
 8009e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e72:	e841 2300 	strex	r3, r2, [r1]
 8009e76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1e4      	bne.n	8009e48 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7f9 f809 	bl	8002e9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2202      	movs	r2, #2
 8009e8e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f7f7 f897 	bl	8000fd8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009eaa:	e119      	b.n	800a0e0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	f040 8112 	bne.w	800a0e0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ec2:	69db      	ldr	r3, [r3, #28]
 8009ec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ec8:	f040 810a 	bne.w	800a0e0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2202      	movs	r2, #2
 8009ed0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ed8:	4619      	mov	r1, r3
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f7f7 f87c 	bl	8000fd8 <HAL_UARTEx_RxEventCallback>
      return;
 8009ee0:	e0fe      	b.n	800a0e0 <HAL_UART_IRQHandler+0x798>
 8009ee2:	bf00      	nop
 8009ee4:	40020010 	.word	0x40020010
 8009ee8:	40020028 	.word	0x40020028
 8009eec:	40020040 	.word	0x40020040
 8009ef0:	40020058 	.word	0x40020058
 8009ef4:	40020070 	.word	0x40020070
 8009ef8:	40020088 	.word	0x40020088
 8009efc:	400200a0 	.word	0x400200a0
 8009f00:	400200b8 	.word	0x400200b8
 8009f04:	40020410 	.word	0x40020410
 8009f08:	40020428 	.word	0x40020428
 8009f0c:	40020440 	.word	0x40020440
 8009f10:	40020458 	.word	0x40020458
 8009f14:	40020470 	.word	0x40020470
 8009f18:	40020488 	.word	0x40020488
 8009f1c:	400204a0 	.word	0x400204a0
 8009f20:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	1ad3      	subs	r3, r2, r3
 8009f34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f000 80cf 	beq.w	800a0e4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8009f46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f000 80ca 	beq.w	800a0e4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f58:	e853 3f00 	ldrex	r3, [r3]
 8009f5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f72:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f74:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f7a:	e841 2300 	strex	r3, r2, [r1]
 8009f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1e4      	bne.n	8009f50 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	3308      	adds	r3, #8
 8009f8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f90:	e853 3f00 	ldrex	r3, [r3]
 8009f94:	623b      	str	r3, [r7, #32]
   return(result);
 8009f96:	6a3a      	ldr	r2, [r7, #32]
 8009f98:	4b55      	ldr	r3, [pc, #340]	@ (800a0f0 <HAL_UART_IRQHandler+0x7a8>)
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	3308      	adds	r3, #8
 8009fa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009faa:	633a      	str	r2, [r7, #48]	@ 0x30
 8009fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fb2:	e841 2300 	strex	r3, r2, [r1]
 8009fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1e3      	bne.n	8009f86 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2220      	movs	r2, #32
 8009fc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	e853 3f00 	ldrex	r3, [r3]
 8009fde:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f023 0310 	bic.w	r3, r3, #16
 8009fe6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009ff4:	61fb      	str	r3, [r7, #28]
 8009ff6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff8:	69b9      	ldr	r1, [r7, #24]
 8009ffa:	69fa      	ldr	r2, [r7, #28]
 8009ffc:	e841 2300 	strex	r3, r2, [r1]
 800a000:	617b      	str	r3, [r7, #20]
   return(result);
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1e4      	bne.n	8009fd2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2202      	movs	r2, #2
 800a00c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a00e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a012:	4619      	mov	r1, r3
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f7f6 ffdf 	bl	8000fd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a01a:	e063      	b.n	800a0e4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a01c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a020:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00e      	beq.n	800a046 <HAL_UART_IRQHandler+0x6fe>
 800a028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a02c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d008      	beq.n	800a046 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a03c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f001 fb24 	bl	800b68c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a044:	e051      	b.n	800a0ea <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a04a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d014      	beq.n	800a07c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d105      	bne.n	800a06a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a05e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a062:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a066:	2b00      	cmp	r3, #0
 800a068:	d008      	beq.n	800a07c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d03a      	beq.n	800a0e8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	4798      	blx	r3
    }
    return;
 800a07a:	e035      	b.n	800a0e8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a07c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a084:	2b00      	cmp	r3, #0
 800a086:	d009      	beq.n	800a09c <HAL_UART_IRQHandler+0x754>
 800a088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a08c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a090:	2b00      	cmp	r3, #0
 800a092:	d003      	beq.n	800a09c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f001 face 	bl	800b636 <UART_EndTransmit_IT>
    return;
 800a09a:	e026      	b.n	800a0ea <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a09c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d009      	beq.n	800a0bc <HAL_UART_IRQHandler+0x774>
 800a0a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d003      	beq.n	800a0bc <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f001 fafd 	bl	800b6b4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0ba:	e016      	b.n	800a0ea <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a0bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d010      	beq.n	800a0ea <HAL_UART_IRQHandler+0x7a2>
 800a0c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	da0c      	bge.n	800a0ea <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f001 fae5 	bl	800b6a0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0d6:	e008      	b.n	800a0ea <HAL_UART_IRQHandler+0x7a2>
      return;
 800a0d8:	bf00      	nop
 800a0da:	e006      	b.n	800a0ea <HAL_UART_IRQHandler+0x7a2>
    return;
 800a0dc:	bf00      	nop
 800a0de:	e004      	b.n	800a0ea <HAL_UART_IRQHandler+0x7a2>
      return;
 800a0e0:	bf00      	nop
 800a0e2:	e002      	b.n	800a0ea <HAL_UART_IRQHandler+0x7a2>
      return;
 800a0e4:	bf00      	nop
 800a0e6:	e000      	b.n	800a0ea <HAL_UART_IRQHandler+0x7a2>
    return;
 800a0e8:	bf00      	nop
  }
}
 800a0ea:	37e8      	adds	r7, #232	@ 0xe8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	effffffe 	.word	0xeffffffe

0800a0f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a148:	b092      	sub	sp, #72	@ 0x48
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	689a      	ldr	r2, [r3, #8]
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	431a      	orrs	r2, r3
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	695b      	ldr	r3, [r3, #20]
 800a162:	431a      	orrs	r2, r3
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	69db      	ldr	r3, [r3, #28]
 800a168:	4313      	orrs	r3, r2
 800a16a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	4bbe      	ldr	r3, [pc, #760]	@ (800a46c <UART_SetConfig+0x328>)
 800a174:	4013      	ands	r3, r2
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	6812      	ldr	r2, [r2, #0]
 800a17a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a17c:	430b      	orrs	r3, r1
 800a17e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	68da      	ldr	r2, [r3, #12]
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	430a      	orrs	r2, r1
 800a194:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4ab3      	ldr	r2, [pc, #716]	@ (800a470 <UART_SetConfig+0x32c>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d004      	beq.n	800a1b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	6a1b      	ldr	r3, [r3, #32]
 800a1aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	689a      	ldr	r2, [r3, #8]
 800a1b6:	4baf      	ldr	r3, [pc, #700]	@ (800a474 <UART_SetConfig+0x330>)
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	697a      	ldr	r2, [r7, #20]
 800a1bc:	6812      	ldr	r2, [r2, #0]
 800a1be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a1c0:	430b      	orrs	r3, r1
 800a1c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ca:	f023 010f 	bic.w	r1, r3, #15
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	430a      	orrs	r2, r1
 800a1d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4aa6      	ldr	r2, [pc, #664]	@ (800a478 <UART_SetConfig+0x334>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d177      	bne.n	800a2d4 <UART_SetConfig+0x190>
 800a1e4:	4ba5      	ldr	r3, [pc, #660]	@ (800a47c <UART_SetConfig+0x338>)
 800a1e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a1ec:	2b28      	cmp	r3, #40	@ 0x28
 800a1ee:	d86d      	bhi.n	800a2cc <UART_SetConfig+0x188>
 800a1f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f8 <UART_SetConfig+0xb4>)
 800a1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f6:	bf00      	nop
 800a1f8:	0800a29d 	.word	0x0800a29d
 800a1fc:	0800a2cd 	.word	0x0800a2cd
 800a200:	0800a2cd 	.word	0x0800a2cd
 800a204:	0800a2cd 	.word	0x0800a2cd
 800a208:	0800a2cd 	.word	0x0800a2cd
 800a20c:	0800a2cd 	.word	0x0800a2cd
 800a210:	0800a2cd 	.word	0x0800a2cd
 800a214:	0800a2cd 	.word	0x0800a2cd
 800a218:	0800a2a5 	.word	0x0800a2a5
 800a21c:	0800a2cd 	.word	0x0800a2cd
 800a220:	0800a2cd 	.word	0x0800a2cd
 800a224:	0800a2cd 	.word	0x0800a2cd
 800a228:	0800a2cd 	.word	0x0800a2cd
 800a22c:	0800a2cd 	.word	0x0800a2cd
 800a230:	0800a2cd 	.word	0x0800a2cd
 800a234:	0800a2cd 	.word	0x0800a2cd
 800a238:	0800a2ad 	.word	0x0800a2ad
 800a23c:	0800a2cd 	.word	0x0800a2cd
 800a240:	0800a2cd 	.word	0x0800a2cd
 800a244:	0800a2cd 	.word	0x0800a2cd
 800a248:	0800a2cd 	.word	0x0800a2cd
 800a24c:	0800a2cd 	.word	0x0800a2cd
 800a250:	0800a2cd 	.word	0x0800a2cd
 800a254:	0800a2cd 	.word	0x0800a2cd
 800a258:	0800a2b5 	.word	0x0800a2b5
 800a25c:	0800a2cd 	.word	0x0800a2cd
 800a260:	0800a2cd 	.word	0x0800a2cd
 800a264:	0800a2cd 	.word	0x0800a2cd
 800a268:	0800a2cd 	.word	0x0800a2cd
 800a26c:	0800a2cd 	.word	0x0800a2cd
 800a270:	0800a2cd 	.word	0x0800a2cd
 800a274:	0800a2cd 	.word	0x0800a2cd
 800a278:	0800a2bd 	.word	0x0800a2bd
 800a27c:	0800a2cd 	.word	0x0800a2cd
 800a280:	0800a2cd 	.word	0x0800a2cd
 800a284:	0800a2cd 	.word	0x0800a2cd
 800a288:	0800a2cd 	.word	0x0800a2cd
 800a28c:	0800a2cd 	.word	0x0800a2cd
 800a290:	0800a2cd 	.word	0x0800a2cd
 800a294:	0800a2cd 	.word	0x0800a2cd
 800a298:	0800a2c5 	.word	0x0800a2c5
 800a29c:	2301      	movs	r3, #1
 800a29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2a2:	e326      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a2a4:	2304      	movs	r3, #4
 800a2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2aa:	e322      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a2ac:	2308      	movs	r3, #8
 800a2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2b2:	e31e      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a2b4:	2310      	movs	r3, #16
 800a2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ba:	e31a      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a2bc:	2320      	movs	r3, #32
 800a2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2c2:	e316      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a2c4:	2340      	movs	r3, #64	@ 0x40
 800a2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ca:	e312      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a2cc:	2380      	movs	r3, #128	@ 0x80
 800a2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2d2:	e30e      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a69      	ldr	r2, [pc, #420]	@ (800a480 <UART_SetConfig+0x33c>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d130      	bne.n	800a340 <UART_SetConfig+0x1fc>
 800a2de:	4b67      	ldr	r3, [pc, #412]	@ (800a47c <UART_SetConfig+0x338>)
 800a2e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2e2:	f003 0307 	and.w	r3, r3, #7
 800a2e6:	2b05      	cmp	r3, #5
 800a2e8:	d826      	bhi.n	800a338 <UART_SetConfig+0x1f4>
 800a2ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f0 <UART_SetConfig+0x1ac>)
 800a2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f0:	0800a309 	.word	0x0800a309
 800a2f4:	0800a311 	.word	0x0800a311
 800a2f8:	0800a319 	.word	0x0800a319
 800a2fc:	0800a321 	.word	0x0800a321
 800a300:	0800a329 	.word	0x0800a329
 800a304:	0800a331 	.word	0x0800a331
 800a308:	2300      	movs	r3, #0
 800a30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a30e:	e2f0      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a310:	2304      	movs	r3, #4
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a316:	e2ec      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a318:	2308      	movs	r3, #8
 800a31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a31e:	e2e8      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a320:	2310      	movs	r3, #16
 800a322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a326:	e2e4      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a328:	2320      	movs	r3, #32
 800a32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a32e:	e2e0      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a330:	2340      	movs	r3, #64	@ 0x40
 800a332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a336:	e2dc      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a338:	2380      	movs	r3, #128	@ 0x80
 800a33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a33e:	e2d8      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a4f      	ldr	r2, [pc, #316]	@ (800a484 <UART_SetConfig+0x340>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d130      	bne.n	800a3ac <UART_SetConfig+0x268>
 800a34a:	4b4c      	ldr	r3, [pc, #304]	@ (800a47c <UART_SetConfig+0x338>)
 800a34c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a34e:	f003 0307 	and.w	r3, r3, #7
 800a352:	2b05      	cmp	r3, #5
 800a354:	d826      	bhi.n	800a3a4 <UART_SetConfig+0x260>
 800a356:	a201      	add	r2, pc, #4	@ (adr r2, 800a35c <UART_SetConfig+0x218>)
 800a358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35c:	0800a375 	.word	0x0800a375
 800a360:	0800a37d 	.word	0x0800a37d
 800a364:	0800a385 	.word	0x0800a385
 800a368:	0800a38d 	.word	0x0800a38d
 800a36c:	0800a395 	.word	0x0800a395
 800a370:	0800a39d 	.word	0x0800a39d
 800a374:	2300      	movs	r3, #0
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37a:	e2ba      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a37c:	2304      	movs	r3, #4
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a382:	e2b6      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a384:	2308      	movs	r3, #8
 800a386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a38a:	e2b2      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a38c:	2310      	movs	r3, #16
 800a38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a392:	e2ae      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a394:	2320      	movs	r3, #32
 800a396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39a:	e2aa      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a39c:	2340      	movs	r3, #64	@ 0x40
 800a39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a2:	e2a6      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a3a4:	2380      	movs	r3, #128	@ 0x80
 800a3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3aa:	e2a2      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a35      	ldr	r2, [pc, #212]	@ (800a488 <UART_SetConfig+0x344>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d130      	bne.n	800a418 <UART_SetConfig+0x2d4>
 800a3b6:	4b31      	ldr	r3, [pc, #196]	@ (800a47c <UART_SetConfig+0x338>)
 800a3b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3ba:	f003 0307 	and.w	r3, r3, #7
 800a3be:	2b05      	cmp	r3, #5
 800a3c0:	d826      	bhi.n	800a410 <UART_SetConfig+0x2cc>
 800a3c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c8 <UART_SetConfig+0x284>)
 800a3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c8:	0800a3e1 	.word	0x0800a3e1
 800a3cc:	0800a3e9 	.word	0x0800a3e9
 800a3d0:	0800a3f1 	.word	0x0800a3f1
 800a3d4:	0800a3f9 	.word	0x0800a3f9
 800a3d8:	0800a401 	.word	0x0800a401
 800a3dc:	0800a409 	.word	0x0800a409
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e6:	e284      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a3e8:	2304      	movs	r3, #4
 800a3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ee:	e280      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a3f0:	2308      	movs	r3, #8
 800a3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3f6:	e27c      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a3f8:	2310      	movs	r3, #16
 800a3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3fe:	e278      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a400:	2320      	movs	r3, #32
 800a402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a406:	e274      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a408:	2340      	movs	r3, #64	@ 0x40
 800a40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40e:	e270      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a410:	2380      	movs	r3, #128	@ 0x80
 800a412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a416:	e26c      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a1b      	ldr	r2, [pc, #108]	@ (800a48c <UART_SetConfig+0x348>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d142      	bne.n	800a4a8 <UART_SetConfig+0x364>
 800a422:	4b16      	ldr	r3, [pc, #88]	@ (800a47c <UART_SetConfig+0x338>)
 800a424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a426:	f003 0307 	and.w	r3, r3, #7
 800a42a:	2b05      	cmp	r3, #5
 800a42c:	d838      	bhi.n	800a4a0 <UART_SetConfig+0x35c>
 800a42e:	a201      	add	r2, pc, #4	@ (adr r2, 800a434 <UART_SetConfig+0x2f0>)
 800a430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a434:	0800a44d 	.word	0x0800a44d
 800a438:	0800a455 	.word	0x0800a455
 800a43c:	0800a45d 	.word	0x0800a45d
 800a440:	0800a465 	.word	0x0800a465
 800a444:	0800a491 	.word	0x0800a491
 800a448:	0800a499 	.word	0x0800a499
 800a44c:	2300      	movs	r3, #0
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a452:	e24e      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a454:	2304      	movs	r3, #4
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a45a:	e24a      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a45c:	2308      	movs	r3, #8
 800a45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a462:	e246      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a464:	2310      	movs	r3, #16
 800a466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a46a:	e242      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a46c:	cfff69f3 	.word	0xcfff69f3
 800a470:	58000c00 	.word	0x58000c00
 800a474:	11fff4ff 	.word	0x11fff4ff
 800a478:	40011000 	.word	0x40011000
 800a47c:	58024400 	.word	0x58024400
 800a480:	40004400 	.word	0x40004400
 800a484:	40004800 	.word	0x40004800
 800a488:	40004c00 	.word	0x40004c00
 800a48c:	40005000 	.word	0x40005000
 800a490:	2320      	movs	r3, #32
 800a492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a496:	e22c      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a498:	2340      	movs	r3, #64	@ 0x40
 800a49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49e:	e228      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a4a0:	2380      	movs	r3, #128	@ 0x80
 800a4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4a6:	e224      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4ab1      	ldr	r2, [pc, #708]	@ (800a774 <UART_SetConfig+0x630>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d176      	bne.n	800a5a0 <UART_SetConfig+0x45c>
 800a4b2:	4bb1      	ldr	r3, [pc, #708]	@ (800a778 <UART_SetConfig+0x634>)
 800a4b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a4ba:	2b28      	cmp	r3, #40	@ 0x28
 800a4bc:	d86c      	bhi.n	800a598 <UART_SetConfig+0x454>
 800a4be:	a201      	add	r2, pc, #4	@ (adr r2, 800a4c4 <UART_SetConfig+0x380>)
 800a4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c4:	0800a569 	.word	0x0800a569
 800a4c8:	0800a599 	.word	0x0800a599
 800a4cc:	0800a599 	.word	0x0800a599
 800a4d0:	0800a599 	.word	0x0800a599
 800a4d4:	0800a599 	.word	0x0800a599
 800a4d8:	0800a599 	.word	0x0800a599
 800a4dc:	0800a599 	.word	0x0800a599
 800a4e0:	0800a599 	.word	0x0800a599
 800a4e4:	0800a571 	.word	0x0800a571
 800a4e8:	0800a599 	.word	0x0800a599
 800a4ec:	0800a599 	.word	0x0800a599
 800a4f0:	0800a599 	.word	0x0800a599
 800a4f4:	0800a599 	.word	0x0800a599
 800a4f8:	0800a599 	.word	0x0800a599
 800a4fc:	0800a599 	.word	0x0800a599
 800a500:	0800a599 	.word	0x0800a599
 800a504:	0800a579 	.word	0x0800a579
 800a508:	0800a599 	.word	0x0800a599
 800a50c:	0800a599 	.word	0x0800a599
 800a510:	0800a599 	.word	0x0800a599
 800a514:	0800a599 	.word	0x0800a599
 800a518:	0800a599 	.word	0x0800a599
 800a51c:	0800a599 	.word	0x0800a599
 800a520:	0800a599 	.word	0x0800a599
 800a524:	0800a581 	.word	0x0800a581
 800a528:	0800a599 	.word	0x0800a599
 800a52c:	0800a599 	.word	0x0800a599
 800a530:	0800a599 	.word	0x0800a599
 800a534:	0800a599 	.word	0x0800a599
 800a538:	0800a599 	.word	0x0800a599
 800a53c:	0800a599 	.word	0x0800a599
 800a540:	0800a599 	.word	0x0800a599
 800a544:	0800a589 	.word	0x0800a589
 800a548:	0800a599 	.word	0x0800a599
 800a54c:	0800a599 	.word	0x0800a599
 800a550:	0800a599 	.word	0x0800a599
 800a554:	0800a599 	.word	0x0800a599
 800a558:	0800a599 	.word	0x0800a599
 800a55c:	0800a599 	.word	0x0800a599
 800a560:	0800a599 	.word	0x0800a599
 800a564:	0800a591 	.word	0x0800a591
 800a568:	2301      	movs	r3, #1
 800a56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56e:	e1c0      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a570:	2304      	movs	r3, #4
 800a572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a576:	e1bc      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a578:	2308      	movs	r3, #8
 800a57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a57e:	e1b8      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a580:	2310      	movs	r3, #16
 800a582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a586:	e1b4      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a588:	2320      	movs	r3, #32
 800a58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58e:	e1b0      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a590:	2340      	movs	r3, #64	@ 0x40
 800a592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a596:	e1ac      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a598:	2380      	movs	r3, #128	@ 0x80
 800a59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59e:	e1a8      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a75      	ldr	r2, [pc, #468]	@ (800a77c <UART_SetConfig+0x638>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d130      	bne.n	800a60c <UART_SetConfig+0x4c8>
 800a5aa:	4b73      	ldr	r3, [pc, #460]	@ (800a778 <UART_SetConfig+0x634>)
 800a5ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ae:	f003 0307 	and.w	r3, r3, #7
 800a5b2:	2b05      	cmp	r3, #5
 800a5b4:	d826      	bhi.n	800a604 <UART_SetConfig+0x4c0>
 800a5b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5bc <UART_SetConfig+0x478>)
 800a5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5bc:	0800a5d5 	.word	0x0800a5d5
 800a5c0:	0800a5dd 	.word	0x0800a5dd
 800a5c4:	0800a5e5 	.word	0x0800a5e5
 800a5c8:	0800a5ed 	.word	0x0800a5ed
 800a5cc:	0800a5f5 	.word	0x0800a5f5
 800a5d0:	0800a5fd 	.word	0x0800a5fd
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5da:	e18a      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a5dc:	2304      	movs	r3, #4
 800a5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5e2:	e186      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a5e4:	2308      	movs	r3, #8
 800a5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ea:	e182      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a5ec:	2310      	movs	r3, #16
 800a5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5f2:	e17e      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a5f4:	2320      	movs	r3, #32
 800a5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5fa:	e17a      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a5fc:	2340      	movs	r3, #64	@ 0x40
 800a5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a602:	e176      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a604:	2380      	movs	r3, #128	@ 0x80
 800a606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a60a:	e172      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a5b      	ldr	r2, [pc, #364]	@ (800a780 <UART_SetConfig+0x63c>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d130      	bne.n	800a678 <UART_SetConfig+0x534>
 800a616:	4b58      	ldr	r3, [pc, #352]	@ (800a778 <UART_SetConfig+0x634>)
 800a618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a61a:	f003 0307 	and.w	r3, r3, #7
 800a61e:	2b05      	cmp	r3, #5
 800a620:	d826      	bhi.n	800a670 <UART_SetConfig+0x52c>
 800a622:	a201      	add	r2, pc, #4	@ (adr r2, 800a628 <UART_SetConfig+0x4e4>)
 800a624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a628:	0800a641 	.word	0x0800a641
 800a62c:	0800a649 	.word	0x0800a649
 800a630:	0800a651 	.word	0x0800a651
 800a634:	0800a659 	.word	0x0800a659
 800a638:	0800a661 	.word	0x0800a661
 800a63c:	0800a669 	.word	0x0800a669
 800a640:	2300      	movs	r3, #0
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a646:	e154      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a648:	2304      	movs	r3, #4
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64e:	e150      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a650:	2308      	movs	r3, #8
 800a652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a656:	e14c      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a658:	2310      	movs	r3, #16
 800a65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a65e:	e148      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a660:	2320      	movs	r3, #32
 800a662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a666:	e144      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a668:	2340      	movs	r3, #64	@ 0x40
 800a66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a66e:	e140      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a670:	2380      	movs	r3, #128	@ 0x80
 800a672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a676:	e13c      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a41      	ldr	r2, [pc, #260]	@ (800a784 <UART_SetConfig+0x640>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	f040 8082 	bne.w	800a788 <UART_SetConfig+0x644>
 800a684:	4b3c      	ldr	r3, [pc, #240]	@ (800a778 <UART_SetConfig+0x634>)
 800a686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a688:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a68c:	2b28      	cmp	r3, #40	@ 0x28
 800a68e:	d86d      	bhi.n	800a76c <UART_SetConfig+0x628>
 800a690:	a201      	add	r2, pc, #4	@ (adr r2, 800a698 <UART_SetConfig+0x554>)
 800a692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a696:	bf00      	nop
 800a698:	0800a73d 	.word	0x0800a73d
 800a69c:	0800a76d 	.word	0x0800a76d
 800a6a0:	0800a76d 	.word	0x0800a76d
 800a6a4:	0800a76d 	.word	0x0800a76d
 800a6a8:	0800a76d 	.word	0x0800a76d
 800a6ac:	0800a76d 	.word	0x0800a76d
 800a6b0:	0800a76d 	.word	0x0800a76d
 800a6b4:	0800a76d 	.word	0x0800a76d
 800a6b8:	0800a745 	.word	0x0800a745
 800a6bc:	0800a76d 	.word	0x0800a76d
 800a6c0:	0800a76d 	.word	0x0800a76d
 800a6c4:	0800a76d 	.word	0x0800a76d
 800a6c8:	0800a76d 	.word	0x0800a76d
 800a6cc:	0800a76d 	.word	0x0800a76d
 800a6d0:	0800a76d 	.word	0x0800a76d
 800a6d4:	0800a76d 	.word	0x0800a76d
 800a6d8:	0800a74d 	.word	0x0800a74d
 800a6dc:	0800a76d 	.word	0x0800a76d
 800a6e0:	0800a76d 	.word	0x0800a76d
 800a6e4:	0800a76d 	.word	0x0800a76d
 800a6e8:	0800a76d 	.word	0x0800a76d
 800a6ec:	0800a76d 	.word	0x0800a76d
 800a6f0:	0800a76d 	.word	0x0800a76d
 800a6f4:	0800a76d 	.word	0x0800a76d
 800a6f8:	0800a755 	.word	0x0800a755
 800a6fc:	0800a76d 	.word	0x0800a76d
 800a700:	0800a76d 	.word	0x0800a76d
 800a704:	0800a76d 	.word	0x0800a76d
 800a708:	0800a76d 	.word	0x0800a76d
 800a70c:	0800a76d 	.word	0x0800a76d
 800a710:	0800a76d 	.word	0x0800a76d
 800a714:	0800a76d 	.word	0x0800a76d
 800a718:	0800a75d 	.word	0x0800a75d
 800a71c:	0800a76d 	.word	0x0800a76d
 800a720:	0800a76d 	.word	0x0800a76d
 800a724:	0800a76d 	.word	0x0800a76d
 800a728:	0800a76d 	.word	0x0800a76d
 800a72c:	0800a76d 	.word	0x0800a76d
 800a730:	0800a76d 	.word	0x0800a76d
 800a734:	0800a76d 	.word	0x0800a76d
 800a738:	0800a765 	.word	0x0800a765
 800a73c:	2301      	movs	r3, #1
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a742:	e0d6      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a744:	2304      	movs	r3, #4
 800a746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a74a:	e0d2      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a74c:	2308      	movs	r3, #8
 800a74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a752:	e0ce      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a754:	2310      	movs	r3, #16
 800a756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a75a:	e0ca      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a75c:	2320      	movs	r3, #32
 800a75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a762:	e0c6      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a764:	2340      	movs	r3, #64	@ 0x40
 800a766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a76a:	e0c2      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a76c:	2380      	movs	r3, #128	@ 0x80
 800a76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a772:	e0be      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a774:	40011400 	.word	0x40011400
 800a778:	58024400 	.word	0x58024400
 800a77c:	40007800 	.word	0x40007800
 800a780:	40007c00 	.word	0x40007c00
 800a784:	40011800 	.word	0x40011800
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4aad      	ldr	r2, [pc, #692]	@ (800aa44 <UART_SetConfig+0x900>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d176      	bne.n	800a880 <UART_SetConfig+0x73c>
 800a792:	4bad      	ldr	r3, [pc, #692]	@ (800aa48 <UART_SetConfig+0x904>)
 800a794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a796:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a79a:	2b28      	cmp	r3, #40	@ 0x28
 800a79c:	d86c      	bhi.n	800a878 <UART_SetConfig+0x734>
 800a79e:	a201      	add	r2, pc, #4	@ (adr r2, 800a7a4 <UART_SetConfig+0x660>)
 800a7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a4:	0800a849 	.word	0x0800a849
 800a7a8:	0800a879 	.word	0x0800a879
 800a7ac:	0800a879 	.word	0x0800a879
 800a7b0:	0800a879 	.word	0x0800a879
 800a7b4:	0800a879 	.word	0x0800a879
 800a7b8:	0800a879 	.word	0x0800a879
 800a7bc:	0800a879 	.word	0x0800a879
 800a7c0:	0800a879 	.word	0x0800a879
 800a7c4:	0800a851 	.word	0x0800a851
 800a7c8:	0800a879 	.word	0x0800a879
 800a7cc:	0800a879 	.word	0x0800a879
 800a7d0:	0800a879 	.word	0x0800a879
 800a7d4:	0800a879 	.word	0x0800a879
 800a7d8:	0800a879 	.word	0x0800a879
 800a7dc:	0800a879 	.word	0x0800a879
 800a7e0:	0800a879 	.word	0x0800a879
 800a7e4:	0800a859 	.word	0x0800a859
 800a7e8:	0800a879 	.word	0x0800a879
 800a7ec:	0800a879 	.word	0x0800a879
 800a7f0:	0800a879 	.word	0x0800a879
 800a7f4:	0800a879 	.word	0x0800a879
 800a7f8:	0800a879 	.word	0x0800a879
 800a7fc:	0800a879 	.word	0x0800a879
 800a800:	0800a879 	.word	0x0800a879
 800a804:	0800a861 	.word	0x0800a861
 800a808:	0800a879 	.word	0x0800a879
 800a80c:	0800a879 	.word	0x0800a879
 800a810:	0800a879 	.word	0x0800a879
 800a814:	0800a879 	.word	0x0800a879
 800a818:	0800a879 	.word	0x0800a879
 800a81c:	0800a879 	.word	0x0800a879
 800a820:	0800a879 	.word	0x0800a879
 800a824:	0800a869 	.word	0x0800a869
 800a828:	0800a879 	.word	0x0800a879
 800a82c:	0800a879 	.word	0x0800a879
 800a830:	0800a879 	.word	0x0800a879
 800a834:	0800a879 	.word	0x0800a879
 800a838:	0800a879 	.word	0x0800a879
 800a83c:	0800a879 	.word	0x0800a879
 800a840:	0800a879 	.word	0x0800a879
 800a844:	0800a871 	.word	0x0800a871
 800a848:	2301      	movs	r3, #1
 800a84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a84e:	e050      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a850:	2304      	movs	r3, #4
 800a852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a856:	e04c      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a858:	2308      	movs	r3, #8
 800a85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a85e:	e048      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a860:	2310      	movs	r3, #16
 800a862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a866:	e044      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a868:	2320      	movs	r3, #32
 800a86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a86e:	e040      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a870:	2340      	movs	r3, #64	@ 0x40
 800a872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a876:	e03c      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a878:	2380      	movs	r3, #128	@ 0x80
 800a87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a87e:	e038      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a71      	ldr	r2, [pc, #452]	@ (800aa4c <UART_SetConfig+0x908>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d130      	bne.n	800a8ec <UART_SetConfig+0x7a8>
 800a88a:	4b6f      	ldr	r3, [pc, #444]	@ (800aa48 <UART_SetConfig+0x904>)
 800a88c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a88e:	f003 0307 	and.w	r3, r3, #7
 800a892:	2b05      	cmp	r3, #5
 800a894:	d826      	bhi.n	800a8e4 <UART_SetConfig+0x7a0>
 800a896:	a201      	add	r2, pc, #4	@ (adr r2, 800a89c <UART_SetConfig+0x758>)
 800a898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89c:	0800a8b5 	.word	0x0800a8b5
 800a8a0:	0800a8bd 	.word	0x0800a8bd
 800a8a4:	0800a8c5 	.word	0x0800a8c5
 800a8a8:	0800a8cd 	.word	0x0800a8cd
 800a8ac:	0800a8d5 	.word	0x0800a8d5
 800a8b0:	0800a8dd 	.word	0x0800a8dd
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ba:	e01a      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a8bc:	2304      	movs	r3, #4
 800a8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8c2:	e016      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a8c4:	2308      	movs	r3, #8
 800a8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ca:	e012      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a8cc:	2310      	movs	r3, #16
 800a8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8d2:	e00e      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a8d4:	2320      	movs	r3, #32
 800a8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8da:	e00a      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a8dc:	2340      	movs	r3, #64	@ 0x40
 800a8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8e2:	e006      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a8e4:	2380      	movs	r3, #128	@ 0x80
 800a8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ea:	e002      	b.n	800a8f2 <UART_SetConfig+0x7ae>
 800a8ec:	2380      	movs	r3, #128	@ 0x80
 800a8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a55      	ldr	r2, [pc, #340]	@ (800aa4c <UART_SetConfig+0x908>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	f040 80f8 	bne.w	800aaee <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a8fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a902:	2b20      	cmp	r3, #32
 800a904:	dc46      	bgt.n	800a994 <UART_SetConfig+0x850>
 800a906:	2b02      	cmp	r3, #2
 800a908:	db75      	blt.n	800a9f6 <UART_SetConfig+0x8b2>
 800a90a:	3b02      	subs	r3, #2
 800a90c:	2b1e      	cmp	r3, #30
 800a90e:	d872      	bhi.n	800a9f6 <UART_SetConfig+0x8b2>
 800a910:	a201      	add	r2, pc, #4	@ (adr r2, 800a918 <UART_SetConfig+0x7d4>)
 800a912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a916:	bf00      	nop
 800a918:	0800a99b 	.word	0x0800a99b
 800a91c:	0800a9f7 	.word	0x0800a9f7
 800a920:	0800a9a3 	.word	0x0800a9a3
 800a924:	0800a9f7 	.word	0x0800a9f7
 800a928:	0800a9f7 	.word	0x0800a9f7
 800a92c:	0800a9f7 	.word	0x0800a9f7
 800a930:	0800a9b3 	.word	0x0800a9b3
 800a934:	0800a9f7 	.word	0x0800a9f7
 800a938:	0800a9f7 	.word	0x0800a9f7
 800a93c:	0800a9f7 	.word	0x0800a9f7
 800a940:	0800a9f7 	.word	0x0800a9f7
 800a944:	0800a9f7 	.word	0x0800a9f7
 800a948:	0800a9f7 	.word	0x0800a9f7
 800a94c:	0800a9f7 	.word	0x0800a9f7
 800a950:	0800a9c3 	.word	0x0800a9c3
 800a954:	0800a9f7 	.word	0x0800a9f7
 800a958:	0800a9f7 	.word	0x0800a9f7
 800a95c:	0800a9f7 	.word	0x0800a9f7
 800a960:	0800a9f7 	.word	0x0800a9f7
 800a964:	0800a9f7 	.word	0x0800a9f7
 800a968:	0800a9f7 	.word	0x0800a9f7
 800a96c:	0800a9f7 	.word	0x0800a9f7
 800a970:	0800a9f7 	.word	0x0800a9f7
 800a974:	0800a9f7 	.word	0x0800a9f7
 800a978:	0800a9f7 	.word	0x0800a9f7
 800a97c:	0800a9f7 	.word	0x0800a9f7
 800a980:	0800a9f7 	.word	0x0800a9f7
 800a984:	0800a9f7 	.word	0x0800a9f7
 800a988:	0800a9f7 	.word	0x0800a9f7
 800a98c:	0800a9f7 	.word	0x0800a9f7
 800a990:	0800a9e9 	.word	0x0800a9e9
 800a994:	2b40      	cmp	r3, #64	@ 0x40
 800a996:	d02a      	beq.n	800a9ee <UART_SetConfig+0x8aa>
 800a998:	e02d      	b.n	800a9f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a99a:	f7fd fe25 	bl	80085e8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a99e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9a0:	e02f      	b.n	800aa02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fd fe34 	bl	8008614 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9b0:	e027      	b.n	800aa02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9b2:	f107 0318 	add.w	r3, r7, #24
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fd ff80 	bl	80088bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9c0:	e01f      	b.n	800aa02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9c2:	4b21      	ldr	r3, [pc, #132]	@ (800aa48 <UART_SetConfig+0x904>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f003 0320 	and.w	r3, r3, #32
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d009      	beq.n	800a9e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a9ce:	4b1e      	ldr	r3, [pc, #120]	@ (800aa48 <UART_SetConfig+0x904>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	08db      	lsrs	r3, r3, #3
 800a9d4:	f003 0303 	and.w	r3, r3, #3
 800a9d8:	4a1d      	ldr	r2, [pc, #116]	@ (800aa50 <UART_SetConfig+0x90c>)
 800a9da:	fa22 f303 	lsr.w	r3, r2, r3
 800a9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9e0:	e00f      	b.n	800aa02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a9e2:	4b1b      	ldr	r3, [pc, #108]	@ (800aa50 <UART_SetConfig+0x90c>)
 800a9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9e6:	e00c      	b.n	800aa02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9e8:	4b1a      	ldr	r3, [pc, #104]	@ (800aa54 <UART_SetConfig+0x910>)
 800a9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ec:	e009      	b.n	800aa02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9f4:	e005      	b.n	800aa02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aa00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aa02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f000 81ee 	beq.w	800ade6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa0e:	4a12      	ldr	r2, [pc, #72]	@ (800aa58 <UART_SetConfig+0x914>)
 800aa10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa14:	461a      	mov	r2, r3
 800aa16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa18:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa1c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	685a      	ldr	r2, [r3, #4]
 800aa22:	4613      	mov	r3, r2
 800aa24:	005b      	lsls	r3, r3, #1
 800aa26:	4413      	add	r3, r2
 800aa28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d305      	bcc.n	800aa3a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d910      	bls.n	800aa5c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aa40:	e1d1      	b.n	800ade6 <UART_SetConfig+0xca2>
 800aa42:	bf00      	nop
 800aa44:	40011c00 	.word	0x40011c00
 800aa48:	58024400 	.word	0x58024400
 800aa4c:	58000c00 	.word	0x58000c00
 800aa50:	03d09000 	.word	0x03d09000
 800aa54:	003d0900 	.word	0x003d0900
 800aa58:	0800e890 	.word	0x0800e890
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa5e:	2200      	movs	r2, #0
 800aa60:	60bb      	str	r3, [r7, #8]
 800aa62:	60fa      	str	r2, [r7, #12]
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa68:	4ac0      	ldr	r2, [pc, #768]	@ (800ad6c <UART_SetConfig+0xc28>)
 800aa6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	2200      	movs	r2, #0
 800aa72:	603b      	str	r3, [r7, #0]
 800aa74:	607a      	str	r2, [r7, #4]
 800aa76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aa7e:	f7f5 fc8f 	bl	80003a0 <__aeabi_uldivmod>
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4610      	mov	r0, r2
 800aa88:	4619      	mov	r1, r3
 800aa8a:	f04f 0200 	mov.w	r2, #0
 800aa8e:	f04f 0300 	mov.w	r3, #0
 800aa92:	020b      	lsls	r3, r1, #8
 800aa94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aa98:	0202      	lsls	r2, r0, #8
 800aa9a:	6979      	ldr	r1, [r7, #20]
 800aa9c:	6849      	ldr	r1, [r1, #4]
 800aa9e:	0849      	lsrs	r1, r1, #1
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	460c      	mov	r4, r1
 800aaa4:	4605      	mov	r5, r0
 800aaa6:	eb12 0804 	adds.w	r8, r2, r4
 800aaaa:	eb43 0905 	adc.w	r9, r3, r5
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	469a      	mov	sl, r3
 800aab6:	4693      	mov	fp, r2
 800aab8:	4652      	mov	r2, sl
 800aaba:	465b      	mov	r3, fp
 800aabc:	4640      	mov	r0, r8
 800aabe:	4649      	mov	r1, r9
 800aac0:	f7f5 fc6e 	bl	80003a0 <__aeabi_uldivmod>
 800aac4:	4602      	mov	r2, r0
 800aac6:	460b      	mov	r3, r1
 800aac8:	4613      	mov	r3, r2
 800aaca:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aace:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aad2:	d308      	bcc.n	800aae6 <UART_SetConfig+0x9a2>
 800aad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aad6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aada:	d204      	bcs.n	800aae6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aae2:	60da      	str	r2, [r3, #12]
 800aae4:	e17f      	b.n	800ade6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aaec:	e17b      	b.n	800ade6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	69db      	ldr	r3, [r3, #28]
 800aaf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aaf6:	f040 80bd 	bne.w	800ac74 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800aafa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aafe:	2b20      	cmp	r3, #32
 800ab00:	dc48      	bgt.n	800ab94 <UART_SetConfig+0xa50>
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	db7b      	blt.n	800abfe <UART_SetConfig+0xaba>
 800ab06:	2b20      	cmp	r3, #32
 800ab08:	d879      	bhi.n	800abfe <UART_SetConfig+0xaba>
 800ab0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab10 <UART_SetConfig+0x9cc>)
 800ab0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab10:	0800ab9b 	.word	0x0800ab9b
 800ab14:	0800aba3 	.word	0x0800aba3
 800ab18:	0800abff 	.word	0x0800abff
 800ab1c:	0800abff 	.word	0x0800abff
 800ab20:	0800abab 	.word	0x0800abab
 800ab24:	0800abff 	.word	0x0800abff
 800ab28:	0800abff 	.word	0x0800abff
 800ab2c:	0800abff 	.word	0x0800abff
 800ab30:	0800abbb 	.word	0x0800abbb
 800ab34:	0800abff 	.word	0x0800abff
 800ab38:	0800abff 	.word	0x0800abff
 800ab3c:	0800abff 	.word	0x0800abff
 800ab40:	0800abff 	.word	0x0800abff
 800ab44:	0800abff 	.word	0x0800abff
 800ab48:	0800abff 	.word	0x0800abff
 800ab4c:	0800abff 	.word	0x0800abff
 800ab50:	0800abcb 	.word	0x0800abcb
 800ab54:	0800abff 	.word	0x0800abff
 800ab58:	0800abff 	.word	0x0800abff
 800ab5c:	0800abff 	.word	0x0800abff
 800ab60:	0800abff 	.word	0x0800abff
 800ab64:	0800abff 	.word	0x0800abff
 800ab68:	0800abff 	.word	0x0800abff
 800ab6c:	0800abff 	.word	0x0800abff
 800ab70:	0800abff 	.word	0x0800abff
 800ab74:	0800abff 	.word	0x0800abff
 800ab78:	0800abff 	.word	0x0800abff
 800ab7c:	0800abff 	.word	0x0800abff
 800ab80:	0800abff 	.word	0x0800abff
 800ab84:	0800abff 	.word	0x0800abff
 800ab88:	0800abff 	.word	0x0800abff
 800ab8c:	0800abff 	.word	0x0800abff
 800ab90:	0800abf1 	.word	0x0800abf1
 800ab94:	2b40      	cmp	r3, #64	@ 0x40
 800ab96:	d02e      	beq.n	800abf6 <UART_SetConfig+0xab2>
 800ab98:	e031      	b.n	800abfe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab9a:	f7fc fb3b 	bl	8007214 <HAL_RCC_GetPCLK1Freq>
 800ab9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aba0:	e033      	b.n	800ac0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aba2:	f7fc fb4d 	bl	8007240 <HAL_RCC_GetPCLK2Freq>
 800aba6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aba8:	e02f      	b.n	800ac0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fd fd30 	bl	8008614 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800abb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abb8:	e027      	b.n	800ac0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abba:	f107 0318 	add.w	r3, r7, #24
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fd fe7c 	bl	80088bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abc8:	e01f      	b.n	800ac0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abca:	4b69      	ldr	r3, [pc, #420]	@ (800ad70 <UART_SetConfig+0xc2c>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f003 0320 	and.w	r3, r3, #32
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d009      	beq.n	800abea <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800abd6:	4b66      	ldr	r3, [pc, #408]	@ (800ad70 <UART_SetConfig+0xc2c>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	08db      	lsrs	r3, r3, #3
 800abdc:	f003 0303 	and.w	r3, r3, #3
 800abe0:	4a64      	ldr	r2, [pc, #400]	@ (800ad74 <UART_SetConfig+0xc30>)
 800abe2:	fa22 f303 	lsr.w	r3, r2, r3
 800abe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abe8:	e00f      	b.n	800ac0a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800abea:	4b62      	ldr	r3, [pc, #392]	@ (800ad74 <UART_SetConfig+0xc30>)
 800abec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abee:	e00c      	b.n	800ac0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800abf0:	4b61      	ldr	r3, [pc, #388]	@ (800ad78 <UART_SetConfig+0xc34>)
 800abf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abf4:	e009      	b.n	800ac0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abfc:	e005      	b.n	800ac0a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800abfe:	2300      	movs	r3, #0
 800ac00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ac08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f000 80ea 	beq.w	800ade6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac16:	4a55      	ldr	r2, [pc, #340]	@ (800ad6c <UART_SetConfig+0xc28>)
 800ac18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac20:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac24:	005a      	lsls	r2, r3, #1
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	085b      	lsrs	r3, r3, #1
 800ac2c:	441a      	add	r2, r3
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac36:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3a:	2b0f      	cmp	r3, #15
 800ac3c:	d916      	bls.n	800ac6c <UART_SetConfig+0xb28>
 800ac3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac44:	d212      	bcs.n	800ac6c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	f023 030f 	bic.w	r3, r3, #15
 800ac4e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac52:	085b      	lsrs	r3, r3, #1
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	f003 0307 	and.w	r3, r3, #7
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ac68:	60da      	str	r2, [r3, #12]
 800ac6a:	e0bc      	b.n	800ade6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ac72:	e0b8      	b.n	800ade6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac74:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ac78:	2b20      	cmp	r3, #32
 800ac7a:	dc4b      	bgt.n	800ad14 <UART_SetConfig+0xbd0>
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f2c0 8087 	blt.w	800ad90 <UART_SetConfig+0xc4c>
 800ac82:	2b20      	cmp	r3, #32
 800ac84:	f200 8084 	bhi.w	800ad90 <UART_SetConfig+0xc4c>
 800ac88:	a201      	add	r2, pc, #4	@ (adr r2, 800ac90 <UART_SetConfig+0xb4c>)
 800ac8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8e:	bf00      	nop
 800ac90:	0800ad1b 	.word	0x0800ad1b
 800ac94:	0800ad23 	.word	0x0800ad23
 800ac98:	0800ad91 	.word	0x0800ad91
 800ac9c:	0800ad91 	.word	0x0800ad91
 800aca0:	0800ad2b 	.word	0x0800ad2b
 800aca4:	0800ad91 	.word	0x0800ad91
 800aca8:	0800ad91 	.word	0x0800ad91
 800acac:	0800ad91 	.word	0x0800ad91
 800acb0:	0800ad3b 	.word	0x0800ad3b
 800acb4:	0800ad91 	.word	0x0800ad91
 800acb8:	0800ad91 	.word	0x0800ad91
 800acbc:	0800ad91 	.word	0x0800ad91
 800acc0:	0800ad91 	.word	0x0800ad91
 800acc4:	0800ad91 	.word	0x0800ad91
 800acc8:	0800ad91 	.word	0x0800ad91
 800accc:	0800ad91 	.word	0x0800ad91
 800acd0:	0800ad4b 	.word	0x0800ad4b
 800acd4:	0800ad91 	.word	0x0800ad91
 800acd8:	0800ad91 	.word	0x0800ad91
 800acdc:	0800ad91 	.word	0x0800ad91
 800ace0:	0800ad91 	.word	0x0800ad91
 800ace4:	0800ad91 	.word	0x0800ad91
 800ace8:	0800ad91 	.word	0x0800ad91
 800acec:	0800ad91 	.word	0x0800ad91
 800acf0:	0800ad91 	.word	0x0800ad91
 800acf4:	0800ad91 	.word	0x0800ad91
 800acf8:	0800ad91 	.word	0x0800ad91
 800acfc:	0800ad91 	.word	0x0800ad91
 800ad00:	0800ad91 	.word	0x0800ad91
 800ad04:	0800ad91 	.word	0x0800ad91
 800ad08:	0800ad91 	.word	0x0800ad91
 800ad0c:	0800ad91 	.word	0x0800ad91
 800ad10:	0800ad83 	.word	0x0800ad83
 800ad14:	2b40      	cmp	r3, #64	@ 0x40
 800ad16:	d037      	beq.n	800ad88 <UART_SetConfig+0xc44>
 800ad18:	e03a      	b.n	800ad90 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad1a:	f7fc fa7b 	bl	8007214 <HAL_RCC_GetPCLK1Freq>
 800ad1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad20:	e03c      	b.n	800ad9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad22:	f7fc fa8d 	bl	8007240 <HAL_RCC_GetPCLK2Freq>
 800ad26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad28:	e038      	b.n	800ad9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f7fd fc70 	bl	8008614 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad38:	e030      	b.n	800ad9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad3a:	f107 0318 	add.w	r3, r7, #24
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fd fdbc 	bl	80088bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad48:	e028      	b.n	800ad9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad4a:	4b09      	ldr	r3, [pc, #36]	@ (800ad70 <UART_SetConfig+0xc2c>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 0320 	and.w	r3, r3, #32
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d012      	beq.n	800ad7c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad56:	4b06      	ldr	r3, [pc, #24]	@ (800ad70 <UART_SetConfig+0xc2c>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	08db      	lsrs	r3, r3, #3
 800ad5c:	f003 0303 	and.w	r3, r3, #3
 800ad60:	4a04      	ldr	r2, [pc, #16]	@ (800ad74 <UART_SetConfig+0xc30>)
 800ad62:	fa22 f303 	lsr.w	r3, r2, r3
 800ad66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad68:	e018      	b.n	800ad9c <UART_SetConfig+0xc58>
 800ad6a:	bf00      	nop
 800ad6c:	0800e890 	.word	0x0800e890
 800ad70:	58024400 	.word	0x58024400
 800ad74:	03d09000 	.word	0x03d09000
 800ad78:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ad7c:	4b24      	ldr	r3, [pc, #144]	@ (800ae10 <UART_SetConfig+0xccc>)
 800ad7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad80:	e00c      	b.n	800ad9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad82:	4b24      	ldr	r3, [pc, #144]	@ (800ae14 <UART_SetConfig+0xcd0>)
 800ad84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad86:	e009      	b.n	800ad9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad8e:	e005      	b.n	800ad9c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ad90:	2300      	movs	r3, #0
 800ad92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ad9a:	bf00      	nop
    }

    if (pclk != 0U)
 800ad9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d021      	beq.n	800ade6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ada6:	4a1c      	ldr	r2, [pc, #112]	@ (800ae18 <UART_SetConfig+0xcd4>)
 800ada8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adac:	461a      	mov	r2, r3
 800adae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adb0:	fbb3 f2f2 	udiv	r2, r3, r2
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	085b      	lsrs	r3, r3, #1
 800adba:	441a      	add	r2, r3
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800adc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc8:	2b0f      	cmp	r3, #15
 800adca:	d909      	bls.n	800ade0 <UART_SetConfig+0xc9c>
 800adcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800add2:	d205      	bcs.n	800ade0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800add4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add6:	b29a      	uxth	r2, r3
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	60da      	str	r2, [r3, #12]
 800adde:	e002      	b.n	800ade6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	2201      	movs	r2, #1
 800adea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	2200      	movs	r2, #0
 800adfa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	2200      	movs	r2, #0
 800ae00:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ae02:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3748      	adds	r7, #72	@ 0x48
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae10:	03d09000 	.word	0x03d09000
 800ae14:	003d0900 	.word	0x003d0900
 800ae18:	0800e890 	.word	0x0800e890

0800ae1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae28:	f003 0308 	and.w	r3, r3, #8
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00a      	beq.n	800ae46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	430a      	orrs	r2, r1
 800ae44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae4a:	f003 0301 	and.w	r3, r3, #1
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d00a      	beq.n	800ae68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	430a      	orrs	r2, r1
 800ae66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae6c:	f003 0302 	and.w	r3, r3, #2
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00a      	beq.n	800ae8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	430a      	orrs	r2, r1
 800ae88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae8e:	f003 0304 	and.w	r3, r3, #4
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00a      	beq.n	800aeac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	430a      	orrs	r2, r1
 800aeaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeb0:	f003 0310 	and.w	r3, r3, #16
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00a      	beq.n	800aece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	430a      	orrs	r2, r1
 800aecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aed2:	f003 0320 	and.w	r3, r3, #32
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00a      	beq.n	800aef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	430a      	orrs	r2, r1
 800aeee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d01a      	beq.n	800af32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	430a      	orrs	r2, r1
 800af10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af1a:	d10a      	bne.n	800af32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	430a      	orrs	r2, r1
 800af30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00a      	beq.n	800af54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	430a      	orrs	r2, r1
 800af52:	605a      	str	r2, [r3, #4]
  }
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b098      	sub	sp, #96	@ 0x60
 800af64:	af02      	add	r7, sp, #8
 800af66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af70:	f7f6 ffe4 	bl	8001f3c <HAL_GetTick>
 800af74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 0308 	and.w	r3, r3, #8
 800af80:	2b08      	cmp	r3, #8
 800af82:	d12f      	bne.n	800afe4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af8c:	2200      	movs	r2, #0
 800af8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 f88e 	bl	800b0b4 <UART_WaitOnFlagUntilTimeout>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d022      	beq.n	800afe4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa6:	e853 3f00 	ldrex	r3, [r3]
 800afaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800afac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800afb2:	653b      	str	r3, [r7, #80]	@ 0x50
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	461a      	mov	r2, r3
 800afba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afbc:	647b      	str	r3, [r7, #68]	@ 0x44
 800afbe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800afc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800afc4:	e841 2300 	strex	r3, r2, [r1]
 800afc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800afca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d1e6      	bne.n	800af9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2220      	movs	r2, #32
 800afd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afe0:	2303      	movs	r3, #3
 800afe2:	e063      	b.n	800b0ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f003 0304 	and.w	r3, r3, #4
 800afee:	2b04      	cmp	r3, #4
 800aff0:	d149      	bne.n	800b086 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aff2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aff6:	9300      	str	r3, [sp, #0]
 800aff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800affa:	2200      	movs	r2, #0
 800affc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f857 	bl	800b0b4 <UART_WaitOnFlagUntilTimeout>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d03c      	beq.n	800b086 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b014:	e853 3f00 	ldrex	r3, [r3]
 800b018:	623b      	str	r3, [r7, #32]
   return(result);
 800b01a:	6a3b      	ldr	r3, [r7, #32]
 800b01c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b020:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	461a      	mov	r2, r3
 800b028:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b02a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b02c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b032:	e841 2300 	strex	r3, r2, [r1]
 800b036:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1e6      	bne.n	800b00c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3308      	adds	r3, #8
 800b044:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	e853 3f00 	ldrex	r3, [r3]
 800b04c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f023 0301 	bic.w	r3, r3, #1
 800b054:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	3308      	adds	r3, #8
 800b05c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b05e:	61fa      	str	r2, [r7, #28]
 800b060:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b062:	69b9      	ldr	r1, [r7, #24]
 800b064:	69fa      	ldr	r2, [r7, #28]
 800b066:	e841 2300 	strex	r3, r2, [r1]
 800b06a:	617b      	str	r3, [r7, #20]
   return(result);
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d1e5      	bne.n	800b03e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2220      	movs	r2, #32
 800b076:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b082:	2303      	movs	r3, #3
 800b084:	e012      	b.n	800b0ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2220      	movs	r2, #32
 800b08a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2220      	movs	r2, #32
 800b092:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3758      	adds	r7, #88	@ 0x58
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	603b      	str	r3, [r7, #0]
 800b0c0:	4613      	mov	r3, r2
 800b0c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0c4:	e04f      	b.n	800b166 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0cc:	d04b      	beq.n	800b166 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0ce:	f7f6 ff35 	bl	8001f3c <HAL_GetTick>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	69ba      	ldr	r2, [r7, #24]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d302      	bcc.n	800b0e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d101      	bne.n	800b0e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b0e4:	2303      	movs	r3, #3
 800b0e6:	e04e      	b.n	800b186 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f003 0304 	and.w	r3, r3, #4
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d037      	beq.n	800b166 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	2b80      	cmp	r3, #128	@ 0x80
 800b0fa:	d034      	beq.n	800b166 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	2b40      	cmp	r3, #64	@ 0x40
 800b100:	d031      	beq.n	800b166 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	69db      	ldr	r3, [r3, #28]
 800b108:	f003 0308 	and.w	r3, r3, #8
 800b10c:	2b08      	cmp	r3, #8
 800b10e:	d110      	bne.n	800b132 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2208      	movs	r2, #8
 800b116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f000 f921 	bl	800b360 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2208      	movs	r2, #8
 800b122:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b12e:	2301      	movs	r3, #1
 800b130:	e029      	b.n	800b186 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	69db      	ldr	r3, [r3, #28]
 800b138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b13c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b140:	d111      	bne.n	800b166 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b14a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f000 f907 	bl	800b360 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2220      	movs	r2, #32
 800b156:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2200      	movs	r2, #0
 800b15e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b162:	2303      	movs	r3, #3
 800b164:	e00f      	b.n	800b186 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	69da      	ldr	r2, [r3, #28]
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	4013      	ands	r3, r2
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	429a      	cmp	r2, r3
 800b174:	bf0c      	ite	eq
 800b176:	2301      	moveq	r3, #1
 800b178:	2300      	movne	r3, #0
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	461a      	mov	r2, r3
 800b17e:	79fb      	ldrb	r3, [r7, #7]
 800b180:	429a      	cmp	r2, r3
 800b182:	d0a0      	beq.n	800b0c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
	...

0800b190 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b096      	sub	sp, #88	@ 0x58
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	4613      	mov	r3, r2
 800b19c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	68ba      	ldr	r2, [r7, #8]
 800b1a2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	88fa      	ldrh	r2, [r7, #6]
 800b1a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2222      	movs	r2, #34	@ 0x22
 800b1b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d02d      	beq.n	800b222 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1cc:	4a40      	ldr	r2, [pc, #256]	@ (800b2d0 <UART_Start_Receive_DMA+0x140>)
 800b1ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1d6:	4a3f      	ldr	r2, [pc, #252]	@ (800b2d4 <UART_Start_Receive_DMA+0x144>)
 800b1d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1e0:	4a3d      	ldr	r2, [pc, #244]	@ (800b2d8 <UART_Start_Receive_DMA+0x148>)
 800b1e2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	3324      	adds	r3, #36	@ 0x24
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b200:	461a      	mov	r2, r3
 800b202:	88fb      	ldrh	r3, [r7, #6]
 800b204:	f7f7 fbe0 	bl	80029c8 <HAL_DMA_Start_IT>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d009      	beq.n	800b222 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2210      	movs	r2, #16
 800b212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2220      	movs	r2, #32
 800b21a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	e051      	b.n	800b2c6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	691b      	ldr	r3, [r3, #16]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d018      	beq.n	800b25c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b232:	e853 3f00 	ldrex	r3, [r3]
 800b236:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b23e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	461a      	mov	r2, r3
 800b246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b248:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b24a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b24c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b24e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b250:	e841 2300 	strex	r3, r2, [r1]
 800b254:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d1e6      	bne.n	800b22a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	3308      	adds	r3, #8
 800b262:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b266:	e853 3f00 	ldrex	r3, [r3]
 800b26a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b26e:	f043 0301 	orr.w	r3, r3, #1
 800b272:	653b      	str	r3, [r7, #80]	@ 0x50
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3308      	adds	r3, #8
 800b27a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b27c:	637a      	str	r2, [r7, #52]	@ 0x34
 800b27e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b280:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b282:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b284:	e841 2300 	strex	r3, r2, [r1]
 800b288:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1e5      	bne.n	800b25c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	3308      	adds	r3, #8
 800b296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	e853 3f00 	ldrex	r3, [r3]
 800b29e:	613b      	str	r3, [r7, #16]
   return(result);
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	3308      	adds	r3, #8
 800b2ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b2b0:	623a      	str	r2, [r7, #32]
 800b2b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b4:	69f9      	ldr	r1, [r7, #28]
 800b2b6:	6a3a      	ldr	r2, [r7, #32]
 800b2b8:	e841 2300 	strex	r3, r2, [r1]
 800b2bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1e5      	bne.n	800b290 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3758      	adds	r7, #88	@ 0x58
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	0800b42d 	.word	0x0800b42d
 800b2d4:	0800b555 	.word	0x0800b555
 800b2d8:	0800b593 	.word	0x0800b593

0800b2dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b08f      	sub	sp, #60	@ 0x3c
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ea:	6a3b      	ldr	r3, [r7, #32]
 800b2ec:	e853 3f00 	ldrex	r3, [r3]
 800b2f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b2f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	461a      	mov	r2, r3
 800b300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b304:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b306:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b308:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b30a:	e841 2300 	strex	r3, r2, [r1]
 800b30e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1e6      	bne.n	800b2e4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	3308      	adds	r3, #8
 800b31c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	e853 3f00 	ldrex	r3, [r3]
 800b324:	60bb      	str	r3, [r7, #8]
   return(result);
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b32c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3308      	adds	r3, #8
 800b334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b336:	61ba      	str	r2, [r7, #24]
 800b338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33a:	6979      	ldr	r1, [r7, #20]
 800b33c:	69ba      	ldr	r2, [r7, #24]
 800b33e:	e841 2300 	strex	r3, r2, [r1]
 800b342:	613b      	str	r3, [r7, #16]
   return(result);
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1e5      	bne.n	800b316 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2220      	movs	r2, #32
 800b34e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b352:	bf00      	nop
 800b354:	373c      	adds	r7, #60	@ 0x3c
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
	...

0800b360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b360:	b480      	push	{r7}
 800b362:	b095      	sub	sp, #84	@ 0x54
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b370:	e853 3f00 	ldrex	r3, [r3]
 800b374:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b378:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b37c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	461a      	mov	r2, r3
 800b384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b386:	643b      	str	r3, [r7, #64]	@ 0x40
 800b388:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b38c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b38e:	e841 2300 	strex	r3, r2, [r1]
 800b392:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1e6      	bne.n	800b368 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	3308      	adds	r3, #8
 800b3a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a2:	6a3b      	ldr	r3, [r7, #32]
 800b3a4:	e853 3f00 	ldrex	r3, [r3]
 800b3a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3aa:	69fa      	ldr	r2, [r7, #28]
 800b3ac:	4b1e      	ldr	r3, [pc, #120]	@ (800b428 <UART_EndRxTransfer+0xc8>)
 800b3ae:	4013      	ands	r3, r2
 800b3b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	3308      	adds	r3, #8
 800b3b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3c2:	e841 2300 	strex	r3, r2, [r1]
 800b3c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d1e5      	bne.n	800b39a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d118      	bne.n	800b408 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	e853 3f00 	ldrex	r3, [r3]
 800b3e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	f023 0310 	bic.w	r3, r3, #16
 800b3ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3f4:	61bb      	str	r3, [r7, #24]
 800b3f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f8:	6979      	ldr	r1, [r7, #20]
 800b3fa:	69ba      	ldr	r2, [r7, #24]
 800b3fc:	e841 2300 	strex	r3, r2, [r1]
 800b400:	613b      	str	r3, [r7, #16]
   return(result);
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d1e6      	bne.n	800b3d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2220      	movs	r2, #32
 800b40c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b41c:	bf00      	nop
 800b41e:	3754      	adds	r7, #84	@ 0x54
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr
 800b428:	effffffe 	.word	0xeffffffe

0800b42c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b09c      	sub	sp, #112	@ 0x70
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b438:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	69db      	ldr	r3, [r3, #28]
 800b43e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b442:	d071      	beq.n	800b528 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b446:	2200      	movs	r2, #0
 800b448:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b44c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b452:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b454:	e853 3f00 	ldrex	r3, [r3]
 800b458:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b45a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b45c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b460:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	461a      	mov	r2, r3
 800b468:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b46a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b46c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b470:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b472:	e841 2300 	strex	r3, r2, [r1]
 800b476:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b478:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1e6      	bne.n	800b44c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b47e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	3308      	adds	r3, #8
 800b484:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b488:	e853 3f00 	ldrex	r3, [r3]
 800b48c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b48e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b490:	f023 0301 	bic.w	r3, r3, #1
 800b494:	667b      	str	r3, [r7, #100]	@ 0x64
 800b496:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	3308      	adds	r3, #8
 800b49c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b49e:	647a      	str	r2, [r7, #68]	@ 0x44
 800b4a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b4a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b4a6:	e841 2300 	strex	r3, r2, [r1]
 800b4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b4ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1e5      	bne.n	800b47e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	3308      	adds	r3, #8
 800b4b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4bc:	e853 3f00 	ldrex	r3, [r3]
 800b4c0:	623b      	str	r3, [r7, #32]
   return(result);
 800b4c2:	6a3b      	ldr	r3, [r7, #32]
 800b4c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4c8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b4ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	3308      	adds	r3, #8
 800b4d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b4d2:	633a      	str	r2, [r7, #48]	@ 0x30
 800b4d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4da:	e841 2300 	strex	r3, r2, [r1]
 800b4de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d1e5      	bne.n	800b4b2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b4e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4e8:	2220      	movs	r2, #32
 800b4ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d118      	bne.n	800b528 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	e853 3f00 	ldrex	r3, [r3]
 800b502:	60fb      	str	r3, [r7, #12]
   return(result);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f023 0310 	bic.w	r3, r3, #16
 800b50a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b50c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	461a      	mov	r2, r3
 800b512:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b514:	61fb      	str	r3, [r7, #28]
 800b516:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b518:	69b9      	ldr	r1, [r7, #24]
 800b51a:	69fa      	ldr	r2, [r7, #28]
 800b51c:	e841 2300 	strex	r3, r2, [r1]
 800b520:	617b      	str	r3, [r7, #20]
   return(result);
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1e6      	bne.n	800b4f6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b528:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b52a:	2200      	movs	r2, #0
 800b52c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b52e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b530:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b532:	2b01      	cmp	r3, #1
 800b534:	d107      	bne.n	800b546 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b538:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b53c:	4619      	mov	r1, r3
 800b53e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b540:	f7f5 fd4a 	bl	8000fd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b544:	e002      	b.n	800b54c <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b546:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b548:	f7fe fdde 	bl	800a108 <HAL_UART_RxCpltCallback>
}
 800b54c:	bf00      	nop
 800b54e:	3770      	adds	r7, #112	@ 0x70
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b560:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2201      	movs	r2, #1
 800b566:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d109      	bne.n	800b584 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b576:	085b      	lsrs	r3, r3, #1
 800b578:	b29b      	uxth	r3, r3
 800b57a:	4619      	mov	r1, r3
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f7f5 fd2b 	bl	8000fd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b582:	e002      	b.n	800b58a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f7fe fdc9 	bl	800a11c <HAL_UART_RxHalfCpltCallback>
}
 800b58a:	bf00      	nop
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b086      	sub	sp, #24
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b59e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5ba:	2b80      	cmp	r3, #128	@ 0x80
 800b5bc:	d109      	bne.n	800b5d2 <UART_DMAError+0x40>
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	2b21      	cmp	r3, #33	@ 0x21
 800b5c2:	d106      	bne.n	800b5d2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b5cc:	6978      	ldr	r0, [r7, #20]
 800b5ce:	f7ff fe85 	bl	800b2dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	689b      	ldr	r3, [r3, #8]
 800b5d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5dc:	2b40      	cmp	r3, #64	@ 0x40
 800b5de:	d109      	bne.n	800b5f4 <UART_DMAError+0x62>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2b22      	cmp	r3, #34	@ 0x22
 800b5e4:	d106      	bne.n	800b5f4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b5ee:	6978      	ldr	r0, [r7, #20]
 800b5f0:	f7ff feb6 	bl	800b360 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5fa:	f043 0210 	orr.w	r2, r3, #16
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b604:	6978      	ldr	r0, [r7, #20]
 800b606:	f7fe fd93 	bl	800a130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b60a:	bf00      	nop
 800b60c:	3718      	adds	r7, #24
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b084      	sub	sp, #16
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b61e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f7fe fd81 	bl	800a130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b62e:	bf00      	nop
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b088      	sub	sp, #32
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	e853 3f00 	ldrex	r3, [r3]
 800b64a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b652:	61fb      	str	r3, [r7, #28]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	461a      	mov	r2, r3
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	61bb      	str	r3, [r7, #24]
 800b65e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b660:	6979      	ldr	r1, [r7, #20]
 800b662:	69ba      	ldr	r2, [r7, #24]
 800b664:	e841 2300 	strex	r3, r2, [r1]
 800b668:	613b      	str	r3, [r7, #16]
   return(result);
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1e6      	bne.n	800b63e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2220      	movs	r2, #32
 800b674:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7fe fd38 	bl	800a0f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b684:	bf00      	nop
 800b686:	3720      	adds	r7, #32
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b694:	bf00      	nop
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b6a8:	bf00      	nop
 800b6aa:	370c      	adds	r7, #12
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b6bc:	bf00      	nop
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d101      	bne.n	800b6de <HAL_UARTEx_DisableFifoMode+0x16>
 800b6da:	2302      	movs	r3, #2
 800b6dc:	e027      	b.n	800b72e <HAL_UARTEx_DisableFifoMode+0x66>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2224      	movs	r2, #36	@ 0x24
 800b6ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f022 0201 	bic.w	r2, r2, #1
 800b704:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b70c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2220      	movs	r2, #32
 800b720:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2200      	movs	r2, #0
 800b728:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3714      	adds	r7, #20
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr

0800b73a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b084      	sub	sp, #16
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
 800b742:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d101      	bne.n	800b752 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b74e:	2302      	movs	r3, #2
 800b750:	e02d      	b.n	800b7ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2201      	movs	r2, #1
 800b756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2224      	movs	r2, #36	@ 0x24
 800b75e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f022 0201 	bic.w	r2, r2, #1
 800b778:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	683a      	ldr	r2, [r7, #0]
 800b78a:	430a      	orrs	r2, r1
 800b78c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f8a4 	bl	800b8dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2220      	movs	r2, #32
 800b7a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3710      	adds	r7, #16
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b084      	sub	sp, #16
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
 800b7be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d101      	bne.n	800b7ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b7ca:	2302      	movs	r3, #2
 800b7cc:	e02d      	b.n	800b82a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2224      	movs	r2, #36	@ 0x24
 800b7da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f022 0201 	bic.w	r2, r2, #1
 800b7f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	689b      	ldr	r3, [r3, #8]
 800b7fc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	683a      	ldr	r2, [r7, #0]
 800b806:	430a      	orrs	r2, r1
 800b808:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 f866 	bl	800b8dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2220      	movs	r2, #32
 800b81c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b832:	b580      	push	{r7, lr}
 800b834:	b08c      	sub	sp, #48	@ 0x30
 800b836:	af00      	add	r7, sp, #0
 800b838:	60f8      	str	r0, [r7, #12]
 800b83a:	60b9      	str	r1, [r7, #8]
 800b83c:	4613      	mov	r3, r2
 800b83e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b846:	2b20      	cmp	r3, #32
 800b848:	d142      	bne.n	800b8d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d002      	beq.n	800b856 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b850:	88fb      	ldrh	r3, [r7, #6]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d101      	bne.n	800b85a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	e03b      	b.n	800b8d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2201      	movs	r2, #1
 800b85e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2200      	movs	r2, #0
 800b864:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b866:	88fb      	ldrh	r3, [r7, #6]
 800b868:	461a      	mov	r2, r3
 800b86a:	68b9      	ldr	r1, [r7, #8]
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f7ff fc8f 	bl	800b190 <UART_Start_Receive_DMA>
 800b872:	4603      	mov	r3, r0
 800b874:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b878:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d124      	bne.n	800b8ca <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b884:	2b01      	cmp	r3, #1
 800b886:	d11d      	bne.n	800b8c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2210      	movs	r2, #16
 800b88e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b896:	69bb      	ldr	r3, [r7, #24]
 800b898:	e853 3f00 	ldrex	r3, [r3]
 800b89c:	617b      	str	r3, [r7, #20]
   return(result);
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	f043 0310 	orr.w	r3, r3, #16
 800b8a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8b0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b2:	6a39      	ldr	r1, [r7, #32]
 800b8b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8b6:	e841 2300 	strex	r3, r2, [r1]
 800b8ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d1e6      	bne.n	800b890 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b8c2:	e002      	b.n	800b8ca <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b8ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b8ce:	e000      	b.n	800b8d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b8d0:	2302      	movs	r3, #2
  }
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3730      	adds	r7, #48	@ 0x30
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
	...

0800b8dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d108      	bne.n	800b8fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b8fc:	e031      	b.n	800b962 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b8fe:	2310      	movs	r3, #16
 800b900:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b902:	2310      	movs	r3, #16
 800b904:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	0e5b      	lsrs	r3, r3, #25
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	f003 0307 	and.w	r3, r3, #7
 800b914:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	0f5b      	lsrs	r3, r3, #29
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	f003 0307 	and.w	r3, r3, #7
 800b924:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b926:	7bbb      	ldrb	r3, [r7, #14]
 800b928:	7b3a      	ldrb	r2, [r7, #12]
 800b92a:	4911      	ldr	r1, [pc, #68]	@ (800b970 <UARTEx_SetNbDataToProcess+0x94>)
 800b92c:	5c8a      	ldrb	r2, [r1, r2]
 800b92e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b932:	7b3a      	ldrb	r2, [r7, #12]
 800b934:	490f      	ldr	r1, [pc, #60]	@ (800b974 <UARTEx_SetNbDataToProcess+0x98>)
 800b936:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b938:	fb93 f3f2 	sdiv	r3, r3, r2
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b944:	7bfb      	ldrb	r3, [r7, #15]
 800b946:	7b7a      	ldrb	r2, [r7, #13]
 800b948:	4909      	ldr	r1, [pc, #36]	@ (800b970 <UARTEx_SetNbDataToProcess+0x94>)
 800b94a:	5c8a      	ldrb	r2, [r1, r2]
 800b94c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b950:	7b7a      	ldrb	r2, [r7, #13]
 800b952:	4908      	ldr	r1, [pc, #32]	@ (800b974 <UARTEx_SetNbDataToProcess+0x98>)
 800b954:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b956:	fb93 f3f2 	sdiv	r3, r3, r2
 800b95a:	b29a      	uxth	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b962:	bf00      	nop
 800b964:	3714      	adds	r7, #20
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	0800e8a8 	.word	0x0800e8a8
 800b974:	0800e8b0 	.word	0x0800e8b0

0800b978 <max30102_plot>:
 * @note Override this in your main.c if you do not use printf() for printing.
 * @param ir_sample
 * @param red_sample
 */
__weak void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
    UNUSED(ir_sample);
    UNUSED(red_sample);
}
 800b982:	bf00      	nop
 800b984:	370c      	adds	r7, #12
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr

0800b98e <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b082      	sub	sp, #8
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	683a      	ldr	r2, [r7, #0]
 800b99c:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	3304      	adds	r3, #4
 800b9aa:	2280      	movs	r2, #128	@ 0x80
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f001 f9c6 	bl	800cd40 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	3384      	adds	r3, #132	@ 0x84
 800b9b8:	2280      	movs	r2, #128	@ 0x80
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f001 f9bf 	bl	800cd40 <memset>
}
 800b9c2:	bf00      	nop
 800b9c4:	3708      	adds	r7, #8
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b088      	sub	sp, #32
 800b9ce:	af02      	add	r7, sp, #8
 800b9d0:	60f8      	str	r0, [r7, #12]
 800b9d2:	607a      	str	r2, [r7, #4]
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	72fb      	strb	r3, [r7, #11]
 800b9da:	4613      	mov	r3, r2
 800b9dc:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 800b9de:	893b      	ldrh	r3, [r7, #8]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 faae 	bl	800bf44 <malloc>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	617b      	str	r3, [r7, #20]
    *payload = reg;
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	7afa      	ldrb	r2, [r7, #11]
 800b9f0:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d009      	beq.n	800ba0c <max30102_write+0x42>
 800b9f8:	893b      	ldrh	r3, [r7, #8]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d006      	beq.n	800ba0c <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	3301      	adds	r3, #1
 800ba02:	893a      	ldrh	r2, [r7, #8]
 800ba04:	6879      	ldr	r1, [r7, #4]
 800ba06:	4618      	mov	r0, r3
 800ba08:	f001 fa29 	bl	800ce5e <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6818      	ldr	r0, [r3, #0]
 800ba10:	893b      	ldrh	r3, [r7, #8]
 800ba12:	3301      	adds	r3, #1
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ba1a:	9200      	str	r2, [sp, #0]
 800ba1c:	697a      	ldr	r2, [r7, #20]
 800ba1e:	21ae      	movs	r1, #174	@ 0xae
 800ba20:	f7f9 fdae 	bl	8005580 <HAL_I2C_Master_Transmit>
    free(payload);
 800ba24:	6978      	ldr	r0, [r7, #20]
 800ba26:	f000 fa95 	bl	800bf54 <free>
}
 800ba2a:	bf00      	nop
 800ba2c:	3718      	adds	r7, #24
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b088      	sub	sp, #32
 800ba36:	af02      	add	r7, sp, #8
 800ba38:	60f8      	str	r0, [r7, #12]
 800ba3a:	607a      	str	r2, [r7, #4]
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	460b      	mov	r3, r1
 800ba40:	72fb      	strb	r3, [r7, #11]
 800ba42:	4613      	mov	r3, r2
 800ba44:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 800ba46:	7afb      	ldrb	r3, [r7, #11]
 800ba48:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6818      	ldr	r0, [r3, #0]
 800ba4e:	f107 0217 	add.w	r2, r7, #23
 800ba52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	2301      	movs	r3, #1
 800ba5a:	21ae      	movs	r1, #174	@ 0xae
 800ba5c:	f7f9 fd90 	bl	8005580 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6818      	ldr	r0, [r3, #0]
 800ba64:	893b      	ldrh	r3, [r7, #8]
 800ba66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ba6a:	9200      	str	r2, [sp, #0]
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	21ae      	movs	r1, #174	@ 0xae
 800ba70:	f7f9 fe9e 	bl	80057b0 <HAL_I2C_Master_Receive>
}
 800ba74:	bf00      	nop
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 800ba84:	2340      	movs	r3, #64	@ 0x40
 800ba86:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 800ba88:	f107 020f 	add.w	r2, r7, #15
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	2109      	movs	r1, #9
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7ff ff9a 	bl	800b9ca <max30102_write>
}
 800ba96:	bf00      	nop
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b084      	sub	sp, #16
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	460b      	mov	r3, r1
 800baa8:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800baae:	f107 020f 	add.w	r2, r7, #15
 800bab2:	2301      	movs	r3, #1
 800bab4:	2102      	movs	r1, #2
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7ff ffbb 	bl	800ba32 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 800babc:	7bfb      	ldrb	r3, [r7, #15]
 800babe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 800bac6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800baca:	01db      	lsls	r3, r3, #7
 800bacc:	b25a      	sxtb	r2, r3
 800bace:	7bfb      	ldrb	r3, [r7, #15]
 800bad0:	b25b      	sxtb	r3, r3
 800bad2:	4313      	orrs	r3, r2
 800bad4:	b25b      	sxtb	r3, r3
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800bada:	f107 020f 	add.w	r2, r7, #15
 800bade:	2301      	movs	r3, #1
 800bae0:	2102      	movs	r1, #2
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f7ff ff71 	bl	800b9ca <max30102_write>
}
 800bae8:	bf00      	nop
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	460b      	mov	r3, r1
 800bafa:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 800bafc:	78fb      	ldrb	r3, [r7, #3]
 800bafe:	005b      	lsls	r3, r3, #1
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	f003 0302 	and.w	r3, r3, #2
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 800bb0a:	f107 020f 	add.w	r2, r7, #15
 800bb0e:	2301      	movs	r3, #1
 800bb10:	2103      	movs	r1, #3
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7ff ff59 	bl	800b9ca <max30102_write>
}
 800bb18:	bf00      	nop
 800bb1a:	3710      	adds	r7, #16
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 800bb2c:	78fb      	ldrb	r3, [r7, #3]
 800bb2e:	005b      	lsls	r3, r3, #1
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	f003 0302 	and.w	r3, r3, #2
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 800bb3a:	f107 020f 	add.w	r2, r7, #15
 800bb3e:	2301      	movs	r3, #1
 800bb40:	2121      	movs	r1, #33	@ 0x21
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f7ff ff41 	bl	800b9ca <max30102_write>
}
 800bb48:	bf00      	nop
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 800bb60:	bf00      	nop
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <max30102_has_interrupt>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30102_has_interrupt(max30102_t *obj)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	370c      	adds	r7, #12
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr

0800bb86 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b084      	sub	sp, #16
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 800bb8e:	2300      	movs	r3, #0
 800bb90:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 800bb92:	f107 020c 	add.w	r2, r7, #12
 800bb96:	2302      	movs	r3, #2
 800bb98:	2100      	movs	r1, #0
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f7ff ff49 	bl	800ba32 <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 800bba0:	7b3b      	ldrb	r3, [r7, #12]
 800bba2:	09db      	lsrs	r3, r3, #7
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	f003 0301 	and.w	r3, r3, #1
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d002      	beq.n	800bbb4 <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj);
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 f94d 	bl	800be4e <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 800bbb4:	7b7b      	ldrb	r3, [r7, #13]
 800bbb6:	085b      	lsrs	r3, r3, #1
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	f003 0301 	and.w	r3, r3, #1
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d007      	beq.n	800bbd2 <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 800bbc2:	f107 020a 	add.w	r2, r7, #10
 800bbc6:	f107 030b 	add.w	r3, r7, #11
 800bbca:	4619      	mov	r1, r3
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 f9a3 	bl	800bf18 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 800bbda:	bf00      	nop
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b084      	sub	sp, #16
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	460b      	mov	r3, r1
 800bbec:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 800bbee:	f107 020f 	add.w	r2, r7, #15
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	2109      	movs	r1, #9
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f7ff ff1b 	bl	800ba32 <max30102_read>
    config = (config & 0xf8) | mode;
 800bbfc:	7bfb      	ldrb	r3, [r7, #15]
 800bbfe:	b25b      	sxtb	r3, r3
 800bc00:	f023 0307 	bic.w	r3, r3, #7
 800bc04:	b25a      	sxtb	r2, r3
 800bc06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	b25b      	sxtb	r3, r3
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 800bc12:	f107 020f 	add.w	r2, r7, #15
 800bc16:	2301      	movs	r3, #1
 800bc18:	2109      	movs	r1, #9
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f7ff fed5 	bl	800b9ca <max30102_write>
    max30102_clear_fifo(obj);
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 f8f5 	bl	800be10 <max30102_clear_fifo>
}
 800bc26:	bf00      	nop
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b084      	sub	sp, #16
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
 800bc36:	460b      	mov	r3, r1
 800bc38:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800bc3a:	f107 020f 	add.w	r2, r7, #15
 800bc3e:	2301      	movs	r3, #1
 800bc40:	210a      	movs	r1, #10
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7ff fef5 	bl	800ba32 <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 800bc48:	7bfb      	ldrb	r3, [r7, #15]
 800bc4a:	b25b      	sxtb	r3, r3
 800bc4c:	f003 0363 	and.w	r3, r3, #99	@ 0x63
 800bc50:	b25a      	sxtb	r2, r3
 800bc52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc56:	009b      	lsls	r3, r3, #2
 800bc58:	b25b      	sxtb	r3, r3
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	b25b      	sxtb	r3, r3
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800bc62:	f107 020f 	add.w	r2, r7, #15
 800bc66:	2301      	movs	r3, #1
 800bc68:	210a      	movs	r1, #10
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f7ff fead 	bl	800b9ca <max30102_write>
}
 800bc70:	bf00      	nop
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	460b      	mov	r3, r1
 800bc82:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800bc84:	f107 020f 	add.w	r2, r7, #15
 800bc88:	2301      	movs	r3, #1
 800bc8a:	210a      	movs	r1, #10
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7ff fed0 	bl	800ba32 <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 800bc92:	7bfb      	ldrb	r3, [r7, #15]
 800bc94:	b25b      	sxtb	r3, r3
 800bc96:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800bc9a:	b25a      	sxtb	r2, r3
 800bc9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	b25b      	sxtb	r3, r3
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800bca8:	f107 020f 	add.w	r2, r7, #15
 800bcac:	2301      	movs	r3, #1
 800bcae:	210a      	movs	r1, #10
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7ff fe8a 	bl	800b9ca <max30102_write>
}
 800bcb6:	bf00      	nop
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b084      	sub	sp, #16
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800bcca:	f107 020f 	add.w	r2, r7, #15
 800bcce:	2301      	movs	r3, #1
 800bcd0:	210a      	movs	r1, #10
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f7ff fead 	bl	800ba32 <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 800bcd8:	7bfb      	ldrb	r3, [r7, #15]
 800bcda:	b25b      	sxtb	r3, r3
 800bcdc:	f003 031f 	and.w	r3, r3, #31
 800bce0:	b25a      	sxtb	r2, r3
 800bce2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bce6:	015b      	lsls	r3, r3, #5
 800bce8:	b25b      	sxtb	r3, r3
 800bcea:	4313      	orrs	r3, r2
 800bcec:	b25b      	sxtb	r3, r3
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800bcf2:	f107 020f 	add.w	r2, r7, #15
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	210a      	movs	r1, #10
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f7ff fe65 	bl	800b9ca <max30102_write>
}
 800bd00:	bf00      	nop
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	ed87 0a02 	vstr	s0, [r7, #8]
    uint8_t pa = ma / 0.2;
 800bd14:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd18:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800bd1c:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 800bd48 <max30102_set_led_current_1+0x40>
 800bd20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bd24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800bd28:	edc7 7a01 	vstr	s15, [r7, #4]
 800bd2c:	793b      	ldrb	r3, [r7, #4]
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	75fb      	strb	r3, [r7, #23]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 800bd32:	f107 0217 	add.w	r2, r7, #23
 800bd36:	2301      	movs	r3, #1
 800bd38:	210c      	movs	r1, #12
 800bd3a:	68f8      	ldr	r0, [r7, #12]
 800bd3c:	f7ff fe45 	bl	800b9ca <max30102_write>
}
 800bd40:	bf00      	nop
 800bd42:	3718      	adds	r7, #24
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	9999999a 	.word	0x9999999a
 800bd4c:	3fc99999 	.word	0x3fc99999

0800bd50 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	ed87 0a02 	vstr	s0, [r7, #8]
    uint8_t pa = ma / 0.2;
 800bd5c:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd60:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800bd64:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 800bd90 <max30102_set_led_current_2+0x40>
 800bd68:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bd6c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800bd70:	edc7 7a01 	vstr	s15, [r7, #4]
 800bd74:	793b      	ldrb	r3, [r7, #4]
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	75fb      	strb	r3, [r7, #23]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 800bd7a:	f107 0217 	add.w	r2, r7, #23
 800bd7e:	2301      	movs	r3, #1
 800bd80:	210d      	movs	r1, #13
 800bd82:	68f8      	ldr	r0, [r7, #12]
 800bd84:	f7ff fe21 	bl	800b9ca <max30102_write>
}
 800bd88:	bf00      	nop
 800bd8a:	3718      	adds	r7, #24
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	9999999a 	.word	0x9999999a
 800bd94:	3fc99999 	.word	0x3fc99999

0800bd98 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	4608      	mov	r0, r1
 800bda2:	4611      	mov	r1, r2
 800bda4:	461a      	mov	r2, r3
 800bda6:	4603      	mov	r3, r0
 800bda8:	70fb      	strb	r3, [r7, #3]
 800bdaa:	460b      	mov	r3, r1
 800bdac:	70bb      	strb	r3, [r7, #2]
 800bdae:	4613      	mov	r3, r2
 800bdb0:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 800bdb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdba:	015b      	lsls	r3, r3, #5
 800bdbc:	b25a      	sxtb	r2, r3
 800bdbe:	7bfb      	ldrb	r3, [r7, #15]
 800bdc0:	b25b      	sxtb	r3, r3
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	b25b      	sxtb	r3, r3
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 800bdca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bdce:	011b      	lsls	r3, r3, #4
 800bdd0:	b25b      	sxtb	r3, r3
 800bdd2:	f003 0310 	and.w	r3, r3, #16
 800bdd6:	b25a      	sxtb	r2, r3
 800bdd8:	7bfb      	ldrb	r3, [r7, #15]
 800bdda:	b25b      	sxtb	r3, r3
 800bddc:	4313      	orrs	r3, r2
 800bdde:	b25b      	sxtb	r3, r3
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 800bde4:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800bde8:	f003 030f 	and.w	r3, r3, #15
 800bdec:	b25a      	sxtb	r2, r3
 800bdee:	7bfb      	ldrb	r3, [r7, #15]
 800bdf0:	b25b      	sxtb	r3, r3
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	b25b      	sxtb	r3, r3
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 800bdfa:	f107 020f 	add.w	r2, r7, #15
 800bdfe:	2301      	movs	r3, #1
 800be00:	2108      	movs	r1, #8
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f7ff fde1 	bl	800b9ca <max30102_write>
}
 800be08:	bf00      	nop
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 800be1c:	f107 020f 	add.w	r2, r7, #15
 800be20:	2303      	movs	r3, #3
 800be22:	2104      	movs	r1, #4
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f7ff fdd0 	bl	800b9ca <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 800be2a:	f107 020f 	add.w	r2, r7, #15
 800be2e:	2303      	movs	r3, #3
 800be30:	2106      	movs	r1, #6
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff fdc9 	bl	800b9ca <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 800be38:	f107 020f 	add.w	r2, r7, #15
 800be3c:	2303      	movs	r3, #3
 800be3e:	2105      	movs	r1, #5
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f7ff fdc2 	bl	800b9ca <max30102_write>
}
 800be46:	bf00      	nop
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b088      	sub	sp, #32
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 800be56:	2300      	movs	r3, #0
 800be58:	74fb      	strb	r3, [r7, #19]
 800be5a:	2300      	movs	r3, #0
 800be5c:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 800be5e:	f107 0213 	add.w	r2, r7, #19
 800be62:	2301      	movs	r3, #1
 800be64:	2104      	movs	r1, #4
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7ff fde3 	bl	800ba32 <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 800be6c:	f107 0212 	add.w	r2, r7, #18
 800be70:	2301      	movs	r3, #1
 800be72:	2106      	movs	r1, #6
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f7ff fddc 	bl	800ba32 <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 800be7a:	7cfa      	ldrb	r2, [r7, #19]
 800be7c:	7cbb      	ldrb	r3, [r7, #18]
 800be7e:	1ad3      	subs	r3, r2, r3
 800be80:	b2db      	uxtb	r3, r3
 800be82:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 800be84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	dc03      	bgt.n	800be94 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 800be8c:	7ffb      	ldrb	r3, [r7, #31]
 800be8e:	3320      	adds	r3, #32
 800be90:	b2db      	uxtb	r3, r3
 800be92:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 800be94:	2300      	movs	r3, #0
 800be96:	77bb      	strb	r3, [r7, #30]
 800be98:	e033      	b.n	800bf02 <max30102_read_fifo+0xb4>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 800be9a:	f107 020c 	add.w	r2, r7, #12
 800be9e:	2306      	movs	r3, #6
 800bea0:	2107      	movs	r1, #7
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f7ff fdc5 	bl	800ba32 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 800bea8:	7b3b      	ldrb	r3, [r7, #12]
 800beaa:	041a      	lsls	r2, r3, #16
 800beac:	7b7b      	ldrb	r3, [r7, #13]
 800beae:	021b      	lsls	r3, r3, #8
 800beb0:	4313      	orrs	r3, r2
 800beb2:	7bba      	ldrb	r2, [r7, #14]
 800beb4:	4313      	orrs	r3, r2
 800beb6:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800beba:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 800bebc:	7bfb      	ldrb	r3, [r7, #15]
 800bebe:	041a      	lsls	r2, r3, #16
 800bec0:	7c3b      	ldrb	r3, [r7, #16]
 800bec2:	021b      	lsls	r3, r3, #8
 800bec4:	4313      	orrs	r3, r2
 800bec6:	7c7a      	ldrb	r2, [r7, #17]
 800bec8:	4313      	orrs	r3, r2
 800beca:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800bece:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 800bed0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	69ba      	ldr	r2, [r7, #24]
 800bedc:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 800bede:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	3320      	adds	r3, #32
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	4413      	add	r3, r2
 800beea:	697a      	ldr	r2, [r7, #20]
 800beec:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 800beee:	6979      	ldr	r1, [r7, #20]
 800bef0:	69b8      	ldr	r0, [r7, #24]
 800bef2:	f7ff fd41 	bl	800b978 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 800bef6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800befa:	b2db      	uxtb	r3, r3
 800befc:	3301      	adds	r3, #1
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	77bb      	strb	r3, [r7, #30]
 800bf02:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800bf06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	dbc5      	blt.n	800be9a <max30102_read_fifo+0x4c>
    }
}
 800bf0e:	bf00      	nop
 800bf10:	bf00      	nop
 800bf12:	3720      	adds	r7, #32
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 800bf24:	2301      	movs	r3, #1
 800bf26:	68ba      	ldr	r2, [r7, #8]
 800bf28:	211f      	movs	r1, #31
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f7ff fd81 	bl	800ba32 <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 800bf30:	2301      	movs	r3, #1
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	2120      	movs	r1, #32
 800bf36:	68f8      	ldr	r0, [r7, #12]
 800bf38:	f7ff fd7b 	bl	800ba32 <max30102_read>
}
 800bf3c:	bf00      	nop
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <malloc>:
 800bf44:	4b02      	ldr	r3, [pc, #8]	@ (800bf50 <malloc+0xc>)
 800bf46:	4601      	mov	r1, r0
 800bf48:	6818      	ldr	r0, [r3, #0]
 800bf4a:	f000 b82d 	b.w	800bfa8 <_malloc_r>
 800bf4e:	bf00      	nop
 800bf50:	2400001c 	.word	0x2400001c

0800bf54 <free>:
 800bf54:	4b02      	ldr	r3, [pc, #8]	@ (800bf60 <free+0xc>)
 800bf56:	4601      	mov	r1, r0
 800bf58:	6818      	ldr	r0, [r3, #0]
 800bf5a:	f001 bd77 	b.w	800da4c <_free_r>
 800bf5e:	bf00      	nop
 800bf60:	2400001c 	.word	0x2400001c

0800bf64 <sbrk_aligned>:
 800bf64:	b570      	push	{r4, r5, r6, lr}
 800bf66:	4e0f      	ldr	r6, [pc, #60]	@ (800bfa4 <sbrk_aligned+0x40>)
 800bf68:	460c      	mov	r4, r1
 800bf6a:	6831      	ldr	r1, [r6, #0]
 800bf6c:	4605      	mov	r5, r0
 800bf6e:	b911      	cbnz	r1, 800bf76 <sbrk_aligned+0x12>
 800bf70:	f000 ff26 	bl	800cdc0 <_sbrk_r>
 800bf74:	6030      	str	r0, [r6, #0]
 800bf76:	4621      	mov	r1, r4
 800bf78:	4628      	mov	r0, r5
 800bf7a:	f000 ff21 	bl	800cdc0 <_sbrk_r>
 800bf7e:	1c43      	adds	r3, r0, #1
 800bf80:	d103      	bne.n	800bf8a <sbrk_aligned+0x26>
 800bf82:	f04f 34ff 	mov.w	r4, #4294967295
 800bf86:	4620      	mov	r0, r4
 800bf88:	bd70      	pop	{r4, r5, r6, pc}
 800bf8a:	1cc4      	adds	r4, r0, #3
 800bf8c:	f024 0403 	bic.w	r4, r4, #3
 800bf90:	42a0      	cmp	r0, r4
 800bf92:	d0f8      	beq.n	800bf86 <sbrk_aligned+0x22>
 800bf94:	1a21      	subs	r1, r4, r0
 800bf96:	4628      	mov	r0, r5
 800bf98:	f000 ff12 	bl	800cdc0 <_sbrk_r>
 800bf9c:	3001      	adds	r0, #1
 800bf9e:	d1f2      	bne.n	800bf86 <sbrk_aligned+0x22>
 800bfa0:	e7ef      	b.n	800bf82 <sbrk_aligned+0x1e>
 800bfa2:	bf00      	nop
 800bfa4:	24000aa0 	.word	0x24000aa0

0800bfa8 <_malloc_r>:
 800bfa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfac:	1ccd      	adds	r5, r1, #3
 800bfae:	f025 0503 	bic.w	r5, r5, #3
 800bfb2:	3508      	adds	r5, #8
 800bfb4:	2d0c      	cmp	r5, #12
 800bfb6:	bf38      	it	cc
 800bfb8:	250c      	movcc	r5, #12
 800bfba:	2d00      	cmp	r5, #0
 800bfbc:	4606      	mov	r6, r0
 800bfbe:	db01      	blt.n	800bfc4 <_malloc_r+0x1c>
 800bfc0:	42a9      	cmp	r1, r5
 800bfc2:	d904      	bls.n	800bfce <_malloc_r+0x26>
 800bfc4:	230c      	movs	r3, #12
 800bfc6:	6033      	str	r3, [r6, #0]
 800bfc8:	2000      	movs	r0, #0
 800bfca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c0a4 <_malloc_r+0xfc>
 800bfd2:	f000 f869 	bl	800c0a8 <__malloc_lock>
 800bfd6:	f8d8 3000 	ldr.w	r3, [r8]
 800bfda:	461c      	mov	r4, r3
 800bfdc:	bb44      	cbnz	r4, 800c030 <_malloc_r+0x88>
 800bfde:	4629      	mov	r1, r5
 800bfe0:	4630      	mov	r0, r6
 800bfe2:	f7ff ffbf 	bl	800bf64 <sbrk_aligned>
 800bfe6:	1c43      	adds	r3, r0, #1
 800bfe8:	4604      	mov	r4, r0
 800bfea:	d158      	bne.n	800c09e <_malloc_r+0xf6>
 800bfec:	f8d8 4000 	ldr.w	r4, [r8]
 800bff0:	4627      	mov	r7, r4
 800bff2:	2f00      	cmp	r7, #0
 800bff4:	d143      	bne.n	800c07e <_malloc_r+0xd6>
 800bff6:	2c00      	cmp	r4, #0
 800bff8:	d04b      	beq.n	800c092 <_malloc_r+0xea>
 800bffa:	6823      	ldr	r3, [r4, #0]
 800bffc:	4639      	mov	r1, r7
 800bffe:	4630      	mov	r0, r6
 800c000:	eb04 0903 	add.w	r9, r4, r3
 800c004:	f000 fedc 	bl	800cdc0 <_sbrk_r>
 800c008:	4581      	cmp	r9, r0
 800c00a:	d142      	bne.n	800c092 <_malloc_r+0xea>
 800c00c:	6821      	ldr	r1, [r4, #0]
 800c00e:	1a6d      	subs	r5, r5, r1
 800c010:	4629      	mov	r1, r5
 800c012:	4630      	mov	r0, r6
 800c014:	f7ff ffa6 	bl	800bf64 <sbrk_aligned>
 800c018:	3001      	adds	r0, #1
 800c01a:	d03a      	beq.n	800c092 <_malloc_r+0xea>
 800c01c:	6823      	ldr	r3, [r4, #0]
 800c01e:	442b      	add	r3, r5
 800c020:	6023      	str	r3, [r4, #0]
 800c022:	f8d8 3000 	ldr.w	r3, [r8]
 800c026:	685a      	ldr	r2, [r3, #4]
 800c028:	bb62      	cbnz	r2, 800c084 <_malloc_r+0xdc>
 800c02a:	f8c8 7000 	str.w	r7, [r8]
 800c02e:	e00f      	b.n	800c050 <_malloc_r+0xa8>
 800c030:	6822      	ldr	r2, [r4, #0]
 800c032:	1b52      	subs	r2, r2, r5
 800c034:	d420      	bmi.n	800c078 <_malloc_r+0xd0>
 800c036:	2a0b      	cmp	r2, #11
 800c038:	d917      	bls.n	800c06a <_malloc_r+0xc2>
 800c03a:	1961      	adds	r1, r4, r5
 800c03c:	42a3      	cmp	r3, r4
 800c03e:	6025      	str	r5, [r4, #0]
 800c040:	bf18      	it	ne
 800c042:	6059      	strne	r1, [r3, #4]
 800c044:	6863      	ldr	r3, [r4, #4]
 800c046:	bf08      	it	eq
 800c048:	f8c8 1000 	streq.w	r1, [r8]
 800c04c:	5162      	str	r2, [r4, r5]
 800c04e:	604b      	str	r3, [r1, #4]
 800c050:	4630      	mov	r0, r6
 800c052:	f000 f82f 	bl	800c0b4 <__malloc_unlock>
 800c056:	f104 000b 	add.w	r0, r4, #11
 800c05a:	1d23      	adds	r3, r4, #4
 800c05c:	f020 0007 	bic.w	r0, r0, #7
 800c060:	1ac2      	subs	r2, r0, r3
 800c062:	bf1c      	itt	ne
 800c064:	1a1b      	subne	r3, r3, r0
 800c066:	50a3      	strne	r3, [r4, r2]
 800c068:	e7af      	b.n	800bfca <_malloc_r+0x22>
 800c06a:	6862      	ldr	r2, [r4, #4]
 800c06c:	42a3      	cmp	r3, r4
 800c06e:	bf0c      	ite	eq
 800c070:	f8c8 2000 	streq.w	r2, [r8]
 800c074:	605a      	strne	r2, [r3, #4]
 800c076:	e7eb      	b.n	800c050 <_malloc_r+0xa8>
 800c078:	4623      	mov	r3, r4
 800c07a:	6864      	ldr	r4, [r4, #4]
 800c07c:	e7ae      	b.n	800bfdc <_malloc_r+0x34>
 800c07e:	463c      	mov	r4, r7
 800c080:	687f      	ldr	r7, [r7, #4]
 800c082:	e7b6      	b.n	800bff2 <_malloc_r+0x4a>
 800c084:	461a      	mov	r2, r3
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	42a3      	cmp	r3, r4
 800c08a:	d1fb      	bne.n	800c084 <_malloc_r+0xdc>
 800c08c:	2300      	movs	r3, #0
 800c08e:	6053      	str	r3, [r2, #4]
 800c090:	e7de      	b.n	800c050 <_malloc_r+0xa8>
 800c092:	230c      	movs	r3, #12
 800c094:	6033      	str	r3, [r6, #0]
 800c096:	4630      	mov	r0, r6
 800c098:	f000 f80c 	bl	800c0b4 <__malloc_unlock>
 800c09c:	e794      	b.n	800bfc8 <_malloc_r+0x20>
 800c09e:	6005      	str	r5, [r0, #0]
 800c0a0:	e7d6      	b.n	800c050 <_malloc_r+0xa8>
 800c0a2:	bf00      	nop
 800c0a4:	24000aa4 	.word	0x24000aa4

0800c0a8 <__malloc_lock>:
 800c0a8:	4801      	ldr	r0, [pc, #4]	@ (800c0b0 <__malloc_lock+0x8>)
 800c0aa:	f000 bed6 	b.w	800ce5a <__retarget_lock_acquire_recursive>
 800c0ae:	bf00      	nop
 800c0b0:	24000be8 	.word	0x24000be8

0800c0b4 <__malloc_unlock>:
 800c0b4:	4801      	ldr	r0, [pc, #4]	@ (800c0bc <__malloc_unlock+0x8>)
 800c0b6:	f000 bed1 	b.w	800ce5c <__retarget_lock_release_recursive>
 800c0ba:	bf00      	nop
 800c0bc:	24000be8 	.word	0x24000be8

0800c0c0 <__cvt>:
 800c0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0c2:	ed2d 8b02 	vpush	{d8}
 800c0c6:	eeb0 8b40 	vmov.f64	d8, d0
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	4617      	mov	r7, r2
 800c0ce:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c0d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c0d2:	ee18 2a90 	vmov	r2, s17
 800c0d6:	f025 0520 	bic.w	r5, r5, #32
 800c0da:	2a00      	cmp	r2, #0
 800c0dc:	bfb6      	itet	lt
 800c0de:	222d      	movlt	r2, #45	@ 0x2d
 800c0e0:	2200      	movge	r2, #0
 800c0e2:	eeb1 8b40 	vneglt.f64	d8, d0
 800c0e6:	2d46      	cmp	r5, #70	@ 0x46
 800c0e8:	460c      	mov	r4, r1
 800c0ea:	701a      	strb	r2, [r3, #0]
 800c0ec:	d004      	beq.n	800c0f8 <__cvt+0x38>
 800c0ee:	2d45      	cmp	r5, #69	@ 0x45
 800c0f0:	d100      	bne.n	800c0f4 <__cvt+0x34>
 800c0f2:	3401      	adds	r4, #1
 800c0f4:	2102      	movs	r1, #2
 800c0f6:	e000      	b.n	800c0fa <__cvt+0x3a>
 800c0f8:	2103      	movs	r1, #3
 800c0fa:	ab03      	add	r3, sp, #12
 800c0fc:	9301      	str	r3, [sp, #4]
 800c0fe:	ab02      	add	r3, sp, #8
 800c100:	9300      	str	r3, [sp, #0]
 800c102:	4622      	mov	r2, r4
 800c104:	4633      	mov	r3, r6
 800c106:	eeb0 0b48 	vmov.f64	d0, d8
 800c10a:	f000 ff41 	bl	800cf90 <_dtoa_r>
 800c10e:	2d47      	cmp	r5, #71	@ 0x47
 800c110:	d114      	bne.n	800c13c <__cvt+0x7c>
 800c112:	07fb      	lsls	r3, r7, #31
 800c114:	d50a      	bpl.n	800c12c <__cvt+0x6c>
 800c116:	1902      	adds	r2, r0, r4
 800c118:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c120:	bf08      	it	eq
 800c122:	9203      	streq	r2, [sp, #12]
 800c124:	2130      	movs	r1, #48	@ 0x30
 800c126:	9b03      	ldr	r3, [sp, #12]
 800c128:	4293      	cmp	r3, r2
 800c12a:	d319      	bcc.n	800c160 <__cvt+0xa0>
 800c12c:	9b03      	ldr	r3, [sp, #12]
 800c12e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c130:	1a1b      	subs	r3, r3, r0
 800c132:	6013      	str	r3, [r2, #0]
 800c134:	b005      	add	sp, #20
 800c136:	ecbd 8b02 	vpop	{d8}
 800c13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c13c:	2d46      	cmp	r5, #70	@ 0x46
 800c13e:	eb00 0204 	add.w	r2, r0, r4
 800c142:	d1e9      	bne.n	800c118 <__cvt+0x58>
 800c144:	7803      	ldrb	r3, [r0, #0]
 800c146:	2b30      	cmp	r3, #48	@ 0x30
 800c148:	d107      	bne.n	800c15a <__cvt+0x9a>
 800c14a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c152:	bf1c      	itt	ne
 800c154:	f1c4 0401 	rsbne	r4, r4, #1
 800c158:	6034      	strne	r4, [r6, #0]
 800c15a:	6833      	ldr	r3, [r6, #0]
 800c15c:	441a      	add	r2, r3
 800c15e:	e7db      	b.n	800c118 <__cvt+0x58>
 800c160:	1c5c      	adds	r4, r3, #1
 800c162:	9403      	str	r4, [sp, #12]
 800c164:	7019      	strb	r1, [r3, #0]
 800c166:	e7de      	b.n	800c126 <__cvt+0x66>

0800c168 <__exponent>:
 800c168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c16a:	2900      	cmp	r1, #0
 800c16c:	bfba      	itte	lt
 800c16e:	4249      	neglt	r1, r1
 800c170:	232d      	movlt	r3, #45	@ 0x2d
 800c172:	232b      	movge	r3, #43	@ 0x2b
 800c174:	2909      	cmp	r1, #9
 800c176:	7002      	strb	r2, [r0, #0]
 800c178:	7043      	strb	r3, [r0, #1]
 800c17a:	dd29      	ble.n	800c1d0 <__exponent+0x68>
 800c17c:	f10d 0307 	add.w	r3, sp, #7
 800c180:	461d      	mov	r5, r3
 800c182:	270a      	movs	r7, #10
 800c184:	461a      	mov	r2, r3
 800c186:	fbb1 f6f7 	udiv	r6, r1, r7
 800c18a:	fb07 1416 	mls	r4, r7, r6, r1
 800c18e:	3430      	adds	r4, #48	@ 0x30
 800c190:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c194:	460c      	mov	r4, r1
 800c196:	2c63      	cmp	r4, #99	@ 0x63
 800c198:	f103 33ff 	add.w	r3, r3, #4294967295
 800c19c:	4631      	mov	r1, r6
 800c19e:	dcf1      	bgt.n	800c184 <__exponent+0x1c>
 800c1a0:	3130      	adds	r1, #48	@ 0x30
 800c1a2:	1e94      	subs	r4, r2, #2
 800c1a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c1a8:	1c41      	adds	r1, r0, #1
 800c1aa:	4623      	mov	r3, r4
 800c1ac:	42ab      	cmp	r3, r5
 800c1ae:	d30a      	bcc.n	800c1c6 <__exponent+0x5e>
 800c1b0:	f10d 0309 	add.w	r3, sp, #9
 800c1b4:	1a9b      	subs	r3, r3, r2
 800c1b6:	42ac      	cmp	r4, r5
 800c1b8:	bf88      	it	hi
 800c1ba:	2300      	movhi	r3, #0
 800c1bc:	3302      	adds	r3, #2
 800c1be:	4403      	add	r3, r0
 800c1c0:	1a18      	subs	r0, r3, r0
 800c1c2:	b003      	add	sp, #12
 800c1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1c6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c1ca:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c1ce:	e7ed      	b.n	800c1ac <__exponent+0x44>
 800c1d0:	2330      	movs	r3, #48	@ 0x30
 800c1d2:	3130      	adds	r1, #48	@ 0x30
 800c1d4:	7083      	strb	r3, [r0, #2]
 800c1d6:	70c1      	strb	r1, [r0, #3]
 800c1d8:	1d03      	adds	r3, r0, #4
 800c1da:	e7f1      	b.n	800c1c0 <__exponent+0x58>
 800c1dc:	0000      	movs	r0, r0
	...

0800c1e0 <_printf_float>:
 800c1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e4:	b08d      	sub	sp, #52	@ 0x34
 800c1e6:	460c      	mov	r4, r1
 800c1e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c1ec:	4616      	mov	r6, r2
 800c1ee:	461f      	mov	r7, r3
 800c1f0:	4605      	mov	r5, r0
 800c1f2:	f000 fdad 	bl	800cd50 <_localeconv_r>
 800c1f6:	f8d0 b000 	ldr.w	fp, [r0]
 800c1fa:	4658      	mov	r0, fp
 800c1fc:	f7f4 f8c8 	bl	8000390 <strlen>
 800c200:	2300      	movs	r3, #0
 800c202:	930a      	str	r3, [sp, #40]	@ 0x28
 800c204:	f8d8 3000 	ldr.w	r3, [r8]
 800c208:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c20c:	6822      	ldr	r2, [r4, #0]
 800c20e:	9005      	str	r0, [sp, #20]
 800c210:	3307      	adds	r3, #7
 800c212:	f023 0307 	bic.w	r3, r3, #7
 800c216:	f103 0108 	add.w	r1, r3, #8
 800c21a:	f8c8 1000 	str.w	r1, [r8]
 800c21e:	ed93 0b00 	vldr	d0, [r3]
 800c222:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c480 <_printf_float+0x2a0>
 800c226:	eeb0 7bc0 	vabs.f64	d7, d0
 800c22a:	eeb4 7b46 	vcmp.f64	d7, d6
 800c22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c232:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800c236:	dd24      	ble.n	800c282 <_printf_float+0xa2>
 800c238:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c240:	d502      	bpl.n	800c248 <_printf_float+0x68>
 800c242:	232d      	movs	r3, #45	@ 0x2d
 800c244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c248:	498f      	ldr	r1, [pc, #572]	@ (800c488 <_printf_float+0x2a8>)
 800c24a:	4b90      	ldr	r3, [pc, #576]	@ (800c48c <_printf_float+0x2ac>)
 800c24c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800c250:	bf8c      	ite	hi
 800c252:	4688      	movhi	r8, r1
 800c254:	4698      	movls	r8, r3
 800c256:	f022 0204 	bic.w	r2, r2, #4
 800c25a:	2303      	movs	r3, #3
 800c25c:	6123      	str	r3, [r4, #16]
 800c25e:	6022      	str	r2, [r4, #0]
 800c260:	f04f 0a00 	mov.w	sl, #0
 800c264:	9700      	str	r7, [sp, #0]
 800c266:	4633      	mov	r3, r6
 800c268:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c26a:	4621      	mov	r1, r4
 800c26c:	4628      	mov	r0, r5
 800c26e:	f000 f9d1 	bl	800c614 <_printf_common>
 800c272:	3001      	adds	r0, #1
 800c274:	f040 8089 	bne.w	800c38a <_printf_float+0x1aa>
 800c278:	f04f 30ff 	mov.w	r0, #4294967295
 800c27c:	b00d      	add	sp, #52	@ 0x34
 800c27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c282:	eeb4 0b40 	vcmp.f64	d0, d0
 800c286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c28a:	d709      	bvc.n	800c2a0 <_printf_float+0xc0>
 800c28c:	ee10 3a90 	vmov	r3, s1
 800c290:	2b00      	cmp	r3, #0
 800c292:	bfbc      	itt	lt
 800c294:	232d      	movlt	r3, #45	@ 0x2d
 800c296:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c29a:	497d      	ldr	r1, [pc, #500]	@ (800c490 <_printf_float+0x2b0>)
 800c29c:	4b7d      	ldr	r3, [pc, #500]	@ (800c494 <_printf_float+0x2b4>)
 800c29e:	e7d5      	b.n	800c24c <_printf_float+0x6c>
 800c2a0:	6863      	ldr	r3, [r4, #4]
 800c2a2:	1c59      	adds	r1, r3, #1
 800c2a4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800c2a8:	d139      	bne.n	800c31e <_printf_float+0x13e>
 800c2aa:	2306      	movs	r3, #6
 800c2ac:	6063      	str	r3, [r4, #4]
 800c2ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	6022      	str	r2, [r4, #0]
 800c2b6:	9303      	str	r3, [sp, #12]
 800c2b8:	ab0a      	add	r3, sp, #40	@ 0x28
 800c2ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c2be:	ab09      	add	r3, sp, #36	@ 0x24
 800c2c0:	9300      	str	r3, [sp, #0]
 800c2c2:	6861      	ldr	r1, [r4, #4]
 800c2c4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	f7ff fef9 	bl	800c0c0 <__cvt>
 800c2ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c2d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c2d4:	4680      	mov	r8, r0
 800c2d6:	d129      	bne.n	800c32c <_printf_float+0x14c>
 800c2d8:	1cc8      	adds	r0, r1, #3
 800c2da:	db02      	blt.n	800c2e2 <_printf_float+0x102>
 800c2dc:	6863      	ldr	r3, [r4, #4]
 800c2de:	4299      	cmp	r1, r3
 800c2e0:	dd41      	ble.n	800c366 <_printf_float+0x186>
 800c2e2:	f1a9 0902 	sub.w	r9, r9, #2
 800c2e6:	fa5f f989 	uxtb.w	r9, r9
 800c2ea:	3901      	subs	r1, #1
 800c2ec:	464a      	mov	r2, r9
 800c2ee:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c2f2:	9109      	str	r1, [sp, #36]	@ 0x24
 800c2f4:	f7ff ff38 	bl	800c168 <__exponent>
 800c2f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c2fa:	1813      	adds	r3, r2, r0
 800c2fc:	2a01      	cmp	r2, #1
 800c2fe:	4682      	mov	sl, r0
 800c300:	6123      	str	r3, [r4, #16]
 800c302:	dc02      	bgt.n	800c30a <_printf_float+0x12a>
 800c304:	6822      	ldr	r2, [r4, #0]
 800c306:	07d2      	lsls	r2, r2, #31
 800c308:	d501      	bpl.n	800c30e <_printf_float+0x12e>
 800c30a:	3301      	adds	r3, #1
 800c30c:	6123      	str	r3, [r4, #16]
 800c30e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c312:	2b00      	cmp	r3, #0
 800c314:	d0a6      	beq.n	800c264 <_printf_float+0x84>
 800c316:	232d      	movs	r3, #45	@ 0x2d
 800c318:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c31c:	e7a2      	b.n	800c264 <_printf_float+0x84>
 800c31e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c322:	d1c4      	bne.n	800c2ae <_printf_float+0xce>
 800c324:	2b00      	cmp	r3, #0
 800c326:	d1c2      	bne.n	800c2ae <_printf_float+0xce>
 800c328:	2301      	movs	r3, #1
 800c32a:	e7bf      	b.n	800c2ac <_printf_float+0xcc>
 800c32c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c330:	d9db      	bls.n	800c2ea <_printf_float+0x10a>
 800c332:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800c336:	d118      	bne.n	800c36a <_printf_float+0x18a>
 800c338:	2900      	cmp	r1, #0
 800c33a:	6863      	ldr	r3, [r4, #4]
 800c33c:	dd0b      	ble.n	800c356 <_printf_float+0x176>
 800c33e:	6121      	str	r1, [r4, #16]
 800c340:	b913      	cbnz	r3, 800c348 <_printf_float+0x168>
 800c342:	6822      	ldr	r2, [r4, #0]
 800c344:	07d0      	lsls	r0, r2, #31
 800c346:	d502      	bpl.n	800c34e <_printf_float+0x16e>
 800c348:	3301      	adds	r3, #1
 800c34a:	440b      	add	r3, r1
 800c34c:	6123      	str	r3, [r4, #16]
 800c34e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c350:	f04f 0a00 	mov.w	sl, #0
 800c354:	e7db      	b.n	800c30e <_printf_float+0x12e>
 800c356:	b913      	cbnz	r3, 800c35e <_printf_float+0x17e>
 800c358:	6822      	ldr	r2, [r4, #0]
 800c35a:	07d2      	lsls	r2, r2, #31
 800c35c:	d501      	bpl.n	800c362 <_printf_float+0x182>
 800c35e:	3302      	adds	r3, #2
 800c360:	e7f4      	b.n	800c34c <_printf_float+0x16c>
 800c362:	2301      	movs	r3, #1
 800c364:	e7f2      	b.n	800c34c <_printf_float+0x16c>
 800c366:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800c36a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c36c:	4299      	cmp	r1, r3
 800c36e:	db05      	blt.n	800c37c <_printf_float+0x19c>
 800c370:	6823      	ldr	r3, [r4, #0]
 800c372:	6121      	str	r1, [r4, #16]
 800c374:	07d8      	lsls	r0, r3, #31
 800c376:	d5ea      	bpl.n	800c34e <_printf_float+0x16e>
 800c378:	1c4b      	adds	r3, r1, #1
 800c37a:	e7e7      	b.n	800c34c <_printf_float+0x16c>
 800c37c:	2900      	cmp	r1, #0
 800c37e:	bfd4      	ite	le
 800c380:	f1c1 0202 	rsble	r2, r1, #2
 800c384:	2201      	movgt	r2, #1
 800c386:	4413      	add	r3, r2
 800c388:	e7e0      	b.n	800c34c <_printf_float+0x16c>
 800c38a:	6823      	ldr	r3, [r4, #0]
 800c38c:	055a      	lsls	r2, r3, #21
 800c38e:	d407      	bmi.n	800c3a0 <_printf_float+0x1c0>
 800c390:	6923      	ldr	r3, [r4, #16]
 800c392:	4642      	mov	r2, r8
 800c394:	4631      	mov	r1, r6
 800c396:	4628      	mov	r0, r5
 800c398:	47b8      	blx	r7
 800c39a:	3001      	adds	r0, #1
 800c39c:	d12a      	bne.n	800c3f4 <_printf_float+0x214>
 800c39e:	e76b      	b.n	800c278 <_printf_float+0x98>
 800c3a0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c3a4:	f240 80e0 	bls.w	800c568 <_printf_float+0x388>
 800c3a8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c3ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3b4:	d133      	bne.n	800c41e <_printf_float+0x23e>
 800c3b6:	4a38      	ldr	r2, [pc, #224]	@ (800c498 <_printf_float+0x2b8>)
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	4631      	mov	r1, r6
 800c3bc:	4628      	mov	r0, r5
 800c3be:	47b8      	blx	r7
 800c3c0:	3001      	adds	r0, #1
 800c3c2:	f43f af59 	beq.w	800c278 <_printf_float+0x98>
 800c3c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c3ca:	4543      	cmp	r3, r8
 800c3cc:	db02      	blt.n	800c3d4 <_printf_float+0x1f4>
 800c3ce:	6823      	ldr	r3, [r4, #0]
 800c3d0:	07d8      	lsls	r0, r3, #31
 800c3d2:	d50f      	bpl.n	800c3f4 <_printf_float+0x214>
 800c3d4:	9b05      	ldr	r3, [sp, #20]
 800c3d6:	465a      	mov	r2, fp
 800c3d8:	4631      	mov	r1, r6
 800c3da:	4628      	mov	r0, r5
 800c3dc:	47b8      	blx	r7
 800c3de:	3001      	adds	r0, #1
 800c3e0:	f43f af4a 	beq.w	800c278 <_printf_float+0x98>
 800c3e4:	f04f 0900 	mov.w	r9, #0
 800c3e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800c3ec:	f104 0a1a 	add.w	sl, r4, #26
 800c3f0:	45c8      	cmp	r8, r9
 800c3f2:	dc09      	bgt.n	800c408 <_printf_float+0x228>
 800c3f4:	6823      	ldr	r3, [r4, #0]
 800c3f6:	079b      	lsls	r3, r3, #30
 800c3f8:	f100 8107 	bmi.w	800c60a <_printf_float+0x42a>
 800c3fc:	68e0      	ldr	r0, [r4, #12]
 800c3fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c400:	4298      	cmp	r0, r3
 800c402:	bfb8      	it	lt
 800c404:	4618      	movlt	r0, r3
 800c406:	e739      	b.n	800c27c <_printf_float+0x9c>
 800c408:	2301      	movs	r3, #1
 800c40a:	4652      	mov	r2, sl
 800c40c:	4631      	mov	r1, r6
 800c40e:	4628      	mov	r0, r5
 800c410:	47b8      	blx	r7
 800c412:	3001      	adds	r0, #1
 800c414:	f43f af30 	beq.w	800c278 <_printf_float+0x98>
 800c418:	f109 0901 	add.w	r9, r9, #1
 800c41c:	e7e8      	b.n	800c3f0 <_printf_float+0x210>
 800c41e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c420:	2b00      	cmp	r3, #0
 800c422:	dc3b      	bgt.n	800c49c <_printf_float+0x2bc>
 800c424:	4a1c      	ldr	r2, [pc, #112]	@ (800c498 <_printf_float+0x2b8>)
 800c426:	2301      	movs	r3, #1
 800c428:	4631      	mov	r1, r6
 800c42a:	4628      	mov	r0, r5
 800c42c:	47b8      	blx	r7
 800c42e:	3001      	adds	r0, #1
 800c430:	f43f af22 	beq.w	800c278 <_printf_float+0x98>
 800c434:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c438:	ea59 0303 	orrs.w	r3, r9, r3
 800c43c:	d102      	bne.n	800c444 <_printf_float+0x264>
 800c43e:	6823      	ldr	r3, [r4, #0]
 800c440:	07d9      	lsls	r1, r3, #31
 800c442:	d5d7      	bpl.n	800c3f4 <_printf_float+0x214>
 800c444:	9b05      	ldr	r3, [sp, #20]
 800c446:	465a      	mov	r2, fp
 800c448:	4631      	mov	r1, r6
 800c44a:	4628      	mov	r0, r5
 800c44c:	47b8      	blx	r7
 800c44e:	3001      	adds	r0, #1
 800c450:	f43f af12 	beq.w	800c278 <_printf_float+0x98>
 800c454:	f04f 0a00 	mov.w	sl, #0
 800c458:	f104 0b1a 	add.w	fp, r4, #26
 800c45c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c45e:	425b      	negs	r3, r3
 800c460:	4553      	cmp	r3, sl
 800c462:	dc01      	bgt.n	800c468 <_printf_float+0x288>
 800c464:	464b      	mov	r3, r9
 800c466:	e794      	b.n	800c392 <_printf_float+0x1b2>
 800c468:	2301      	movs	r3, #1
 800c46a:	465a      	mov	r2, fp
 800c46c:	4631      	mov	r1, r6
 800c46e:	4628      	mov	r0, r5
 800c470:	47b8      	blx	r7
 800c472:	3001      	adds	r0, #1
 800c474:	f43f af00 	beq.w	800c278 <_printf_float+0x98>
 800c478:	f10a 0a01 	add.w	sl, sl, #1
 800c47c:	e7ee      	b.n	800c45c <_printf_float+0x27c>
 800c47e:	bf00      	nop
 800c480:	ffffffff 	.word	0xffffffff
 800c484:	7fefffff 	.word	0x7fefffff
 800c488:	0800e8bc 	.word	0x0800e8bc
 800c48c:	0800e8b8 	.word	0x0800e8b8
 800c490:	0800e8c4 	.word	0x0800e8c4
 800c494:	0800e8c0 	.word	0x0800e8c0
 800c498:	0800e8c8 	.word	0x0800e8c8
 800c49c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c49e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c4a2:	4553      	cmp	r3, sl
 800c4a4:	bfa8      	it	ge
 800c4a6:	4653      	movge	r3, sl
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	4699      	mov	r9, r3
 800c4ac:	dc37      	bgt.n	800c51e <_printf_float+0x33e>
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	9307      	str	r3, [sp, #28]
 800c4b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4b6:	f104 021a 	add.w	r2, r4, #26
 800c4ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c4bc:	9907      	ldr	r1, [sp, #28]
 800c4be:	9306      	str	r3, [sp, #24]
 800c4c0:	eba3 0309 	sub.w	r3, r3, r9
 800c4c4:	428b      	cmp	r3, r1
 800c4c6:	dc31      	bgt.n	800c52c <_printf_float+0x34c>
 800c4c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4ca:	459a      	cmp	sl, r3
 800c4cc:	dc3b      	bgt.n	800c546 <_printf_float+0x366>
 800c4ce:	6823      	ldr	r3, [r4, #0]
 800c4d0:	07da      	lsls	r2, r3, #31
 800c4d2:	d438      	bmi.n	800c546 <_printf_float+0x366>
 800c4d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4d6:	ebaa 0903 	sub.w	r9, sl, r3
 800c4da:	9b06      	ldr	r3, [sp, #24]
 800c4dc:	ebaa 0303 	sub.w	r3, sl, r3
 800c4e0:	4599      	cmp	r9, r3
 800c4e2:	bfa8      	it	ge
 800c4e4:	4699      	movge	r9, r3
 800c4e6:	f1b9 0f00 	cmp.w	r9, #0
 800c4ea:	dc34      	bgt.n	800c556 <_printf_float+0x376>
 800c4ec:	f04f 0800 	mov.w	r8, #0
 800c4f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4f4:	f104 0b1a 	add.w	fp, r4, #26
 800c4f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4fa:	ebaa 0303 	sub.w	r3, sl, r3
 800c4fe:	eba3 0309 	sub.w	r3, r3, r9
 800c502:	4543      	cmp	r3, r8
 800c504:	f77f af76 	ble.w	800c3f4 <_printf_float+0x214>
 800c508:	2301      	movs	r3, #1
 800c50a:	465a      	mov	r2, fp
 800c50c:	4631      	mov	r1, r6
 800c50e:	4628      	mov	r0, r5
 800c510:	47b8      	blx	r7
 800c512:	3001      	adds	r0, #1
 800c514:	f43f aeb0 	beq.w	800c278 <_printf_float+0x98>
 800c518:	f108 0801 	add.w	r8, r8, #1
 800c51c:	e7ec      	b.n	800c4f8 <_printf_float+0x318>
 800c51e:	4642      	mov	r2, r8
 800c520:	4631      	mov	r1, r6
 800c522:	4628      	mov	r0, r5
 800c524:	47b8      	blx	r7
 800c526:	3001      	adds	r0, #1
 800c528:	d1c1      	bne.n	800c4ae <_printf_float+0x2ce>
 800c52a:	e6a5      	b.n	800c278 <_printf_float+0x98>
 800c52c:	2301      	movs	r3, #1
 800c52e:	4631      	mov	r1, r6
 800c530:	4628      	mov	r0, r5
 800c532:	9206      	str	r2, [sp, #24]
 800c534:	47b8      	blx	r7
 800c536:	3001      	adds	r0, #1
 800c538:	f43f ae9e 	beq.w	800c278 <_printf_float+0x98>
 800c53c:	9b07      	ldr	r3, [sp, #28]
 800c53e:	9a06      	ldr	r2, [sp, #24]
 800c540:	3301      	adds	r3, #1
 800c542:	9307      	str	r3, [sp, #28]
 800c544:	e7b9      	b.n	800c4ba <_printf_float+0x2da>
 800c546:	9b05      	ldr	r3, [sp, #20]
 800c548:	465a      	mov	r2, fp
 800c54a:	4631      	mov	r1, r6
 800c54c:	4628      	mov	r0, r5
 800c54e:	47b8      	blx	r7
 800c550:	3001      	adds	r0, #1
 800c552:	d1bf      	bne.n	800c4d4 <_printf_float+0x2f4>
 800c554:	e690      	b.n	800c278 <_printf_float+0x98>
 800c556:	9a06      	ldr	r2, [sp, #24]
 800c558:	464b      	mov	r3, r9
 800c55a:	4442      	add	r2, r8
 800c55c:	4631      	mov	r1, r6
 800c55e:	4628      	mov	r0, r5
 800c560:	47b8      	blx	r7
 800c562:	3001      	adds	r0, #1
 800c564:	d1c2      	bne.n	800c4ec <_printf_float+0x30c>
 800c566:	e687      	b.n	800c278 <_printf_float+0x98>
 800c568:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c56c:	f1b9 0f01 	cmp.w	r9, #1
 800c570:	dc01      	bgt.n	800c576 <_printf_float+0x396>
 800c572:	07db      	lsls	r3, r3, #31
 800c574:	d536      	bpl.n	800c5e4 <_printf_float+0x404>
 800c576:	2301      	movs	r3, #1
 800c578:	4642      	mov	r2, r8
 800c57a:	4631      	mov	r1, r6
 800c57c:	4628      	mov	r0, r5
 800c57e:	47b8      	blx	r7
 800c580:	3001      	adds	r0, #1
 800c582:	f43f ae79 	beq.w	800c278 <_printf_float+0x98>
 800c586:	9b05      	ldr	r3, [sp, #20]
 800c588:	465a      	mov	r2, fp
 800c58a:	4631      	mov	r1, r6
 800c58c:	4628      	mov	r0, r5
 800c58e:	47b8      	blx	r7
 800c590:	3001      	adds	r0, #1
 800c592:	f43f ae71 	beq.w	800c278 <_printf_float+0x98>
 800c596:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c59a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5a2:	f109 39ff 	add.w	r9, r9, #4294967295
 800c5a6:	d018      	beq.n	800c5da <_printf_float+0x3fa>
 800c5a8:	464b      	mov	r3, r9
 800c5aa:	f108 0201 	add.w	r2, r8, #1
 800c5ae:	4631      	mov	r1, r6
 800c5b0:	4628      	mov	r0, r5
 800c5b2:	47b8      	blx	r7
 800c5b4:	3001      	adds	r0, #1
 800c5b6:	d10c      	bne.n	800c5d2 <_printf_float+0x3f2>
 800c5b8:	e65e      	b.n	800c278 <_printf_float+0x98>
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	465a      	mov	r2, fp
 800c5be:	4631      	mov	r1, r6
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	47b8      	blx	r7
 800c5c4:	3001      	adds	r0, #1
 800c5c6:	f43f ae57 	beq.w	800c278 <_printf_float+0x98>
 800c5ca:	f108 0801 	add.w	r8, r8, #1
 800c5ce:	45c8      	cmp	r8, r9
 800c5d0:	dbf3      	blt.n	800c5ba <_printf_float+0x3da>
 800c5d2:	4653      	mov	r3, sl
 800c5d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c5d8:	e6dc      	b.n	800c394 <_printf_float+0x1b4>
 800c5da:	f04f 0800 	mov.w	r8, #0
 800c5de:	f104 0b1a 	add.w	fp, r4, #26
 800c5e2:	e7f4      	b.n	800c5ce <_printf_float+0x3ee>
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	4642      	mov	r2, r8
 800c5e8:	e7e1      	b.n	800c5ae <_printf_float+0x3ce>
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	464a      	mov	r2, r9
 800c5ee:	4631      	mov	r1, r6
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	47b8      	blx	r7
 800c5f4:	3001      	adds	r0, #1
 800c5f6:	f43f ae3f 	beq.w	800c278 <_printf_float+0x98>
 800c5fa:	f108 0801 	add.w	r8, r8, #1
 800c5fe:	68e3      	ldr	r3, [r4, #12]
 800c600:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c602:	1a5b      	subs	r3, r3, r1
 800c604:	4543      	cmp	r3, r8
 800c606:	dcf0      	bgt.n	800c5ea <_printf_float+0x40a>
 800c608:	e6f8      	b.n	800c3fc <_printf_float+0x21c>
 800c60a:	f04f 0800 	mov.w	r8, #0
 800c60e:	f104 0919 	add.w	r9, r4, #25
 800c612:	e7f4      	b.n	800c5fe <_printf_float+0x41e>

0800c614 <_printf_common>:
 800c614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c618:	4616      	mov	r6, r2
 800c61a:	4698      	mov	r8, r3
 800c61c:	688a      	ldr	r2, [r1, #8]
 800c61e:	690b      	ldr	r3, [r1, #16]
 800c620:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c624:	4293      	cmp	r3, r2
 800c626:	bfb8      	it	lt
 800c628:	4613      	movlt	r3, r2
 800c62a:	6033      	str	r3, [r6, #0]
 800c62c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c630:	4607      	mov	r7, r0
 800c632:	460c      	mov	r4, r1
 800c634:	b10a      	cbz	r2, 800c63a <_printf_common+0x26>
 800c636:	3301      	adds	r3, #1
 800c638:	6033      	str	r3, [r6, #0]
 800c63a:	6823      	ldr	r3, [r4, #0]
 800c63c:	0699      	lsls	r1, r3, #26
 800c63e:	bf42      	ittt	mi
 800c640:	6833      	ldrmi	r3, [r6, #0]
 800c642:	3302      	addmi	r3, #2
 800c644:	6033      	strmi	r3, [r6, #0]
 800c646:	6825      	ldr	r5, [r4, #0]
 800c648:	f015 0506 	ands.w	r5, r5, #6
 800c64c:	d106      	bne.n	800c65c <_printf_common+0x48>
 800c64e:	f104 0a19 	add.w	sl, r4, #25
 800c652:	68e3      	ldr	r3, [r4, #12]
 800c654:	6832      	ldr	r2, [r6, #0]
 800c656:	1a9b      	subs	r3, r3, r2
 800c658:	42ab      	cmp	r3, r5
 800c65a:	dc26      	bgt.n	800c6aa <_printf_common+0x96>
 800c65c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c660:	6822      	ldr	r2, [r4, #0]
 800c662:	3b00      	subs	r3, #0
 800c664:	bf18      	it	ne
 800c666:	2301      	movne	r3, #1
 800c668:	0692      	lsls	r2, r2, #26
 800c66a:	d42b      	bmi.n	800c6c4 <_printf_common+0xb0>
 800c66c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c670:	4641      	mov	r1, r8
 800c672:	4638      	mov	r0, r7
 800c674:	47c8      	blx	r9
 800c676:	3001      	adds	r0, #1
 800c678:	d01e      	beq.n	800c6b8 <_printf_common+0xa4>
 800c67a:	6823      	ldr	r3, [r4, #0]
 800c67c:	6922      	ldr	r2, [r4, #16]
 800c67e:	f003 0306 	and.w	r3, r3, #6
 800c682:	2b04      	cmp	r3, #4
 800c684:	bf02      	ittt	eq
 800c686:	68e5      	ldreq	r5, [r4, #12]
 800c688:	6833      	ldreq	r3, [r6, #0]
 800c68a:	1aed      	subeq	r5, r5, r3
 800c68c:	68a3      	ldr	r3, [r4, #8]
 800c68e:	bf0c      	ite	eq
 800c690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c694:	2500      	movne	r5, #0
 800c696:	4293      	cmp	r3, r2
 800c698:	bfc4      	itt	gt
 800c69a:	1a9b      	subgt	r3, r3, r2
 800c69c:	18ed      	addgt	r5, r5, r3
 800c69e:	2600      	movs	r6, #0
 800c6a0:	341a      	adds	r4, #26
 800c6a2:	42b5      	cmp	r5, r6
 800c6a4:	d11a      	bne.n	800c6dc <_printf_common+0xc8>
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	e008      	b.n	800c6bc <_printf_common+0xa8>
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	4652      	mov	r2, sl
 800c6ae:	4641      	mov	r1, r8
 800c6b0:	4638      	mov	r0, r7
 800c6b2:	47c8      	blx	r9
 800c6b4:	3001      	adds	r0, #1
 800c6b6:	d103      	bne.n	800c6c0 <_printf_common+0xac>
 800c6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6c0:	3501      	adds	r5, #1
 800c6c2:	e7c6      	b.n	800c652 <_printf_common+0x3e>
 800c6c4:	18e1      	adds	r1, r4, r3
 800c6c6:	1c5a      	adds	r2, r3, #1
 800c6c8:	2030      	movs	r0, #48	@ 0x30
 800c6ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c6ce:	4422      	add	r2, r4
 800c6d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c6d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c6d8:	3302      	adds	r3, #2
 800c6da:	e7c7      	b.n	800c66c <_printf_common+0x58>
 800c6dc:	2301      	movs	r3, #1
 800c6de:	4622      	mov	r2, r4
 800c6e0:	4641      	mov	r1, r8
 800c6e2:	4638      	mov	r0, r7
 800c6e4:	47c8      	blx	r9
 800c6e6:	3001      	adds	r0, #1
 800c6e8:	d0e6      	beq.n	800c6b8 <_printf_common+0xa4>
 800c6ea:	3601      	adds	r6, #1
 800c6ec:	e7d9      	b.n	800c6a2 <_printf_common+0x8e>
	...

0800c6f0 <_printf_i>:
 800c6f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6f4:	7e0f      	ldrb	r7, [r1, #24]
 800c6f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c6f8:	2f78      	cmp	r7, #120	@ 0x78
 800c6fa:	4691      	mov	r9, r2
 800c6fc:	4680      	mov	r8, r0
 800c6fe:	460c      	mov	r4, r1
 800c700:	469a      	mov	sl, r3
 800c702:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c706:	d807      	bhi.n	800c718 <_printf_i+0x28>
 800c708:	2f62      	cmp	r7, #98	@ 0x62
 800c70a:	d80a      	bhi.n	800c722 <_printf_i+0x32>
 800c70c:	2f00      	cmp	r7, #0
 800c70e:	f000 80d1 	beq.w	800c8b4 <_printf_i+0x1c4>
 800c712:	2f58      	cmp	r7, #88	@ 0x58
 800c714:	f000 80b8 	beq.w	800c888 <_printf_i+0x198>
 800c718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c71c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c720:	e03a      	b.n	800c798 <_printf_i+0xa8>
 800c722:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c726:	2b15      	cmp	r3, #21
 800c728:	d8f6      	bhi.n	800c718 <_printf_i+0x28>
 800c72a:	a101      	add	r1, pc, #4	@ (adr r1, 800c730 <_printf_i+0x40>)
 800c72c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c730:	0800c789 	.word	0x0800c789
 800c734:	0800c79d 	.word	0x0800c79d
 800c738:	0800c719 	.word	0x0800c719
 800c73c:	0800c719 	.word	0x0800c719
 800c740:	0800c719 	.word	0x0800c719
 800c744:	0800c719 	.word	0x0800c719
 800c748:	0800c79d 	.word	0x0800c79d
 800c74c:	0800c719 	.word	0x0800c719
 800c750:	0800c719 	.word	0x0800c719
 800c754:	0800c719 	.word	0x0800c719
 800c758:	0800c719 	.word	0x0800c719
 800c75c:	0800c89b 	.word	0x0800c89b
 800c760:	0800c7c7 	.word	0x0800c7c7
 800c764:	0800c855 	.word	0x0800c855
 800c768:	0800c719 	.word	0x0800c719
 800c76c:	0800c719 	.word	0x0800c719
 800c770:	0800c8bd 	.word	0x0800c8bd
 800c774:	0800c719 	.word	0x0800c719
 800c778:	0800c7c7 	.word	0x0800c7c7
 800c77c:	0800c719 	.word	0x0800c719
 800c780:	0800c719 	.word	0x0800c719
 800c784:	0800c85d 	.word	0x0800c85d
 800c788:	6833      	ldr	r3, [r6, #0]
 800c78a:	1d1a      	adds	r2, r3, #4
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	6032      	str	r2, [r6, #0]
 800c790:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c794:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c798:	2301      	movs	r3, #1
 800c79a:	e09c      	b.n	800c8d6 <_printf_i+0x1e6>
 800c79c:	6833      	ldr	r3, [r6, #0]
 800c79e:	6820      	ldr	r0, [r4, #0]
 800c7a0:	1d19      	adds	r1, r3, #4
 800c7a2:	6031      	str	r1, [r6, #0]
 800c7a4:	0606      	lsls	r6, r0, #24
 800c7a6:	d501      	bpl.n	800c7ac <_printf_i+0xbc>
 800c7a8:	681d      	ldr	r5, [r3, #0]
 800c7aa:	e003      	b.n	800c7b4 <_printf_i+0xc4>
 800c7ac:	0645      	lsls	r5, r0, #25
 800c7ae:	d5fb      	bpl.n	800c7a8 <_printf_i+0xb8>
 800c7b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c7b4:	2d00      	cmp	r5, #0
 800c7b6:	da03      	bge.n	800c7c0 <_printf_i+0xd0>
 800c7b8:	232d      	movs	r3, #45	@ 0x2d
 800c7ba:	426d      	negs	r5, r5
 800c7bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7c0:	4858      	ldr	r0, [pc, #352]	@ (800c924 <_printf_i+0x234>)
 800c7c2:	230a      	movs	r3, #10
 800c7c4:	e011      	b.n	800c7ea <_printf_i+0xfa>
 800c7c6:	6821      	ldr	r1, [r4, #0]
 800c7c8:	6833      	ldr	r3, [r6, #0]
 800c7ca:	0608      	lsls	r0, r1, #24
 800c7cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800c7d0:	d402      	bmi.n	800c7d8 <_printf_i+0xe8>
 800c7d2:	0649      	lsls	r1, r1, #25
 800c7d4:	bf48      	it	mi
 800c7d6:	b2ad      	uxthmi	r5, r5
 800c7d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800c7da:	4852      	ldr	r0, [pc, #328]	@ (800c924 <_printf_i+0x234>)
 800c7dc:	6033      	str	r3, [r6, #0]
 800c7de:	bf14      	ite	ne
 800c7e0:	230a      	movne	r3, #10
 800c7e2:	2308      	moveq	r3, #8
 800c7e4:	2100      	movs	r1, #0
 800c7e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c7ea:	6866      	ldr	r6, [r4, #4]
 800c7ec:	60a6      	str	r6, [r4, #8]
 800c7ee:	2e00      	cmp	r6, #0
 800c7f0:	db05      	blt.n	800c7fe <_printf_i+0x10e>
 800c7f2:	6821      	ldr	r1, [r4, #0]
 800c7f4:	432e      	orrs	r6, r5
 800c7f6:	f021 0104 	bic.w	r1, r1, #4
 800c7fa:	6021      	str	r1, [r4, #0]
 800c7fc:	d04b      	beq.n	800c896 <_printf_i+0x1a6>
 800c7fe:	4616      	mov	r6, r2
 800c800:	fbb5 f1f3 	udiv	r1, r5, r3
 800c804:	fb03 5711 	mls	r7, r3, r1, r5
 800c808:	5dc7      	ldrb	r7, [r0, r7]
 800c80a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c80e:	462f      	mov	r7, r5
 800c810:	42bb      	cmp	r3, r7
 800c812:	460d      	mov	r5, r1
 800c814:	d9f4      	bls.n	800c800 <_printf_i+0x110>
 800c816:	2b08      	cmp	r3, #8
 800c818:	d10b      	bne.n	800c832 <_printf_i+0x142>
 800c81a:	6823      	ldr	r3, [r4, #0]
 800c81c:	07df      	lsls	r7, r3, #31
 800c81e:	d508      	bpl.n	800c832 <_printf_i+0x142>
 800c820:	6923      	ldr	r3, [r4, #16]
 800c822:	6861      	ldr	r1, [r4, #4]
 800c824:	4299      	cmp	r1, r3
 800c826:	bfde      	ittt	le
 800c828:	2330      	movle	r3, #48	@ 0x30
 800c82a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c82e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c832:	1b92      	subs	r2, r2, r6
 800c834:	6122      	str	r2, [r4, #16]
 800c836:	f8cd a000 	str.w	sl, [sp]
 800c83a:	464b      	mov	r3, r9
 800c83c:	aa03      	add	r2, sp, #12
 800c83e:	4621      	mov	r1, r4
 800c840:	4640      	mov	r0, r8
 800c842:	f7ff fee7 	bl	800c614 <_printf_common>
 800c846:	3001      	adds	r0, #1
 800c848:	d14a      	bne.n	800c8e0 <_printf_i+0x1f0>
 800c84a:	f04f 30ff 	mov.w	r0, #4294967295
 800c84e:	b004      	add	sp, #16
 800c850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c854:	6823      	ldr	r3, [r4, #0]
 800c856:	f043 0320 	orr.w	r3, r3, #32
 800c85a:	6023      	str	r3, [r4, #0]
 800c85c:	4832      	ldr	r0, [pc, #200]	@ (800c928 <_printf_i+0x238>)
 800c85e:	2778      	movs	r7, #120	@ 0x78
 800c860:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c864:	6823      	ldr	r3, [r4, #0]
 800c866:	6831      	ldr	r1, [r6, #0]
 800c868:	061f      	lsls	r7, r3, #24
 800c86a:	f851 5b04 	ldr.w	r5, [r1], #4
 800c86e:	d402      	bmi.n	800c876 <_printf_i+0x186>
 800c870:	065f      	lsls	r7, r3, #25
 800c872:	bf48      	it	mi
 800c874:	b2ad      	uxthmi	r5, r5
 800c876:	6031      	str	r1, [r6, #0]
 800c878:	07d9      	lsls	r1, r3, #31
 800c87a:	bf44      	itt	mi
 800c87c:	f043 0320 	orrmi.w	r3, r3, #32
 800c880:	6023      	strmi	r3, [r4, #0]
 800c882:	b11d      	cbz	r5, 800c88c <_printf_i+0x19c>
 800c884:	2310      	movs	r3, #16
 800c886:	e7ad      	b.n	800c7e4 <_printf_i+0xf4>
 800c888:	4826      	ldr	r0, [pc, #152]	@ (800c924 <_printf_i+0x234>)
 800c88a:	e7e9      	b.n	800c860 <_printf_i+0x170>
 800c88c:	6823      	ldr	r3, [r4, #0]
 800c88e:	f023 0320 	bic.w	r3, r3, #32
 800c892:	6023      	str	r3, [r4, #0]
 800c894:	e7f6      	b.n	800c884 <_printf_i+0x194>
 800c896:	4616      	mov	r6, r2
 800c898:	e7bd      	b.n	800c816 <_printf_i+0x126>
 800c89a:	6833      	ldr	r3, [r6, #0]
 800c89c:	6825      	ldr	r5, [r4, #0]
 800c89e:	6961      	ldr	r1, [r4, #20]
 800c8a0:	1d18      	adds	r0, r3, #4
 800c8a2:	6030      	str	r0, [r6, #0]
 800c8a4:	062e      	lsls	r6, r5, #24
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	d501      	bpl.n	800c8ae <_printf_i+0x1be>
 800c8aa:	6019      	str	r1, [r3, #0]
 800c8ac:	e002      	b.n	800c8b4 <_printf_i+0x1c4>
 800c8ae:	0668      	lsls	r0, r5, #25
 800c8b0:	d5fb      	bpl.n	800c8aa <_printf_i+0x1ba>
 800c8b2:	8019      	strh	r1, [r3, #0]
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	6123      	str	r3, [r4, #16]
 800c8b8:	4616      	mov	r6, r2
 800c8ba:	e7bc      	b.n	800c836 <_printf_i+0x146>
 800c8bc:	6833      	ldr	r3, [r6, #0]
 800c8be:	1d1a      	adds	r2, r3, #4
 800c8c0:	6032      	str	r2, [r6, #0]
 800c8c2:	681e      	ldr	r6, [r3, #0]
 800c8c4:	6862      	ldr	r2, [r4, #4]
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	4630      	mov	r0, r6
 800c8ca:	f7f3 fd11 	bl	80002f0 <memchr>
 800c8ce:	b108      	cbz	r0, 800c8d4 <_printf_i+0x1e4>
 800c8d0:	1b80      	subs	r0, r0, r6
 800c8d2:	6060      	str	r0, [r4, #4]
 800c8d4:	6863      	ldr	r3, [r4, #4]
 800c8d6:	6123      	str	r3, [r4, #16]
 800c8d8:	2300      	movs	r3, #0
 800c8da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8de:	e7aa      	b.n	800c836 <_printf_i+0x146>
 800c8e0:	6923      	ldr	r3, [r4, #16]
 800c8e2:	4632      	mov	r2, r6
 800c8e4:	4649      	mov	r1, r9
 800c8e6:	4640      	mov	r0, r8
 800c8e8:	47d0      	blx	sl
 800c8ea:	3001      	adds	r0, #1
 800c8ec:	d0ad      	beq.n	800c84a <_printf_i+0x15a>
 800c8ee:	6823      	ldr	r3, [r4, #0]
 800c8f0:	079b      	lsls	r3, r3, #30
 800c8f2:	d413      	bmi.n	800c91c <_printf_i+0x22c>
 800c8f4:	68e0      	ldr	r0, [r4, #12]
 800c8f6:	9b03      	ldr	r3, [sp, #12]
 800c8f8:	4298      	cmp	r0, r3
 800c8fa:	bfb8      	it	lt
 800c8fc:	4618      	movlt	r0, r3
 800c8fe:	e7a6      	b.n	800c84e <_printf_i+0x15e>
 800c900:	2301      	movs	r3, #1
 800c902:	4632      	mov	r2, r6
 800c904:	4649      	mov	r1, r9
 800c906:	4640      	mov	r0, r8
 800c908:	47d0      	blx	sl
 800c90a:	3001      	adds	r0, #1
 800c90c:	d09d      	beq.n	800c84a <_printf_i+0x15a>
 800c90e:	3501      	adds	r5, #1
 800c910:	68e3      	ldr	r3, [r4, #12]
 800c912:	9903      	ldr	r1, [sp, #12]
 800c914:	1a5b      	subs	r3, r3, r1
 800c916:	42ab      	cmp	r3, r5
 800c918:	dcf2      	bgt.n	800c900 <_printf_i+0x210>
 800c91a:	e7eb      	b.n	800c8f4 <_printf_i+0x204>
 800c91c:	2500      	movs	r5, #0
 800c91e:	f104 0619 	add.w	r6, r4, #25
 800c922:	e7f5      	b.n	800c910 <_printf_i+0x220>
 800c924:	0800e8ca 	.word	0x0800e8ca
 800c928:	0800e8db 	.word	0x0800e8db

0800c92c <std>:
 800c92c:	2300      	movs	r3, #0
 800c92e:	b510      	push	{r4, lr}
 800c930:	4604      	mov	r4, r0
 800c932:	e9c0 3300 	strd	r3, r3, [r0]
 800c936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c93a:	6083      	str	r3, [r0, #8]
 800c93c:	8181      	strh	r1, [r0, #12]
 800c93e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c940:	81c2      	strh	r2, [r0, #14]
 800c942:	6183      	str	r3, [r0, #24]
 800c944:	4619      	mov	r1, r3
 800c946:	2208      	movs	r2, #8
 800c948:	305c      	adds	r0, #92	@ 0x5c
 800c94a:	f000 f9f9 	bl	800cd40 <memset>
 800c94e:	4b0d      	ldr	r3, [pc, #52]	@ (800c984 <std+0x58>)
 800c950:	6263      	str	r3, [r4, #36]	@ 0x24
 800c952:	4b0d      	ldr	r3, [pc, #52]	@ (800c988 <std+0x5c>)
 800c954:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c956:	4b0d      	ldr	r3, [pc, #52]	@ (800c98c <std+0x60>)
 800c958:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c95a:	4b0d      	ldr	r3, [pc, #52]	@ (800c990 <std+0x64>)
 800c95c:	6323      	str	r3, [r4, #48]	@ 0x30
 800c95e:	4b0d      	ldr	r3, [pc, #52]	@ (800c994 <std+0x68>)
 800c960:	6224      	str	r4, [r4, #32]
 800c962:	429c      	cmp	r4, r3
 800c964:	d006      	beq.n	800c974 <std+0x48>
 800c966:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c96a:	4294      	cmp	r4, r2
 800c96c:	d002      	beq.n	800c974 <std+0x48>
 800c96e:	33d0      	adds	r3, #208	@ 0xd0
 800c970:	429c      	cmp	r4, r3
 800c972:	d105      	bne.n	800c980 <std+0x54>
 800c974:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c97c:	f000 ba6c 	b.w	800ce58 <__retarget_lock_init_recursive>
 800c980:	bd10      	pop	{r4, pc}
 800c982:	bf00      	nop
 800c984:	0800cb91 	.word	0x0800cb91
 800c988:	0800cbb3 	.word	0x0800cbb3
 800c98c:	0800cbeb 	.word	0x0800cbeb
 800c990:	0800cc0f 	.word	0x0800cc0f
 800c994:	24000aa8 	.word	0x24000aa8

0800c998 <stdio_exit_handler>:
 800c998:	4a02      	ldr	r2, [pc, #8]	@ (800c9a4 <stdio_exit_handler+0xc>)
 800c99a:	4903      	ldr	r1, [pc, #12]	@ (800c9a8 <stdio_exit_handler+0x10>)
 800c99c:	4803      	ldr	r0, [pc, #12]	@ (800c9ac <stdio_exit_handler+0x14>)
 800c99e:	f000 b869 	b.w	800ca74 <_fwalk_sglue>
 800c9a2:	bf00      	nop
 800c9a4:	24000010 	.word	0x24000010
 800c9a8:	0800e561 	.word	0x0800e561
 800c9ac:	24000020 	.word	0x24000020

0800c9b0 <cleanup_stdio>:
 800c9b0:	6841      	ldr	r1, [r0, #4]
 800c9b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c9e4 <cleanup_stdio+0x34>)
 800c9b4:	4299      	cmp	r1, r3
 800c9b6:	b510      	push	{r4, lr}
 800c9b8:	4604      	mov	r4, r0
 800c9ba:	d001      	beq.n	800c9c0 <cleanup_stdio+0x10>
 800c9bc:	f001 fdd0 	bl	800e560 <_fflush_r>
 800c9c0:	68a1      	ldr	r1, [r4, #8]
 800c9c2:	4b09      	ldr	r3, [pc, #36]	@ (800c9e8 <cleanup_stdio+0x38>)
 800c9c4:	4299      	cmp	r1, r3
 800c9c6:	d002      	beq.n	800c9ce <cleanup_stdio+0x1e>
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	f001 fdc9 	bl	800e560 <_fflush_r>
 800c9ce:	68e1      	ldr	r1, [r4, #12]
 800c9d0:	4b06      	ldr	r3, [pc, #24]	@ (800c9ec <cleanup_stdio+0x3c>)
 800c9d2:	4299      	cmp	r1, r3
 800c9d4:	d004      	beq.n	800c9e0 <cleanup_stdio+0x30>
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9dc:	f001 bdc0 	b.w	800e560 <_fflush_r>
 800c9e0:	bd10      	pop	{r4, pc}
 800c9e2:	bf00      	nop
 800c9e4:	24000aa8 	.word	0x24000aa8
 800c9e8:	24000b10 	.word	0x24000b10
 800c9ec:	24000b78 	.word	0x24000b78

0800c9f0 <global_stdio_init.part.0>:
 800c9f0:	b510      	push	{r4, lr}
 800c9f2:	4b0b      	ldr	r3, [pc, #44]	@ (800ca20 <global_stdio_init.part.0+0x30>)
 800c9f4:	4c0b      	ldr	r4, [pc, #44]	@ (800ca24 <global_stdio_init.part.0+0x34>)
 800c9f6:	4a0c      	ldr	r2, [pc, #48]	@ (800ca28 <global_stdio_init.part.0+0x38>)
 800c9f8:	601a      	str	r2, [r3, #0]
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	2104      	movs	r1, #4
 800ca00:	f7ff ff94 	bl	800c92c <std>
 800ca04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ca08:	2201      	movs	r2, #1
 800ca0a:	2109      	movs	r1, #9
 800ca0c:	f7ff ff8e 	bl	800c92c <std>
 800ca10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ca14:	2202      	movs	r2, #2
 800ca16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca1a:	2112      	movs	r1, #18
 800ca1c:	f7ff bf86 	b.w	800c92c <std>
 800ca20:	24000be0 	.word	0x24000be0
 800ca24:	24000aa8 	.word	0x24000aa8
 800ca28:	0800c999 	.word	0x0800c999

0800ca2c <__sfp_lock_acquire>:
 800ca2c:	4801      	ldr	r0, [pc, #4]	@ (800ca34 <__sfp_lock_acquire+0x8>)
 800ca2e:	f000 ba14 	b.w	800ce5a <__retarget_lock_acquire_recursive>
 800ca32:	bf00      	nop
 800ca34:	24000be9 	.word	0x24000be9

0800ca38 <__sfp_lock_release>:
 800ca38:	4801      	ldr	r0, [pc, #4]	@ (800ca40 <__sfp_lock_release+0x8>)
 800ca3a:	f000 ba0f 	b.w	800ce5c <__retarget_lock_release_recursive>
 800ca3e:	bf00      	nop
 800ca40:	24000be9 	.word	0x24000be9

0800ca44 <__sinit>:
 800ca44:	b510      	push	{r4, lr}
 800ca46:	4604      	mov	r4, r0
 800ca48:	f7ff fff0 	bl	800ca2c <__sfp_lock_acquire>
 800ca4c:	6a23      	ldr	r3, [r4, #32]
 800ca4e:	b11b      	cbz	r3, 800ca58 <__sinit+0x14>
 800ca50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca54:	f7ff bff0 	b.w	800ca38 <__sfp_lock_release>
 800ca58:	4b04      	ldr	r3, [pc, #16]	@ (800ca6c <__sinit+0x28>)
 800ca5a:	6223      	str	r3, [r4, #32]
 800ca5c:	4b04      	ldr	r3, [pc, #16]	@ (800ca70 <__sinit+0x2c>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d1f5      	bne.n	800ca50 <__sinit+0xc>
 800ca64:	f7ff ffc4 	bl	800c9f0 <global_stdio_init.part.0>
 800ca68:	e7f2      	b.n	800ca50 <__sinit+0xc>
 800ca6a:	bf00      	nop
 800ca6c:	0800c9b1 	.word	0x0800c9b1
 800ca70:	24000be0 	.word	0x24000be0

0800ca74 <_fwalk_sglue>:
 800ca74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca78:	4607      	mov	r7, r0
 800ca7a:	4688      	mov	r8, r1
 800ca7c:	4614      	mov	r4, r2
 800ca7e:	2600      	movs	r6, #0
 800ca80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca84:	f1b9 0901 	subs.w	r9, r9, #1
 800ca88:	d505      	bpl.n	800ca96 <_fwalk_sglue+0x22>
 800ca8a:	6824      	ldr	r4, [r4, #0]
 800ca8c:	2c00      	cmp	r4, #0
 800ca8e:	d1f7      	bne.n	800ca80 <_fwalk_sglue+0xc>
 800ca90:	4630      	mov	r0, r6
 800ca92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca96:	89ab      	ldrh	r3, [r5, #12]
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d907      	bls.n	800caac <_fwalk_sglue+0x38>
 800ca9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800caa0:	3301      	adds	r3, #1
 800caa2:	d003      	beq.n	800caac <_fwalk_sglue+0x38>
 800caa4:	4629      	mov	r1, r5
 800caa6:	4638      	mov	r0, r7
 800caa8:	47c0      	blx	r8
 800caaa:	4306      	orrs	r6, r0
 800caac:	3568      	adds	r5, #104	@ 0x68
 800caae:	e7e9      	b.n	800ca84 <_fwalk_sglue+0x10>

0800cab0 <iprintf>:
 800cab0:	b40f      	push	{r0, r1, r2, r3}
 800cab2:	b507      	push	{r0, r1, r2, lr}
 800cab4:	4906      	ldr	r1, [pc, #24]	@ (800cad0 <iprintf+0x20>)
 800cab6:	ab04      	add	r3, sp, #16
 800cab8:	6808      	ldr	r0, [r1, #0]
 800caba:	f853 2b04 	ldr.w	r2, [r3], #4
 800cabe:	6881      	ldr	r1, [r0, #8]
 800cac0:	9301      	str	r3, [sp, #4]
 800cac2:	f001 fbb1 	bl	800e228 <_vfiprintf_r>
 800cac6:	b003      	add	sp, #12
 800cac8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cacc:	b004      	add	sp, #16
 800cace:	4770      	bx	lr
 800cad0:	2400001c 	.word	0x2400001c

0800cad4 <_puts_r>:
 800cad4:	6a03      	ldr	r3, [r0, #32]
 800cad6:	b570      	push	{r4, r5, r6, lr}
 800cad8:	6884      	ldr	r4, [r0, #8]
 800cada:	4605      	mov	r5, r0
 800cadc:	460e      	mov	r6, r1
 800cade:	b90b      	cbnz	r3, 800cae4 <_puts_r+0x10>
 800cae0:	f7ff ffb0 	bl	800ca44 <__sinit>
 800cae4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cae6:	07db      	lsls	r3, r3, #31
 800cae8:	d405      	bmi.n	800caf6 <_puts_r+0x22>
 800caea:	89a3      	ldrh	r3, [r4, #12]
 800caec:	0598      	lsls	r0, r3, #22
 800caee:	d402      	bmi.n	800caf6 <_puts_r+0x22>
 800caf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800caf2:	f000 f9b2 	bl	800ce5a <__retarget_lock_acquire_recursive>
 800caf6:	89a3      	ldrh	r3, [r4, #12]
 800caf8:	0719      	lsls	r1, r3, #28
 800cafa:	d502      	bpl.n	800cb02 <_puts_r+0x2e>
 800cafc:	6923      	ldr	r3, [r4, #16]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d135      	bne.n	800cb6e <_puts_r+0x9a>
 800cb02:	4621      	mov	r1, r4
 800cb04:	4628      	mov	r0, r5
 800cb06:	f000 f8c5 	bl	800cc94 <__swsetup_r>
 800cb0a:	b380      	cbz	r0, 800cb6e <_puts_r+0x9a>
 800cb0c:	f04f 35ff 	mov.w	r5, #4294967295
 800cb10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb12:	07da      	lsls	r2, r3, #31
 800cb14:	d405      	bmi.n	800cb22 <_puts_r+0x4e>
 800cb16:	89a3      	ldrh	r3, [r4, #12]
 800cb18:	059b      	lsls	r3, r3, #22
 800cb1a:	d402      	bmi.n	800cb22 <_puts_r+0x4e>
 800cb1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb1e:	f000 f99d 	bl	800ce5c <__retarget_lock_release_recursive>
 800cb22:	4628      	mov	r0, r5
 800cb24:	bd70      	pop	{r4, r5, r6, pc}
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	da04      	bge.n	800cb34 <_puts_r+0x60>
 800cb2a:	69a2      	ldr	r2, [r4, #24]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	dc17      	bgt.n	800cb60 <_puts_r+0x8c>
 800cb30:	290a      	cmp	r1, #10
 800cb32:	d015      	beq.n	800cb60 <_puts_r+0x8c>
 800cb34:	6823      	ldr	r3, [r4, #0]
 800cb36:	1c5a      	adds	r2, r3, #1
 800cb38:	6022      	str	r2, [r4, #0]
 800cb3a:	7019      	strb	r1, [r3, #0]
 800cb3c:	68a3      	ldr	r3, [r4, #8]
 800cb3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cb42:	3b01      	subs	r3, #1
 800cb44:	60a3      	str	r3, [r4, #8]
 800cb46:	2900      	cmp	r1, #0
 800cb48:	d1ed      	bne.n	800cb26 <_puts_r+0x52>
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	da11      	bge.n	800cb72 <_puts_r+0x9e>
 800cb4e:	4622      	mov	r2, r4
 800cb50:	210a      	movs	r1, #10
 800cb52:	4628      	mov	r0, r5
 800cb54:	f000 f85f 	bl	800cc16 <__swbuf_r>
 800cb58:	3001      	adds	r0, #1
 800cb5a:	d0d7      	beq.n	800cb0c <_puts_r+0x38>
 800cb5c:	250a      	movs	r5, #10
 800cb5e:	e7d7      	b.n	800cb10 <_puts_r+0x3c>
 800cb60:	4622      	mov	r2, r4
 800cb62:	4628      	mov	r0, r5
 800cb64:	f000 f857 	bl	800cc16 <__swbuf_r>
 800cb68:	3001      	adds	r0, #1
 800cb6a:	d1e7      	bne.n	800cb3c <_puts_r+0x68>
 800cb6c:	e7ce      	b.n	800cb0c <_puts_r+0x38>
 800cb6e:	3e01      	subs	r6, #1
 800cb70:	e7e4      	b.n	800cb3c <_puts_r+0x68>
 800cb72:	6823      	ldr	r3, [r4, #0]
 800cb74:	1c5a      	adds	r2, r3, #1
 800cb76:	6022      	str	r2, [r4, #0]
 800cb78:	220a      	movs	r2, #10
 800cb7a:	701a      	strb	r2, [r3, #0]
 800cb7c:	e7ee      	b.n	800cb5c <_puts_r+0x88>
	...

0800cb80 <puts>:
 800cb80:	4b02      	ldr	r3, [pc, #8]	@ (800cb8c <puts+0xc>)
 800cb82:	4601      	mov	r1, r0
 800cb84:	6818      	ldr	r0, [r3, #0]
 800cb86:	f7ff bfa5 	b.w	800cad4 <_puts_r>
 800cb8a:	bf00      	nop
 800cb8c:	2400001c 	.word	0x2400001c

0800cb90 <__sread>:
 800cb90:	b510      	push	{r4, lr}
 800cb92:	460c      	mov	r4, r1
 800cb94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb98:	f000 f900 	bl	800cd9c <_read_r>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	bfab      	itete	ge
 800cba0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cba2:	89a3      	ldrhlt	r3, [r4, #12]
 800cba4:	181b      	addge	r3, r3, r0
 800cba6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cbaa:	bfac      	ite	ge
 800cbac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cbae:	81a3      	strhlt	r3, [r4, #12]
 800cbb0:	bd10      	pop	{r4, pc}

0800cbb2 <__swrite>:
 800cbb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb6:	461f      	mov	r7, r3
 800cbb8:	898b      	ldrh	r3, [r1, #12]
 800cbba:	05db      	lsls	r3, r3, #23
 800cbbc:	4605      	mov	r5, r0
 800cbbe:	460c      	mov	r4, r1
 800cbc0:	4616      	mov	r6, r2
 800cbc2:	d505      	bpl.n	800cbd0 <__swrite+0x1e>
 800cbc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbc8:	2302      	movs	r3, #2
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f000 f8d4 	bl	800cd78 <_lseek_r>
 800cbd0:	89a3      	ldrh	r3, [r4, #12]
 800cbd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cbda:	81a3      	strh	r3, [r4, #12]
 800cbdc:	4632      	mov	r2, r6
 800cbde:	463b      	mov	r3, r7
 800cbe0:	4628      	mov	r0, r5
 800cbe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe6:	f000 b8fb 	b.w	800cde0 <_write_r>

0800cbea <__sseek>:
 800cbea:	b510      	push	{r4, lr}
 800cbec:	460c      	mov	r4, r1
 800cbee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf2:	f000 f8c1 	bl	800cd78 <_lseek_r>
 800cbf6:	1c43      	adds	r3, r0, #1
 800cbf8:	89a3      	ldrh	r3, [r4, #12]
 800cbfa:	bf15      	itete	ne
 800cbfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cbfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cc02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cc06:	81a3      	strheq	r3, [r4, #12]
 800cc08:	bf18      	it	ne
 800cc0a:	81a3      	strhne	r3, [r4, #12]
 800cc0c:	bd10      	pop	{r4, pc}

0800cc0e <__sclose>:
 800cc0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc12:	f000 b8a1 	b.w	800cd58 <_close_r>

0800cc16 <__swbuf_r>:
 800cc16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc18:	460e      	mov	r6, r1
 800cc1a:	4614      	mov	r4, r2
 800cc1c:	4605      	mov	r5, r0
 800cc1e:	b118      	cbz	r0, 800cc28 <__swbuf_r+0x12>
 800cc20:	6a03      	ldr	r3, [r0, #32]
 800cc22:	b90b      	cbnz	r3, 800cc28 <__swbuf_r+0x12>
 800cc24:	f7ff ff0e 	bl	800ca44 <__sinit>
 800cc28:	69a3      	ldr	r3, [r4, #24]
 800cc2a:	60a3      	str	r3, [r4, #8]
 800cc2c:	89a3      	ldrh	r3, [r4, #12]
 800cc2e:	071a      	lsls	r2, r3, #28
 800cc30:	d501      	bpl.n	800cc36 <__swbuf_r+0x20>
 800cc32:	6923      	ldr	r3, [r4, #16]
 800cc34:	b943      	cbnz	r3, 800cc48 <__swbuf_r+0x32>
 800cc36:	4621      	mov	r1, r4
 800cc38:	4628      	mov	r0, r5
 800cc3a:	f000 f82b 	bl	800cc94 <__swsetup_r>
 800cc3e:	b118      	cbz	r0, 800cc48 <__swbuf_r+0x32>
 800cc40:	f04f 37ff 	mov.w	r7, #4294967295
 800cc44:	4638      	mov	r0, r7
 800cc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc48:	6823      	ldr	r3, [r4, #0]
 800cc4a:	6922      	ldr	r2, [r4, #16]
 800cc4c:	1a98      	subs	r0, r3, r2
 800cc4e:	6963      	ldr	r3, [r4, #20]
 800cc50:	b2f6      	uxtb	r6, r6
 800cc52:	4283      	cmp	r3, r0
 800cc54:	4637      	mov	r7, r6
 800cc56:	dc05      	bgt.n	800cc64 <__swbuf_r+0x4e>
 800cc58:	4621      	mov	r1, r4
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	f001 fc80 	bl	800e560 <_fflush_r>
 800cc60:	2800      	cmp	r0, #0
 800cc62:	d1ed      	bne.n	800cc40 <__swbuf_r+0x2a>
 800cc64:	68a3      	ldr	r3, [r4, #8]
 800cc66:	3b01      	subs	r3, #1
 800cc68:	60a3      	str	r3, [r4, #8]
 800cc6a:	6823      	ldr	r3, [r4, #0]
 800cc6c:	1c5a      	adds	r2, r3, #1
 800cc6e:	6022      	str	r2, [r4, #0]
 800cc70:	701e      	strb	r6, [r3, #0]
 800cc72:	6962      	ldr	r2, [r4, #20]
 800cc74:	1c43      	adds	r3, r0, #1
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d004      	beq.n	800cc84 <__swbuf_r+0x6e>
 800cc7a:	89a3      	ldrh	r3, [r4, #12]
 800cc7c:	07db      	lsls	r3, r3, #31
 800cc7e:	d5e1      	bpl.n	800cc44 <__swbuf_r+0x2e>
 800cc80:	2e0a      	cmp	r6, #10
 800cc82:	d1df      	bne.n	800cc44 <__swbuf_r+0x2e>
 800cc84:	4621      	mov	r1, r4
 800cc86:	4628      	mov	r0, r5
 800cc88:	f001 fc6a 	bl	800e560 <_fflush_r>
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	d0d9      	beq.n	800cc44 <__swbuf_r+0x2e>
 800cc90:	e7d6      	b.n	800cc40 <__swbuf_r+0x2a>
	...

0800cc94 <__swsetup_r>:
 800cc94:	b538      	push	{r3, r4, r5, lr}
 800cc96:	4b29      	ldr	r3, [pc, #164]	@ (800cd3c <__swsetup_r+0xa8>)
 800cc98:	4605      	mov	r5, r0
 800cc9a:	6818      	ldr	r0, [r3, #0]
 800cc9c:	460c      	mov	r4, r1
 800cc9e:	b118      	cbz	r0, 800cca8 <__swsetup_r+0x14>
 800cca0:	6a03      	ldr	r3, [r0, #32]
 800cca2:	b90b      	cbnz	r3, 800cca8 <__swsetup_r+0x14>
 800cca4:	f7ff fece 	bl	800ca44 <__sinit>
 800cca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccac:	0719      	lsls	r1, r3, #28
 800ccae:	d422      	bmi.n	800ccf6 <__swsetup_r+0x62>
 800ccb0:	06da      	lsls	r2, r3, #27
 800ccb2:	d407      	bmi.n	800ccc4 <__swsetup_r+0x30>
 800ccb4:	2209      	movs	r2, #9
 800ccb6:	602a      	str	r2, [r5, #0]
 800ccb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccbc:	81a3      	strh	r3, [r4, #12]
 800ccbe:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc2:	e033      	b.n	800cd2c <__swsetup_r+0x98>
 800ccc4:	0758      	lsls	r0, r3, #29
 800ccc6:	d512      	bpl.n	800ccee <__swsetup_r+0x5a>
 800ccc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccca:	b141      	cbz	r1, 800ccde <__swsetup_r+0x4a>
 800cccc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccd0:	4299      	cmp	r1, r3
 800ccd2:	d002      	beq.n	800ccda <__swsetup_r+0x46>
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	f000 feb9 	bl	800da4c <_free_r>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccde:	89a3      	ldrh	r3, [r4, #12]
 800cce0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cce4:	81a3      	strh	r3, [r4, #12]
 800cce6:	2300      	movs	r3, #0
 800cce8:	6063      	str	r3, [r4, #4]
 800ccea:	6923      	ldr	r3, [r4, #16]
 800ccec:	6023      	str	r3, [r4, #0]
 800ccee:	89a3      	ldrh	r3, [r4, #12]
 800ccf0:	f043 0308 	orr.w	r3, r3, #8
 800ccf4:	81a3      	strh	r3, [r4, #12]
 800ccf6:	6923      	ldr	r3, [r4, #16]
 800ccf8:	b94b      	cbnz	r3, 800cd0e <__swsetup_r+0x7a>
 800ccfa:	89a3      	ldrh	r3, [r4, #12]
 800ccfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cd00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd04:	d003      	beq.n	800cd0e <__swsetup_r+0x7a>
 800cd06:	4621      	mov	r1, r4
 800cd08:	4628      	mov	r0, r5
 800cd0a:	f001 fc77 	bl	800e5fc <__smakebuf_r>
 800cd0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd12:	f013 0201 	ands.w	r2, r3, #1
 800cd16:	d00a      	beq.n	800cd2e <__swsetup_r+0x9a>
 800cd18:	2200      	movs	r2, #0
 800cd1a:	60a2      	str	r2, [r4, #8]
 800cd1c:	6962      	ldr	r2, [r4, #20]
 800cd1e:	4252      	negs	r2, r2
 800cd20:	61a2      	str	r2, [r4, #24]
 800cd22:	6922      	ldr	r2, [r4, #16]
 800cd24:	b942      	cbnz	r2, 800cd38 <__swsetup_r+0xa4>
 800cd26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd2a:	d1c5      	bne.n	800ccb8 <__swsetup_r+0x24>
 800cd2c:	bd38      	pop	{r3, r4, r5, pc}
 800cd2e:	0799      	lsls	r1, r3, #30
 800cd30:	bf58      	it	pl
 800cd32:	6962      	ldrpl	r2, [r4, #20]
 800cd34:	60a2      	str	r2, [r4, #8]
 800cd36:	e7f4      	b.n	800cd22 <__swsetup_r+0x8e>
 800cd38:	2000      	movs	r0, #0
 800cd3a:	e7f7      	b.n	800cd2c <__swsetup_r+0x98>
 800cd3c:	2400001c 	.word	0x2400001c

0800cd40 <memset>:
 800cd40:	4402      	add	r2, r0
 800cd42:	4603      	mov	r3, r0
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d100      	bne.n	800cd4a <memset+0xa>
 800cd48:	4770      	bx	lr
 800cd4a:	f803 1b01 	strb.w	r1, [r3], #1
 800cd4e:	e7f9      	b.n	800cd44 <memset+0x4>

0800cd50 <_localeconv_r>:
 800cd50:	4800      	ldr	r0, [pc, #0]	@ (800cd54 <_localeconv_r+0x4>)
 800cd52:	4770      	bx	lr
 800cd54:	2400015c 	.word	0x2400015c

0800cd58 <_close_r>:
 800cd58:	b538      	push	{r3, r4, r5, lr}
 800cd5a:	4d06      	ldr	r5, [pc, #24]	@ (800cd74 <_close_r+0x1c>)
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	4604      	mov	r4, r0
 800cd60:	4608      	mov	r0, r1
 800cd62:	602b      	str	r3, [r5, #0]
 800cd64:	f7f4 fc5e 	bl	8001624 <_close>
 800cd68:	1c43      	adds	r3, r0, #1
 800cd6a:	d102      	bne.n	800cd72 <_close_r+0x1a>
 800cd6c:	682b      	ldr	r3, [r5, #0]
 800cd6e:	b103      	cbz	r3, 800cd72 <_close_r+0x1a>
 800cd70:	6023      	str	r3, [r4, #0]
 800cd72:	bd38      	pop	{r3, r4, r5, pc}
 800cd74:	24000be4 	.word	0x24000be4

0800cd78 <_lseek_r>:
 800cd78:	b538      	push	{r3, r4, r5, lr}
 800cd7a:	4d07      	ldr	r5, [pc, #28]	@ (800cd98 <_lseek_r+0x20>)
 800cd7c:	4604      	mov	r4, r0
 800cd7e:	4608      	mov	r0, r1
 800cd80:	4611      	mov	r1, r2
 800cd82:	2200      	movs	r2, #0
 800cd84:	602a      	str	r2, [r5, #0]
 800cd86:	461a      	mov	r2, r3
 800cd88:	f7f4 fc73 	bl	8001672 <_lseek>
 800cd8c:	1c43      	adds	r3, r0, #1
 800cd8e:	d102      	bne.n	800cd96 <_lseek_r+0x1e>
 800cd90:	682b      	ldr	r3, [r5, #0]
 800cd92:	b103      	cbz	r3, 800cd96 <_lseek_r+0x1e>
 800cd94:	6023      	str	r3, [r4, #0]
 800cd96:	bd38      	pop	{r3, r4, r5, pc}
 800cd98:	24000be4 	.word	0x24000be4

0800cd9c <_read_r>:
 800cd9c:	b538      	push	{r3, r4, r5, lr}
 800cd9e:	4d07      	ldr	r5, [pc, #28]	@ (800cdbc <_read_r+0x20>)
 800cda0:	4604      	mov	r4, r0
 800cda2:	4608      	mov	r0, r1
 800cda4:	4611      	mov	r1, r2
 800cda6:	2200      	movs	r2, #0
 800cda8:	602a      	str	r2, [r5, #0]
 800cdaa:	461a      	mov	r2, r3
 800cdac:	f7f4 fc01 	bl	80015b2 <_read>
 800cdb0:	1c43      	adds	r3, r0, #1
 800cdb2:	d102      	bne.n	800cdba <_read_r+0x1e>
 800cdb4:	682b      	ldr	r3, [r5, #0]
 800cdb6:	b103      	cbz	r3, 800cdba <_read_r+0x1e>
 800cdb8:	6023      	str	r3, [r4, #0]
 800cdba:	bd38      	pop	{r3, r4, r5, pc}
 800cdbc:	24000be4 	.word	0x24000be4

0800cdc0 <_sbrk_r>:
 800cdc0:	b538      	push	{r3, r4, r5, lr}
 800cdc2:	4d06      	ldr	r5, [pc, #24]	@ (800cddc <_sbrk_r+0x1c>)
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	4604      	mov	r4, r0
 800cdc8:	4608      	mov	r0, r1
 800cdca:	602b      	str	r3, [r5, #0]
 800cdcc:	f7f4 fc5e 	bl	800168c <_sbrk>
 800cdd0:	1c43      	adds	r3, r0, #1
 800cdd2:	d102      	bne.n	800cdda <_sbrk_r+0x1a>
 800cdd4:	682b      	ldr	r3, [r5, #0]
 800cdd6:	b103      	cbz	r3, 800cdda <_sbrk_r+0x1a>
 800cdd8:	6023      	str	r3, [r4, #0]
 800cdda:	bd38      	pop	{r3, r4, r5, pc}
 800cddc:	24000be4 	.word	0x24000be4

0800cde0 <_write_r>:
 800cde0:	b538      	push	{r3, r4, r5, lr}
 800cde2:	4d07      	ldr	r5, [pc, #28]	@ (800ce00 <_write_r+0x20>)
 800cde4:	4604      	mov	r4, r0
 800cde6:	4608      	mov	r0, r1
 800cde8:	4611      	mov	r1, r2
 800cdea:	2200      	movs	r2, #0
 800cdec:	602a      	str	r2, [r5, #0]
 800cdee:	461a      	mov	r2, r3
 800cdf0:	f7f4 fbfc 	bl	80015ec <_write>
 800cdf4:	1c43      	adds	r3, r0, #1
 800cdf6:	d102      	bne.n	800cdfe <_write_r+0x1e>
 800cdf8:	682b      	ldr	r3, [r5, #0]
 800cdfa:	b103      	cbz	r3, 800cdfe <_write_r+0x1e>
 800cdfc:	6023      	str	r3, [r4, #0]
 800cdfe:	bd38      	pop	{r3, r4, r5, pc}
 800ce00:	24000be4 	.word	0x24000be4

0800ce04 <__errno>:
 800ce04:	4b01      	ldr	r3, [pc, #4]	@ (800ce0c <__errno+0x8>)
 800ce06:	6818      	ldr	r0, [r3, #0]
 800ce08:	4770      	bx	lr
 800ce0a:	bf00      	nop
 800ce0c:	2400001c 	.word	0x2400001c

0800ce10 <__libc_init_array>:
 800ce10:	b570      	push	{r4, r5, r6, lr}
 800ce12:	4d0d      	ldr	r5, [pc, #52]	@ (800ce48 <__libc_init_array+0x38>)
 800ce14:	4c0d      	ldr	r4, [pc, #52]	@ (800ce4c <__libc_init_array+0x3c>)
 800ce16:	1b64      	subs	r4, r4, r5
 800ce18:	10a4      	asrs	r4, r4, #2
 800ce1a:	2600      	movs	r6, #0
 800ce1c:	42a6      	cmp	r6, r4
 800ce1e:	d109      	bne.n	800ce34 <__libc_init_array+0x24>
 800ce20:	4d0b      	ldr	r5, [pc, #44]	@ (800ce50 <__libc_init_array+0x40>)
 800ce22:	4c0c      	ldr	r4, [pc, #48]	@ (800ce54 <__libc_init_array+0x44>)
 800ce24:	f001 fcf8 	bl	800e818 <_init>
 800ce28:	1b64      	subs	r4, r4, r5
 800ce2a:	10a4      	asrs	r4, r4, #2
 800ce2c:	2600      	movs	r6, #0
 800ce2e:	42a6      	cmp	r6, r4
 800ce30:	d105      	bne.n	800ce3e <__libc_init_array+0x2e>
 800ce32:	bd70      	pop	{r4, r5, r6, pc}
 800ce34:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce38:	4798      	blx	r3
 800ce3a:	3601      	adds	r6, #1
 800ce3c:	e7ee      	b.n	800ce1c <__libc_init_array+0xc>
 800ce3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce42:	4798      	blx	r3
 800ce44:	3601      	adds	r6, #1
 800ce46:	e7f2      	b.n	800ce2e <__libc_init_array+0x1e>
 800ce48:	0800ec34 	.word	0x0800ec34
 800ce4c:	0800ec34 	.word	0x0800ec34
 800ce50:	0800ec34 	.word	0x0800ec34
 800ce54:	0800ec38 	.word	0x0800ec38

0800ce58 <__retarget_lock_init_recursive>:
 800ce58:	4770      	bx	lr

0800ce5a <__retarget_lock_acquire_recursive>:
 800ce5a:	4770      	bx	lr

0800ce5c <__retarget_lock_release_recursive>:
 800ce5c:	4770      	bx	lr

0800ce5e <memcpy>:
 800ce5e:	440a      	add	r2, r1
 800ce60:	4291      	cmp	r1, r2
 800ce62:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce66:	d100      	bne.n	800ce6a <memcpy+0xc>
 800ce68:	4770      	bx	lr
 800ce6a:	b510      	push	{r4, lr}
 800ce6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce70:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce74:	4291      	cmp	r1, r2
 800ce76:	d1f9      	bne.n	800ce6c <memcpy+0xe>
 800ce78:	bd10      	pop	{r4, pc}

0800ce7a <quorem>:
 800ce7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce7e:	6903      	ldr	r3, [r0, #16]
 800ce80:	690c      	ldr	r4, [r1, #16]
 800ce82:	42a3      	cmp	r3, r4
 800ce84:	4607      	mov	r7, r0
 800ce86:	db7e      	blt.n	800cf86 <quorem+0x10c>
 800ce88:	3c01      	subs	r4, #1
 800ce8a:	f101 0814 	add.w	r8, r1, #20
 800ce8e:	00a3      	lsls	r3, r4, #2
 800ce90:	f100 0514 	add.w	r5, r0, #20
 800ce94:	9300      	str	r3, [sp, #0]
 800ce96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce9a:	9301      	str	r3, [sp, #4]
 800ce9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cea0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cea4:	3301      	adds	r3, #1
 800cea6:	429a      	cmp	r2, r3
 800cea8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ceac:	fbb2 f6f3 	udiv	r6, r2, r3
 800ceb0:	d32e      	bcc.n	800cf10 <quorem+0x96>
 800ceb2:	f04f 0a00 	mov.w	sl, #0
 800ceb6:	46c4      	mov	ip, r8
 800ceb8:	46ae      	mov	lr, r5
 800ceba:	46d3      	mov	fp, sl
 800cebc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cec0:	b298      	uxth	r0, r3
 800cec2:	fb06 a000 	mla	r0, r6, r0, sl
 800cec6:	0c02      	lsrs	r2, r0, #16
 800cec8:	0c1b      	lsrs	r3, r3, #16
 800ceca:	fb06 2303 	mla	r3, r6, r3, r2
 800cece:	f8de 2000 	ldr.w	r2, [lr]
 800ced2:	b280      	uxth	r0, r0
 800ced4:	b292      	uxth	r2, r2
 800ced6:	1a12      	subs	r2, r2, r0
 800ced8:	445a      	add	r2, fp
 800ceda:	f8de 0000 	ldr.w	r0, [lr]
 800cede:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cee2:	b29b      	uxth	r3, r3
 800cee4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cee8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ceec:	b292      	uxth	r2, r2
 800ceee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cef2:	45e1      	cmp	r9, ip
 800cef4:	f84e 2b04 	str.w	r2, [lr], #4
 800cef8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cefc:	d2de      	bcs.n	800cebc <quorem+0x42>
 800cefe:	9b00      	ldr	r3, [sp, #0]
 800cf00:	58eb      	ldr	r3, [r5, r3]
 800cf02:	b92b      	cbnz	r3, 800cf10 <quorem+0x96>
 800cf04:	9b01      	ldr	r3, [sp, #4]
 800cf06:	3b04      	subs	r3, #4
 800cf08:	429d      	cmp	r5, r3
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	d32f      	bcc.n	800cf6e <quorem+0xf4>
 800cf0e:	613c      	str	r4, [r7, #16]
 800cf10:	4638      	mov	r0, r7
 800cf12:	f001 f857 	bl	800dfc4 <__mcmp>
 800cf16:	2800      	cmp	r0, #0
 800cf18:	db25      	blt.n	800cf66 <quorem+0xec>
 800cf1a:	4629      	mov	r1, r5
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	f858 2b04 	ldr.w	r2, [r8], #4
 800cf22:	f8d1 c000 	ldr.w	ip, [r1]
 800cf26:	fa1f fe82 	uxth.w	lr, r2
 800cf2a:	fa1f f38c 	uxth.w	r3, ip
 800cf2e:	eba3 030e 	sub.w	r3, r3, lr
 800cf32:	4403      	add	r3, r0
 800cf34:	0c12      	lsrs	r2, r2, #16
 800cf36:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cf3a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf44:	45c1      	cmp	r9, r8
 800cf46:	f841 3b04 	str.w	r3, [r1], #4
 800cf4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cf4e:	d2e6      	bcs.n	800cf1e <quorem+0xa4>
 800cf50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf58:	b922      	cbnz	r2, 800cf64 <quorem+0xea>
 800cf5a:	3b04      	subs	r3, #4
 800cf5c:	429d      	cmp	r5, r3
 800cf5e:	461a      	mov	r2, r3
 800cf60:	d30b      	bcc.n	800cf7a <quorem+0x100>
 800cf62:	613c      	str	r4, [r7, #16]
 800cf64:	3601      	adds	r6, #1
 800cf66:	4630      	mov	r0, r6
 800cf68:	b003      	add	sp, #12
 800cf6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf6e:	6812      	ldr	r2, [r2, #0]
 800cf70:	3b04      	subs	r3, #4
 800cf72:	2a00      	cmp	r2, #0
 800cf74:	d1cb      	bne.n	800cf0e <quorem+0x94>
 800cf76:	3c01      	subs	r4, #1
 800cf78:	e7c6      	b.n	800cf08 <quorem+0x8e>
 800cf7a:	6812      	ldr	r2, [r2, #0]
 800cf7c:	3b04      	subs	r3, #4
 800cf7e:	2a00      	cmp	r2, #0
 800cf80:	d1ef      	bne.n	800cf62 <quorem+0xe8>
 800cf82:	3c01      	subs	r4, #1
 800cf84:	e7ea      	b.n	800cf5c <quorem+0xe2>
 800cf86:	2000      	movs	r0, #0
 800cf88:	e7ee      	b.n	800cf68 <quorem+0xee>
 800cf8a:	0000      	movs	r0, r0
 800cf8c:	0000      	movs	r0, r0
	...

0800cf90 <_dtoa_r>:
 800cf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf94:	ed2d 8b02 	vpush	{d8}
 800cf98:	69c7      	ldr	r7, [r0, #28]
 800cf9a:	b091      	sub	sp, #68	@ 0x44
 800cf9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cfa0:	ec55 4b10 	vmov	r4, r5, d0
 800cfa4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800cfa6:	9107      	str	r1, [sp, #28]
 800cfa8:	4681      	mov	r9, r0
 800cfaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfac:	930d      	str	r3, [sp, #52]	@ 0x34
 800cfae:	b97f      	cbnz	r7, 800cfd0 <_dtoa_r+0x40>
 800cfb0:	2010      	movs	r0, #16
 800cfb2:	f7fe ffc7 	bl	800bf44 <malloc>
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	f8c9 001c 	str.w	r0, [r9, #28]
 800cfbc:	b920      	cbnz	r0, 800cfc8 <_dtoa_r+0x38>
 800cfbe:	4ba0      	ldr	r3, [pc, #640]	@ (800d240 <_dtoa_r+0x2b0>)
 800cfc0:	21ef      	movs	r1, #239	@ 0xef
 800cfc2:	48a0      	ldr	r0, [pc, #640]	@ (800d244 <_dtoa_r+0x2b4>)
 800cfc4:	f001 fb78 	bl	800e6b8 <__assert_func>
 800cfc8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cfcc:	6007      	str	r7, [r0, #0]
 800cfce:	60c7      	str	r7, [r0, #12]
 800cfd0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cfd4:	6819      	ldr	r1, [r3, #0]
 800cfd6:	b159      	cbz	r1, 800cff0 <_dtoa_r+0x60>
 800cfd8:	685a      	ldr	r2, [r3, #4]
 800cfda:	604a      	str	r2, [r1, #4]
 800cfdc:	2301      	movs	r3, #1
 800cfde:	4093      	lsls	r3, r2
 800cfe0:	608b      	str	r3, [r1, #8]
 800cfe2:	4648      	mov	r0, r9
 800cfe4:	f000 fdbc 	bl	800db60 <_Bfree>
 800cfe8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cfec:	2200      	movs	r2, #0
 800cfee:	601a      	str	r2, [r3, #0]
 800cff0:	1e2b      	subs	r3, r5, #0
 800cff2:	bfbb      	ittet	lt
 800cff4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cff8:	9303      	strlt	r3, [sp, #12]
 800cffa:	2300      	movge	r3, #0
 800cffc:	2201      	movlt	r2, #1
 800cffe:	bfac      	ite	ge
 800d000:	6033      	strge	r3, [r6, #0]
 800d002:	6032      	strlt	r2, [r6, #0]
 800d004:	4b90      	ldr	r3, [pc, #576]	@ (800d248 <_dtoa_r+0x2b8>)
 800d006:	9e03      	ldr	r6, [sp, #12]
 800d008:	43b3      	bics	r3, r6
 800d00a:	d110      	bne.n	800d02e <_dtoa_r+0x9e>
 800d00c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d00e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d012:	6013      	str	r3, [r2, #0]
 800d014:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800d018:	4323      	orrs	r3, r4
 800d01a:	f000 84e6 	beq.w	800d9ea <_dtoa_r+0xa5a>
 800d01e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d020:	4f8a      	ldr	r7, [pc, #552]	@ (800d24c <_dtoa_r+0x2bc>)
 800d022:	2b00      	cmp	r3, #0
 800d024:	f000 84e8 	beq.w	800d9f8 <_dtoa_r+0xa68>
 800d028:	1cfb      	adds	r3, r7, #3
 800d02a:	f000 bce3 	b.w	800d9f4 <_dtoa_r+0xa64>
 800d02e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d032:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d03a:	d10a      	bne.n	800d052 <_dtoa_r+0xc2>
 800d03c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d03e:	2301      	movs	r3, #1
 800d040:	6013      	str	r3, [r2, #0]
 800d042:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d044:	b113      	cbz	r3, 800d04c <_dtoa_r+0xbc>
 800d046:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d048:	4b81      	ldr	r3, [pc, #516]	@ (800d250 <_dtoa_r+0x2c0>)
 800d04a:	6013      	str	r3, [r2, #0]
 800d04c:	4f81      	ldr	r7, [pc, #516]	@ (800d254 <_dtoa_r+0x2c4>)
 800d04e:	f000 bcd3 	b.w	800d9f8 <_dtoa_r+0xa68>
 800d052:	aa0e      	add	r2, sp, #56	@ 0x38
 800d054:	a90f      	add	r1, sp, #60	@ 0x3c
 800d056:	4648      	mov	r0, r9
 800d058:	eeb0 0b48 	vmov.f64	d0, d8
 800d05c:	f001 f862 	bl	800e124 <__d2b>
 800d060:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800d064:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d066:	9001      	str	r0, [sp, #4]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d045      	beq.n	800d0f8 <_dtoa_r+0x168>
 800d06c:	eeb0 7b48 	vmov.f64	d7, d8
 800d070:	ee18 1a90 	vmov	r1, s17
 800d074:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d078:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800d07c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d080:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d084:	2500      	movs	r5, #0
 800d086:	ee07 1a90 	vmov	s15, r1
 800d08a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800d08e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d228 <_dtoa_r+0x298>
 800d092:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d096:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800d230 <_dtoa_r+0x2a0>
 800d09a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d09e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d238 <_dtoa_r+0x2a8>
 800d0a2:	ee07 3a90 	vmov	s15, r3
 800d0a6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d0aa:	eeb0 7b46 	vmov.f64	d7, d6
 800d0ae:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d0b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d0b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0be:	ee16 8a90 	vmov	r8, s13
 800d0c2:	d508      	bpl.n	800d0d6 <_dtoa_r+0x146>
 800d0c4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d0c8:	eeb4 6b47 	vcmp.f64	d6, d7
 800d0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0d0:	bf18      	it	ne
 800d0d2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800d0d6:	f1b8 0f16 	cmp.w	r8, #22
 800d0da:	d82b      	bhi.n	800d134 <_dtoa_r+0x1a4>
 800d0dc:	495e      	ldr	r1, [pc, #376]	@ (800d258 <_dtoa_r+0x2c8>)
 800d0de:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800d0e2:	ed91 7b00 	vldr	d7, [r1]
 800d0e6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ee:	d501      	bpl.n	800d0f4 <_dtoa_r+0x164>
 800d0f0:	f108 38ff 	add.w	r8, r8, #4294967295
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	e01e      	b.n	800d136 <_dtoa_r+0x1a6>
 800d0f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0fa:	4413      	add	r3, r2
 800d0fc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800d100:	2920      	cmp	r1, #32
 800d102:	bfc1      	itttt	gt
 800d104:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800d108:	408e      	lslgt	r6, r1
 800d10a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800d10e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800d112:	bfd6      	itet	le
 800d114:	f1c1 0120 	rsble	r1, r1, #32
 800d118:	4331      	orrgt	r1, r6
 800d11a:	fa04 f101 	lslle.w	r1, r4, r1
 800d11e:	ee07 1a90 	vmov	s15, r1
 800d122:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d126:	3b01      	subs	r3, #1
 800d128:	ee17 1a90 	vmov	r1, s15
 800d12c:	2501      	movs	r5, #1
 800d12e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800d132:	e7a8      	b.n	800d086 <_dtoa_r+0xf6>
 800d134:	2101      	movs	r1, #1
 800d136:	1ad2      	subs	r2, r2, r3
 800d138:	1e53      	subs	r3, r2, #1
 800d13a:	9306      	str	r3, [sp, #24]
 800d13c:	bf45      	ittet	mi
 800d13e:	f1c2 0301 	rsbmi	r3, r2, #1
 800d142:	9304      	strmi	r3, [sp, #16]
 800d144:	2300      	movpl	r3, #0
 800d146:	2300      	movmi	r3, #0
 800d148:	bf4c      	ite	mi
 800d14a:	9306      	strmi	r3, [sp, #24]
 800d14c:	9304      	strpl	r3, [sp, #16]
 800d14e:	f1b8 0f00 	cmp.w	r8, #0
 800d152:	910c      	str	r1, [sp, #48]	@ 0x30
 800d154:	db18      	blt.n	800d188 <_dtoa_r+0x1f8>
 800d156:	9b06      	ldr	r3, [sp, #24]
 800d158:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d15c:	4443      	add	r3, r8
 800d15e:	9306      	str	r3, [sp, #24]
 800d160:	2300      	movs	r3, #0
 800d162:	9a07      	ldr	r2, [sp, #28]
 800d164:	2a09      	cmp	r2, #9
 800d166:	d845      	bhi.n	800d1f4 <_dtoa_r+0x264>
 800d168:	2a05      	cmp	r2, #5
 800d16a:	bfc4      	itt	gt
 800d16c:	3a04      	subgt	r2, #4
 800d16e:	9207      	strgt	r2, [sp, #28]
 800d170:	9a07      	ldr	r2, [sp, #28]
 800d172:	f1a2 0202 	sub.w	r2, r2, #2
 800d176:	bfcc      	ite	gt
 800d178:	2400      	movgt	r4, #0
 800d17a:	2401      	movle	r4, #1
 800d17c:	2a03      	cmp	r2, #3
 800d17e:	d844      	bhi.n	800d20a <_dtoa_r+0x27a>
 800d180:	e8df f002 	tbb	[pc, r2]
 800d184:	0b173634 	.word	0x0b173634
 800d188:	9b04      	ldr	r3, [sp, #16]
 800d18a:	2200      	movs	r2, #0
 800d18c:	eba3 0308 	sub.w	r3, r3, r8
 800d190:	9304      	str	r3, [sp, #16]
 800d192:	920a      	str	r2, [sp, #40]	@ 0x28
 800d194:	f1c8 0300 	rsb	r3, r8, #0
 800d198:	e7e3      	b.n	800d162 <_dtoa_r+0x1d2>
 800d19a:	2201      	movs	r2, #1
 800d19c:	9208      	str	r2, [sp, #32]
 800d19e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1a0:	eb08 0b02 	add.w	fp, r8, r2
 800d1a4:	f10b 0a01 	add.w	sl, fp, #1
 800d1a8:	4652      	mov	r2, sl
 800d1aa:	2a01      	cmp	r2, #1
 800d1ac:	bfb8      	it	lt
 800d1ae:	2201      	movlt	r2, #1
 800d1b0:	e006      	b.n	800d1c0 <_dtoa_r+0x230>
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	9208      	str	r2, [sp, #32]
 800d1b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1b8:	2a00      	cmp	r2, #0
 800d1ba:	dd29      	ble.n	800d210 <_dtoa_r+0x280>
 800d1bc:	4693      	mov	fp, r2
 800d1be:	4692      	mov	sl, r2
 800d1c0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	2004      	movs	r0, #4
 800d1c8:	f100 0614 	add.w	r6, r0, #20
 800d1cc:	4296      	cmp	r6, r2
 800d1ce:	d926      	bls.n	800d21e <_dtoa_r+0x28e>
 800d1d0:	6079      	str	r1, [r7, #4]
 800d1d2:	4648      	mov	r0, r9
 800d1d4:	9305      	str	r3, [sp, #20]
 800d1d6:	f000 fc83 	bl	800dae0 <_Balloc>
 800d1da:	9b05      	ldr	r3, [sp, #20]
 800d1dc:	4607      	mov	r7, r0
 800d1de:	2800      	cmp	r0, #0
 800d1e0:	d13e      	bne.n	800d260 <_dtoa_r+0x2d0>
 800d1e2:	4b1e      	ldr	r3, [pc, #120]	@ (800d25c <_dtoa_r+0x2cc>)
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800d1ea:	e6ea      	b.n	800cfc2 <_dtoa_r+0x32>
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	e7e1      	b.n	800d1b4 <_dtoa_r+0x224>
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	e7d3      	b.n	800d19c <_dtoa_r+0x20c>
 800d1f4:	2401      	movs	r4, #1
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d1fc:	f04f 3bff 	mov.w	fp, #4294967295
 800d200:	2100      	movs	r1, #0
 800d202:	46da      	mov	sl, fp
 800d204:	2212      	movs	r2, #18
 800d206:	9109      	str	r1, [sp, #36]	@ 0x24
 800d208:	e7da      	b.n	800d1c0 <_dtoa_r+0x230>
 800d20a:	2201      	movs	r2, #1
 800d20c:	9208      	str	r2, [sp, #32]
 800d20e:	e7f5      	b.n	800d1fc <_dtoa_r+0x26c>
 800d210:	f04f 0b01 	mov.w	fp, #1
 800d214:	46da      	mov	sl, fp
 800d216:	465a      	mov	r2, fp
 800d218:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800d21c:	e7d0      	b.n	800d1c0 <_dtoa_r+0x230>
 800d21e:	3101      	adds	r1, #1
 800d220:	0040      	lsls	r0, r0, #1
 800d222:	e7d1      	b.n	800d1c8 <_dtoa_r+0x238>
 800d224:	f3af 8000 	nop.w
 800d228:	636f4361 	.word	0x636f4361
 800d22c:	3fd287a7 	.word	0x3fd287a7
 800d230:	8b60c8b3 	.word	0x8b60c8b3
 800d234:	3fc68a28 	.word	0x3fc68a28
 800d238:	509f79fb 	.word	0x509f79fb
 800d23c:	3fd34413 	.word	0x3fd34413
 800d240:	0800e8f9 	.word	0x0800e8f9
 800d244:	0800e910 	.word	0x0800e910
 800d248:	7ff00000 	.word	0x7ff00000
 800d24c:	0800e8f5 	.word	0x0800e8f5
 800d250:	0800e8c9 	.word	0x0800e8c9
 800d254:	0800e8c8 	.word	0x0800e8c8
 800d258:	0800ea60 	.word	0x0800ea60
 800d25c:	0800e968 	.word	0x0800e968
 800d260:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800d264:	f1ba 0f0e 	cmp.w	sl, #14
 800d268:	6010      	str	r0, [r2, #0]
 800d26a:	d86e      	bhi.n	800d34a <_dtoa_r+0x3ba>
 800d26c:	2c00      	cmp	r4, #0
 800d26e:	d06c      	beq.n	800d34a <_dtoa_r+0x3ba>
 800d270:	f1b8 0f00 	cmp.w	r8, #0
 800d274:	f340 80b4 	ble.w	800d3e0 <_dtoa_r+0x450>
 800d278:	4ac8      	ldr	r2, [pc, #800]	@ (800d59c <_dtoa_r+0x60c>)
 800d27a:	f008 010f 	and.w	r1, r8, #15
 800d27e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d282:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800d286:	ed92 7b00 	vldr	d7, [r2]
 800d28a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800d28e:	f000 809b 	beq.w	800d3c8 <_dtoa_r+0x438>
 800d292:	4ac3      	ldr	r2, [pc, #780]	@ (800d5a0 <_dtoa_r+0x610>)
 800d294:	ed92 6b08 	vldr	d6, [r2, #32]
 800d298:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d29c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d2a0:	f001 010f 	and.w	r1, r1, #15
 800d2a4:	2203      	movs	r2, #3
 800d2a6:	48be      	ldr	r0, [pc, #760]	@ (800d5a0 <_dtoa_r+0x610>)
 800d2a8:	2900      	cmp	r1, #0
 800d2aa:	f040 808f 	bne.w	800d3cc <_dtoa_r+0x43c>
 800d2ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d2b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d2b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d2ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d2bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d2c0:	2900      	cmp	r1, #0
 800d2c2:	f000 80b3 	beq.w	800d42c <_dtoa_r+0x49c>
 800d2c6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d2ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2d2:	f140 80ab 	bpl.w	800d42c <_dtoa_r+0x49c>
 800d2d6:	f1ba 0f00 	cmp.w	sl, #0
 800d2da:	f000 80a7 	beq.w	800d42c <_dtoa_r+0x49c>
 800d2de:	f1bb 0f00 	cmp.w	fp, #0
 800d2e2:	dd30      	ble.n	800d346 <_dtoa_r+0x3b6>
 800d2e4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d2e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d2ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d2f0:	f108 31ff 	add.w	r1, r8, #4294967295
 800d2f4:	9105      	str	r1, [sp, #20]
 800d2f6:	3201      	adds	r2, #1
 800d2f8:	465c      	mov	r4, fp
 800d2fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d2fe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800d302:	ee07 2a90 	vmov	s15, r2
 800d306:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d30a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d30e:	ee15 2a90 	vmov	r2, s11
 800d312:	ec51 0b15 	vmov	r0, r1, d5
 800d316:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800d31a:	2c00      	cmp	r4, #0
 800d31c:	f040 808a 	bne.w	800d434 <_dtoa_r+0x4a4>
 800d320:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d324:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d328:	ec41 0b17 	vmov	d7, r0, r1
 800d32c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d334:	f300 826a 	bgt.w	800d80c <_dtoa_r+0x87c>
 800d338:	eeb1 7b47 	vneg.f64	d7, d7
 800d33c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d344:	d423      	bmi.n	800d38e <_dtoa_r+0x3fe>
 800d346:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d34a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d34c:	2a00      	cmp	r2, #0
 800d34e:	f2c0 8129 	blt.w	800d5a4 <_dtoa_r+0x614>
 800d352:	f1b8 0f0e 	cmp.w	r8, #14
 800d356:	f300 8125 	bgt.w	800d5a4 <_dtoa_r+0x614>
 800d35a:	4b90      	ldr	r3, [pc, #576]	@ (800d59c <_dtoa_r+0x60c>)
 800d35c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d360:	ed93 6b00 	vldr	d6, [r3]
 800d364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d366:	2b00      	cmp	r3, #0
 800d368:	f280 80c8 	bge.w	800d4fc <_dtoa_r+0x56c>
 800d36c:	f1ba 0f00 	cmp.w	sl, #0
 800d370:	f300 80c4 	bgt.w	800d4fc <_dtoa_r+0x56c>
 800d374:	d10b      	bne.n	800d38e <_dtoa_r+0x3fe>
 800d376:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d37a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d37e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d382:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d38a:	f2c0 823c 	blt.w	800d806 <_dtoa_r+0x876>
 800d38e:	2400      	movs	r4, #0
 800d390:	4625      	mov	r5, r4
 800d392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d394:	43db      	mvns	r3, r3
 800d396:	9305      	str	r3, [sp, #20]
 800d398:	463e      	mov	r6, r7
 800d39a:	f04f 0800 	mov.w	r8, #0
 800d39e:	4621      	mov	r1, r4
 800d3a0:	4648      	mov	r0, r9
 800d3a2:	f000 fbdd 	bl	800db60 <_Bfree>
 800d3a6:	2d00      	cmp	r5, #0
 800d3a8:	f000 80a2 	beq.w	800d4f0 <_dtoa_r+0x560>
 800d3ac:	f1b8 0f00 	cmp.w	r8, #0
 800d3b0:	d005      	beq.n	800d3be <_dtoa_r+0x42e>
 800d3b2:	45a8      	cmp	r8, r5
 800d3b4:	d003      	beq.n	800d3be <_dtoa_r+0x42e>
 800d3b6:	4641      	mov	r1, r8
 800d3b8:	4648      	mov	r0, r9
 800d3ba:	f000 fbd1 	bl	800db60 <_Bfree>
 800d3be:	4629      	mov	r1, r5
 800d3c0:	4648      	mov	r0, r9
 800d3c2:	f000 fbcd 	bl	800db60 <_Bfree>
 800d3c6:	e093      	b.n	800d4f0 <_dtoa_r+0x560>
 800d3c8:	2202      	movs	r2, #2
 800d3ca:	e76c      	b.n	800d2a6 <_dtoa_r+0x316>
 800d3cc:	07cc      	lsls	r4, r1, #31
 800d3ce:	d504      	bpl.n	800d3da <_dtoa_r+0x44a>
 800d3d0:	ed90 6b00 	vldr	d6, [r0]
 800d3d4:	3201      	adds	r2, #1
 800d3d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d3da:	1049      	asrs	r1, r1, #1
 800d3dc:	3008      	adds	r0, #8
 800d3de:	e763      	b.n	800d2a8 <_dtoa_r+0x318>
 800d3e0:	d022      	beq.n	800d428 <_dtoa_r+0x498>
 800d3e2:	f1c8 0100 	rsb	r1, r8, #0
 800d3e6:	4a6d      	ldr	r2, [pc, #436]	@ (800d59c <_dtoa_r+0x60c>)
 800d3e8:	f001 000f 	and.w	r0, r1, #15
 800d3ec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d3f0:	ed92 7b00 	vldr	d7, [r2]
 800d3f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d3f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d3fc:	4868      	ldr	r0, [pc, #416]	@ (800d5a0 <_dtoa_r+0x610>)
 800d3fe:	1109      	asrs	r1, r1, #4
 800d400:	2400      	movs	r4, #0
 800d402:	2202      	movs	r2, #2
 800d404:	b929      	cbnz	r1, 800d412 <_dtoa_r+0x482>
 800d406:	2c00      	cmp	r4, #0
 800d408:	f43f af57 	beq.w	800d2ba <_dtoa_r+0x32a>
 800d40c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d410:	e753      	b.n	800d2ba <_dtoa_r+0x32a>
 800d412:	07ce      	lsls	r6, r1, #31
 800d414:	d505      	bpl.n	800d422 <_dtoa_r+0x492>
 800d416:	ed90 6b00 	vldr	d6, [r0]
 800d41a:	3201      	adds	r2, #1
 800d41c:	2401      	movs	r4, #1
 800d41e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d422:	1049      	asrs	r1, r1, #1
 800d424:	3008      	adds	r0, #8
 800d426:	e7ed      	b.n	800d404 <_dtoa_r+0x474>
 800d428:	2202      	movs	r2, #2
 800d42a:	e746      	b.n	800d2ba <_dtoa_r+0x32a>
 800d42c:	f8cd 8014 	str.w	r8, [sp, #20]
 800d430:	4654      	mov	r4, sl
 800d432:	e762      	b.n	800d2fa <_dtoa_r+0x36a>
 800d434:	4a59      	ldr	r2, [pc, #356]	@ (800d59c <_dtoa_r+0x60c>)
 800d436:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d43a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d43e:	9a08      	ldr	r2, [sp, #32]
 800d440:	ec41 0b17 	vmov	d7, r0, r1
 800d444:	443c      	add	r4, r7
 800d446:	b34a      	cbz	r2, 800d49c <_dtoa_r+0x50c>
 800d448:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800d44c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800d450:	463e      	mov	r6, r7
 800d452:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d456:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d45a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d45e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d462:	ee14 2a90 	vmov	r2, s9
 800d466:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d46a:	3230      	adds	r2, #48	@ 0x30
 800d46c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d470:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d478:	f806 2b01 	strb.w	r2, [r6], #1
 800d47c:	d438      	bmi.n	800d4f0 <_dtoa_r+0x560>
 800d47e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d482:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d48a:	d46e      	bmi.n	800d56a <_dtoa_r+0x5da>
 800d48c:	42a6      	cmp	r6, r4
 800d48e:	f43f af5a 	beq.w	800d346 <_dtoa_r+0x3b6>
 800d492:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d496:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d49a:	e7e0      	b.n	800d45e <_dtoa_r+0x4ce>
 800d49c:	4621      	mov	r1, r4
 800d49e:	463e      	mov	r6, r7
 800d4a0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d4a4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d4a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d4ac:	ee14 2a90 	vmov	r2, s9
 800d4b0:	3230      	adds	r2, #48	@ 0x30
 800d4b2:	f806 2b01 	strb.w	r2, [r6], #1
 800d4b6:	42a6      	cmp	r6, r4
 800d4b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d4bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d4c0:	d119      	bne.n	800d4f6 <_dtoa_r+0x566>
 800d4c2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800d4c6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d4ca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d2:	dc4a      	bgt.n	800d56a <_dtoa_r+0x5da>
 800d4d4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d4d8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d4dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4e0:	f57f af31 	bpl.w	800d346 <_dtoa_r+0x3b6>
 800d4e4:	460e      	mov	r6, r1
 800d4e6:	3901      	subs	r1, #1
 800d4e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d4ec:	2b30      	cmp	r3, #48	@ 0x30
 800d4ee:	d0f9      	beq.n	800d4e4 <_dtoa_r+0x554>
 800d4f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d4f4:	e027      	b.n	800d546 <_dtoa_r+0x5b6>
 800d4f6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d4fa:	e7d5      	b.n	800d4a8 <_dtoa_r+0x518>
 800d4fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d500:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800d504:	463e      	mov	r6, r7
 800d506:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d50a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d50e:	ee15 3a10 	vmov	r3, s10
 800d512:	3330      	adds	r3, #48	@ 0x30
 800d514:	f806 3b01 	strb.w	r3, [r6], #1
 800d518:	1bf3      	subs	r3, r6, r7
 800d51a:	459a      	cmp	sl, r3
 800d51c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d520:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d524:	d132      	bne.n	800d58c <_dtoa_r+0x5fc>
 800d526:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d52a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d532:	dc18      	bgt.n	800d566 <_dtoa_r+0x5d6>
 800d534:	eeb4 7b46 	vcmp.f64	d7, d6
 800d538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d53c:	d103      	bne.n	800d546 <_dtoa_r+0x5b6>
 800d53e:	ee15 3a10 	vmov	r3, s10
 800d542:	07db      	lsls	r3, r3, #31
 800d544:	d40f      	bmi.n	800d566 <_dtoa_r+0x5d6>
 800d546:	9901      	ldr	r1, [sp, #4]
 800d548:	4648      	mov	r0, r9
 800d54a:	f000 fb09 	bl	800db60 <_Bfree>
 800d54e:	2300      	movs	r3, #0
 800d550:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d552:	7033      	strb	r3, [r6, #0]
 800d554:	f108 0301 	add.w	r3, r8, #1
 800d558:	6013      	str	r3, [r2, #0]
 800d55a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	f000 824b 	beq.w	800d9f8 <_dtoa_r+0xa68>
 800d562:	601e      	str	r6, [r3, #0]
 800d564:	e248      	b.n	800d9f8 <_dtoa_r+0xa68>
 800d566:	f8cd 8014 	str.w	r8, [sp, #20]
 800d56a:	4633      	mov	r3, r6
 800d56c:	461e      	mov	r6, r3
 800d56e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d572:	2a39      	cmp	r2, #57	@ 0x39
 800d574:	d106      	bne.n	800d584 <_dtoa_r+0x5f4>
 800d576:	429f      	cmp	r7, r3
 800d578:	d1f8      	bne.n	800d56c <_dtoa_r+0x5dc>
 800d57a:	9a05      	ldr	r2, [sp, #20]
 800d57c:	3201      	adds	r2, #1
 800d57e:	9205      	str	r2, [sp, #20]
 800d580:	2230      	movs	r2, #48	@ 0x30
 800d582:	703a      	strb	r2, [r7, #0]
 800d584:	781a      	ldrb	r2, [r3, #0]
 800d586:	3201      	adds	r2, #1
 800d588:	701a      	strb	r2, [r3, #0]
 800d58a:	e7b1      	b.n	800d4f0 <_dtoa_r+0x560>
 800d58c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d590:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d598:	d1b5      	bne.n	800d506 <_dtoa_r+0x576>
 800d59a:	e7d4      	b.n	800d546 <_dtoa_r+0x5b6>
 800d59c:	0800ea60 	.word	0x0800ea60
 800d5a0:	0800ea38 	.word	0x0800ea38
 800d5a4:	9908      	ldr	r1, [sp, #32]
 800d5a6:	2900      	cmp	r1, #0
 800d5a8:	f000 80e9 	beq.w	800d77e <_dtoa_r+0x7ee>
 800d5ac:	9907      	ldr	r1, [sp, #28]
 800d5ae:	2901      	cmp	r1, #1
 800d5b0:	f300 80cb 	bgt.w	800d74a <_dtoa_r+0x7ba>
 800d5b4:	2d00      	cmp	r5, #0
 800d5b6:	f000 80c4 	beq.w	800d742 <_dtoa_r+0x7b2>
 800d5ba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d5be:	9e04      	ldr	r6, [sp, #16]
 800d5c0:	461c      	mov	r4, r3
 800d5c2:	9305      	str	r3, [sp, #20]
 800d5c4:	9b04      	ldr	r3, [sp, #16]
 800d5c6:	4413      	add	r3, r2
 800d5c8:	9304      	str	r3, [sp, #16]
 800d5ca:	9b06      	ldr	r3, [sp, #24]
 800d5cc:	2101      	movs	r1, #1
 800d5ce:	4413      	add	r3, r2
 800d5d0:	4648      	mov	r0, r9
 800d5d2:	9306      	str	r3, [sp, #24]
 800d5d4:	f000 fb78 	bl	800dcc8 <__i2b>
 800d5d8:	9b05      	ldr	r3, [sp, #20]
 800d5da:	4605      	mov	r5, r0
 800d5dc:	b166      	cbz	r6, 800d5f8 <_dtoa_r+0x668>
 800d5de:	9a06      	ldr	r2, [sp, #24]
 800d5e0:	2a00      	cmp	r2, #0
 800d5e2:	dd09      	ble.n	800d5f8 <_dtoa_r+0x668>
 800d5e4:	42b2      	cmp	r2, r6
 800d5e6:	9904      	ldr	r1, [sp, #16]
 800d5e8:	bfa8      	it	ge
 800d5ea:	4632      	movge	r2, r6
 800d5ec:	1a89      	subs	r1, r1, r2
 800d5ee:	9104      	str	r1, [sp, #16]
 800d5f0:	9906      	ldr	r1, [sp, #24]
 800d5f2:	1ab6      	subs	r6, r6, r2
 800d5f4:	1a8a      	subs	r2, r1, r2
 800d5f6:	9206      	str	r2, [sp, #24]
 800d5f8:	b30b      	cbz	r3, 800d63e <_dtoa_r+0x6ae>
 800d5fa:	9a08      	ldr	r2, [sp, #32]
 800d5fc:	2a00      	cmp	r2, #0
 800d5fe:	f000 80c5 	beq.w	800d78c <_dtoa_r+0x7fc>
 800d602:	2c00      	cmp	r4, #0
 800d604:	f000 80bf 	beq.w	800d786 <_dtoa_r+0x7f6>
 800d608:	4629      	mov	r1, r5
 800d60a:	4622      	mov	r2, r4
 800d60c:	4648      	mov	r0, r9
 800d60e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d610:	f000 fc12 	bl	800de38 <__pow5mult>
 800d614:	9a01      	ldr	r2, [sp, #4]
 800d616:	4601      	mov	r1, r0
 800d618:	4605      	mov	r5, r0
 800d61a:	4648      	mov	r0, r9
 800d61c:	f000 fb6a 	bl	800dcf4 <__multiply>
 800d620:	9901      	ldr	r1, [sp, #4]
 800d622:	9005      	str	r0, [sp, #20]
 800d624:	4648      	mov	r0, r9
 800d626:	f000 fa9b 	bl	800db60 <_Bfree>
 800d62a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d62c:	1b1b      	subs	r3, r3, r4
 800d62e:	f000 80b0 	beq.w	800d792 <_dtoa_r+0x802>
 800d632:	9905      	ldr	r1, [sp, #20]
 800d634:	461a      	mov	r2, r3
 800d636:	4648      	mov	r0, r9
 800d638:	f000 fbfe 	bl	800de38 <__pow5mult>
 800d63c:	9001      	str	r0, [sp, #4]
 800d63e:	2101      	movs	r1, #1
 800d640:	4648      	mov	r0, r9
 800d642:	f000 fb41 	bl	800dcc8 <__i2b>
 800d646:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d648:	4604      	mov	r4, r0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	f000 81da 	beq.w	800da04 <_dtoa_r+0xa74>
 800d650:	461a      	mov	r2, r3
 800d652:	4601      	mov	r1, r0
 800d654:	4648      	mov	r0, r9
 800d656:	f000 fbef 	bl	800de38 <__pow5mult>
 800d65a:	9b07      	ldr	r3, [sp, #28]
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	4604      	mov	r4, r0
 800d660:	f300 80a0 	bgt.w	800d7a4 <_dtoa_r+0x814>
 800d664:	9b02      	ldr	r3, [sp, #8]
 800d666:	2b00      	cmp	r3, #0
 800d668:	f040 8096 	bne.w	800d798 <_dtoa_r+0x808>
 800d66c:	9b03      	ldr	r3, [sp, #12]
 800d66e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d672:	2a00      	cmp	r2, #0
 800d674:	f040 8092 	bne.w	800d79c <_dtoa_r+0x80c>
 800d678:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d67c:	0d12      	lsrs	r2, r2, #20
 800d67e:	0512      	lsls	r2, r2, #20
 800d680:	2a00      	cmp	r2, #0
 800d682:	f000 808d 	beq.w	800d7a0 <_dtoa_r+0x810>
 800d686:	9b04      	ldr	r3, [sp, #16]
 800d688:	3301      	adds	r3, #1
 800d68a:	9304      	str	r3, [sp, #16]
 800d68c:	9b06      	ldr	r3, [sp, #24]
 800d68e:	3301      	adds	r3, #1
 800d690:	9306      	str	r3, [sp, #24]
 800d692:	2301      	movs	r3, #1
 800d694:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d696:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d698:	2b00      	cmp	r3, #0
 800d69a:	f000 81b9 	beq.w	800da10 <_dtoa_r+0xa80>
 800d69e:	6922      	ldr	r2, [r4, #16]
 800d6a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d6a4:	6910      	ldr	r0, [r2, #16]
 800d6a6:	f000 fac3 	bl	800dc30 <__hi0bits>
 800d6aa:	f1c0 0020 	rsb	r0, r0, #32
 800d6ae:	9b06      	ldr	r3, [sp, #24]
 800d6b0:	4418      	add	r0, r3
 800d6b2:	f010 001f 	ands.w	r0, r0, #31
 800d6b6:	f000 8081 	beq.w	800d7bc <_dtoa_r+0x82c>
 800d6ba:	f1c0 0220 	rsb	r2, r0, #32
 800d6be:	2a04      	cmp	r2, #4
 800d6c0:	dd73      	ble.n	800d7aa <_dtoa_r+0x81a>
 800d6c2:	9b04      	ldr	r3, [sp, #16]
 800d6c4:	f1c0 001c 	rsb	r0, r0, #28
 800d6c8:	4403      	add	r3, r0
 800d6ca:	9304      	str	r3, [sp, #16]
 800d6cc:	9b06      	ldr	r3, [sp, #24]
 800d6ce:	4406      	add	r6, r0
 800d6d0:	4403      	add	r3, r0
 800d6d2:	9306      	str	r3, [sp, #24]
 800d6d4:	9b04      	ldr	r3, [sp, #16]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	dd05      	ble.n	800d6e6 <_dtoa_r+0x756>
 800d6da:	9901      	ldr	r1, [sp, #4]
 800d6dc:	461a      	mov	r2, r3
 800d6de:	4648      	mov	r0, r9
 800d6e0:	f000 fc04 	bl	800deec <__lshift>
 800d6e4:	9001      	str	r0, [sp, #4]
 800d6e6:	9b06      	ldr	r3, [sp, #24]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	dd05      	ble.n	800d6f8 <_dtoa_r+0x768>
 800d6ec:	4621      	mov	r1, r4
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	4648      	mov	r0, r9
 800d6f2:	f000 fbfb 	bl	800deec <__lshift>
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d060      	beq.n	800d7c0 <_dtoa_r+0x830>
 800d6fe:	9801      	ldr	r0, [sp, #4]
 800d700:	4621      	mov	r1, r4
 800d702:	f000 fc5f 	bl	800dfc4 <__mcmp>
 800d706:	2800      	cmp	r0, #0
 800d708:	da5a      	bge.n	800d7c0 <_dtoa_r+0x830>
 800d70a:	f108 33ff 	add.w	r3, r8, #4294967295
 800d70e:	9305      	str	r3, [sp, #20]
 800d710:	9901      	ldr	r1, [sp, #4]
 800d712:	2300      	movs	r3, #0
 800d714:	220a      	movs	r2, #10
 800d716:	4648      	mov	r0, r9
 800d718:	f000 fa44 	bl	800dba4 <__multadd>
 800d71c:	9b08      	ldr	r3, [sp, #32]
 800d71e:	9001      	str	r0, [sp, #4]
 800d720:	2b00      	cmp	r3, #0
 800d722:	f000 8177 	beq.w	800da14 <_dtoa_r+0xa84>
 800d726:	4629      	mov	r1, r5
 800d728:	2300      	movs	r3, #0
 800d72a:	220a      	movs	r2, #10
 800d72c:	4648      	mov	r0, r9
 800d72e:	f000 fa39 	bl	800dba4 <__multadd>
 800d732:	f1bb 0f00 	cmp.w	fp, #0
 800d736:	4605      	mov	r5, r0
 800d738:	dc6e      	bgt.n	800d818 <_dtoa_r+0x888>
 800d73a:	9b07      	ldr	r3, [sp, #28]
 800d73c:	2b02      	cmp	r3, #2
 800d73e:	dc48      	bgt.n	800d7d2 <_dtoa_r+0x842>
 800d740:	e06a      	b.n	800d818 <_dtoa_r+0x888>
 800d742:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d744:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d748:	e739      	b.n	800d5be <_dtoa_r+0x62e>
 800d74a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800d74e:	42a3      	cmp	r3, r4
 800d750:	db07      	blt.n	800d762 <_dtoa_r+0x7d2>
 800d752:	f1ba 0f00 	cmp.w	sl, #0
 800d756:	eba3 0404 	sub.w	r4, r3, r4
 800d75a:	db0b      	blt.n	800d774 <_dtoa_r+0x7e4>
 800d75c:	9e04      	ldr	r6, [sp, #16]
 800d75e:	4652      	mov	r2, sl
 800d760:	e72f      	b.n	800d5c2 <_dtoa_r+0x632>
 800d762:	1ae2      	subs	r2, r4, r3
 800d764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d766:	9e04      	ldr	r6, [sp, #16]
 800d768:	4413      	add	r3, r2
 800d76a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d76c:	4652      	mov	r2, sl
 800d76e:	4623      	mov	r3, r4
 800d770:	2400      	movs	r4, #0
 800d772:	e726      	b.n	800d5c2 <_dtoa_r+0x632>
 800d774:	9a04      	ldr	r2, [sp, #16]
 800d776:	eba2 060a 	sub.w	r6, r2, sl
 800d77a:	2200      	movs	r2, #0
 800d77c:	e721      	b.n	800d5c2 <_dtoa_r+0x632>
 800d77e:	9e04      	ldr	r6, [sp, #16]
 800d780:	9d08      	ldr	r5, [sp, #32]
 800d782:	461c      	mov	r4, r3
 800d784:	e72a      	b.n	800d5dc <_dtoa_r+0x64c>
 800d786:	9a01      	ldr	r2, [sp, #4]
 800d788:	9205      	str	r2, [sp, #20]
 800d78a:	e752      	b.n	800d632 <_dtoa_r+0x6a2>
 800d78c:	9901      	ldr	r1, [sp, #4]
 800d78e:	461a      	mov	r2, r3
 800d790:	e751      	b.n	800d636 <_dtoa_r+0x6a6>
 800d792:	9b05      	ldr	r3, [sp, #20]
 800d794:	9301      	str	r3, [sp, #4]
 800d796:	e752      	b.n	800d63e <_dtoa_r+0x6ae>
 800d798:	2300      	movs	r3, #0
 800d79a:	e77b      	b.n	800d694 <_dtoa_r+0x704>
 800d79c:	9b02      	ldr	r3, [sp, #8]
 800d79e:	e779      	b.n	800d694 <_dtoa_r+0x704>
 800d7a0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d7a2:	e778      	b.n	800d696 <_dtoa_r+0x706>
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d7a8:	e779      	b.n	800d69e <_dtoa_r+0x70e>
 800d7aa:	d093      	beq.n	800d6d4 <_dtoa_r+0x744>
 800d7ac:	9b04      	ldr	r3, [sp, #16]
 800d7ae:	321c      	adds	r2, #28
 800d7b0:	4413      	add	r3, r2
 800d7b2:	9304      	str	r3, [sp, #16]
 800d7b4:	9b06      	ldr	r3, [sp, #24]
 800d7b6:	4416      	add	r6, r2
 800d7b8:	4413      	add	r3, r2
 800d7ba:	e78a      	b.n	800d6d2 <_dtoa_r+0x742>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	e7f5      	b.n	800d7ac <_dtoa_r+0x81c>
 800d7c0:	f1ba 0f00 	cmp.w	sl, #0
 800d7c4:	f8cd 8014 	str.w	r8, [sp, #20]
 800d7c8:	46d3      	mov	fp, sl
 800d7ca:	dc21      	bgt.n	800d810 <_dtoa_r+0x880>
 800d7cc:	9b07      	ldr	r3, [sp, #28]
 800d7ce:	2b02      	cmp	r3, #2
 800d7d0:	dd1e      	ble.n	800d810 <_dtoa_r+0x880>
 800d7d2:	f1bb 0f00 	cmp.w	fp, #0
 800d7d6:	f47f addc 	bne.w	800d392 <_dtoa_r+0x402>
 800d7da:	4621      	mov	r1, r4
 800d7dc:	465b      	mov	r3, fp
 800d7de:	2205      	movs	r2, #5
 800d7e0:	4648      	mov	r0, r9
 800d7e2:	f000 f9df 	bl	800dba4 <__multadd>
 800d7e6:	4601      	mov	r1, r0
 800d7e8:	4604      	mov	r4, r0
 800d7ea:	9801      	ldr	r0, [sp, #4]
 800d7ec:	f000 fbea 	bl	800dfc4 <__mcmp>
 800d7f0:	2800      	cmp	r0, #0
 800d7f2:	f77f adce 	ble.w	800d392 <_dtoa_r+0x402>
 800d7f6:	463e      	mov	r6, r7
 800d7f8:	2331      	movs	r3, #49	@ 0x31
 800d7fa:	f806 3b01 	strb.w	r3, [r6], #1
 800d7fe:	9b05      	ldr	r3, [sp, #20]
 800d800:	3301      	adds	r3, #1
 800d802:	9305      	str	r3, [sp, #20]
 800d804:	e5c9      	b.n	800d39a <_dtoa_r+0x40a>
 800d806:	f8cd 8014 	str.w	r8, [sp, #20]
 800d80a:	4654      	mov	r4, sl
 800d80c:	4625      	mov	r5, r4
 800d80e:	e7f2      	b.n	800d7f6 <_dtoa_r+0x866>
 800d810:	9b08      	ldr	r3, [sp, #32]
 800d812:	2b00      	cmp	r3, #0
 800d814:	f000 8102 	beq.w	800da1c <_dtoa_r+0xa8c>
 800d818:	2e00      	cmp	r6, #0
 800d81a:	dd05      	ble.n	800d828 <_dtoa_r+0x898>
 800d81c:	4629      	mov	r1, r5
 800d81e:	4632      	mov	r2, r6
 800d820:	4648      	mov	r0, r9
 800d822:	f000 fb63 	bl	800deec <__lshift>
 800d826:	4605      	mov	r5, r0
 800d828:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d058      	beq.n	800d8e0 <_dtoa_r+0x950>
 800d82e:	6869      	ldr	r1, [r5, #4]
 800d830:	4648      	mov	r0, r9
 800d832:	f000 f955 	bl	800dae0 <_Balloc>
 800d836:	4606      	mov	r6, r0
 800d838:	b928      	cbnz	r0, 800d846 <_dtoa_r+0x8b6>
 800d83a:	4b82      	ldr	r3, [pc, #520]	@ (800da44 <_dtoa_r+0xab4>)
 800d83c:	4602      	mov	r2, r0
 800d83e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d842:	f7ff bbbe 	b.w	800cfc2 <_dtoa_r+0x32>
 800d846:	692a      	ldr	r2, [r5, #16]
 800d848:	3202      	adds	r2, #2
 800d84a:	0092      	lsls	r2, r2, #2
 800d84c:	f105 010c 	add.w	r1, r5, #12
 800d850:	300c      	adds	r0, #12
 800d852:	f7ff fb04 	bl	800ce5e <memcpy>
 800d856:	2201      	movs	r2, #1
 800d858:	4631      	mov	r1, r6
 800d85a:	4648      	mov	r0, r9
 800d85c:	f000 fb46 	bl	800deec <__lshift>
 800d860:	1c7b      	adds	r3, r7, #1
 800d862:	9304      	str	r3, [sp, #16]
 800d864:	eb07 030b 	add.w	r3, r7, fp
 800d868:	9309      	str	r3, [sp, #36]	@ 0x24
 800d86a:	9b02      	ldr	r3, [sp, #8]
 800d86c:	f003 0301 	and.w	r3, r3, #1
 800d870:	46a8      	mov	r8, r5
 800d872:	9308      	str	r3, [sp, #32]
 800d874:	4605      	mov	r5, r0
 800d876:	9b04      	ldr	r3, [sp, #16]
 800d878:	9801      	ldr	r0, [sp, #4]
 800d87a:	4621      	mov	r1, r4
 800d87c:	f103 3bff 	add.w	fp, r3, #4294967295
 800d880:	f7ff fafb 	bl	800ce7a <quorem>
 800d884:	4641      	mov	r1, r8
 800d886:	9002      	str	r0, [sp, #8]
 800d888:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d88c:	9801      	ldr	r0, [sp, #4]
 800d88e:	f000 fb99 	bl	800dfc4 <__mcmp>
 800d892:	462a      	mov	r2, r5
 800d894:	9006      	str	r0, [sp, #24]
 800d896:	4621      	mov	r1, r4
 800d898:	4648      	mov	r0, r9
 800d89a:	f000 fbaf 	bl	800dffc <__mdiff>
 800d89e:	68c2      	ldr	r2, [r0, #12]
 800d8a0:	4606      	mov	r6, r0
 800d8a2:	b9fa      	cbnz	r2, 800d8e4 <_dtoa_r+0x954>
 800d8a4:	4601      	mov	r1, r0
 800d8a6:	9801      	ldr	r0, [sp, #4]
 800d8a8:	f000 fb8c 	bl	800dfc4 <__mcmp>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	4631      	mov	r1, r6
 800d8b0:	4648      	mov	r0, r9
 800d8b2:	920a      	str	r2, [sp, #40]	@ 0x28
 800d8b4:	f000 f954 	bl	800db60 <_Bfree>
 800d8b8:	9b07      	ldr	r3, [sp, #28]
 800d8ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d8bc:	9e04      	ldr	r6, [sp, #16]
 800d8be:	ea42 0103 	orr.w	r1, r2, r3
 800d8c2:	9b08      	ldr	r3, [sp, #32]
 800d8c4:	4319      	orrs	r1, r3
 800d8c6:	d10f      	bne.n	800d8e8 <_dtoa_r+0x958>
 800d8c8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d8cc:	d028      	beq.n	800d920 <_dtoa_r+0x990>
 800d8ce:	9b06      	ldr	r3, [sp, #24]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	dd02      	ble.n	800d8da <_dtoa_r+0x94a>
 800d8d4:	9b02      	ldr	r3, [sp, #8]
 800d8d6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800d8da:	f88b a000 	strb.w	sl, [fp]
 800d8de:	e55e      	b.n	800d39e <_dtoa_r+0x40e>
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	e7bd      	b.n	800d860 <_dtoa_r+0x8d0>
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	e7e2      	b.n	800d8ae <_dtoa_r+0x91e>
 800d8e8:	9b06      	ldr	r3, [sp, #24]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	db04      	blt.n	800d8f8 <_dtoa_r+0x968>
 800d8ee:	9907      	ldr	r1, [sp, #28]
 800d8f0:	430b      	orrs	r3, r1
 800d8f2:	9908      	ldr	r1, [sp, #32]
 800d8f4:	430b      	orrs	r3, r1
 800d8f6:	d120      	bne.n	800d93a <_dtoa_r+0x9aa>
 800d8f8:	2a00      	cmp	r2, #0
 800d8fa:	ddee      	ble.n	800d8da <_dtoa_r+0x94a>
 800d8fc:	9901      	ldr	r1, [sp, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	4648      	mov	r0, r9
 800d902:	f000 faf3 	bl	800deec <__lshift>
 800d906:	4621      	mov	r1, r4
 800d908:	9001      	str	r0, [sp, #4]
 800d90a:	f000 fb5b 	bl	800dfc4 <__mcmp>
 800d90e:	2800      	cmp	r0, #0
 800d910:	dc03      	bgt.n	800d91a <_dtoa_r+0x98a>
 800d912:	d1e2      	bne.n	800d8da <_dtoa_r+0x94a>
 800d914:	f01a 0f01 	tst.w	sl, #1
 800d918:	d0df      	beq.n	800d8da <_dtoa_r+0x94a>
 800d91a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d91e:	d1d9      	bne.n	800d8d4 <_dtoa_r+0x944>
 800d920:	2339      	movs	r3, #57	@ 0x39
 800d922:	f88b 3000 	strb.w	r3, [fp]
 800d926:	4633      	mov	r3, r6
 800d928:	461e      	mov	r6, r3
 800d92a:	3b01      	subs	r3, #1
 800d92c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d930:	2a39      	cmp	r2, #57	@ 0x39
 800d932:	d052      	beq.n	800d9da <_dtoa_r+0xa4a>
 800d934:	3201      	adds	r2, #1
 800d936:	701a      	strb	r2, [r3, #0]
 800d938:	e531      	b.n	800d39e <_dtoa_r+0x40e>
 800d93a:	2a00      	cmp	r2, #0
 800d93c:	dd07      	ble.n	800d94e <_dtoa_r+0x9be>
 800d93e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d942:	d0ed      	beq.n	800d920 <_dtoa_r+0x990>
 800d944:	f10a 0301 	add.w	r3, sl, #1
 800d948:	f88b 3000 	strb.w	r3, [fp]
 800d94c:	e527      	b.n	800d39e <_dtoa_r+0x40e>
 800d94e:	9b04      	ldr	r3, [sp, #16]
 800d950:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d952:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d956:	4293      	cmp	r3, r2
 800d958:	d029      	beq.n	800d9ae <_dtoa_r+0xa1e>
 800d95a:	9901      	ldr	r1, [sp, #4]
 800d95c:	2300      	movs	r3, #0
 800d95e:	220a      	movs	r2, #10
 800d960:	4648      	mov	r0, r9
 800d962:	f000 f91f 	bl	800dba4 <__multadd>
 800d966:	45a8      	cmp	r8, r5
 800d968:	9001      	str	r0, [sp, #4]
 800d96a:	f04f 0300 	mov.w	r3, #0
 800d96e:	f04f 020a 	mov.w	r2, #10
 800d972:	4641      	mov	r1, r8
 800d974:	4648      	mov	r0, r9
 800d976:	d107      	bne.n	800d988 <_dtoa_r+0x9f8>
 800d978:	f000 f914 	bl	800dba4 <__multadd>
 800d97c:	4680      	mov	r8, r0
 800d97e:	4605      	mov	r5, r0
 800d980:	9b04      	ldr	r3, [sp, #16]
 800d982:	3301      	adds	r3, #1
 800d984:	9304      	str	r3, [sp, #16]
 800d986:	e776      	b.n	800d876 <_dtoa_r+0x8e6>
 800d988:	f000 f90c 	bl	800dba4 <__multadd>
 800d98c:	4629      	mov	r1, r5
 800d98e:	4680      	mov	r8, r0
 800d990:	2300      	movs	r3, #0
 800d992:	220a      	movs	r2, #10
 800d994:	4648      	mov	r0, r9
 800d996:	f000 f905 	bl	800dba4 <__multadd>
 800d99a:	4605      	mov	r5, r0
 800d99c:	e7f0      	b.n	800d980 <_dtoa_r+0x9f0>
 800d99e:	f1bb 0f00 	cmp.w	fp, #0
 800d9a2:	bfcc      	ite	gt
 800d9a4:	465e      	movgt	r6, fp
 800d9a6:	2601      	movle	r6, #1
 800d9a8:	443e      	add	r6, r7
 800d9aa:	f04f 0800 	mov.w	r8, #0
 800d9ae:	9901      	ldr	r1, [sp, #4]
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	4648      	mov	r0, r9
 800d9b4:	f000 fa9a 	bl	800deec <__lshift>
 800d9b8:	4621      	mov	r1, r4
 800d9ba:	9001      	str	r0, [sp, #4]
 800d9bc:	f000 fb02 	bl	800dfc4 <__mcmp>
 800d9c0:	2800      	cmp	r0, #0
 800d9c2:	dcb0      	bgt.n	800d926 <_dtoa_r+0x996>
 800d9c4:	d102      	bne.n	800d9cc <_dtoa_r+0xa3c>
 800d9c6:	f01a 0f01 	tst.w	sl, #1
 800d9ca:	d1ac      	bne.n	800d926 <_dtoa_r+0x996>
 800d9cc:	4633      	mov	r3, r6
 800d9ce:	461e      	mov	r6, r3
 800d9d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d9d4:	2a30      	cmp	r2, #48	@ 0x30
 800d9d6:	d0fa      	beq.n	800d9ce <_dtoa_r+0xa3e>
 800d9d8:	e4e1      	b.n	800d39e <_dtoa_r+0x40e>
 800d9da:	429f      	cmp	r7, r3
 800d9dc:	d1a4      	bne.n	800d928 <_dtoa_r+0x998>
 800d9de:	9b05      	ldr	r3, [sp, #20]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	9305      	str	r3, [sp, #20]
 800d9e4:	2331      	movs	r3, #49	@ 0x31
 800d9e6:	703b      	strb	r3, [r7, #0]
 800d9e8:	e4d9      	b.n	800d39e <_dtoa_r+0x40e>
 800d9ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d9ec:	4f16      	ldr	r7, [pc, #88]	@ (800da48 <_dtoa_r+0xab8>)
 800d9ee:	b11b      	cbz	r3, 800d9f8 <_dtoa_r+0xa68>
 800d9f0:	f107 0308 	add.w	r3, r7, #8
 800d9f4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d9f6:	6013      	str	r3, [r2, #0]
 800d9f8:	4638      	mov	r0, r7
 800d9fa:	b011      	add	sp, #68	@ 0x44
 800d9fc:	ecbd 8b02 	vpop	{d8}
 800da00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da04:	9b07      	ldr	r3, [sp, #28]
 800da06:	2b01      	cmp	r3, #1
 800da08:	f77f ae2c 	ble.w	800d664 <_dtoa_r+0x6d4>
 800da0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800da10:	2001      	movs	r0, #1
 800da12:	e64c      	b.n	800d6ae <_dtoa_r+0x71e>
 800da14:	f1bb 0f00 	cmp.w	fp, #0
 800da18:	f77f aed8 	ble.w	800d7cc <_dtoa_r+0x83c>
 800da1c:	463e      	mov	r6, r7
 800da1e:	9801      	ldr	r0, [sp, #4]
 800da20:	4621      	mov	r1, r4
 800da22:	f7ff fa2a 	bl	800ce7a <quorem>
 800da26:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800da2a:	f806 ab01 	strb.w	sl, [r6], #1
 800da2e:	1bf2      	subs	r2, r6, r7
 800da30:	4593      	cmp	fp, r2
 800da32:	ddb4      	ble.n	800d99e <_dtoa_r+0xa0e>
 800da34:	9901      	ldr	r1, [sp, #4]
 800da36:	2300      	movs	r3, #0
 800da38:	220a      	movs	r2, #10
 800da3a:	4648      	mov	r0, r9
 800da3c:	f000 f8b2 	bl	800dba4 <__multadd>
 800da40:	9001      	str	r0, [sp, #4]
 800da42:	e7ec      	b.n	800da1e <_dtoa_r+0xa8e>
 800da44:	0800e968 	.word	0x0800e968
 800da48:	0800e8ec 	.word	0x0800e8ec

0800da4c <_free_r>:
 800da4c:	b538      	push	{r3, r4, r5, lr}
 800da4e:	4605      	mov	r5, r0
 800da50:	2900      	cmp	r1, #0
 800da52:	d041      	beq.n	800dad8 <_free_r+0x8c>
 800da54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da58:	1f0c      	subs	r4, r1, #4
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	bfb8      	it	lt
 800da5e:	18e4      	addlt	r4, r4, r3
 800da60:	f7fe fb22 	bl	800c0a8 <__malloc_lock>
 800da64:	4a1d      	ldr	r2, [pc, #116]	@ (800dadc <_free_r+0x90>)
 800da66:	6813      	ldr	r3, [r2, #0]
 800da68:	b933      	cbnz	r3, 800da78 <_free_r+0x2c>
 800da6a:	6063      	str	r3, [r4, #4]
 800da6c:	6014      	str	r4, [r2, #0]
 800da6e:	4628      	mov	r0, r5
 800da70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da74:	f7fe bb1e 	b.w	800c0b4 <__malloc_unlock>
 800da78:	42a3      	cmp	r3, r4
 800da7a:	d908      	bls.n	800da8e <_free_r+0x42>
 800da7c:	6820      	ldr	r0, [r4, #0]
 800da7e:	1821      	adds	r1, r4, r0
 800da80:	428b      	cmp	r3, r1
 800da82:	bf01      	itttt	eq
 800da84:	6819      	ldreq	r1, [r3, #0]
 800da86:	685b      	ldreq	r3, [r3, #4]
 800da88:	1809      	addeq	r1, r1, r0
 800da8a:	6021      	streq	r1, [r4, #0]
 800da8c:	e7ed      	b.n	800da6a <_free_r+0x1e>
 800da8e:	461a      	mov	r2, r3
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	b10b      	cbz	r3, 800da98 <_free_r+0x4c>
 800da94:	42a3      	cmp	r3, r4
 800da96:	d9fa      	bls.n	800da8e <_free_r+0x42>
 800da98:	6811      	ldr	r1, [r2, #0]
 800da9a:	1850      	adds	r0, r2, r1
 800da9c:	42a0      	cmp	r0, r4
 800da9e:	d10b      	bne.n	800dab8 <_free_r+0x6c>
 800daa0:	6820      	ldr	r0, [r4, #0]
 800daa2:	4401      	add	r1, r0
 800daa4:	1850      	adds	r0, r2, r1
 800daa6:	4283      	cmp	r3, r0
 800daa8:	6011      	str	r1, [r2, #0]
 800daaa:	d1e0      	bne.n	800da6e <_free_r+0x22>
 800daac:	6818      	ldr	r0, [r3, #0]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	6053      	str	r3, [r2, #4]
 800dab2:	4408      	add	r0, r1
 800dab4:	6010      	str	r0, [r2, #0]
 800dab6:	e7da      	b.n	800da6e <_free_r+0x22>
 800dab8:	d902      	bls.n	800dac0 <_free_r+0x74>
 800daba:	230c      	movs	r3, #12
 800dabc:	602b      	str	r3, [r5, #0]
 800dabe:	e7d6      	b.n	800da6e <_free_r+0x22>
 800dac0:	6820      	ldr	r0, [r4, #0]
 800dac2:	1821      	adds	r1, r4, r0
 800dac4:	428b      	cmp	r3, r1
 800dac6:	bf04      	itt	eq
 800dac8:	6819      	ldreq	r1, [r3, #0]
 800daca:	685b      	ldreq	r3, [r3, #4]
 800dacc:	6063      	str	r3, [r4, #4]
 800dace:	bf04      	itt	eq
 800dad0:	1809      	addeq	r1, r1, r0
 800dad2:	6021      	streq	r1, [r4, #0]
 800dad4:	6054      	str	r4, [r2, #4]
 800dad6:	e7ca      	b.n	800da6e <_free_r+0x22>
 800dad8:	bd38      	pop	{r3, r4, r5, pc}
 800dada:	bf00      	nop
 800dadc:	24000aa4 	.word	0x24000aa4

0800dae0 <_Balloc>:
 800dae0:	b570      	push	{r4, r5, r6, lr}
 800dae2:	69c6      	ldr	r6, [r0, #28]
 800dae4:	4604      	mov	r4, r0
 800dae6:	460d      	mov	r5, r1
 800dae8:	b976      	cbnz	r6, 800db08 <_Balloc+0x28>
 800daea:	2010      	movs	r0, #16
 800daec:	f7fe fa2a 	bl	800bf44 <malloc>
 800daf0:	4602      	mov	r2, r0
 800daf2:	61e0      	str	r0, [r4, #28]
 800daf4:	b920      	cbnz	r0, 800db00 <_Balloc+0x20>
 800daf6:	4b18      	ldr	r3, [pc, #96]	@ (800db58 <_Balloc+0x78>)
 800daf8:	4818      	ldr	r0, [pc, #96]	@ (800db5c <_Balloc+0x7c>)
 800dafa:	216b      	movs	r1, #107	@ 0x6b
 800dafc:	f000 fddc 	bl	800e6b8 <__assert_func>
 800db00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db04:	6006      	str	r6, [r0, #0]
 800db06:	60c6      	str	r6, [r0, #12]
 800db08:	69e6      	ldr	r6, [r4, #28]
 800db0a:	68f3      	ldr	r3, [r6, #12]
 800db0c:	b183      	cbz	r3, 800db30 <_Balloc+0x50>
 800db0e:	69e3      	ldr	r3, [r4, #28]
 800db10:	68db      	ldr	r3, [r3, #12]
 800db12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800db16:	b9b8      	cbnz	r0, 800db48 <_Balloc+0x68>
 800db18:	2101      	movs	r1, #1
 800db1a:	fa01 f605 	lsl.w	r6, r1, r5
 800db1e:	1d72      	adds	r2, r6, #5
 800db20:	0092      	lsls	r2, r2, #2
 800db22:	4620      	mov	r0, r4
 800db24:	f000 fde6 	bl	800e6f4 <_calloc_r>
 800db28:	b160      	cbz	r0, 800db44 <_Balloc+0x64>
 800db2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800db2e:	e00e      	b.n	800db4e <_Balloc+0x6e>
 800db30:	2221      	movs	r2, #33	@ 0x21
 800db32:	2104      	movs	r1, #4
 800db34:	4620      	mov	r0, r4
 800db36:	f000 fddd 	bl	800e6f4 <_calloc_r>
 800db3a:	69e3      	ldr	r3, [r4, #28]
 800db3c:	60f0      	str	r0, [r6, #12]
 800db3e:	68db      	ldr	r3, [r3, #12]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d1e4      	bne.n	800db0e <_Balloc+0x2e>
 800db44:	2000      	movs	r0, #0
 800db46:	bd70      	pop	{r4, r5, r6, pc}
 800db48:	6802      	ldr	r2, [r0, #0]
 800db4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800db4e:	2300      	movs	r3, #0
 800db50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db54:	e7f7      	b.n	800db46 <_Balloc+0x66>
 800db56:	bf00      	nop
 800db58:	0800e8f9 	.word	0x0800e8f9
 800db5c:	0800e979 	.word	0x0800e979

0800db60 <_Bfree>:
 800db60:	b570      	push	{r4, r5, r6, lr}
 800db62:	69c6      	ldr	r6, [r0, #28]
 800db64:	4605      	mov	r5, r0
 800db66:	460c      	mov	r4, r1
 800db68:	b976      	cbnz	r6, 800db88 <_Bfree+0x28>
 800db6a:	2010      	movs	r0, #16
 800db6c:	f7fe f9ea 	bl	800bf44 <malloc>
 800db70:	4602      	mov	r2, r0
 800db72:	61e8      	str	r0, [r5, #28]
 800db74:	b920      	cbnz	r0, 800db80 <_Bfree+0x20>
 800db76:	4b09      	ldr	r3, [pc, #36]	@ (800db9c <_Bfree+0x3c>)
 800db78:	4809      	ldr	r0, [pc, #36]	@ (800dba0 <_Bfree+0x40>)
 800db7a:	218f      	movs	r1, #143	@ 0x8f
 800db7c:	f000 fd9c 	bl	800e6b8 <__assert_func>
 800db80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db84:	6006      	str	r6, [r0, #0]
 800db86:	60c6      	str	r6, [r0, #12]
 800db88:	b13c      	cbz	r4, 800db9a <_Bfree+0x3a>
 800db8a:	69eb      	ldr	r3, [r5, #28]
 800db8c:	6862      	ldr	r2, [r4, #4]
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db94:	6021      	str	r1, [r4, #0]
 800db96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800db9a:	bd70      	pop	{r4, r5, r6, pc}
 800db9c:	0800e8f9 	.word	0x0800e8f9
 800dba0:	0800e979 	.word	0x0800e979

0800dba4 <__multadd>:
 800dba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dba8:	690d      	ldr	r5, [r1, #16]
 800dbaa:	4607      	mov	r7, r0
 800dbac:	460c      	mov	r4, r1
 800dbae:	461e      	mov	r6, r3
 800dbb0:	f101 0c14 	add.w	ip, r1, #20
 800dbb4:	2000      	movs	r0, #0
 800dbb6:	f8dc 3000 	ldr.w	r3, [ip]
 800dbba:	b299      	uxth	r1, r3
 800dbbc:	fb02 6101 	mla	r1, r2, r1, r6
 800dbc0:	0c1e      	lsrs	r6, r3, #16
 800dbc2:	0c0b      	lsrs	r3, r1, #16
 800dbc4:	fb02 3306 	mla	r3, r2, r6, r3
 800dbc8:	b289      	uxth	r1, r1
 800dbca:	3001      	adds	r0, #1
 800dbcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dbd0:	4285      	cmp	r5, r0
 800dbd2:	f84c 1b04 	str.w	r1, [ip], #4
 800dbd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dbda:	dcec      	bgt.n	800dbb6 <__multadd+0x12>
 800dbdc:	b30e      	cbz	r6, 800dc22 <__multadd+0x7e>
 800dbde:	68a3      	ldr	r3, [r4, #8]
 800dbe0:	42ab      	cmp	r3, r5
 800dbe2:	dc19      	bgt.n	800dc18 <__multadd+0x74>
 800dbe4:	6861      	ldr	r1, [r4, #4]
 800dbe6:	4638      	mov	r0, r7
 800dbe8:	3101      	adds	r1, #1
 800dbea:	f7ff ff79 	bl	800dae0 <_Balloc>
 800dbee:	4680      	mov	r8, r0
 800dbf0:	b928      	cbnz	r0, 800dbfe <__multadd+0x5a>
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	4b0c      	ldr	r3, [pc, #48]	@ (800dc28 <__multadd+0x84>)
 800dbf6:	480d      	ldr	r0, [pc, #52]	@ (800dc2c <__multadd+0x88>)
 800dbf8:	21ba      	movs	r1, #186	@ 0xba
 800dbfa:	f000 fd5d 	bl	800e6b8 <__assert_func>
 800dbfe:	6922      	ldr	r2, [r4, #16]
 800dc00:	3202      	adds	r2, #2
 800dc02:	f104 010c 	add.w	r1, r4, #12
 800dc06:	0092      	lsls	r2, r2, #2
 800dc08:	300c      	adds	r0, #12
 800dc0a:	f7ff f928 	bl	800ce5e <memcpy>
 800dc0e:	4621      	mov	r1, r4
 800dc10:	4638      	mov	r0, r7
 800dc12:	f7ff ffa5 	bl	800db60 <_Bfree>
 800dc16:	4644      	mov	r4, r8
 800dc18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dc1c:	3501      	adds	r5, #1
 800dc1e:	615e      	str	r6, [r3, #20]
 800dc20:	6125      	str	r5, [r4, #16]
 800dc22:	4620      	mov	r0, r4
 800dc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc28:	0800e968 	.word	0x0800e968
 800dc2c:	0800e979 	.word	0x0800e979

0800dc30 <__hi0bits>:
 800dc30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dc34:	4603      	mov	r3, r0
 800dc36:	bf36      	itet	cc
 800dc38:	0403      	lslcc	r3, r0, #16
 800dc3a:	2000      	movcs	r0, #0
 800dc3c:	2010      	movcc	r0, #16
 800dc3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dc42:	bf3c      	itt	cc
 800dc44:	021b      	lslcc	r3, r3, #8
 800dc46:	3008      	addcc	r0, #8
 800dc48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc4c:	bf3c      	itt	cc
 800dc4e:	011b      	lslcc	r3, r3, #4
 800dc50:	3004      	addcc	r0, #4
 800dc52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc56:	bf3c      	itt	cc
 800dc58:	009b      	lslcc	r3, r3, #2
 800dc5a:	3002      	addcc	r0, #2
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	db05      	blt.n	800dc6c <__hi0bits+0x3c>
 800dc60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dc64:	f100 0001 	add.w	r0, r0, #1
 800dc68:	bf08      	it	eq
 800dc6a:	2020      	moveq	r0, #32
 800dc6c:	4770      	bx	lr

0800dc6e <__lo0bits>:
 800dc6e:	6803      	ldr	r3, [r0, #0]
 800dc70:	4602      	mov	r2, r0
 800dc72:	f013 0007 	ands.w	r0, r3, #7
 800dc76:	d00b      	beq.n	800dc90 <__lo0bits+0x22>
 800dc78:	07d9      	lsls	r1, r3, #31
 800dc7a:	d421      	bmi.n	800dcc0 <__lo0bits+0x52>
 800dc7c:	0798      	lsls	r0, r3, #30
 800dc7e:	bf49      	itett	mi
 800dc80:	085b      	lsrmi	r3, r3, #1
 800dc82:	089b      	lsrpl	r3, r3, #2
 800dc84:	2001      	movmi	r0, #1
 800dc86:	6013      	strmi	r3, [r2, #0]
 800dc88:	bf5c      	itt	pl
 800dc8a:	6013      	strpl	r3, [r2, #0]
 800dc8c:	2002      	movpl	r0, #2
 800dc8e:	4770      	bx	lr
 800dc90:	b299      	uxth	r1, r3
 800dc92:	b909      	cbnz	r1, 800dc98 <__lo0bits+0x2a>
 800dc94:	0c1b      	lsrs	r3, r3, #16
 800dc96:	2010      	movs	r0, #16
 800dc98:	b2d9      	uxtb	r1, r3
 800dc9a:	b909      	cbnz	r1, 800dca0 <__lo0bits+0x32>
 800dc9c:	3008      	adds	r0, #8
 800dc9e:	0a1b      	lsrs	r3, r3, #8
 800dca0:	0719      	lsls	r1, r3, #28
 800dca2:	bf04      	itt	eq
 800dca4:	091b      	lsreq	r3, r3, #4
 800dca6:	3004      	addeq	r0, #4
 800dca8:	0799      	lsls	r1, r3, #30
 800dcaa:	bf04      	itt	eq
 800dcac:	089b      	lsreq	r3, r3, #2
 800dcae:	3002      	addeq	r0, #2
 800dcb0:	07d9      	lsls	r1, r3, #31
 800dcb2:	d403      	bmi.n	800dcbc <__lo0bits+0x4e>
 800dcb4:	085b      	lsrs	r3, r3, #1
 800dcb6:	f100 0001 	add.w	r0, r0, #1
 800dcba:	d003      	beq.n	800dcc4 <__lo0bits+0x56>
 800dcbc:	6013      	str	r3, [r2, #0]
 800dcbe:	4770      	bx	lr
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	4770      	bx	lr
 800dcc4:	2020      	movs	r0, #32
 800dcc6:	4770      	bx	lr

0800dcc8 <__i2b>:
 800dcc8:	b510      	push	{r4, lr}
 800dcca:	460c      	mov	r4, r1
 800dccc:	2101      	movs	r1, #1
 800dcce:	f7ff ff07 	bl	800dae0 <_Balloc>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	b928      	cbnz	r0, 800dce2 <__i2b+0x1a>
 800dcd6:	4b05      	ldr	r3, [pc, #20]	@ (800dcec <__i2b+0x24>)
 800dcd8:	4805      	ldr	r0, [pc, #20]	@ (800dcf0 <__i2b+0x28>)
 800dcda:	f240 1145 	movw	r1, #325	@ 0x145
 800dcde:	f000 fceb 	bl	800e6b8 <__assert_func>
 800dce2:	2301      	movs	r3, #1
 800dce4:	6144      	str	r4, [r0, #20]
 800dce6:	6103      	str	r3, [r0, #16]
 800dce8:	bd10      	pop	{r4, pc}
 800dcea:	bf00      	nop
 800dcec:	0800e968 	.word	0x0800e968
 800dcf0:	0800e979 	.word	0x0800e979

0800dcf4 <__multiply>:
 800dcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf8:	4617      	mov	r7, r2
 800dcfa:	690a      	ldr	r2, [r1, #16]
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	bfa8      	it	ge
 800dd02:	463b      	movge	r3, r7
 800dd04:	4689      	mov	r9, r1
 800dd06:	bfa4      	itt	ge
 800dd08:	460f      	movge	r7, r1
 800dd0a:	4699      	movge	r9, r3
 800dd0c:	693d      	ldr	r5, [r7, #16]
 800dd0e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	6879      	ldr	r1, [r7, #4]
 800dd16:	eb05 060a 	add.w	r6, r5, sl
 800dd1a:	42b3      	cmp	r3, r6
 800dd1c:	b085      	sub	sp, #20
 800dd1e:	bfb8      	it	lt
 800dd20:	3101      	addlt	r1, #1
 800dd22:	f7ff fedd 	bl	800dae0 <_Balloc>
 800dd26:	b930      	cbnz	r0, 800dd36 <__multiply+0x42>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	4b41      	ldr	r3, [pc, #260]	@ (800de30 <__multiply+0x13c>)
 800dd2c:	4841      	ldr	r0, [pc, #260]	@ (800de34 <__multiply+0x140>)
 800dd2e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dd32:	f000 fcc1 	bl	800e6b8 <__assert_func>
 800dd36:	f100 0414 	add.w	r4, r0, #20
 800dd3a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800dd3e:	4623      	mov	r3, r4
 800dd40:	2200      	movs	r2, #0
 800dd42:	4573      	cmp	r3, lr
 800dd44:	d320      	bcc.n	800dd88 <__multiply+0x94>
 800dd46:	f107 0814 	add.w	r8, r7, #20
 800dd4a:	f109 0114 	add.w	r1, r9, #20
 800dd4e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800dd52:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800dd56:	9302      	str	r3, [sp, #8]
 800dd58:	1beb      	subs	r3, r5, r7
 800dd5a:	3b15      	subs	r3, #21
 800dd5c:	f023 0303 	bic.w	r3, r3, #3
 800dd60:	3304      	adds	r3, #4
 800dd62:	3715      	adds	r7, #21
 800dd64:	42bd      	cmp	r5, r7
 800dd66:	bf38      	it	cc
 800dd68:	2304      	movcc	r3, #4
 800dd6a:	9301      	str	r3, [sp, #4]
 800dd6c:	9b02      	ldr	r3, [sp, #8]
 800dd6e:	9103      	str	r1, [sp, #12]
 800dd70:	428b      	cmp	r3, r1
 800dd72:	d80c      	bhi.n	800dd8e <__multiply+0x9a>
 800dd74:	2e00      	cmp	r6, #0
 800dd76:	dd03      	ble.n	800dd80 <__multiply+0x8c>
 800dd78:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d055      	beq.n	800de2c <__multiply+0x138>
 800dd80:	6106      	str	r6, [r0, #16]
 800dd82:	b005      	add	sp, #20
 800dd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd88:	f843 2b04 	str.w	r2, [r3], #4
 800dd8c:	e7d9      	b.n	800dd42 <__multiply+0x4e>
 800dd8e:	f8b1 a000 	ldrh.w	sl, [r1]
 800dd92:	f1ba 0f00 	cmp.w	sl, #0
 800dd96:	d01f      	beq.n	800ddd8 <__multiply+0xe4>
 800dd98:	46c4      	mov	ip, r8
 800dd9a:	46a1      	mov	r9, r4
 800dd9c:	2700      	movs	r7, #0
 800dd9e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dda2:	f8d9 3000 	ldr.w	r3, [r9]
 800dda6:	fa1f fb82 	uxth.w	fp, r2
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	fb0a 330b 	mla	r3, sl, fp, r3
 800ddb0:	443b      	add	r3, r7
 800ddb2:	f8d9 7000 	ldr.w	r7, [r9]
 800ddb6:	0c12      	lsrs	r2, r2, #16
 800ddb8:	0c3f      	lsrs	r7, r7, #16
 800ddba:	fb0a 7202 	mla	r2, sl, r2, r7
 800ddbe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ddc8:	4565      	cmp	r5, ip
 800ddca:	f849 3b04 	str.w	r3, [r9], #4
 800ddce:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ddd2:	d8e4      	bhi.n	800dd9e <__multiply+0xaa>
 800ddd4:	9b01      	ldr	r3, [sp, #4]
 800ddd6:	50e7      	str	r7, [r4, r3]
 800ddd8:	9b03      	ldr	r3, [sp, #12]
 800ddda:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ddde:	3104      	adds	r1, #4
 800dde0:	f1b9 0f00 	cmp.w	r9, #0
 800dde4:	d020      	beq.n	800de28 <__multiply+0x134>
 800dde6:	6823      	ldr	r3, [r4, #0]
 800dde8:	4647      	mov	r7, r8
 800ddea:	46a4      	mov	ip, r4
 800ddec:	f04f 0a00 	mov.w	sl, #0
 800ddf0:	f8b7 b000 	ldrh.w	fp, [r7]
 800ddf4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ddf8:	fb09 220b 	mla	r2, r9, fp, r2
 800ddfc:	4452      	add	r2, sl
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de04:	f84c 3b04 	str.w	r3, [ip], #4
 800de08:	f857 3b04 	ldr.w	r3, [r7], #4
 800de0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de10:	f8bc 3000 	ldrh.w	r3, [ip]
 800de14:	fb09 330a 	mla	r3, r9, sl, r3
 800de18:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800de1c:	42bd      	cmp	r5, r7
 800de1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de22:	d8e5      	bhi.n	800ddf0 <__multiply+0xfc>
 800de24:	9a01      	ldr	r2, [sp, #4]
 800de26:	50a3      	str	r3, [r4, r2]
 800de28:	3404      	adds	r4, #4
 800de2a:	e79f      	b.n	800dd6c <__multiply+0x78>
 800de2c:	3e01      	subs	r6, #1
 800de2e:	e7a1      	b.n	800dd74 <__multiply+0x80>
 800de30:	0800e968 	.word	0x0800e968
 800de34:	0800e979 	.word	0x0800e979

0800de38 <__pow5mult>:
 800de38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de3c:	4615      	mov	r5, r2
 800de3e:	f012 0203 	ands.w	r2, r2, #3
 800de42:	4607      	mov	r7, r0
 800de44:	460e      	mov	r6, r1
 800de46:	d007      	beq.n	800de58 <__pow5mult+0x20>
 800de48:	4c25      	ldr	r4, [pc, #148]	@ (800dee0 <__pow5mult+0xa8>)
 800de4a:	3a01      	subs	r2, #1
 800de4c:	2300      	movs	r3, #0
 800de4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800de52:	f7ff fea7 	bl	800dba4 <__multadd>
 800de56:	4606      	mov	r6, r0
 800de58:	10ad      	asrs	r5, r5, #2
 800de5a:	d03d      	beq.n	800ded8 <__pow5mult+0xa0>
 800de5c:	69fc      	ldr	r4, [r7, #28]
 800de5e:	b97c      	cbnz	r4, 800de80 <__pow5mult+0x48>
 800de60:	2010      	movs	r0, #16
 800de62:	f7fe f86f 	bl	800bf44 <malloc>
 800de66:	4602      	mov	r2, r0
 800de68:	61f8      	str	r0, [r7, #28]
 800de6a:	b928      	cbnz	r0, 800de78 <__pow5mult+0x40>
 800de6c:	4b1d      	ldr	r3, [pc, #116]	@ (800dee4 <__pow5mult+0xac>)
 800de6e:	481e      	ldr	r0, [pc, #120]	@ (800dee8 <__pow5mult+0xb0>)
 800de70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800de74:	f000 fc20 	bl	800e6b8 <__assert_func>
 800de78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de7c:	6004      	str	r4, [r0, #0]
 800de7e:	60c4      	str	r4, [r0, #12]
 800de80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800de84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800de88:	b94c      	cbnz	r4, 800de9e <__pow5mult+0x66>
 800de8a:	f240 2171 	movw	r1, #625	@ 0x271
 800de8e:	4638      	mov	r0, r7
 800de90:	f7ff ff1a 	bl	800dcc8 <__i2b>
 800de94:	2300      	movs	r3, #0
 800de96:	f8c8 0008 	str.w	r0, [r8, #8]
 800de9a:	4604      	mov	r4, r0
 800de9c:	6003      	str	r3, [r0, #0]
 800de9e:	f04f 0900 	mov.w	r9, #0
 800dea2:	07eb      	lsls	r3, r5, #31
 800dea4:	d50a      	bpl.n	800debc <__pow5mult+0x84>
 800dea6:	4631      	mov	r1, r6
 800dea8:	4622      	mov	r2, r4
 800deaa:	4638      	mov	r0, r7
 800deac:	f7ff ff22 	bl	800dcf4 <__multiply>
 800deb0:	4631      	mov	r1, r6
 800deb2:	4680      	mov	r8, r0
 800deb4:	4638      	mov	r0, r7
 800deb6:	f7ff fe53 	bl	800db60 <_Bfree>
 800deba:	4646      	mov	r6, r8
 800debc:	106d      	asrs	r5, r5, #1
 800debe:	d00b      	beq.n	800ded8 <__pow5mult+0xa0>
 800dec0:	6820      	ldr	r0, [r4, #0]
 800dec2:	b938      	cbnz	r0, 800ded4 <__pow5mult+0x9c>
 800dec4:	4622      	mov	r2, r4
 800dec6:	4621      	mov	r1, r4
 800dec8:	4638      	mov	r0, r7
 800deca:	f7ff ff13 	bl	800dcf4 <__multiply>
 800dece:	6020      	str	r0, [r4, #0]
 800ded0:	f8c0 9000 	str.w	r9, [r0]
 800ded4:	4604      	mov	r4, r0
 800ded6:	e7e4      	b.n	800dea2 <__pow5mult+0x6a>
 800ded8:	4630      	mov	r0, r6
 800deda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dede:	bf00      	nop
 800dee0:	0800ea2c 	.word	0x0800ea2c
 800dee4:	0800e8f9 	.word	0x0800e8f9
 800dee8:	0800e979 	.word	0x0800e979

0800deec <__lshift>:
 800deec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800def0:	460c      	mov	r4, r1
 800def2:	6849      	ldr	r1, [r1, #4]
 800def4:	6923      	ldr	r3, [r4, #16]
 800def6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800defa:	68a3      	ldr	r3, [r4, #8]
 800defc:	4607      	mov	r7, r0
 800defe:	4691      	mov	r9, r2
 800df00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df04:	f108 0601 	add.w	r6, r8, #1
 800df08:	42b3      	cmp	r3, r6
 800df0a:	db0b      	blt.n	800df24 <__lshift+0x38>
 800df0c:	4638      	mov	r0, r7
 800df0e:	f7ff fde7 	bl	800dae0 <_Balloc>
 800df12:	4605      	mov	r5, r0
 800df14:	b948      	cbnz	r0, 800df2a <__lshift+0x3e>
 800df16:	4602      	mov	r2, r0
 800df18:	4b28      	ldr	r3, [pc, #160]	@ (800dfbc <__lshift+0xd0>)
 800df1a:	4829      	ldr	r0, [pc, #164]	@ (800dfc0 <__lshift+0xd4>)
 800df1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800df20:	f000 fbca 	bl	800e6b8 <__assert_func>
 800df24:	3101      	adds	r1, #1
 800df26:	005b      	lsls	r3, r3, #1
 800df28:	e7ee      	b.n	800df08 <__lshift+0x1c>
 800df2a:	2300      	movs	r3, #0
 800df2c:	f100 0114 	add.w	r1, r0, #20
 800df30:	f100 0210 	add.w	r2, r0, #16
 800df34:	4618      	mov	r0, r3
 800df36:	4553      	cmp	r3, sl
 800df38:	db33      	blt.n	800dfa2 <__lshift+0xb6>
 800df3a:	6920      	ldr	r0, [r4, #16]
 800df3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df40:	f104 0314 	add.w	r3, r4, #20
 800df44:	f019 091f 	ands.w	r9, r9, #31
 800df48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800df4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800df50:	d02b      	beq.n	800dfaa <__lshift+0xbe>
 800df52:	f1c9 0e20 	rsb	lr, r9, #32
 800df56:	468a      	mov	sl, r1
 800df58:	2200      	movs	r2, #0
 800df5a:	6818      	ldr	r0, [r3, #0]
 800df5c:	fa00 f009 	lsl.w	r0, r0, r9
 800df60:	4310      	orrs	r0, r2
 800df62:	f84a 0b04 	str.w	r0, [sl], #4
 800df66:	f853 2b04 	ldr.w	r2, [r3], #4
 800df6a:	459c      	cmp	ip, r3
 800df6c:	fa22 f20e 	lsr.w	r2, r2, lr
 800df70:	d8f3      	bhi.n	800df5a <__lshift+0x6e>
 800df72:	ebac 0304 	sub.w	r3, ip, r4
 800df76:	3b15      	subs	r3, #21
 800df78:	f023 0303 	bic.w	r3, r3, #3
 800df7c:	3304      	adds	r3, #4
 800df7e:	f104 0015 	add.w	r0, r4, #21
 800df82:	4560      	cmp	r0, ip
 800df84:	bf88      	it	hi
 800df86:	2304      	movhi	r3, #4
 800df88:	50ca      	str	r2, [r1, r3]
 800df8a:	b10a      	cbz	r2, 800df90 <__lshift+0xa4>
 800df8c:	f108 0602 	add.w	r6, r8, #2
 800df90:	3e01      	subs	r6, #1
 800df92:	4638      	mov	r0, r7
 800df94:	612e      	str	r6, [r5, #16]
 800df96:	4621      	mov	r1, r4
 800df98:	f7ff fde2 	bl	800db60 <_Bfree>
 800df9c:	4628      	mov	r0, r5
 800df9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfa2:	f842 0f04 	str.w	r0, [r2, #4]!
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	e7c5      	b.n	800df36 <__lshift+0x4a>
 800dfaa:	3904      	subs	r1, #4
 800dfac:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfb0:	f841 2f04 	str.w	r2, [r1, #4]!
 800dfb4:	459c      	cmp	ip, r3
 800dfb6:	d8f9      	bhi.n	800dfac <__lshift+0xc0>
 800dfb8:	e7ea      	b.n	800df90 <__lshift+0xa4>
 800dfba:	bf00      	nop
 800dfbc:	0800e968 	.word	0x0800e968
 800dfc0:	0800e979 	.word	0x0800e979

0800dfc4 <__mcmp>:
 800dfc4:	690a      	ldr	r2, [r1, #16]
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	6900      	ldr	r0, [r0, #16]
 800dfca:	1a80      	subs	r0, r0, r2
 800dfcc:	b530      	push	{r4, r5, lr}
 800dfce:	d10e      	bne.n	800dfee <__mcmp+0x2a>
 800dfd0:	3314      	adds	r3, #20
 800dfd2:	3114      	adds	r1, #20
 800dfd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dfd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dfdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dfe0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dfe4:	4295      	cmp	r5, r2
 800dfe6:	d003      	beq.n	800dff0 <__mcmp+0x2c>
 800dfe8:	d205      	bcs.n	800dff6 <__mcmp+0x32>
 800dfea:	f04f 30ff 	mov.w	r0, #4294967295
 800dfee:	bd30      	pop	{r4, r5, pc}
 800dff0:	42a3      	cmp	r3, r4
 800dff2:	d3f3      	bcc.n	800dfdc <__mcmp+0x18>
 800dff4:	e7fb      	b.n	800dfee <__mcmp+0x2a>
 800dff6:	2001      	movs	r0, #1
 800dff8:	e7f9      	b.n	800dfee <__mcmp+0x2a>
	...

0800dffc <__mdiff>:
 800dffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e000:	4689      	mov	r9, r1
 800e002:	4606      	mov	r6, r0
 800e004:	4611      	mov	r1, r2
 800e006:	4648      	mov	r0, r9
 800e008:	4614      	mov	r4, r2
 800e00a:	f7ff ffdb 	bl	800dfc4 <__mcmp>
 800e00e:	1e05      	subs	r5, r0, #0
 800e010:	d112      	bne.n	800e038 <__mdiff+0x3c>
 800e012:	4629      	mov	r1, r5
 800e014:	4630      	mov	r0, r6
 800e016:	f7ff fd63 	bl	800dae0 <_Balloc>
 800e01a:	4602      	mov	r2, r0
 800e01c:	b928      	cbnz	r0, 800e02a <__mdiff+0x2e>
 800e01e:	4b3f      	ldr	r3, [pc, #252]	@ (800e11c <__mdiff+0x120>)
 800e020:	f240 2137 	movw	r1, #567	@ 0x237
 800e024:	483e      	ldr	r0, [pc, #248]	@ (800e120 <__mdiff+0x124>)
 800e026:	f000 fb47 	bl	800e6b8 <__assert_func>
 800e02a:	2301      	movs	r3, #1
 800e02c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e030:	4610      	mov	r0, r2
 800e032:	b003      	add	sp, #12
 800e034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e038:	bfbc      	itt	lt
 800e03a:	464b      	movlt	r3, r9
 800e03c:	46a1      	movlt	r9, r4
 800e03e:	4630      	mov	r0, r6
 800e040:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e044:	bfba      	itte	lt
 800e046:	461c      	movlt	r4, r3
 800e048:	2501      	movlt	r5, #1
 800e04a:	2500      	movge	r5, #0
 800e04c:	f7ff fd48 	bl	800dae0 <_Balloc>
 800e050:	4602      	mov	r2, r0
 800e052:	b918      	cbnz	r0, 800e05c <__mdiff+0x60>
 800e054:	4b31      	ldr	r3, [pc, #196]	@ (800e11c <__mdiff+0x120>)
 800e056:	f240 2145 	movw	r1, #581	@ 0x245
 800e05a:	e7e3      	b.n	800e024 <__mdiff+0x28>
 800e05c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e060:	6926      	ldr	r6, [r4, #16]
 800e062:	60c5      	str	r5, [r0, #12]
 800e064:	f109 0310 	add.w	r3, r9, #16
 800e068:	f109 0514 	add.w	r5, r9, #20
 800e06c:	f104 0e14 	add.w	lr, r4, #20
 800e070:	f100 0b14 	add.w	fp, r0, #20
 800e074:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e078:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e07c:	9301      	str	r3, [sp, #4]
 800e07e:	46d9      	mov	r9, fp
 800e080:	f04f 0c00 	mov.w	ip, #0
 800e084:	9b01      	ldr	r3, [sp, #4]
 800e086:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e08a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e08e:	9301      	str	r3, [sp, #4]
 800e090:	fa1f f38a 	uxth.w	r3, sl
 800e094:	4619      	mov	r1, r3
 800e096:	b283      	uxth	r3, r0
 800e098:	1acb      	subs	r3, r1, r3
 800e09a:	0c00      	lsrs	r0, r0, #16
 800e09c:	4463      	add	r3, ip
 800e09e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e0a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e0ac:	4576      	cmp	r6, lr
 800e0ae:	f849 3b04 	str.w	r3, [r9], #4
 800e0b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e0b6:	d8e5      	bhi.n	800e084 <__mdiff+0x88>
 800e0b8:	1b33      	subs	r3, r6, r4
 800e0ba:	3b15      	subs	r3, #21
 800e0bc:	f023 0303 	bic.w	r3, r3, #3
 800e0c0:	3415      	adds	r4, #21
 800e0c2:	3304      	adds	r3, #4
 800e0c4:	42a6      	cmp	r6, r4
 800e0c6:	bf38      	it	cc
 800e0c8:	2304      	movcc	r3, #4
 800e0ca:	441d      	add	r5, r3
 800e0cc:	445b      	add	r3, fp
 800e0ce:	461e      	mov	r6, r3
 800e0d0:	462c      	mov	r4, r5
 800e0d2:	4544      	cmp	r4, r8
 800e0d4:	d30e      	bcc.n	800e0f4 <__mdiff+0xf8>
 800e0d6:	f108 0103 	add.w	r1, r8, #3
 800e0da:	1b49      	subs	r1, r1, r5
 800e0dc:	f021 0103 	bic.w	r1, r1, #3
 800e0e0:	3d03      	subs	r5, #3
 800e0e2:	45a8      	cmp	r8, r5
 800e0e4:	bf38      	it	cc
 800e0e6:	2100      	movcc	r1, #0
 800e0e8:	440b      	add	r3, r1
 800e0ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e0ee:	b191      	cbz	r1, 800e116 <__mdiff+0x11a>
 800e0f0:	6117      	str	r7, [r2, #16]
 800e0f2:	e79d      	b.n	800e030 <__mdiff+0x34>
 800e0f4:	f854 1b04 	ldr.w	r1, [r4], #4
 800e0f8:	46e6      	mov	lr, ip
 800e0fa:	0c08      	lsrs	r0, r1, #16
 800e0fc:	fa1c fc81 	uxtah	ip, ip, r1
 800e100:	4471      	add	r1, lr
 800e102:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e106:	b289      	uxth	r1, r1
 800e108:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e10c:	f846 1b04 	str.w	r1, [r6], #4
 800e110:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e114:	e7dd      	b.n	800e0d2 <__mdiff+0xd6>
 800e116:	3f01      	subs	r7, #1
 800e118:	e7e7      	b.n	800e0ea <__mdiff+0xee>
 800e11a:	bf00      	nop
 800e11c:	0800e968 	.word	0x0800e968
 800e120:	0800e979 	.word	0x0800e979

0800e124 <__d2b>:
 800e124:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e128:	460f      	mov	r7, r1
 800e12a:	2101      	movs	r1, #1
 800e12c:	ec59 8b10 	vmov	r8, r9, d0
 800e130:	4616      	mov	r6, r2
 800e132:	f7ff fcd5 	bl	800dae0 <_Balloc>
 800e136:	4604      	mov	r4, r0
 800e138:	b930      	cbnz	r0, 800e148 <__d2b+0x24>
 800e13a:	4602      	mov	r2, r0
 800e13c:	4b23      	ldr	r3, [pc, #140]	@ (800e1cc <__d2b+0xa8>)
 800e13e:	4824      	ldr	r0, [pc, #144]	@ (800e1d0 <__d2b+0xac>)
 800e140:	f240 310f 	movw	r1, #783	@ 0x30f
 800e144:	f000 fab8 	bl	800e6b8 <__assert_func>
 800e148:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e14c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e150:	b10d      	cbz	r5, 800e156 <__d2b+0x32>
 800e152:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e156:	9301      	str	r3, [sp, #4]
 800e158:	f1b8 0300 	subs.w	r3, r8, #0
 800e15c:	d023      	beq.n	800e1a6 <__d2b+0x82>
 800e15e:	4668      	mov	r0, sp
 800e160:	9300      	str	r3, [sp, #0]
 800e162:	f7ff fd84 	bl	800dc6e <__lo0bits>
 800e166:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e16a:	b1d0      	cbz	r0, 800e1a2 <__d2b+0x7e>
 800e16c:	f1c0 0320 	rsb	r3, r0, #32
 800e170:	fa02 f303 	lsl.w	r3, r2, r3
 800e174:	430b      	orrs	r3, r1
 800e176:	40c2      	lsrs	r2, r0
 800e178:	6163      	str	r3, [r4, #20]
 800e17a:	9201      	str	r2, [sp, #4]
 800e17c:	9b01      	ldr	r3, [sp, #4]
 800e17e:	61a3      	str	r3, [r4, #24]
 800e180:	2b00      	cmp	r3, #0
 800e182:	bf0c      	ite	eq
 800e184:	2201      	moveq	r2, #1
 800e186:	2202      	movne	r2, #2
 800e188:	6122      	str	r2, [r4, #16]
 800e18a:	b1a5      	cbz	r5, 800e1b6 <__d2b+0x92>
 800e18c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e190:	4405      	add	r5, r0
 800e192:	603d      	str	r5, [r7, #0]
 800e194:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e198:	6030      	str	r0, [r6, #0]
 800e19a:	4620      	mov	r0, r4
 800e19c:	b003      	add	sp, #12
 800e19e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1a2:	6161      	str	r1, [r4, #20]
 800e1a4:	e7ea      	b.n	800e17c <__d2b+0x58>
 800e1a6:	a801      	add	r0, sp, #4
 800e1a8:	f7ff fd61 	bl	800dc6e <__lo0bits>
 800e1ac:	9b01      	ldr	r3, [sp, #4]
 800e1ae:	6163      	str	r3, [r4, #20]
 800e1b0:	3020      	adds	r0, #32
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	e7e8      	b.n	800e188 <__d2b+0x64>
 800e1b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e1ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e1be:	6038      	str	r0, [r7, #0]
 800e1c0:	6918      	ldr	r0, [r3, #16]
 800e1c2:	f7ff fd35 	bl	800dc30 <__hi0bits>
 800e1c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e1ca:	e7e5      	b.n	800e198 <__d2b+0x74>
 800e1cc:	0800e968 	.word	0x0800e968
 800e1d0:	0800e979 	.word	0x0800e979

0800e1d4 <__sfputc_r>:
 800e1d4:	6893      	ldr	r3, [r2, #8]
 800e1d6:	3b01      	subs	r3, #1
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	b410      	push	{r4}
 800e1dc:	6093      	str	r3, [r2, #8]
 800e1de:	da08      	bge.n	800e1f2 <__sfputc_r+0x1e>
 800e1e0:	6994      	ldr	r4, [r2, #24]
 800e1e2:	42a3      	cmp	r3, r4
 800e1e4:	db01      	blt.n	800e1ea <__sfputc_r+0x16>
 800e1e6:	290a      	cmp	r1, #10
 800e1e8:	d103      	bne.n	800e1f2 <__sfputc_r+0x1e>
 800e1ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1ee:	f7fe bd12 	b.w	800cc16 <__swbuf_r>
 800e1f2:	6813      	ldr	r3, [r2, #0]
 800e1f4:	1c58      	adds	r0, r3, #1
 800e1f6:	6010      	str	r0, [r2, #0]
 800e1f8:	7019      	strb	r1, [r3, #0]
 800e1fa:	4608      	mov	r0, r1
 800e1fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e200:	4770      	bx	lr

0800e202 <__sfputs_r>:
 800e202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e204:	4606      	mov	r6, r0
 800e206:	460f      	mov	r7, r1
 800e208:	4614      	mov	r4, r2
 800e20a:	18d5      	adds	r5, r2, r3
 800e20c:	42ac      	cmp	r4, r5
 800e20e:	d101      	bne.n	800e214 <__sfputs_r+0x12>
 800e210:	2000      	movs	r0, #0
 800e212:	e007      	b.n	800e224 <__sfputs_r+0x22>
 800e214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e218:	463a      	mov	r2, r7
 800e21a:	4630      	mov	r0, r6
 800e21c:	f7ff ffda 	bl	800e1d4 <__sfputc_r>
 800e220:	1c43      	adds	r3, r0, #1
 800e222:	d1f3      	bne.n	800e20c <__sfputs_r+0xa>
 800e224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e228 <_vfiprintf_r>:
 800e228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e22c:	460d      	mov	r5, r1
 800e22e:	b09d      	sub	sp, #116	@ 0x74
 800e230:	4614      	mov	r4, r2
 800e232:	4698      	mov	r8, r3
 800e234:	4606      	mov	r6, r0
 800e236:	b118      	cbz	r0, 800e240 <_vfiprintf_r+0x18>
 800e238:	6a03      	ldr	r3, [r0, #32]
 800e23a:	b90b      	cbnz	r3, 800e240 <_vfiprintf_r+0x18>
 800e23c:	f7fe fc02 	bl	800ca44 <__sinit>
 800e240:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e242:	07d9      	lsls	r1, r3, #31
 800e244:	d405      	bmi.n	800e252 <_vfiprintf_r+0x2a>
 800e246:	89ab      	ldrh	r3, [r5, #12]
 800e248:	059a      	lsls	r2, r3, #22
 800e24a:	d402      	bmi.n	800e252 <_vfiprintf_r+0x2a>
 800e24c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e24e:	f7fe fe04 	bl	800ce5a <__retarget_lock_acquire_recursive>
 800e252:	89ab      	ldrh	r3, [r5, #12]
 800e254:	071b      	lsls	r3, r3, #28
 800e256:	d501      	bpl.n	800e25c <_vfiprintf_r+0x34>
 800e258:	692b      	ldr	r3, [r5, #16]
 800e25a:	b99b      	cbnz	r3, 800e284 <_vfiprintf_r+0x5c>
 800e25c:	4629      	mov	r1, r5
 800e25e:	4630      	mov	r0, r6
 800e260:	f7fe fd18 	bl	800cc94 <__swsetup_r>
 800e264:	b170      	cbz	r0, 800e284 <_vfiprintf_r+0x5c>
 800e266:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e268:	07dc      	lsls	r4, r3, #31
 800e26a:	d504      	bpl.n	800e276 <_vfiprintf_r+0x4e>
 800e26c:	f04f 30ff 	mov.w	r0, #4294967295
 800e270:	b01d      	add	sp, #116	@ 0x74
 800e272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e276:	89ab      	ldrh	r3, [r5, #12]
 800e278:	0598      	lsls	r0, r3, #22
 800e27a:	d4f7      	bmi.n	800e26c <_vfiprintf_r+0x44>
 800e27c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e27e:	f7fe fded 	bl	800ce5c <__retarget_lock_release_recursive>
 800e282:	e7f3      	b.n	800e26c <_vfiprintf_r+0x44>
 800e284:	2300      	movs	r3, #0
 800e286:	9309      	str	r3, [sp, #36]	@ 0x24
 800e288:	2320      	movs	r3, #32
 800e28a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e28e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e292:	2330      	movs	r3, #48	@ 0x30
 800e294:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e444 <_vfiprintf_r+0x21c>
 800e298:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e29c:	f04f 0901 	mov.w	r9, #1
 800e2a0:	4623      	mov	r3, r4
 800e2a2:	469a      	mov	sl, r3
 800e2a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2a8:	b10a      	cbz	r2, 800e2ae <_vfiprintf_r+0x86>
 800e2aa:	2a25      	cmp	r2, #37	@ 0x25
 800e2ac:	d1f9      	bne.n	800e2a2 <_vfiprintf_r+0x7a>
 800e2ae:	ebba 0b04 	subs.w	fp, sl, r4
 800e2b2:	d00b      	beq.n	800e2cc <_vfiprintf_r+0xa4>
 800e2b4:	465b      	mov	r3, fp
 800e2b6:	4622      	mov	r2, r4
 800e2b8:	4629      	mov	r1, r5
 800e2ba:	4630      	mov	r0, r6
 800e2bc:	f7ff ffa1 	bl	800e202 <__sfputs_r>
 800e2c0:	3001      	adds	r0, #1
 800e2c2:	f000 80a7 	beq.w	800e414 <_vfiprintf_r+0x1ec>
 800e2c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e2c8:	445a      	add	r2, fp
 800e2ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800e2cc:	f89a 3000 	ldrb.w	r3, [sl]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	f000 809f 	beq.w	800e414 <_vfiprintf_r+0x1ec>
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e2dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2e0:	f10a 0a01 	add.w	sl, sl, #1
 800e2e4:	9304      	str	r3, [sp, #16]
 800e2e6:	9307      	str	r3, [sp, #28]
 800e2e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e2ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800e2ee:	4654      	mov	r4, sl
 800e2f0:	2205      	movs	r2, #5
 800e2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2f6:	4853      	ldr	r0, [pc, #332]	@ (800e444 <_vfiprintf_r+0x21c>)
 800e2f8:	f7f1 fffa 	bl	80002f0 <memchr>
 800e2fc:	9a04      	ldr	r2, [sp, #16]
 800e2fe:	b9d8      	cbnz	r0, 800e338 <_vfiprintf_r+0x110>
 800e300:	06d1      	lsls	r1, r2, #27
 800e302:	bf44      	itt	mi
 800e304:	2320      	movmi	r3, #32
 800e306:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e30a:	0713      	lsls	r3, r2, #28
 800e30c:	bf44      	itt	mi
 800e30e:	232b      	movmi	r3, #43	@ 0x2b
 800e310:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e314:	f89a 3000 	ldrb.w	r3, [sl]
 800e318:	2b2a      	cmp	r3, #42	@ 0x2a
 800e31a:	d015      	beq.n	800e348 <_vfiprintf_r+0x120>
 800e31c:	9a07      	ldr	r2, [sp, #28]
 800e31e:	4654      	mov	r4, sl
 800e320:	2000      	movs	r0, #0
 800e322:	f04f 0c0a 	mov.w	ip, #10
 800e326:	4621      	mov	r1, r4
 800e328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e32c:	3b30      	subs	r3, #48	@ 0x30
 800e32e:	2b09      	cmp	r3, #9
 800e330:	d94b      	bls.n	800e3ca <_vfiprintf_r+0x1a2>
 800e332:	b1b0      	cbz	r0, 800e362 <_vfiprintf_r+0x13a>
 800e334:	9207      	str	r2, [sp, #28]
 800e336:	e014      	b.n	800e362 <_vfiprintf_r+0x13a>
 800e338:	eba0 0308 	sub.w	r3, r0, r8
 800e33c:	fa09 f303 	lsl.w	r3, r9, r3
 800e340:	4313      	orrs	r3, r2
 800e342:	9304      	str	r3, [sp, #16]
 800e344:	46a2      	mov	sl, r4
 800e346:	e7d2      	b.n	800e2ee <_vfiprintf_r+0xc6>
 800e348:	9b03      	ldr	r3, [sp, #12]
 800e34a:	1d19      	adds	r1, r3, #4
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	9103      	str	r1, [sp, #12]
 800e350:	2b00      	cmp	r3, #0
 800e352:	bfbb      	ittet	lt
 800e354:	425b      	neglt	r3, r3
 800e356:	f042 0202 	orrlt.w	r2, r2, #2
 800e35a:	9307      	strge	r3, [sp, #28]
 800e35c:	9307      	strlt	r3, [sp, #28]
 800e35e:	bfb8      	it	lt
 800e360:	9204      	strlt	r2, [sp, #16]
 800e362:	7823      	ldrb	r3, [r4, #0]
 800e364:	2b2e      	cmp	r3, #46	@ 0x2e
 800e366:	d10a      	bne.n	800e37e <_vfiprintf_r+0x156>
 800e368:	7863      	ldrb	r3, [r4, #1]
 800e36a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e36c:	d132      	bne.n	800e3d4 <_vfiprintf_r+0x1ac>
 800e36e:	9b03      	ldr	r3, [sp, #12]
 800e370:	1d1a      	adds	r2, r3, #4
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	9203      	str	r2, [sp, #12]
 800e376:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e37a:	3402      	adds	r4, #2
 800e37c:	9305      	str	r3, [sp, #20]
 800e37e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e454 <_vfiprintf_r+0x22c>
 800e382:	7821      	ldrb	r1, [r4, #0]
 800e384:	2203      	movs	r2, #3
 800e386:	4650      	mov	r0, sl
 800e388:	f7f1 ffb2 	bl	80002f0 <memchr>
 800e38c:	b138      	cbz	r0, 800e39e <_vfiprintf_r+0x176>
 800e38e:	9b04      	ldr	r3, [sp, #16]
 800e390:	eba0 000a 	sub.w	r0, r0, sl
 800e394:	2240      	movs	r2, #64	@ 0x40
 800e396:	4082      	lsls	r2, r0
 800e398:	4313      	orrs	r3, r2
 800e39a:	3401      	adds	r4, #1
 800e39c:	9304      	str	r3, [sp, #16]
 800e39e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3a2:	4829      	ldr	r0, [pc, #164]	@ (800e448 <_vfiprintf_r+0x220>)
 800e3a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e3a8:	2206      	movs	r2, #6
 800e3aa:	f7f1 ffa1 	bl	80002f0 <memchr>
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	d03f      	beq.n	800e432 <_vfiprintf_r+0x20a>
 800e3b2:	4b26      	ldr	r3, [pc, #152]	@ (800e44c <_vfiprintf_r+0x224>)
 800e3b4:	bb1b      	cbnz	r3, 800e3fe <_vfiprintf_r+0x1d6>
 800e3b6:	9b03      	ldr	r3, [sp, #12]
 800e3b8:	3307      	adds	r3, #7
 800e3ba:	f023 0307 	bic.w	r3, r3, #7
 800e3be:	3308      	adds	r3, #8
 800e3c0:	9303      	str	r3, [sp, #12]
 800e3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3c4:	443b      	add	r3, r7
 800e3c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3c8:	e76a      	b.n	800e2a0 <_vfiprintf_r+0x78>
 800e3ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3ce:	460c      	mov	r4, r1
 800e3d0:	2001      	movs	r0, #1
 800e3d2:	e7a8      	b.n	800e326 <_vfiprintf_r+0xfe>
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	3401      	adds	r4, #1
 800e3d8:	9305      	str	r3, [sp, #20]
 800e3da:	4619      	mov	r1, r3
 800e3dc:	f04f 0c0a 	mov.w	ip, #10
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3e6:	3a30      	subs	r2, #48	@ 0x30
 800e3e8:	2a09      	cmp	r2, #9
 800e3ea:	d903      	bls.n	800e3f4 <_vfiprintf_r+0x1cc>
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d0c6      	beq.n	800e37e <_vfiprintf_r+0x156>
 800e3f0:	9105      	str	r1, [sp, #20]
 800e3f2:	e7c4      	b.n	800e37e <_vfiprintf_r+0x156>
 800e3f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3f8:	4604      	mov	r4, r0
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	e7f0      	b.n	800e3e0 <_vfiprintf_r+0x1b8>
 800e3fe:	ab03      	add	r3, sp, #12
 800e400:	9300      	str	r3, [sp, #0]
 800e402:	462a      	mov	r2, r5
 800e404:	4b12      	ldr	r3, [pc, #72]	@ (800e450 <_vfiprintf_r+0x228>)
 800e406:	a904      	add	r1, sp, #16
 800e408:	4630      	mov	r0, r6
 800e40a:	f7fd fee9 	bl	800c1e0 <_printf_float>
 800e40e:	4607      	mov	r7, r0
 800e410:	1c78      	adds	r0, r7, #1
 800e412:	d1d6      	bne.n	800e3c2 <_vfiprintf_r+0x19a>
 800e414:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e416:	07d9      	lsls	r1, r3, #31
 800e418:	d405      	bmi.n	800e426 <_vfiprintf_r+0x1fe>
 800e41a:	89ab      	ldrh	r3, [r5, #12]
 800e41c:	059a      	lsls	r2, r3, #22
 800e41e:	d402      	bmi.n	800e426 <_vfiprintf_r+0x1fe>
 800e420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e422:	f7fe fd1b 	bl	800ce5c <__retarget_lock_release_recursive>
 800e426:	89ab      	ldrh	r3, [r5, #12]
 800e428:	065b      	lsls	r3, r3, #25
 800e42a:	f53f af1f 	bmi.w	800e26c <_vfiprintf_r+0x44>
 800e42e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e430:	e71e      	b.n	800e270 <_vfiprintf_r+0x48>
 800e432:	ab03      	add	r3, sp, #12
 800e434:	9300      	str	r3, [sp, #0]
 800e436:	462a      	mov	r2, r5
 800e438:	4b05      	ldr	r3, [pc, #20]	@ (800e450 <_vfiprintf_r+0x228>)
 800e43a:	a904      	add	r1, sp, #16
 800e43c:	4630      	mov	r0, r6
 800e43e:	f7fe f957 	bl	800c6f0 <_printf_i>
 800e442:	e7e4      	b.n	800e40e <_vfiprintf_r+0x1e6>
 800e444:	0800e9d2 	.word	0x0800e9d2
 800e448:	0800e9dc 	.word	0x0800e9dc
 800e44c:	0800c1e1 	.word	0x0800c1e1
 800e450:	0800e203 	.word	0x0800e203
 800e454:	0800e9d8 	.word	0x0800e9d8

0800e458 <__sflush_r>:
 800e458:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e460:	0716      	lsls	r6, r2, #28
 800e462:	4605      	mov	r5, r0
 800e464:	460c      	mov	r4, r1
 800e466:	d454      	bmi.n	800e512 <__sflush_r+0xba>
 800e468:	684b      	ldr	r3, [r1, #4]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	dc02      	bgt.n	800e474 <__sflush_r+0x1c>
 800e46e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e470:	2b00      	cmp	r3, #0
 800e472:	dd48      	ble.n	800e506 <__sflush_r+0xae>
 800e474:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e476:	2e00      	cmp	r6, #0
 800e478:	d045      	beq.n	800e506 <__sflush_r+0xae>
 800e47a:	2300      	movs	r3, #0
 800e47c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e480:	682f      	ldr	r7, [r5, #0]
 800e482:	6a21      	ldr	r1, [r4, #32]
 800e484:	602b      	str	r3, [r5, #0]
 800e486:	d030      	beq.n	800e4ea <__sflush_r+0x92>
 800e488:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e48a:	89a3      	ldrh	r3, [r4, #12]
 800e48c:	0759      	lsls	r1, r3, #29
 800e48e:	d505      	bpl.n	800e49c <__sflush_r+0x44>
 800e490:	6863      	ldr	r3, [r4, #4]
 800e492:	1ad2      	subs	r2, r2, r3
 800e494:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e496:	b10b      	cbz	r3, 800e49c <__sflush_r+0x44>
 800e498:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e49a:	1ad2      	subs	r2, r2, r3
 800e49c:	2300      	movs	r3, #0
 800e49e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e4a0:	6a21      	ldr	r1, [r4, #32]
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	47b0      	blx	r6
 800e4a6:	1c43      	adds	r3, r0, #1
 800e4a8:	89a3      	ldrh	r3, [r4, #12]
 800e4aa:	d106      	bne.n	800e4ba <__sflush_r+0x62>
 800e4ac:	6829      	ldr	r1, [r5, #0]
 800e4ae:	291d      	cmp	r1, #29
 800e4b0:	d82b      	bhi.n	800e50a <__sflush_r+0xb2>
 800e4b2:	4a2a      	ldr	r2, [pc, #168]	@ (800e55c <__sflush_r+0x104>)
 800e4b4:	40ca      	lsrs	r2, r1
 800e4b6:	07d6      	lsls	r6, r2, #31
 800e4b8:	d527      	bpl.n	800e50a <__sflush_r+0xb2>
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	6062      	str	r2, [r4, #4]
 800e4be:	04d9      	lsls	r1, r3, #19
 800e4c0:	6922      	ldr	r2, [r4, #16]
 800e4c2:	6022      	str	r2, [r4, #0]
 800e4c4:	d504      	bpl.n	800e4d0 <__sflush_r+0x78>
 800e4c6:	1c42      	adds	r2, r0, #1
 800e4c8:	d101      	bne.n	800e4ce <__sflush_r+0x76>
 800e4ca:	682b      	ldr	r3, [r5, #0]
 800e4cc:	b903      	cbnz	r3, 800e4d0 <__sflush_r+0x78>
 800e4ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800e4d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e4d2:	602f      	str	r7, [r5, #0]
 800e4d4:	b1b9      	cbz	r1, 800e506 <__sflush_r+0xae>
 800e4d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e4da:	4299      	cmp	r1, r3
 800e4dc:	d002      	beq.n	800e4e4 <__sflush_r+0x8c>
 800e4de:	4628      	mov	r0, r5
 800e4e0:	f7ff fab4 	bl	800da4c <_free_r>
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800e4e8:	e00d      	b.n	800e506 <__sflush_r+0xae>
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	4628      	mov	r0, r5
 800e4ee:	47b0      	blx	r6
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	1c50      	adds	r0, r2, #1
 800e4f4:	d1c9      	bne.n	800e48a <__sflush_r+0x32>
 800e4f6:	682b      	ldr	r3, [r5, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d0c6      	beq.n	800e48a <__sflush_r+0x32>
 800e4fc:	2b1d      	cmp	r3, #29
 800e4fe:	d001      	beq.n	800e504 <__sflush_r+0xac>
 800e500:	2b16      	cmp	r3, #22
 800e502:	d11e      	bne.n	800e542 <__sflush_r+0xea>
 800e504:	602f      	str	r7, [r5, #0]
 800e506:	2000      	movs	r0, #0
 800e508:	e022      	b.n	800e550 <__sflush_r+0xf8>
 800e50a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e50e:	b21b      	sxth	r3, r3
 800e510:	e01b      	b.n	800e54a <__sflush_r+0xf2>
 800e512:	690f      	ldr	r7, [r1, #16]
 800e514:	2f00      	cmp	r7, #0
 800e516:	d0f6      	beq.n	800e506 <__sflush_r+0xae>
 800e518:	0793      	lsls	r3, r2, #30
 800e51a:	680e      	ldr	r6, [r1, #0]
 800e51c:	bf08      	it	eq
 800e51e:	694b      	ldreq	r3, [r1, #20]
 800e520:	600f      	str	r7, [r1, #0]
 800e522:	bf18      	it	ne
 800e524:	2300      	movne	r3, #0
 800e526:	eba6 0807 	sub.w	r8, r6, r7
 800e52a:	608b      	str	r3, [r1, #8]
 800e52c:	f1b8 0f00 	cmp.w	r8, #0
 800e530:	dde9      	ble.n	800e506 <__sflush_r+0xae>
 800e532:	6a21      	ldr	r1, [r4, #32]
 800e534:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e536:	4643      	mov	r3, r8
 800e538:	463a      	mov	r2, r7
 800e53a:	4628      	mov	r0, r5
 800e53c:	47b0      	blx	r6
 800e53e:	2800      	cmp	r0, #0
 800e540:	dc08      	bgt.n	800e554 <__sflush_r+0xfc>
 800e542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e54a:	81a3      	strh	r3, [r4, #12]
 800e54c:	f04f 30ff 	mov.w	r0, #4294967295
 800e550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e554:	4407      	add	r7, r0
 800e556:	eba8 0800 	sub.w	r8, r8, r0
 800e55a:	e7e7      	b.n	800e52c <__sflush_r+0xd4>
 800e55c:	20400001 	.word	0x20400001

0800e560 <_fflush_r>:
 800e560:	b538      	push	{r3, r4, r5, lr}
 800e562:	690b      	ldr	r3, [r1, #16]
 800e564:	4605      	mov	r5, r0
 800e566:	460c      	mov	r4, r1
 800e568:	b913      	cbnz	r3, 800e570 <_fflush_r+0x10>
 800e56a:	2500      	movs	r5, #0
 800e56c:	4628      	mov	r0, r5
 800e56e:	bd38      	pop	{r3, r4, r5, pc}
 800e570:	b118      	cbz	r0, 800e57a <_fflush_r+0x1a>
 800e572:	6a03      	ldr	r3, [r0, #32]
 800e574:	b90b      	cbnz	r3, 800e57a <_fflush_r+0x1a>
 800e576:	f7fe fa65 	bl	800ca44 <__sinit>
 800e57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d0f3      	beq.n	800e56a <_fflush_r+0xa>
 800e582:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e584:	07d0      	lsls	r0, r2, #31
 800e586:	d404      	bmi.n	800e592 <_fflush_r+0x32>
 800e588:	0599      	lsls	r1, r3, #22
 800e58a:	d402      	bmi.n	800e592 <_fflush_r+0x32>
 800e58c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e58e:	f7fe fc64 	bl	800ce5a <__retarget_lock_acquire_recursive>
 800e592:	4628      	mov	r0, r5
 800e594:	4621      	mov	r1, r4
 800e596:	f7ff ff5f 	bl	800e458 <__sflush_r>
 800e59a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e59c:	07da      	lsls	r2, r3, #31
 800e59e:	4605      	mov	r5, r0
 800e5a0:	d4e4      	bmi.n	800e56c <_fflush_r+0xc>
 800e5a2:	89a3      	ldrh	r3, [r4, #12]
 800e5a4:	059b      	lsls	r3, r3, #22
 800e5a6:	d4e1      	bmi.n	800e56c <_fflush_r+0xc>
 800e5a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5aa:	f7fe fc57 	bl	800ce5c <__retarget_lock_release_recursive>
 800e5ae:	e7dd      	b.n	800e56c <_fflush_r+0xc>

0800e5b0 <__swhatbuf_r>:
 800e5b0:	b570      	push	{r4, r5, r6, lr}
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5b8:	2900      	cmp	r1, #0
 800e5ba:	b096      	sub	sp, #88	@ 0x58
 800e5bc:	4615      	mov	r5, r2
 800e5be:	461e      	mov	r6, r3
 800e5c0:	da0d      	bge.n	800e5de <__swhatbuf_r+0x2e>
 800e5c2:	89a3      	ldrh	r3, [r4, #12]
 800e5c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e5c8:	f04f 0100 	mov.w	r1, #0
 800e5cc:	bf14      	ite	ne
 800e5ce:	2340      	movne	r3, #64	@ 0x40
 800e5d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e5d4:	2000      	movs	r0, #0
 800e5d6:	6031      	str	r1, [r6, #0]
 800e5d8:	602b      	str	r3, [r5, #0]
 800e5da:	b016      	add	sp, #88	@ 0x58
 800e5dc:	bd70      	pop	{r4, r5, r6, pc}
 800e5de:	466a      	mov	r2, sp
 800e5e0:	f000 f848 	bl	800e674 <_fstat_r>
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	dbec      	blt.n	800e5c2 <__swhatbuf_r+0x12>
 800e5e8:	9901      	ldr	r1, [sp, #4]
 800e5ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e5ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e5f2:	4259      	negs	r1, r3
 800e5f4:	4159      	adcs	r1, r3
 800e5f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e5fa:	e7eb      	b.n	800e5d4 <__swhatbuf_r+0x24>

0800e5fc <__smakebuf_r>:
 800e5fc:	898b      	ldrh	r3, [r1, #12]
 800e5fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e600:	079d      	lsls	r5, r3, #30
 800e602:	4606      	mov	r6, r0
 800e604:	460c      	mov	r4, r1
 800e606:	d507      	bpl.n	800e618 <__smakebuf_r+0x1c>
 800e608:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e60c:	6023      	str	r3, [r4, #0]
 800e60e:	6123      	str	r3, [r4, #16]
 800e610:	2301      	movs	r3, #1
 800e612:	6163      	str	r3, [r4, #20]
 800e614:	b003      	add	sp, #12
 800e616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e618:	ab01      	add	r3, sp, #4
 800e61a:	466a      	mov	r2, sp
 800e61c:	f7ff ffc8 	bl	800e5b0 <__swhatbuf_r>
 800e620:	9f00      	ldr	r7, [sp, #0]
 800e622:	4605      	mov	r5, r0
 800e624:	4639      	mov	r1, r7
 800e626:	4630      	mov	r0, r6
 800e628:	f7fd fcbe 	bl	800bfa8 <_malloc_r>
 800e62c:	b948      	cbnz	r0, 800e642 <__smakebuf_r+0x46>
 800e62e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e632:	059a      	lsls	r2, r3, #22
 800e634:	d4ee      	bmi.n	800e614 <__smakebuf_r+0x18>
 800e636:	f023 0303 	bic.w	r3, r3, #3
 800e63a:	f043 0302 	orr.w	r3, r3, #2
 800e63e:	81a3      	strh	r3, [r4, #12]
 800e640:	e7e2      	b.n	800e608 <__smakebuf_r+0xc>
 800e642:	89a3      	ldrh	r3, [r4, #12]
 800e644:	6020      	str	r0, [r4, #0]
 800e646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e64a:	81a3      	strh	r3, [r4, #12]
 800e64c:	9b01      	ldr	r3, [sp, #4]
 800e64e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e652:	b15b      	cbz	r3, 800e66c <__smakebuf_r+0x70>
 800e654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e658:	4630      	mov	r0, r6
 800e65a:	f000 f81d 	bl	800e698 <_isatty_r>
 800e65e:	b128      	cbz	r0, 800e66c <__smakebuf_r+0x70>
 800e660:	89a3      	ldrh	r3, [r4, #12]
 800e662:	f023 0303 	bic.w	r3, r3, #3
 800e666:	f043 0301 	orr.w	r3, r3, #1
 800e66a:	81a3      	strh	r3, [r4, #12]
 800e66c:	89a3      	ldrh	r3, [r4, #12]
 800e66e:	431d      	orrs	r5, r3
 800e670:	81a5      	strh	r5, [r4, #12]
 800e672:	e7cf      	b.n	800e614 <__smakebuf_r+0x18>

0800e674 <_fstat_r>:
 800e674:	b538      	push	{r3, r4, r5, lr}
 800e676:	4d07      	ldr	r5, [pc, #28]	@ (800e694 <_fstat_r+0x20>)
 800e678:	2300      	movs	r3, #0
 800e67a:	4604      	mov	r4, r0
 800e67c:	4608      	mov	r0, r1
 800e67e:	4611      	mov	r1, r2
 800e680:	602b      	str	r3, [r5, #0]
 800e682:	f7f2 ffdb 	bl	800163c <_fstat>
 800e686:	1c43      	adds	r3, r0, #1
 800e688:	d102      	bne.n	800e690 <_fstat_r+0x1c>
 800e68a:	682b      	ldr	r3, [r5, #0]
 800e68c:	b103      	cbz	r3, 800e690 <_fstat_r+0x1c>
 800e68e:	6023      	str	r3, [r4, #0]
 800e690:	bd38      	pop	{r3, r4, r5, pc}
 800e692:	bf00      	nop
 800e694:	24000be4 	.word	0x24000be4

0800e698 <_isatty_r>:
 800e698:	b538      	push	{r3, r4, r5, lr}
 800e69a:	4d06      	ldr	r5, [pc, #24]	@ (800e6b4 <_isatty_r+0x1c>)
 800e69c:	2300      	movs	r3, #0
 800e69e:	4604      	mov	r4, r0
 800e6a0:	4608      	mov	r0, r1
 800e6a2:	602b      	str	r3, [r5, #0]
 800e6a4:	f7f2 ffda 	bl	800165c <_isatty>
 800e6a8:	1c43      	adds	r3, r0, #1
 800e6aa:	d102      	bne.n	800e6b2 <_isatty_r+0x1a>
 800e6ac:	682b      	ldr	r3, [r5, #0]
 800e6ae:	b103      	cbz	r3, 800e6b2 <_isatty_r+0x1a>
 800e6b0:	6023      	str	r3, [r4, #0]
 800e6b2:	bd38      	pop	{r3, r4, r5, pc}
 800e6b4:	24000be4 	.word	0x24000be4

0800e6b8 <__assert_func>:
 800e6b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6ba:	4614      	mov	r4, r2
 800e6bc:	461a      	mov	r2, r3
 800e6be:	4b09      	ldr	r3, [pc, #36]	@ (800e6e4 <__assert_func+0x2c>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	4605      	mov	r5, r0
 800e6c4:	68d8      	ldr	r0, [r3, #12]
 800e6c6:	b14c      	cbz	r4, 800e6dc <__assert_func+0x24>
 800e6c8:	4b07      	ldr	r3, [pc, #28]	@ (800e6e8 <__assert_func+0x30>)
 800e6ca:	9100      	str	r1, [sp, #0]
 800e6cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6d0:	4906      	ldr	r1, [pc, #24]	@ (800e6ec <__assert_func+0x34>)
 800e6d2:	462b      	mov	r3, r5
 800e6d4:	f000 f842 	bl	800e75c <fiprintf>
 800e6d8:	f000 f852 	bl	800e780 <abort>
 800e6dc:	4b04      	ldr	r3, [pc, #16]	@ (800e6f0 <__assert_func+0x38>)
 800e6de:	461c      	mov	r4, r3
 800e6e0:	e7f3      	b.n	800e6ca <__assert_func+0x12>
 800e6e2:	bf00      	nop
 800e6e4:	2400001c 	.word	0x2400001c
 800e6e8:	0800e9ed 	.word	0x0800e9ed
 800e6ec:	0800e9fa 	.word	0x0800e9fa
 800e6f0:	0800ea28 	.word	0x0800ea28

0800e6f4 <_calloc_r>:
 800e6f4:	b570      	push	{r4, r5, r6, lr}
 800e6f6:	fba1 5402 	umull	r5, r4, r1, r2
 800e6fa:	b934      	cbnz	r4, 800e70a <_calloc_r+0x16>
 800e6fc:	4629      	mov	r1, r5
 800e6fe:	f7fd fc53 	bl	800bfa8 <_malloc_r>
 800e702:	4606      	mov	r6, r0
 800e704:	b928      	cbnz	r0, 800e712 <_calloc_r+0x1e>
 800e706:	4630      	mov	r0, r6
 800e708:	bd70      	pop	{r4, r5, r6, pc}
 800e70a:	220c      	movs	r2, #12
 800e70c:	6002      	str	r2, [r0, #0]
 800e70e:	2600      	movs	r6, #0
 800e710:	e7f9      	b.n	800e706 <_calloc_r+0x12>
 800e712:	462a      	mov	r2, r5
 800e714:	4621      	mov	r1, r4
 800e716:	f7fe fb13 	bl	800cd40 <memset>
 800e71a:	e7f4      	b.n	800e706 <_calloc_r+0x12>

0800e71c <__ascii_mbtowc>:
 800e71c:	b082      	sub	sp, #8
 800e71e:	b901      	cbnz	r1, 800e722 <__ascii_mbtowc+0x6>
 800e720:	a901      	add	r1, sp, #4
 800e722:	b142      	cbz	r2, 800e736 <__ascii_mbtowc+0x1a>
 800e724:	b14b      	cbz	r3, 800e73a <__ascii_mbtowc+0x1e>
 800e726:	7813      	ldrb	r3, [r2, #0]
 800e728:	600b      	str	r3, [r1, #0]
 800e72a:	7812      	ldrb	r2, [r2, #0]
 800e72c:	1e10      	subs	r0, r2, #0
 800e72e:	bf18      	it	ne
 800e730:	2001      	movne	r0, #1
 800e732:	b002      	add	sp, #8
 800e734:	4770      	bx	lr
 800e736:	4610      	mov	r0, r2
 800e738:	e7fb      	b.n	800e732 <__ascii_mbtowc+0x16>
 800e73a:	f06f 0001 	mvn.w	r0, #1
 800e73e:	e7f8      	b.n	800e732 <__ascii_mbtowc+0x16>

0800e740 <__ascii_wctomb>:
 800e740:	4603      	mov	r3, r0
 800e742:	4608      	mov	r0, r1
 800e744:	b141      	cbz	r1, 800e758 <__ascii_wctomb+0x18>
 800e746:	2aff      	cmp	r2, #255	@ 0xff
 800e748:	d904      	bls.n	800e754 <__ascii_wctomb+0x14>
 800e74a:	228a      	movs	r2, #138	@ 0x8a
 800e74c:	601a      	str	r2, [r3, #0]
 800e74e:	f04f 30ff 	mov.w	r0, #4294967295
 800e752:	4770      	bx	lr
 800e754:	700a      	strb	r2, [r1, #0]
 800e756:	2001      	movs	r0, #1
 800e758:	4770      	bx	lr
	...

0800e75c <fiprintf>:
 800e75c:	b40e      	push	{r1, r2, r3}
 800e75e:	b503      	push	{r0, r1, lr}
 800e760:	4601      	mov	r1, r0
 800e762:	ab03      	add	r3, sp, #12
 800e764:	4805      	ldr	r0, [pc, #20]	@ (800e77c <fiprintf+0x20>)
 800e766:	f853 2b04 	ldr.w	r2, [r3], #4
 800e76a:	6800      	ldr	r0, [r0, #0]
 800e76c:	9301      	str	r3, [sp, #4]
 800e76e:	f7ff fd5b 	bl	800e228 <_vfiprintf_r>
 800e772:	b002      	add	sp, #8
 800e774:	f85d eb04 	ldr.w	lr, [sp], #4
 800e778:	b003      	add	sp, #12
 800e77a:	4770      	bx	lr
 800e77c:	2400001c 	.word	0x2400001c

0800e780 <abort>:
 800e780:	b508      	push	{r3, lr}
 800e782:	2006      	movs	r0, #6
 800e784:	f000 f82c 	bl	800e7e0 <raise>
 800e788:	2001      	movs	r0, #1
 800e78a:	f7f2 ff07 	bl	800159c <_exit>

0800e78e <_raise_r>:
 800e78e:	291f      	cmp	r1, #31
 800e790:	b538      	push	{r3, r4, r5, lr}
 800e792:	4605      	mov	r5, r0
 800e794:	460c      	mov	r4, r1
 800e796:	d904      	bls.n	800e7a2 <_raise_r+0x14>
 800e798:	2316      	movs	r3, #22
 800e79a:	6003      	str	r3, [r0, #0]
 800e79c:	f04f 30ff 	mov.w	r0, #4294967295
 800e7a0:	bd38      	pop	{r3, r4, r5, pc}
 800e7a2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e7a4:	b112      	cbz	r2, 800e7ac <_raise_r+0x1e>
 800e7a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e7aa:	b94b      	cbnz	r3, 800e7c0 <_raise_r+0x32>
 800e7ac:	4628      	mov	r0, r5
 800e7ae:	f000 f831 	bl	800e814 <_getpid_r>
 800e7b2:	4622      	mov	r2, r4
 800e7b4:	4601      	mov	r1, r0
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7bc:	f000 b818 	b.w	800e7f0 <_kill_r>
 800e7c0:	2b01      	cmp	r3, #1
 800e7c2:	d00a      	beq.n	800e7da <_raise_r+0x4c>
 800e7c4:	1c59      	adds	r1, r3, #1
 800e7c6:	d103      	bne.n	800e7d0 <_raise_r+0x42>
 800e7c8:	2316      	movs	r3, #22
 800e7ca:	6003      	str	r3, [r0, #0]
 800e7cc:	2001      	movs	r0, #1
 800e7ce:	e7e7      	b.n	800e7a0 <_raise_r+0x12>
 800e7d0:	2100      	movs	r1, #0
 800e7d2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	4798      	blx	r3
 800e7da:	2000      	movs	r0, #0
 800e7dc:	e7e0      	b.n	800e7a0 <_raise_r+0x12>
	...

0800e7e0 <raise>:
 800e7e0:	4b02      	ldr	r3, [pc, #8]	@ (800e7ec <raise+0xc>)
 800e7e2:	4601      	mov	r1, r0
 800e7e4:	6818      	ldr	r0, [r3, #0]
 800e7e6:	f7ff bfd2 	b.w	800e78e <_raise_r>
 800e7ea:	bf00      	nop
 800e7ec:	2400001c 	.word	0x2400001c

0800e7f0 <_kill_r>:
 800e7f0:	b538      	push	{r3, r4, r5, lr}
 800e7f2:	4d07      	ldr	r5, [pc, #28]	@ (800e810 <_kill_r+0x20>)
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	4608      	mov	r0, r1
 800e7fa:	4611      	mov	r1, r2
 800e7fc:	602b      	str	r3, [r5, #0]
 800e7fe:	f7f2 febd 	bl	800157c <_kill>
 800e802:	1c43      	adds	r3, r0, #1
 800e804:	d102      	bne.n	800e80c <_kill_r+0x1c>
 800e806:	682b      	ldr	r3, [r5, #0]
 800e808:	b103      	cbz	r3, 800e80c <_kill_r+0x1c>
 800e80a:	6023      	str	r3, [r4, #0]
 800e80c:	bd38      	pop	{r3, r4, r5, pc}
 800e80e:	bf00      	nop
 800e810:	24000be4 	.word	0x24000be4

0800e814 <_getpid_r>:
 800e814:	f7f2 beaa 	b.w	800156c <_getpid>

0800e818 <_init>:
 800e818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e81a:	bf00      	nop
 800e81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e81e:	bc08      	pop	{r3}
 800e820:	469e      	mov	lr, r3
 800e822:	4770      	bx	lr

0800e824 <_fini>:
 800e824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e826:	bf00      	nop
 800e828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e82a:	bc08      	pop	{r3}
 800e82c:	469e      	mov	lr, r3
 800e82e:	4770      	bx	lr
